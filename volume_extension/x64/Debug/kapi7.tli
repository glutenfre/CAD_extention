// Created by Microsoft (R) C/C++ Compiler Version 14.29.30148.0 (15883836).
//
// C:\Users\Ivan\source\repos\volume_extension\volume_extension\x64\Debug\kapi7.tli
//
// Wrapper implementations for Win32 type library kAPI7.tlb
// compiler-generated file created 03/18/23 at 18:40:08 - DO NOT EDIT!


//
// interface ISaveAsDetailParam wrapper method implementations
//

#pragma implementation_key(1)
inline _bstr_t ISaveAsDetailParam::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2)
inline void ISaveAsDetailParam::PutFileName ( _bstr_t Result ) {
    HRESULT _hr = put_FileName(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3)
inline _bstr_t ISaveAsDetailParam::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4)
inline void ISaveAsDetailParam::PutName ( _bstr_t Result ) {
    HRESULT _hr = put_Name(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5)
inline _bstr_t ISaveAsDetailParam::GetMarking ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Marking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6)
inline void ISaveAsDetailParam::PutMarking ( _bstr_t Result ) {
    HRESULT _hr = put_Marking(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7)
inline void ISaveAsDetailParam::PutLocal ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Local(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(8)
inline VARIANT_BOOL ISaveAsDetailParam::GetLocal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(9)
inline VARIANT_BOOL ISaveAsDetailParam::GetLayoutGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LayoutGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline void ISaveAsDetailParam::PutLayoutGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_LayoutGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(11)
inline VARIANT_BOOL ISaveAsDetailParam::GetUnhistored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Unhistored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(12)
inline void ISaveAsDetailParam::PutUnhistored ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Unhistored(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(13)
inline VARIANT_BOOL ISaveAsDetailParam::GetMirror ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Mirror(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(14)
inline void ISaveAsDetailParam::PutMirror ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Mirror(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(15)
inline void ISaveAsDetailParam::PutSaveInitialObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveInitialObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(16)
inline VARIANT_BOOL ISaveAsDetailParam::GetSaveInitialObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveInitialObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IHatchParam wrapper method implementations
//

#pragma implementation_key(17)
inline long IHatchParam::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(18)
inline void IHatchParam::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(19)
inline long IHatchParam::GetHatchColor ( ) {
    long _result = 0;
    HRESULT _hr = get_HatchColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(20)
inline void IHatchParam::PutHatchColor ( long Result ) {
    HRESULT _hr = put_HatchColor(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(21)
inline double IHatchParam::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(22)
inline void IHatchParam::PutStep ( double Result ) {
    HRESULT _hr = put_Step(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(23)
inline double IHatchParam::GetHatchAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_HatchAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(24)
inline void IHatchParam::PutHatchAngle ( double Result ) {
    HRESULT _hr = put_HatchAngle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(25)
inline VARIANT_BOOL IHatchParam::GetHatchType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HatchType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(26)
inline void IHatchParam::PutHatchType ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_HatchType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(27)
inline double IHatchParam::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(28)
inline void IHatchParam::PutWidth ( double Result ) {
    HRESULT _hr = put_Width(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(29)
inline VARIANT_BOOL IHatchParam::GetIsSheetAngle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSheetAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline void IHatchParam::PutIsSheetAngle ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_IsSheetAngle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(31)
inline _bstr_t IHatchParam::GetHatchFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HatchFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(32)
inline double IHatchParam::GetLibraryStyleNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_LibraryStyleNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(33)
inline VARIANT_BOOL IHatchParam::AddStyleFromLibrary ( _bstr_t FileName, double StyleNumber ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddStyleFromLibrary(FileName, StyleNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDimensionParams wrapper method implementations
//

#pragma implementation_key(34)
inline VARIANT_BOOL IDimensionParams::GetRemoteLine1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoteLine1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(35)
inline void IDimensionParams::PutRemoteLine1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RemoteLine1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(36)
inline VARIANT_BOOL IDimensionParams::GetRemoteLine2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoteLine2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(37)
inline void IDimensionParams::PutRemoteLine2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RemoteLine2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(38)
inline enum ksArrowEnum IDimensionParams::GetArrowType1 ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(39)
inline void IDimensionParams::PutArrowType1 ( enum ksArrowEnum PVal ) {
    HRESULT _hr = put_ArrowType1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(40)
inline enum ksArrowEnum IDimensionParams::GetArrowType2 ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(41)
inline void IDimensionParams::PutArrowType2 ( enum ksArrowEnum PVal ) {
    HRESULT _hr = put_ArrowType2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(42)
inline enum ksDimensionArrowPosEnum IDimensionParams::GetArrowPos ( ) {
    enum ksDimensionArrowPosEnum _result;
    HRESULT _hr = get_ArrowPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(43)
inline void IDimensionParams::PutArrowPos ( enum ksDimensionArrowPosEnum PVal ) {
    HRESULT _hr = put_ArrowPos(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(44)
inline long IDimensionParams::GetTextPos ( ) {
    long _result = 0;
    HRESULT _hr = get_TextPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline void IDimensionParams::PutTextPos ( long PVal ) {
    HRESULT _hr = put_TextPos(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(46)
inline enum ksDimensionTextTypeEnum IDimensionParams::GetTextType ( ) {
    enum ksDimensionTextTypeEnum _result;
    HRESULT _hr = get_TextType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(47)
inline void IDimensionParams::PutTextType ( enum ksDimensionTextTypeEnum PVal ) {
    HRESULT _hr = put_TextType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(48)
inline enum ksDimensionTextPosEnum IDimensionParams::GetTextOnLine ( ) {
    enum ksDimensionTextPosEnum _result;
    HRESULT _hr = get_TextOnLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline void IDimensionParams::PutTextOnLine ( enum ksDimensionTextPosEnum PVal ) {
    HRESULT _hr = put_TextOnLine(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline enum ksDimensionBaseEnum IDimensionParams::GetTextBase ( ) {
    enum ksDimensionBaseEnum _result;
    HRESULT _hr = get_TextBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(51)
inline void IDimensionParams::PutTextBase ( enum ksDimensionBaseEnum PVal ) {
    HRESULT _hr = put_TextBase(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(52)
inline enum ksShelfDirectionEnum IDimensionParams::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(53)
inline void IDimensionParams::PutShelfDirection ( enum ksShelfDirectionEnum PVal ) {
    HRESULT _hr = put_ShelfDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline double IDimensionParams::GetShelfAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline void IDimensionParams::PutShelfAngle ( double PVal ) {
    HRESULT _hr = put_ShelfAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(56)
inline double IDimensionParams::GetShelfLength ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(57)
inline void IDimensionParams::PutShelfLength ( double PVal ) {
    HRESULT _hr = put_ShelfLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline VARIANT_BOOL IDimensionParams::GetGap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(59)
inline void IDimensionParams::PutGap ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Gap(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(60)
inline long IDimensionParams::GetGapValue ( ) {
    long _result = 0;
    HRESULT _hr = get_GapValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(61)
inline void IDimensionParams::PutGapValue ( long PVal ) {
    HRESULT _hr = put_GapValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(62)
inline VARIANT_BOOL IDimensionParams::InitDefaultValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitDefaultValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILoadCombination wrapper method implementations
//

#pragma implementation_key(63)
inline VARIANT_BOOL ILoadCombination::GetCompletelyLoaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CompletelyLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(64)
inline _variant_t ILoadCombination::GetLoadCombinations ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LoadCombinations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(65)
inline long ILoadCombination::GetCurrentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(66)
inline long ILoadCombination::Create ( _bstr_t CombinationName ) {
    long _result = 0;
    HRESULT _hr = raw_Create(CombinationName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(67)
inline VARIANT_BOOL ILoadCombination::Delete ( const _variant_t & LoadCombinationIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(LoadCombinationIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(68)
inline VARIANT_BOOL ILoadCombination::Apply ( const _variant_t & LoadCombinationIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Apply(LoadCombinationIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(69)
inline VARIANT_BOOL ILoadCombination::DeleteEx ( const _variant_t & LoadCombinationIndex, _bstr_t Password, VARIANT_BOOL DeleteDependant ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteEx(LoadCombinationIndex, Password, DeleteDependant, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(70)
inline VARIANT_BOOL ILoadCombination::ApplyEx ( const _variant_t & LoadCombinationIndex, _bstr_t Password ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ApplyEx(LoadCombinationIndex, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(71)
inline VARIANT_BOOL ILoadCombination::SetPassword ( const _variant_t & LoadCombinationIndex, _bstr_t OldPassword, _bstr_t Password, VARIANT_BOOL UnprotectUsers ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPassword(LoadCombinationIndex, OldPassword, Password, UnprotectUsers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(72)
inline VARIANT_BOOL ILoadCombination::UpdateByModel ( const _variant_t & LoadCombinationIndex, _bstr_t Password ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UpdateByModel(LoadCombinationIndex, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline VARIANT_BOOL ILoadCombination::SetLoadCombinationComment ( const _variant_t & LoadCombinationIndex, _bstr_t NewVal, _bstr_t Password ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLoadCombinationComment(LoadCombinationIndex, NewVal, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(74)
inline _bstr_t ILoadCombination::GetLoadCombinationComment ( const _variant_t & LoadCombinationIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLoadCombinationComment(LoadCombinationIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(75)
inline VARIANT_BOOL ILoadCombination::SetLoadCombinationName ( const _variant_t & LoadCombinationIndex, _bstr_t NewVal, _bstr_t Password ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLoadCombinationName(LoadCombinationIndex, NewVal, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(76)
inline _bstr_t ILoadCombination::GetLoadCombinationName ( const _variant_t & LoadCombinationIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLoadCombinationName(LoadCombinationIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(77)
inline _variant_t ILoadCombination::GetProtectedFlags ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ProtectedFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(78)
inline void ILoadCombination::PutCurrentIndex ( long Value ) {
    HRESULT _hr = put_CurrentIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFrameTreesManager wrapper method implementations
//

#pragma implementation_key(79)
inline IDispatchPtr IFrameTreesManager::AddTab ( _bstr_t TabCaption, _bstr_t OcxClassID ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AddTab(TabCaption, OcxClassID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(80)
inline VARIANT_BOOL IFrameTreesManager::RemoveTab ( IDispatch * Ocx ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveTab(Ocx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline IDispatchPtr IFrameTreesManager::GetActiveTab ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ActiveTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(82)
inline void IFrameTreesManager::PutActiveTab ( IDispatch * Ocx ) {
    HRESULT _hr = put_ActiveTab(Ocx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(83)
inline VARIANT_BOOL IFrameTreesManager::GetTabsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TabsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(84)
inline void IFrameTreesManager::PutTabsVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TabsVisible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(85)
inline _bstr_t IFrameTreesManager::GetTreeCaption ( IDispatch * Ocx ) {
    BSTR _result = 0;
    HRESULT _hr = get_TreeCaption(Ocx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(86)
inline void IFrameTreesManager::PutTreeCaption ( IDispatch * Ocx, _bstr_t PVal ) {
    HRESULT _hr = put_TreeCaption(Ocx, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(87)
inline IDispatchPtr IFrameTreesManager::AddTabEx ( _bstr_t TabCaption, _bstr_t TreeCaption, _bstr_t OcxClassID, VARIANT_BOOL Active, enum PropertyManagerLayout Layout ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AddTabEx(TabCaption, TreeCaption, OcxClassID, Active, Layout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(88)
inline VARIANT_BOOL IFrameTreesManager::GetTabVisible ( IDispatch * Ocx ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TabVisible(Ocx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline void IFrameTreesManager::PutTabVisible ( IDispatch * Ocx, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TabVisible(Ocx, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPrintJob_OutputParameters wrapper method implementations
//

#pragma implementation_key(90)
inline void IPrintJob_OutputParameters::PutNumberOfCopies ( long PVal ) {
    HRESULT _hr = put_NumberOfCopies(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(91)
inline long IPrintJob_OutputParameters::GetNumberOfCopies ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(92)
inline void IPrintJob_OutputParameters::PutCollateCopies ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CollateCopies(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(93)
inline VARIANT_BOOL IPrintJob_OutputParameters::GetCollateCopies ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CollateCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline void IPrintJob_OutputParameters::PutPlotToFile ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PlotToFile(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(95)
inline VARIANT_BOOL IPrintJob_OutputParameters::GetPlotToFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotToFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(96)
inline void IPrintJob_OutputParameters::PutColor ( enum ksOutputColorTypeEnum PVal ) {
    HRESULT _hr = put_Color(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(97)
inline enum ksOutputColorTypeEnum IPrintJob_OutputParameters::GetColor ( ) {
    enum ksOutputColorTypeEnum _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(98)
inline void IPrintJob_OutputParameters::PutOnlyThinLines ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_OnlyThinLines(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(99)
inline VARIANT_BOOL IPrintJob_OutputParameters::GetOnlyThinLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnlyThinLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(100)
inline void IPrintJob_OutputParameters::PutAlternativeFillingOutput ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AlternativeFillingOutput(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(101)
inline VARIANT_BOOL IPrintJob_OutputParameters::GetAlternativeFillingOutput ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlternativeFillingOutput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(102)
inline void IPrintJob_OutputParameters::PutAccuracyModelOutput ( long PVal ) {
    HRESULT _hr = put_AccuracyModelOutput(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(103)
inline long IPrintJob_OutputParameters::GetAccuracyModelOutput ( ) {
    long _result = 0;
    HRESULT _hr = get_AccuracyModelOutput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(104)
inline void IPrintJob_OutputParameters::PutPageOutputOrder ( long PVal ) {
    HRESULT _hr = put_PageOutputOrder(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(105)
inline long IPrintJob_OutputParameters::GetPageOutputOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_PageOutputOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(106)
inline void IPrintJob_OutputParameters::PutDefaultScale ( double PVal ) {
    HRESULT _hr = put_DefaultScale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(107)
inline double IPrintJob_OutputParameters::GetDefaultScale ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline void IPrintJob_OutputParameters::PutAutoScale ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoScale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(109)
inline VARIANT_BOOL IPrintJob_OutputParameters::GetAutoScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline void IPrintJob_OutputParameters::PutUseCatchSpacing ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseCatchSpacing(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline VARIANT_BOOL IPrintJob_OutputParameters::GetUseCatchSpacing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCatchSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(112)
inline void IPrintJob_OutputParameters::PutCatchSpacing ( long PVal ) {
    HRESULT _hr = put_CatchSpacing(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(113)
inline long IPrintJob_OutputParameters::GetCatchSpacing ( ) {
    long _result = 0;
    HRESULT _hr = get_CatchSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline void IPrintJob_OutputParameters::PutUseHooking ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseHooking(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline VARIANT_BOOL IPrintJob_OutputParameters::GetUseHooking ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseHooking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline void IPrintJob_OutputParameters::PutHooking ( long PVal ) {
    HRESULT _hr = put_Hooking(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(117)
inline long IPrintJob_OutputParameters::GetHooking ( ) {
    long _result = 0;
    HRESULT _hr = get_Hooking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPrintJob_PrinterSettings wrapper method implementations
//

#pragma implementation_key(118)
inline VARIANT_BOOL IPrintJob_PrinterSettings::InitPrinterSettings ( _bstr_t DeviceName, VARIANT_BOOL IsPortraitPage, long PaperSize, long PaperLength, long PaperWidth, long PaperSource ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitPrinterSettings(DeviceName, IsPortraitPage, PaperSize, PaperLength, PaperWidth, PaperSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline _bstr_t IPrintJob_PrinterSettings::GetDeviceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(120)
inline _bstr_t IPrintJob_PrinterSettings::GetPort ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(121)
inline VARIANT_BOOL IPrintJob_PrinterSettings::LoadPrinterConfig ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadPrinterConfig(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(122)
inline VARIANT_BOOL IPrintJob_PrinterSettings::SavePrinterConfig ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SavePrinterConfig(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(123)
inline void IPrintJob_PrinterSettings::PutIsPortraitPage ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IsPortraitPage(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline VARIANT_BOOL IPrintJob_PrinterSettings::GetIsPortraitPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPortraitPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(125)
inline void IPrintJob_PrinterSettings::PutPaperSize ( long PVal ) {
    HRESULT _hr = put_PaperSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(126)
inline long IPrintJob_PrinterSettings::GetPaperSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline void IPrintJob_PrinterSettings::PutPaperSource ( long PVal ) {
    HRESULT _hr = put_PaperSource(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(128)
inline long IPrintJob_PrinterSettings::GetPaperSource ( ) {
    long _result = 0;
    HRESULT _hr = get_PaperSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline void IPrintJob_PrinterSettings::PutPaperLength ( long PVal ) {
    HRESULT _hr = put_PaperLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline long IPrintJob_PrinterSettings::GetPaperLength ( ) {
    long _result = 0;
    HRESULT _hr = get_PaperLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline void IPrintJob_PrinterSettings::PutPaperWidth ( long PVal ) {
    HRESULT _hr = put_PaperWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(132)
inline long IPrintJob_PrinterSettings::GetPaperWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_PaperWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline enum ksPrinterTypeEnum IPrintJob_PrinterSettings::GetPrinterType ( ) {
    enum ksPrinterTypeEnum _result;
    HRESULT _hr = get_PrinterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline void IPrintJob_PrinterSettings::PutPrinterType ( enum ksPrinterTypeEnum PVal ) {
    HRESULT _hr = put_PrinterType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISaveToPreviusParam7 wrapper method implementations
//

#pragma implementation_key(135)
inline VARIANT_BOOL ISaveToPreviusParam7::AddWarning ( _bstr_t UniqueId, _bstr_t OptionName, _bstr_t Text ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddWarning(UniqueId, OptionName, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline VARIANT_BOOL ISaveToPreviusParam7::AddOption ( _bstr_t UniqueId, _bstr_t OptionName, const _variant_t & Options, _bstr_t DefaultValue ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddOption(UniqueId, OptionName, Options, DefaultValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline _bstr_t ISaveToPreviusParam7::GetCurrentOptionValue ( _bstr_t UniqueId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCurrentOptionValue(UniqueId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IUserMetadataManager wrapper method implementations
//

#pragma implementation_key(138)
inline VARIANT_BOOL IUserMetadataManager::CreateStorage ( _bstr_t ApplicationIID, _bstr_t ApplicationDescription, _bstr_t Version ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CreateStorage(ApplicationIID, ApplicationDescription, Version, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline VARIANT_BOOL IUserMetadataManager::ExistStorage ( _bstr_t ApplicationIID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExistStorage(ApplicationIID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(140)
inline VARIANT_BOOL IUserMetadataManager::DeleteStorage ( _bstr_t ApplicationIID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteStorage(ApplicationIID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(141)
inline _variant_t IUserMetadataManager::GetAllFilenames ( _bstr_t ApplicationIID ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAllFilenames(ApplicationIID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(142)
inline _bstr_t IUserMetadataManager::GetStorageInfo ( _bstr_t ApplicationIID, _bstr_t ParameterName ) {
    BSTR _result = 0;
    HRESULT _hr = get_StorageInfo(ApplicationIID, ParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(143)
inline void IUserMetadataManager::PutStorageInfo ( _bstr_t ApplicationIID, _bstr_t ParameterName, _bstr_t Result ) {
    HRESULT _hr = put_StorageInfo(ApplicationIID, ParameterName, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(144)
inline VARIANT_BOOL IUserMetadataManager::DeleteFile ( _bstr_t ApplicationIID, _bstr_t StorageFileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteFile(ApplicationIID, StorageFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(145)
inline VARIANT_BOOL IUserMetadataManager::IsExistFile ( _bstr_t ApplicationIID, _bstr_t StorageFileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsExistFile(ApplicationIID, StorageFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline VARIANT_BOOL IUserMetadataManager::AddFile ( _bstr_t ApplicationIID, _bstr_t SrcFileName, _bstr_t DestFileName, VARIANT_BOOL AllowReplacement, VARIANT_BOOL Compress ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddFile(ApplicationIID, SrcFileName, DestFileName, AllowReplacement, Compress, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(147)
inline VARIANT_BOOL IUserMetadataManager::ExtractFile ( _bstr_t ApplicationIID, _bstr_t SrcFileName, _bstr_t DestFileName, VARIANT_BOOL AllowReplacement ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExtractFile(ApplicationIID, SrcFileName, DestFileName, AllowReplacement, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IIntervalVariable wrapper method implementations
//

#pragma implementation_key(148)
inline double IIntervalVariable::GetFirstValue ( ) {
    double _result = 0;
    HRESULT _hr = get_FirstValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline void IIntervalVariable::PutFirstValue ( double Result ) {
    HRESULT _hr = put_FirstValue(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(150)
inline double IIntervalVariable::GetSecondValue ( ) {
    double _result = 0;
    HRESULT _hr = get_SecondValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(151)
inline void IIntervalVariable::PutSecondValue ( double Result ) {
    HRESULT _hr = put_SecondValue(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IReportFilter wrapper method implementations
//

#pragma implementation_key(152)
inline long IReportFilter::GetConditionCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ConditionCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(153)
inline VARIANT_BOOL IReportFilter::GetCondition ( long Index, VARIANT * UniqId, enum ksReportFiltersTypeEnum * Type, VARIANT * Val ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCondition(Index, UniqId, Type, Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline VARIANT_BOOL IReportFilter::SetCondition ( long Index, const _variant_t & UniqId, enum ksReportFiltersTypeEnum Type, const _variant_t & Val ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCondition(Index, UniqId, Type, Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline VARIANT_BOOL IReportFilter::RemoveCondition ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveCondition(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(156)
inline VARIANT_BOOL IReportFilter::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IReportObjectsFilter wrapper method implementations
//

#pragma implementation_key(157)
inline VARIANT_BOOL IReportObjectsFilter::GetModelObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline void IReportObjectsFilter::PutModelObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ModelObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(159)
inline VARIANT_BOOL IReportObjectsFilter::GetInsertionViews ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InsertionViews(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(160)
inline void IReportObjectsFilter::PutInsertionViews ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InsertionViews(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(161)
inline VARIANT_BOOL IReportObjectsFilter::GetInsertionFragments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InsertionFragments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline void IReportObjectsFilter::PutInsertionFragments ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InsertionFragments(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(163)
inline VARIANT_BOOL IReportObjectsFilter::GetMacroObjects2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MacroObjects2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(164)
inline void IReportObjectsFilter::PutMacroObjects2D ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MacroObjects2D(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(165)
inline VARIANT_BOOL IReportObjectsFilter::GetParts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Parts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(166)
inline void IReportObjectsFilter::PutParts ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Parts(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(167)
inline VARIANT_BOOL IReportObjectsFilter::GetLocalParts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LocalParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(168)
inline void IReportObjectsFilter::PutLocalParts ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_LocalParts(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(169)
inline VARIANT_BOOL IReportObjectsFilter::GetBodies ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(170)
inline void IReportObjectsFilter::PutBodies ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Bodies(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(171)
inline VARIANT_BOOL IReportObjectsFilter::GetViews ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline void IReportObjectsFilter::PutViews ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Views(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(173)
inline VARIANT_BOOL IReportObjectsFilter::GetSpecialInfoObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SpecialInfoObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(174)
inline void IReportObjectsFilter::PutSpecialInfoObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SpecialInfoObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IReportParam wrapper method implementations
//

#pragma implementation_key(175)
inline enum ksReportBuildingTypeEnum IReportParam::GetBuildingType ( ) {
    enum ksReportBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(176)
inline void IReportParam::PutBuildingType ( enum ksReportBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(177)
inline long IReportParam::GetLevelsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LevelsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline void IReportParam::PutLevelsCount ( long PVal ) {
    HRESULT _hr = put_LevelsCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline enum ksPageLayoutTypeEnum IReportParam::GetPageLayoutType ( ) {
    enum ksPageLayoutTypeEnum _result;
    HRESULT _hr = get_PageLayoutType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline void IReportParam::PutPageLayoutType ( enum ksPageLayoutTypeEnum PVal ) {
    HRESULT _hr = put_PageLayoutType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(181)
inline long IReportParam::GetPagesRowsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PagesRowsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(182)
inline void IReportParam::PutPagesRowsCount ( long PVal ) {
    HRESULT _hr = put_PagesRowsCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(183)
inline long IReportParam::GetPagesColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PagesColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline void IReportParam::PutPagesColumnsCount ( long PVal ) {
    HRESULT _hr = put_PagesColumnsCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(185)
inline double IReportParam::GetPagesSpace ( ) {
    double _result = 0;
    HRESULT _hr = get_PagesSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(186)
inline void IReportParam::PutPagesSpace ( double PVal ) {
    HRESULT _hr = put_PagesSpace(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(187)
inline VARIANT_BOOL IReportParam::GetUseHyperText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseHyperText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(188)
inline void IReportParam::PutUseHyperText ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseHyperText(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPropertyControl1 wrapper method implementations
//

#pragma implementation_key(189)
inline void IPropertyControl1::PutPredefineNumber ( long PVal ) {
    HRESULT _hr = put_PredefineNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(190)
inline long IPropertyControl1::GetPredefineNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_PredefineNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline void IPropertyControl1::PutUserMenu ( OLE_HANDLE PVal ) {
    HRESULT _hr = put_UserMenu(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(192)
inline OLE_HANDLE IPropertyControl1::GetUserMenu ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = get_UserMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(193)
inline void IPropertyControl1::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(194)
inline _variant_t IPropertyControl1::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(195)
inline void IPropertyControl1::PutImage ( const _variant_t & Bmp ) {
    HRESULT _hr = put_Image(Bmp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(196)
inline _variant_t IPropertyControl1::GetImage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(197)
inline OLE_HANDLE IPropertyControl1::GetHWND ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = raw_GetHWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(198)
inline VARIANT_BOOL IPropertyControl1::AddAdditionButton ( long BtnID, const _variant_t & Bmp, _bstr_t Tips, _bstr_t IconFont ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddAdditionButton(BtnID, Bmp, Tips, IconFont, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline VARIANT_BOOL IPropertyControl1::AddAdditionCheckButton ( long BtnID, const _variant_t & BmpChecked, const _variant_t & BmpUnChecked, const _variant_t & BmpUndefine, _bstr_t Tips, _bstr_t IconFont ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddAdditionCheckButton(BtnID, BmpChecked, BmpUnChecked, BmpUndefine, Tips, IconFont, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(200)
inline void IPropertyControl1::PutAdditionButtonVisible ( long BtnID, VARIANT_BOOL Visible ) {
    HRESULT _hr = put_AdditionButtonVisible(BtnID, Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(201)
inline VARIANT_BOOL IPropertyControl1::GetAdditionButtonVisible ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdditionButtonVisible(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline void IPropertyControl1::PutAdditionButtonChecked ( long BtnID, VARIANT_BOOL Checked ) {
    HRESULT _hr = put_AdditionButtonChecked(BtnID, Checked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(203)
inline VARIANT_BOOL IPropertyControl1::GetAdditionButtonChecked ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdditionButtonChecked(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline void IPropertyControl1::PutAdditionButtonEnable ( long BtnID, VARIANT_BOOL Enable ) {
    HRESULT _hr = put_AdditionButtonEnable(BtnID, Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(205)
inline VARIANT_BOOL IPropertyControl1::GetAdditionButtonEnable ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdditionButtonEnable(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline void IPropertyControl1::PutHyperLinkNameStyle ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_HyperLinkNameStyle(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline VARIANT_BOOL IPropertyControl1::GetHyperLinkNameStyle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HyperLinkNameStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline void IPropertyControl1::PutNeedMouseEnterLeaveMessages ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NeedMouseEnterLeaveMessages(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(209)
inline VARIANT_BOOL IPropertyControl1::GetNeedMouseEnterLeaveMessages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NeedMouseEnterLeaveMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(210)
inline void IPropertyControl1::PutAdditionButtonNeedMouseEnterLeaveMessages ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AdditionButtonNeedMouseEnterLeaveMessages(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(211)
inline VARIANT_BOOL IPropertyControl1::GetAdditionButtonNeedMouseEnterLeaveMessages ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdditionButtonNeedMouseEnterLeaveMessages(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyToolBar wrapper method implementations
//

#pragma implementation_key(212)
inline void IPropertyToolBar::PutButtonChecked ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonChecked(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(213)
inline VARIANT_BOOL IPropertyToolBar::GetButtonChecked ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonChecked(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(214)
inline void IPropertyToolBar::PutButtonEnable ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonEnable(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(215)
inline VARIANT_BOOL IPropertyToolBar::GetButtonEnable ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonEnable(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline HRESULT IPropertyToolBar::AddButton ( long BtnID, const _variant_t & Bmp, long InsertAt ) {
    HRESULT _hr = raw_AddButton(BtnID, Bmp, InsertAt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(217)
inline void IPropertyToolBar::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(218)
inline _variant_t IPropertyToolBar::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(219)
inline void IPropertyToolBar::PutButtonTips ( long BtnID, _bstr_t PVal ) {
    HRESULT _hr = put_ButtonTips(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(220)
inline _bstr_t IPropertyToolBar::GetButtonTips ( long BtnID ) {
    BSTR _result = 0;
    HRESULT _hr = get_ButtonTips(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(221)
inline void IPropertyToolBar::PutButtonHint ( long BtnID, _bstr_t PVal ) {
    HRESULT _hr = put_ButtonHint(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(222)
inline _bstr_t IPropertyToolBar::GetButtonHint ( long BtnID ) {
    BSTR _result = 0;
    HRESULT _hr = get_ButtonHint(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(223)
inline void IPropertyToolBar::PutButtonType ( long BtnID, enum ButtonTypeEnum PVal ) {
    HRESULT _hr = put_ButtonType(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(224)
inline enum ButtonTypeEnum IPropertyToolBar::GetButtonType ( long BtnID ) {
    enum ButtonTypeEnum _result;
    HRESULT _hr = get_ButtonType(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(225)
inline void IPropertyToolBar::PutButtonVisible ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonVisible(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(226)
inline VARIANT_BOOL IPropertyToolBar::GetButtonVisible ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonVisible(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(227)
inline void IPropertyToolBar::PutButtonIconFont ( long BtnID, _bstr_t PVal ) {
    HRESULT _hr = put_ButtonIconFont(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(228)
inline _bstr_t IPropertyToolBar::GetButtonIconFont ( long BtnID ) {
    BSTR _result = 0;
    HRESULT _hr = get_ButtonIconFont(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IProcessInfoWindow wrapper method implementations
//

#pragma implementation_key(229)
inline void IProcessInfoWindow::PutCreateWindow ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateWindow(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(230)
inline VARIANT_BOOL IProcessInfoWindow::GetCreateWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(231)
inline void IProcessInfoWindow::PutWindowCaption ( _bstr_t PVal ) {
    HRESULT _hr = put_WindowCaption(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(232)
inline _bstr_t IProcessInfoWindow::GetWindowCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WindowCaption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(233)
inline void IProcessInfoWindow::PutCloseProcess ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CloseProcess(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(234)
inline VARIANT_BOOL IProcessInfoWindow::GetCloseProcess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CloseProcess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(235)
inline void IProcessInfoWindow::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(236)
inline VARIANT_BOOL IProcessInfoWindow::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline void IProcessInfoWindow::PutText ( _bstr_t PVal ) {
    HRESULT _hr = put_Text(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline _bstr_t IProcessInfoWindow::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(239)
inline void IProcessInfoWindow::PutHelpId ( long PVal ) {
    HRESULT _hr = put_HelpId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(240)
inline long IProcessInfoWindow::GetHelpId ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProcessContextIconMenu wrapper method implementations
//

#pragma implementation_key(241)
inline VARIANT_BOOL IProcessContextIconMenu::AddMenuCommand ( long Id, _bstr_t Title, long Icon, _bstr_t IconFont ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddMenuCommand(Id, Title, Icon, IconFont, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEditDoubleManipulator wrapper method implementations
//

#pragma implementation_key(242)
inline void IEditDoubleManipulator::PutEditValue ( double PVal ) {
    HRESULT _hr = put_EditValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(243)
inline double IEditDoubleManipulator::GetEditValue ( ) {
    double _result = 0;
    HRESULT _hr = get_EditValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(244)
inline VARIANT_BOOL IEditDoubleManipulator::SetValueRange ( double MinVal, double MaxVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetValueRange(MinVal, MaxVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline VARIANT_BOOL IEditDoubleManipulator::GetIsEditCreated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEditCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAssociationViewElements wrapper method implementations
//

#pragma implementation_key(246)
inline VARIANT_BOOL IAssociationViewElements::GetProjectBodies ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline void IAssociationViewElements::PutProjectBodies ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectBodies(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline VARIANT_BOOL IAssociationViewElements::GetProjectSurfaces ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void IAssociationViewElements::PutProjectSurfaces ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectSurfaces(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline VARIANT_BOOL IAssociationViewElements::GetHiddenObjectsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HiddenObjectsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline void IAssociationViewElements::PutHiddenObjectsVisible ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_HiddenObjectsVisible(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline VARIANT_BOOL IAssociationViewElements::GetProjectThreads ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectThreads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void IAssociationViewElements::PutProjectThreads ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectThreads(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline VARIANT_BOOL IAssociationViewElements::GetProjectDimensions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void IAssociationViewElements::PutProjectDimensions ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectDimensions(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline VARIANT_BOOL IAssociationViewElements::GetProjectRoughs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectRoughs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void IAssociationViewElements::PutProjectRoughs ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectRoughs(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline VARIANT_BOOL IAssociationViewElements::GetProjectBases ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectBases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline void IAssociationViewElements::PutProjectBases ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectBases(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline VARIANT_BOOL IAssociationViewElements::GetProjectTolerances ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectTolerances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void IAssociationViewElements::PutProjectTolerances ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectTolerances(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline VARIANT_BOOL IAssociationViewElements::GetProjectPositions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectPositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline void IAssociationViewElements::PutProjectPositions ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectPositions(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline VARIANT_BOOL IAssociationViewElements::GetProjectLeaders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectLeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline void IAssociationViewElements::PutProjectLeaders ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectLeaders(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(266)
inline VARIANT_BOOL IAssociationViewElements::GetProjectMarkLeaders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectMarkLeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline void IAssociationViewElements::PutProjectMarkLeaders ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectMarkLeaders(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(268)
inline VARIANT_BOOL IAssociationViewElements::GetProjectBrandLeaders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectBrandLeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(269)
inline void IAssociationViewElements::PutProjectBrandLeaders ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectBrandLeaders(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(270)
inline VARIANT_BOOL IAssociationViewElements::GetProjectHiddenComponents ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectHiddenComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(271)
inline void IAssociationViewElements::PutProjectHiddenComponents ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectHiddenComponents(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(272)
inline VARIANT_BOOL IAssociationViewElements::GetProjectStandartElements ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectStandartElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline void IAssociationViewElements::PutProjectStandartElements ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectStandartElements(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(274)
inline VARIANT_BOOL IAssociationViewElements::GetProjectCurves ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline void IAssociationViewElements::PutProjectCurves ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectCurves(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(276)
inline VARIANT_BOOL IAssociationViewElements::GetProjectPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(277)
inline void IAssociationViewElements::PutProjectPoints ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectPoints(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(278)
inline VARIANT_BOOL IAssociationViewElements::GetProjectAllObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectAllObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void IAssociationViewElements::PutProjectAllObjects ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectAllObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline VARIANT_BOOL IAssociationViewElements::GetProjectAllDesignations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectAllDesignations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(281)
inline void IAssociationViewElements::PutProjectAllDesignations ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectAllDesignations(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline VARIANT_BOOL IAssociationViewElements::GetProjectSpecRough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectSpecRough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(283)
inline void IAssociationViewElements::PutProjectSpecRough ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectSpecRough(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(284)
inline VARIANT_BOOL IAssociationViewElements::GetProjectLayers ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectLayers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline void IAssociationViewElements::PutProjectLayers ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectLayers(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(286)
inline VARIANT_BOOL IAssociationViewElements::GetProjectSketches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectSketches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline void IAssociationViewElements::PutProjectSketches ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectSketches(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline VARIANT_BOOL IAssociationViewElements::GetProjectAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline void IAssociationViewElements::PutProjectAxis ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectAxis(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(290)
inline VARIANT_BOOL IAssociationViewElements::GetCreateAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(291)
inline void IAssociationViewElements::PutCreateAxis ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_CreateAxis(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(292)
inline VARIANT_BOOL IAssociationViewElements::GetCreateCircularCentres ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateCircularCentres(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline void IAssociationViewElements::PutCreateCircularCentres ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_CreateCircularCentres(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(294)
inline VARIANT_BOOL IAssociationViewElements::GetCreateLinearCentres ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateLinearCentres(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(295)
inline void IAssociationViewElements::PutCreateLinearCentres ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_CreateLinearCentres(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(296)
inline VARIANT_BOOL IAssociationViewElements::GetCreateCentresMarkers ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateCentresMarkers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(297)
inline void IAssociationViewElements::PutCreateCentresMarkers ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_CreateCentresMarkers(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(298)
inline VARIANT_BOOL IAssociationViewElements::GetProjectDesTexts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectDesTexts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline void IAssociationViewElements::PutProjectDesTexts ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectDesTexts(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(300)
inline VARIANT_BOOL IAssociationViewElements::GetProjectDesTables ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectDesTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline void IAssociationViewElements::PutProjectDesTables ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectDesTables(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBreakViewParam wrapper method implementations
//

#pragma implementation_key(302)
inline long IBreakViewParam::AddBreakLine ( double X1, double Y1, double X2, double Y2, double Angle ) {
    long _result = 0;
    HRESULT _hr = raw_AddBreakLine(X1, Y1, X2, Y2, Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(303)
inline VARIANT_BOOL IBreakViewParam::DeleteBreakLine ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteBreakLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline VARIANT_BOOL IBreakViewParam::DeleteAllBreakLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteAllBreakLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(305)
inline VARIANT_BOOL IBreakViewParam::SetBreakLinePosition ( long Index, double X1, double Y1, double X2, double Y2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBreakLinePosition(Index, X1, Y1, X2, Y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline VARIANT_BOOL IBreakViewParam::GetBreakLinePosition ( long Index, double * X1, double * Y1, double * X2, double * Y2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBreakLinePosition(Index, X1, Y1, X2, Y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline VARIANT_BOOL IBreakViewParam::SetBreakLineParams ( long Index, double Angle, double Clearance, enum ksBreakLineTypeEnum BreakLineType, double Amplitude, double MaxAmplitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBreakLineParams(Index, Angle, Clearance, BreakLineType, Amplitude, MaxAmplitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline VARIANT_BOOL IBreakViewParam::GetBreakLineParams ( long Index, double * Angle, double * Clearance, enum ksBreakLineTypeEnum * BreakLineType, double * Amplitude, double * MaxAmplitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBreakLineParams(Index, Angle, Clearance, BreakLineType, Amplitude, MaxAmplitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline long IBreakViewParam::GetBreaksCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BreaksCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline VARIANT_BOOL IBreakViewParam::GetBreaksVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BreaksVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline void IBreakViewParam::PutBreaksVisible ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_BreaksVisible(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITexturesParam wrapper method implementations
//

#pragma implementation_key(312)
inline _bstr_t ITexturesParam::GetTextureFileName ( enum ksTextureTypeEnum Type ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureFileName(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(313)
inline void ITexturesParam::PutTextureFileName ( enum ksTextureTypeEnum Type, _bstr_t PVal ) {
    HRESULT _hr = put_TextureFileName(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline double ITexturesParam::GetTextureHeight ( enum ksTextureTypeEnum Type ) {
    double _result = 0;
    HRESULT _hr = get_TextureHeight(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline void ITexturesParam::PutTextureHeight ( enum ksTextureTypeEnum Type, double PVal ) {
    HRESULT _hr = put_TextureHeight(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(316)
inline double ITexturesParam::GetTextureWidth ( enum ksTextureTypeEnum Type ) {
    double _result = 0;
    HRESULT _hr = get_TextureWidth(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(317)
inline void ITexturesParam::PutTextureWidth ( enum ksTextureTypeEnum Type, double PVal ) {
    HRESULT _hr = put_TextureWidth(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(318)
inline double ITexturesParam::GetTextureDx ( enum ksTextureTypeEnum Type ) {
    double _result = 0;
    HRESULT _hr = get_TextureDx(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline void ITexturesParam::PutTextureDx ( enum ksTextureTypeEnum Type, double PVal ) {
    HRESULT _hr = put_TextureDx(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(320)
inline double ITexturesParam::GetTextureDy ( enum ksTextureTypeEnum Type ) {
    double _result = 0;
    HRESULT _hr = get_TextureDy(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(321)
inline void ITexturesParam::PutTextureDy ( enum ksTextureTypeEnum Type, double PVal ) {
    HRESULT _hr = put_TextureDy(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(322)
inline double ITexturesParam::GetTextureAngle ( enum ksTextureTypeEnum Type ) {
    double _result = 0;
    HRESULT _hr = get_TextureAngle(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void ITexturesParam::PutTextureAngle ( enum ksTextureTypeEnum Type, double PVal ) {
    HRESULT _hr = put_TextureAngle(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline VARIANT_BOOL ITexturesParam::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAutoSortObjectsParameters wrapper method implementations
//

#pragma implementation_key(325)
inline _bstr_t IAutoSortObjectsParameters::GetAutoNumerationSymbols ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoNumerationSymbols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(326)
inline void IAutoSortObjectsParameters::PutAutoNumerationSymbols ( _bstr_t Result ) {
    HRESULT _hr = put_AutoNumerationSymbols(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline VARIANT_BOOL IAutoSortObjectsParameters::GetAutoNumerationEnable ( long ObjectType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoNumerationEnable(ObjectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline void IAutoSortObjectsParameters::PutAutoNumerationEnable ( long ObjectType, VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoNumerationEnable(ObjectType, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline _variant_t IAutoSortObjectsParameters::GetAutoNumerationObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoNumerationObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(330)
inline void IAutoSortObjectsParameters::PutAutoNumerationObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_AutoNumerationObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDrawingDocumentSettings wrapper method implementations
//

#pragma implementation_key(331)
inline void IDrawingDocumentSettings::PutSheetAutoNumber ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SheetAutoNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(332)
inline VARIANT_BOOL IDrawingDocumentSettings::GetSheetAutoNumber ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SheetAutoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(333)
inline void IDrawingDocumentSettings::PutSheetFirstNumber ( long PVal ) {
    HRESULT _hr = put_SheetFirstNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(334)
inline long IDrawingDocumentSettings::GetSheetFirstNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_SheetFirstNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline void IDrawingDocumentSettings::PutSheetAutoCount ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SheetAutoCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline VARIANT_BOOL IDrawingDocumentSettings::GetSheetAutoCount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SheetAutoCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void IDrawingDocumentSettings::PutSheetsCount ( long PVal ) {
    HRESULT _hr = put_SheetsCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline long IDrawingDocumentSettings::GetSheetsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SheetsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline VARIANT_BOOL IDrawingDocumentSettings::GetTechnicalDemandSynchronize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TechnicalDemandSynchronize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline void IDrawingDocumentSettings::PutTechnicalDemandSynchronize ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_TechnicalDemandSynchronize(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline void IDrawingDocumentSettings::PutSheetStampMassUnit ( enum ksMassUnitsEnum PVal ) {
    HRESULT _hr = put_SheetStampMassUnit(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(342)
inline enum ksMassUnitsEnum IDrawingDocumentSettings::GetSheetStampMassUnit ( ) {
    enum ksMassUnitsEnum _result;
    HRESULT _hr = get_SheetStampMassUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(343)
inline void IDrawingDocumentSettings::PutSheetStampMassDesignation ( enum ksMassUnitsEnum MassUnit, _bstr_t Designation ) {
    HRESULT _hr = put_SheetStampMassDesignation(MassUnit, Designation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(344)
inline _bstr_t IDrawingDocumentSettings::GetSheetStampMassDesignation ( enum ksMassUnitsEnum MassUnit ) {
    BSTR _result = 0;
    HRESULT _hr = get_SheetStampMassDesignation(MassUnit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(345)
inline void IDrawingDocumentSettings::PutSheetStampMassDigitsCount ( long PVal ) {
    HRESULT _hr = put_SheetStampMassDigitsCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(346)
inline long IDrawingDocumentSettings::GetSheetStampMassDigitsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SheetStampMassDigitsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(347)
inline void IDrawingDocumentSettings::PutEmbodimentsTableCreateLinkInStamp ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EmbodimentsTableCreateLinkInStamp(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(348)
inline VARIANT_BOOL IDrawingDocumentSettings::GetEmbodimentsTableCreateLinkInStamp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EmbodimentsTableCreateLinkInStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(349)
inline void IDrawingDocumentSettings::PutEmbodimentsTableAddNumberInStamp ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EmbodimentsTableAddNumberInStamp(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(350)
inline VARIANT_BOOL IDrawingDocumentSettings::GetEmbodimentsTableAddNumberInStamp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EmbodimentsTableAddNumberInStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline void IDrawingDocumentSettings::PutEmbodimentsTableAutoFontParamInStamp ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EmbodimentsTableAutoFontParamInStamp(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(352)
inline VARIANT_BOOL IDrawingDocumentSettings::GetEmbodimentsTableAutoFontParamInStamp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EmbodimentsTableAutoFontParamInStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline void IDrawingDocumentSettings::PutEmbodimentsTableTextInStamp ( _bstr_t PVal ) {
    HRESULT _hr = put_EmbodimentsTableTextInStamp(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(354)
inline _bstr_t IDrawingDocumentSettings::GetEmbodimentsTableTextInStamp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EmbodimentsTableTextInStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ILibItemSettings wrapper method implementations
//

#pragma implementation_key(355)
inline long ILibItemSettings::GetItemCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(356)
inline double ILibItemSettings::GetItem ( const _variant_t & Index, VARIANT_BOOL * Use ) {
    double _result = 0;
    HRESULT _hr = raw_GetItem(Index, Use, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline VARIANT_BOOL ILibItemSettings::SetItem ( const _variant_t & Index, VARIANT_BOOL Use ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetItem(Index, Use, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(358)
inline VARIANT_BOOL ILibItemSettings::GetItems ( VARIANT * UniqIds, VARIANT * Uses ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetItems(UniqIds, Uses, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline VARIANT_BOOL ILibItemSettings::GetItemsEx ( VARIANT * UniqIds, VARIANT * Uses, VARIANT * ItemNames, VARIANT * FileNames ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetItemsEx(UniqIds, Uses, ItemNames, FileNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IColorParam7 wrapper method implementations
//

#pragma implementation_key(360)
inline ksUseColorEnum IColorParam7::GetUseColor ( ) {
    ksUseColorEnum _result;
    HRESULT _hr = get_UseColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(361)
inline void IColorParam7::PutUseColor ( ksUseColorEnum PVal ) {
    HRESULT _hr = put_UseColor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(362)
inline long IColorParam7::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(363)
inline void IColorParam7::PutColor ( long PVal ) {
    HRESULT _hr = put_Color(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline double IColorParam7::GetAmbient ( ) {
    double _result = 0;
    HRESULT _hr = get_Ambient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline void IColorParam7::PutAmbient ( double PVal ) {
    HRESULT _hr = put_Ambient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(366)
inline double IColorParam7::GetDiffuse ( ) {
    double _result = 0;
    HRESULT _hr = get_Diffuse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline void IColorParam7::PutDiffuse ( double PVal ) {
    HRESULT _hr = put_Diffuse(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(368)
inline double IColorParam7::GetSpecularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Specularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(369)
inline void IColorParam7::PutSpecularity ( double PVal ) {
    HRESULT _hr = put_Specularity(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(370)
inline double IColorParam7::GetShininess ( ) {
    double _result = 0;
    HRESULT _hr = get_Shininess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline void IColorParam7::PutShininess ( double PVal ) {
    HRESULT _hr = put_Shininess(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(372)
inline double IColorParam7::GetTransparency ( ) {
    double _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(373)
inline void IColorParam7::PutTransparency ( double PVal ) {
    HRESULT _hr = put_Transparency(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(374)
inline double IColorParam7::GetEmission ( ) {
    double _result = 0;
    HRESULT _hr = get_Emission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(375)
inline void IColorParam7::PutEmission ( double PVal ) {
    HRESULT _hr = put_Emission(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(376)
inline VARIANT_BOOL IColorParam7::GetAdvancedColor ( long * Color, double * Ambient, double * Diffuse, double * Specularity, double * Shininess, double * Transparency, double * Emission ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAdvancedColor(Color, Ambient, Diffuse, Specularity, Shininess, Transparency, Emission, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(377)
inline VARIANT_BOOL IColorParam7::SetAdvancedColor ( long Color, double Ambient, double Diffuse, double Specularity, double Shininess, double Transparency, double Emission ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetAdvancedColor(Color, Ambient, Diffuse, Specularity, Shininess, Transparency, Emission, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface INewDocument3DSettings wrapper method implementations
//

#pragma implementation_key(378)
inline IColorParam7Ptr INewDocument3DSettings::GetColorParam ( ) {
    struct IColorParam7 * _result = 0;
    HRESULT _hr = get_ColorParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorParam7Ptr(_result, false);
}

//
// interface ISerializer wrapper method implementations
//

#pragma implementation_key(379)
inline void ISerializer::PutXML ( _bstr_t Result ) {
    HRESULT _hr = put_XML(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(380)
inline _bstr_t ISerializer::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICellFormat wrapper method implementations
//

#pragma implementation_key(381)
inline long ICellFormat::GetTextStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void ICellFormat::PutTextStyle ( long Result ) {
    HRESULT _hr = put_TextStyle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline VARIANT_BOOL ICellFormat::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline void ICellFormat::PutReadOnly ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ReadOnly(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(385)
inline VARIANT_BOOL ICellFormat::GetOneLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OneLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(386)
inline void ICellFormat::PutOneLine ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_OneLine(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(387)
inline double ICellFormat::GetLeftEdge ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline void ICellFormat::PutLeftEdge ( double Result ) {
    HRESULT _hr = put_LeftEdge(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(389)
inline double ICellFormat::GetRightEdge ( ) {
    double _result = 0;
    HRESULT _hr = get_RightEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(390)
inline void ICellFormat::PutRightEdge ( double Result ) {
    HRESULT _hr = put_RightEdge(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(391)
inline double ICellFormat::GetSpaceBefore ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(392)
inline void ICellFormat::PutSpaceBefore ( double Result ) {
    HRESULT _hr = put_SpaceBefore(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline double ICellFormat::GetSpaceAfter ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline void ICellFormat::PutSpaceAfter ( double Result ) {
    HRESULT _hr = put_SpaceAfter(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(395)
inline double ICellFormat::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline void ICellFormat::PutWidth ( double Result ) {
    HRESULT _hr = put_Width(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(397)
inline double ICellFormat::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline void ICellFormat::PutHeight ( double Result ) {
    HRESULT _hr = put_Height(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(399)
inline enum ksTextHorizontalFormatEnum ICellFormat::GetHFormat ( ) {
    enum ksTextHorizontalFormatEnum _result;
    HRESULT _hr = get_HFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(400)
inline void ICellFormat::PutHFormat ( enum ksTextHorizontalFormatEnum Result ) {
    HRESULT _hr = put_HFormat(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(401)
inline VARIANT_BOOL ICellFormat::GetVFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline void ICellFormat::PutVFormat ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_VFormat(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICellBoundaries wrapper method implementations
//

#pragma implementation_key(403)
inline enum ksCurveStyleEnum ICellBoundaries::GetLineStyle ( enum ksCellBoundariesEnum Index ) {
    enum ksCurveStyleEnum _result;
    HRESULT _hr = get_LineStyle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline void ICellBoundaries::PutLineStyle ( enum ksCellBoundariesEnum Index, enum ksCurveStyleEnum Result ) {
    HRESULT _hr = put_LineStyle(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline VARIANT_BOOL ICellBoundaries::GetLineVisible ( enum ksCellBoundariesEnum Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LineVisible(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(406)
inline void ICellBoundaries::PutLineVisible ( enum ksCellBoundariesEnum Index, VARIANT_BOOL Result ) {
    HRESULT _hr = put_LineVisible(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITableRange wrapper method implementations
//

#pragma implementation_key(407)
inline VARIANT_BOOL ITableRange::CombineCells ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CombineCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(408)
inline VARIANT_BOOL ITableRange::DivideCells ( long ColumnCount, long RowCount, VARIANT_BOOL PrepareCombine ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DivideCells(ColumnCount, RowCount, PrepareCombine, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline VARIANT_BOOL ITableRange::ClearCells ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(410)
inline _variant_t ITableRange::GetCells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(411)
inline ICellFormatPtr ITableRange::GetCellsFormat ( ) {
    struct ICellFormat * _result = 0;
    HRESULT _hr = get_CellsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICellFormatPtr(_result, false);
}

#pragma implementation_key(412)
inline ICellBoundariesPtr ITableRange::GetCellsBoundaries ( ) {
    struct ICellBoundaries * _result = 0;
    HRESULT _hr = get_CellsBoundaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICellBoundariesPtr(_result, false);
}

#pragma implementation_key(413)
inline _variant_t ITableRange::GetTexts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Texts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(414)
inline void ITableRange::PutTexts ( const _variant_t & PVal ) {
    HRESULT _hr = put_Texts(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface ksPropertyManagerNotify wrapper method implementations
//

#pragma implementation_key(415)
inline VARIANT_BOOL ksPropertyManagerNotify::ButtonClick ( long ButtonID ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", ButtonID);
    return _result;
}

#pragma implementation_key(416)
inline VARIANT_BOOL ksPropertyManagerNotify::ChangeControlValue ( struct IPropertyControl * Control ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Control);
    return _result;
}

#pragma implementation_key(417)
inline VARIANT_BOOL ksPropertyManagerNotify::ControlCommand ( struct IPropertyControl * Control, long ButtonID ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", Control, ButtonID);
    return _result;
}

#pragma implementation_key(418)
inline VARIANT_BOOL ksPropertyManagerNotify::ButtonUpdate ( long ButtonID, long * Check, VARIANT_BOOL * Enable ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x4003\x400b", ButtonID, Check, Enable);
    return _result;
}

#pragma implementation_key(419)
inline VARIANT_BOOL ksPropertyManagerNotify::ProcessActivate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(420)
inline VARIANT_BOOL ksPropertyManagerNotify::ProcessDeactivate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(421)
inline VARIANT_BOOL ksPropertyManagerNotify::CommandHelp ( long Id ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", Id);
    return _result;
}

#pragma implementation_key(422)
inline VARIANT_BOOL ksPropertyManagerNotify::SelectItem ( struct IPropertyControl * Control, long Index, VARIANT_BOOL Select ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003\x000b", Control, Index, Select);
    return _result;
}

#pragma implementation_key(423)
inline VARIANT_BOOL ksPropertyManagerNotify::CheckItem ( struct IPropertyControl * Control, long Index, VARIANT_BOOL Check ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003\x000b", Control, Index, Check);
    return _result;
}

#pragma implementation_key(424)
inline VARIANT_BOOL ksPropertyManagerNotify::ChangeActiveTab ( long TabIndex ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", TabIndex);
    return _result;
}

#pragma implementation_key(425)
inline VARIANT_BOOL ksPropertyManagerNotify::EditFocus ( struct IPropertyControl * Control, VARIANT_BOOL Set ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x000b", Control, Set);
    return _result;
}

#pragma implementation_key(426)
inline VARIANT_BOOL ksPropertyManagerNotify::UserMenuCommand ( struct IPropertyControl * Control, long MenuID ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", Control, MenuID);
    return _result;
}

#pragma implementation_key(427)
inline VARIANT_BOOL ksPropertyManagerNotify::LayoutChanged ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(428)
inline VARIANT_BOOL ksPropertyManagerNotify::GetContextMenuType ( long LX, long LY, long * ContextMenuType ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0003\x4003", LX, LY, ContextMenuType);
    return _result;
}

#pragma implementation_key(429)
inline VARIANT_BOOL ksPropertyManagerNotify::FillContextPanel ( struct IProcessContextPanel * ContextPanel ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", ContextPanel);
    return _result;
}

#pragma implementation_key(430)
inline VARIANT_BOOL ksPropertyManagerNotify::FillContextIconMenu ( struct IProcessContextIconMenu * ContextMenu ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", ContextMenu);
    return _result;
}

#pragma implementation_key(431)
inline VARIANT_BOOL ksPropertyManagerNotify::EndEditItem ( struct IPropertyControl * Control, long Index ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", Control, Index);
    return _result;
}

#pragma implementation_key(432)
inline VARIANT_BOOL ksPropertyManagerNotify::ChangeTabExpanded ( long TabIndex ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", TabIndex);
    return _result;
}

#pragma implementation_key(433)
inline VARIANT_BOOL ksPropertyManagerNotify::DoubleClickItem ( struct IPropertyControl * Control, long Index ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", Control, Index);
    return _result;
}

//
// dispinterface ksPropertyUserControlNotify wrapper method implementations
//

#pragma implementation_key(434)
inline VARIANT_BOOL ksPropertyUserControlNotify::CreateOCX ( IDispatch * IOcx ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", IOcx);
    return _result;
}

#pragma implementation_key(435)
inline VARIANT_BOOL ksPropertyUserControlNotify::DestroyOCX ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface ksDocumentFrameNotify wrapper method implementations
//

#pragma implementation_key(436)
inline VARIANT_BOOL ksDocumentFrameNotify::BeginPaint ( struct IPaintObject * PaintObj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PaintObj);
    return _result;
}

#pragma implementation_key(437)
inline VARIANT_BOOL ksDocumentFrameNotify::ClosePaint ( struct IPaintObject * PaintObj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PaintObj);
    return _result;
}

#pragma implementation_key(438)
inline VARIANT_BOOL ksDocumentFrameNotify::MouseDown ( short NButton, short NShiftState, long X, long Y ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0002\x0002\x0003\x0003", NButton, NShiftState, X, Y);
    return _result;
}

#pragma implementation_key(439)
inline VARIANT_BOOL ksDocumentFrameNotify::MouseUp ( short NButton, short NShiftState, long X, long Y ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0002\x0002\x0003\x0003", NButton, NShiftState, X, Y);
    return _result;
}

#pragma implementation_key(440)
inline VARIANT_BOOL ksDocumentFrameNotify::MouseDblClick ( short NButton, short NShiftState, long X, long Y ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0002\x0002\x0003\x0003", NButton, NShiftState, X, Y);
    return _result;
}

#pragma implementation_key(441)
inline VARIANT_BOOL ksDocumentFrameNotify::BeginPaintGL ( struct ksGLObject * GlObj, long DrawMode ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", GlObj, DrawMode);
    return _result;
}

#pragma implementation_key(442)
inline VARIANT_BOOL ksDocumentFrameNotify::ClosePaintGL ( struct ksGLObject * GlObj, long DrawMode ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", GlObj, DrawMode);
    return _result;
}

#pragma implementation_key(443)
inline VARIANT_BOOL ksDocumentFrameNotify::AddGabarit ( struct IGabaritObject * GabObj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", GabObj);
    return _result;
}

#pragma implementation_key(444)
inline VARIANT_BOOL ksDocumentFrameNotify::Activate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(445)
inline VARIANT_BOOL ksDocumentFrameNotify::Deactivate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(446)
inline VARIANT_BOOL ksDocumentFrameNotify::CloseFrame ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(447)
inline VARIANT_BOOL ksDocumentFrameNotify::MouseMove ( short NShiftState, long X, long Y ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0002\x0003\x0003", NShiftState, X, Y);
    return _result;
}

#pragma implementation_key(448)
inline VARIANT_BOOL ksDocumentFrameNotify::ShowOcxTree ( IDispatch * Ocx, VARIANT_BOOL Show ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x000b", Ocx, Show);
    return _result;
}

#pragma implementation_key(449)
inline VARIANT_BOOL ksDocumentFrameNotify::BeginPaintTmpObjects ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(450)
inline VARIANT_BOOL ksDocumentFrameNotify::ClosePaintTmpObjects ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// interface IPaintObject wrapper method implementations
//

#pragma implementation_key(451)
inline OLE_HANDLE IPaintObject::GetHWND ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = raw_GetHWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline HRESULT IPaintObject::GetTransformMatrix ( double * A11, double * A12, double * A13, double * A14, double * A21, double * A22, double * A23, double * A24 ) {
    HRESULT _hr = raw_GetTransformMatrix(A11, A12, A13, A14, A21, A22, A23, A24);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(453)
inline _bstr_t IPaintObject::GetDIBForOutput ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDIBForOutput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface ksGLObject wrapper method implementations
//

#pragma implementation_key(454)
inline VARIANT_BOOL ksGLObject::glBegin ( long Mode ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", Mode);
    return _result;
}

#pragma implementation_key(455)
inline VARIANT_BOOL ksGLObject::glEnd ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(456)
inline VARIANT_BOOL ksGLObject::glEnable ( long Cap ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", Cap);
    return _result;
}

#pragma implementation_key(457)
inline VARIANT_BOOL ksGLObject::glDisable ( long Cap ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", Cap);
    return _result;
}

#pragma implementation_key(458)
inline VARIANT_BOOL ksGLObject::glColor3d ( double R, double G, double B ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0005\x0005\x0005", R, G, B);
    return _result;
}

#pragma implementation_key(459)
inline VARIANT_BOOL ksGLObject::glLineWidth ( double W ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0005", W);
    return _result;
}

#pragma implementation_key(460)
inline VARIANT_BOOL ksGLObject::glLineStipple ( long Factor, short Pattern ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0002", Factor, Pattern);
    return _result;
}

#pragma implementation_key(461)
inline VARIANT_BOOL ksGLObject::glPointSize ( double W ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0005", W);
    return _result;
}

#pragma implementation_key(462)
inline VARIANT_BOOL ksGLObject::glPolygonMode ( long Face, long Mode ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0003", Face, Mode);
    return _result;
}

#pragma implementation_key(463)
inline VARIANT_BOOL ksGLObject::glVertex2d ( double X, double Y ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x28, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0005\x0005", X, Y);
    return _result;
}

#pragma implementation_key(464)
inline VARIANT_BOOL ksGLObject::glVertex2dv ( double * PData, long CountDouble ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x29, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x4005\x0003", PData, CountDouble);
    return _result;
}

#pragma implementation_key(465)
inline VARIANT_BOOL ksGLObject::glVertex3d ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0005\x0005\x0005", X, Y, Z);
    return _result;
}

#pragma implementation_key(466)
inline VARIANT_BOOL ksGLObject::glVertex3dv ( double * PData, long CountDouble ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x4005\x0003", PData, CountDouble);
    return _result;
}

#pragma implementation_key(467)
inline VARIANT_BOOL ksGLObject::glVertex4d ( double X, double Y, double Z, double W ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", X, Y, Z, W);
    return _result;
}

#pragma implementation_key(468)
inline VARIANT_BOOL ksGLObject::glVertex4dv ( double * PData, long CountDouble ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x4005\x0003", PData, CountDouble);
    return _result;
}

//
// interface IGabaritObject wrapper method implementations
//

#pragma implementation_key(469)
inline VARIANT_BOOL IGabaritObject::GetCurrentGabarit ( long NPage, double * P1X, double * P1Y, double * P1Z, double * P2X, double * P2Y, double * P2Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCurrentGabarit(NPage, P1X, P1Y, P1Z, P2X, P2Y, P2Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(470)
inline VARIANT_BOOL IGabaritObject::AddGabarit ( double X1, double Y1, double Z1, double X2, double Y2, double Z2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddGabarit(X1, Y1, Z1, X2, Y2, Z2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(471)
inline VARIANT_BOOL IGabaritObject::GetGabaritModifying ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGabaritModifying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface ksDrawingObjectNotify wrapper method implementations
//

#pragma implementation_key(472)
inline VARIANT_BOOL ksDrawingObjectNotify::ChangeActive ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(473)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginDelete ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(474)
inline VARIANT_BOOL ksDrawingObjectNotify::Delete ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(475)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginMove ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(476)
inline VARIANT_BOOL ksDrawingObjectNotify::Move ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(477)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginRotate ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(478)
inline VARIANT_BOOL ksDrawingObjectNotify::Rotate ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(479)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginScale ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(480)
inline VARIANT_BOOL ksDrawingObjectNotify::Scale ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(481)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginTransform ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(482)
inline VARIANT_BOOL ksDrawingObjectNotify::Transform ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(483)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginCopy ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(484)
inline VARIANT_BOOL ksDrawingObjectNotify::Copy ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(485)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginSymmetry ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(486)
inline VARIANT_BOOL ksDrawingObjectNotify::Symmetry ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(487)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginProcess ( long PType, const _variant_t & ObjRef ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x000c", PType, &ObjRef);
    return _result;
}

#pragma implementation_key(488)
inline VARIANT_BOOL ksDrawingObjectNotify::EndProcess ( long PType ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", PType);
    return _result;
}

#pragma implementation_key(489)
inline VARIANT_BOOL ksDrawingObjectNotify::CreateObject ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(490)
inline VARIANT_BOOL ksDrawingObjectNotify::UpdateObject ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(491)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginDestroyObject ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(492)
inline VARIANT_BOOL ksDrawingObjectNotify::DestroyObject ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(493)
inline VARIANT_BOOL ksDrawingObjectNotify::BeginPropertyChanged ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

#pragma implementation_key(494)
inline VARIANT_BOOL ksDrawingObjectNotify::PropertyChanged ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Objects);
    return _result;
}

//
// dispinterface ksViewsAndLayersManagerNotify wrapper method implementations
//

#pragma implementation_key(495)
inline VARIANT_BOOL ksViewsAndLayersManagerNotify::BeginEdit ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(496)
inline VARIANT_BOOL ksViewsAndLayersManagerNotify::EndEdit ( VARIANT_BOOL IsOk ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000b", IsOk);
    return _result;
}

//
// dispinterface ksLibraryManagerNotify wrapper method implementations
//

#pragma implementation_key(497)
inline VARIANT_BOOL ksLibraryManagerNotify::BeginAttach ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(498)
inline VARIANT_BOOL ksLibraryManagerNotify::Attach ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(499)
inline VARIANT_BOOL ksLibraryManagerNotify::BeginDetach ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(500)
inline VARIANT_BOOL ksLibraryManagerNotify::Detach ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(501)
inline VARIANT_BOOL ksLibraryManagerNotify::BeginExecute ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(502)
inline VARIANT_BOOL ksLibraryManagerNotify::EndExecute ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(503)
inline VARIANT_BOOL ksLibraryManagerNotify::SystemControlStop ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(504)
inline VARIANT_BOOL ksLibraryManagerNotify::SystemControlStart ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(505)
inline VARIANT_BOOL ksLibraryManagerNotify::AddLibraryDescription ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(506)
inline VARIANT_BOOL ksLibraryManagerNotify::DeleteLibraryDescription ( struct ILibrary * PLibrary ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PLibrary);
    return _result;
}

#pragma implementation_key(507)
inline VARIANT_BOOL ksLibraryManagerNotify::AddInsert ( struct IInsert * PInsert, VARIANT_BOOL Create ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x000b", PInsert, Create);
    return _result;
}

#pragma implementation_key(508)
inline VARIANT_BOOL ksLibraryManagerNotify::DeleteInsert ( struct IInsert * PInsert ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PInsert);
    return _result;
}

#pragma implementation_key(509)
inline VARIANT_BOOL ksLibraryManagerNotify::EditInsert ( struct ILibrary * PLibrary, struct IKompasDocument * PDoc, VARIANT_BOOL NewFrw ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0009\x000b", PLibrary, PDoc, NewFrw);
    return _result;
}

#pragma implementation_key(510)
inline VARIANT_BOOL ksLibraryManagerNotify::TryExecute ( struct ILibrary * PLibrary, long CommandID ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", PLibrary, CommandID);
    return _result;
}

#pragma implementation_key(511)
inline VARIANT_BOOL ksLibraryManagerNotify::BeginInsertDocument ( struct ILibrary * PLibrary, long InsertionType, _bstr_t Insertion ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003\x0008", PLibrary, InsertionType, (BSTR)Insertion);
    return _result;
}

//
// dispinterface ksSpecificationDescriptionNotify wrapper method implementations
//

#pragma implementation_key(512)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::TuningSpcStyleBeginChange ( struct ISpecificationDescription * Descr ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Descr);
    return _result;
}

#pragma implementation_key(513)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::TuningSpcStyleChange ( struct ISpecificationDescription * Descr, VARIANT_BOOL IsOk ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x000b", Descr, IsOk);
    return _result;
}

#pragma implementation_key(514)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::ChangeCurrentSpcDescription ( struct ISpecificationDescription * Descr ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Descr);
    return _result;
}

#pragma implementation_key(515)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::SpcDescriptionAdd ( struct ISpecificationDescription * Descr ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Descr);
    return _result;
}

#pragma implementation_key(516)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::SpcDescriptionRemove ( struct ISpecificationDescription * Descr ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Descr);
    return _result;
}

#pragma implementation_key(517)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::SpcDescriptionBeginEdit ( struct ISpecificationDescription * Descr ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Descr);
    return _result;
}

#pragma implementation_key(518)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::SpcDescriptionEdit ( struct ISpecificationDescription * Descr, VARIANT_BOOL IsOk ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x000b", Descr, IsOk);
    return _result;
}

#pragma implementation_key(519)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::SynchronizationBegin ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(520)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::Synchronization ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(521)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::BeginCalcPositions ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(522)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::CalcPositions ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(523)
inline VARIANT_BOOL ksSpecificationDescriptionNotify::BeginCreateObject ( long TypeObj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", TypeObj);
    return _result;
}

//
// dispinterface ksSpecificationObjectNotify wrapper method implementations
//

#pragma implementation_key(524)
inline VARIANT_BOOL ksSpecificationObjectNotify::BeginDelete ( struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Obj);
    return _result;
}

#pragma implementation_key(525)
inline VARIANT_BOOL ksSpecificationObjectNotify::Delete ( struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Obj);
    return _result;
}

#pragma implementation_key(526)
inline VARIANT_BOOL ksSpecificationObjectNotify::CellDblClick ( struct ISpecificationObject * Obj, long Number ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", Obj, Number);
    return _result;
}

#pragma implementation_key(527)
inline VARIANT_BOOL ksSpecificationObjectNotify::CellBeginEdit ( struct ISpecificationObject * Obj, long Number ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", Obj, Number);
    return _result;
}

#pragma implementation_key(528)
inline VARIANT_BOOL ksSpecificationObjectNotify::ChangeCurrent ( struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Obj);
    return _result;
}

#pragma implementation_key(529)
inline VARIANT_BOOL ksSpecificationObjectNotify::DocumentBeginAdd ( struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Obj);
    return _result;
}

#pragma implementation_key(530)
inline VARIANT_BOOL ksSpecificationObjectNotify::DocumentAdd ( struct ISpecificationObject * Obj, _bstr_t DocName ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0008", Obj, (BSTR)DocName);
    return _result;
}

#pragma implementation_key(531)
inline VARIANT_BOOL ksSpecificationObjectNotify::DocumentRemove ( struct ISpecificationObject * Obj, _bstr_t DocName ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0008", Obj, (BSTR)DocName);
    return _result;
}

#pragma implementation_key(532)
inline VARIANT_BOOL ksSpecificationObjectNotify::BeginGeomChange ( struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Obj);
    return _result;
}

#pragma implementation_key(533)
inline VARIANT_BOOL ksSpecificationObjectNotify::GeomChange ( struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Obj);
    return _result;
}

#pragma implementation_key(534)
inline VARIANT_BOOL ksSpecificationObjectNotify::BeginProcess ( long PType, struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0009", PType, Obj);
    return _result;
}

#pragma implementation_key(535)
inline VARIANT_BOOL ksSpecificationObjectNotify::EndProcess ( long PType ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", PType);
    return _result;
}

#pragma implementation_key(536)
inline VARIANT_BOOL ksSpecificationObjectNotify::CreateObject ( struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Obj);
    return _result;
}

#pragma implementation_key(537)
inline VARIANT_BOOL ksSpecificationObjectNotify::UpdateObject ( struct ISpecificationObject * Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Obj);
    return _result;
}

//
// dispinterface ksLayoutSheetsNotify wrapper method implementations
//

#pragma implementation_key(538)
inline VARIANT_BOOL ksLayoutSheetsNotify::Add ( struct ILayoutSheet * PSheet ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PSheet);
    return _result;
}

#pragma implementation_key(539)
inline VARIANT_BOOL ksLayoutSheetsNotify::Delete ( struct ILayoutSheet * PSheet ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PSheet);
    return _result;
}

#pragma implementation_key(540)
inline VARIANT_BOOL ksLayoutSheetsNotify::Update ( struct ILayoutSheet * PSheet ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", PSheet);
    return _result;
}

//
// dispinterface ksModelObjectNotify wrapper method implementations
//

#pragma implementation_key(541)
inline VARIANT_BOOL ksModelObjectNotify::BeginDelete ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(542)
inline VARIANT_BOOL ksModelObjectNotify::Delete ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(543)
inline VARIANT_BOOL ksModelObjectNotify::Excluded ( const _variant_t & Obj, VARIANT_BOOL Excluded ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x000b", &Obj, Excluded);
    return _result;
}

#pragma implementation_key(544)
inline VARIANT_BOOL ksModelObjectNotify::Hidden ( const _variant_t & Obj, VARIANT_BOOL _Hidden ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x000b", &Obj, _Hidden);
    return _result;
}

#pragma implementation_key(545)
inline VARIANT_BOOL ksModelObjectNotify::BeginPropertyChanged ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(546)
inline VARIANT_BOOL ksModelObjectNotify::PropertyChanged ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(547)
inline VARIANT_BOOL ksModelObjectNotify::BeginPlacementChanged ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(548)
inline VARIANT_BOOL ksModelObjectNotify::PlacementChanged ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(549)
inline VARIANT_BOOL ksModelObjectNotify::BeginProcess ( long PType, const _variant_t & PObj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x000c", PType, &PObj);
    return _result;
}

#pragma implementation_key(550)
inline VARIANT_BOOL ksModelObjectNotify::EndProcess ( long PType ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", PType);
    return _result;
}

#pragma implementation_key(551)
inline VARIANT_BOOL ksModelObjectNotify::CreateObject ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(552)
inline VARIANT_BOOL ksModelObjectNotify::UpdateObject ( const _variant_t & Obj ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Obj);
    return _result;
}

#pragma implementation_key(553)
inline VARIANT_BOOL ksModelObjectNotify::BeginLoadStateChange ( const _variant_t & Obj, long LoadState ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x0003", &Obj, LoadState);
    return _result;
}

#pragma implementation_key(554)
inline VARIANT_BOOL ksModelObjectNotify::LoadStateChange ( const _variant_t & Obj, long LoadState ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x0003", &Obj, LoadState);
    return _result;
}

//
// dispinterface ksDocument3DNotify7 wrapper method implementations
//

#pragma implementation_key(555)
inline VARIANT_BOOL ksDocument3DNotify7::BeginRebuild ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(556)
inline VARIANT_BOOL ksDocument3DNotify7::Rebuild ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(557)
inline VARIANT_BOOL ksDocument3DNotify7::BeginChoiceMaterial ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(558)
inline VARIANT_BOOL ksDocument3DNotify7::ChoiceMaterial ( _bstr_t Material, double Density ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0008\x0005", (BSTR)Material, Density);
    return _result;
}

#pragma implementation_key(559)
inline VARIANT_BOOL ksDocument3DNotify7::BeginChoiceMarking ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(560)
inline VARIANT_BOOL ksDocument3DNotify7::ChoiceMarking ( _bstr_t Marking ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0008", (BSTR)Marking);
    return _result;
}

#pragma implementation_key(561)
inline VARIANT_BOOL ksDocument3DNotify7::BeginSetPartFromFile ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(562)
inline VARIANT_BOOL ksDocument3DNotify7::BeginCreatePartFromFile ( VARIANT_BOOL TypeDoc, struct IModelObject * Plane ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000b\x0009", TypeDoc, Plane);
    return _result;
}

#pragma implementation_key(563)
inline VARIANT_BOOL ksDocument3DNotify7::CreateEmbodiment ( _bstr_t Marking ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0008", (BSTR)Marking);
    return _result;
}

#pragma implementation_key(564)
inline VARIANT_BOOL ksDocument3DNotify7::DeleteEmbodiment ( _bstr_t Marking ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0008", (BSTR)Marking);
    return _result;
}

#pragma implementation_key(565)
inline VARIANT_BOOL ksDocument3DNotify7::ChangeCurrentEmbodiment ( _bstr_t Marking ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0008", (BSTR)Marking);
    return _result;
}

#pragma implementation_key(566)
inline VARIANT_BOOL ksDocument3DNotify7::BeginChoiceProperty ( IDispatch * Obj, double propID ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0005", Obj, propID);
    return _result;
}

#pragma implementation_key(567)
inline VARIANT_BOOL ksDocument3DNotify7::ChoiceProperty ( IDispatch * Obj, double propID ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0005", Obj, propID);
    return _result;
}

#pragma implementation_key(568)
inline VARIANT_BOOL ksDocument3DNotify7::BeginRollbackFeatures ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(569)
inline VARIANT_BOOL ksDocument3DNotify7::RollbackFeatures ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(570)
inline VARIANT_BOOL ksDocument3DNotify7::BedinLoadCombinationChange ( long Index ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", Index);
    return _result;
}

#pragma implementation_key(571)
inline VARIANT_BOOL ksDocument3DNotify7::LoadCombinationChange ( long Index ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", Index);
    return _result;
}

//
// dispinterface ksProcess2DNotify wrapper method implementations
//

#pragma implementation_key(572)
inline VARIANT_BOOL ksProcess2DNotify::PlacementChange ( double X, double Y, double Angle, VARIANT_BOOL Dynamic ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", X, Y, Angle, Dynamic);
    return _result;
}

#pragma implementation_key(573)
inline VARIANT_BOOL ksProcess2DNotify::ExecuteCommand ( long Command ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", Command);
    return _result;
}

#pragma implementation_key(574)
inline VARIANT_BOOL ksProcess2DNotify::Run ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(575)
inline VARIANT_BOOL ksProcess2DNotify::Stop ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(576)
inline VARIANT_BOOL ksProcess2DNotify::Activate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(577)
inline VARIANT_BOOL ksProcess2DNotify::Deactivate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(578)
inline VARIANT_BOOL ksProcess2DNotify::EndProcess ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(579)
inline VARIANT_BOOL ksProcess2DNotify::GetMouseEnterLeavePoint ( IDispatch * Control, long BtnID, long PointIndex, IDispatch * Parameters ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003\x0003\x0009", Control, BtnID, PointIndex, Parameters);
    return _result;
}

#pragma implementation_key(580)
inline VARIANT_BOOL ksProcess2DNotify::AbortProcess ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface ksProcess3DNotify wrapper method implementations
//

#pragma implementation_key(581)
inline VARIANT_BOOL ksProcess3DNotify::PlacementChange ( IDispatch * Object ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Object);
    return _result;
}

#pragma implementation_key(582)
inline VARIANT_BOOL ksProcess3DNotify::ExecuteCommand ( long Command ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", Command);
    return _result;
}

#pragma implementation_key(583)
inline VARIANT_BOOL ksProcess3DNotify::Run ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(584)
inline VARIANT_BOOL ksProcess3DNotify::Stop ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(585)
inline VARIANT_BOOL ksProcess3DNotify::Activate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(586)
inline VARIANT_BOOL ksProcess3DNotify::Deactivate ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(587)
inline VARIANT_BOOL ksProcess3DNotify::FilterObject ( IDispatch * Object ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Object);
    return _result;
}

#pragma implementation_key(588)
inline VARIANT_BOOL ksProcess3DNotify::CreateTakeObject ( IDispatch * Object ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Object);
    return _result;
}

#pragma implementation_key(589)
inline VARIANT_BOOL ksProcess3DNotify::EndProcess ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(590)
inline VARIANT_BOOL ksProcess3DNotify::ProcessingGroupObjects ( const _variant_t & Objects, long selectionType ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x0003", &Objects, selectionType);
    return _result;
}

#pragma implementation_key(591)
inline VARIANT_BOOL ksProcess3DNotify::AbortProcess ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// interface IModelObjectNotifyResult wrapper method implementations
//

#pragma implementation_key(592)
inline enum ksObject3DNotifyEnum IModelObjectNotifyResult::GetNotifyType ( ) {
    enum ksObject3DNotifyEnum _result;
    HRESULT _hr = get_NotifyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(593)
inline _variant_t IModelObjectNotifyResult::GetNotifyObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NotifyObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(594)
inline enum ProcessTypeEnum IModelObjectNotifyResult::GetProcessType ( ) {
    enum ProcessTypeEnum _result;
    HRESULT _hr = get_ProcessType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(595)
inline VARIANT_BOOL IModelObjectNotifyResult::GetIsUndoMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUndoMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(596)
inline VARIANT_BOOL IModelObjectNotifyResult::GetIsRedoMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRedoMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface ksContentDialogNotify wrapper method implementations
//

#pragma implementation_key(597)
inline VARIANT_BOOL ksContentDialogNotify::CreateContentCallback ( OLE_HANDLE ParentHwnd, OLE_HANDLE * NewContentHwnd ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x4003", ParentHwnd, NewContentHwnd);
    return _result;
}

#pragma implementation_key(598)
inline VARIANT_BOOL ksContentDialogNotify::DestroyContent ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(599)
inline VARIANT_BOOL ksContentDialogNotify::ExecuteCommand ( long ButtonID ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", ButtonID);
    return _result;
}

#pragma implementation_key(600)
inline VARIANT_BOOL ksContentDialogNotify::ButtonUpdate ( long ButtonID, long * Check, VARIANT_BOOL * Enable ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x4003\x400b", ButtonID, Check, Enable);
    return _result;
}

//
// dispinterface ksProcess3DManipulatorsNotify wrapper method implementations
//

#pragma implementation_key(601)
inline VARIANT_BOOL ksProcess3DManipulatorsNotify::RotateManipulator ( long ManipulatorId, double X0, double Y0, double Z0, double AxisZX, double AxisZXY, double AxisZZ, double Angle, VARIANT_BOOL FromEdit ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0005\x0005\x0005\x0005\x0005\x0005\x0005\x000b", ManipulatorId, X0, Y0, Z0, AxisZX, AxisZXY, AxisZZ, Angle, FromEdit);
    return _result;
}

#pragma implementation_key(602)
inline VARIANT_BOOL ksProcess3DManipulatorsNotify::MoveManipulator ( long ManipulatorId, double VX, double VY, double VZ, double Delta, VARIANT_BOOL FromEdit ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0005\x0005\x0005\x0005\x000b", ManipulatorId, VX, VY, VZ, Delta, FromEdit);
    return _result;
}

#pragma implementation_key(603)
inline VARIANT_BOOL ksProcess3DManipulatorsNotify::ClickManipulatorPrimitive ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType, VARIANT_BOOL DoubleClick ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0003\x000b", ManipulatorId, PrimitiveType, DoubleClick);
    return _result;
}

#pragma implementation_key(604)
inline VARIANT_BOOL ksProcess3DManipulatorsNotify::BeginDragManipulator ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0003", ManipulatorId, PrimitiveType);
    return _result;
}

#pragma implementation_key(605)
inline VARIANT_BOOL ksProcess3DManipulatorsNotify::EndDragManipulator ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0003", ManipulatorId, PrimitiveType);
    return _result;
}

#pragma implementation_key(606)
inline VARIANT_BOOL ksProcess3DManipulatorsNotify::CreateManipulatorEdit ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0003", ManipulatorId, PrimitiveType);
    return _result;
}

#pragma implementation_key(607)
inline VARIANT_BOOL ksProcess3DManipulatorsNotify::DestroyManipulatorEdit ( long ManipulatorId ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003", ManipulatorId);
    return _result;
}

#pragma implementation_key(608)
inline VARIANT_BOOL ksProcess3DManipulatorsNotify::ChangeManipulatorValue ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType, double newValue ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0003\x0003\x0005", ManipulatorId, PrimitiveType, newValue);
    return _result;
}

//
// dispinterface ksPLMObjectNotify wrapper method implementations
//

#pragma implementation_key(609)
inline VARIANT_BOOL ksPLMObjectNotify::PLMStatusChanged ( IDispatch * Object, long newValue ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", Object, newValue);
    return _result;
}

#pragma implementation_key(610)
inline VARIANT_BOOL ksPLMObjectNotify::PLMChangeChanged ( IDispatch * Object, long newValue ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009\x0003", Object, newValue);
    return _result;
}

//
// dispinterface ksFindObject3DParametersNotify wrapper method implementations
//

#pragma implementation_key(611)
inline VARIANT_BOOL ksFindObject3DParametersNotify::FilterObject ( IDispatch * Object ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Object);
    return _result;
}

//
// interface IMassInertiaParam7 wrapper method implementations
//

#pragma implementation_key(612)
inline void IMassInertiaParam7::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(613)
inline double IMassInertiaParam7::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(614)
inline void IMassInertiaParam7::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(615)
inline double IMassInertiaParam7::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(616)
inline void IMassInertiaParam7::PutZc ( double PVal ) {
    HRESULT _hr = put_Zc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(617)
inline double IMassInertiaParam7::GetZc ( ) {
    double _result = 0;
    HRESULT _hr = get_Zc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(618)
inline void IMassInertiaParam7::PutManualMassCentre ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ManualMassCentre(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(619)
inline VARIANT_BOOL IMassInertiaParam7::GetManualMassCentre ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ManualMassCentre(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(620)
inline void IMassInertiaParam7::PutLengthUnits ( enum ksLengthUnitsEnum PVal ) {
    HRESULT _hr = put_LengthUnits(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(621)
inline enum ksLengthUnitsEnum IMassInertiaParam7::GetLengthUnits ( ) {
    enum ksLengthUnitsEnum _result;
    HRESULT _hr = get_LengthUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(622)
inline void IMassInertiaParam7::PutMassUnits ( enum ksMassUnitsEnum PVal ) {
    HRESULT _hr = put_MassUnits(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(623)
inline enum ksMassUnitsEnum IMassInertiaParam7::GetMassUnits ( ) {
    enum ksMassUnitsEnum _result;
    HRESULT _hr = get_MassUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(624)
inline void IMassInertiaParam7::PutManualMass ( double _arg1 ) {
    HRESULT _hr = put_ManualMass(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(625)
inline double IMassInertiaParam7::GetCalculateMass ( ) {
    double _result = 0;
    HRESULT _hr = get_CalculateMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(626)
inline void IMassInertiaParam7::PutMassSettingMode ( enum ksMassSettingModeEnum PVal ) {
    HRESULT _hr = put_MassSettingMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline enum ksMassSettingModeEnum IMassInertiaParam7::GetMassSettingMode ( ) {
    enum ksMassSettingModeEnum _result;
    HRESULT _hr = get_MassSettingMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(628)
inline void IMassInertiaParam7::PutManualDensity ( double _arg1 ) {
    HRESULT _hr = put_ManualDensity(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(629)
inline double IMassInertiaParam7::GetHandBookDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_HandBookDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(630)
inline void IMassInertiaParam7::PutDensityMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DensityMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(631)
inline VARIANT_BOOL IMassInertiaParam7::GetDensityMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DensityMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline double IMassInertiaParam7::GetVolume ( ) {
    double _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(633)
inline double IMassInertiaParam7::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(634)
inline void IMassInertiaParam7::PutSourceData ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SourceData(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(635)
inline VARIANT_BOOL IMassInertiaParam7::GetSourceData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SourceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline VARIANT_BOOL IMassInertiaParam7::GetActual ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Actual(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(637)
inline VARIANT_BOOL IMassInertiaParam7::Calculate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Calculate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline double IMassInertiaParam7::GetLX ( ) {
    double _result = 0;
    HRESULT _hr = get_LX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline double IMassInertiaParam7::GetLY ( ) {
    double _result = 0;
    HRESULT _hr = get_LY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline double IMassInertiaParam7::GetLz ( ) {
    double _result = 0;
    HRESULT _hr = get_Lz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline double IMassInertiaParam7::GetLxy ( ) {
    double _result = 0;
    HRESULT _hr = get_Lxy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(642)
inline double IMassInertiaParam7::GetLxz ( ) {
    double _result = 0;
    HRESULT _hr = get_Lxz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline double IMassInertiaParam7::GetLyz ( ) {
    double _result = 0;
    HRESULT _hr = get_Lyz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline double IMassInertiaParam7::GetJx ( ) {
    double _result = 0;
    HRESULT _hr = get_Jx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(645)
inline double IMassInertiaParam7::GetJy ( ) {
    double _result = 0;
    HRESULT _hr = get_Jy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(646)
inline double IMassInertiaParam7::GetJz ( ) {
    double _result = 0;
    HRESULT _hr = get_Jz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline double IMassInertiaParam7::GetJxy ( ) {
    double _result = 0;
    HRESULT _hr = get_Jxy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline double IMassInertiaParam7::GetJxz ( ) {
    double _result = 0;
    HRESULT _hr = get_Jxz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline double IMassInertiaParam7::GetJyz ( ) {
    double _result = 0;
    HRESULT _hr = get_Jyz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(650)
inline double IMassInertiaParam7::GetJx0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Jx0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline double IMassInertiaParam7::GetJy0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Jy0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(652)
inline double IMassInertiaParam7::GetJz0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Jz0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(653)
inline VARIANT_BOOL IMassInertiaParam7::GetAxisX ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAxisX(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(654)
inline VARIANT_BOOL IMassInertiaParam7::GetAxisY ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAxisY(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline VARIANT_BOOL IMassInertiaParam7::GetAxisZ ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAxisZ(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline double IMassInertiaParam7::GetMass ( ) {
    double _result = 0;
    HRESULT _hr = get_Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline double IMassInertiaParam7::GetDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline _bstr_t IMassInertiaParam7::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(659)
inline VARIANT_BOOL IMassInertiaParam7::SetMaterial ( _bstr_t Name, double Density ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetMaterial(Name, Density, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(660)
inline void IMassInertiaParam7::PutMaterialLocation ( _bstr_t PVal ) {
    HRESULT _hr = put_MaterialLocation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(661)
inline _bstr_t IMassInertiaParam7::GetMaterialLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MaterialLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(662)
inline void IMassInertiaParam7::PutCopySourceData ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CopySourceData(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(663)
inline VARIANT_BOOL IMassInertiaParam7::GetCopySourceData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CopySourceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IThinParameters wrapper method implementations
//

#pragma implementation_key(664)
inline void IThinParameters::PutThin ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Thin(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(665)
inline VARIANT_BOOL IThinParameters::GetThin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Thin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline void IThinParameters::PutThinType ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_ThinType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline ksDirectionTypeEnum IThinParameters::GetThinType ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_ThinType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(668)
inline void IThinParameters::PutThickness ( VARIANT_BOOL Normal, double PVal ) {
    HRESULT _hr = put_Thickness(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(669)
inline double IThinParameters::GetThickness ( VARIANT_BOOL Normal ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(670)
inline VARIANT_BOOL IThinParameters::GetThinParameters ( VARIANT_BOOL * Thin, ksDirectionTypeEnum * ThinType, double * ThicknessNormal, double * ThicknessReverse ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetThinParameters(Thin, ThinType, ThicknessNormal, ThicknessReverse, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline VARIANT_BOOL IThinParameters::SetThinParameters ( VARIANT_BOOL Thin, ksDirectionTypeEnum ThinType, double ThicknessNormal, double ThicknessReverse ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetThinParameters(Thin, ThinType, ThicknessNormal, ThicknessReverse, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IChooseBodies7 wrapper method implementations
//

#pragma implementation_key(672)
inline void IChooseBodies7::PutChooseBodiesType ( enum ksChooseBodiesType Type ) {
    HRESULT _hr = put_ChooseBodiesType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(673)
inline enum ksChooseBodiesType IChooseBodies7::GetChooseBodiesType ( ) {
    enum ksChooseBodiesType _result;
    HRESULT _hr = get_ChooseBodiesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(674)
inline void IChooseBodies7::PutBodies ( const _variant_t & Result ) {
    HRESULT _hr = put_Bodies(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(675)
inline _variant_t IChooseBodies7::GetBodies ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IChooseObjects wrapper method implementations
//

#pragma implementation_key(676)
inline void IChooseObjects::PutChooseType ( enum ksChooseType CurrentValue ) {
    HRESULT _hr = put_ChooseType(CurrentValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(677)
inline enum ksChooseType IChooseObjects::GetChooseType ( ) {
    enum ksChooseType _result;
    HRESULT _hr = get_ChooseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(678)
inline void IChooseObjects::PutChoosePartsType ( enum ksChoosePartsType Type ) {
    HRESULT _hr = put_ChoosePartsType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(679)
inline enum ksChoosePartsType IChooseObjects::GetChoosePartsType ( ) {
    enum ksChoosePartsType _result;
    HRESULT _hr = get_ChoosePartsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(680)
inline void IChooseObjects::PutChooseBodies ( const _variant_t & Result ) {
    HRESULT _hr = put_ChooseBodies(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(681)
inline _variant_t IChooseObjects::GetChooseBodies ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChooseBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(682)
inline void IChooseObjects::PutChooseParts ( const _variant_t & Result ) {
    HRESULT _hr = put_ChooseParts(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(683)
inline _variant_t IChooseObjects::GetChooseParts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChooseParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISourcePart7Params wrapper method implementations
//

#pragma implementation_key(684)
inline _bstr_t ISourcePart7Params::GetSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(685)
inline void ISourcePart7Params::PutSourceName ( _bstr_t PVal ) {
    HRESULT _hr = put_SourceName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline _bstr_t ISourcePart7Params::GetSourceMarking ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceMarking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(687)
inline void ISourcePart7Params::PutSourceMarking ( _bstr_t PVal ) {
    HRESULT _hr = put_SourceMarking(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline _bstr_t ISourcePart7Params::GetDocumentAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentAuthor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(689)
inline void ISourcePart7Params::PutDocumentAuthor ( _bstr_t PVal ) {
    HRESULT _hr = put_DocumentAuthor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline _variant_t ISourcePart7Params::GetDocumentComment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DocumentComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(691)
inline void ISourcePart7Params::PutDocumentComment ( const _variant_t & PVal ) {
    HRESULT _hr = put_DocumentComment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IModelCurve3D wrapper method implementations
//

#pragma implementation_key(692)
inline VARIANT_BOOL IModelCurve3D::GetVertexVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VertexVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void IModelCurve3D::PutVertexVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_VertexVisible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline enum ksAnnotationSymbolEnum IModelCurve3D::GetVertexStyle ( ) {
    enum ksAnnotationSymbolEnum _result;
    HRESULT _hr = get_VertexStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline void IModelCurve3D::PutVertexStyle ( enum ksAnnotationSymbolEnum Style ) {
    HRESULT _hr = put_VertexStyle(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(696)
inline enum ksCurveStyleEnum IModelCurve3D::GetEdgesStyle ( ) {
    enum ksCurveStyleEnum _result;
    HRESULT _hr = get_EdgesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(697)
inline void IModelCurve3D::PutEdgesStyle ( enum ksCurveStyleEnum Style ) {
    HRESULT _hr = put_EdgesStyle(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(698)
inline _variant_t IModelCurve3D::GetVerticesParams ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetVerticesParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IRotated1 wrapper method implementations
//

#pragma implementation_key(699)
inline void IRotated1::PutOperationResult ( enum ksOperationResultEnum Result ) {
    HRESULT _hr = put_OperationResult(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(700)
inline enum ksOperationResultEnum IRotated1::GetOperationResult ( ) {
    enum ksOperationResultEnum _result;
    HRESULT _hr = get_OperationResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUserParameters wrapper method implementations
//

#pragma implementation_key(701)
inline _bstr_t IUserParameters::GetLibraryFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(702)
inline void IUserParameters::PutLibraryFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_LibraryFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(703)
inline _bstr_t IUserParameters::GetLibraryName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(704)
inline void IUserParameters::PutLibraryName ( _bstr_t PVal ) {
    HRESULT _hr = put_LibraryName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(705)
inline long IUserParameters::GetCommand ( ) {
    long _result = 0;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(706)
inline void IUserParameters::PutCommand ( long PVal ) {
    HRESULT _hr = put_Command(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(707)
inline void IUserParameters::PutObjectID ( _bstr_t PVal ) {
    HRESULT _hr = put_ObjectID(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(708)
inline _bstr_t IUserParameters::GetObjectID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(709)
inline void IUserParameters::PutUserParams ( const _variant_t & PVal ) {
    HRESULT _hr = put_UserParams(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(710)
inline _variant_t IUserParameters::GetUserParams ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UserParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(711)
inline VARIANT_BOOL IUserParameters::ClearUserParameters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearUserParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IThreadsParameters wrapper method implementations
//

#pragma implementation_key(712)
inline VARIANT_BOOL IThreadsParameters::Init ( _bstr_t StandardFileName, double Diameter, double Pitch ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Init(StandardFileName, Diameter, Pitch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline double IThreadsParameters::GetDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(714)
inline void IThreadsParameters::PutDiameter ( double PVal ) {
    HRESULT _hr = put_Diameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(715)
inline double IThreadsParameters::GetPitch ( ) {
    double _result = 0;
    HRESULT _hr = get_Pitch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline void IThreadsParameters::PutPitch ( double PVal ) {
    HRESULT _hr = put_Pitch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(717)
inline _bstr_t IThreadsParameters::GetThreadStandardFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ThreadStandardFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(718)
inline double IThreadsParameters::GetInternalDiameterCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_InternalDiameterCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(719)
inline double IThreadsParameters::GetConicalThreadAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_ConicalThreadAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline VARIANT_BOOL IThreadsParameters::GetInternal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Internal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IShellSurface wrapper method implementations
//

#pragma implementation_key(721)
inline void IShellSurface::PutClosedShell ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosedShell(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline VARIANT_BOOL IShellSurface::GetClosedShell ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedShell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITessellation7 wrapper method implementations
//

#pragma implementation_key(723)
inline double ITessellation7::GetFacetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_FacetSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline void ITessellation7::PutFacetSize ( double PVal ) {
    HRESULT _hr = put_FacetSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline double ITessellation7::GetFacetSag ( ) {
    double _result = 0;
    HRESULT _hr = get_FacetSag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(726)
inline void ITessellation7::PutFacetSag ( double PVal ) {
    HRESULT _hr = put_FacetSag(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline double ITessellation7::GetFacetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_FacetAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(728)
inline void ITessellation7::PutFacetAngle ( double PVal ) {
    HRESULT _hr = put_FacetAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline VARIANT_BOOL ITessellation7::GetNeedParams ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NeedParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline void ITessellation7::PutNeedParams ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NeedParams(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline VARIANT_BOOL ITessellation7::RebuildTessellation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RebuildTessellation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(732)
inline VARIANT_BOOL ITessellation7::GetFacetPoints ( VARIANT * Points, VARIANT * Indexes, VARIANT * Normals ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetFacetPoints(Points, Indexes, Normals, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(733)
inline _variant_t ITessellation7::GetFacetParams ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFacetParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISheetMetalUndercut wrapper method implementations
//

#pragma implementation_key(734)
inline void ISheetMetalUndercut::PutDistanceType ( enum ksUndercutDistanceTypeEnum PVal ) {
    HRESULT _hr = put_DistanceType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(735)
inline enum ksUndercutDistanceTypeEnum ISheetMetalUndercut::GetDistanceType ( ) {
    enum ksUndercutDistanceTypeEnum _result;
    HRESULT _hr = get_DistanceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline void ISheetMetalUndercut::PutDistance ( double PVal ) {
    HRESULT _hr = put_Distance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(737)
inline double ISheetMetalUndercut::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline void ISheetMetalUndercut::PutWithAddMaterial ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithAddMaterial(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline VARIANT_BOOL ISheetMetalUndercut::GetWithAddMaterial ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithAddMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBranchs wrapper method implementations
//

#pragma implementation_key(740)
inline double IBranchs::GetX0 ( ) {
    double _result = 0;
    HRESULT _hr = get_X0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(741)
inline void IBranchs::PutX0 ( double Result ) {
    HRESULT _hr = put_X0(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(742)
inline double IBranchs::GetY0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline void IBranchs::PutY0 ( double Result ) {
    HRESULT _hr = put_Y0(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(744)
inline long IBranchs::GetBranchCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BranchCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline void IBranchs::PutBranchPoints ( long Index, const _variant_t & PVal ) {
    HRESULT _hr = put_BranchPoints(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline _variant_t IBranchs::GetBranchPoints ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BranchPoints(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(747)
inline long IBranchs::GetBranchPointsCount ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_BranchPointsCount(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(748)
inline void IBranchs::PutBranchX ( long Index, double PVal ) {
    HRESULT _hr = put_BranchX(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(749)
inline double IBranchs::GetBranchX ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_BranchX(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline void IBranchs::PutBranchY ( long Index, double PVal ) {
    HRESULT _hr = put_BranchY(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(751)
inline double IBranchs::GetBranchY ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_BranchY(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline VARIANT_BOOL IBranchs::AddBranch ( long Index, const _variant_t & Points ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranch(Index, Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(753)
inline VARIANT_BOOL IBranchs::AddBranchByPoint ( long Index, double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranchByPoint(Index, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline VARIANT_BOOL IBranchs::DeleteBranch ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteBranch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxisLineParam wrapper method implementations
//

#pragma implementation_key(755)
inline void IAxisLineParam::PutJutLength ( double PVal ) {
    HRESULT _hr = put_JutLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(756)
inline double IAxisLineParam::GetJutLength ( ) {
    double _result = 0;
    HRESULT _hr = get_JutLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline void IAxisLineParam::PutDottedLength ( double PVal ) {
    HRESULT _hr = put_DottedLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline double IAxisLineParam::GetDottedLength ( ) {
    double _result = 0;
    HRESULT _hr = get_DottedLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline void IAxisLineParam::PutInterval ( double PVal ) {
    HRESULT _hr = put_Interval(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(760)
inline double IAxisLineParam::GetInterval ( ) {
    double _result = 0;
    HRESULT _hr = get_Interval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(761)
inline void IAxisLineParam::PutAutoDetectedDash ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoDetectedDash(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline VARIANT_BOOL IAxisLineParam::GetAutoDetectedDash ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoDetectedDash(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void IAxisLineParam::PutDashMaxLength ( double PVal ) {
    HRESULT _hr = put_DashMaxLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline double IAxisLineParam::GetDashMaxLength ( ) {
    double _result = 0;
    HRESULT _hr = get_DashMaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline void IAxisLineParam::PutJutLengthModify ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_JutLengthModify(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline VARIANT_BOOL IAxisLineParam::GetJutLengthModify ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_JutLengthModify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void IAxisLineParam::PutDottedLengthModify ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DottedLengthModify(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline VARIANT_BOOL IAxisLineParam::GetDottedLengthModify ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DottedLengthModify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline void IAxisLineParam::PutIntervalModify ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IntervalModify(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline VARIANT_BOOL IAxisLineParam::GetIntervalModify ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IntervalModify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline void IAxisLineParam::PutAutoDetectedDashModify ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoDetectedDashModify(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline VARIANT_BOOL IAxisLineParam::GetAutoDetectedDashModify ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoDetectedDashModify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void IAxisLineParam::PutDashMaxLengthModify ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DashMaxLengthModify(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline VARIANT_BOOL IAxisLineParam::GetDashMaxLengthModify ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DashMaxLengthModify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline void IAxisLineParam::PutJutLength1 ( double PVal ) {
    HRESULT _hr = put_JutLength1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline double IAxisLineParam::GetJutLength1 ( ) {
    double _result = 0;
    HRESULT _hr = get_JutLength1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline void IAxisLineParam::PutJutLength2 ( double PVal ) {
    HRESULT _hr = put_JutLength2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline double IAxisLineParam::GetJutLength2 ( ) {
    double _result = 0;
    HRESULT _hr = get_JutLength2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBoundariesObject wrapper method implementations
//

#pragma implementation_key(779)
inline _variant_t IBoundariesObject::GetBoundaries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Boundaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(780)
inline VARIANT_BOOL IBoundariesObject::AddBoundaries ( const _variant_t & Objects, VARIANT_BOOL DeleteSource ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBoundaries(Objects, DeleteSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline VARIANT_BOOL IBoundariesObject::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAnnotativeObject wrapper method implementations
//

#pragma implementation_key(782)
inline enum ksAnnotativeTerminatorSignEnum IAnnotativeObject::GetSign1 ( ) {
    enum ksAnnotativeTerminatorSignEnum _result;
    HRESULT _hr = get_Sign1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline void IAnnotativeObject::PutSign1 ( enum ksAnnotativeTerminatorSignEnum Result ) {
    HRESULT _hr = put_Sign1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline enum ksAnnotativeTerminatorSignEnum IAnnotativeObject::GetSign2 ( ) {
    enum ksAnnotativeTerminatorSignEnum _result;
    HRESULT _hr = get_Sign2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(785)
inline void IAnnotativeObject::PutSign2 ( enum ksAnnotativeTerminatorSignEnum Result ) {
    HRESULT _hr = put_Sign2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPropertyEditCheckBox wrapper method implementations
//

#pragma implementation_key(786)
inline VARIANT_BOOL IPropertyEditCheckBox::GetCheckButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(787)
inline void IPropertyEditCheckBox::PutCheckButton ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CheckButton(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(788)
inline VARIANT_BOOL IPropertyEditCheckBox::GetEnableCheckButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableCheckButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline void IPropertyEditCheckBox::PutEnableCheckButton ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableCheckButton(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline HRESULT IPropertyEditCheckBox::SetCustomBitmaps ( const _variant_t & IdUnchecked, const _variant_t & IdChecked, const _variant_t & IdIndeterminate, const _variant_t & HInstance ) {
    HRESULT _hr = raw_SetCustomBitmaps(IdUnchecked, IdChecked, IdIndeterminate, HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(791)
inline _bstr_t IPropertyEditCheckBox::GetDefaultValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(792)
inline void IPropertyEditCheckBox::PutDefaultValue ( _bstr_t PVal ) {
    HRESULT _hr = put_DefaultValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(793)
inline VARIANT_BOOL IPropertyEditCheckBox::GetMissing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Missing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline void IPropertyEditCheckBox::PutMissing ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Missing(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(795)
inline void IPropertyEditCheckBox::PutEnableDeleteValue ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableDeleteValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(796)
inline VARIANT_BOOL IPropertyEditCheckBox::GetEnableDeleteValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDeleteValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline void IPropertyEditCheckBox::PutIsLinkValue ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IsLinkValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(798)
inline VARIANT_BOOL IPropertyEditCheckBox::GetIsLinkValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinkValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICopyObjectParam1 wrapper method implementations
//

#pragma implementation_key(799)
inline void ICopyObjectParam1::PutStoragesCopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StoragesCopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline VARIANT_BOOL ICopyObjectParam1::GetStoragesCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StoragesCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(801)
inline void ICopyObjectParam1::PutHyperLinksCopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HyperLinksCopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(802)
inline VARIANT_BOOL ICopyObjectParam1::GetHyperLinksCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HyperLinksCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface INewPartDocumentSettings wrapper method implementations
//

#pragma implementation_key(803)
inline void INewPartDocumentSettings::PutMaterial ( _bstr_t PVal ) {
    HRESULT _hr = put_Material(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(804)
inline _bstr_t INewPartDocumentSettings::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(805)
inline void INewPartDocumentSettings::PutDensity ( double PVal ) {
    HRESULT _hr = put_Density(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(806)
inline double INewPartDocumentSettings::GetDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline void INewPartDocumentSettings::PutMaterialLocation ( _bstr_t PVal ) {
    HRESULT _hr = put_MaterialLocation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(808)
inline _bstr_t INewPartDocumentSettings::GetMaterialLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MaterialLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(809)
inline IHatchParamPtr INewPartDocumentSettings::GetHatchParam ( ) {
    struct IHatchParam * _result = 0;
    HRESULT _hr = get_HatchParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHatchParamPtr(_result, false);
}

//
// interface IAxis3D1 wrapper method implementations
//

#pragma implementation_key(810)
inline void IAxis3D1::PutShowName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(811)
inline VARIANT_BOOL IAxis3D1::GetShowName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlane3D1 wrapper method implementations
//

#pragma implementation_key(812)
inline void IPlane3D1::PutScaleGabarit ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ScaleGabarit(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(813)
inline VARIANT_BOOL IPlane3D1::GetScaleGabarit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScaleGabarit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline void IPlane3D1::PutShowName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(815)
inline VARIANT_BOOL IPlane3D1::GetShowName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(816)
inline double IPlane3D1::GetParamUMin ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamUMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(817)
inline double IPlane3D1::GetParamUMax ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamUMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(818)
inline double IPlane3D1::GetParamVMin ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamVMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(819)
inline double IPlane3D1::GetParamVMax ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamVMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(820)
inline VARIANT_BOOL IPlane3D1::SetLimit ( double Umin, double Vmin, double Umax, double Vmax ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLimit(Umin, Vmin, Umax, Vmax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalRuledShell wrapper method implementations
//

#pragma implementation_key(821)
inline void ISheetMetalRuledShell::PutDraftValue ( VARIANT_BOOL Normal, double PVal ) {
    HRESULT _hr = put_DraftValue(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(822)
inline double ISheetMetalRuledShell::GetDraftValue ( VARIANT_BOOL Normal ) {
    double _result = 0;
    HRESULT _hr = get_DraftValue(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(823)
inline void ISheetMetalRuledShell::PutDraftOutward ( VARIANT_BOOL Normal, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DraftOutward(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(824)
inline VARIANT_BOOL ISheetMetalRuledShell::GetDraftOutward ( VARIANT_BOOL Normal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DraftOutward(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline void ISheetMetalRuledShell::PutKeepRadius ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_KeepRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(826)
inline VARIANT_BOOL ISheetMetalRuledShell::GetKeepRadius ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline void ISheetMetalRuledShell::PutRuledBorder ( enum ksRuledBorderEnum PVal ) {
    HRESULT _hr = put_RuledBorder(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(828)
inline enum ksRuledBorderEnum ISheetMetalRuledShell::GetRuledBorder ( ) {
    enum ksRuledBorderEnum _result;
    HRESULT _hr = get_RuledBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(829)
inline void ISheetMetalRuledShell::PutRuledJoint ( enum ksRuledJointEnum PVal ) {
    HRESULT _hr = put_RuledJoint(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(830)
inline enum ksRuledJointEnum ISheetMetalRuledShell::GetRuledJoint ( ) {
    enum ksRuledJointEnum _result;
    HRESULT _hr = get_RuledJoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(831)
inline double ISheetMetalRuledShell::GetGapValue ( ) {
    double _result = 0;
    HRESULT _hr = get_GapValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(832)
inline void ISheetMetalRuledShell::PutGapValue ( double PVal ) {
    HRESULT _hr = put_GapValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(833)
inline void ISheetMetalRuledShell::PutOffsetGapType ( enum ksOffsetGapType PVal ) {
    HRESULT _hr = put_OffsetGapType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(834)
inline enum ksOffsetGapType ISheetMetalRuledShell::GetOffsetGapType ( ) {
    enum ksOffsetGapType _result;
    HRESULT _hr = get_OffsetGapType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(835)
inline void ISheetMetalRuledShell::PutGapOffsetU ( double PVal ) {
    HRESULT _hr = put_GapOffsetU(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(836)
inline double ISheetMetalRuledShell::GetGapOffsetU ( ) {
    double _result = 0;
    HRESULT _hr = get_GapOffsetU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline void ISheetMetalRuledShell::PutGapOffsetLength ( double PVal ) {
    HRESULT _hr = put_GapOffsetLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(838)
inline double ISheetMetalRuledShell::GetGapOffsetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_GapOffsetLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline void ISheetMetalRuledShell::PutGapDraftPosition ( double PVal ) {
    HRESULT _hr = put_GapDraftPosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(840)
inline double ISheetMetalRuledShell::GetGapDraftPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_GapDraftPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(841)
inline void ISheetMetalRuledShell::PutUseSegmentation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseSegmentation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(842)
inline VARIANT_BOOL ISheetMetalRuledShell::GetUseSegmentation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSegmentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(843)
inline void ISheetMetalRuledShell::PutSegmentationMethod ( enum ksSegmentationMethodEnum PVal ) {
    HRESULT _hr = put_SegmentationMethod(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(844)
inline enum ksSegmentationMethodEnum ISheetMetalRuledShell::GetSegmentationMethod ( ) {
    enum ksSegmentationMethodEnum _result;
    HRESULT _hr = get_SegmentationMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(845)
inline void ISheetMetalRuledShell::PutSegmentationSplitValue ( double PVal ) {
    HRESULT _hr = put_SegmentationSplitValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(846)
inline double ISheetMetalRuledShell::GetSegmentationSplitValue ( ) {
    double _result = 0;
    HRESULT _hr = get_SegmentationSplitValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface ksFindObjectParametersNotify wrapper method implementations
//

#pragma implementation_key(847)
inline VARIANT_BOOL ksFindObjectParametersNotify::FilterObject ( IDispatch * Object ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0009", Object);
    return _result;
}

//
// interface IPlacement3DManipulator wrapper method implementations
//

#pragma implementation_key(848)
inline void IPlacement3DManipulator::PutPrimitiveVisible ( enum ksManipulatorPrimitiveEnum Primitive, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PrimitiveVisible(Primitive, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline VARIANT_BOOL IPlacement3DManipulator::GetPrimitiveVisible ( enum ksManipulatorPrimitiveEnum Primitive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrimitiveVisible(Primitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline void IPlacement3DManipulator::PutPrimitiveDisabled ( enum ksManipulatorPrimitiveEnum Primitive, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PrimitiveDisabled(Primitive, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline VARIANT_BOOL IPlacement3DManipulator::GetPrimitiveDisabled ( enum ksManipulatorPrimitiveEnum Primitive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrimitiveDisabled(Primitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(852)
inline void IPlacement3DManipulator::PutPrimitiveSelected ( enum ksManipulatorPrimitiveEnum PVal ) {
    HRESULT _hr = put_PrimitiveSelected(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(853)
inline enum ksManipulatorPrimitiveEnum IPlacement3DManipulator::GetPrimitiveSelected ( ) {
    enum ksManipulatorPrimitiveEnum _result;
    HRESULT _hr = get_PrimitiveSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline void IPlacement3DManipulator::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline VARIANT_BOOL IPlacement3DManipulator::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void IPlacement3DManipulator::PutMode ( long PVal ) {
    HRESULT _hr = put_Mode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(857)
inline long IPlacement3DManipulator::GetMode ( ) {
    long _result = 0;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline VARIANT_BOOL IPlacement3DManipulator::SetRotateRange ( double Min, double Max ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetRotateRange(Min, Max, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(859)
inline VARIANT_BOOL IPlacement3DManipulator::SetShiftRange ( double Min, double Max ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetShiftRange(Min, Max, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void IPlacement3DManipulator::PutRotateStep ( double PVal ) {
    HRESULT _hr = put_RotateStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline double IPlacement3DManipulator::GetRotateStep ( ) {
    double _result = 0;
    HRESULT _hr = get_RotateStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void IPlacement3DManipulator::PutShiftStep ( double PVal ) {
    HRESULT _hr = put_ShiftStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline double IPlacement3DManipulator::GetShiftStep ( ) {
    double _result = 0;
    HRESULT _hr = get_ShiftStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline void IPlacement3DManipulator::PutEditValue ( double PVal ) {
    HRESULT _hr = put_EditValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(865)
inline double IPlacement3DManipulator::GetEditValue ( ) {
    double _result = 0;
    HRESULT _hr = get_EditValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(866)
inline VARIANT_BOOL IPlacement3DManipulator::GetIsEditCreated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEditCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IApplicationLicenseManager wrapper method implementations
//

#pragma implementation_key(867)
inline long IApplicationLicenseManager::GetKompasVariant ( ) {
    long _result = 0;
    HRESULT _hr = get_KompasVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline void IApplicationLicenseManager::PutKompasModuleActive ( enum ksKompasModuleEnum Module, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_KompasModuleActive(Module, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(869)
inline VARIANT_BOOL IApplicationLicenseManager::GetKompasModuleActive ( enum ksKompasModuleEnum Module ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KompasModuleActive(Module, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline VARIANT_BOOL IApplicationLicenseManager::EnableKompasInvisible ( _bstr_t Key, _bstr_t Signature ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EnableKompasInvisible(Key, Signature, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(871)
inline VARIANT_BOOL IApplicationLicenseManager::GetLibraryActive ( long ProductNumber ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LibraryActive(ProductNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(872)
inline void IApplicationLicenseManager::PutLibraryActive ( long ProductNumber, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_LibraryActive(ProductNumber, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(873)
inline enum ksProtectProductStatusEnum IApplicationLicenseManager::GetLibraryStatus ( long ProductNumber ) {
    enum ksProtectProductStatusEnum _result;
    HRESULT _hr = get_LibraryStatus(ProductNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline VARIANT_BOOL IApplicationLicenseManager::GetLibraryTrialStatus ( long ProductNumber ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LibraryTrialStatus(ProductNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline VARIANT_BOOL IApplicationLicenseManager::GetLibraryLocalStatus ( long ProductNumber ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LibraryLocalStatus(ProductNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(876)
inline _bstr_t IApplicationLicenseManager::GetLibraryProductName ( long ProductNumber ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryProductName(ProductNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(877)
inline _bstr_t IApplicationLicenseManager::GetLibraryProductKeyInfo ( long ProductNumber ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryProductKeyInfo(ProductNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(878)
inline long IApplicationLicenseManager::RegisterLibraryNumber ( long ProductNumber ) {
    long _result = 0;
    HRESULT _hr = raw_RegisterLibraryNumber(ProductNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(879)
inline VARIANT_BOOL IApplicationLicenseManager::UnRegisterLibraryNumber ( long ProductNumbUnicueId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UnRegisterLibraryNumber(ProductNumbUnicueId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPLMObject wrapper method implementations
//

#pragma implementation_key(880)
inline void IPLMObject::PutPLMStatus ( enum ksPLMStatusEnum PVal ) {
    HRESULT _hr = put_PLMStatus(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline enum ksPLMStatusEnum IPLMObject::GetPLMStatus ( ) {
    enum ksPLMStatusEnum _result;
    HRESULT _hr = get_PLMStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline void IPLMObject::PutPLMChange ( enum ksPLMChangesEnum PVal ) {
    HRESULT _hr = put_PLMChange(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline enum ksPLMChangesEnum IPLMObject::GetPLMChange ( ) {
    enum ksPLMChangesEnum _result;
    HRESULT _hr = get_PLMChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(884)
inline void IPLMObject::PutPLMPropertyValue ( enum ksPLMPropertyEnum Property, const _variant_t & PVal ) {
    HRESULT _hr = put_PLMPropertyValue(Property, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline _variant_t IPLMObject::GetPLMPropertyValue ( enum ksPLMPropertyEnum Property ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PLMPropertyValue(Property, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IPLMObjectsManager wrapper method implementations
//

#pragma implementation_key(886)
inline VARIANT_BOOL IPLMObjectsManager::SetPLMChangesAttrAvailability ( VARIANT_BOOL Available, VARIANT_BOOL Enabled ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPLMChangesAttrAvailability(Available, Enabled, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline VARIANT_BOOL IPLMObjectsManager::SetPLMStatusAttrAvailability ( VARIANT_BOOL Available, VARIANT_BOOL Enabled ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPLMStatusAttrAvailability(Available, Enabled, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline void IPLMObjectsManager::PutPLMStatus ( _bstr_t FileName, enum ksPLMStatusEnum PVal ) {
    HRESULT _hr = put_PLMStatus(FileName, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(889)
inline enum ksPLMStatusEnum IPLMObjectsManager::GetPLMStatus ( _bstr_t FileName ) {
    enum ksPLMStatusEnum _result;
    HRESULT _hr = get_PLMStatus(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(890)
inline void IPLMObjectsManager::PutPLMChange ( _bstr_t FileName, enum ksPLMChangesEnum PVal ) {
    HRESULT _hr = put_PLMChange(FileName, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(891)
inline enum ksPLMChangesEnum IPLMObjectsManager::GetPLMChange ( _bstr_t FileName ) {
    enum ksPLMChangesEnum _result;
    HRESULT _hr = get_PLMChange(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(892)
inline VARIANT_BOOL IPLMObjectsManager::SetPLMPropertyAvailability ( enum ksPLMPropertyEnum Property, VARIANT_BOOL Available, VARIANT_BOOL Enabled, const _variant_t & ValueList ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPLMPropertyAvailability(Property, Available, Enabled, ValueList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(893)
inline void IPLMObjectsManager::PutPLMPropertyValue ( enum ksPLMPropertyEnum Property, _bstr_t FileName, const _variant_t & PVal ) {
    HRESULT _hr = put_PLMPropertyValue(Property, FileName, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline _variant_t IPLMObjectsManager::GetPLMPropertyValue ( enum ksPLMPropertyEnum Property, _bstr_t FileName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PLMPropertyValue(Property, FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IMultiThicknessGroupsManager wrapper method implementations
//

#pragma implementation_key(895)
inline VARIANT_BOOL IMultiThicknessGroupsManager::GetMultiThick ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiThick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(896)
inline void IMultiThicknessGroupsManager::PutMultiThick ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MultiThick(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(897)
inline VARIANT_BOOL IMultiThicknessGroupsManager::AddMultiThicknessGroup ( enum ksMultiThicknessGroupTypeEnum Type, const _variant_t & Objects, double Thickness ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddMultiThicknessGroup(Type, Objects, Thickness, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(898)
inline long IMultiThicknessGroupsManager::GetMultiThicknessGroupsCount ( enum ksMultiThicknessGroupTypeEnum Type ) {
    long _result = 0;
    HRESULT _hr = get_MultiThicknessGroupsCount(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(899)
inline _variant_t IMultiThicknessGroupsManager::GetMultiThicknessGroupsObjects ( enum ksMultiThicknessGroupTypeEnum Type, long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MultiThicknessGroupsObjects(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(900)
inline void IMultiThicknessGroupsManager::PutMultiThicknessGroupsObjects ( enum ksMultiThicknessGroupTypeEnum Type, long Index, const _variant_t & Result ) {
    HRESULT _hr = put_MultiThicknessGroupsObjects(Type, Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(901)
inline double IMultiThicknessGroupsManager::GetMultiThicknessGroupsThickness ( enum ksMultiThicknessGroupTypeEnum Type, long Index ) {
    double _result = 0;
    HRESULT _hr = get_MultiThicknessGroupsThickness(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline void IMultiThicknessGroupsManager::PutMultiThicknessGroupsThickness ( enum ksMultiThicknessGroupTypeEnum Type, long Index, double Result ) {
    HRESULT _hr = put_MultiThicknessGroupsThickness(Type, Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(903)
inline VARIANT_BOOL IMultiThicknessGroupsManager::DeleteMultiThicknessGroup ( enum ksMultiThicknessGroupTypeEnum Type, long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteMultiThicknessGroup(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline VARIANT_BOOL IMultiThicknessGroupsManager::DestroyMultiThicknessGroup ( enum ksMultiThicknessGroupTypeEnum Type, long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DestroyMultiThicknessGroup(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline VARIANT_BOOL IMultiThicknessGroupsManager::ExcludeMultiThicknessGroupObjects ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExcludeMultiThicknessGroupObjects(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline VARIANT_BOOL IMultiThicknessGroupsManager::ClearMultiThicknessGroups ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearMultiThicknessGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContextPanel wrapper method implementations
//

#pragma implementation_key(907)
inline VARIANT_BOOL IContextPanel::Fill ( _bstr_t ContextPanelID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Fill(ContextPanelID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline VARIANT_BOOL IContextPanel::FillComboBoxImage ( _bstr_t ComboBoxID, _bstr_t CommandsGroupID, const _variant_t & FilterCommands, long CurrentCommand ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FillComboBoxImage(ComboBoxID, CommandsGroupID, FilterCommands, CurrentCommand, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(909)
inline VARIANT_BOOL IContextPanel::FillComboBoxStyle ( _bstr_t ComboBoxID, enum ControlTypeEnum StyleType, const _variant_t & Styles, long CurrentStyleId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FillComboBoxStyle(ComboBoxID, StyleType, Styles, CurrentStyleId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDimension3D wrapper method implementations
//

#pragma implementation_key(910)
inline VARIANT_BOOL IDimension3D::GetTextPosition ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetTextPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(911)
inline VARIANT_BOOL IDimension3D::SetTextPosition ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTextPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline VARIANT_BOOL IDimension3D::GetDimensionPoint ( enum ksDimensionPointEnum DimensionPoint, long PointIndex, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDimensionPoint(DimensionPoint, PointIndex, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDimension2D wrapper method implementations
//

#pragma implementation_key(913)
inline VARIANT_BOOL IDimension2D::GetTextPosition ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetTextPosition(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline VARIANT_BOOL IDimension2D::SetTextPosition ( double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTextPosition(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(915)
inline VARIANT_BOOL IDimension2D::GetAutoSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline void IDimension2D::PutAutoSorted ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSorted(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(917)
inline VARIANT_BOOL IDimension2D::GetDimensionPoint ( enum ksDimensionPointEnum DimensionPoint, long PointIndex, double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDimensionPoint(DimensionPoint, PointIndex, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDesignation3D wrapper method implementations
//

#pragma implementation_key(918)
inline VARIANT_BOOL IDesignation3D::GetDesignationPoint ( enum ksDesignationPointEnum DimensionPoint, long PointIndex, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDesignationPoint(DimensionPoint, PointIndex, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDesignation2D wrapper method implementations
//

#pragma implementation_key(919)
inline VARIANT_BOOL IDesignation2D::GetDesignationPoint ( enum ksDesignationPointEnum DimensionPoint, long PointIndex, double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDesignationPoint(DimensionPoint, PointIndex, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISystemTemplatesSettings wrapper method implementations
//

#pragma implementation_key(920)
inline void ISystemTemplatesSettings::PutTemplatePath ( enum DocumentTypeEnum DocumentType, _bstr_t DocumentTypeId, _bstr_t Result ) {
    HRESULT _hr = put_TemplatePath(DocumentType, DocumentTypeId, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline _bstr_t ISystemTemplatesSettings::GetTemplatePath ( enum DocumentTypeEnum DocumentType, _bstr_t DocumentTypeId ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplatePath(DocumentType, DocumentTypeId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(922)
inline VARIANT_BOOL ISystemTemplatesSettings::GetAddGroupSpecificationTemplate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddGroupSpecificationTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(923)
inline void ISystemTemplatesSettings::PutAddGroupSpecificationTemplate ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AddGroupSpecificationTemplate(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(924)
inline long ISystemTemplatesSettings::GetGroupSpecificationEmbodimentCount ( ) {
    long _result = 0;
    HRESULT _hr = get_GroupSpecificationEmbodimentCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline void ISystemTemplatesSettings::PutGroupSpecificationEmbodimentCount ( long PVal ) {
    HRESULT _hr = put_GroupSpecificationEmbodimentCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline void ISystemTemplatesSettings::PutSpecificationTemplatePath ( enum ksSpecificationVariantEnum SpcType, _bstr_t Result ) {
    HRESULT _hr = put_SpecificationTemplatePath(SpcType, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline _bstr_t ISystemTemplatesSettings::GetSpecificationTemplatePath ( enum ksSpecificationVariantEnum SpcType ) {
    BSTR _result = 0;
    HRESULT _hr = get_SpecificationTemplatePath(SpcType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IKompasAPIObject wrapper method implementations
//

#pragma implementation_key(928)
inline IKompasAPIObjectPtr IKompasAPIObject::GetParent ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(929)
inline IApplicationPtr IKompasAPIObject::GetApplication ( ) {
    struct IApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationPtr(_result, false);
}

#pragma implementation_key(930)
inline enum KompasAPIObjectTypeEnum IKompasAPIObject::GetType ( ) {
    enum KompasAPIObjectTypeEnum _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(931)
inline long IKompasAPIObject::GetReference ( ) {
    long _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IKompasCollection wrapper method implementations
//

#pragma implementation_key(932)
inline IUnknownPtr IKompasCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(933)
inline long IKompasCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDocumentFrame wrapper method implementations
//

#pragma implementation_key(934)
inline void IDocumentFrame::PutRegime ( enum FrameRegimeEnum PVal ) {
    HRESULT _hr = put_Regime(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(935)
inline enum FrameRegimeEnum IDocumentFrame::GetRegime ( ) {
    enum FrameRegimeEnum _result;
    HRESULT _hr = get_Regime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(936)
inline void IDocumentFrame::PutActive ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Active(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(937)
inline VARIANT_BOOL IDocumentFrame::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(938)
inline _bstr_t IDocumentFrame::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(939)
inline HRESULT IDocumentFrame::Zoom ( double X1, double Y1, double X2, double Y2 ) {
    HRESULT _hr = raw_Zoom(X1, Y1, X2, Y2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(940)
inline HRESULT IDocumentFrame::ZoomPrevNextOrAll ( enum ZoomTypeEnum Type ) {
    HRESULT _hr = raw_ZoomPrevNextOrAll(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(941)
inline HRESULT IDocumentFrame::ZoomScale ( double X, double Y, double Scale ) {
    HRESULT _hr = raw_ZoomScale(X, Y, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(942)
inline HRESULT IDocumentFrame::GetZoomScale ( double * X, double * Y, double * Scale ) {
    HRESULT _hr = raw_GetZoomScale(X, Y, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(943)
inline OLE_HANDLE IDocumentFrame::GetHWND ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = raw_GetHWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(944)
inline HRESULT IDocumentFrame::SetGabaritModifying ( ) {
    HRESULT _hr = raw_SetGabaritModifying();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(945)
inline HRESULT IDocumentFrame::RefreshWindow ( ) {
    HRESULT _hr = raw_RefreshWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(946)
inline VARIANT_BOOL IDocumentFrame::ConvertCoordinates ( enum ConvertCoordTypeEnum Type, long LX, long LY, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ConvertCoordinates(Type, LX, LY, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline VARIANT_BOOL IDocumentFrame::ExecuteKompasCommand ( long CommandID, VARIANT_BOOL PostMessage ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExecuteKompasCommand(CommandID, PostMessage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(948)
inline VARIANT_BOOL IDocumentFrame::IsKompasCommandEnable ( long CommandID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsKompasCommandEnable(CommandID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline long IDocumentFrame::IsKompasCommandCheck ( long CommandID ) {
    long _result = 0;
    HRESULT _hr = raw_IsKompasCommandCheck(CommandID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(950)
inline _variant_t IDocumentFrame::GetFPSData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFPSData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(951)
inline VARIANT_BOOL IDocumentFrame::GetPickRay ( long wx, long wy, double * X, double * Y, double * Z, double * zx, double * zy, double * zz ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPickRay(wx, wy, X, Y, Z, zx, zy, zz, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(952)
inline VARIANT_BOOL IDocumentFrame::GetRoundModeOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundModeOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline double IDocumentFrame::GetCurrentCursorStep ( ) {
    double _result = 0;
    HRESULT _hr = get_CurrentCursorStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline VARIANT_BOOL IDocumentFrame::GetWorkAreaRect ( long * Left, long * Top, long * Right, long * Bottom ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetWorkAreaRect(Left, Top, Right, Bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline VARIANT_BOOL IDocumentFrame::UnConvertCoordinates ( enum ConvertCoordTypeEnum Type, double X, double Y, double Z, long * LX, long * LY ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UnConvertCoordinates(Type, X, Y, Z, LX, LY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline VARIANT_BOOL IDocumentFrame::SetZoomScale ( double X, double Y, double Scale, VARIANT_BOOL ViewParam ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetZoomScale(X, Y, Scale, ViewParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDocumentFrames wrapper method implementations
//

#pragma implementation_key(957)
inline IDocumentFramePtr IDocumentFrames::GetItem ( const _variant_t & Index ) {
    struct IDocumentFrame * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDocumentFramePtr(_result, false);
}

//
// interface ITextFont wrapper method implementations
//

#pragma implementation_key(958)
inline _bstr_t ITextFont::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(959)
inline void ITextFont::PutFontName ( _bstr_t PVal ) {
    HRESULT _hr = put_FontName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(960)
inline double ITextFont::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(961)
inline void ITextFont::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(962)
inline double ITextFont::GetWidthFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_WidthFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline void ITextFont::PutWidthFactor ( double PVal ) {
    HRESULT _hr = put_WidthFactor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(964)
inline long ITextFont::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline void ITextFont::PutColor ( long PVal ) {
    HRESULT _hr = put_Color(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline VARIANT_BOOL ITextFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline void ITextFont::PutBold ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Bold(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(968)
inline VARIANT_BOOL ITextFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline void ITextFont::PutItalic ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Italic(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline VARIANT_BOOL ITextFont::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline void ITextFont::PutUnderline ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Underline(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(972)
inline double ITextFont::GetTextLineStep ( ) {
    double _result = 0;
    HRESULT _hr = get_TextLineStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline void ITextFont::PutTextLineStep ( double PVal ) {
    HRESULT _hr = put_TextLineStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITabulator wrapper method implementations
//

#pragma implementation_key(974)
inline long ITabulator::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(975)
inline void ITabulator::PutPosition ( long PVal ) {
    HRESULT _hr = put_Position(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(976)
inline enum ksAlignEnum ITabulator::GetAlign ( ) {
    enum ksAlignEnum _result;
    HRESULT _hr = get_Align(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline void ITabulator::PutAlign ( enum ksAlignEnum PVal ) {
    HRESULT _hr = put_Align(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(978)
inline enum ksTabulatorFillingEnum ITabulator::GetFilling ( ) {
    enum ksTabulatorFillingEnum _result;
    HRESULT _hr = get_Filling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline void ITabulator::PutFilling ( enum ksTabulatorFillingEnum PVal ) {
    HRESULT _hr = put_Filling(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITabulators wrapper method implementations
//

#pragma implementation_key(980)
inline ITabulatorPtr ITabulators::GetItem ( const _variant_t & Index ) {
    struct ITabulator * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITabulatorPtr(_result, false);
}

#pragma implementation_key(981)
inline ITabulatorPtr ITabulators::Add ( long Position ) {
    struct ITabulator * _result = 0;
    HRESULT _hr = raw_Add(Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITabulatorPtr(_result, false);
}

#pragma implementation_key(982)
inline VARIANT_BOOL ITabulators::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITextStyle wrapper method implementations
//

#pragma implementation_key(983)
inline _bstr_t ITextStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(984)
inline void ITextStyle::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(985)
inline long ITextStyle::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(986)
inline void ITextStyle::PutNumber ( long PVal ) {
    HRESULT _hr = put_Number(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(987)
inline double ITextStyle::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(988)
inline void ITextStyle::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(989)
inline enum ksAlignEnum ITextStyle::GetAlign ( ) {
    enum ksAlignEnum _result;
    HRESULT _hr = get_Align(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline void ITextStyle::PutAlign ( enum ksAlignEnum PVal ) {
    HRESULT _hr = put_Align(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(991)
inline double ITextStyle::GetIndentedLine ( ) {
    double _result = 0;
    HRESULT _hr = get_IndentedLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(992)
inline void ITextStyle::PutIndentedLine ( double PVal ) {
    HRESULT _hr = put_IndentedLine(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(993)
inline double ITextStyle::GetStepBeforeParagraph ( ) {
    double _result = 0;
    HRESULT _hr = get_StepBeforeParagraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(994)
inline void ITextStyle::PutStepBeforeParagraph ( double PVal ) {
    HRESULT _hr = put_StepBeforeParagraph(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(995)
inline double ITextStyle::GetStepAfterParagraph ( ) {
    double _result = 0;
    HRESULT _hr = get_StepAfterParagraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(996)
inline void ITextStyle::PutStepAfterParagraph ( double PVal ) {
    HRESULT _hr = put_StepAfterParagraph(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(997)
inline double ITextStyle::GetLeftEdge ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(998)
inline void ITextStyle::PutLeftEdge ( double PVal ) {
    HRESULT _hr = put_LeftEdge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(999)
inline double ITextStyle::GetRightEdge ( ) {
    double _result = 0;
    HRESULT _hr = get_RightEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1000)
inline void ITextStyle::PutRightEdge ( double PVal ) {
    HRESULT _hr = put_RightEdge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1001)
inline VARIANT_BOOL ITextStyle::GetExtended ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Extended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1002)
inline void ITextStyle::PutExtended ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Extended(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1003)
inline long ITextStyle::GetLinesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LinesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1004)
inline void ITextStyle::PutLinesCount ( long PVal ) {
    HRESULT _hr = put_LinesCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline VARIANT_BOOL ITextStyle::GetEnableLine1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLine1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1006)
inline void ITextStyle::PutEnableLine1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableLine1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline double ITextStyle::GetHeight1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Height1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1008)
inline void ITextStyle::PutHeight1 ( double PVal ) {
    HRESULT _hr = put_Height1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1009)
inline double ITextStyle::GetWidthFactor1 ( ) {
    double _result = 0;
    HRESULT _hr = get_WidthFactor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline void ITextStyle::PutWidthFactor1 ( double PVal ) {
    HRESULT _hr = put_WidthFactor1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline double ITextStyle::GetStep1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1012)
inline void ITextStyle::PutStep1 ( double PVal ) {
    HRESULT _hr = put_Step1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1013)
inline VARIANT_BOOL ITextStyle::GetEnableLine2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLine2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1014)
inline void ITextStyle::PutEnableLine2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableLine2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1015)
inline double ITextStyle::GetHeight2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Height2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1016)
inline void ITextStyle::PutHeight2 ( double PVal ) {
    HRESULT _hr = put_Height2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1017)
inline double ITextStyle::GetWidthFactor2 ( ) {
    double _result = 0;
    HRESULT _hr = get_WidthFactor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline void ITextStyle::PutWidthFactor2 ( double PVal ) {
    HRESULT _hr = put_WidthFactor2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1019)
inline double ITextStyle::GetStep2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1020)
inline void ITextStyle::PutStep2 ( double PVal ) {
    HRESULT _hr = put_Step2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline VARIANT_BOOL ITextStyle::GetEnableLine3 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLine3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1022)
inline void ITextStyle::PutEnableLine3 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableLine3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1023)
inline double ITextStyle::GetHeight3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Height3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline void ITextStyle::PutHeight3 ( double PVal ) {
    HRESULT _hr = put_Height3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1025)
inline double ITextStyle::GetWidthFactor3 ( ) {
    double _result = 0;
    HRESULT _hr = get_WidthFactor3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1026)
inline void ITextStyle::PutWidthFactor3 ( double PVal ) {
    HRESULT _hr = put_WidthFactor3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1027)
inline double ITextStyle::GetStep3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline void ITextStyle::PutStep3 ( double PVal ) {
    HRESULT _hr = put_Step3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline ITextFontPtr ITextStyle::GetFont ( ) {
    struct ITextFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextFontPtr(_result, false);
}

#pragma implementation_key(1030)
inline ITabulatorsPtr ITextStyle::GetTabulators ( ) {
    struct ITabulators * _result = 0;
    HRESULT _hr = get_Tabulators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITabulatorsPtr(_result, false);
}

//
// interface ISpecificationSubsection wrapper method implementations
//

#pragma implementation_key(1031)
inline _bstr_t ISpecificationSubsection::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1032)
inline short ISpecificationSubsection::GetNumber ( ) {
    short _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1033)
inline VARIANT_BOOL ISpecificationSubsection::Change ( _bstr_t Name, short Number ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Change(Name, Number, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline VARIANT_BOOL ISpecificationSubsection::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationSubsections wrapper method implementations
//

#pragma implementation_key(1035)
inline ISpecificationSubsectionPtr ISpecificationSubsections::GetItem ( const _variant_t & Index ) {
    struct ISpecificationSubsection * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationSubsectionPtr(_result, false);
}

#pragma implementation_key(1036)
inline ISpecificationSubsectionPtr ISpecificationSubsections::Add ( _bstr_t Name, short Number ) {
    struct ISpecificationSubsection * _result = 0;
    HRESULT _hr = raw_Add(Name, Number, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationSubsectionPtr(_result, false);
}

//
// interface IAdditionalBlockSectionTuning wrapper method implementations
//

#pragma implementation_key(1037)
inline long IAdditionalBlockSectionTuning::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline VARIANT_BOOL IAdditionalBlockSectionTuning::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1039)
inline void IAdditionalBlockSectionTuning::PutUse ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Use(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAdditionalBlockSectionTunings wrapper method implementations
//

#pragma implementation_key(1040)
inline IAdditionalBlockSectionTuningPtr IAdditionalBlockSectionTunings::GetItem ( const _variant_t & Index ) {
    struct IAdditionalBlockSectionTuning * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAdditionalBlockSectionTuningPtr(_result, false);
}

//
// interface IAdditionalBlockTuning wrapper method implementations
//

#pragma implementation_key(1041)
inline long IAdditionalBlockTuning::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline _bstr_t IAdditionalBlockTuning::GetDocumentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1043)
inline void IAdditionalBlockTuning::PutDocumentName ( _bstr_t PVal ) {
    HRESULT _hr = put_DocumentName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1044)
inline VARIANT_BOOL IAdditionalBlockTuning::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1045)
inline void IAdditionalBlockTuning::PutUse ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Use(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1046)
inline VARIANT_BOOL IAdditionalBlockTuning::GetFirstOnSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstOnSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1047)
inline void IAdditionalBlockTuning::PutFirstOnSheet ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FirstOnSheet(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1048)
inline IAdditionalBlockSectionTuningsPtr IAdditionalBlockTuning::GetSections ( ) {
    struct IAdditionalBlockSectionTunings * _result = 0;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAdditionalBlockSectionTuningsPtr(_result, false);
}

#pragma implementation_key(1049)
inline VARIANT_BOOL IAdditionalBlockTuning::GetIndependentPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IndependentPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void IAdditionalBlockTuning::PutIndependentPosition ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IndependentPosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline VARIANT_BOOL IAdditionalBlockTuning::GetMarkOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1052)
inline void IAdditionalBlockTuning::PutMarkOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MarkOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline _bstr_t IAdditionalBlockTuning::GetMark ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1054)
inline void IAdditionalBlockTuning::PutMark ( _bstr_t PVal ) {
    HRESULT _hr = put_Mark(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAdditionalBlockTunings wrapper method implementations
//

#pragma implementation_key(1055)
inline IAdditionalBlockTuningPtr IAdditionalBlockTunings::GetItem ( const _variant_t & Index ) {
    struct IAdditionalBlockTuning * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAdditionalBlockTuningPtr(_result, false);
}

//
// interface ISpecificationTuningSection wrapper method implementations
//

#pragma implementation_key(1056)
inline long ISpecificationTuningSection::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline VARIANT_BOOL ISpecificationTuningSection::GetSubsectionOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubsectionOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1058)
inline void ISpecificationTuningSection::PutSubsectionOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SubsectionOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline VARIANT_BOOL ISpecificationTuningSection::GetAttachGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AttachGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline void ISpecificationTuningSection::PutAttachGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AttachGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1061)
inline VARIANT_BOOL ISpecificationTuningSection::GetPutPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PutPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline void ISpecificationTuningSection::PutPutPosition ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PutPosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1063)
inline VARIANT_BOOL ISpecificationTuningSection::GetSortObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SortObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1064)
inline void ISpecificationTuningSection::PutSortObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SortObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline VARIANT_BOOL ISpecificationTuningSection::GetFirstOnSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstOnSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline void ISpecificationTuningSection::PutFirstOnSheet ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FirstOnSheet(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1067)
inline short ISpecificationTuningSection::GetReserveStringCount ( ) {
    short _result = 0;
    HRESULT _hr = get_ReserveStringCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1068)
inline void ISpecificationTuningSection::PutReserveStringCount ( short PVal ) {
    HRESULT _hr = put_ReserveStringCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1069)
inline ISpecificationSubsectionsPtr ISpecificationTuningSection::GetSubsections ( ) {
    struct ISpecificationSubsections * _result = 0;
    HRESULT _hr = get_Subsections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationSubsectionsPtr(_result, false);
}

#pragma implementation_key(1070)
inline VARIANT_BOOL ISpecificationTuningSection::GetUseAdditionalBlocks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAdditionalBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1071)
inline void ISpecificationTuningSection::PutUseAdditionalBlocks ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseAdditionalBlocks(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1072)
inline IAdditionalBlockTuningsPtr ISpecificationTuningSection::GetAdditionalBlocks ( ) {
    struct IAdditionalBlockTunings * _result = 0;
    HRESULT _hr = get_AdditionalBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAdditionalBlockTuningsPtr(_result, false);
}

#pragma implementation_key(1073)
inline VARIANT_BOOL ISpecificationTuningSection::GetShowDocumentCode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDocumentCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1074)
inline void ISpecificationTuningSection::PutShowDocumentCode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowDocumentCode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1075)
inline VARIANT_BOOL ISpecificationTuningSection::GetIndependentPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IndependentPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1076)
inline void ISpecificationTuningSection::PutIndependentPosition ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IndependentPosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1077)
inline VARIANT_BOOL ISpecificationTuningSection::GetMarkOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1078)
inline void ISpecificationTuningSection::PutMarkOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MarkOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1079)
inline _bstr_t ISpecificationTuningSection::GetMark ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1080)
inline void ISpecificationTuningSection::PutMark ( _bstr_t PVal ) {
    HRESULT _hr = put_Mark(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpecificationTuningSections wrapper method implementations
//

#pragma implementation_key(1081)
inline ISpecificationTuningSectionPtr ISpecificationTuningSections::GetItem ( const _variant_t & Index ) {
    struct ISpecificationTuningSection * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationTuningSectionPtr(_result, false);
}

//
// interface ISpecificationTuning wrapper method implementations
//

#pragma implementation_key(1082)
inline enum ksSpecificationLinkTypeEnum ISpecificationTuning::GetLinkType ( ) {
    enum ksSpecificationLinkTypeEnum _result;
    HRESULT _hr = get_LinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline void ISpecificationTuning::PutLinkType ( enum ksSpecificationLinkTypeEnum PVal ) {
    HRESULT _hr = put_LinkType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1084)
inline VARIANT_BOOL ISpecificationTuning::GetCalculateZone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CalculateZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1085)
inline void ISpecificationTuning::PutCalculateZone ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CalculateZone(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1086)
inline VARIANT_BOOL ISpecificationTuning::GetCalculatePosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CalculatePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1087)
inline void ISpecificationTuning::PutCalculatePosition ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CalculatePosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1088)
inline VARIANT_BOOL ISpecificationTuning::GetShowSectionName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSectionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1089)
inline void ISpecificationTuning::PutShowSectionName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowSectionName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1090)
inline VARIANT_BOOL ISpecificationTuning::GetDeleteGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1091)
inline void ISpecificationTuning::PutDeleteGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DeleteGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1092)
inline VARIANT_BOOL ISpecificationTuning::GetDisableEmptyString ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableEmptyString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1093)
inline void ISpecificationTuning::PutDisableEmptyString ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DisableEmptyString(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1094)
inline VARIANT_BOOL ISpecificationTuning::GetDisableEmptyBlockString ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableEmptyBlockString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1095)
inline void ISpecificationTuning::PutDisableEmptyBlockString ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DisableEmptyBlockString(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1096)
inline VARIANT_BOOL ISpecificationTuning::GetInsertNull ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InsertNull(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1097)
inline void ISpecificationTuning::PutInsertNull ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InsertNull(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1098)
inline VARIANT_BOOL ISpecificationTuning::GetInsertDash ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InsertDash(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1099)
inline void ISpecificationTuning::PutInsertDash ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InsertDash(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1100)
inline VARIANT_BOOL ISpecificationTuning::GetShowInfoByObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowInfoByObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1101)
inline void ISpecificationTuning::PutShowInfoByObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowInfoByObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1102)
inline VARIANT_BOOL ISpecificationTuning::GetSupportPerformance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportPerformance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1103)
inline void ISpecificationTuning::PutSupportPerformance ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SupportPerformance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1104)
inline VARIANT_BOOL ISpecificationTuning::GetShowPerformanceFull ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPerformanceFull(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1105)
inline void ISpecificationTuning::PutShowPerformanceFull ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowPerformanceFull(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1106)
inline VARIANT_BOOL ISpecificationTuning::GetBlockOnNewPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlockOnNewPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1107)
inline void ISpecificationTuning::PutBlockOnNewPage ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BlockOnNewPage(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1108)
inline VARIANT_BOOL ISpecificationTuning::GetPositionUp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositionUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline void ISpecificationTuning::PutPositionUp ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PositionUp(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1110)
inline VARIANT_BOOL ISpecificationTuning::GetDrawBottomUp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawBottomUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1111)
inline void ISpecificationTuning::PutDrawBottomUp ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DrawBottomUp(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1112)
inline VARIANT_BOOL ISpecificationTuning::GetUserTextStyle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1113)
inline void ISpecificationTuning::PutUserTextStyle ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UserTextStyle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1114)
inline long ISpecificationTuning::GetPerformanceCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PerformanceCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1115)
inline void ISpecificationTuning::PutPerformanceCount ( long PVal ) {
    HRESULT _hr = put_PerformanceCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1116)
inline long ISpecificationTuning::GetBlockCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BlockCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1117)
inline long ISpecificationTuning::GetInitialPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_InitialPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1118)
inline void ISpecificationTuning::PutInitialPosition ( long PVal ) {
    HRESULT _hr = put_InitialPosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1119)
inline _bstr_t ISpecificationTuning::GetPredefinedTextFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PredefinedTextFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1120)
inline void ISpecificationTuning::PutPredefinedTextFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_PredefinedTextFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1121)
inline ITextStylePtr ISpecificationTuning::GetSectionTextStyleFirst ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_SectionTextStyleFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1122)
inline ITextStylePtr ISpecificationTuning::GetSectionTextStyleNext ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_SectionTextStyleNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1123)
inline ITextStylePtr ISpecificationTuning::GetObjectTextStyle ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_ObjectTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1124)
inline ISpecificationTuningSectionsPtr ISpecificationTuning::GetSections ( ) {
    struct ISpecificationTuningSections * _result = 0;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationTuningSectionsPtr(_result, false);
}

#pragma implementation_key(1125)
inline VARIANT_BOOL ISpecificationTuning::GetUseAdditionalBlocks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAdditionalBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline void ISpecificationTuning::PutUseAdditionalBlocks ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseAdditionalBlocks(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1127)
inline IAdditionalBlockTuningsPtr ISpecificationTuning::GetAdditionalBlocks ( ) {
    struct IAdditionalBlockTunings * _result = 0;
    HRESULT _hr = get_AdditionalBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAdditionalBlockTuningsPtr(_result, false);
}

#pragma implementation_key(1128)
inline VARIANT_BOOL ISpecificationTuning::GetShowAdditionalBlockName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAdditionalBlockName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1129)
inline void ISpecificationTuning::PutShowAdditionalBlockName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowAdditionalBlockName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1130)
inline VARIANT_BOOL ISpecificationTuning::GetShowNestingBlockName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNestingBlockName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1131)
inline void ISpecificationTuning::PutShowNestingBlockName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowNestingBlockName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1132)
inline VARIANT_BOOL ISpecificationTuning::GetShowPerformanceBlockName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPerformanceBlockName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline void ISpecificationTuning::PutShowPerformanceBlockName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowPerformanceBlockName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1134)
inline ITextStylePtr ISpecificationTuning::GetPerformanceBlockTextStyleFirst ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_PerformanceBlockTextStyleFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1135)
inline ITextStylePtr ISpecificationTuning::GetPerformanceBlockTextStyleNext ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_PerformanceBlockTextStyleNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1136)
inline ITextStylePtr ISpecificationTuning::GetAdditionalBlockTextStyleFirst ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_AdditionalBlockTextStyleFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1137)
inline ITextStylePtr ISpecificationTuning::GetAdditionalBlockTextStyleNext ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_AdditionalBlockTextStyleNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1138)
inline ITextStylePtr ISpecificationTuning::GetNestingBlockTextStyleFirst ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_NestingBlockTextStyleFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1139)
inline ITextStylePtr ISpecificationTuning::GetNestingBlockTextStyleNext ( ) {
    struct ITextStyle * _result = 0;
    HRESULT _hr = get_NestingBlockTextStyleNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextStylePtr(_result, false);
}

#pragma implementation_key(1140)
inline VARIANT_BOOL ISpecificationTuning::GetDisableNestingBlockEmptyStrings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableNestingBlockEmptyStrings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1141)
inline void ISpecificationTuning::PutDisableNestingBlockEmptyStrings ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DisableNestingBlockEmptyStrings(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1142)
inline VARIANT_BOOL ISpecificationTuning::GetDisableAdditionalBlockEmptyStrings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableAdditionalBlockEmptyStrings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1143)
inline void ISpecificationTuning::PutDisableAdditionalBlockEmptyStrings ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DisableAdditionalBlockEmptyStrings(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline VARIANT_BOOL ISpecificationTuning::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1145)
inline VARIANT_BOOL ISpecificationTuning::GetDeleteSpcObjectOnDeleteGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteSpcObjectOnDeleteGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1146)
inline void ISpecificationTuning::PutDeleteSpcObjectOnDeleteGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DeleteSpcObjectOnDeleteGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1147)
inline VARIANT_BOOL ISpecificationTuning::GetCopySpcObjectOnCopyGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CopySpcObjectOnCopyGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1148)
inline void ISpecificationTuning::PutCopySpcObjectOnCopyGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CopySpcObjectOnCopyGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline VARIANT_BOOL ISpecificationTuning::GetShowEmbodimentWithoutVariables ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowEmbodimentWithoutVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline void ISpecificationTuning::PutShowEmbodimentWithoutVariables ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowEmbodimentWithoutVariables(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline long ISpecificationTuning::GetPerformanceCountInBlock ( ) {
    long _result = 0;
    HRESULT _hr = get_PerformanceCountInBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1152)
inline VARIANT_BOOL ISpecificationTuning::GetShowListCountIsSameFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowListCountIsSameFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1153)
inline void ISpecificationTuning::PutShowListCountIsSameFormat ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowListCountIsSameFormat(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISheetFormat wrapper method implementations
//

#pragma implementation_key(1154)
inline enum ksDocumentFormatEnum ISheetFormat::GetFormat ( ) {
    enum ksDocumentFormatEnum _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline void ISheetFormat::PutFormat ( enum ksDocumentFormatEnum PVal ) {
    HRESULT _hr = put_Format(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline long ISheetFormat::GetFormatMultiplicity ( ) {
    long _result = 0;
    HRESULT _hr = get_FormatMultiplicity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1157)
inline void ISheetFormat::PutFormatMultiplicity ( long PVal ) {
    HRESULT _hr = put_FormatMultiplicity(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline VARIANT_BOOL ISheetFormat::GetVerticalOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VerticalOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1159)
inline void ISheetFormat::PutVerticalOrientation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_VerticalOrientation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1160)
inline double ISheetFormat::GetFormatWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_FormatWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline void ISheetFormat::PutFormatWidth ( double PVal ) {
    HRESULT _hr = put_FormatWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline double ISheetFormat::GetFormatHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_FormatHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1163)
inline void ISheetFormat::PutFormatHeight ( double PVal ) {
    HRESULT _hr = put_FormatHeight(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpecificationColumnStyle wrapper method implementations
//

#pragma implementation_key(1164)
inline _bstr_t ISpecificationColumnStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1165)
inline enum ksSpecificationColumnTypeEnum ISpecificationColumnStyle::GetColumnType ( ) {
    enum ksSpecificationColumnTypeEnum _result;
    HRESULT _hr = get_ColumnType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1166)
inline long ISpecificationColumnStyle::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline VARIANT_BOOL ISpecificationColumnStyle::GetEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Edit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1168)
inline VARIANT_BOOL ISpecificationColumnStyle::GetCalculateSum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CalculateSum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1169)
inline VARIANT_BOOL ISpecificationColumnStyle::GetMultiplyToCount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiplyToCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1170)
inline VARIANT_BOOL ISpecificationColumnStyle::GetUseForSectionTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseForSectionTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1171)
inline VARIANT_BOOL ISpecificationColumnStyle::GetTextDown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline long ISpecificationColumnStyle::GetStampLinkID ( ) {
    long _result = 0;
    HRESULT _hr = get_StampLinkID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1173)
inline enum ksValueTypeEnum ISpecificationColumnStyle::GetValueType ( ) {
    enum ksValueTypeEnum _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline _bstr_t ISpecificationColumnStyle::GetAttributeLibraryName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttributeLibraryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1175)
inline long ISpecificationColumnStyle::GetAttributeKey1 ( ) {
    long _result = 0;
    HRESULT _hr = get_AttributeKey1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1176)
inline long ISpecificationColumnStyle::GetAttributeKey2 ( ) {
    long _result = 0;
    HRESULT _hr = get_AttributeKey2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1177)
inline long ISpecificationColumnStyle::GetAttributeKey3 ( ) {
    long _result = 0;
    HRESULT _hr = get_AttributeKey3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1178)
inline long ISpecificationColumnStyle::GetAttributeKey4 ( ) {
    long _result = 0;
    HRESULT _hr = get_AttributeKey4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1179)
inline double ISpecificationColumnStyle::GetMinValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1180)
inline double ISpecificationColumnStyle::GetMaxValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1181)
inline VARIANT_BOOL ISpecificationColumnStyle::GetUseIn3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseIn3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationColumnStyles wrapper method implementations
//

#pragma implementation_key(1182)
inline ISpecificationColumnStylePtr ISpecificationColumnStyles::GetItem ( const _variant_t & Index ) {
    struct ISpecificationColumnStyle * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnStylePtr(_result, false);
}

//
// interface IAdditionalBlockStyle wrapper method implementations
//

#pragma implementation_key(1183)
inline _bstr_t IAdditionalBlockStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1184)
inline long IAdditionalBlockStyle::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAdditionalBlockStyles wrapper method implementations
//

#pragma implementation_key(1185)
inline IAdditionalBlockStylePtr IAdditionalBlockStyles::GetItem ( const _variant_t & Index ) {
    struct IAdditionalBlockStyle * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAdditionalBlockStylePtr(_result, false);
}

//
// interface ISpecificationSectionStyle wrapper method implementations
//

#pragma implementation_key(1186)
inline _bstr_t ISpecificationSectionStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1187)
inline long ISpecificationSectionStyle::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1188)
inline enum ksSpecificationColumnTypeEnum ISpecificationSectionStyle::GetSortColumnType ( ) {
    enum ksSpecificationColumnTypeEnum _result;
    HRESULT _hr = get_SortColumnType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1189)
inline long ISpecificationSectionStyle::GetSortColumnNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_SortColumnNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline VARIANT_BOOL ISpecificationSectionStyle::GetFillDataFromStamp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillDataFromStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1191)
inline enum ksSortTypeEnum ISpecificationSectionStyle::GetSortType ( ) {
    enum ksSortTypeEnum _result;
    HRESULT _hr = get_SortType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1192)
inline ISpecificationColumnStylesPtr ISpecificationSectionStyle::GetColumns ( ) {
    struct ISpecificationColumnStyles * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnStylesPtr(_result, false);
}

#pragma implementation_key(1193)
inline ISpecificationColumnStylesPtr ISpecificationSectionStyle::GetAdditionalColumns ( ) {
    struct ISpecificationColumnStyles * _result = 0;
    HRESULT _hr = get_AdditionalColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnStylesPtr(_result, false);
}

#pragma implementation_key(1194)
inline IAdditionalBlockStylesPtr ISpecificationSectionStyle::GetAdditionalBlocks ( ) {
    struct IAdditionalBlockStyles * _result = 0;
    HRESULT _hr = get_AdditionalBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAdditionalBlockStylesPtr(_result, false);
}

#pragma implementation_key(1195)
inline long ISpecificationSectionStyle::GetSortLevelsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SortLevelsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1196)
inline enum ksSpecificationColumnTypeEnum ISpecificationSectionStyle::GetSortColumnTypeEx ( long Index ) {
    enum ksSpecificationColumnTypeEnum _result;
    HRESULT _hr = get_SortColumnTypeEx(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1197)
inline long ISpecificationSectionStyle::GetSortColumnNumberEx ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_SortColumnNumberEx(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline enum ksSortTypeEnum ISpecificationSectionStyle::GetSortTypeEx ( long Index ) {
    enum ksSortTypeEnum _result;
    HRESULT _hr = get_SortTypeEx(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationSectionStyles wrapper method implementations
//

#pragma implementation_key(1199)
inline ISpecificationSectionStylePtr ISpecificationSectionStyles::GetItem ( const _variant_t & Index ) {
    struct ISpecificationSectionStyle * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationSectionStylePtr(_result, false);
}

//
// interface ISpecificationStyle wrapper method implementations
//

#pragma implementation_key(1200)
inline _bstr_t ISpecificationStyle::GetLayoutName1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LayoutName1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1201)
inline long ISpecificationStyle::GetStyleID1 ( ) {
    long _result = 0;
    HRESULT _hr = get_StyleID1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1202)
inline _bstr_t ISpecificationStyle::GetLayoutName2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LayoutName2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1203)
inline long ISpecificationStyle::GetStyleID2 ( ) {
    long _result = 0;
    HRESULT _hr = get_StyleID2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline enum ksSpecificationVariantEnum ISpecificationStyle::GetVariant ( ) {
    enum ksSpecificationVariantEnum _result;
    HRESULT _hr = get_Variant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1205)
inline VARIANT_BOOL ISpecificationStyle::GetSectionOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SectionOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline ISpecificationTuningPtr ISpecificationStyle::GetSpecificationTuning ( ) {
    struct ISpecificationTuning * _result = 0;
    HRESULT _hr = get_SpecificationTuning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationTuningPtr(_result, false);
}

#pragma implementation_key(1207)
inline ISheetFormatPtr ISpecificationStyle::GetFormat ( ) {
    struct ISheetFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetFormatPtr(_result, false);
}

#pragma implementation_key(1208)
inline ISpecificationColumnStylesPtr ISpecificationStyle::GetColumns ( ) {
    struct ISpecificationColumnStyles * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnStylesPtr(_result, false);
}

#pragma implementation_key(1209)
inline ISpecificationColumnStylesPtr ISpecificationStyle::GetAdditionalColumns ( ) {
    struct ISpecificationColumnStyles * _result = 0;
    HRESULT _hr = get_AdditionalColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnStylesPtr(_result, false);
}

#pragma implementation_key(1210)
inline ISpecificationSectionStylesPtr ISpecificationStyle::GetSections ( ) {
    struct ISpecificationSectionStyles * _result = 0;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationSectionStylesPtr(_result, false);
}

#pragma implementation_key(1211)
inline IAdditionalBlockStylesPtr ISpecificationStyle::GetAdditionalBlocks ( ) {
    struct IAdditionalBlockStyles * _result = 0;
    HRESULT _hr = get_AdditionalBlocks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAdditionalBlockStylesPtr(_result, false);
}

#pragma implementation_key(1212)
inline VARIANT_BOOL ISpecificationStyle::GetSortSectionDown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SortSectionDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1213)
inline long ISpecificationStyle::GetPerformanceCountInBlock ( ) {
    long _result = 0;
    HRESULT _hr = get_PerformanceCountInBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationColumnItem wrapper method implementations
//

#pragma implementation_key(1214)
inline enum ksValueTypeEnum ISpecificationColumnItem::GetValueType ( ) {
    enum ksValueTypeEnum _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1215)
inline short ISpecificationColumnItem::GetKey ( ) {
    short _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1216)
inline void ISpecificationColumnItem::PutKey ( short PVal ) {
    HRESULT _hr = put_Key(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1217)
inline VARIANT_BOOL ISpecificationColumnItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline void ISpecificationColumnItem::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1219)
inline _variant_t ISpecificationColumnItem::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1220)
inline void ISpecificationColumnItem::PutValue ( const _variant_t & PVal ) {
    HRESULT _hr = put_Value(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpecificationColumnItems wrapper method implementations
//

#pragma implementation_key(1221)
inline ISpecificationColumnItemPtr ISpecificationColumnItems::GetItem ( const _variant_t & Index ) {
    struct ISpecificationColumnItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnItemPtr(_result, false);
}

//
// interface ITextItem wrapper method implementations
//

#pragma implementation_key(1222)
inline enum ksTextItemEnum ITextItem::GetItemType ( ) {
    enum ksTextItemEnum _result;
    HRESULT _hr = get_ItemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1223)
inline void ITextItem::PutItemType ( enum ksTextItemEnum PVal ) {
    HRESULT _hr = put_ItemType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1224)
inline _bstr_t ITextItem::GetStr ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Str(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1225)
inline void ITextItem::PutStr ( _bstr_t Result ) {
    HRESULT _hr = put_Str(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1226)
inline _bstr_t ITextItem::GetSymbolFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SymbolFontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1227)
inline void ITextItem::PutSymbolFontName ( _bstr_t PVal ) {
    HRESULT _hr = put_SymbolFontName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1228)
inline long ITextItem::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1229)
inline void ITextItem::PutNumber ( long Result ) {
    HRESULT _hr = put_Number(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1230)
inline enum ksTextSizeEnum ITextItem::GetSizeFactor ( ) {
    enum ksTextSizeEnum _result;
    HRESULT _hr = get_SizeFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1231)
inline void ITextItem::PutSizeFactor ( enum ksTextSizeEnum PVal ) {
    HRESULT _hr = put_SizeFactor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1232)
inline VARIANT_BOOL ITextItem::GetNewLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1233)
inline void ITextItem::PutNewLine ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_NewLine(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1234)
inline VARIANT_BOOL ITextItem::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1235)
inline VARIANT_BOOL ITextItem::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITextLine wrapper method implementations
//

#pragma implementation_key(1236)
inline long ITextLine::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1237)
inline void ITextLine::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1238)
inline _variant_t ITextLine::GetTextItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1239)
inline long ITextLine::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1240)
inline ITextItemPtr ITextLine::GetTextItem ( long Index ) {
    struct ITextItem * _result = 0;
    HRESULT _hr = get_TextItem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextItemPtr(_result, false);
}

#pragma implementation_key(1241)
inline ITextItemPtr ITextLine::Add ( ) {
    struct ITextItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextItemPtr(_result, false);
}

#pragma implementation_key(1242)
inline ITextItemPtr ITextLine::AddBefore ( long Index ) {
    struct ITextItem * _result = 0;
    HRESULT _hr = raw_AddBefore(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextItemPtr(_result, false);
}

#pragma implementation_key(1243)
inline _bstr_t ITextLine::GetStr ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Str(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1244)
inline void ITextLine::PutStr ( _bstr_t PVal ) {
    HRESULT _hr = put_Str(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1245)
inline VARIANT_BOOL ITextLine::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline double ITextLine::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1247)
inline void ITextLine::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1248)
inline enum ksAlignEnum ITextLine::GetAlign ( ) {
    enum ksAlignEnum _result;
    HRESULT _hr = get_Align(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1249)
inline void ITextLine::PutAlign ( enum ksAlignEnum PVal ) {
    HRESULT _hr = put_Align(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1250)
inline double ITextLine::GetIndentedLine ( ) {
    double _result = 0;
    HRESULT _hr = get_IndentedLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1251)
inline void ITextLine::PutIndentedLine ( double PVal ) {
    HRESULT _hr = put_IndentedLine(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1252)
inline double ITextLine::GetStepBeforeParagraph ( ) {
    double _result = 0;
    HRESULT _hr = get_StepBeforeParagraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1253)
inline void ITextLine::PutStepBeforeParagraph ( double PVal ) {
    HRESULT _hr = put_StepBeforeParagraph(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1254)
inline double ITextLine::GetStepAfterParagraph ( ) {
    double _result = 0;
    HRESULT _hr = get_StepAfterParagraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1255)
inline void ITextLine::PutStepAfterParagraph ( double PVal ) {
    HRESULT _hr = put_StepAfterParagraph(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1256)
inline double ITextLine::GetLeftEdge ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1257)
inline void ITextLine::PutLeftEdge ( double PVal ) {
    HRESULT _hr = put_LeftEdge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1258)
inline double ITextLine::GetRightEdge ( ) {
    double _result = 0;
    HRESULT _hr = get_RightEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1259)
inline void ITextLine::PutRightEdge ( double PVal ) {
    HRESULT _hr = put_RightEdge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1260)
inline ITabulatorsPtr ITextLine::GetTabulators ( ) {
    struct ITabulators * _result = 0;
    HRESULT _hr = get_Tabulators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITabulatorsPtr(_result, false);
}

#pragma implementation_key(1261)
inline long ITextLine::GetLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1262)
inline void ITextLine::PutLevel ( long Result ) {
    HRESULT _hr = put_Level(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1263)
inline enum ksTextNumberingEnum ITextLine::GetNumbering ( ) {
    enum ksTextNumberingEnum _result;
    HRESULT _hr = get_Numbering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1264)
inline void ITextLine::PutNumbering ( enum ksTextNumberingEnum Result ) {
    HRESULT _hr = put_Numbering(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1265)
inline VARIANT_BOOL ITextLine::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1266)
inline enum ksTextLineType ITextLine::GetTextLineType ( ) {
    enum ksTextLineType _result;
    HRESULT _hr = get_TextLineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1267)
inline IKompasAPIObjectPtr ITextLine::GetTextLineData ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_TextLineData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(1268)
inline VARIANT_BOOL ITextLine::GetNewPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1269)
inline void ITextLine::PutNewPage ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_NewPage(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1270)
inline VARIANT_BOOL ITextLine::Assign ( struct ITextLine * Other ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Assign(Other, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline ITextItemPtr ITextLine::InsertHypertextReference ( long TextItemIndex, struct IKompasAPIObject * Object, enum ksHypertextTypeEnum Type, VARIANT_BOOL Brackets, long TextLineIndex, long Precision, double PropertyId ) {
    struct ITextItem * _result = 0;
    HRESULT _hr = raw_InsertHypertextReference(TextItemIndex, Object, Type, Brackets, TextLineIndex, Precision, PropertyId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextItemPtr(_result, false);
}

#pragma implementation_key(1272)
inline VARIANT_BOOL ITextLine::Edit ( OLE_HANDLE HWnd ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Edit(HWnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1273)
inline VARIANT_BOOL ITextLine::GetNewSection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline void ITextLine::PutNewSection ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_NewSection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1275)
inline long ITextLine::GetBlockIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_BlockIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1276)
inline long ITextLine::GetSectionBlockIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_SectionBlockIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1277)
inline VARIANT_BOOL ITextLine::ReplaceStr ( __int64 StartPosition, _bstr_t SrcText, _bstr_t NewText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly, VARIANT_BOOL ReplaceAll ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReplaceStr(StartPosition, SrcText, NewText, Case, WordOnly, ReplaceAll, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1278)
inline __int64 ITextLine::Find ( __int64 StartPosition, _bstr_t SrcText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly ) {
    __int64 _result = 0;
    HRESULT _hr = raw_Find(StartPosition, SrcText, Case, WordOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITextTable wrapper method implementations
//

#pragma implementation_key(1279)
inline void ITextTable::PutFixedCellsSize ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedCellsSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1280)
inline VARIANT_BOOL ITextTable::GetFixedCellsSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedCellsSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1281)
inline void ITextTable::PutFixedRowCount ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedRowCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1282)
inline VARIANT_BOOL ITextTable::GetFixedRowCount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedRowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1283)
inline void ITextTable::PutFixedColumnCount ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedColumnCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1284)
inline VARIANT_BOOL ITextTable::GetFixedColumnCount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1285)
inline VARIANT_BOOL ITextTable::Save ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Save(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IText wrapper method implementations
//

#pragma implementation_key(1286)
inline long IText::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1287)
inline void IText::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1288)
inline _variant_t IText::GetTextLines ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1289)
inline long IText::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1290)
inline ITextLinePtr IText::GetTextLine ( long Index ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_TextLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(1291)
inline ITextLinePtr IText::Add ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(1292)
inline ITextLinePtr IText::AddBefore ( long Index ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = raw_AddBefore(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(1293)
inline _bstr_t IText::GetStr ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Str(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1294)
inline void IText::PutStr ( _bstr_t PVal ) {
    HRESULT _hr = put_Str(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1295)
inline VARIANT_BOOL IText::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1296)
inline ITextLinePtr IText::AddTextLine ( enum ksTextLineType Type, _bstr_t FileName ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = raw_AddTextLine(Type, FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(1297)
inline ITextLinePtr IText::AddTextLineBefore ( enum ksTextLineType Type, long Index, _bstr_t FileName ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = raw_AddTextLineBefore(Type, Index, FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(1298)
inline VARIANT_BOOL IText::Replace ( _bstr_t SrcText, _bstr_t NewText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly, VARIANT_BOOL ReplaceAll ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Replace(SrcText, NewText, Case, WordOnly, ReplaceAll, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1299)
inline VARIANT_BOOL IText::Assign ( struct IText * Other ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Assign(Other, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1300)
inline ITextTablePtr IText::AddTable ( long IndexAt, long RowsCount, long ColumnsCount, double RowHeigh, double ColumnsWidth, enum ksTableTileLayoutEnum TitlePos ) {
    struct ITextTable * _result = 0;
    HRESULT _hr = raw_AddTable(IndexAt, RowsCount, ColumnsCount, RowHeigh, ColumnsWidth, TitlePos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextTablePtr(_result, false);
}

#pragma implementation_key(1301)
inline VARIANT_BOOL IText::Edit ( OLE_HANDLE HWnd ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Edit(HWnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline __int64 IText::Find ( __int64 StartPosition, _bstr_t SrcText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly ) {
    __int64 _result = 0;
    HRESULT _hr = raw_Find(StartPosition, SrcText, Case, WordOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1303)
inline VARIANT_BOOL IText::ReplaceStr ( __int64 StartPosition, _bstr_t SrcText, _bstr_t NewText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly, VARIANT_BOOL ReplaceAll ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReplaceStr(StartPosition, SrcText, NewText, Case, WordOnly, ReplaceAll, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationColumn wrapper method implementations
//

#pragma implementation_key(1304)
inline enum ksSpecificationColumnTypeEnum ISpecificationColumn::GetColumnType ( ) {
    enum ksSpecificationColumnTypeEnum _result;
    HRESULT _hr = get_ColumnType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1305)
inline long ISpecificationColumn::GetColumnTypeNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnTypeNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1306)
inline long ISpecificationColumn::GetBlockNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_BlockNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1307)
inline long ISpecificationColumn::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1308)
inline enum ksValueTypeEnum ISpecificationColumn::GetValueType ( ) {
    enum ksValueTypeEnum _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline ISpecificationColumnItemsPtr ISpecificationColumn::GetColumnItems ( ) {
    struct ISpecificationColumnItems * _result = 0;
    HRESULT _hr = get_ColumnItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnItemsPtr(_result, false);
}

#pragma implementation_key(1310)
inline double ISpecificationColumn::GetAttributeNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_AttributeNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1311)
inline void ISpecificationColumn::PutAttributeNumber ( double PVal ) {
    HRESULT _hr = put_AttributeNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1312)
inline ITextPtr ISpecificationColumn::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(1313)
inline _bstr_t ISpecificationColumn::GetColumnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColumnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1314)
inline long ISpecificationColumn::GetCountUniteCells ( ) {
    long _result = 0;
    HRESULT _hr = get_CountUniteCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1315)
inline void ISpecificationColumn::PutCountUniteCells ( long PVal ) {
    HRESULT _hr = put_CountUniteCells(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpecificationColumns wrapper method implementations
//

#pragma implementation_key(1316)
inline ISpecificationColumnPtr ISpecificationColumns::GetItem ( const _variant_t & Index ) {
    struct ISpecificationColumn * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnPtr(_result, false);
}

#pragma implementation_key(1317)
inline ISpecificationColumnPtr ISpecificationColumns::GetColumn ( enum ksSpecificationColumnTypeEnum ColumnType, long ColumnNumber, long BlockNumber ) {
    struct ISpecificationColumn * _result = 0;
    HRESULT _hr = get_Column(ColumnType, ColumnNumber, BlockNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnPtr(_result, false);
}

//
// interface IAttachedDocument wrapper method implementations
//

#pragma implementation_key(1318)
inline _bstr_t IAttachedDocument::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1319)
inline VARIANT_BOOL IAttachedDocument::GetTransmit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transmit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1320)
inline void IAttachedDocument::PutTransmit ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Transmit(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1321)
inline _bstr_t IAttachedDocument::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1322)
inline void IAttachedDocument::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1323)
inline VARIANT_BOOL IAttachedDocument::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1324)
inline VARIANT_BOOL IAttachedDocument::GetFormatTransmit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FormatTransmit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1325)
inline void IAttachedDocument::PutFormatTransmit ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FormatTransmit(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1326)
inline _bstr_t IAttachedDocument::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1327)
inline _bstr_t IAttachedDocument::GetMarking ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Marking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAttachedDocuments wrapper method implementations
//

#pragma implementation_key(1328)
inline IAttachedDocumentPtr IAttachedDocuments::GetItem ( const _variant_t & Index ) {
    struct IAttachedDocument * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttachedDocumentPtr(_result, false);
}

#pragma implementation_key(1329)
inline IAttachedDocumentPtr IAttachedDocuments::Add ( _bstr_t Name, VARIANT_BOOL Transmit ) {
    struct IAttachedDocument * _result = 0;
    HRESULT _hr = raw_Add(Name, Transmit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttachedDocumentPtr(_result, false);
}

#pragma implementation_key(1330)
inline IAttachedDocumentPtr IAttachedDocuments::AddDocument ( _bstr_t Name, VARIANT_BOOL Transmit, VARIANT_BOOL FillText, _bstr_t EmbodimentMarking ) {
    struct IAttachedDocument * _result = 0;
    HRESULT _hr = raw_AddDocument(Name, Transmit, FillText, EmbodimentMarking, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttachedDocumentPtr(_result, false);
}

//
// interface ISpecificationObject wrapper method implementations
//

#pragma implementation_key(1331)
inline enum ksSpecificationObjectTypeEnum ISpecificationObject::GetObjectType ( ) {
    enum ksSpecificationObjectTypeEnum _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1332)
inline long ISpecificationObject::GetSection ( ) {
    long _result = 0;
    HRESULT _hr = get_Section(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline long ISpecificationObject::GetSubsection ( ) {
    long _result = 0;
    HRESULT _hr = get_Subsection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1334)
inline void ISpecificationObject::PutSubsection ( long PVal ) {
    HRESULT _hr = put_Subsection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1335)
inline long ISpecificationObject::GetAdditionalSection ( ) {
    long _result = 0;
    HRESULT _hr = get_AdditionalSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1336)
inline void ISpecificationObject::PutAdditionalSection ( long PVal ) {
    HRESULT _hr = put_AdditionalSection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1337)
inline long ISpecificationObject::GetAdditionalBlock ( ) {
    long _result = 0;
    HRESULT _hr = get_AdditionalBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline void ISpecificationObject::PutAdditionalBlock ( long PVal ) {
    HRESULT _hr = put_AdditionalBlock(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1339)
inline long ISpecificationObject::GetNestedSection ( ) {
    long _result = 0;
    HRESULT _hr = get_NestedSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1340)
inline void ISpecificationObject::PutNestedSection ( long PVal ) {
    HRESULT _hr = put_NestedSection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1341)
inline long ISpecificationObject::GetNestedBlock ( ) {
    long _result = 0;
    HRESULT _hr = get_NestedBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1342)
inline void ISpecificationObject::PutNestedBlock ( long PVal ) {
    HRESULT _hr = put_NestedBlock(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1343)
inline long ISpecificationObject::GetBlockNumberByIndex ( long Val ) {
    long _result = 0;
    HRESULT _hr = get_BlockNumberByIndex(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline double ISpecificationObject::GetUniqueNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_UniqueNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1345)
inline enum ksSpecificationObjectStateEnum ISpecificationObject::GetState ( ) {
    enum ksSpecificationObjectStateEnum _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1346)
inline VARIANT_BOOL ISpecificationObject::GetFirstOnSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstOnSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1347)
inline void ISpecificationObject::PutFirstOnSheet ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FirstOnSheet(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1348)
inline VARIANT_BOOL ISpecificationObject::GetIncrementPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncrementPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1349)
inline void ISpecificationObject::PutIncrementPosition ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IncrementPosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1350)
inline ISpecificationColumnsPtr ISpecificationObject::GetColumns ( ) {
    struct ISpecificationColumns * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnsPtr(_result, false);
}

#pragma implementation_key(1351)
inline ISpecificationColumnsPtr ISpecificationObject::GetAdditionalColumns ( ) {
    struct ISpecificationColumns * _result = 0;
    HRESULT _hr = get_AdditionalColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationColumnsPtr(_result, false);
}

#pragma implementation_key(1352)
inline IAttachedDocumentsPtr ISpecificationObject::GetAttachedDocuments ( ) {
    struct IAttachedDocuments * _result = 0;
    HRESULT _hr = get_AttachedDocuments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttachedDocumentsPtr(_result, false);
}

#pragma implementation_key(1353)
inline VARIANT_BOOL ISpecificationObject::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1354)
inline VARIANT_BOOL ISpecificationObject::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1355)
inline VARIANT_BOOL ISpecificationObject::Edit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Edit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationObjectCreateParam wrapper method implementations
//

#pragma implementation_key(1356)
inline long ISpecificationObjectCreateParam::GetSection ( ) {
    long _result = 0;
    HRESULT _hr = get_Section(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1357)
inline void ISpecificationObjectCreateParam::PutSection ( long PVal ) {
    HRESULT _hr = put_Section(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1358)
inline long ISpecificationObjectCreateParam::GetSubsection ( ) {
    long _result = 0;
    HRESULT _hr = get_Subsection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1359)
inline void ISpecificationObjectCreateParam::PutSubsection ( long PVal ) {
    HRESULT _hr = put_Subsection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1360)
inline long ISpecificationObjectCreateParam::GetAdditionalSection ( ) {
    long _result = 0;
    HRESULT _hr = get_AdditionalSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1361)
inline void ISpecificationObjectCreateParam::PutAdditionalSection ( long PVal ) {
    HRESULT _hr = put_AdditionalSection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1362)
inline long ISpecificationObjectCreateParam::GetAdditionalBlock ( ) {
    long _result = 0;
    HRESULT _hr = get_AdditionalBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline void ISpecificationObjectCreateParam::PutAdditionalBlock ( long PVal ) {
    HRESULT _hr = put_AdditionalBlock(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1364)
inline long ISpecificationObjectCreateParam::GetNestedSection ( ) {
    long _result = 0;
    HRESULT _hr = get_NestedSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1365)
inline void ISpecificationObjectCreateParam::PutNestedSection ( long PVal ) {
    HRESULT _hr = put_NestedSection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1366)
inline long ISpecificationObjectCreateParam::GetNestedBlock ( ) {
    long _result = 0;
    HRESULT _hr = get_NestedBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1367)
inline void ISpecificationObjectCreateParam::PutNestedBlock ( long PVal ) {
    HRESULT _hr = put_NestedBlock(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1368)
inline double ISpecificationObjectCreateParam::GetAttributeNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_AttributeNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1369)
inline void ISpecificationObjectCreateParam::PutAttributeNumber ( double PVal ) {
    HRESULT _hr = put_AttributeNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1370)
inline VARIANT_BOOL ISpecificationObjectCreateParam::GetFillNameByMaterial ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillNameByMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1371)
inline void ISpecificationObjectCreateParam::PutFillNameByMaterial ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FillNameByMaterial(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IProperty wrapper method implementations
//

#pragma implementation_key(1372)
inline void IProperty::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1373)
inline _bstr_t IProperty::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1374)
inline double IProperty::GetId ( ) {
    double _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1375)
inline void IProperty::PutDataType ( enum ksPropertyTypeEnum PVal ) {
    HRESULT _hr = put_DataType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1376)
inline enum ksPropertyTypeEnum IProperty::GetDataType ( ) {
    enum ksPropertyTypeEnum _result;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1377)
inline _variant_t IProperty::GetMinValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1378)
inline _variant_t IProperty::GetMaxValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1379)
inline VARIANT_BOOL IProperty::SetValueRange ( const _variant_t & MinVal, const _variant_t & MaxVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetValueRange(MinVal, MaxVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1380)
inline VARIANT_BOOL IProperty::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1381)
inline void IProperty::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1382)
inline long IProperty::GetSignificantDigitsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SignificantDigitsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1383)
inline void IProperty::PutSignificantDigitsCount ( long Result ) {
    HRESULT _hr = put_SignificantDigitsCount(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1384)
inline _bstr_t IProperty::GetSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1385)
inline void IProperty::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1386)
inline _bstr_t IProperty::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1387)
inline void IProperty::PutPropertyTypeId ( _bstr_t PVal ) {
    HRESULT _hr = put_PropertyTypeId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1388)
inline _bstr_t IProperty::GetPropertyTypeId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropertyTypeId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1389)
inline void IProperty::PutUnitId ( _bstr_t PVal ) {
    HRESULT _hr = put_UnitId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1390)
inline _bstr_t IProperty::GetUnitId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1391)
inline VARIANT_BOOL IProperty::ViewEdit ( OLE_HANDLE Parent, VARIANT_BOOL ReadOnly ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ViewEdit(Parent, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1392)
inline VARIANT_BOOL IProperty::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1393)
inline VARIANT_BOOL IProperty::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1394)
inline VARIANT_BOOL IProperty::GetUseListVal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseListVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1395)
inline void IProperty::PutUseListVal ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseListVal(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1396)
inline _variant_t IProperty::GetListVal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ListVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1397)
inline void IProperty::PutListVal ( const _variant_t & PVal ) {
    HRESULT _hr = put_ListVal(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1398)
inline VARIANT_BOOL IProperty::GetIsVariable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVariable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1399)
inline VARIANT_BOOL IProperty::GetIsAngular ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAngular(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUserDataStorage wrapper method implementations
//

#pragma implementation_key(1400)
inline _bstr_t IUserDataStorage::GetName ( _bstr_t Pass ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(Pass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1401)
inline void IUserDataStorage::PutName ( _bstr_t Pass, _bstr_t PVal ) {
    HRESULT _hr = put_Name(Pass, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1402)
inline VARIANT_BOOL IUserDataStorage::SetPassword ( _bstr_t OldPass, _bstr_t NewPass ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPassword(OldPass, NewPass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1403)
inline long IUserDataStorage::GetVersion ( _bstr_t Pass ) {
    long _result = 0;
    HRESULT _hr = get_Version(Pass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1404)
inline void IUserDataStorage::PutVersion ( _bstr_t Pass, long PVal ) {
    HRESULT _hr = put_Version(Pass, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1405)
inline _bstr_t IUserDataStorage::GetObject ( const _variant_t & Index, VARIANT * Object, long * Numb ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetObject(Index, Object, Numb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1406)
inline long IUserDataStorage::SetObject ( _bstr_t Pass, const _variant_t & Index, const _variant_t & Object, _bstr_t Comment ) {
    long _result = 0;
    HRESULT _hr = raw_SetObject(Pass, Index, Object, Comment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1407)
inline long IUserDataStorage::AddObject ( _bstr_t Pass, const _variant_t & Object, _bstr_t Comment ) {
    long _result = 0;
    HRESULT _hr = raw_AddObject(Pass, Object, Comment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1408)
inline VARIANT_BOOL IUserDataStorage::Delete ( _bstr_t Pass, const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(Pass, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1409)
inline VARIANT_BOOL IUserDataStorage::Clear ( _bstr_t Pass ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(Pass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1410)
inline VARIANT_BOOL IUserDataStorage::AddObjects ( _bstr_t Pass, const _variant_t & Objects, const _variant_t & Comments ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddObjects(Pass, Objects, Comments, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUserDataStorages wrapper method implementations
//

#pragma implementation_key(1411)
inline IUserDataStoragePtr IUserDataStorages::GetItem ( const _variant_t & Index ) {
    struct IUserDataStorage * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserDataStoragePtr(_result, false);
}

#pragma implementation_key(1412)
inline IUserDataStoragePtr IUserDataStorages::Add ( _bstr_t StorageName ) {
    struct IUserDataStorage * _result = 0;
    HRESULT _hr = raw_Add(StorageName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserDataStoragePtr(_result, false);
}

#pragma implementation_key(1413)
inline VARIANT_BOOL IUserDataStorages::Delete ( _bstr_t Password, const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(Password, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUserDataStoragesMng wrapper method implementations
//

#pragma implementation_key(1414)
inline IUserDataStoragesPtr IUserDataStoragesMng::GetItem ( const _variant_t & Index ) {
    struct IUserDataStorages * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserDataStoragesPtr(_result, false);
}

#pragma implementation_key(1415)
inline IUserDataStoragesPtr IUserDataStoragesMng::Add ( struct IKompasAPIObject * Object ) {
    struct IUserDataStorages * _result = 0;
    HRESULT _hr = raw_Add(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserDataStoragesPtr(_result, false);
}

#pragma implementation_key(1416)
inline VARIANT_BOOL IUserDataStoragesMng::Delete ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline VARIANT_BOOL IUserDataStoragesMng::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyKeeper wrapper method implementations
//

#pragma implementation_key(1418)
inline VARIANT_BOOL IPropertyKeeper::GetPropertyValue ( struct IProperty * Property, VARIANT * Value, VARIANT_BOOL BaseUnit, VARIANT_BOOL * FromSource ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPropertyValue(Property, Value, BaseUnit, FromSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1419)
inline VARIANT_BOOL IPropertyKeeper::SetPropertyValue ( struct IProperty * Property, const _variant_t & Value, VARIANT_BOOL BaseUnit ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPropertyValue(Property, Value, BaseUnit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1420)
inline IUserDataStoragePtr IPropertyKeeper::GetPropertyAdditionalStorage ( struct IProperty * Property, VARIANT_BOOL Create, VARIANT_BOOL * FromSource ) {
    struct IUserDataStorage * _result = 0;
    HRESULT _hr = raw_GetPropertyAdditionalStorage(Property, Create, FromSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserDataStoragePtr(_result, false);
}

#pragma implementation_key(1421)
inline IUserDataStoragesMngPtr IPropertyKeeper::GetUserDataStoragesManager ( VARIANT_BOOL FromSource ) {
    struct IUserDataStoragesMng * _result = 0;
    HRESULT _hr = raw_GetUserDataStoragesManager(FromSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserDataStoragesMngPtr(_result, false);
}

#pragma implementation_key(1422)
inline VARIANT_BOOL IPropertyKeeper::InsertHypertextReference ( struct IProperty * Property, struct IKompasAPIObject * Object, enum ksHypertextTypeEnum Type, VARIANT_BOOL Brackets, long TextLineIndex, long Precision, double PropertyId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InsertHypertextReference(Property, Object, Type, Brackets, TextLineIndex, Precision, PropertyId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1423)
inline _bstr_t IPropertyKeeper::GetProperties ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1424)
inline void IPropertyKeeper::PutProperties ( _bstr_t PVal ) {
    HRESULT _hr = put_Properties(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1425)
inline _bstr_t IPropertyKeeper::GetUniqueMetaObjectKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueMetaObjectKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1426)
inline VARIANT_BOOL IPropertyKeeper::IsComplexPropertyValue ( struct IProperty * Property ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsComplexPropertyValue(Property, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1427)
inline _bstr_t IPropertyKeeper::GetComplexPropertyValue ( struct IProperty * Property, VARIANT_BOOL * FromSource ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetComplexPropertyValue(Property, FromSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1428)
inline VARIANT_BOOL IPropertyKeeper::SetComplexPropertyValue ( struct IProperty * Property, _bstr_t Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetComplexPropertyValue(Property, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IStamp wrapper method implementations
//

#pragma implementation_key(1429)
inline ITextPtr IStamp::GetText ( long Id ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(1430)
inline VARIANT_BOOL IStamp::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1431)
inline VARIANT_BOOL IStamp::Clear ( long Id ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1432)
inline long IStamp::GetNextColumnId ( long Id ) {
    long _result = 0;
    HRESULT _hr = raw_GetNextColumnId(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1433)
inline VARIANT_BOOL IStamp::GetCrossed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Crossed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILayoutSheet wrapper method implementations
//

#pragma implementation_key(1434)
inline ISheetFormatPtr ILayoutSheet::GetFormat ( ) {
    struct ISheetFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetFormatPtr(_result, false);
}

#pragma implementation_key(1435)
inline _bstr_t ILayoutSheet::GetLayoutLibraryFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LayoutLibraryFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1436)
inline void ILayoutSheet::PutLayoutLibraryFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_LayoutLibraryFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1437)
inline double ILayoutSheet::GetLayoutStyleNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutStyleNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1438)
inline void ILayoutSheet::PutLayoutStyleNumber ( double PVal ) {
    HRESULT _hr = put_LayoutStyleNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1439)
inline VARIANT_BOOL ILayoutSheet::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1440)
inline VARIANT_BOOL ILayoutSheet::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1441)
inline IStampPtr ILayoutSheet::GetStamp ( ) {
    struct IStamp * _result = 0;
    HRESULT _hr = get_Stamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStampPtr(_result, false);
}

#pragma implementation_key(1442)
inline enum ksSheetTypeEnum ILayoutSheet::GetSheetType ( ) {
    enum ksSheetTypeEnum _result;
    HRESULT _hr = get_SheetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1443)
inline void ILayoutSheet::PutSheetType ( enum ksSheetTypeEnum PVal ) {
    HRESULT _hr = put_SheetType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1444)
inline VARIANT_BOOL ILayoutSheet::GetPlaceInsideFrames ( double * Left, double * Top, double * Right, double * Bottom ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPlaceInsideFrames(Left, Top, Right, Bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILayoutSheets wrapper method implementations
//

#pragma implementation_key(1445)
inline ILayoutSheetPtr ILayoutSheets::GetItem ( const _variant_t & Index ) {
    struct ILayoutSheet * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayoutSheetPtr(_result, false);
}

#pragma implementation_key(1446)
inline ILayoutSheetPtr ILayoutSheets::GetItemByNumber ( long Number ) {
    struct ILayoutSheet * _result = 0;
    HRESULT _hr = get_ItemByNumber(Number, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayoutSheetPtr(_result, false);
}

#pragma implementation_key(1447)
inline ILayoutSheetPtr ILayoutSheets::Add ( ) {
    struct ILayoutSheet * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayoutSheetPtr(_result, false);
}

//
// interface ILoadCombinationsParam wrapper method implementations
//

#pragma implementation_key(1448)
inline _variant_t ILoadCombinationsParam::GetLoadCombinations ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LoadCombinations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1449)
inline _variant_t ILoadCombinationsParam::GetProtectedFlags ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ProtectedFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1450)
inline long ILoadCombinationsParam::GetApplyingIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ApplyingIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IOpenDocumentParam wrapper method implementations
//

#pragma implementation_key(1451)
inline void IOpenDocumentParam::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1452)
inline VARIANT_BOOL IOpenDocumentParam::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1453)
inline void IOpenDocumentParam::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1454)
inline VARIANT_BOOL IOpenDocumentParam::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1455)
inline void IOpenDocumentParam::PutApplyingIndex ( long Result ) {
    HRESULT _hr = put_ApplyingIndex(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1456)
inline long IOpenDocumentParam::GetApplyingIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ApplyingIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1457)
inline void IOpenDocumentParam::PutPassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Password(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPropertyControl wrapper method implementations
//

#pragma implementation_key(1458)
inline void IPropertyControl::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1459)
inline VARIANT_BOOL IPropertyControl::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1460)
inline void IPropertyControl::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1461)
inline _bstr_t IPropertyControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1462)
inline enum ControlTypeEnum IPropertyControl::GetControlType ( ) {
    enum ControlTypeEnum _result;
    HRESULT _hr = get_ControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1463)
inline void IPropertyControl::PutId ( long PVal ) {
    HRESULT _hr = put_Id(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1464)
inline long IPropertyControl::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline void IPropertyControl::PutEnable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Enable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1466)
inline VARIANT_BOOL IPropertyControl::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1467)
inline void IPropertyControl::PutValue ( const _variant_t & PVal ) {
    HRESULT _hr = put_Value(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1468)
inline _variant_t IPropertyControl::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1469)
inline void IPropertyControl::PutNameVisibility ( enum PropertyControlNameVisibility PVal ) {
    HRESULT _hr = put_NameVisibility(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1470)
inline enum PropertyControlNameVisibility IPropertyControl::GetNameVisibility ( ) {
    enum PropertyControlNameVisibility _result;
    HRESULT _hr = get_NameVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline void IPropertyControl::PutHint ( _bstr_t PVal ) {
    HRESULT _hr = put_Hint(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1472)
inline _bstr_t IPropertyControl::GetHint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Hint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1473)
inline void IPropertyControl::PutTips ( _bstr_t PVal ) {
    HRESULT _hr = put_Tips(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1474)
inline _bstr_t IPropertyControl::GetTips ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IPropertyControls wrapper method implementations
//

#pragma implementation_key(1475)
inline IPropertyControlPtr IPropertyControls::GetItem ( const _variant_t & Index ) {
    struct IPropertyControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyControlPtr(_result, false);
}

#pragma implementation_key(1476)
inline IPropertyControlPtr IPropertyControls::Add ( enum ControlTypeEnum Type ) {
    struct IPropertyControl * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyControlPtr(_result, false);
}

#pragma implementation_key(1477)
inline VARIANT_BOOL IPropertyControls::Delete ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyTab wrapper method implementations
//

#pragma implementation_key(1478)
inline void IPropertyTab::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1479)
inline VARIANT_BOOL IPropertyTab::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1480)
inline void IPropertyTab::PutCaption ( _bstr_t PVal ) {
    HRESULT _hr = put_Caption(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1481)
inline _bstr_t IPropertyTab::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1482)
inline void IPropertyTab::PutActive ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Active(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1483)
inline VARIANT_BOOL IPropertyTab::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1484)
inline IPropertyControlsPtr IPropertyTab::GetPropertyControls ( ) {
    struct IPropertyControls * _result = 0;
    HRESULT _hr = get_PropertyControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyControlsPtr(_result, false);
}

#pragma implementation_key(1485)
inline void IPropertyTab::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1486)
inline _variant_t IPropertyTab::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1487)
inline void IPropertyTab::PutImage ( const _variant_t & Bmp ) {
    HRESULT _hr = put_Image(Bmp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1488)
inline _variant_t IPropertyTab::GetImage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1489)
inline void IPropertyTab::PutExpanded ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Expanded(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1490)
inline VARIANT_BOOL IPropertyTab::GetExpanded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Expanded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyTabs wrapper method implementations
//

#pragma implementation_key(1491)
inline IPropertyTabPtr IPropertyTabs::GetItem ( const _variant_t & Index ) {
    struct IPropertyTab * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyTabPtr(_result, false);
}

#pragma implementation_key(1492)
inline IPropertyTabPtr IPropertyTabs::Add ( _bstr_t Caption ) {
    struct IPropertyTab * _result = 0;
    HRESULT _hr = raw_Add(Caption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyTabPtr(_result, false);
}

#pragma implementation_key(1493)
inline VARIANT_BOOL IPropertyTabs::Delete ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1494)
inline IPropertyTabPtr IPropertyTabs::GetActive ( ) {
    struct IPropertyTab * _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyTabPtr(_result, false);
}

#pragma implementation_key(1495)
inline IPropertyTabPtr IPropertyTabs::GetSystemTab ( ) {
    struct IPropertyTab * _result = 0;
    HRESULT _hr = get_SystemTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyTabPtr(_result, false);
}

//
// interface IProcessParam wrapper method implementations
//

#pragma implementation_key(1496)
inline void IProcessParam::PutCaption ( _bstr_t PVal ) {
    HRESULT _hr = put_Caption(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1497)
inline _bstr_t IProcessParam::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1498)
inline IPropertyTabsPtr IProcessParam::GetPropertyTabs ( ) {
    struct IPropertyTabs * _result = 0;
    HRESULT _hr = get_PropertyTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyTabsPtr(_result, false);
}

#pragma implementation_key(1499)
inline void IProcessParam::PutSpecToolbar ( enum SpecPropertyToolBarEnum PVal ) {
    HRESULT _hr = put_SpecToolbar(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1500)
inline enum SpecPropertyToolBarEnum IProcessParam::GetSpecToolbar ( ) {
    enum SpecPropertyToolBarEnum _result;
    HRESULT _hr = get_SpecToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1501)
inline void IProcessParam::PutAutoReduce ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoReduce(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1502)
inline VARIANT_BOOL IProcessParam::GetAutoReduce ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoReduce(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1503)
inline void IProcessParam::PutDefaultControlFix ( enum DefaultFixTypeEnum PVal ) {
    HRESULT _hr = put_DefaultControlFix(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1504)
inline enum DefaultFixTypeEnum IProcessParam::GetDefaultControlFix ( ) {
    enum DefaultFixTypeEnum _result;
    HRESULT _hr = get_DefaultControlFix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1505)
inline void IProcessParam::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1506)
inline _variant_t IProcessParam::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1507)
inline void IProcessParam::PutSpecToolbarEx ( long PVal ) {
    HRESULT _hr = put_SpecToolbarEx(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1508)
inline long IProcessParam::GetSpecToolbarEx ( ) {
    long _result = 0;
    HRESULT _hr = get_SpecToolbarEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1509)
inline void IProcessParam::PutBmpBeginId ( enum ksBmpSizeEnum Size, long PVal ) {
    HRESULT _hr = put_BmpBeginId(Size, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1510)
inline long IProcessParam::GetBmpBeginId ( enum ksBmpSizeEnum Size ) {
    long _result = 0;
    HRESULT _hr = get_BmpBeginId(Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1511)
inline enum PropertyManagerLayout IProcessParam::GetLayout ( ) {
    enum PropertyManagerLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1512)
inline HRESULT IProcessParam::GetGabaritRect ( long * Left, long * Top, long * Right, long * Bottom ) {
    HRESULT _hr = raw_GetGabaritRect(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1513)
inline void IProcessParam::PutShowContextMenuOfSnap ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowContextMenuOfSnap(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1514)
inline VARIANT_BOOL IProcessParam::GetShowContextMenuOfSnap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowContextMenuOfSnap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1515)
inline void IProcessParam::PutShowContextMenuOfGeomCalculator ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowContextMenuOfGeomCalculator(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1516)
inline VARIANT_BOOL IProcessParam::GetShowContextMenuOfGeomCalculator ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowContextMenuOfGeomCalculator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1517)
inline void IProcessParam::PutShowCommandWindow ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowCommandWindow(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1518)
inline VARIANT_BOOL IProcessParam::GetShowCommandWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCommandWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1519)
inline VARIANT_BOOL IProcessParam::AddSpecToolbarButton ( long BtnID, const _variant_t & Bmp, _bstr_t Tips, _bstr_t IconFont ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddSpecToolbarButton(BtnID, Bmp, Tips, IconFont, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1520)
inline VARIANT_BOOL IProcessParam::PushProcessName ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PushProcessName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1521)
inline VARIANT_BOOL IProcessParam::PopProcessName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PopProcessName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline void IProcessParam::PutEnableUndoRedo ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableUndoRedo(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1523)
inline VARIANT_BOOL IProcessParam::GetEnableUndoRedo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableUndoRedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1524)
inline VARIANT_BOOL IProcessParam::AddSetupMenuCommand ( _bstr_t Title, long Command, VARIANT_BOOL Checable ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddSetupMenuCommand(Title, Command, Checable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1525)
inline VARIANT_BOOL IProcessParam::SetSetupMenuCommandState ( long Command, VARIANT_BOOL Visible, VARIANT_BOOL Enable, VARIANT_BOOL Checked ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSetupMenuCommandState(Command, Visible, Enable, Checked, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1526)
inline void IProcessParam::PutEnterButtonIconType ( enum ksEnterButtonIconTypeEnum PVal ) {
    HRESULT _hr = put_EnterButtonIconType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1527)
inline enum ksEnterButtonIconTypeEnum IProcessParam::GetEnterButtonIconType ( ) {
    enum ksEnterButtonIconTypeEnum _result;
    HRESULT _hr = get_EnterButtonIconType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1528)
inline VARIANT_BOOL IProcessParam::ClearSpecToolbar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearSpecToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyManager wrapper method implementations
//

#pragma implementation_key(1529)
inline void IPropertyManager::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1530)
inline VARIANT_BOOL IPropertyManager::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1531)
inline void IPropertyManager::PutCaption ( _bstr_t PVal ) {
    HRESULT _hr = put_Caption(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1532)
inline _bstr_t IPropertyManager::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1533)
inline void IPropertyManager::PutLayout ( enum PropertyManagerLayout PVal ) {
    HRESULT _hr = put_Layout(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1534)
inline enum PropertyManagerLayout IPropertyManager::GetLayout ( ) {
    enum PropertyManagerLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1535)
inline IPropertyTabsPtr IPropertyManager::GetPropertyTabs ( ) {
    struct IPropertyTabs * _result = 0;
    HRESULT _hr = get_PropertyTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyTabsPtr(_result, false);
}

#pragma implementation_key(1536)
inline HRESULT IPropertyManager::SetGabaritRect ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_SetGabaritRect(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1537)
inline HRESULT IPropertyManager::GetGabaritRect ( long * Left, long * Top, long * Right, long * Bottom ) {
    HRESULT _hr = raw_GetGabaritRect(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1538)
inline VARIANT_BOOL IPropertyManager::ShowTabs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1539)
inline VARIANT_BOOL IPropertyManager::UpdateTabs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UpdateTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1540)
inline VARIANT_BOOL IPropertyManager::HideTabs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HideTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1541)
inline void IPropertyManager::PutSpecToolbar ( enum SpecPropertyToolBarEnum PVal ) {
    HRESULT _hr = put_SpecToolbar(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1542)
inline enum SpecPropertyToolBarEnum IPropertyManager::GetSpecToolbar ( ) {
    enum SpecPropertyToolBarEnum _result;
    HRESULT _hr = get_SpecToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1543)
inline VARIANT_BOOL IPropertyManager::RepeatCommand ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RepeatCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1544)
inline void IPropertyManager::PutAutoHideMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoHideMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1545)
inline VARIANT_BOOL IPropertyManager::GetAutoHideMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoHideMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1546)
inline void IPropertyManager::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1547)
inline _variant_t IPropertyManager::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1548)
inline void IPropertyManager::PutSpecToolbarEx ( long PVal ) {
    HRESULT _hr = put_SpecToolbarEx(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1549)
inline long IPropertyManager::GetSpecToolbarEx ( ) {
    long _result = 0;
    HRESULT _hr = get_SpecToolbarEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1550)
inline VARIANT_BOOL IPropertyManager::AddSpecToolbarButton ( long BtnID, const _variant_t & Bmp, _bstr_t Tips, _bstr_t IconFont ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddSpecToolbarButton(BtnID, Bmp, Tips, IconFont, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1551)
inline VARIANT_BOOL IPropertyManager::AddSetupMenuCommand ( _bstr_t Title, long Command, VARIANT_BOOL Checable ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddSetupMenuCommand(Title, Command, Checable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1552)
inline VARIANT_BOOL IPropertyManager::SetSetupMenuCommandState ( long Command, VARIANT_BOOL Visible, VARIANT_BOOL Enable, VARIANT_BOOL Checked ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSetupMenuCommandState(Command, Visible, Enable, Checked, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1553)
inline void IPropertyManager::PutEnterButtonIconType ( enum ksEnterButtonIconTypeEnum PVal ) {
    HRESULT _hr = put_EnterButtonIconType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1554)
inline enum ksEnterButtonIconTypeEnum IPropertyManager::GetEnterButtonIconType ( ) {
    enum ksEnterButtonIconTypeEnum _result;
    HRESULT _hr = get_EnterButtonIconType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1555)
inline void IPropertyManager::PutStatusMessage ( _bstr_t PVal ) {
    HRESULT _hr = put_StatusMessage(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1556)
inline _bstr_t IPropertyManager::GetStatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1557)
inline void IPropertyManager::PutLabel ( _bstr_t PVal ) {
    HRESULT _hr = put_Label(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1558)
inline _bstr_t IPropertyManager::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1559)
inline VARIANT_BOOL IPropertyManager::ClearSpecToolbar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearSpecToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1560)
inline VARIANT_BOOL IPropertyManager::SetIcon ( long Icon, _bstr_t IconFont ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetIcon(Icon, IconFont, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILibrary wrapper method implementations
//

#pragma implementation_key(1561)
inline _bstr_t ILibrary::GetLibraryManagerFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryManagerFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1562)
inline VARIANT_BOOL ILibrary::GetAttach ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Attach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline void ILibrary::PutAttach ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Attach(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1564)
inline enum ksLibraryTypeEnum ILibrary::GetLibraryType ( ) {
    enum ksLibraryTypeEnum _result;
    HRESULT _hr = get_LibraryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1565)
inline _bstr_t ILibrary::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1566)
inline _bstr_t ILibrary::GetPathName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1567)
inline VARIANT_BOOL ILibrary::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1568)
inline VARIANT_BOOL ILibrary::Execute ( long Command, IDispatch * External, VARIANT_BOOL Post ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Execute(Command, External, Post, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProcedure wrapper method implementations
//

#pragma implementation_key(1569)
inline _bstr_t IProcedure::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1570)
inline _bstr_t IProcedure::GetLibraryFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1571)
inline long IProcedure::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1572)
inline VARIANT_BOOL IProcedure::Execute ( IDispatch * External, VARIANT_BOOL Post ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Execute(External, Post, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProcedures wrapper method implementations
//

#pragma implementation_key(1573)
inline IProcedurePtr IProcedures::GetItem ( const _variant_t & Index ) {
    struct IProcedure * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcedurePtr(_result, false);
}

#pragma implementation_key(1574)
inline IProcedurePtr IProcedures::GetItemByID ( long Id ) {
    struct IProcedure * _result = 0;
    HRESULT _hr = get_ItemByID(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcedurePtr(_result, false);
}

//
// interface IProceduresLibrary wrapper method implementations
//

#pragma implementation_key(1575)
inline enum ksLibraryStyleEnum IProceduresLibrary::GetStyle ( ) {
    enum ksLibraryStyleEnum _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1576)
inline void IProceduresLibrary::PutStyle ( enum ksLibraryStyleEnum PVal ) {
    HRESULT _hr = put_Style(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1577)
inline IProceduresPtr IProceduresLibrary::GetProcedures ( ) {
    struct IProcedures * _result = 0;
    HRESULT _hr = get_Procedures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProceduresPtr(_result, false);
}

#pragma implementation_key(1578)
inline long IProceduresLibrary::GetCurrentCommand ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1579)
inline VARIANT_BOOL IProceduresLibrary::SystemControlStop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SystemControlStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1580)
inline enum ksSystemControlStartEnum IProceduresLibrary::SystemControlStart ( _bstr_t menuCommand ) {
    enum ksSystemControlStartEnum _result;
    HRESULT _hr = raw_SystemControlStart(menuCommand, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1581)
inline long IProceduresLibrary::GetUniqueId ( ) {
    long _result = 0;
    HRESULT _hr = get_UniqueId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1582)
inline VARIANT_BOOL IProceduresLibrary::GetExecutable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Executable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1583)
inline VARIANT_BOOL IProceduresLibrary::GetAddIns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1584)
inline IDispatchPtr IProceduresLibrary::GetExternalInterface ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ExternalInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1585)
inline _bstr_t IProceduresLibrary::GetLibraryName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1586)
inline _bstr_t IProceduresLibrary::GetIconsFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IconsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1587)
inline VARIANT_BOOL IProceduresLibrary::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProceduresLibraries wrapper method implementations
//

#pragma implementation_key(1588)
inline IProceduresLibraryPtr IProceduresLibraries::GetItem ( const _variant_t & Index ) {
    struct IProceduresLibrary * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProceduresLibraryPtr(_result, false);
}

#pragma implementation_key(1589)
inline IProceduresLibraryPtr IProceduresLibraries::Add ( _bstr_t PathName, _bstr_t LibManagerFolder ) {
    struct IProceduresLibrary * _result = 0;
    HRESULT _hr = raw_Add(PathName, LibManagerFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProceduresLibraryPtr(_result, false);
}

//
// interface IKompasError wrapper method implementations
//

#pragma implementation_key(1590)
inline long IKompasError::GetCode ( ) {
    long _result = 0;
    HRESULT _hr = get_Code(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1591)
inline _bstr_t IKompasError::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1592)
inline VARIANT_BOOL IKompasError::GetError3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Error3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1593)
inline HRESULT IKompasError::Report ( ) {
    HRESULT _hr = raw_Report();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1594)
inline HRESULT IKompasError::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverter wrapper method implementations
//

#pragma implementation_key(1595)
inline IUnknownPtr IConverter::ConverterParameters ( long Command ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_ConverterParameters(Command, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1596)
inline _bstr_t IConverter::GetFilter ( long DocType, VARIANT_BOOL SaveAs, long * Command ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFilter(DocType, SaveAs, Command, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1597)
inline long IConverter::Convert ( _bstr_t InputFile, _bstr_t Outfile, long Command, VARIANT_BOOL ShowParam ) {
    long _result = 0;
    HRESULT _hr = raw_Convert(InputFile, Outfile, Command, ShowParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1598)
inline VARIANT_BOOL IConverter::VisualEditConvertParam ( OLE_HANDLE ParentHwnd, long Command ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_VisualEditConvertParam(ParentHwnd, Command, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICheckSum wrapper method implementations
//

#pragma implementation_key(1599)
inline HRESULT ICheckSum::Add ( const _variant_t & Value, VARIANT_BOOL Com ) {
    HRESULT _hr = raw_Add(Value, Com);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1600)
inline _variant_t ICheckSum::GetResult ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Result(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1601)
inline _bstr_t ICheckSum::GetStrResult ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StrResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1602)
inline VARIANT_BOOL ICheckSum::AddInterface ( IUnknown * Object, VARIANT_BOOL Com ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddInterface(Object, Com, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1603)
inline VARIANT_BOOL ICheckSum::AddReference ( long Object, long Doc, VARIANT_BOOL Com ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddReference(Object, Doc, Com, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1604)
inline HRESULT ICheckSum::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1605)
inline long ICheckSum::GetVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1606)
inline void ICheckSum::PutVersion ( long PVal ) {
    HRESULT _hr = put_Version(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IProgressBarIndicator wrapper method implementations
//

#pragma implementation_key(1607)
inline HRESULT IProgressBarIndicator::Start ( long MinVal, long MaxVal, _bstr_t TextVal, VARIANT_BOOL ResetVal ) {
    HRESULT _hr = raw_Start(MinVal, MaxVal, TextVal, ResetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1608)
inline HRESULT IProgressBarIndicator::SetProgress ( long CurrentVal, _bstr_t TextVal, VARIANT_BOOL ResetVal ) {
    HRESULT _hr = raw_SetProgress(CurrentVal, TextVal, ResetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1609)
inline HRESULT IProgressBarIndicator::SetText ( _bstr_t TextVal ) {
    HRESULT _hr = raw_SetText(TextVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1610)
inline HRESULT IProgressBarIndicator::Stop ( _bstr_t TextVal, VARIANT_BOOL ResetVal ) {
    HRESULT _hr = raw_Stop(TextVal, ResetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ILibArraySettings wrapper method implementations
//

#pragma implementation_key(1611)
inline long ILibArraySettings::GetLibraryCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LibraryCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1612)
inline _bstr_t ILibArraySettings::GetLibrary ( long Index, VARIANT_BOOL * Use ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLibrary(Index, Use, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1613)
inline VARIANT_BOOL ILibArraySettings::SetLibraryUse ( const _variant_t & Index, VARIANT_BOOL Use ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLibraryUse(Index, Use, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1614)
inline VARIANT_BOOL ILibArraySettings::GetLibrarys ( VARIANT * FileNames, VARIANT * Uses ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetLibrarys(FileNames, Uses, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1615)
inline VARIANT_BOOL ILibArraySettings::AddLibrary ( _bstr_t FileName, VARIANT_BOOL Use ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddLibrary(FileName, Use, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1616)
inline VARIANT_BOOL ILibArraySettings::RemoveLibrary ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveLibrary(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IThreadPattern wrapper method implementations
//

#pragma implementation_key(1617)
inline _bstr_t IThreadPattern::GetTableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1618)
inline _bstr_t IThreadPattern::GetStandart ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Standart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1619)
inline double IThreadPattern::GetConeAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_ConeAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1620)
inline double IThreadPattern::GetHoleKoeff ( ) {
    double _result = 0;
    HRESULT _hr = get_HoleKoeff(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1621)
inline long IThreadPattern::GetPatternsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PatternsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1622)
inline double IThreadPattern::GetNominalDiameter ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_NominalDiameter(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1623)
inline double IThreadPattern::GetP ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_P(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1624)
inline double IThreadPattern::GetConeL1 ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_ConeL1(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1625)
inline double IThreadPattern::GetConeL2 ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_ConeL2(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1626)
inline double IThreadPattern::GetLenght ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_Lenght(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1627)
inline _bstr_t IThreadPattern::GetDesignation ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Designation(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1628)
inline _variant_t IThreadPattern::SelectDiameters ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SelectDiameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1629)
inline _variant_t IThreadPattern::SelectP ( double NominalDiameter ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SelectP(NominalDiameter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1630)
inline _bstr_t IThreadPattern::GetParameters ( long Index, double * NominalDiameter, double * P, double * L, double * L1, double * L2 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetParameters(Index, NominalDiameter, P, L, L1, L2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1631)
inline _bstr_t IThreadPattern::SelectParameters ( double NominalDiameter, double P, double * L, double * L1, double * L2 ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SelectParameters(NominalDiameter, P, L, L1, L2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISystemSettings wrapper method implementations
//

#pragma implementation_key(1632)
inline void ISystemSettings::PutFilesAutoSaveSwitchOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FilesAutoSaveSwitchOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1633)
inline VARIANT_BOOL ISystemSettings::GetFilesAutoSaveSwitchOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FilesAutoSaveSwitchOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1634)
inline void ISystemSettings::PutFilesBackupPrevCopySwitchOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FilesBackupPrevCopySwitchOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1635)
inline VARIANT_BOOL ISystemSettings::GetFilesBackupPrevCopySwitchOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FilesBackupPrevCopySwitchOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1636)
inline void ISystemSettings::PutModelLocalCSCreateInAbsoluteCS ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ModelLocalCSCreateInAbsoluteCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1637)
inline VARIANT_BOOL ISystemSettings::GetModelLocalCSCreateInAbsoluteCS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelLocalCSCreateInAbsoluteCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1638)
inline void ISystemSettings::PutModelLocalCSSetActive ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ModelLocalCSSetActive(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1639)
inline VARIANT_BOOL ISystemSettings::GetModelLocalCSSetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelLocalCSSetActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1640)
inline void ISystemSettings::PutModelSmoothMotion ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ModelSmoothMotion(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1641)
inline VARIANT_BOOL ISystemSettings::GetModelSmoothMotion ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelSmoothMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1642)
inline ILibArraySettingsPtr ISystemSettings::GetReportStyleListSettings ( ) {
    struct ILibArraySettings * _result = 0;
    HRESULT _hr = get_ReportStyleListSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILibArraySettingsPtr(_result, false);
}

#pragma implementation_key(1643)
inline void ISystemSettings::PutObjectsFilter3D ( enum ksObjectsFilter3DEnum Type, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ObjectsFilter3D(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1644)
inline VARIANT_BOOL ISystemSettings::GetObjectsFilter3D ( enum ksObjectsFilter3DEnum Type ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectsFilter3D(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1645)
inline IKompasAPIObjectPtr ISystemSettings::GetNewDocumentSettings ( enum ksNewDocumentSettingsTypeEnum SettingsType ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_NewDocumentSettings(SettingsType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(1646)
inline void ISystemSettings::PutEnablesAddSystemDelimersInMarking ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnablesAddSystemDelimersInMarking(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1647)
inline VARIANT_BOOL ISystemSettings::GetEnablesAddSystemDelimersInMarking ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnablesAddSystemDelimersInMarking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1648)
inline ILibArraySettingsPtr ISystemSettings::GetStandardsThreadsListSettings ( ) {
    struct ILibArraySettings * _result = 0;
    HRESULT _hr = get_StandardsThreadsListSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILibArraySettingsPtr(_result, false);
}

#pragma implementation_key(1649)
inline void ISystemSettings::PutModelEditColor ( enum ksEditColorTypeEnum ColorType, long PVal ) {
    HRESULT _hr = put_ModelEditColor(ColorType, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1650)
inline long ISystemSettings::GetModelEditColor ( enum ksEditColorTypeEnum ColorType ) {
    long _result = 0;
    HRESULT _hr = get_ModelEditColor(ColorType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1651)
inline void ISystemSettings::PutModelFillChooseFace ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ModelFillChooseFace(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1652)
inline VARIANT_BOOL ISystemSettings::GetModelFillChooseFace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelFillChooseFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1653)
inline void ISystemSettings::PutModelInverseInDynamicSelect ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ModelInverseInDynamicSelect(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1654)
inline VARIANT_BOOL ISystemSettings::GetModelInverseInDynamicSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelInverseInDynamicSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1655)
inline void ISystemSettings::PutModelUsePartColorForEdit ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ModelUsePartColorForEdit(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1656)
inline VARIANT_BOOL ISystemSettings::GetModelUsePartColorForEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelUsePartColorForEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1657)
inline void ISystemSettings::PutModelUseOpenGLSearch ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ModelUseOpenGLSearch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1658)
inline VARIANT_BOOL ISystemSettings::GetModelUseOpenGLSearch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ModelUseOpenGLSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1659)
inline IThreadPatternPtr ISystemSettings::GetThreadPattern ( _bstr_t ThreadTableName ) {
    struct IThreadPattern * _result = 0;
    HRESULT _hr = get_ThreadPattern(ThreadTableName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThreadPatternPtr(_result, false);
}

#pragma implementation_key(1660)
inline _bstr_t ISystemSettings::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1661)
inline void ISystemSettings::PutAssociationViewRebuildParallel ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AssociationViewRebuildParallel(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1662)
inline VARIANT_BOOL ISystemSettings::GetAssociationViewRebuildParallel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssociationViewRebuildParallel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1663)
inline void ISystemSettings::PutAssociationViewRebuildParallelLowPriority ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AssociationViewRebuildParallelLowPriority(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1664)
inline VARIANT_BOOL ISystemSettings::GetAssociationViewRebuildParallelLowPriority ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssociationViewRebuildParallelLowPriority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1665)
inline void ISystemSettings::PutAssociationViewAutoSaveBeforeRebuild ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AssociationViewAutoSaveBeforeRebuild(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1666)
inline VARIANT_BOOL ISystemSettings::GetAssociationViewAutoSaveBeforeRebuild ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssociationViewAutoSaveBeforeRebuild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1667)
inline enum ksThemeEnum ISystemSettings::GetTheme ( ) {
    enum ksThemeEnum _result;
    HRESULT _hr = get_Theme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1668)
inline VARIANT_BOOL ISystemSettings::GetUseHardwareAcceleration ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseHardwareAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1669)
inline enum ksModelRenderTypeEnum ISystemSettings::GetModelRenderType ( ) {
    enum ksModelRenderTypeEnum _result;
    HRESULT _hr = get_ModelRenderType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline void ISystemSettings::PutModelRenderType ( enum ksModelRenderTypeEnum PVal ) {
    HRESULT _hr = put_ModelRenderType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline double ISystemSettings::GetModelStepMoveDetail ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelStepMoveDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1672)
inline void ISystemSettings::PutModelStepMoveDetail ( double PVal ) {
    HRESULT _hr = put_ModelStepMoveDetail(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1673)
inline double ISystemSettings::GetModelStepRotateDetail ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelStepRotateDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1674)
inline void ISystemSettings::PutModelStepRotateDetail ( double PVal ) {
    HRESULT _hr = put_ModelStepRotateDetail(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline double ISystemSettings::GetModelScaleFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline void ISystemSettings::PutModelScaleFactor ( double PVal ) {
    HRESULT _hr = put_ModelScaleFactor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline enum ksModelPerformanceLevelEnum ISystemSettings::GetModelPerformanceLevel ( ) {
    enum ksModelPerformanceLevelEnum _result;
    HRESULT _hr = get_ModelPerformanceLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1678)
inline void ISystemSettings::PutModelPerformanceLevel ( enum ksModelPerformanceLevelEnum PVal ) {
    HRESULT _hr = put_ModelPerformanceLevel(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1679)
inline enum ksModelTransparencyTypeEnum ISystemSettings::GetModelTransparencyType ( ) {
    enum ksModelTransparencyTypeEnum _result;
    HRESULT _hr = get_ModelTransparencyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void ISystemSettings::PutModelTransparencyType ( enum ksModelTransparencyTypeEnum PVal ) {
    HRESULT _hr = put_ModelTransparencyType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1681)
inline void ISystemSettings::PutEnableAddFilesToRecentList ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableAddFilesToRecentList(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1682)
inline VARIANT_BOOL ISystemSettings::GetEnableAddFilesToRecentList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAddFilesToRecentList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1683)
inline void ISystemSettings::PutJtAutoSaveSwitchOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_JtAutoSaveSwitchOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1684)
inline VARIANT_BOOL ISystemSettings::GetJtAutoSaveSwitchOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_JtAutoSaveSwitchOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICurve2D wrapper method implementations
//

#pragma implementation_key(1685)
inline _variant_t ICurve2D::Intersect ( struct ICurve2D * Curve2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Intersect(Curve2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1686)
inline VARIANT_BOOL ICurve2D::Tangent ( struct ICurve2D * Curve2, VARIANT * Curve1Points, VARIANT * Curve2Points ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Tangent(Curve2, Curve1Points, Curve2Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1687)
inline _variant_t ICurve2D::TangentLinePoint ( double X, double Y ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_TangentLinePoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1688)
inline _variant_t ICurve2D::CouplingCurvCurv ( struct ICurve2D * Curve2, double Radius ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CouplingCurvCurv(Curve2, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1689)
inline VARIANT_BOOL ICurve2D::PointProjection ( double X, double Y, double * Kx, double * Ky, double * T, double * Angle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PointProjection(X, Y, Kx, Ky, T, Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline _variant_t ICurve2D::CalculatePolygonByStep ( double Step ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CalculatePolygonByStep(Step, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1691)
inline VARIANT_BOOL ICurve2D::MovePoint ( double * X, double * Y, double Lenght, VARIANT_BOOL Direction ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_MovePoint(X, Y, Lenght, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1692)
inline double ICurve2D::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1693)
inline double ICurve2D::GetDistancePointPoint ( double X1, double Y1, double X2, double Y2 ) {
    double _result = 0;
    HRESULT _hr = raw_GetDistancePointPoint(X1, Y1, X2, Y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1694)
inline double ICurve2D::GetDistanceToPoint ( double X, double Y ) {
    double _result = 0;
    HRESULT _hr = raw_GetDistanceToPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1695)
inline VARIANT_BOOL ICurve2D::PointOn ( double T, double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PointOn(T, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1696)
inline double ICurve2D::GetMetricLength ( double T1, double T2 ) {
    double _result = 0;
    HRESULT _hr = raw_GetMetricLength(T1, T2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1697)
inline double ICurve2D::GetParamMin ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline double ICurve2D::GetParamMax ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1699)
inline VARIANT_BOOL ICurve2D::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1700)
inline VARIANT_BOOL ICurve2D::GetNurbsParams ( VARIANT_BOOL Closed, VARIANT * Points, VARIANT * Weights, VARIANT * Knots, double * TMin, double * TMax ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNurbsParams(Closed, Points, Weights, Knots, TMin, TMax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1701)
inline VARIANT_BOOL ICurve2D::GetIsSelfIntersect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSelfIntersect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1702)
inline enum ksPointLocationTypeEnum ICurve2D::GetPointLocation ( double X, double Y ) {
    enum ksPointLocationTypeEnum _result;
    HRESULT _hr = raw_GetPointLocation(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMath2D wrapper method implementations
//

#pragma implementation_key(1703)
inline ICurve2DPtr IMath2D::Line ( double X, double Y, double Angle ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_Line(X, Y, Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1704)
inline ICurve2DPtr IMath2D::LineSeg ( double X1, double Y1, double X2, double Y2 ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_LineSeg(X1, Y1, X2, Y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1705)
inline ICurve2DPtr IMath2D::Arc ( double Xc, double Yc, double Radius, double Angle1, double Angle2, VARIANT_BOOL Direction ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_Arc(Xc, Yc, Radius, Angle1, Angle2, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1706)
inline ICurve2DPtr IMath2D::Circle ( double Xc, double Yc, double Radius ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_Circle(Xc, Yc, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1707)
inline ICurve2DPtr IMath2D::PolyLine ( const _variant_t & Points, VARIANT_BOOL Closed ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_PolyLine(Points, Closed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1708)
inline ICurve2DPtr IMath2D::Ellipse ( double Xc, double Yc, double A, double B, double Angle ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_Ellipse(Xc, Yc, A, B, Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1709)
inline ICurve2DPtr IMath2D::EllipseArc ( double Xc, double Yc, double A, double B, double Angle, double Angle1, double Angle2, VARIANT_BOOL Direction ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_EllipseArc(Xc, Yc, A, B, Angle, Angle1, Angle2, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1710)
inline ICurve2DPtr IMath2D::Bezier ( VARIANT_BOOL Closed, VARIANT_BOOL AllPoints, const _variant_t & Points ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_Bezier(Closed, AllPoints, Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1711)
inline ICurve2DPtr IMath2D::Nurbs ( VARIANT_BOOL Closed, long Degree, const _variant_t & Points, const _variant_t & Weights, const _variant_t & Knots ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_Nurbs(Closed, Degree, Points, Weights, Knots, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(1712)
inline VARIANT_BOOL IMath2D::Symmetry ( double * X, double * Y, struct ICurve2D * Curve ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Symmetry(X, Y, Curve, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1713)
inline VARIANT_BOOL IMath2D::Rotate ( double * X, double * Y, double Xc, double Yc, double Angle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Rotate(X, Y, Xc, Yc, Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1714)
inline VARIANT_BOOL IMath2D::MovePoint ( double * X, double * Y, double Angle, double Len ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_MovePoint(X, Y, Angle, Len, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPrintJob_Sheet wrapper method implementations
//

#pragma implementation_key(1715)
inline _bstr_t IPrintJob_Sheet::GetDocumentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1716)
inline long IPrintJob_Sheet::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1717)
inline VARIANT_BOOL IPrintJob_Sheet::GetGabarites ( double * Width, double * Height ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGabarites(Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline enum ksAngleEnum IPrintJob_Sheet::GetOrientation ( ) {
    enum ksAngleEnum _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1719)
inline void IPrintJob_Sheet::PutOrientation ( enum ksAngleEnum Value ) {
    HRESULT _hr = put_Orientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1720)
inline void IPrintJob_Sheet::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1721)
inline double IPrintJob_Sheet::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1722)
inline void IPrintJob_Sheet::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1723)
inline double IPrintJob_Sheet::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1724)
inline void IPrintJob_Sheet::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1725)
inline double IPrintJob_Sheet::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1726)
inline VARIANT_BOOL IPrintJob_Sheet::GetClipFlag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1727)
inline void IPrintJob_Sheet::PutClipFlag ( VARIANT_BOOL Flag ) {
    HRESULT _hr = put_ClipFlag(Flag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1728)
inline VARIANT_BOOL IPrintJob_Sheet::GetClipFrameGabarites ( double * Left, double * Bottom, double * Right, double * Top ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetClipFrameGabarites(Left, Bottom, Right, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1729)
inline VARIANT_BOOL IPrintJob_Sheet::SetClipFrameGabarites ( double Left, double Bottom, double Right, double Top ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetClipFrameGabarites(Left, Bottom, Right, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPrintJob wrapper method implementations
//

#pragma implementation_key(1730)
inline VARIANT_BOOL IPrintJob::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1731)
inline VARIANT_BOOL IPrintJob::ShowPreviewWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowPreviewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1732)
inline VARIANT_BOOL IPrintJob::Load ( _bstr_t FileName, VARIANT * Errors ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Load(FileName, Errors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1733)
inline VARIANT_BOOL IPrintJob::Save ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Save(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1734)
inline VARIANT_BOOL IPrintJob::Execute ( _bstr_t OutputFileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Execute(OutputFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline VARIANT_BOOL IPrintJob::AddSheets ( _bstr_t FileName, const _variant_t & Sheets, enum ksSheetsRangeEnum Range ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddSheets(FileName, Sheets, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1736)
inline long IPrintJob::GetSheetsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SheetsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline IPrintJob_SheetPtr IPrintJob::GetSheet ( long Index ) {
    struct IPrintJob_Sheet * _result = 0;
    HRESULT _hr = get_Sheet(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPrintJob_SheetPtr(_result, false);
}

#pragma implementation_key(1738)
inline VARIANT_BOOL IPrintJob::RemoveSheets ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveSheets(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1739)
inline long IPrintJob::GetPagesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PagesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1740)
inline VARIANT_BOOL IPrintJob::GetPageGabarites ( double * Width, double * Height ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPageGabarites(Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1741)
inline VARIANT_BOOL IPrintJob::GetPagesMapGabarites ( long * WPageCount, long * HPageCount ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPagesMapGabarites(WPageCount, HPageCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1742)
inline VARIANT_BOOL IPrintJob::GetPagePrintableFlag ( long WPage, long HPage ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PagePrintableFlag(WPage, HPage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1743)
inline void IPrintJob::PutPagePrintableFlag ( long WPage, long HPage, VARIANT_BOOL Result ) {
    HRESULT _hr = put_PagePrintableFlag(WPage, HPage, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1744)
inline VARIANT_BOOL IPrintJob::SpecialExecute ( _bstr_t OutputFileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SpecialExecute(OutputFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IStyle wrapper method implementations
//

#pragma implementation_key(1745)
inline void IStyle::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1746)
inline _bstr_t IStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1747)
inline long IStyle::GetApiStyleId ( ) {
    long _result = 0;
    HRESULT _hr = get_ApiStyleId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1748)
inline long IStyle::GetDisplayStyleId ( ) {
    long _result = 0;
    HRESULT _hr = get_DisplayStyleId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1749)
inline void IStyle::PutDisplayStyleId ( long PVal ) {
    HRESULT _hr = put_DisplayStyleId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1750)
inline VARIANT_BOOL IStyle::GetIsExternalStyle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsExternalStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1751)
inline _bstr_t IStyle::GetLibraryPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1752)
inline long IStyle::GetLibraryStyleId ( ) {
    long _result = 0;
    HRESULT _hr = get_LibraryStyleId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1753)
inline VARIANT_BOOL IStyle::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1754)
inline VARIANT_BOOL IStyle::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IStyles wrapper method implementations
//

#pragma implementation_key(1755)
inline IStylePtr IStyles::GetItem ( const _variant_t & Index ) {
    struct IStyle * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylePtr(_result, false);
}

#pragma implementation_key(1756)
inline IStylePtr IStyles::GetStyleByApiId ( long Id ) {
    struct IStyle * _result = 0;
    HRESULT _hr = get_StyleByApiId(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylePtr(_result, false);
}

#pragma implementation_key(1757)
inline IStylePtr IStyles::Add ( ) {
    struct IStyle * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylePtr(_result, false);
}

#pragma implementation_key(1758)
inline IStylePtr IStyles::Copy ( struct IStyle * Style ) {
    struct IStyle * _result = 0;
    HRESULT _hr = raw_Copy(Style, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylePtr(_result, false);
}

#pragma implementation_key(1759)
inline IStylePtr IStyles::AddStyleFromLibrary ( _bstr_t LibraryPath, long Id, VARIANT_BOOL External ) {
    struct IStyle * _result = 0;
    HRESULT _hr = raw_AddStyleFromLibrary(LibraryPath, Id, External, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylePtr(_result, false);
}

#pragma implementation_key(1760)
inline IStylePtr IStyles::FindStyleFromLibrary ( _bstr_t LibraryPath, long LibraryStyleId ) {
    struct IStyle * _result = 0;
    HRESULT _hr = raw_FindStyleFromLibrary(LibraryPath, LibraryStyleId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylePtr(_result, false);
}

//
// interface IDrawingObject wrapper method implementations
//

#pragma implementation_key(1761)
inline enum DrawingObjectTypeEnum IDrawingObject::GetDrawingObjectType ( ) {
    enum DrawingObjectTypeEnum _result;
    HRESULT _hr = get_DrawingObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1762)
inline long IDrawingObject::GetLayerNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_LayerNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1763)
inline void IDrawingObject::PutLayerNumber ( long PVal ) {
    HRESULT _hr = put_LayerNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1764)
inline VARIANT_BOOL IDrawingObject::GetTemp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Temp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1765)
inline VARIANT_BOOL IDrawingObject::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1766)
inline VARIANT_BOOL IDrawingObject::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1767)
inline VARIANT_BOOL IDrawingObject::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1768)
inline enum ksDrawingObjectParamTypeEnum IDrawingObject::GetDrawingObjectParamType ( ) {
    enum ksDrawingObjectParamTypeEnum _result;
    HRESULT _hr = get_DrawingObjectParamType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1769)
inline void IDrawingObject::PutDrawingObjectParamType ( enum ksDrawingObjectParamTypeEnum PVal ) {
    HRESULT _hr = put_DrawingObjectParamType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDrawingObjects wrapper method implementations
//

#pragma implementation_key(1770)
inline IDrawingObjectPtr IDrawingObjects::GetItem ( const _variant_t & Index ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

//
// interface ILayer wrapper method implementations
//

#pragma implementation_key(1771)
inline void ILayer::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1772)
inline _bstr_t ILayer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1773)
inline void ILayer::PutBackground ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Background(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1774)
inline VARIANT_BOOL ILayer::GetBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1775)
inline void ILayer::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1776)
inline VARIANT_BOOL ILayer::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1777)
inline void ILayer::PutCurrent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Current(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1778)
inline VARIANT_BOOL ILayer::GetCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1779)
inline void ILayer::PutColor ( long PVal ) {
    HRESULT _hr = put_Color(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1780)
inline long ILayer::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1781)
inline void ILayer::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1782)
inline _bstr_t ILayer::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1783)
inline long ILayer::GetObjectCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ObjectCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1784)
inline void ILayer::PutPrintable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Printable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1785)
inline VARIANT_BOOL ILayer::GetPrintable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Printable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILayers wrapper method implementations
//

#pragma implementation_key(1786)
inline ILayerPtr ILayers::GetLayer ( const _variant_t & Index ) {
    struct ILayer * _result = 0;
    HRESULT _hr = get_Layer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerPtr(_result, false);
}

#pragma implementation_key(1787)
inline ILayerPtr ILayers::GetLayerByNumber ( long Number ) {
    struct ILayer * _result = 0;
    HRESULT _hr = get_LayerByNumber(Number, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerPtr(_result, false);
}

#pragma implementation_key(1788)
inline ILayerPtr ILayers::Add ( ) {
    struct ILayer * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerPtr(_result, false);
}

#pragma implementation_key(1789)
inline VARIANT_BOOL ILayers::Attach ( struct ILayer * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Attach(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1790)
inline VARIANT_BOOL ILayers::Detach ( struct ILayer * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Detach(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVariable7 wrapper method implementations
//

#pragma implementation_key(1791)
inline _bstr_t IVariable7::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1792)
inline void IVariable7::PutNote ( _bstr_t PVal ) {
    HRESULT _hr = put_Note(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1793)
inline _bstr_t IVariable7::GetNote ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Note(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1794)
inline void IVariable7::PutValue ( double PVal ) {
    HRESULT _hr = put_Value(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1795)
inline double IVariable7::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1796)
inline void IVariable7::PutExternal ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_External(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1797)
inline VARIANT_BOOL IVariable7::GetExternal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_External(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1798)
inline void IVariable7::PutInformation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Information(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1799)
inline VARIANT_BOOL IVariable7::GetInformation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Information(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1800)
inline void IVariable7::PutExpression ( _bstr_t PVal ) {
    HRESULT _hr = put_Expression(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1801)
inline _bstr_t IVariable7::GetExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Expression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1802)
inline _bstr_t IVariable7::GetParameterNote ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParameterNote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1803)
inline _bstr_t IVariable7::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1804)
inline _bstr_t IVariable7::GetLinkVariableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkVariableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1805)
inline _bstr_t IVariable7::GetLinkDocumentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkDocumentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1806)
inline VARIANT_BOOL IVariable7::SetLink ( _bstr_t DocumentName, _bstr_t VariableName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLink(DocumentName, VariableName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1807)
inline VARIANT_BOOL IVariable7::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1808)
inline void IVariable7::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1809)
inline VARIANT_BOOL IVariable7::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1810)
inline _bstr_t IVariable7::GetTolerance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1811)
inline void IVariable7::PutTolerance ( _bstr_t PVal ) {
    HRESULT _hr = put_Tolerance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1812)
inline double IVariable7::GetHighDeviation ( ) {
    double _result = 0;
    HRESULT _hr = get_HighDeviation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1813)
inline void IVariable7::PutHighDeviation ( double PVal ) {
    HRESULT _hr = put_HighDeviation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1814)
inline double IVariable7::GetLowDeviation ( ) {
    double _result = 0;
    HRESULT _hr = get_LowDeviation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1815)
inline void IVariable7::PutLowDeviation ( double PVal ) {
    HRESULT _hr = put_LowDeviation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1816)
inline VARIANT_BOOL IVariable7::GetHasTolerance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1817)
inline void IVariable7::PutHasTolerance ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_HasTolerance(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1818)
inline VARIANT_BOOL IVariable7::GetRectangle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Rectangle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1819)
inline void IVariable7::PutRectangle ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Rectangle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1820)
inline IPropertyPtr IVariable7::GetProperty ( ) {
    struct IProperty * _result = 0;
    HRESULT _hr = get_Property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyPtr(_result, false);
}

#pragma implementation_key(1821)
inline IPropertyPtr IVariable7::AddProperty ( ) {
    struct IProperty * _result = 0;
    HRESULT _hr = raw_AddProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyPtr(_result, false);
}

#pragma implementation_key(1822)
inline VARIANT_BOOL IVariable7::GetToleranceOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1823)
inline void IVariable7::PutToleranceOn ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ToleranceOn(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1824)
inline VARIANT_BOOL IVariable7::GetDeviationOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeviationOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1825)
inline void IVariable7::PutDeviationOn ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_DeviationOn(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1826)
inline enum ksDimensionDeviationEnum IVariable7::GetDeviationType ( ) {
    enum ksDimensionDeviationEnum _result;
    HRESULT _hr = get_DeviationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1827)
inline void IVariable7::PutDeviationType ( enum ksDimensionDeviationEnum Result ) {
    HRESULT _hr = put_DeviationType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1828)
inline VARIANT_BOOL IVariable7::GetIsCreatedDeviationVariables ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCreatedDeviationVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline VARIANT_BOOL IVariable7::CreateDeviationVariables ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CreateDeviationVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1830)
inline _bstr_t IVariable7::GetDeviationExpression ( VARIANT_BOOL HighDeviation ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviationExpression(HighDeviation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1831)
inline void IVariable7::PutDeviationExpression ( VARIANT_BOOL HighDeviation, _bstr_t Result ) {
    HRESULT _hr = put_DeviationExpression(HighDeviation, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1832)
inline VARIANT_BOOL IVariable7::SetLinkEmbodiment ( _bstr_t DocumentName, _bstr_t VariableName, const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLinkEmbodiment(DocumentName, VariableName, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1833)
inline long IVariable7::GetLinkEmbodimentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_LinkEmbodimentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1834)
inline _bstr_t IVariable7::GetLinkEmbodimentMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLinkEmbodimentMarking(MarkingType, AddSystemDelimer, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1835)
inline long IVariable7::GetVariableID ( ) {
    long _result = 0;
    HRESULT _hr = get_VariableID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IView wrapper method implementations
//

#pragma implementation_key(1836)
inline void IView::PutNumber ( long PVal ) {
    HRESULT _hr = put_Number(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1837)
inline long IView::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1838)
inline void IView::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1839)
inline _bstr_t IView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1840)
inline void IView::PutBackground ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Background(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1841)
inline VARIANT_BOOL IView::GetBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1842)
inline void IView::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1843)
inline VARIANT_BOOL IView::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1844)
inline void IView::PutCurrent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Current(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1845)
inline VARIANT_BOOL IView::GetCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1846)
inline void IView::PutColor ( long PVal ) {
    HRESULT _hr = put_Color(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1847)
inline long IView::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1848)
inline void IView::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1849)
inline _bstr_t IView::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1850)
inline long IView::GetObjectCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ObjectCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1851)
inline void IView::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1852)
inline double IView::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1853)
inline void IView::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1854)
inline double IView::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1855)
inline void IView::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1856)
inline double IView::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1857)
inline void IView::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1858)
inline double IView::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1859)
inline enum LtViewType IView::GetViewType ( ) {
    enum LtViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1860)
inline ILayersPtr IView::GetLayers ( ) {
    struct ILayers * _result = 0;
    HRESULT _hr = get_Layers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayersPtr(_result, false);
}

#pragma implementation_key(1861)
inline _variant_t IView::GetVariables ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Variables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1862)
inline IVariable7Ptr IView::GetVariable ( const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_Variable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(1863)
inline long IView::GetVariablesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VariablesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IViews wrapper method implementations
//

#pragma implementation_key(1864)
inline IViewPtr IViews::GetView ( const _variant_t & Index ) {
    struct IView * _result = 0;
    HRESULT _hr = get_View(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPtr(_result, false);
}

#pragma implementation_key(1865)
inline IViewPtr IViews::GetViewByNumber ( long Numb ) {
    struct IView * _result = 0;
    HRESULT _hr = get_ViewByNumber(Numb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPtr(_result, false);
}

#pragma implementation_key(1866)
inline IViewPtr IViews::Add ( enum LtViewType ViewType ) {
    struct IView * _result = 0;
    HRESULT _hr = raw_Add(ViewType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPtr(_result, false);
}

#pragma implementation_key(1867)
inline IViewPtr IViews::GetActiveView ( ) {
    struct IView * _result = 0;
    HRESULT _hr = get_ActiveView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPtr(_result, false);
}

#pragma implementation_key(1868)
inline VARIANT_BOOL IViews::AddStandartViews ( _bstr_t FileName, _bstr_t ProjectionName, const _variant_t & ProjectionsTypes, double X, double Y, double Scale, double DX, double DY ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddStandartViews(FileName, ProjectionName, ProjectionsTypes, X, Y, Scale, DX, DY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILayerFilterCondition wrapper method implementations
//

#pragma implementation_key(1869)
inline void ILayerFilterCondition::PutNumber ( _bstr_t PVal ) {
    HRESULT _hr = put_Number(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1870)
inline _bstr_t ILayerFilterCondition::GetNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1871)
inline void ILayerFilterCondition::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1872)
inline _bstr_t ILayerFilterCondition::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1873)
inline void ILayerFilterCondition::PutBackground ( enum FilterConditionStateEnum PVal ) {
    HRESULT _hr = put_Background(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1874)
inline enum FilterConditionStateEnum ILayerFilterCondition::GetBackground ( ) {
    enum FilterConditionStateEnum _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1875)
inline void ILayerFilterCondition::PutVisible ( enum FilterConditionStateEnum PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1876)
inline enum FilterConditionStateEnum ILayerFilterCondition::GetVisible ( ) {
    enum FilterConditionStateEnum _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1877)
inline void ILayerFilterCondition::PutHaveObjects ( enum FilterConditionStateEnum PVal ) {
    HRESULT _hr = put_HaveObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1878)
inline enum FilterConditionStateEnum ILayerFilterCondition::GetHaveObjects ( ) {
    enum FilterConditionStateEnum _result;
    HRESULT _hr = get_HaveObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1879)
inline void ILayerFilterCondition::PutColor ( long PVal ) {
    HRESULT _hr = put_Color(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1880)
inline long ILayerFilterCondition::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1881)
inline void ILayerFilterCondition::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1882)
inline _bstr_t ILayerFilterCondition::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1883)
inline void ILayerFilterCondition::PutProjected ( enum FilterConditionStateEnum PVal ) {
    HRESULT _hr = put_Projected(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1884)
inline enum FilterConditionStateEnum ILayerFilterCondition::GetProjected ( ) {
    enum FilterConditionStateEnum _result;
    HRESULT _hr = get_Projected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILayerFilterConditions wrapper method implementations
//

#pragma implementation_key(1885)
inline ILayerFilterConditionPtr ILayerFilterConditions::GetItem ( const _variant_t & Index ) {
    struct ILayerFilterCondition * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerFilterConditionPtr(_result, false);
}

#pragma implementation_key(1886)
inline ILayerFilterConditionPtr ILayerFilterConditions::Add ( ) {
    struct ILayerFilterCondition * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerFilterConditionPtr(_result, false);
}

//
// interface IFeature7 wrapper method implementations
//

#pragma implementation_key(1887)
inline _bstr_t IFeature7::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1888)
inline long IFeature7::GetUpdateStamp ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdateStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1889)
inline IFeature7Ptr IFeature7::GetOwnerFeature ( ) {
    struct IFeature7 * _result = 0;
    HRESULT _hr = get_OwnerFeature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFeature7Ptr(_result, false);
}

#pragma implementation_key(1890)
inline VARIANT_BOOL IFeature7::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1891)
inline void IFeature7::PutExcluded ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Excluded(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1892)
inline VARIANT_BOOL IFeature7::GetExcluded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Excluded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1893)
inline _variant_t IFeature7::GetModelObjects ( const _variant_t & ObjType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModelObjects(ObjType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1894)
inline ksObj3dTypeEnum IFeature7::GetFeatureType ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_FeatureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1895)
inline VARIANT_BOOL IFeature7::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1896)
inline _variant_t IFeature7::GetSubFeatures ( enum ksTreeTypeEnum TreeType, VARIANT_BOOL Through, VARIANT_BOOL LibObject ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubFeatures(TreeType, Through, LibObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1897)
inline _variant_t IFeature7::GetResultBodies ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResultBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1898)
inline _variant_t IFeature7::GetVariables ( VARIANT_BOOL ExternalOnly, VARIANT_BOOL InSource ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Variables(ExternalOnly, InSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1899)
inline IVariable7Ptr IFeature7::GetVariable ( VARIANT_BOOL External, VARIANT_BOOL InSource, const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_Variable(External, InSource, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(1900)
inline long IFeature7::GetVariablesCount ( VARIANT_BOOL External, VARIANT_BOOL InSource ) {
    long _result = 0;
    HRESULT _hr = get_VariablesCount(External, InSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1901)
inline long IFeature7::GetObjectError ( ) {
    long _result = 0;
    HRESULT _hr = get_ObjectError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1902)
inline long IFeature7::GetState ( ) {
    long _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1903)
inline _bstr_t IFeature7::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IModelObject wrapper method implementations
//

#pragma implementation_key(1904)
inline _bstr_t IModelObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1905)
inline void IModelObject::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1906)
inline void IModelObject::PutHidden ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Hidden(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1907)
inline VARIANT_BOOL IModelObject::GetHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1908)
inline VARIANT_BOOL IModelObject::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline VARIANT_BOOL IModelObject::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1910)
inline IPart7Ptr IModelObject::GetPart ( ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(1911)
inline ksObj3dTypeEnum IModelObject::GetModelObjectType ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_ModelObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1912)
inline IFeature7Ptr IModelObject::GetOwner ( ) {
    struct IFeature7 * _result = 0;
    HRESULT _hr = get_Owner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFeature7Ptr(_result, false);
}

//
// interface IModelObjects wrapper method implementations
//

#pragma implementation_key(1913)
inline IModelObjectPtr IModelObjects::GetItem ( const _variant_t & Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IVariableTable wrapper method implementations
//

#pragma implementation_key(1914)
inline long IVariableTable::GetRowsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1915)
inline long IVariableTable::GetColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1916)
inline _bstr_t IVariableTable::GetVarName ( long Column ) {
    BSTR _result = 0;
    HRESULT _hr = get_VarName(Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1917)
inline void IVariableTable::PutVarName ( long Column, _bstr_t Val ) {
    HRESULT _hr = put_VarName(Column, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1918)
inline _variant_t IVariableTable::GetVarNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VarNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1919)
inline void IVariableTable::PutVarNames ( const _variant_t & Val ) {
    HRESULT _hr = put_VarNames(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1920)
inline _bstr_t IVariableTable::GetComment ( long Val ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1921)
inline void IVariableTable::PutComment ( long Val, _bstr_t BstrVal ) {
    HRESULT _hr = put_Comment(Val, BstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1922)
inline _variant_t IVariableTable::GetTableRow ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TableRow(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1923)
inline void IVariableTable::PutTableRow ( const _variant_t & Index, const _variant_t & Val ) {
    HRESULT _hr = put_TableRow(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1924)
inline double IVariableTable::GetCell ( long RowIndexVal, long ColIndex ) {
    double _result = 0;
    HRESULT _hr = get_Cell(RowIndexVal, ColIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1925)
inline void IVariableTable::PutCell ( long RowIndexVal, long ColIndex, double Val ) {
    HRESULT _hr = put_Cell(RowIndexVal, ColIndex, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1926)
inline VARIANT_BOOL IVariableTable::ApplyVars ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ApplyVars(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1927)
inline long IVariableTable::GetVisualTable ( OLE_HANDLE WinVal, VARIANT_BOOL Select ) {
    long _result = 0;
    HRESULT _hr = get_VisualTable(WinVal, Select, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1928)
inline long IVariableTable::AddColumn ( _bstr_t Val ) {
    long _result = 0;
    HRESULT _hr = raw_AddColumn(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1929)
inline VARIANT_BOOL IVariableTable::DeleteColumn ( const _variant_t & ColVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteColumn(ColVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1930)
inline long IVariableTable::AddRow ( _bstr_t Val ) {
    long _result = 0;
    HRESULT _hr = raw_AddRow(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1931)
inline VARIANT_BOOL IVariableTable::DeleteRow ( const _variant_t & RowVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteRow(RowVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1932)
inline VARIANT_BOOL IVariableTable::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1933)
inline long IVariableTable::FindColumnIndex ( _bstr_t Val ) {
    long _result = 0;
    HRESULT _hr = raw_FindColumnIndex(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPoint3D wrapper method implementations
//

#pragma implementation_key(1934)
inline void IPoint3D::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1935)
inline double IPoint3D::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1936)
inline void IPoint3D::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1937)
inline double IPoint3D::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1938)
inline void IPoint3D::PutZ ( double PVal ) {
    HRESULT _hr = put_Z(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1939)
inline double IPoint3D::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1940)
inline VARIANT_BOOL IPoint3D::SetAssociationObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetAssociationObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1941)
inline IModelObjectPtr IPoint3D::GetAssociationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(1942)
inline void IPoint3D::PutSymbol ( enum ksAnnotationSymbolEnum PVal ) {
    HRESULT _hr = put_Symbol(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1943)
inline enum ksAnnotationSymbolEnum IPoint3D::GetSymbol ( ) {
    enum ksAnnotationSymbolEnum _result;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1944)
inline void IPoint3D::PutParameterType ( enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_ParameterType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1945)
inline enum ksPoint3DTypeEnum IPoint3D::GetParameterType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_ParameterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1946)
inline IKompasAPIObjectPtr IPoint3D::GetParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

//
// interface IVector3D wrapper method implementations
//

#pragma implementation_key(1947)
inline void IVector3D::PutParametersType ( enum ksVector3DParametersTypeEnum PVal ) {
    HRESULT _hr = put_ParametersType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1948)
inline enum ksVector3DParametersTypeEnum IVector3D::GetParametersType ( ) {
    enum ksVector3DParametersTypeEnum _result;
    HRESULT _hr = get_ParametersType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1949)
inline IKompasAPIObjectPtr IVector3D::GetParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

//
// interface ILocalCoordinateSystem wrapper method implementations
//

#pragma implementation_key(1950)
inline VARIANT_BOOL ILocalCoordinateSystem::SetDisplacementByAxis ( ksObj3dTypeEnum Axis, double NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetDisplacementByAxis(Axis, NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1951)
inline void ILocalCoordinateSystem::PutOrientationType ( enum ksOrientationTypeEnum Result ) {
    HRESULT _hr = put_OrientationType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1952)
inline enum ksOrientationTypeEnum ILocalCoordinateSystem::GetOrientationType ( ) {
    enum ksOrientationTypeEnum _result;
    HRESULT _hr = get_OrientationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1953)
inline VARIANT_BOOL ILocalCoordinateSystem::ReadFromFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1954)
inline VARIANT_BOOL ILocalCoordinateSystem::WriteToFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteToFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1955)
inline VARIANT_BOOL ILocalCoordinateSystem::SetStartingOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetStartingOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1956)
inline VARIANT_BOOL ILocalCoordinateSystem::GetVector ( ksObj3dTypeEnum Axis, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVector(Axis, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1957)
inline IKompasAPIObjectPtr ILocalCoordinateSystem::GetLocalCSParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_LocalCSParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(1958)
inline void ILocalCoordinateSystem::PutCurrent ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Current(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1959)
inline VARIANT_BOOL ILocalCoordinateSystem::GetCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1960)
inline IModelObjectPtr ILocalCoordinateSystem::GetDefaultObject ( ksObj3dTypeEnum Val ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DefaultObject(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(1961)
inline VARIANT_BOOL ILocalCoordinateSystem::InitByMatrix3D ( const _variant_t & mtr ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitByMatrix3D(mtr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1962)
inline IVector3DPtr ILocalCoordinateSystem::GetVector3D ( ksObj3dTypeEnum Axis ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(Axis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(1963)
inline void ILocalCoordinateSystem::PutShowName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1964)
inline VARIANT_BOOL ILocalCoordinateSystem::GetShowName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlacement3D wrapper method implementations
//

#pragma implementation_key(1965)
inline VARIANT_BOOL IPlacement3D::GetOrigin ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOrigin(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1966)
inline VARIANT_BOOL IPlacement3D::SetOrigin ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetOrigin(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1967)
inline VARIANT_BOOL IPlacement3D::GetVector ( ksObj3dTypeEnum Axis, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVector(Axis, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1968)
inline VARIANT_BOOL IPlacement3D::SetVector ( ksObj3dTypeEnum Axis, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetVector(Axis, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1969)
inline VARIANT_BOOL IPlacement3D::InitByMatrix3D ( const _variant_t & mtr ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitByMatrix3D(mtr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1970)
inline _variant_t IPlacement3D::GetMatrix3D ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetMatrix3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1971)
inline VARIANT_BOOL IPlacement3D::GetPointProjectionToXY ( double XIn, double YIn, double ZIn, double * XOut, double * YOut ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPointProjectionToXY(XIn, YIn, ZIn, XOut, YOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1972)
inline VARIANT_BOOL IPlacement3D::GetPoint3D ( double XIn, double YIn, double * XOut, double * YOut, double * ZOut ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint3D(XIn, YIn, XOut, YOut, ZOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1973)
inline VARIANT_BOOL IPlacement3D::Rotate ( double X0, double Y0, double Z0, double AxisZX, double AxisZXY, double AxisZZ, double Angle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Rotate(X0, Y0, Z0, AxisZX, AxisZXY, AxisZZ, Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecRough3D wrapper method implementations
//

#pragma implementation_key(1974)
inline enum ksRoughSignEnum ISpecRough3D::GetSignType ( ) {
    enum ksRoughSignEnum _result;
    HRESULT _hr = get_SignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1975)
inline void ISpecRough3D::PutSignType ( enum ksRoughSignEnum Result ) {
    HRESULT _hr = put_SignType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1976)
inline _bstr_t ISpecRough3D::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1977)
inline void ISpecRough3D::PutText ( _bstr_t PVal ) {
    HRESULT _hr = put_Text(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1978)
inline VARIANT_BOOL ISpecRough3D::GetAddSign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1979)
inline void ISpecRough3D::PutAddSign ( VARIANT_BOOL PRes ) {
    HRESULT _hr = put_AddSign(PRes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1980)
inline VARIANT_BOOL ISpecRough3D::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1981)
inline VARIANT_BOOL ISpecRough3D::GetIsCreated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1982)
inline enum ksSpecRoughPlacementEnum ISpecRough3D::GetPlacement ( ) {
    enum ksSpecRoughPlacementEnum _result;
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline void ISpecRough3D::PutPlacement ( enum ksSpecRoughPlacementEnum Result ) {
    HRESULT _hr = put_Placement(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMateConstraint3D wrapper method implementations
//

#pragma implementation_key(1984)
inline enum MateConstraintType IMateConstraint3D::GetConstraintType ( ) {
    enum MateConstraintType _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1985)
inline void IMateConstraint3D::PutBaseObject1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BaseObject1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1986)
inline IModelObjectPtr IMateConstraint3D::GetBaseObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseObject1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(1987)
inline void IMateConstraint3D::PutBaseObject2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BaseObject2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1988)
inline IModelObjectPtr IMateConstraint3D::GetBaseObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseObject2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(1989)
inline void IMateConstraint3D::PutFixed ( enum ksMateFixedTypeEnum PVal ) {
    HRESULT _hr = put_Fixed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1990)
inline enum ksMateFixedTypeEnum IMateConstraint3D::GetFixed ( ) {
    enum ksMateFixedTypeEnum _result;
    HRESULT _hr = get_Fixed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1991)
inline void IMateConstraint3D::PutAlignment ( enum ksMateConstraintAlignmentEnum PVal ) {
    HRESULT _hr = put_Alignment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1992)
inline enum ksMateConstraintAlignmentEnum IMateConstraint3D::GetAlignment ( ) {
    enum ksMateConstraintAlignmentEnum _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1993)
inline void IMateConstraint3D::PutParamValue ( double PVal ) {
    HRESULT _hr = put_ParamValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1994)
inline double IMateConstraint3D::GetParamValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1995)
inline enum ksMateType IMateConstraint3D::GetMateParams ( long Index, VARIANT * Params ) {
    enum ksMateType _result;
    HRESULT _hr = raw_GetMateParams(Index, Params, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMateConstraints3D wrapper method implementations
//

#pragma implementation_key(1996)
inline IMateConstraint3DPtr IMateConstraints3D::GetMateConstraint3D ( const _variant_t & Index ) {
    struct IMateConstraint3D * _result = 0;
    HRESULT _hr = get_MateConstraint3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMateConstraint3DPtr(_result, false);
}

#pragma implementation_key(1997)
inline IMateConstraint3DPtr IMateConstraints3D::Add ( enum MateConstraintType Type ) {
    struct IMateConstraint3D * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMateConstraint3DPtr(_result, false);
}

#pragma implementation_key(1998)
inline _variant_t IMateConstraints3D::GetObjectConstraints ( struct IModelObject * Object ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectConstraints(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1999)
inline IMateConstraint3DPtr IMateConstraints3D::AddUserMate ( enum MateConstraintType Type ) {
    struct IMateConstraint3D * _result = 0;
    HRESULT _hr = raw_AddUserMate(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMateConstraint3DPtr(_result, false);
}

#pragma implementation_key(2000)
inline void IMateConstraints3D::PutMatesMultiCreatedMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MatesMultiCreatedMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2001)
inline VARIANT_BOOL IMateConstraints3D::GetMatesMultiCreatedMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatesMultiCreatedMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBody7 wrapper method implementations
//

#pragma implementation_key(2002)
inline VARIANT_BOOL IBody7::GetGabarit ( double * X1, double * Y1, double * Z1, double * X2, double * Y2, double * Z2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGabarit(X1, Y1, Z1, X2, Y2, Z2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2003)
inline _bstr_t IBody7::GetMarking ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Marking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2004)
inline void IBody7::PutMarking ( _bstr_t PVal ) {
    HRESULT _hr = put_Marking(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2005)
inline _bstr_t IBody7::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2006)
inline void IBody7::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2007)
inline VARIANT_BOOL IBody7::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2008)
inline void IBody7::PutHidden ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Hidden(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2009)
inline VARIANT_BOOL IBody7::GetHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2010)
inline IHatchParamPtr IBody7::GetHatchParam ( ) {
    struct IHatchParam * _result = 0;
    HRESULT _hr = get_HatchParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHatchParamPtr(_result, false);
}

#pragma implementation_key(2011)
inline long IBody7::GetLayerNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_LayerNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2012)
inline void IBody7::PutLayerNumber ( long PVal ) {
    HRESULT _hr = put_LayerNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2013)
inline void IBody7::PutProjected ( enum ksProjectionOptionEnum PVal ) {
    HRESULT _hr = put_Projected(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2014)
inline enum ksProjectionOptionEnum IBody7::GetProjected ( ) {
    enum ksProjectionOptionEnum _result;
    HRESULT _hr = get_Projected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2015)
inline void IBody7::PutHiddenEx ( enum ksVisibleStateEnum PVal ) {
    HRESULT _hr = put_HiddenEx(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2016)
inline enum ksVisibleStateEnum IBody7::GetHiddenEx ( ) {
    enum ksVisibleStateEnum _result;
    HRESULT _hr = get_HiddenEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2017)
inline void IBody7::PutEditable ( enum ksEditableStateEnum PVal ) {
    HRESULT _hr = put_Editable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2018)
inline enum ksEditableStateEnum IBody7::GetEditable ( ) {
    enum ksEditableStateEnum _result;
    HRESULT _hr = get_Editable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2019)
inline IUnknownPtr IBody7::GetUserParameters ( _bstr_t Val ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_UserParameters(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2020)
inline long IBody7::GetBodyId ( ) {
    long _result = 0;
    HRESULT _hr = get_BodyId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2021)
inline void IBody7::PutCreateSpcObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateSpcObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2022)
inline VARIANT_BOOL IBody7::GetCreateSpcObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateSpcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2023)
inline long IBody7::GetBeginBodyId ( ) {
    long _result = 0;
    HRESULT _hr = get_BeginBodyId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2024)
inline long IBody7::GetFinalBodyId ( ) {
    long _result = 0;
    HRESULT _hr = get_FinalBodyId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2025)
inline long IBody7::GetOwnerBodyId ( ) {
    long _result = 0;
    HRESULT _hr = get_OwnerBodyId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUserFolder wrapper method implementations
//

#pragma implementation_key(2026)
inline IModelObjectPtr IUserFolder::Add ( ksObj3dTypeEnum Type ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(2027)
inline _variant_t IUserFolder::GetObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2028)
inline VARIANT_BOOL IUserFolder::SetObjects ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetObjects(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUserFolders wrapper method implementations
//

#pragma implementation_key(2029)
inline IUserFolderPtr IUserFolders::Add ( ) {
    struct IUserFolder * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserFolderPtr(_result, false);
}

//
// interface IZone wrapper method implementations
//

#pragma implementation_key(2030)
inline enum ksZoneTypeEnum IZone::GetZoneType ( ) {
    enum ksZoneTypeEnum _result;
    HRESULT _hr = get_ZoneType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2031)
inline void IZone::PutZoneType ( enum ksZoneTypeEnum PVal ) {
    HRESULT _hr = put_ZoneType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2032)
inline IKompasAPIObjectPtr IZone::GetParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(2033)
inline VARIANT_BOOL IZone::GetGabarit ( double * X1, double * Y1, double * Z1, double * X2, double * Y2, double * Z2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGabarit(X1, Y1, Z1, X2, Y2, Z2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2034)
inline _variant_t IZone::GetSelectObjects ( enum ksRegionTypeEnum SelectType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SelectObjects(SelectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2035)
inline _variant_t IZone::GetSelectParts ( enum ksRegionTypeEnum SelectType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SelectParts(SelectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IZoneDivision wrapper method implementations
//

#pragma implementation_key(2036)
inline enum ksZoneDivisionTypeEnum IZoneDivision::GetZoneDivisionType ( ) {
    enum ksZoneDivisionTypeEnum _result;
    HRESULT _hr = get_ZoneDivisionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2037)
inline void IZoneDivision::PutZoneDivisionType ( enum ksZoneDivisionTypeEnum PVal ) {
    HRESULT _hr = put_ZoneDivisionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2038)
inline IZonePtr IZoneDivision::GetZone ( ) {
    struct IZone * _result = 0;
    HRESULT _hr = get_Zone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZonePtr(_result, false);
}

#pragma implementation_key(2039)
inline void IZoneDivision::PutZone ( struct IZone * Result ) {
    HRESULT _hr = put_Zone(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2040)
inline IKompasAPIObjectPtr IZoneDivision::GetParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

//
// interface IZonesManager wrapper method implementations
//

#pragma implementation_key(2041)
inline long IZonesManager::GetZonesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ZonesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2042)
inline IZonePtr IZonesManager::GetZone ( const _variant_t & Index ) {
    struct IZone * _result = 0;
    HRESULT _hr = get_Zone(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZonePtr(_result, false);
}

#pragma implementation_key(2043)
inline IZonePtr IZonesManager::AddZone ( enum ksZoneTypeEnum ZoneType ) {
    struct IZone * _result = 0;
    HRESULT _hr = raw_AddZone(ZoneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZonePtr(_result, false);
}

#pragma implementation_key(2044)
inline long IZonesManager::GetZonesDivisionCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ZonesDivisionCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2045)
inline IZoneDivisionPtr IZonesManager::GetZoneDivision ( const _variant_t & Index ) {
    struct IZoneDivision * _result = 0;
    HRESULT _hr = get_ZoneDivision(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZoneDivisionPtr(_result, false);
}

#pragma implementation_key(2046)
inline IZoneDivisionPtr IZonesManager::AddZoneDivision ( enum ksZoneDivisionTypeEnum ZoneType ) {
    struct IZoneDivision * _result = 0;
    HRESULT _hr = raw_AddZoneDivision(ZoneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZoneDivisionPtr(_result, false);
}

#pragma implementation_key(2047)
inline IZonePtr IZonesManager::GetCurrentZone ( ) {
    struct IZone * _result = 0;
    HRESULT _hr = get_CurrentZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZonePtr(_result, false);
}

#pragma implementation_key(2048)
inline void IZonesManager::PutCurrentZone ( struct IZone * Result ) {
    HRESULT _hr = put_CurrentZone(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2049)
inline VARIANT_BOOL IZonesManager::GetZonesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZonesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2050)
inline void IZonesManager::PutZonesVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ZonesVisible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2051)
inline VARIANT_BOOL IZonesManager::GetCreateZonesInGlobalCS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateZonesInGlobalCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2052)
inline void IZonesManager::PutCreateZonesInGlobalCS ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateZonesInGlobalCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2053)
inline IFeature7Ptr IZonesManager::GetZonesTree ( ) {
    struct IFeature7 * _result = 0;
    HRESULT _hr = get_ZonesTree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFeature7Ptr(_result, false);
}

//
// interface ISelectionManager wrapper method implementations
//

#pragma implementation_key(2054)
inline VARIANT_BOOL ISelectionManager::Select ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Select(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2055)
inline VARIANT_BOOL ISelectionManager::Unselect ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Unselect(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2056)
inline VARIANT_BOOL ISelectionManager::UnselectAll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UnselectAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2057)
inline VARIANT_BOOL ISelectionManager::IsSelected ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSelected(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2058)
inline _variant_t ISelectionManager::GetSelectedObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SelectedObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IChooseManager wrapper method implementations
//

#pragma implementation_key(2059)
inline VARIANT_BOOL IChooseManager::Choose ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Choose(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2060)
inline VARIANT_BOOL IChooseManager::Unchoose ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Unchoose(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2061)
inline VARIANT_BOOL IChooseManager::UnchooseAll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UnchooseAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2062)
inline VARIANT_BOOL IChooseManager::IsChoosen ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsChoosen(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2063)
inline _variant_t IChooseManager::GetChoosenObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChoosenObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2064)
inline enum ksChooseManagerTypeEnum IChooseManager::GetCurrentManagerType ( ) {
    enum ksChooseManagerTypeEnum _result;
    HRESULT _hr = get_CurrentManagerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2065)
inline void IChooseManager::PutCurrentManagerType ( enum ksChooseManagerTypeEnum PVal ) {
    HRESULT _hr = put_CurrentManagerType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2066)
inline enum ksChooseManagerTypeEnum IChooseManager::GetManagerIndex ( struct IKompasAPIObject * Object ) {
    enum ksChooseManagerTypeEnum _result;
    HRESULT _hr = raw_GetManagerIndex(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IColumnInfo wrapper method implementations
//

#pragma implementation_key(2067)
inline void IColumnInfo::PutCaption ( _bstr_t PVal ) {
    HRESULT _hr = put_Caption(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2068)
inline _bstr_t IColumnInfo::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2069)
inline void IColumnInfo::PutColType ( enum ksValueTypeEnum PVal ) {
    HRESULT _hr = put_ColType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2070)
inline enum ksValueTypeEnum IColumnInfo::GetColType ( ) {
    enum ksValueTypeEnum _result;
    HRESULT _hr = get_ColType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2071)
inline void IColumnInfo::PutKey ( long PVal ) {
    HRESULT _hr = put_Key(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2072)
inline long IColumnInfo::GetKey ( ) {
    long _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2073)
inline void IColumnInfo::PutDefValue ( const _variant_t & PVal ) {
    HRESULT _hr = put_DefValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2074)
inline _variant_t IColumnInfo::GetDefValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2075)
inline void IColumnInfo::PutListValue ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ListValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2076)
inline VARIANT_BOOL IColumnInfo::GetListValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ListValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2077)
inline void IColumnInfo::PutSortListValue ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SortListValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2078)
inline VARIANT_BOOL IColumnInfo::GetSortListValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SortListValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2079)
inline void IColumnInfo::PutRange ( const _variant_t & PVal ) {
    HRESULT _hr = put_Range(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2080)
inline _variant_t IColumnInfo::GetRange ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2081)
inline IColumnInfoPtr IColumnInfo::GetRecordColumnInfo ( const _variant_t & Index ) {
    struct IColumnInfo * _result = 0;
    HRESULT _hr = get_RecordColumnInfo(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColumnInfoPtr(_result, false);
}

#pragma implementation_key(2082)
inline IColumnInfoPtr IColumnInfo::AddRecordColumn ( long Index, enum ksValueTypeEnum Type, _bstr_t Name ) {
    struct IColumnInfo * _result = 0;
    HRESULT _hr = raw_AddRecordColumn(Index, Type, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColumnInfoPtr(_result, false);
}

#pragma implementation_key(2083)
inline VARIANT_BOOL IColumnInfo::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2084)
inline long IColumnInfo::GetRecordColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RecordColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAttributeType wrapper method implementations
//

#pragma implementation_key(2085)
inline void IAttributeType::PutTypeName ( _bstr_t PVal ) {
    HRESULT _hr = put_TypeName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2086)
inline _bstr_t IAttributeType::GetTypeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2087)
inline void IAttributeType::PutAttrType ( enum ksAttributeTypeEnum PVal ) {
    HRESULT _hr = put_AttrType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2088)
inline enum ksAttributeTypeEnum IAttributeType::GetAttrType ( ) {
    enum ksAttributeTypeEnum _result;
    HRESULT _hr = get_AttrType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2089)
inline VARIANT_BOOL IAttributeType::GetKeysInfo ( long * Key1, long * Key2, long * Key3, long * Key4 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetKeysInfo(Key1, Key2, Key3, Key4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2090)
inline VARIANT_BOOL IAttributeType::SetKeysInfo ( long Key1, long Key2, long Key3, long Key4 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetKeysInfo(Key1, Key2, Key3, Key4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2091)
inline double IAttributeType::GetUniqueNumb ( ) {
    double _result = 0;
    HRESULT _hr = get_UniqueNumb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2092)
inline VARIANT_BOOL IAttributeType::SetPassword ( _bstr_t OldPassword, _bstr_t NewPassword ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPassword(OldPassword, NewPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2093)
inline IColumnInfoPtr IAttributeType::GetColumnInfo ( const _variant_t & Index ) {
    struct IColumnInfo * _result = 0;
    HRESULT _hr = get_ColumnInfo(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColumnInfoPtr(_result, false);
}

#pragma implementation_key(2094)
inline IColumnInfoPtr IAttributeType::AddColumn ( long Index, enum ksValueTypeEnum Type, _bstr_t Name ) {
    struct IColumnInfo * _result = 0;
    HRESULT _hr = raw_AddColumn(Index, Type, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColumnInfoPtr(_result, false);
}

#pragma implementation_key(2095)
inline VARIANT_BOOL IAttributeType::Update ( _bstr_t Password ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2096)
inline VARIANT_BOOL IAttributeType::Delete ( _bstr_t Password ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2097)
inline VARIANT_BOOL IAttributeType::ViewEdit ( OLE_HANDLE Parent, _bstr_t Password, VARIANT_BOOL ReadOnly ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ViewEdit(Parent, Password, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2098)
inline void IAttributeType::PutRowsCount ( long Count ) {
    HRESULT _hr = put_RowsCount(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2099)
inline long IAttributeType::GetRowsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2100)
inline _bstr_t IAttributeType::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2101)
inline long IAttributeType::GetColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAttribute wrapper method implementations
//

#pragma implementation_key(2102)
inline void IAttribute::PutObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_Objects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2103)
inline _variant_t IAttribute::GetObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2104)
inline _variant_t IAttribute::GetValue ( long RowNumb, long ColumnNumb ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(RowNumb, ColumnNumb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2105)
inline VARIANT_BOOL IAttribute::SetValue ( _bstr_t Password, long RowNumb, long ColumnNumb, const _variant_t & Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetValue(Password, RowNumb, ColumnNumb, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2106)
inline _variant_t IAttribute::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2107)
inline VARIANT_BOOL IAttribute::SetValues ( _bstr_t Password, const _variant_t & Values ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetValues(Password, Values, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2108)
inline _variant_t IAttribute::GetFlagVisible ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FlagVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2109)
inline VARIANT_BOOL IAttribute::SetFlagVisible ( _bstr_t Password, const _variant_t & Values ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetFlagVisible(Password, Values, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2110)
inline _variant_t IAttribute::GetColumnKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColumnKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2111)
inline VARIANT_BOOL IAttribute::SetColumnKey ( _bstr_t Password, const _variant_t & Keys ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetColumnKey(Password, Keys, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2112)
inline VARIANT_BOOL IAttribute::SetPassword ( _bstr_t OldPassword, _bstr_t NewPassword ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPassword(OldPassword, NewPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2113)
inline VARIANT_BOOL IAttribute::AddRow ( _bstr_t Password, long RowNumb ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddRow(Password, RowNumb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2114)
inline VARIANT_BOOL IAttribute::DeleteRow ( _bstr_t Password, long RowNumb ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteRow(Password, RowNumb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2115)
inline VARIANT_BOOL IAttribute::GetKeysInfo ( long * Key1, long * Key2, long * Key3, long * Key4, double * Numb ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetKeysInfo(Key1, Key2, Key3, Key4, Numb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2116)
inline VARIANT_BOOL IAttribute::SetKeysInfo ( _bstr_t Password, long Key1, long Key2, long Key3, long Key4 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetKeysInfo(Password, Key1, Key2, Key3, Key4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2117)
inline IAttributeTypePtr IAttribute::GetAttributeType ( ) {
    struct IAttributeType * _result = 0;
    HRESULT _hr = get_AttributeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttributeTypePtr(_result, false);
}

#pragma implementation_key(2118)
inline long IAttribute::GetRowsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2119)
inline long IAttribute::GetColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2120)
inline VARIANT_BOOL IAttribute::Delete ( _bstr_t Password, const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(Password, Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2121)
inline VARIANT_BOOL IAttribute::ViewEdit ( OLE_HANDLE Parent, _bstr_t Password, VARIANT_BOOL ReadOnly ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ViewEdit(Parent, Password, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2122)
inline _variant_t IAttribute::GetRecordFlagVisible ( long ColumnNumb ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RecordFlagVisible(ColumnNumb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2123)
inline VARIANT_BOOL IAttribute::SetRecordFlagVisible ( _bstr_t Password, long ColumnNumb, const _variant_t & Values ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetRecordFlagVisible(Password, ColumnNumb, Values, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITechnicalDemand3D wrapper method implementations
//

#pragma implementation_key(2124)
inline ITextPtr ITechnicalDemand3D::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(2125)
inline VARIANT_BOOL ITechnicalDemand3D::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2126)
inline VARIANT_BOOL ITechnicalDemand3D::GetIsCreated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2127)
inline VARIANT_BOOL ITechnicalDemand3D::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2128)
inline void ITechnicalDemand3D::PutHidden ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Hidden(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2129)
inline VARIANT_BOOL ITechnicalDemand3D::GetHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2130)
inline void ITechnicalDemand3D::PutEditable ( enum ksEditableStateEnum PVal ) {
    HRESULT _hr = put_Editable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2131)
inline enum ksEditableStateEnum ITechnicalDemand3D::GetEditable ( ) {
    enum ksEditableStateEnum _result;
    HRESULT _hr = get_Editable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2132)
inline enum ksTechnicalDemand3DPlacementEnum ITechnicalDemand3D::GetPlacement ( ) {
    enum ksTechnicalDemand3DPlacementEnum _result;
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2133)
inline void ITechnicalDemand3D::PutPlacement ( enum ksTechnicalDemand3DPlacementEnum Result ) {
    HRESULT _hr = put_Placement(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2134)
inline VARIANT_BOOL ITechnicalDemand3D::GetGabarit ( long * Left, long * Top, long * Right, long * Bottom ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGabarit(Left, Top, Right, Bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IParametriticConstraint wrapper method implementations
//

#pragma implementation_key(2135)
inline void IParametriticConstraint::PutConstraintType ( enum ksConstraintTypeEnum PVal ) {
    HRESULT _hr = put_ConstraintType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2136)
inline enum ksConstraintTypeEnum IParametriticConstraint::GetConstraintType ( ) {
    enum ksConstraintTypeEnum _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2137)
inline void IParametriticConstraint::PutIndex ( long PVal ) {
    HRESULT _hr = put_Index(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2138)
inline long IParametriticConstraint::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2139)
inline void IParametriticConstraint::PutPartner ( const _variant_t & PVal ) {
    HRESULT _hr = put_Partner(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2140)
inline _variant_t IParametriticConstraint::GetPartner ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Partner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2141)
inline void IParametriticConstraint::PutPartnerIndex ( long PVal ) {
    HRESULT _hr = put_PartnerIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2142)
inline long IParametriticConstraint::GetPartnerIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_PartnerIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2143)
inline void IParametriticConstraint::PutValue ( double PVal ) {
    HRESULT _hr = put_Value(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2144)
inline double IParametriticConstraint::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2145)
inline void IParametriticConstraint::PutExpression ( _bstr_t PVal ) {
    HRESULT _hr = put_Expression(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2146)
inline _bstr_t IParametriticConstraint::GetExpression ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Expression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2147)
inline void IParametriticConstraint::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2148)
inline _bstr_t IParametriticConstraint::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2149)
inline void IParametriticConstraint::PutVariable ( _bstr_t PVal ) {
    HRESULT _hr = put_Variable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2150)
inline _bstr_t IParametriticConstraint::GetVariable ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Variable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2151)
inline void IParametriticConstraint::PutDegrees ( long PVal ) {
    HRESULT _hr = put_Degrees(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2152)
inline long IParametriticConstraint::GetDegrees ( ) {
    long _result = 0;
    HRESULT _hr = get_Degrees(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2153)
inline void IParametriticConstraint::PutMinutes ( long PVal ) {
    HRESULT _hr = put_Minutes(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2154)
inline long IParametriticConstraint::GetMinutes ( ) {
    long _result = 0;
    HRESULT _hr = get_Minutes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2155)
inline void IParametriticConstraint::PutSeconds ( double PVal ) {
    HRESULT _hr = put_Seconds(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2156)
inline double IParametriticConstraint::GetSeconds ( ) {
    double _result = 0;
    HRESULT _hr = get_Seconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2157)
inline VARIANT_BOOL IParametriticConstraint::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2158)
inline VARIANT_BOOL IParametriticConstraint::Create ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Create(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2159)
inline VARIANT_BOOL IParametriticConstraint::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2160)
inline IDrawingObjectPtr IParametriticConstraint::GetAxis ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(2161)
inline void IParametriticConstraint::PutAxis ( struct IDrawingObject * PVal ) {
    HRESULT _hr = put_Axis(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2162)
inline void IParametriticConstraint::PutBisectorVariant ( enum ksBisectorVariant PVal ) {
    HRESULT _hr = put_BisectorVariant(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2163)
inline enum ksBisectorVariant IParametriticConstraint::GetBisectorVariant ( ) {
    enum ksBisectorVariant _result;
    HRESULT _hr = get_BisectorVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2164)
inline void IParametriticConstraint::PutSegmentIndex ( long PVal ) {
    HRESULT _hr = put_SegmentIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2165)
inline long IParametriticConstraint::GetSegmentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_SegmentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2166)
inline void IParametriticConstraint::PutPartnerSegmentIndex ( long PVal ) {
    HRESULT _hr = put_PartnerSegmentIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2167)
inline long IParametriticConstraint::GetPartnerSegmentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_PartnerSegmentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2168)
inline void IParametriticConstraint::PutAxisSegmentIndex ( long PVal ) {
    HRESULT _hr = put_AxisSegmentIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2169)
inline long IParametriticConstraint::GetAxisSegmentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_AxisSegmentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDrawingObject1 wrapper method implementations
//

#pragma implementation_key(2170)
inline _variant_t IDrawingObject1::GetConstraints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2171)
inline IParametriticConstraintPtr IDrawingObject1::NewConstraint ( ) {
    struct IParametriticConstraint * _result = 0;
    HRESULT _hr = raw_NewConstraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParametriticConstraintPtr(_result, false);
}

#pragma implementation_key(2172)
inline VARIANT_BOOL IDrawingObject1::Associate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Associate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2173)
inline VARIANT_BOOL IDrawingObject1::DeleteConstraints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2174)
inline VARIANT_BOOL IDrawingObject1::GetTransparentBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2175)
inline void IDrawingObject1::PutTransparentBackground ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_TransparentBackground(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2176)
inline VARIANT_BOOL IDrawingObject1::GetAutoTransparentBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoTransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2177)
inline void IDrawingObject1::PutAutoTransparentBackground ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoTransparentBackground(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2178)
inline VARIANT_BOOL IDrawingObject1::GetIsGeometryObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGeometryObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2179)
inline VARIANT_BOOL IDrawingObject1::GetIsAnnotativeObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAnnotativeObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2180)
inline VARIANT_BOOL IDrawingObject1::GetIsCurve ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCurve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2181)
inline _bstr_t IDrawingObject1::GetHyperLinkParam ( enum ksHyperLinkTypeEnum * Type, struct IDrawingObject * * LinkObject, long * Level ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetHyperLinkParam(Type, LinkObject, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2182)
inline VARIANT_BOOL IDrawingObject1::DeleteHyperLink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteHyperLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2183)
inline ICurve2DPtr IDrawingObject1::GetCurve2D ( ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = raw_GetCurve2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

#pragma implementation_key(2184)
inline __int64 IDrawingObject1::GetId ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2185)
inline VARIANT_BOOL IDrawingObject1::GetIsInAssociationView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInAssociationView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2186)
inline VARIANT_BOOL IDrawingObject1::GetIsVisibleInAssociationView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisibleInAssociationView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRasterConvertParameters wrapper method implementations
//

#pragma implementation_key(2187)
inline void IRasterConvertParameters::PutRasterFormat ( enum ksRasterFormatEnum PVal ) {
    HRESULT _hr = put_RasterFormat(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2188)
inline enum ksRasterFormatEnum IRasterConvertParameters::GetRasterFormat ( ) {
    enum ksRasterFormatEnum _result;
    HRESULT _hr = get_RasterFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2189)
inline void IRasterConvertParameters::PutColorBPP ( enum ksColorBPPEnum PVal ) {
    HRESULT _hr = put_ColorBPP(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2190)
inline enum ksColorBPPEnum IRasterConvertParameters::GetColorBPP ( ) {
    enum ksColorBPPEnum _result;
    HRESULT _hr = get_ColorBPP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2191)
inline void IRasterConvertParameters::PutGreyScale ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_GreyScale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2192)
inline VARIANT_BOOL IRasterConvertParameters::GetGreyScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GreyScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2193)
inline void IRasterConvertParameters::PutResolution ( long Result ) {
    HRESULT _hr = put_Resolution(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2194)
inline long IRasterConvertParameters::GetResolution ( ) {
    long _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2195)
inline void IRasterConvertParameters::PutScale ( double Result ) {
    HRESULT _hr = put_Scale(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2196)
inline double IRasterConvertParameters::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2197)
inline void IRasterConvertParameters::PutColorType ( enum ksObjectColorTypeEnum PVal ) {
    HRESULT _hr = put_ColorType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2198)
inline enum ksObjectColorTypeEnum IRasterConvertParameters::GetColorType ( ) {
    enum ksObjectColorTypeEnum _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2199)
inline void IRasterConvertParameters::PutOnlyThinLine ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_OnlyThinLine(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2200)
inline VARIANT_BOOL IRasterConvertParameters::GetOnlyThinLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnlyThinLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2201)
inline void IRasterConvertParameters::PutSheetsRange ( enum ksSheetsRangeEnum PVal ) {
    HRESULT _hr = put_SheetsRange(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2202)
inline enum ksSheetsRangeEnum IRasterConvertParameters::GetSheetsRange ( ) {
    enum ksSheetsRangeEnum _result;
    HRESULT _hr = get_SheetsRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2203)
inline void IRasterConvertParameters::PutSheets ( const _variant_t & PVal ) {
    HRESULT _hr = put_Sheets(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2204)
inline _variant_t IRasterConvertParameters::GetSheets ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2205)
inline void IRasterConvertParameters::PutSaveWorkArea ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveWorkArea(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2206)
inline VARIANT_BOOL IRasterConvertParameters::GetSaveWorkArea ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveWorkArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2207)
inline void IRasterConvertParameters::PutMultiPageOutput ( enum ksMultiPageOutputEnum PVal ) {
    HRESULT _hr = put_MultiPageOutput(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2208)
inline enum ksMultiPageOutputEnum IRasterConvertParameters::GetMultiPageOutput ( ) {
    enum ksMultiPageOutputEnum _result;
    HRESULT _hr = get_MultiPageOutput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2209)
inline void IRasterConvertParameters::PutUncompressed ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Uncompressed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2210)
inline VARIANT_BOOL IRasterConvertParameters::GetUncompressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Uncompressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2211)
inline void IRasterConvertParameters::PutReturnResultAsArrayBytes ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReturnResultAsArrayBytes(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2212)
inline VARIANT_BOOL IRasterConvertParameters::GetReturnResultAsArrayBytes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReturnResultAsArrayBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2213)
inline void IRasterConvertParameters::PutResultArrayBytes ( const _variant_t & PVal ) {
    HRESULT _hr = put_ResultArrayBytes(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2214)
inline _variant_t IRasterConvertParameters::GetResultArrayBytes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResultArrayBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2215)
inline VARIANT_BOOL IRasterConvertParameters::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IKompasDocument1 wrapper method implementations
//

#pragma implementation_key(2216)
inline VARIANT_BOOL IKompasDocument1::Delete ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2217)
inline _variant_t IKompasDocument1::GetAttributes ( long Key1, long Key2, long Key3, long Key4, double Numb, const _variant_t & Objects ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Attributes(Key1, Key2, Key3, Key4, Numb, Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2218)
inline _variant_t IKompasDocument1::GetObjectsByAttr ( long Key1, long Key2, long Key3, long Key4, double Numb, const _variant_t & ObjectType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectsByAttr(Key1, Key2, Key3, Key4, Numb, ObjectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2219)
inline IAttributePtr IKompasDocument1::CreateAttr ( double AttrID, _bstr_t Libname, const _variant_t & Objects ) {
    struct IAttribute * _result = 0;
    HRESULT _hr = raw_CreateAttr(AttrID, Libname, Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttributePtr(_result, false);
}

#pragma implementation_key(2220)
inline VARIANT_BOOL IKompasDocument1::ViewEditAttr ( OLE_HANDLE HWnd, const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ViewEditAttr(HWnd, Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2221)
inline IKompasAPIObjectPtr IKompasDocument1::GetInterface ( enum KompasAPIObjectTypeEnum Type ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = raw_GetInterface(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(2222)
inline _variant_t IKompasDocument1::GetExternalFilesNames ( VARIANT_BOOL allFiles ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExternalFilesNames(allFiles, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2223)
inline VARIANT_BOOL IKompasDocument1::SaveAsEx ( _bstr_t PathName, long saveMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveAsEx(PathName, saveMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2224)
inline double IKompasDocument1::GetCreationDate ( ) {
    double _result = 0;
    HRESULT _hr = get_CreationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2225)
inline double IKompasDocument1::GetLastChangeDate ( ) {
    double _result = 0;
    HRESULT _hr = get_LastChangeDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2226)
inline VARIANT_BOOL IKompasDocument1::GetExternalFilesNamesEx ( VARIANT_BOOL allFiles, VARIANT * Files, VARIANT * FilesTypes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetExternalFilesNamesEx(allFiles, Files, FilesTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2227)
inline _bstr_t IKompasDocument1::GetOrganization ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Organization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2228)
inline void IKompasDocument1::PutOrganization ( _bstr_t PVal ) {
    HRESULT _hr = put_Organization(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2229)
inline VARIANT_BOOL IKompasDocument1::ReportPropertiesMultieditMode ( VARIANT_BOOL On, VARIANT_BOOL UpdateProps ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReportPropertiesMultieditMode(On, UpdateProps, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2230)
inline _bstr_t IKompasDocument1::GetMetadata ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Metadata(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2231)
inline void IKompasDocument1::PutMetadata ( _bstr_t PVal ) {
    HRESULT _hr = put_Metadata(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2232)
inline VARIANT_BOOL IKompasDocument1::WriteMetadataToFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteMetadataToFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2233)
inline VARIANT_BOOL IKompasDocument1::ApplyMetadataFromFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ApplyMetadataFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2234)
inline VARIANT_BOOL IKompasDocument1::ActivateToolbarSet ( _bstr_t TolbrSetId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ActivateToolbarSet(TolbrSetId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2235)
inline VARIANT_BOOL IKompasDocument1::RedrawDocument ( enum ksRedrawDocumentModeEnum Mode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RedrawDocument(Mode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2236)
inline _bstr_t IKompasDocument1::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2237)
inline void IKompasDocument1::PutAuthor ( _bstr_t PVal ) {
    HRESULT _hr = put_Author(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2238)
inline void IKompasDocument1::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2239)
inline _bstr_t IKompasDocument1::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2240)
inline void IKompasDocument1::PutDocumentTypeId ( _bstr_t PVal ) {
    HRESULT _hr = put_DocumentTypeId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2241)
inline _bstr_t IKompasDocument1::GetDocumentTypeId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentTypeId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2242)
inline long IKompasDocument1::GetOpenVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OpenVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2243)
inline VARIANT_BOOL IKompasDocument1::ReplaceExternalFilesNames ( VARIANT_BOOL allFiles, _bstr_t OldFileName, _bstr_t NewFileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReplaceExternalFilesNames(allFiles, OldFileName, NewFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2244)
inline VARIANT_BOOL IKompasDocument1::SetChanged ( VARIANT_BOOL Changed ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetChanged(Changed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2245)
inline _bstr_t IKompasDocument1::GetObjectId ( struct IKompasAPIObject * Object, struct IKompasAPIObject * Parent ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetObjectId(Object, Parent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2246)
inline IKompasAPIObjectPtr IKompasDocument1::FindObjectById ( _bstr_t Id, struct IKompasAPIObject * Parent ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = raw_FindObjectById(Id, Parent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(2247)
inline VARIANT_BOOL IKompasDocument1::SaveAsToRasterFormat ( _bstr_t FileName, struct IRasterConvertParameters * Param ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveAsToRasterFormat(FileName, Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBaseLeader wrapper method implementations
//

#pragma implementation_key(2248)
inline enum ksArrowEnum IBaseLeader::GetArrowType ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2249)
inline void IBaseLeader::PutArrowType ( enum ksArrowEnum Result ) {
    HRESULT _hr = put_ArrowType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILeaders wrapper method implementations
//

#pragma implementation_key(2250)
inline IBaseLeaderPtr ILeaders::GetLeader ( const _variant_t & Index ) {
    struct IBaseLeader * _result = 0;
    HRESULT _hr = get_Leader(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseLeaderPtr(_result, false);
}

#pragma implementation_key(2251)
inline IBaseLeaderPtr ILeaders::Add ( enum DrawingObjectTypeEnum DimType ) {
    struct IBaseLeader * _result = 0;
    HRESULT _hr = raw_Add(DimType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseLeaderPtr(_result, false);
}

//
// interface IFindObjectParameters wrapper method implementations
//

#pragma implementation_key(2252)
inline void IFindObjectParameters::PutFindObjectsType ( enum ksFindObjectsTypeEnum PVal ) {
    HRESULT _hr = put_FindObjectsType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2253)
inline enum ksFindObjectsTypeEnum IFindObjectParameters::GetFindObjectsType ( ) {
    enum ksFindObjectsTypeEnum _result;
    HRESULT _hr = get_FindObjectsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2254)
inline void IFindObjectParameters::PutDrawingObjectType ( enum DrawingObjectTypeEnum Type ) {
    HRESULT _hr = put_DrawingObjectType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2255)
inline enum DrawingObjectTypeEnum IFindObjectParameters::GetDrawingObjectType ( ) {
    enum DrawingObjectTypeEnum _result;
    HRESULT _hr = get_DrawingObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2256)
inline void IFindObjectParameters::PutFindInBackgroundViewsAndLayers ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FindInBackgroundViewsAndLayers(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2257)
inline VARIANT_BOOL IFindObjectParameters::GetFindInBackgroundViewsAndLayers ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FindInBackgroundViewsAndLayers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2258)
inline void IFindObjectParameters::PutGeometryOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_GeometryOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2259)
inline VARIANT_BOOL IFindObjectParameters::GetGeometryOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GeometryOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2260)
inline void IFindObjectParameters::PutDisabledObjects ( const _variant_t & PVal ) {
    HRESULT _hr = put_DisabledObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2261)
inline _variant_t IFindObjectParameters::GetDisabledObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DisabledObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2262)
inline void IFindObjectParameters::PutDisabledViews ( const _variant_t & PVal ) {
    HRESULT _hr = put_DisabledViews(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2263)
inline _variant_t IFindObjectParameters::GetDisabledViews ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DisabledViews(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2264)
inline VARIANT_BOOL IFindObjectParameters::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMacroObject wrapper method implementations
//

#pragma implementation_key(2265)
inline void IMacroObject::PutLibraryFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_LibraryFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2266)
inline _bstr_t IMacroObject::GetLibraryFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2267)
inline void IMacroObject::PutLibraryName ( _bstr_t PVal ) {
    HRESULT _hr = put_LibraryName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2268)
inline _bstr_t IMacroObject::GetLibraryName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2269)
inline void IMacroObject::PutCommand ( long PVal ) {
    HRESULT _hr = put_Command(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2270)
inline long IMacroObject::GetCommand ( ) {
    long _result = 0;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2271)
inline void IMacroObject::PutDoubleClickEditable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DoubleClickEditable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2272)
inline VARIANT_BOOL IMacroObject::GetDoubleClickEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DoubleClickEditable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2273)
inline void IMacroObject::PutHotPointsEditable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HotPointsEditable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2274)
inline VARIANT_BOOL IMacroObject::GetHotPointsEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HotPointsEditable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2275)
inline void IMacroObject::PutExternalEditable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ExternalEditable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2276)
inline VARIANT_BOOL IMacroObject::GetExternalEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExternalEditable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2277)
inline void IMacroObject::PutUserParams ( const _variant_t & PVal ) {
    HRESULT _hr = put_UserParams(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2278)
inline _variant_t IMacroObject::GetUserParams ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UserParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2279)
inline VARIANT_BOOL IMacroObject::AddObjects ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddObjects(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2280)
inline VARIANT_BOOL IMacroObject::GetPlacement ( double * X, double * Y, double * Angle, VARIANT_BOOL * MirrorSymmetry ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPlacement(X, Y, Angle, MirrorSymmetry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2281)
inline VARIANT_BOOL IMacroObject::SetPlacement ( double X, double Y, double Angle, VARIANT_BOOL * MirrorSymmetry, VARIANT_BOOL Relative ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPlacement(X, Y, Angle, MirrorSymmetry, Relative, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2282)
inline void IMacroObject::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2283)
inline _bstr_t IMacroObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2284)
inline ILeadersPtr IMacroObject::GetAttachedLeaders ( ) {
    struct ILeaders * _result = 0;
    HRESULT _hr = get_AttachedLeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILeadersPtr(_result, false);
}

#pragma implementation_key(2285)
inline VARIANT_BOOL IMacroObject::DeleteAttachedLeaders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteAttachedLeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2286)
inline VARIANT_BOOL IMacroObject::AddDefaultHotPoint ( double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddDefaultHotPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2287)
inline VARIANT_BOOL IMacroObject::DeleteDefaultHotPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteDefaultHotPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2288)
inline void IMacroObject::PutPropertyObjectEditable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PropertyObjectEditable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2289)
inline VARIANT_BOOL IMacroObject::GetPropertyObjectEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PropertyObjectEditable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2290)
inline void IMacroObject::PutCreateSpcObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateSpcObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2291)
inline VARIANT_BOOL IMacroObject::GetCreateSpcObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateSpcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2292)
inline void IMacroObject::PutBreakObjectsEnabled ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BreakObjectsEnabled(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2293)
inline VARIANT_BOOL IMacroObject::GetBreakObjectsEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BreakObjectsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2294)
inline IDrawingObjectPtr IMacroObject::FindObject ( double X, double Y, double Limit, struct IFindObjectParameters * Param ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = raw_FindObject(X, Y, Limit, Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(2295)
inline _bstr_t IMacroObject::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2296)
inline VARIANT_BOOL IMacroObject::TransformPointToView ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformPointToView(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2297)
inline VARIANT_BOOL IMacroObject::TransformPointFromView ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformPointFromView(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2298)
inline VARIANT_BOOL IMacroObject::TransformAngleToView ( double * Angle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformAngleToView(Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2299)
inline VARIANT_BOOL IMacroObject::TransformAngleFromView ( double * Angle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformAngleFromView(Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDrawingGroup wrapper method implementations
//

#pragma implementation_key(2300)
inline void IDrawingGroup::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2301)
inline _bstr_t IDrawingGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2302)
inline _variant_t IDrawingGroup::GetObjects ( const _variant_t & Type ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2303)
inline VARIANT_BOOL IDrawingGroup::AddObjects ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddObjects(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2304)
inline VARIANT_BOOL IDrawingGroup::DetachObjects ( const _variant_t & Objects, VARIANT_BOOL DeleteTmp ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DetachObjects(Objects, DeleteTmp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2305)
inline VARIANT_BOOL IDrawingGroup::Clear ( VARIANT_BOOL DeleteTmp ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(DeleteTmp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2306)
inline VARIANT_BOOL IDrawingGroup::Store ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Store(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2307)
inline long IDrawingGroup::GetObjectsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ObjectsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2308)
inline VARIANT_BOOL IDrawingGroup::ExistObject ( struct IDrawingObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExistObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2309)
inline VARIANT_BOOL IDrawingGroup::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2310)
inline VARIANT_BOOL IDrawingGroup::AddRegion ( enum ksRegionTypeEnum RegionType, double XMin, double YMin, double XMax, double YMax ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddRegion(RegionType, XMin, YMin, XMax, YMax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2311)
inline VARIANT_BOOL IDrawingGroup::ReadFragment ( _bstr_t FileName, VARIANT_BOOL CurentLayer, double XBase, double YBase, double Scale, double Angle, VARIANT_BOOL ScaleProjLinesSize ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadFragment(FileName, CurentLayer, XBase, YBase, Scale, Angle, ScaleProjLinesSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline VARIANT_BOOL IDrawingGroup::WriteFragment ( _bstr_t FileName, _bstr_t Comment, double XBase, double YBase ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteFragment(FileName, Comment, XBase, YBase, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2313)
inline VARIANT_BOOL IDrawingGroup::WriteToClip ( VARIANT_BOOL AttrCopy, VARIANT_BOOL SpcObjCopy ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteToClip(AttrCopy, SpcObjCopy, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2314)
inline VARIANT_BOOL IDrawingGroup::ReadFromClip ( VARIANT_BOOL AttrCopy, VARIANT_BOOL SpcObjCopy ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadFromClip(AttrCopy, SpcObjCopy, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2315)
inline VARIANT_BOOL IDrawingGroup::Draw ( OLE_HANDLE HWnd ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Draw(HWnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2316)
inline VARIANT_BOOL IDrawingGroup::Open ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2317)
inline VARIANT_BOOL IDrawingGroup::Close ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Close(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2318)
inline VARIANT_BOOL IDrawingGroup::GetCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDrawingGroups wrapper method implementations
//

#pragma implementation_key(2319)
inline IDrawingGroupPtr IDrawingGroups::GetItem ( const _variant_t & Index ) {
    struct IDrawingGroup * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingGroupPtr(_result, false);
}

#pragma implementation_key(2320)
inline IDrawingGroupPtr IDrawingGroups::Add ( VARIANT_BOOL Temp, _bstr_t Name ) {
    struct IDrawingGroup * _result = 0;
    HRESULT _hr = raw_Add(Temp, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingGroupPtr(_result, false);
}

//
// interface ICopyObjectParam wrapper method implementations
//

#pragma implementation_key(2321)
inline void ICopyObjectParam::PutXOld ( double PVal ) {
    HRESULT _hr = put_XOld(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2322)
inline double ICopyObjectParam::GetXOld ( ) {
    double _result = 0;
    HRESULT _hr = get_XOld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2323)
inline void ICopyObjectParam::PutYOld ( double PVal ) {
    HRESULT _hr = put_YOld(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2324)
inline double ICopyObjectParam::GetYOld ( ) {
    double _result = 0;
    HRESULT _hr = get_YOld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2325)
inline void ICopyObjectParam::PutXNew ( double PVal ) {
    HRESULT _hr = put_XNew(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2326)
inline double ICopyObjectParam::GetXNew ( ) {
    double _result = 0;
    HRESULT _hr = get_XNew(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2327)
inline void ICopyObjectParam::PutYNew ( double PVal ) {
    HRESULT _hr = put_YNew(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2328)
inline double ICopyObjectParam::GetYNew ( ) {
    double _result = 0;
    HRESULT _hr = get_YNew(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2329)
inline void ICopyObjectParam::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2330)
inline double ICopyObjectParam::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2331)
inline void ICopyObjectParam::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2332)
inline double ICopyObjectParam::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2333)
inline void ICopyObjectParam::PutAttributeCopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AttributeCopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2334)
inline VARIANT_BOOL ICopyObjectParam::GetAttributeCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AttributeCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2335)
inline void ICopyObjectParam::PutDimensionLineScale ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DimensionLineScale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2336)
inline VARIANT_BOOL ICopyObjectParam::GetDimensionLineScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimensionLineScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2337)
inline void ICopyObjectParam::PutSpecificationObjectCopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SpecificationObjectCopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2338)
inline VARIANT_BOOL ICopyObjectParam::GetSpecificationObjectCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SpecificationObjectCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPhantom2D wrapper method implementations
//

#pragma implementation_key(2339)
inline void IPhantom2D::PutPhantomType ( enum ksPhantomTypeEnum PVal ) {
    HRESULT _hr = put_PhantomType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2340)
inline enum ksPhantomTypeEnum IPhantom2D::GetPhantomType ( ) {
    enum ksPhantomTypeEnum _result;
    HRESULT _hr = get_PhantomType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2341)
inline void IPhantom2D::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2342)
inline double IPhantom2D::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2343)
inline void IPhantom2D::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2344)
inline double IPhantom2D::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2345)
inline void IPhantom2D::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2346)
inline double IPhantom2D::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2347)
inline void IPhantom2D::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2348)
inline double IPhantom2D::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2349)
inline void IPhantom2D::PutPhantomGroup ( struct IDrawingGroup * PVal ) {
    HRESULT _hr = put_PhantomGroup(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2350)
inline IDrawingGroupPtr IPhantom2D::GetPhantomGroup ( ) {
    struct IDrawingGroup * _result = 0;
    HRESULT _hr = get_PhantomGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingGroupPtr(_result, false);
}

#pragma implementation_key(2351)
inline void IPhantom2D::PutHorizontal ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Horizontal(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2352)
inline VARIANT_BOOL IPhantom2D::GetHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Horizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2353)
inline VARIANT_BOOL IPhantom2D::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2354)
inline VARIANT_BOOL IPhantom2D::Show ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2355)
inline VARIANT_BOOL IPhantom2D::Hide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Hide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProcess2D wrapper method implementations
//

#pragma implementation_key(2356)
inline void IProcess2D::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2357)
inline double IProcess2D::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2358)
inline void IProcess2D::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2359)
inline double IProcess2D::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2360)
inline void IProcess2D::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2361)
inline double IProcess2D::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2362)
inline IPhantom2DPtr IProcess2D::GetPhantom2D ( ) {
    struct IPhantom2D * _result = 0;
    HRESULT _hr = get_Phantom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhantom2DPtr(_result, false);
}

//
// interface IKompasDocument2D1 wrapper method implementations
//

#pragma implementation_key(2363)
inline IMacroObjectPtr IKompasDocument2D1::GetEditMacroObject ( ) {
    struct IMacroObject * _result = 0;
    HRESULT _hr = get_EditMacroObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMacroObjectPtr(_result, false);
}

#pragma implementation_key(2364)
inline IDrawingGroupsPtr IKompasDocument2D1::GetDrawingGroups ( ) {
    struct IDrawingGroups * _result = 0;
    HRESULT _hr = get_DrawingGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingGroupsPtr(_result, false);
}

#pragma implementation_key(2365)
inline IDrawingGroupsPtr IKompasDocument2D1::GetNamedGroups ( ) {
    struct IDrawingGroups * _result = 0;
    HRESULT _hr = get_NamedGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingGroupsPtr(_result, false);
}

#pragma implementation_key(2366)
inline IDrawingGroupPtr IKompasDocument2D1::GetCurrentGroup ( ) {
    struct IDrawingGroup * _result = 0;
    HRESULT _hr = get_CurrentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingGroupPtr(_result, false);
}

#pragma implementation_key(2367)
inline ISelectionManagerPtr IKompasDocument2D1::GetSelectionManager ( ) {
    struct ISelectionManager * _result = 0;
    HRESULT _hr = get_SelectionManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISelectionManagerPtr(_result, false);
}

#pragma implementation_key(2368)
inline IChooseManagerPtr IKompasDocument2D1::GetChooseManager ( ) {
    struct IChooseManager * _result = 0;
    HRESULT _hr = get_ChooseManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChooseManagerPtr(_result, false);
}

#pragma implementation_key(2369)
inline _variant_t IKompasDocument2D1::CopyObjects ( const _variant_t & Objects, struct ICopyObjectParam * Params ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyObjects(Objects, Params, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2370)
inline _variant_t IKompasDocument2D1::GetVariables ( VARIANT_BOOL ExternalOnly ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Variables(ExternalOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2371)
inline IVariable7Ptr IKompasDocument2D1::GetVariable ( VARIANT_BOOL External, const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_Variable(External, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(2372)
inline long IKompasDocument2D1::GetVariablesCount ( VARIANT_BOOL External ) {
    long _result = 0;
    HRESULT _hr = get_VariablesCount(External, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2373)
inline VARIANT_BOOL IKompasDocument2D1::UpdateVariables ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UpdateVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2374)
inline IVariableTablePtr IKompasDocument2D1::GetVariableTable ( ) {
    struct IVariableTable * _result = 0;
    HRESULT _hr = get_VariableTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariableTablePtr(_result, false);
}

#pragma implementation_key(2375)
inline VARIANT_BOOL IKompasDocument2D1::IsVariableNameValid ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVariableNameValid(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2376)
inline IVariable7Ptr IKompasDocument2D1::AddVariable ( _bstr_t Name, double Value, _bstr_t Note ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = raw_AddVariable(Name, Value, Note, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(2377)
inline VARIANT_BOOL IKompasDocument2D1::RebuildDocument ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RebuildDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2378)
inline VARIANT_BOOL IKompasDocument2D1::CreateHyperLink ( const _variant_t & Objects, enum ksHyperLinkTypeEnum Type, _bstr_t Text, struct IDrawingObject * LinkObject, long Level ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CreateHyperLink(Objects, Type, Text, LinkObject, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2379)
inline _variant_t IKompasDocument2D1::GetHyperLinkObjects ( enum ksHyperLinkTypeEnum Type, struct IDrawingObject * LinkObject, long Level, _bstr_t Text ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetHyperLinkObjects(Type, LinkObject, Level, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2380)
inline VARIANT_BOOL IKompasDocument2D1::DeleteHyperLinks ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteHyperLinks(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2381)
inline VARIANT_BOOL IKompasDocument2D1::GetEditMacroVisibleRegime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EditMacroVisibleRegime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2382)
inline IDrawingObjectPtr IKompasDocument2D1::GetObjectById ( __int64 Id ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = raw_GetObjectById(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(2383)
inline IProcess2DPtr IKompasDocument2D1::GetLibProcess ( enum ksProcess2DTypeEnum ProcessType ) {
    struct IProcess2D * _result = 0;
    HRESULT _hr = get_LibProcess(ProcessType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcess2DPtr(_result, false);
}

#pragma implementation_key(2384)
inline IDrawingObjectPtr IKompasDocument2D1::FindObject ( double X, double Y, double Limit, struct IFindObjectParameters * Param ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = raw_FindObject(X, Y, Limit, Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(2385)
inline _variant_t IKompasDocument2D1::FindObjects ( double X, double Y, double Limit, struct IFindObjectParameters * Param ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FindObjects(X, Y, Limit, Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2386)
inline _variant_t IKompasDocument2D1::SelectObjects ( enum ksRegionTypeEnum RegionType, double XMin, double YMin, double XMax, double YMax ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SelectObjects(RegionType, XMin, YMin, XMax, YMax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2387)
inline _variant_t IKompasDocument2D1::GetIntervalVariables ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_IntervalVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2388)
inline IVariable7Ptr IKompasDocument2D1::AddIntervalVariable ( _bstr_t Name, double FirstValue, double SecondValue ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = raw_AddIntervalVariable(Name, FirstValue, SecondValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(2389)
inline IVariable7Ptr IKompasDocument2D1::GetIntervalVariable ( const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_IntervalVariable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(2390)
inline _variant_t IKompasDocument2D1::GetUserFuncVariables ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UserFuncVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2391)
inline IVariable7Ptr IKompasDocument2D1::AddUserFuncVariable ( _bstr_t Name, _bstr_t Expression ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = raw_AddUserFuncVariable(Name, Expression, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(2392)
inline IVariable7Ptr IKompasDocument2D1::GetUserFuncVariable ( const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_UserFuncVariable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(2393)
inline VARIANT_BOOL IKompasDocument2D1::ClearUndo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearUndo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2394)
inline void IKompasDocument2D1::PutEnableUndo ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableUndo(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2395)
inline VARIANT_BOOL IKompasDocument2D1::GetEnableUndo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableUndo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2396)
inline void IKompasDocument2D1::PutUndoContainer ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UndoContainer(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2397)
inline VARIANT_BOOL IKompasDocument2D1::GetUndoContainer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UndoContainer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2398)
inline VARIANT_BOOL IKompasDocument2D1::CompleteRebuildDocument ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CompleteRebuildDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILayer3D wrapper method implementations
//

#pragma implementation_key(2399)
inline void ILayer3D::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2400)
inline _bstr_t ILayer3D::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2401)
inline long ILayer3D::GetNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2402)
inline void ILayer3D::PutNumber ( long PVal ) {
    HRESULT _hr = put_Number(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2403)
inline void ILayer3D::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2404)
inline VARIANT_BOOL ILayer3D::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2405)
inline void ILayer3D::PutCurrent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Current(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2406)
inline VARIANT_BOOL ILayer3D::GetCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2407)
inline void ILayer3D::PutColor ( long PVal ) {
    HRESULT _hr = put_Color(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2408)
inline long ILayer3D::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2409)
inline void ILayer3D::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2410)
inline _bstr_t ILayer3D::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2411)
inline void ILayer3D::PutEditable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Editable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2412)
inline VARIANT_BOOL ILayer3D::GetEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Editable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2413)
inline void ILayer3D::PutProjected ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Projected(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2414)
inline VARIANT_BOOL ILayer3D::GetProjected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Projected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2415)
inline VARIANT_BOOL ILayer3D::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2416)
inline VARIANT_BOOL ILayer3D::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILayers3D wrapper method implementations
//

#pragma implementation_key(2417)
inline ILayer3DPtr ILayers3D::GetLayer3D ( const _variant_t & Index ) {
    struct ILayer3D * _result = 0;
    HRESULT _hr = get_Layer3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayer3DPtr(_result, false);
}

#pragma implementation_key(2418)
inline ILayer3DPtr ILayers3D::GetLayer3DByNumber ( long Number ) {
    struct ILayer3D * _result = 0;
    HRESULT _hr = get_Layer3DByNumber(Number, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayer3DPtr(_result, false);
}

#pragma implementation_key(2419)
inline ILayer3DPtr ILayers3D::Add ( ) {
    struct ILayer3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayer3DPtr(_result, false);
}

#pragma implementation_key(2420)
inline VARIANT_BOOL ILayers3D::Attach ( struct ILayer3D * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Attach(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2421)
inline VARIANT_BOOL ILayers3D::Detach ( struct ILayer3D * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Detach(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBaseManipulator wrapper method implementations
//

#pragma implementation_key(2422)
inline enum ksManipulatorTypeEnum IBaseManipulator::GetManipulatorType ( ) {
    enum ksManipulatorTypeEnum _result;
    HRESULT _hr = get_ManipulatorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2423)
inline long IBaseManipulator::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2424)
inline void IBaseManipulator::PutId ( long PVal ) {
    HRESULT _hr = put_Id(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2425)
inline IPlacement3DPtr IBaseManipulator::GetPlacement ( ) {
    struct IPlacement3D * _result = 0;
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlacement3DPtr(_result, false);
}

#pragma implementation_key(2426)
inline VARIANT_BOOL IBaseManipulator::UpdatePlacement ( VARIANT_BOOL Redraw ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UpdatePlacement(Redraw, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2427)
inline void IBaseManipulator::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2428)
inline VARIANT_BOOL IBaseManipulator::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2429)
inline void IBaseManipulator::PutActive ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Active(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2430)
inline VARIANT_BOOL IBaseManipulator::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2431)
inline VARIANT_BOOL IBaseManipulator::Create ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Create(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2432)
inline VARIANT_BOOL IBaseManipulator::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IManipulators wrapper method implementations
//

#pragma implementation_key(2433)
inline IBaseManipulatorPtr IManipulators::GetItem ( const _variant_t & Index ) {
    struct IBaseManipulator * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseManipulatorPtr(_result, false);
}

#pragma implementation_key(2434)
inline IBaseManipulatorPtr IManipulators::GetManipulator ( long Id ) {
    struct IBaseManipulator * _result = 0;
    HRESULT _hr = get_Manipulator(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseManipulatorPtr(_result, false);
}

#pragma implementation_key(2435)
inline IBaseManipulatorPtr IManipulators::Add ( enum ksManipulatorTypeEnum Type ) {
    struct IBaseManipulator * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseManipulatorPtr(_result, false);
}

//
// interface IProcess3D wrapper method implementations
//

#pragma implementation_key(2436)
inline IPlacement3DPtr IProcess3D::GetPlacement ( ) {
    struct IPlacement3D * _result = 0;
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlacement3DPtr(_result, false);
}

#pragma implementation_key(2437)
inline IModelObjectPtr IProcess3D::GetPhantomObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_PhantomObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(2438)
inline void IProcess3D::PutPhantomObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_PhantomObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2439)
inline _variant_t IProcess3D::GetMateConstraintsObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MateConstraintsObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2440)
inline void IProcess3D::PutMateConstraintsObjects ( const _variant_t & PVal ) {
    HRESULT _hr = put_MateConstraintsObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2441)
inline IMateConstraints3DPtr IProcess3D::GetMateConstraints ( ) {
    struct IMateConstraints3D * _result = 0;
    HRESULT _hr = get_MateConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMateConstraints3DPtr(_result, false);
}

#pragma implementation_key(2442)
inline VARIANT_BOOL IProcess3D::RunTakeCreateObjectProcess ( enum ProcessTypeEnum ProcessType, struct IModelObject * TakeObject, VARIANT_BOOL NeedCreateTakeObj, VARIANT_BOOL LostTakeObj ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RunTakeCreateObjectProcess(ProcessType, TakeObject, NeedCreateTakeObj, LostTakeObj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2443)
inline IModelObjectPtr IProcess3D::GetTakeProcessObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_TakeProcessObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(2444)
inline void IProcess3D::PutTakeProcessObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_TakeProcessObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2445)
inline IManipulatorsPtr IProcess3D::GetManipulators ( ) {
    struct IManipulators * _result = 0;
    HRESULT _hr = get_Manipulators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IManipulatorsPtr(_result, false);
}

#pragma implementation_key(2446)
inline void IProcess3D::PutSelectionBandMode ( enum ksSelectionBandMode PVal ) {
    HRESULT _hr = put_SelectionBandMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2447)
inline enum ksSelectionBandMode IProcess3D::GetSelectionBandMode ( ) {
    enum ksSelectionBandMode _result;
    HRESULT _hr = get_SelectionBandMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2448)
inline void IProcess3D::PutObjectsFilter3D ( enum ksProcessObjectsFilter3DEnum Type, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ObjectsFilter3D(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2449)
inline VARIANT_BOOL IProcess3D::GetObjectsFilter3D ( enum ksProcessObjectsFilter3DEnum Type ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectsFilter3D(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2450)
inline VARIANT_BOOL IProcess3D::GetClearProcessUndo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClearProcessUndo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2451)
inline void IProcess3D::PutClearProcessUndo ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClearProcessUndo(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFindObject3DParameters wrapper method implementations
//

#pragma implementation_key(2452)
inline void IFindObject3DParameters::PutModelObjectType ( ksObj3dTypeEnum Type ) {
    HRESULT _hr = put_ModelObjectType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2453)
inline ksObj3dTypeEnum IFindObject3DParameters::GetModelObjectType ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_ModelObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecRough wrapper method implementations
//

#pragma implementation_key(2454)
inline double ISpecRough::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2455)
inline void ISpecRough::PutX ( double Result ) {
    HRESULT _hr = put_X(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2456)
inline double ISpecRough::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2457)
inline void ISpecRough::PutY ( double Result ) {
    HRESULT _hr = put_Y(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2458)
inline void ISpecRough::PutAutoPlacement ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoPlacement(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2459)
inline VARIANT_BOOL ISpecRough::GetAutoPlacement ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoPlacement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2460)
inline enum ksRoughSignEnum ISpecRough::GetSignType ( ) {
    enum ksRoughSignEnum _result;
    HRESULT _hr = get_SignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2461)
inline void ISpecRough::PutSignType ( enum ksRoughSignEnum Result ) {
    HRESULT _hr = put_SignType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2462)
inline _bstr_t ISpecRough::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2463)
inline void ISpecRough::PutText ( _bstr_t PVal ) {
    HRESULT _hr = put_Text(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2464)
inline double ISpecRough::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2465)
inline void ISpecRough::PutDistance ( double PVal ) {
    HRESULT _hr = put_Distance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2466)
inline VARIANT_BOOL ISpecRough::GetAddSign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2467)
inline void ISpecRough::PutAddSign ( VARIANT_BOOL PRes ) {
    HRESULT _hr = put_AddSign(PRes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2468)
inline VARIANT_BOOL ISpecRough::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2469)
inline VARIANT_BOOL ISpecRough::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2470)
inline VARIANT_BOOL ISpecRough::GetIsCreated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2471)
inline VARIANT_BOOL ISpecRough::GetCrossed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Crossed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITechnicalDemand wrapper method implementations
//

#pragma implementation_key(2472)
inline ITextPtr ITechnicalDemand::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(2473)
inline _variant_t ITechnicalDemand::GetBlocksGabarits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BlocksGabarits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2474)
inline void ITechnicalDemand::PutBlocksGabarits ( const _variant_t & PVal ) {
    HRESULT _hr = put_BlocksGabarits(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2475)
inline void ITechnicalDemand::PutAutoPlacement ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoPlacement(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2476)
inline VARIANT_BOOL ITechnicalDemand::GetAutoPlacement ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoPlacement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2477)
inline VARIANT_BOOL ITechnicalDemand::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2478)
inline VARIANT_BOOL ITechnicalDemand::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2479)
inline VARIANT_BOOL ITechnicalDemand::GetIsCreated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2480)
inline _variant_t ITechnicalDemand::GetBlocksStartLineNumbers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BlocksStartLineNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2481)
inline VARIANT_BOOL ITechnicalDemand::Synchronize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Synchronize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDimensionText wrapper method implementations
//

#pragma implementation_key(2482)
inline long IDimensionText::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2483)
inline void IDimensionText::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2484)
inline long IDimensionText::GetSign ( ) {
    long _result = 0;
    HRESULT _hr = get_Sign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2485)
inline void IDimensionText::PutSign ( long Result ) {
    HRESULT _hr = put_Sign(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2486)
inline _bstr_t IDimensionText::GetSignFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2487)
inline void IDimensionText::PutSignFont ( _bstr_t Result ) {
    HRESULT _hr = put_SignFont(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2488)
inline double IDimensionText::GetNominalValue ( ) {
    double _result = 0;
    HRESULT _hr = get_NominalValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2489)
inline void IDimensionText::PutNominalValue ( double Result ) {
    HRESULT _hr = put_NominalValue(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2490)
inline VARIANT_BOOL IDimensionText::GetAutoNominalValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoNominalValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2491)
inline void IDimensionText::PutAutoNominalValue ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoNominalValue(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2492)
inline VARIANT_BOOL IDimensionText::GetToleranceOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2493)
inline void IDimensionText::PutToleranceOn ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ToleranceOn(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2494)
inline VARIANT_BOOL IDimensionText::GetDeviationOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeviationOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2495)
inline void IDimensionText::PutDeviationOn ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_DeviationOn(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2496)
inline enum ksDimensionDeviationEnum IDimensionText::GetDeviationType ( ) {
    enum ksDimensionDeviationEnum _result;
    HRESULT _hr = get_DeviationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2497)
inline void IDimensionText::PutDeviationType ( enum ksDimensionDeviationEnum Result ) {
    HRESULT _hr = put_DeviationType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2498)
inline VARIANT_BOOL IDimensionText::GetRectangle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Rectangle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2499)
inline void IDimensionText::PutRectangle ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Rectangle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2500)
inline VARIANT_BOOL IDimensionText::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2501)
inline void IDimensionText::PutUnderline ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Underline(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2502)
inline enum ksDimensionTextBracketsEnum IDimensionText::GetBrackets ( ) {
    enum ksDimensionTextBracketsEnum _result;
    HRESULT _hr = get_Brackets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2503)
inline void IDimensionText::PutBrackets ( enum ksDimensionTextBracketsEnum Result ) {
    HRESULT _hr = put_Brackets(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2504)
inline enum ksDimensionTextAlignEnum IDimensionText::GetTextAlign ( ) {
    enum ksDimensionTextAlignEnum _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2505)
inline void IDimensionText::PutTextAlign ( enum ksDimensionTextAlignEnum Result ) {
    HRESULT _hr = put_TextAlign(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2506)
inline ITextLinePtr IDimensionText::GetPrefix ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_Prefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(2507)
inline ITextLinePtr IDimensionText::GetNominalText ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_NominalText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(2508)
inline _bstr_t IDimensionText::GetTolerance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2509)
inline void IDimensionText::PutTolerance ( _bstr_t PVal ) {
    HRESULT _hr = put_Tolerance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2510)
inline ITextLinePtr IDimensionText::GetHighDeviation ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_HighDeviation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(2511)
inline ITextLinePtr IDimensionText::GetLowDeviation ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_LowDeviation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(2512)
inline ITextLinePtr IDimensionText::GetUnit ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(2513)
inline ITextLinePtr IDimensionText::GetSuffix ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_Suffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(2514)
inline ITextPtr IDimensionText::GetTextUnder ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUnder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(2515)
inline enum ksDimTextFormatEnum IDimensionText::GetTextFormat ( ) {
    enum ksDimTextFormatEnum _result;
    HRESULT _hr = get_TextFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2516)
inline void IDimensionText::PutTextFormat ( enum ksDimTextFormatEnum PVal ) {
    HRESULT _hr = put_TextFormat(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2517)
inline VARIANT_BOOL IDimensionText::GetHasTolerance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2518)
inline void IDimensionText::PutHasTolerance ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_HasTolerance(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2519)
inline double IDimensionText::GetHighDeviationValue ( ) {
    double _result = 0;
    HRESULT _hr = get_HighDeviationValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2520)
inline double IDimensionText::GetLowDeviationValue ( ) {
    double _result = 0;
    HRESULT _hr = get_LowDeviationValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2521)
inline VARIANT_BOOL IDimensionText::InitDeviations ( double HighDeviationValue, double LowDeviationValue ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitDeviations(HighDeviationValue, LowDeviationValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2522)
inline enum ksAccuracyEnum IDimensionText::GetAccuracy ( ) {
    enum ksAccuracyEnum _result;
    HRESULT _hr = get_Accuracy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2523)
inline void IDimensionText::PutAccuracy ( enum ksAccuracyEnum Result ) {
    HRESULT _hr = put_Accuracy(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2524)
inline long IDimensionText::GetAccuracyDecimalsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_AccuracyDecimalsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAttrTypeMng wrapper method implementations
//

#pragma implementation_key(2525)
inline IAttributeTypePtr IAttrTypeMng::CreateAttrType ( const _variant_t & Libname ) {
    struct IAttributeType * _result = 0;
    HRESULT _hr = raw_CreateAttrType(Libname, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttributeTypePtr(_result, false);
}

#pragma implementation_key(2526)
inline IAttributeTypePtr IAttrTypeMng::GetAttrType ( double AttrID, const _variant_t & Libname ) {
    struct IAttributeType * _result = 0;
    HRESULT _hr = raw_GetAttrType(AttrID, Libname, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttributeTypePtr(_result, false);
}

#pragma implementation_key(2527)
inline IAttributeTypePtr IAttrTypeMng::ChoiceAttrTypes ( OLE_HANDLE HWnd, const _variant_t & Libname ) {
    struct IAttributeType * _result = 0;
    HRESULT _hr = raw_ChoiceAttrTypes(HWnd, Libname, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttributeTypePtr(_result, false);
}

#pragma implementation_key(2528)
inline _variant_t IAttrTypeMng::GetAttrTypes ( const _variant_t & Libname ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAttrTypes(Libname, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IStylesManager wrapper method implementations
//

#pragma implementation_key(2529)
inline IStylesPtr IStylesManager::GetCurvesStyles ( ) {
    struct IStyles * _result = 0;
    HRESULT _hr = get_CurvesStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylesPtr(_result, false);
}

#pragma implementation_key(2530)
inline IStylesPtr IStylesManager::GetTextsStyles ( ) {
    struct IStyles * _result = 0;
    HRESULT _hr = get_TextsStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylesPtr(_result, false);
}

#pragma implementation_key(2531)
inline IStylesPtr IStylesManager::GetHatchsStyles ( ) {
    struct IStyles * _result = 0;
    HRESULT _hr = get_HatchsStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylesPtr(_result, false);
}

//
// interface ICurveStyle wrapper method implementations
//

#pragma implementation_key(2532)
inline void ICurveStyle::PutCurveStyleType ( enum ksCurveStyleTypeEnum PVal ) {
    HRESULT _hr = put_CurveStyleType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2533)
inline enum ksCurveStyleTypeEnum ICurveStyle::GetCurveStyleType ( ) {
    enum ksCurveStyleTypeEnum _result;
    HRESULT _hr = get_CurveStyleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2534)
inline void ICurveStyle::PutCurvePenType ( enum ksCurvePenTypeEnum PVal ) {
    HRESULT _hr = put_CurvePenType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2535)
inline enum ksCurvePenTypeEnum ICurveStyle::GetCurvePenType ( ) {
    enum ksCurvePenTypeEnum _result;
    HRESULT _hr = get_CurvePenType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2536)
inline VARIANT_BOOL ICurveStyle::GetForHatch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForHatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2537)
inline void ICurveStyle::PutForHatch ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ForHatch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2538)
inline void ICurveStyle::PutColor ( long PVal ) {
    HRESULT _hr = put_Color(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2539)
inline long ICurveStyle::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2540)
inline void ICurveStyle::PutPaperWidth ( double PVal ) {
    HRESULT _hr = put_PaperWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2541)
inline double ICurveStyle::GetPaperWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_PaperWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2542)
inline void ICurveStyle::PutScreenWidth ( long PVal ) {
    HRESULT _hr = put_ScreenWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2543)
inline long ICurveStyle::GetScreenWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ScreenWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2544)
inline VARIANT_BOOL ICurveStyle::GetSmartParts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmartParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2545)
inline void ICurveStyle::PutSmartParts ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SmartParts(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2546)
inline VARIANT_BOOL ICurveStyle::GetIgnoreFragmentStyle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IgnoreFragmentStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2547)
inline void ICurveStyle::PutIgnoreFragmentStyle ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IgnoreFragmentStyle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2548)
inline long ICurveStyle::GetPatternsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PatternsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2549)
inline VARIANT_BOOL ICurveStyle::AddPattern ( double VisibleSegmentLenght, double invisibleSegmentLenght ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPattern(VisibleSegmentLenght, invisibleSegmentLenght, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2550)
inline VARIANT_BOOL ICurveStyle::DeletePattern ( long PatternIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePattern(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2551)
inline VARIANT_BOOL ICurveStyle::ClearPatterns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearPatterns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2552)
inline double ICurveStyle::GetPatternVisibleSegmentLenght ( long PatternIndex ) {
    double _result = 0;
    HRESULT _hr = get_PatternVisibleSegmentLenght(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2553)
inline void ICurveStyle::PutPatternVisibleSegmentLenght ( long PatternIndex, double Result ) {
    HRESULT _hr = put_PatternVisibleSegmentLenght(PatternIndex, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2554)
inline double ICurveStyle::GetPatternInvisibleSegmentLenght ( long PatternIndex ) {
    double _result = 0;
    HRESULT _hr = get_PatternInvisibleSegmentLenght(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2555)
inline void ICurveStyle::PutPatternInvisibleSegmentLenght ( long PatternIndex, double Result ) {
    HRESULT _hr = put_PatternInvisibleSegmentLenght(PatternIndex, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2556)
inline double ICurveStyle::GetPatternFragmentDx ( long PatternIndex ) {
    double _result = 0;
    HRESULT _hr = get_PatternFragmentDx(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2557)
inline void ICurveStyle::PutPatternFragmentDx ( long PatternIndex, double Result ) {
    HRESULT _hr = put_PatternFragmentDx(PatternIndex, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2558)
inline double ICurveStyle::GetPatternFragmentDy ( long PatternIndex ) {
    double _result = 0;
    HRESULT _hr = get_PatternFragmentDy(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2559)
inline void ICurveStyle::PutPatternFragmentDy ( long PatternIndex, double Result ) {
    HRESULT _hr = put_PatternFragmentDy(PatternIndex, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2560)
inline long ICurveStyle::GetPatternFragmentPoligonsCount ( long PatternIndex ) {
    long _result = 0;
    HRESULT _hr = get_PatternFragmentPoligonsCount(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2561)
inline void ICurveStyle::PutPatternFragmentPoligon ( long PatternIndex, long PoligonIndex, const _variant_t & PVal ) {
    HRESULT _hr = put_PatternFragmentPoligon(PatternIndex, PoligonIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2562)
inline _variant_t ICurveStyle::GetPatternFragmentPoligon ( long PatternIndex, long PoligonIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternFragmentPoligon(PatternIndex, PoligonIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2563)
inline VARIANT_BOOL ICurveStyle::AddPatternFragmentPoligon ( long PatternIndex, const _variant_t & Points ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPatternFragmentPoligon(PatternIndex, Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2564)
inline VARIANT_BOOL ICurveStyle::DeletePatternFragmentPoligon ( long PatternIndex, long PoligonIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePatternFragmentPoligon(PatternIndex, PoligonIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2565)
inline VARIANT_BOOL ICurveStyle::ClearPatternFragmentPoligons ( long PatternIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearPatternFragmentPoligons(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2566)
inline long ICurveStyle::GetPatternFragmentFilletsPoligonsCount ( long PatternIndex ) {
    long _result = 0;
    HRESULT _hr = get_PatternFragmentFilletsPoligonsCount(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2567)
inline void ICurveStyle::PutPatternFragmentFilletsPoligon ( long PatternIndex, long PoligonIndex, const _variant_t & PVal ) {
    HRESULT _hr = put_PatternFragmentFilletsPoligon(PatternIndex, PoligonIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2568)
inline _variant_t ICurveStyle::GetPatternFragmentFilletsPoligon ( long PatternIndex, long PoligonIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternFragmentFilletsPoligon(PatternIndex, PoligonIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2569)
inline VARIANT_BOOL ICurveStyle::AddPatternFragmentFilletsPoligon ( long PatternIndex, const _variant_t & Points ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPatternFragmentFilletsPoligon(PatternIndex, Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2570)
inline VARIANT_BOOL ICurveStyle::DeletePatternFragmentFilletsPoligon ( long PatternIndex, long PoligonIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePatternFragmentFilletsPoligon(PatternIndex, PoligonIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2571)
inline VARIANT_BOOL ICurveStyle::ClearPatternFragmentFilletsPoligons ( long PatternIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearPatternFragmentFilletsPoligons(PatternIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2572)
inline VARIANT_BOOL ICurveStyle::LoadPatternFragment ( long PatternIndex, _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadPatternFragment(PatternIndex, FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2573)
inline VARIANT_BOOL ICurveStyle::SetPatternFragment ( long PatternIndex, const _variant_t & Geom ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPatternFragment(PatternIndex, Geom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IHatchStyle wrapper method implementations
//

#pragma implementation_key(2574)
inline double IHatchStyle::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2575)
inline void IHatchStyle::PutAngle ( double Result ) {
    HRESULT _hr = put_Angle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2576)
inline VARIANT_BOOL IHatchStyle::GetKeepAngle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2577)
inline void IHatchStyle::PutKeepAngle ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_KeepAngle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2578)
inline double IHatchStyle::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2579)
inline void IHatchStyle::PutScale ( double Result ) {
    HRESULT _hr = put_Scale(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2580)
inline VARIANT_BOOL IHatchStyle::GetKeepScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2581)
inline void IHatchStyle::PutKeepScale ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_KeepScale(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2582)
inline VARIANT_BOOL IHatchStyle::GetHatchType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HatchType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2583)
inline void IHatchStyle::PutHatchType ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_HatchType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2584)
inline double IHatchStyle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2585)
inline void IHatchStyle::PutWidth ( double Result ) {
    HRESULT _hr = put_Width(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2586)
inline IStylesPtr IHatchStyle::GetCurvesStyles ( ) {
    struct IStyles * _result = 0;
    HRESULT _hr = get_CurvesStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylesPtr(_result, false);
}

#pragma implementation_key(2587)
inline long IHatchStyle::GetLinesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LinesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2588)
inline VARIANT_BOOL IHatchStyle::AddLine ( struct ICurveStyle * Style, double X, double Y, double Angle, double DX, double DY ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddLine(Style, X, Y, Angle, DX, DY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2589)
inline VARIANT_BOOL IHatchStyle::DeleteLine ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2590)
inline VARIANT_BOOL IHatchStyle::ClearLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2591)
inline ICurveStylePtr IHatchStyle::GetLineStyle ( long Index ) {
    struct ICurveStyle * _result = 0;
    HRESULT _hr = get_LineStyle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveStylePtr(_result, false);
}

#pragma implementation_key(2592)
inline void IHatchStyle::PutLineStyle ( long Index, struct ICurveStyle * Result ) {
    HRESULT _hr = put_LineStyle(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2593)
inline double IHatchStyle::GetLineBeginX ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_LineBeginX(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2594)
inline void IHatchStyle::PutLineBeginX ( long Index, double Result ) {
    HRESULT _hr = put_LineBeginX(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2595)
inline double IHatchStyle::GetLineBeginY ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_LineBeginY(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2596)
inline void IHatchStyle::PutLineBeginY ( long Index, double Result ) {
    HRESULT _hr = put_LineBeginY(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2597)
inline double IHatchStyle::GetLineAngle ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_LineAngle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2598)
inline void IHatchStyle::PutLineAngle ( long Index, double Result ) {
    HRESULT _hr = put_LineAngle(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2599)
inline double IHatchStyle::GetLineDx ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_LineDx(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2600)
inline void IHatchStyle::PutLineDx ( long Index, double Result ) {
    HRESULT _hr = put_LineDx(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2601)
inline double IHatchStyle::GetLineDy ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_LineDy(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2602)
inline void IHatchStyle::PutLineDy ( long Index, double Result ) {
    HRESULT _hr = put_LineDy(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IReportStyleColumn wrapper method implementations
//

#pragma implementation_key(2603)
inline _bstr_t IReportStyleColumn::GetHeader ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2604)
inline void IReportStyleColumn::PutHeader ( _bstr_t PVal ) {
    HRESULT _hr = put_Header(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2605)
inline double IReportStyleColumn::GetId ( ) {
    double _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2606)
inline VARIANT_BOOL IReportStyleColumn::GetUserColumn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2607)
inline IPropertyPtr IReportStyleColumn::GetProperty ( ) {
    struct IProperty * _result = 0;
    HRESULT _hr = get_Property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyPtr(_result, false);
}

#pragma implementation_key(2608)
inline void IReportStyleColumn::PutProperty ( struct IProperty * PVal ) {
    HRESULT _hr = put_Property(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2609)
inline double IReportStyleColumn::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2610)
inline void IReportStyleColumn::PutWidth ( double PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2611)
inline enum ksGroupeTypeEnum IReportStyleColumn::GetGroupeType ( ) {
    enum ksGroupeTypeEnum _result;
    HRESULT _hr = get_GroupeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2612)
inline void IReportStyleColumn::PutGroupeType ( enum ksGroupeTypeEnum PVal ) {
    HRESULT _hr = put_GroupeType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2613)
inline VARIANT_BOOL IReportStyleColumn::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2614)
inline void IReportStyleColumn::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2615)
inline VARIANT_BOOL IReportStyleColumn::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2616)
inline void IReportStyleColumn::PutWordWrap ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WordWrap(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2617)
inline enum ksAlignEnum IReportStyleColumn::GetTextAlign ( ) {
    enum ksAlignEnum _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2618)
inline void IReportStyleColumn::PutTextAlign ( enum ksAlignEnum PVal ) {
    HRESULT _hr = put_TextAlign(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2619)
inline VARIANT_BOOL IReportStyleColumn::GetCombineCells ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CombineCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2620)
inline void IReportStyleColumn::PutCombineCells ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CombineCells(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2621)
inline enum ksValueFormatEnum IReportStyleColumn::GetValueFormat ( ) {
    enum ksValueFormatEnum _result;
    HRESULT _hr = get_ValueFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2622)
inline void IReportStyleColumn::PutValueFormat ( enum ksValueFormatEnum PVal ) {
    HRESULT _hr = put_ValueFormat(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2623)
inline _variant_t IReportStyleColumn::GetPropertyLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PropertyLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2624)
inline void IReportStyleColumn::PutPropertyLevel ( const _variant_t & PVal ) {
    HRESULT _hr = put_PropertyLevel(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IReportStyle wrapper method implementations
//

#pragma implementation_key(2625)
inline long IReportStyle::GetColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2626)
inline IReportStyleColumnPtr IReportStyle::GetColumn ( const _variant_t & Index ) {
    struct IReportStyleColumn * _result = 0;
    HRESULT _hr = get_Column(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportStyleColumnPtr(_result, false);
}

#pragma implementation_key(2627)
inline IReportStyleColumnPtr IReportStyle::AddColumn ( long IndexAt, _bstr_t Name, struct IProperty * Property ) {
    struct IReportStyleColumn * _result = 0;
    HRESULT _hr = raw_AddColumn(IndexAt, Name, Property, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportStyleColumnPtr(_result, false);
}

#pragma implementation_key(2628)
inline VARIANT_BOOL IReportStyle::SwapColumn ( long Index1, long Index2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SwapColumn(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2629)
inline VARIANT_BOOL IReportStyle::DeleteColumn ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteColumn(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2630)
inline VARIANT_BOOL IReportStyle::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2631)
inline long IReportStyle::GetRowsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2632)
inline void IReportStyle::PutRowsCount ( long PVal ) {
    HRESULT _hr = put_RowsCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2633)
inline VARIANT_BOOL IReportStyle::GetDivideIntoPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DivideIntoPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2634)
inline void IReportStyle::PutDivideIntoPage ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DivideIntoPage(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2635)
inline long IReportStyle::GetTitleHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_TitleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2636)
inline void IReportStyle::PutTitleHeight ( long PVal ) {
    HRESULT _hr = put_TitleHeight(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2637)
inline long IReportStyle::GetRowHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_RowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2638)
inline void IReportStyle::PutRowHeight ( long PVal ) {
    HRESULT _hr = put_RowHeight(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2639)
inline VARIANT_BOOL IReportStyle::GetShowEmptyRows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowEmptyRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2640)
inline void IReportStyle::PutShowEmptyRows ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowEmptyRows(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2641)
inline VARIANT_BOOL IReportStyle::GetShowTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2642)
inline void IReportStyle::PutShowTitle ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowTitle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2643)
inline enum ksRowsNumberingTypeEnum IReportStyle::GetRowsNumberingType ( ) {
    enum ksRowsNumberingTypeEnum _result;
    HRESULT _hr = get_RowsNumberingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2644)
inline void IReportStyle::PutRowsNumberingType ( enum ksRowsNumberingTypeEnum PVal ) {
    HRESULT _hr = put_RowsNumberingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2645)
inline enum ksNumberingTypeEnum IReportStyle::GetColumnNumberingType ( ) {
    enum ksNumberingTypeEnum _result;
    HRESULT _hr = get_ColumnNumberingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2646)
inline void IReportStyle::PutColumnNumberingType ( enum ksNumberingTypeEnum PVal ) {
    HRESULT _hr = put_ColumnNumberingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2647)
inline long IReportStyle::GetColumnNumberingInitVal ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnNumberingInitVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2648)
inline void IReportStyle::PutColumnNumberingInitVal ( long PVal ) {
    HRESULT _hr = put_ColumnNumberingInitVal(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2649)
inline VARIANT_BOOL IReportStyle::GetDrawBottom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2650)
inline void IReportStyle::PutDrawBottom ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DrawBottom(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2651)
inline VARIANT_BOOL IReportStyle::Init ( enum ksReportStyleInitEnum Type ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Init(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2652)
inline VARIANT_BOOL IReportStyle::GetSortParameters ( long Level, long * ColumnNumber, enum ksSortTypeEnum * SortType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSortParameters(Level, ColumnNumber, SortType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2653)
inline VARIANT_BOOL IReportStyle::SetSortParameters ( long Level, long ColumnNumber, enum ksSortTypeEnum SortType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSortParameters(Level, ColumnNumber, SortType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2654)
inline VARIANT_BOOL IReportStyle::ClearSortParameters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearSortParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2655)
inline void IReportStyle::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2656)
inline _bstr_t IReportStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2657)
inline double IReportStyle::GetId ( ) {
    double _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IReportProcess wrapper method implementations
//

#pragma implementation_key(2658)
inline long IReportProcess::GetStylesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_StylesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2659)
inline void IReportProcess::PutActiveStyleIndex ( const _variant_t & Index ) {
    HRESULT _hr = put_ActiveStyleIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2660)
inline _variant_t IReportProcess::GetActiveStyleIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ActiveStyleIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2661)
inline IReportFilterPtr IReportProcess::GetReportFilter ( ) {
    struct IReportFilter * _result = 0;
    HRESULT _hr = get_ReportFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportFilterPtr(_result, false);
}

#pragma implementation_key(2662)
inline void IReportProcess::PutReportFilterUse ( VARIANT_BOOL Index ) {
    HRESULT _hr = put_ReportFilterUse(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2663)
inline VARIANT_BOOL IReportProcess::GetReportFilterUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReportFilterUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface INumericGroup wrapper method implementations
//

#pragma implementation_key(2664)
inline _bstr_t INumericGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2665)
inline void INumericGroup::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2666)
inline enum ksNumericGroupTypeEnum INumericGroup::GetNumericGroupType ( ) {
    enum ksNumericGroupTypeEnum _result;
    HRESULT _hr = get_NumericGroupType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2667)
inline void INumericGroup::PutNumericGroupType ( enum ksNumericGroupTypeEnum PVal ) {
    HRESULT _hr = put_NumericGroupType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2668)
inline VARIANT_BOOL INumericGroup::GetIsSystem ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2669)
inline long INumericGroup::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2670)
inline IKompasAPIObjectPtr INumericGroup::GetItem ( const _variant_t & Index ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(2671)
inline _variant_t INumericGroup::GetObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2672)
inline void INumericGroup::PutObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_Objects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2673)
inline VARIANT_BOOL INumericGroup::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2674)
inline VARIANT_BOOL INumericGroup::Attach ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Attach(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2675)
inline VARIANT_BOOL INumericGroup::Dettach ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Dettach(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2676)
inline VARIANT_BOOL INumericGroup::IsExist ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsExist(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2677)
inline VARIANT_BOOL INumericGroup::IsEnableAdd ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEnableAdd(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2678)
inline _bstr_t INumericGroup::GetObjectNumber ( struct IKompasAPIObject * Object, VARIANT_BOOL FullName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetObjectNumber(Object, FullName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2679)
inline _bstr_t INumericGroup::GetNextName ( struct IKompasAPIObject * Object ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetNextName(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2680)
inline long INumericGroup::GetMinCharsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MinCharsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2681)
inline void INumericGroup::PutMinCharsCount ( long Result ) {
    HRESULT _hr = put_MinCharsCount(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2682)
inline _bstr_t INumericGroup::GetAutoNumerationSymbols ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoNumerationSymbols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2683)
inline void INumericGroup::PutAutoNumerationSymbols ( _bstr_t Result ) {
    HRESULT _hr = put_AutoNumerationSymbols(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2684)
inline _bstr_t INumericGroup::GetTextBefore ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2685)
inline void INumericGroup::PutTextBefore ( _bstr_t Result ) {
    HRESULT _hr = put_TextBefore(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2686)
inline _bstr_t INumericGroup::GetTextAfter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2687)
inline void INumericGroup::PutTextAfter ( _bstr_t Result ) {
    HRESULT _hr = put_TextAfter(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2688)
inline long INumericGroup::GetStartIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_StartIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2689)
inline void INumericGroup::PutStartIndex ( long Result ) {
    HRESULT _hr = put_StartIndex(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2690)
inline VARIANT_BOOL INumericGroup::GetAutoNumerationEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoNumerationEnable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2691)
inline void INumericGroup::PutAutoNumerationEnable ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoNumerationEnable(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IReportTable wrapper method implementations
//

#pragma implementation_key(2692)
inline VARIANT_BOOL IReportTable::GetDisplayMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2693)
inline void IReportTable::PutDisplayMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DisplayMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2694)
inline long IReportTable::GetRowsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2695)
inline long IReportTable::GetColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2696)
inline _variant_t IReportTable::GetCellValue ( long NRow, long NCol ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CellValue(NRow, NCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2697)
inline void IReportTable::PutCellValue ( long NRow, long NCol, const _variant_t & PVal ) {
    HRESULT _hr = put_CellValue(NRow, NCol, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2698)
inline _bstr_t IReportTable::GetFormatCellValue ( long NRow, long NCol ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormatCellValue(NRow, NCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2699)
inline ITextPtr IReportTable::GetText ( long NRow, long NCol ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(NRow, NCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(2700)
inline IReportStyleColumnPtr IReportTable::GetStyleColumn ( long NCol ) {
    struct IReportStyleColumn * _result = 0;
    HRESULT _hr = get_StyleColumn(NCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportStyleColumnPtr(_result, false);
}

#pragma implementation_key(2701)
inline IPropertyKeeperPtr IReportTable::GetPropertyKeeper ( long RowIndex ) {
    struct IPropertyKeeper * _result = 0;
    HRESULT _hr = get_PropertyKeeper(RowIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyKeeperPtr(_result, false);
}

//
// interface IPropertyEdit wrapper method implementations
//

#pragma implementation_key(2702)
inline _variant_t IPropertyEdit::GetMinValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2703)
inline _variant_t IPropertyEdit::GetMaxValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2704)
inline VARIANT_BOOL IPropertyEdit::SetValueRange ( const _variant_t & MinVal, const _variant_t & MaxVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetValueRange(MinVal, MaxVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2705)
inline void IPropertyEdit::PutWithCheck ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithCheck(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2706)
inline VARIANT_BOOL IPropertyEdit::GetWithCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2707)
inline void IPropertyEdit::PutCheckState ( enum CheckStateEnum PVal ) {
    HRESULT _hr = put_CheckState(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2708)
inline enum CheckStateEnum IPropertyEdit::GetCheckState ( ) {
    enum CheckStateEnum _result;
    HRESULT _hr = get_CheckState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2709)
inline void IPropertyEdit::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2710)
inline VARIANT_BOOL IPropertyEdit::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2711)
inline void IPropertyEdit::PutWidth ( long PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2712)
inline long IPropertyEdit::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2713)
inline void IPropertyEdit::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2714)
inline double IPropertyEdit::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertySeparator wrapper method implementations
//

#pragma implementation_key(2715)
inline void IPropertySeparator::PutSeparatorType ( enum SeparatorTypeEnum PVal ) {
    HRESULT _hr = put_SeparatorType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2716)
inline enum SeparatorTypeEnum IPropertySeparator::GetSeparatorType ( ) {
    enum SeparatorTypeEnum _result;
    HRESULT _hr = get_SeparatorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2717)
inline VARIANT_BOOL IPropertySeparator::SetImage ( const _variant_t & IdBmp, const _variant_t & HInstance ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetImage(IdBmp, HInstance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyList wrapper method implementations
//

#pragma implementation_key(2718)
inline _variant_t IPropertyList::GetMinValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2719)
inline _variant_t IPropertyList::GetMaxValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2720)
inline VARIANT_BOOL IPropertyList::SetValueRange ( const _variant_t & MinVal, const _variant_t & MaxVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetValueRange(MinVal, MaxVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2721)
inline void IPropertyList::PutWithCheck ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithCheck(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2722)
inline VARIANT_BOOL IPropertyList::GetWithCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2723)
inline void IPropertyList::PutCheckState ( enum CheckStateEnum PVal ) {
    HRESULT _hr = put_CheckState(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2724)
inline enum CheckStateEnum IPropertyList::GetCheckState ( ) {
    enum CheckStateEnum _result;
    HRESULT _hr = get_CheckState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2725)
inline void IPropertyList::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2726)
inline VARIANT_BOOL IPropertyList::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2727)
inline void IPropertyList::PutWidth ( long PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2728)
inline long IPropertyList::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2729)
inline HRESULT IPropertyList::ClearList ( ) {
    HRESULT _hr = raw_ClearList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2730)
inline HRESULT IPropertyList::Add ( const _variant_t & NewVal ) {
    HRESULT _hr = raw_Add(NewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2731)
inline void IPropertyList::PutSort ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Sort(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2732)
inline VARIANT_BOOL IPropertyList::GetSort ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2733)
inline long IPropertyList::Find ( const _variant_t & Val ) {
    long _result = 0;
    HRESULT _hr = raw_Find(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2734)
inline VARIANT_BOOL IPropertyList::SetCurrentByIndex ( long Val ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCurrentByIndex(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2735)
inline void IPropertyList::PutPrecision ( double PVal ) {
    HRESULT _hr = put_Precision(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2736)
inline double IPropertyList::GetPrecision ( ) {
    double _result = 0;
    HRESULT _hr = get_Precision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2737)
inline long IPropertyList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2738)
inline void IPropertyList::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2739)
inline double IPropertyList::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyCheckBox wrapper method implementations
//

#pragma implementation_key(2740)
inline HRESULT IPropertyCheckBox::SetCustomBitmaps ( const _variant_t & IdUnchecked, const _variant_t & IdChecked, const _variant_t & IdIndeterminate, const _variant_t & HInstance ) {
    HRESULT _hr = raw_SetCustomBitmaps(IdUnchecked, IdChecked, IdIndeterminate, HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2741)
inline void IPropertyCheckBox::PutVisualStyle ( enum ksCheckBoxVisualStyleEnum PVal ) {
    HRESULT _hr = put_VisualStyle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2742)
inline enum ksCheckBoxVisualStyleEnum IPropertyCheckBox::GetVisualStyle ( ) {
    enum ksCheckBoxVisualStyleEnum _result;
    HRESULT _hr = get_VisualStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyMultiButton wrapper method implementations
//

#pragma implementation_key(2743)
inline void IPropertyMultiButton::PutButtonsType ( enum ButtonTypeEnum PVal ) {
    HRESULT _hr = put_ButtonsType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2744)
inline enum ButtonTypeEnum IPropertyMultiButton::GetButtonsType ( ) {
    enum ButtonTypeEnum _result;
    HRESULT _hr = get_ButtonsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2745)
inline void IPropertyMultiButton::PutButtonChecked ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonChecked(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2746)
inline VARIANT_BOOL IPropertyMultiButton::GetButtonChecked ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonChecked(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2747)
inline void IPropertyMultiButton::PutButtonEnable ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonEnable(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2748)
inline VARIANT_BOOL IPropertyMultiButton::GetButtonEnable ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonEnable(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2749)
inline HRESULT IPropertyMultiButton::AddButton ( long BtnID, const _variant_t & Bmp, long InsertAt ) {
    HRESULT _hr = raw_AddButton(BtnID, Bmp, InsertAt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2750)
inline void IPropertyMultiButton::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2751)
inline _variant_t IPropertyMultiButton::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2752)
inline void IPropertyMultiButton::PutButtonTips ( long BtnID, _bstr_t PVal ) {
    HRESULT _hr = put_ButtonTips(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2753)
inline _bstr_t IPropertyMultiButton::GetButtonTips ( long BtnID ) {
    BSTR _result = 0;
    HRESULT _hr = get_ButtonTips(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2754)
inline void IPropertyMultiButton::PutButtonHint ( long BtnID, _bstr_t PVal ) {
    HRESULT _hr = put_ButtonHint(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2755)
inline _bstr_t IPropertyMultiButton::GetButtonHint ( long BtnID ) {
    BSTR _result = 0;
    HRESULT _hr = get_ButtonHint(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2756)
inline void IPropertyMultiButton::PutNextCommand ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NextCommand(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2757)
inline VARIANT_BOOL IPropertyMultiButton::GetNextCommand ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NextCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2758)
inline void IPropertyMultiButton::PutButtonVisible ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonVisible(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2759)
inline VARIANT_BOOL IPropertyMultiButton::GetButtonVisible ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonVisible(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2760)
inline void IPropertyMultiButton::PutButtonIconFont ( long BtnID, _bstr_t PVal ) {
    HRESULT _hr = put_ButtonIconFont(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2761)
inline _bstr_t IPropertyMultiButton::GetButtonIconFont ( long BtnID ) {
    BSTR _result = 0;
    HRESULT _hr = get_ButtonIconFont(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IPropertySlideBox wrapper method implementations
//

#pragma implementation_key(2762)
inline void IPropertySlideBox::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2763)
inline _variant_t IPropertySlideBox::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2764)
inline void IPropertySlideBox::PutSlideType ( enum SlideTypeEnum Type ) {
    HRESULT _hr = put_SlideType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2765)
inline enum SlideTypeEnum IPropertySlideBox::GetSlideType ( ) {
    enum SlideTypeEnum _result;
    HRESULT _hr = get_SlideType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2766)
inline void IPropertySlideBox::PutDrawingSlide ( const _variant_t & Slide ) {
    HRESULT _hr = put_DrawingSlide(Slide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2767)
inline _variant_t IPropertySlideBox::GetDrawingSlide ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DrawingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2768)
inline void IPropertySlideBox::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2769)
inline long IPropertySlideBox::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2770)
inline void IPropertySlideBox::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2771)
inline long IPropertySlideBox::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2772)
inline void IPropertySlideBox::PutCheckBoxVisibility ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CheckBoxVisibility(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2773)
inline VARIANT_BOOL IPropertySlideBox::GetCheckBoxVisibility ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckBoxVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2774)
inline HRESULT IPropertySlideBox::UpdateParam ( ) {
    HRESULT _hr = raw_UpdateParam();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPropertyUserControl wrapper method implementations
//

#pragma implementation_key(2775)
inline void IPropertyUserControl::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2776)
inline long IPropertyUserControl::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2777)
inline void IPropertyUserControl::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2778)
inline long IPropertyUserControl::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2779)
inline HRESULT IPropertyUserControl::SetOCXControl ( _bstr_t ProgID ) {
    HRESULT _hr = raw_SetOCXControl(ProgID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2780)
inline void IPropertyUserControl::PutFixHeight ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixHeight(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2781)
inline VARIANT_BOOL IPropertyUserControl::GetFixHeight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2782)
inline void IPropertyUserControl::PutFixWidth ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2783)
inline VARIANT_BOOL IPropertyUserControl::GetFixWidth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2784)
inline void IPropertyUserControl::PutAutoSize ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2785)
inline VARIANT_BOOL IPropertyUserControl::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyGrid wrapper method implementations
//

#pragma implementation_key(2786)
inline void IPropertyGrid::PutColumnCount ( long Count ) {
    HRESULT _hr = put_ColumnCount(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2787)
inline long IPropertyGrid::GetColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2788)
inline void IPropertyGrid::PutRowCount ( long Count ) {
    HRESULT _hr = put_RowCount(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2789)
inline long IPropertyGrid::GetRowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2790)
inline void IPropertyGrid::PutFixedColumnCount ( long Count ) {
    HRESULT _hr = put_FixedColumnCount(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2791)
inline long IPropertyGrid::GetFixedColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FixedColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2792)
inline void IPropertyGrid::PutFixedRowCount ( long Count ) {
    HRESULT _hr = put_FixedRowCount(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2793)
inline long IPropertyGrid::GetFixedRowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FixedRowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2794)
inline void IPropertyGrid::PutColumnWidth ( long Index, long Width ) {
    HRESULT _hr = put_ColumnWidth(Index, Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2795)
inline long IPropertyGrid::GetColumnWidth ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_ColumnWidth(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2796)
inline void IPropertyGrid::PutRowHeight ( long Index, long Height ) {
    HRESULT _hr = put_RowHeight(Index, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2797)
inline long IPropertyGrid::GetRowHeight ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_RowHeight(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2798)
inline void IPropertyGrid::PutEnableEdit ( long NRow, long NCol, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableEdit(NRow, NCol, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2799)
inline VARIANT_BOOL IPropertyGrid::GetEnableEdit ( long NRow, long NCol ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableEdit(NRow, NCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2800)
inline void IPropertyGrid::PutCellText ( long NRow, long NCol, _bstr_t Text ) {
    HRESULT _hr = put_CellText(NRow, NCol, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2801)
inline _bstr_t IPropertyGrid::GetCellText ( long NRow, long NCol ) {
    BSTR _result = 0;
    HRESULT _hr = get_CellText(NRow, NCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2802)
inline void IPropertyGrid::PutCellFormat ( long NRow, long NCol, long Format ) {
    HRESULT _hr = put_CellFormat(NRow, NCol, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2803)
inline long IPropertyGrid::GetCellFormat ( long NRow, long NCol ) {
    long _result = 0;
    HRESULT _hr = get_CellFormat(NRow, NCol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2804)
inline void IPropertyGrid::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2805)
inline long IPropertyGrid::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2806)
inline void IPropertyGrid::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2807)
inline long IPropertyGrid::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2808)
inline void IPropertyGrid::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2809)
inline VARIANT_BOOL IPropertyGrid::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2810)
inline void IPropertyGrid::PutAutoSizeColumns ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoSizeColumns(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2811)
inline VARIANT_BOOL IPropertyGrid::GetAutoSizeColumns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSizeColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2812)
inline HRESULT IPropertyGrid::UpdateParam ( ) {
    HRESULT _hr = raw_UpdateParam();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2813)
inline void IPropertyGrid::PutCurrentColumn ( long Column ) {
    HRESULT _hr = put_CurrentColumn(Column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2814)
inline long IPropertyGrid::GetCurrentColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2815)
inline void IPropertyGrid::PutCurrentRow ( long Row ) {
    HRESULT _hr = put_CurrentRow(Row);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2816)
inline long IPropertyGrid::GetCurrentRow ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2817)
inline void IPropertyGrid::PutEnableDeleteRows ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableDeleteRows(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2818)
inline VARIANT_BOOL IPropertyGrid::GetEnableDeleteRows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDeleteRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2819)
inline void IPropertyGrid::PutColumnVisible ( long Index, VARIANT_BOOL Visible ) {
    HRESULT _hr = put_ColumnVisible(Index, Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2820)
inline VARIANT_BOOL IPropertyGrid::GetColumnVisible ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnVisible(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2821)
inline HRESULT IPropertyGrid::BringIntoView ( long Index ) {
    HRESULT _hr = raw_BringIntoView(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPropertySpinEdit wrapper method implementations
//

#pragma implementation_key(2822)
inline _variant_t IPropertySpinEdit::GetMinValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2823)
inline _variant_t IPropertySpinEdit::GetMaxValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2824)
inline VARIANT_BOOL IPropertySpinEdit::SetValueRange ( const _variant_t & MinVal, const _variant_t & MaxVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetValueRange(MinVal, MaxVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2825)
inline void IPropertySpinEdit::PutWithCheck ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithCheck(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2826)
inline VARIANT_BOOL IPropertySpinEdit::GetWithCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2827)
inline void IPropertySpinEdit::PutCheckState ( enum CheckStateEnum PVal ) {
    HRESULT _hr = put_CheckState(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2828)
inline enum CheckStateEnum IPropertySpinEdit::GetCheckState ( ) {
    enum CheckStateEnum _result;
    HRESULT _hr = get_CheckState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2829)
inline void IPropertySpinEdit::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2830)
inline VARIANT_BOOL IPropertySpinEdit::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2831)
inline void IPropertySpinEdit::PutWidth ( long PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2832)
inline long IPropertySpinEdit::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2833)
inline void IPropertySpinEdit::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2834)
inline double IPropertySpinEdit::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyFileName wrapper method implementations
//

#pragma implementation_key(2835)
inline void IPropertyFileName::PutCreateOpenButton ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateOpenButton(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2836)
inline VARIANT_BOOL IPropertyFileName::GetCreateOpenButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateOpenButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2837)
inline void IPropertyFileName::PutBitmap ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_Bitmap(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2838)
inline void IPropertyFileName::PutExtension ( _bstr_t PVal ) {
    HRESULT _hr = put_Extension(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2839)
inline _bstr_t IPropertyFileName::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2840)
inline void IPropertyFileName::PutFilter ( _bstr_t PVal ) {
    HRESULT _hr = put_Filter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2841)
inline _bstr_t IPropertyFileName::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2842)
inline void IPropertyFileName::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2843)
inline _variant_t IPropertyFileName::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2844)
inline void IPropertyFileName::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2845)
inline VARIANT_BOOL IPropertyFileName::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2846)
inline void IPropertyFileName::PutWidth ( long PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2847)
inline long IPropertyFileName::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2848)
inline void IPropertyFileName::PutPreview ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Preview(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2849)
inline VARIANT_BOOL IPropertyFileName::GetPreview ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2850)
inline _bstr_t IPropertyFileName::GetDefaultValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2851)
inline void IPropertyFileName::PutDefaultValue ( _bstr_t PVal ) {
    HRESULT _hr = put_DefaultValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPropertyColor wrapper method implementations
//

#pragma implementation_key(2852)
inline void IPropertyColor::PutWidth ( long PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2853)
inline long IPropertyColor::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2854)
inline void IPropertyColor::PutEnableDefaultButton ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableDefaultButton(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2855)
inline VARIANT_BOOL IPropertyColor::GetEnableDefaultButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2856)
inline void IPropertyColor::PutDefaultColor ( long PVal ) {
    HRESULT _hr = put_DefaultColor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2857)
inline long IPropertyColor::GetDefaultColor ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2858)
inline void IPropertyColor::PutDefaultButtonName ( _bstr_t PVal ) {
    HRESULT _hr = put_DefaultButtonName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2859)
inline _bstr_t IPropertyColor::GetDefaultButtonName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultButtonName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IPropertyEditList wrapper method implementations
//

#pragma implementation_key(2860)
inline enum ksEditListTypeEnum IPropertyEditList::GetListType ( ) {
    enum ksEditListTypeEnum _result;
    HRESULT _hr = get_ListType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2861)
inline void IPropertyEditList::PutListType ( enum ksEditListTypeEnum PVal ) {
    HRESULT _hr = put_ListType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2862)
inline VARIANT_BOOL IPropertyEditList::GetItemChecked ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemChecked(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2863)
inline void IPropertyEditList::PutItemChecked ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ItemChecked(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2864)
inline VARIANT_BOOL IPropertyEditList::GetMultySelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultySelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2865)
inline void IPropertyEditList::PutMultySelect ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MultySelect(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2866)
inline VARIANT_BOOL IPropertyEditList::GetItemSelected ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemSelected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2867)
inline void IPropertyEditList::PutItemSelected ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ItemSelected(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2868)
inline VARIANT_BOOL IPropertyEditList::GetSort ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2869)
inline void IPropertyEditList::PutSort ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Sort(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2870)
inline HRESULT IPropertyEditList::ClearList ( ) {
    HRESULT _hr = raw_ClearList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2871)
inline HRESULT IPropertyEditList::Add ( _bstr_t NewVal ) {
    HRESULT _hr = raw_Add(NewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2872)
inline HRESULT IPropertyEditList::Delete ( const _variant_t & Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2873)
inline long IPropertyEditList::GetItemsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ItemsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2874)
inline void IPropertyEditList::PutItemValue ( const _variant_t & Index, _bstr_t PVal ) {
    HRESULT _hr = put_ItemValue(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2875)
inline _bstr_t IPropertyEditList::GetItemValue ( const _variant_t & Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ItemValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2876)
inline long IPropertyEditList::Find ( const _variant_t & Val ) {
    long _result = 0;
    HRESULT _hr = raw_Find(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2877)
inline _bstr_t IPropertyEditList::GetDefaultValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2878)
inline void IPropertyEditList::PutDefaultValue ( _bstr_t PVal ) {
    HRESULT _hr = put_DefaultValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2879)
inline VARIANT_BOOL IPropertyEditList::GetItemMissing ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemMissing(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2880)
inline void IPropertyEditList::PutItemMissing ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ItemMissing(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2881)
inline VARIANT_BOOL IPropertyEditList::BeginEditItem ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_BeginEditItem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2882)
inline void IPropertyEditList::PutCheckState ( enum CheckStateEnum PVal ) {
    HRESULT _hr = put_CheckState(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2883)
inline enum CheckStateEnum IPropertyEditList::GetCheckState ( ) {
    enum CheckStateEnum _result;
    HRESULT _hr = get_CheckState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2884)
inline VARIANT_BOOL IPropertyEditList::GetAllowDelete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowDelete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2885)
inline void IPropertyEditList::PutAllowDelete ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AllowDelete(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2886)
inline VARIANT_BOOL IPropertyEditList::GetComputeUniqueNames ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputeUniqueNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2887)
inline void IPropertyEditList::PutComputeUniqueNames ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ComputeUniqueNames(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2888)
inline HRESULT IPropertyEditList::BringIntoView ( long Index ) {
    HRESULT _hr = raw_BringIntoView(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPropertyBmpList wrapper method implementations
//

#pragma implementation_key(2889)
inline HRESULT IPropertyBmpList::Add ( _bstr_t NewStr, const _variant_t & NewBmp ) {
    HRESULT _hr = raw_Add(NewStr, NewBmp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2890)
inline long IPropertyBmpList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2891)
inline HRESULT IPropertyBmpList::ClearList ( ) {
    HRESULT _hr = raw_ClearList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2892)
inline long IPropertyBmpList::Find ( _bstr_t Val ) {
    long _result = 0;
    HRESULT _hr = raw_Find(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2893)
inline void IPropertyBmpList::PutCurrentIndex ( long PVal ) {
    HRESULT _hr = put_CurrentIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2894)
inline long IPropertyBmpList::GetCurrentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2895)
inline void IPropertyBmpList::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2896)
inline _variant_t IPropertyBmpList::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2897)
inline void IPropertyBmpList::PutIconFont ( long Index, _bstr_t PVal ) {
    HRESULT _hr = put_IconFont(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2898)
inline _bstr_t IPropertyBmpList::GetIconFont ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_IconFont(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IPropertyLibExplorer wrapper method implementations
//

#pragma implementation_key(2899)
inline void IPropertyLibExplorer::PutFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_FileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2900)
inline _bstr_t IPropertyLibExplorer::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2901)
inline void IPropertyLibExplorer::PutRootName ( _bstr_t PVal ) {
    HRESULT _hr = put_RootName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2902)
inline _bstr_t IPropertyLibExplorer::GetRootName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RootName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2903)
inline VARIANT_BOOL IPropertyLibExplorer::GetFileValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FileValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyStyleList wrapper method implementations
//

#pragma implementation_key(2904)
inline VARIANT_BOOL IPropertyStyleList::Add ( const _variant_t & Styles ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Add(Styles, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2905)
inline long IPropertyStyleList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2906)
inline VARIANT_BOOL IPropertyStyleList::ClearList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2907)
inline long IPropertyStyleList::Find ( long Val ) {
    long _result = 0;
    HRESULT _hr = raw_Find(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2908)
inline void IPropertyStyleList::PutCurrentIndex ( long PVal ) {
    HRESULT _hr = put_CurrentIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2909)
inline long IPropertyStyleList::GetCurrentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2910)
inline void IPropertyStyleList::PutAnotherStyleBtnEnable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AnotherStyleBtnEnable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2911)
inline VARIANT_BOOL IPropertyStyleList::GetAnotherStyleBtnEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnotherStyleBtnEnable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyGroupBegin wrapper method implementations
//

#pragma implementation_key(2912)
inline VARIANT_BOOL IPropertyGroupBegin::GetExpanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Expanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2913)
inline void IPropertyGroupBegin::PutExpanding ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Expanding(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2914)
inline VARIANT_BOOL IPropertyGroupBegin::GetExpanded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Expanded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2915)
inline void IPropertyGroupBegin::PutExpanded ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Expanded(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPropertyTwinSwitcher wrapper method implementations
//

#pragma implementation_key(2916)
inline _bstr_t IPropertyTwinSwitcher::GetLabel2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2917)
inline void IPropertyTwinSwitcher::PutLabel2 ( _bstr_t PVal ) {
    HRESULT _hr = put_Label2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPropertyPoint3D wrapper method implementations
//

#pragma implementation_key(2918)
inline void IPropertyPoint3D::PutPoint3DType ( enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_Point3DType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2919)
inline enum ksPoint3DTypeEnum IPropertyPoint3D::GetPoint3DType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_Point3DType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2920)
inline void IPropertyPoint3D::PutCoordinateValue ( long Index, double PVal ) {
    HRESULT _hr = put_CoordinateValue(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2921)
inline double IPropertyPoint3D::GetCoordinateValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_CoordinateValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2922)
inline void IPropertyPoint3D::PutCoordinateState ( long Index, enum CheckStateEnum PVal ) {
    HRESULT _hr = put_CoordinateState(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2923)
inline enum CheckStateEnum IPropertyPoint3D::GetCoordinateState ( long Index ) {
    enum CheckStateEnum _result;
    HRESULT _hr = get_CoordinateState(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2924)
inline IPropertyEditPtr IPropertyPoint3D::GetCoordinate ( long Index ) {
    struct IPropertyEdit * _result = 0;
    HRESULT _hr = get_Coordinate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyEditPtr(_result, false);
}

//
// interface IPropertyPreviewText wrapper method implementations
//

#pragma implementation_key(2925)
inline ITextPtr IPropertyPreviewText::GetPreviewText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_PreviewText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(2926)
inline VARIANT_BOOL IPropertyPreviewText::UpdateParam ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UpdateParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2927)
inline void IPropertyPreviewText::PutDoubleSize ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DoubleSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2928)
inline VARIANT_BOOL IPropertyPreviewText::GetDoubleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DoubleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyAggregateControl wrapper method implementations
//

#pragma implementation_key(2929)
inline VARIANT_BOOL IPropertyAggregateControl::Add ( struct IPropertyControl * Control ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Add(Control, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2930)
inline IPropertyControlPtr IPropertyAggregateControl::GetPropertyControl ( long Index ) {
    struct IPropertyControl * _result = 0;
    HRESULT _hr = get_PropertyControl(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyControlPtr(_result, false);
}

//
// interface IProcessContextPanel wrapper method implementations
//

#pragma implementation_key(2931)
inline VARIANT_BOOL IProcessContextPanel::AddControl ( struct IPropertyControl * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddControl(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2932)
inline VARIANT_BOOL IProcessContextPanel::AddAdditionalButtonsFromControl ( struct IPropertyControl * PVal, _bstr_t Title ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddAdditionalButtonsFromControl(PVal, Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2933)
inline VARIANT_BOOL IProcessContextPanel::AddLinkContentButton ( struct IPropertyControl * PVal, _bstr_t Title ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddLinkContentButton(PVal, Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2934)
inline VARIANT_BOOL IProcessContextPanel::AddGeomCalculatorCommands ( struct IPropertyControl * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddGeomCalculatorCommands(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2935)
inline VARIANT_BOOL IProcessContextPanel::AddSeparator ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2936)
inline VARIANT_BOOL IProcessContextPanel::AddNewSearchButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddNewSearchButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2937)
inline VARIANT_BOOL IProcessContextPanel::AddSnapCommands ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddSnapCommands(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2938)
inline VARIANT_BOOL IProcessContextPanel::AddGroupBegin ( _bstr_t Title ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddGroupBegin(Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2939)
inline VARIANT_BOOL IProcessContextPanel::AddGroupEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddGroupEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyBasePoint wrapper method implementations
//

#pragma implementation_key(2940)
inline void IPropertyBasePoint::PutCenterPointVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CenterPointVisible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2941)
inline VARIANT_BOOL IPropertyBasePoint::GetCenterPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyMarking wrapper method implementations
//

#pragma implementation_key(2942)
inline _bstr_t IPropertyMarking::GetMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMarking(MarkingType, AddSystemDelimer, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2943)
inline VARIANT_BOOL IPropertyMarking::SetMarking ( enum ksVariantMarkingTypeEnum MarkingType, _bstr_t Marking ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetMarking(MarkingType, Marking, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2944)
inline void IPropertyMarking::PutMarkingVisible ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MarkingVisible(MarkingType, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2945)
inline VARIANT_BOOL IPropertyMarking::GetMarkingVisible ( enum ksVariantMarkingTypeEnum MarkingType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkingVisible(MarkingType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2946)
inline void IPropertyMarking::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2947)
inline VARIANT_BOOL IPropertyMarking::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProcess wrapper method implementations
//

#pragma implementation_key(2948)
inline void IProcess::PutProcessParam ( struct IProcessParam * Param ) {
    HRESULT _hr = put_ProcessParam(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2949)
inline IProcessParamPtr IProcess::GetProcessParam ( ) {
    struct IProcessParam * _result = 0;
    HRESULT _hr = get_ProcessParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcessParamPtr(_result, false);
}

#pragma implementation_key(2950)
inline void IProcess::PutCursorId ( const _variant_t & PVal ) {
    HRESULT _hr = put_CursorId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2951)
inline _variant_t IProcess::GetCursorId ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CursorId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2952)
inline void IProcess::PutCaption ( _bstr_t PVal ) {
    HRESULT _hr = put_Caption(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2953)
inline _bstr_t IProcess::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2954)
inline void IProcess::PutPrompt ( _bstr_t PVal ) {
    HRESULT _hr = put_Prompt(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2955)
inline _bstr_t IProcess::GetPrompt ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2956)
inline void IProcess::PutMenu ( const _variant_t & PVal ) {
    HRESULT _hr = put_Menu(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2957)
inline _variant_t IProcess::GetMenu ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Menu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2958)
inline void IProcess::PutResModule ( const _variant_t & HInstance ) {
    HRESULT _hr = put_ResModule(HInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2959)
inline _variant_t IProcess::GetResModule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2960)
inline void IProcess::PutDynamic ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Dynamic(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2961)
inline VARIANT_BOOL IProcess::GetDynamic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dynamic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2962)
inline VARIANT_BOOL IProcess::Run ( VARIANT_BOOL Modal, VARIANT_BOOL PostMessage ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Run(Modal, PostMessage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2963)
inline VARIANT_BOOL IProcess::Stop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2964)
inline VARIANT_BOOL IProcess::SetCursorText ( _bstr_t PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCursorText(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2965)
inline VARIANT_BOOL IProcess::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2966)
inline void IProcess::PutCritical ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Critical(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2967)
inline VARIANT_BOOL IProcess::GetCritical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Critical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMouseEnterLeaveParameters7 wrapper method implementations
//

#pragma implementation_key(2968)
inline void IMouseEnterLeaveParameters7::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2969)
inline double IMouseEnterLeaveParameters7::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2970)
inline void IMouseEnterLeaveParameters7::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2971)
inline double IMouseEnterLeaveParameters7::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2972)
inline void IMouseEnterLeaveParameters7::PutOffset ( double PVal ) {
    HRESULT _hr = put_Offset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2973)
inline double IMouseEnterLeaveParameters7::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2974)
inline void IMouseEnterLeaveParameters7::PutOffsetAngle ( double PVal ) {
    HRESULT _hr = put_OffsetAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2975)
inline double IMouseEnterLeaveParameters7::GetOffsetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_OffsetAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2976)
inline void IMouseEnterLeaveParameters7::PutSymbol ( long PVal ) {
    HRESULT _hr = put_Symbol(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2977)
inline long IMouseEnterLeaveParameters7::GetSymbol ( ) {
    long _result = 0;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2978)
inline void IMouseEnterLeaveParameters7::PutSymbolFont ( _bstr_t PVal ) {
    HRESULT _hr = put_SymbolFont(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2979)
inline _bstr_t IMouseEnterLeaveParameters7::GetSymbolFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SymbolFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2980)
inline void IMouseEnterLeaveParameters7::PutSymbolColor ( long PVal ) {
    HRESULT _hr = put_SymbolColor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2981)
inline long IMouseEnterLeaveParameters7::GetSymbolColor ( ) {
    long _result = 0;
    HRESULT _hr = get_SymbolColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2982)
inline void IMouseEnterLeaveParameters7::PutSymbolScale ( double PVal ) {
    HRESULT _hr = put_SymbolScale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2983)
inline double IMouseEnterLeaveParameters7::GetSymbolScale ( ) {
    double _result = 0;
    HRESULT _hr = get_SymbolScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyReplaceList wrapper method implementations
//

#pragma implementation_key(2984)
inline VARIANT_BOOL IPropertyReplaceList::AddItem ( struct IDocumentFrame * Document, _bstr_t Text, _bstr_t FindText, long StartIndex, VARIANT_BOOL ReadOnly ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddItem(Document, Text, FindText, StartIndex, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2985)
inline HRESULT IPropertyReplaceList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2986)
inline _variant_t IPropertyReplaceList::GetSelection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IViewDesignation wrapper method implementations
//

#pragma implementation_key(2987)
inline VARIANT_BOOL IViewDesignation::GetShowName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2988)
inline void IViewDesignation::PutShowName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2989)
inline VARIANT_BOOL IViewDesignation::GetShowUnfold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowUnfold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2990)
inline void IViewDesignation::PutShowUnfold ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowUnfold(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2991)
inline VARIANT_BOOL IViewDesignation::GetShowScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2992)
inline void IViewDesignation::PutShowScale ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowScale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2993)
inline VARIANT_BOOL IViewDesignation::GetShowTurn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowTurn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2994)
inline void IViewDesignation::PutShowTurn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowTurn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2995)
inline VARIANT_BOOL IViewDesignation::GetShowAngle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2996)
inline void IViewDesignation::PutShowAngle ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2997)
inline VARIANT_BOOL IViewDesignation::GetShowPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2998)
inline void IViewDesignation::PutShowPage ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowPage(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2999)
inline VARIANT_BOOL IViewDesignation::GetShowZone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3000)
inline void IViewDesignation::PutShowZone ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowZone(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3001)
inline _bstr_t IViewDesignation::GetDesignation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Designation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3002)
inline _variant_t IViewDesignation::GetRefObject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3003)
inline void IViewDesignation::PutRefObject ( const _variant_t & PVal ) {
    HRESULT _hr = put_RefObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3004)
inline IDrawingObjectPtr IViewDesignation::GetDrawingText ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_DrawingText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

//
// interface ICutViewParam wrapper method implementations
//

#pragma implementation_key(3005)
inline long ICutViewParam::AddCut ( _bstr_t Name, long Number, double X, double Y, VARIANT_BOOL ModelCut, struct IDrawingObject * Contour, struct IView * View ) {
    long _result = 0;
    HRESULT _hr = raw_AddCut(Name, Number, X, Y, ModelCut, Contour, View, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3006)
inline VARIANT_BOOL ICutViewParam::DeleteCut ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteCut(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3007)
inline VARIANT_BOOL ICutViewParam::DeleteAllCuts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteAllCuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3008)
inline VARIANT_BOOL ICutViewParam::SetCutPlanePosition ( long Index, double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCutPlanePosition(Index, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3009)
inline VARIANT_BOOL ICutViewParam::GetCutPlanePosition ( long Index, double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCutPlanePosition(Index, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3010)
inline VARIANT_BOOL ICutViewParam::SetCutParams ( long Index, _bstr_t Name, long Number, VARIANT_BOOL ModelCut ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCutParams(Index, Name, Number, ModelCut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3011)
inline IDrawingObjectPtr ICutViewParam::GetCutParams ( long Index, BSTR * Name, long * Number, VARIANT_BOOL * ModelCut ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = raw_GetCutParams(Index, Name, Number, ModelCut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(3012)
inline long ICutViewParam::GetCutsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CutsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3013)
inline VARIANT_BOOL ICutViewParam::GetLocalCut ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LocalCut(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3014)
inline void ICutViewParam::PutLocalCut ( long Index, VARIANT_BOOL Result ) {
    HRESULT _hr = put_LocalCut(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3015)
inline IHatchParamPtr ICutViewParam::GetHatchParam ( long Index ) {
    struct IHatchParam * _result = 0;
    HRESULT _hr = get_HatchParam(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHatchParamPtr(_result, false);
}

//
// interface ILocalCoordinateSystem2D wrapper method implementations
//

#pragma implementation_key(3016)
inline void ILocalCoordinateSystem2D::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3017)
inline _bstr_t ILocalCoordinateSystem2D::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3018)
inline void ILocalCoordinateSystem2D::PutX ( double X ) {
    HRESULT _hr = put_X(X);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3019)
inline double ILocalCoordinateSystem2D::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3020)
inline void ILocalCoordinateSystem2D::PutY ( double Y ) {
    HRESULT _hr = put_Y(Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3021)
inline double ILocalCoordinateSystem2D::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3022)
inline void ILocalCoordinateSystem2D::PutAngle ( double A ) {
    HRESULT _hr = put_Angle(A);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3023)
inline double ILocalCoordinateSystem2D::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3024)
inline void ILocalCoordinateSystem2D::PutAxisXLabel ( _bstr_t Name ) {
    HRESULT _hr = put_AxisXLabel(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3025)
inline _bstr_t ILocalCoordinateSystem2D::GetAxisXLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AxisXLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3026)
inline void ILocalCoordinateSystem2D::PutAxisYLabel ( _bstr_t Name ) {
    HRESULT _hr = put_AxisYLabel(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3027)
inline _bstr_t ILocalCoordinateSystem2D::GetAxisYLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AxisYLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3028)
inline VARIANT_BOOL ILocalCoordinateSystem2D::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILocalCoordinateSystems2D wrapper method implementations
//

#pragma implementation_key(3029)
inline ILocalCoordinateSystem2DPtr ILocalCoordinateSystems2D::GetItem ( const _variant_t & Index ) {
    struct ILocalCoordinateSystem2D * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystem2DPtr(_result, false);
}

#pragma implementation_key(3030)
inline ILocalCoordinateSystem2DPtr ILocalCoordinateSystems2D::Add ( ) {
    struct ILocalCoordinateSystem2D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystem2DPtr(_result, false);
}

#pragma implementation_key(3031)
inline void ILocalCoordinateSystems2D::PutCurrent ( struct ILocalCoordinateSystem2D * Result ) {
    HRESULT _hr = put_Current(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3032)
inline ILocalCoordinateSystem2DPtr ILocalCoordinateSystems2D::GetCurrent ( ) {
    struct ILocalCoordinateSystem2D * _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystem2DPtr(_result, false);
}

//
// interface IView1 wrapper method implementations
//

#pragma implementation_key(3033)
inline ILocalCoordinateSystems2DPtr IView1::GetLocalCoordinateSystems2D ( ) {
    struct ILocalCoordinateSystems2D * _result = 0;
    HRESULT _hr = get_LocalCoordinateSystems2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystems2DPtr(_result, false);
}

#pragma implementation_key(3034)
inline VARIANT_BOOL IView1::GetEditMacroVisibleRegime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EditMacroVisibleRegime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3035)
inline void IView1::PutNumerator ( double N ) {
    HRESULT _hr = put_Numerator(N);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3036)
inline double IView1::GetNumerator ( ) {
    double _result = 0;
    HRESULT _hr = get_Numerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3037)
inline void IView1::PutPrintable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Printable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3038)
inline VARIANT_BOOL IView1::GetPrintable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Printable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3039)
inline IDrawingObjectPtr IView1::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(3040)
inline void IView1::PutBaseObject ( struct IDrawingObject * Result ) {
    HRESULT _hr = put_BaseObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3041)
inline VARIANT_BOOL IView1::GetCrossed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Crossed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3042)
inline VARIANT_BOOL IView1::GetCrossedTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CrossedTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3043)
inline IDrawingObjectPtr IView1::FindObject ( double X, double Y, double Limit, struct IFindObjectParameters * Param ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = raw_FindObject(X, Y, Limit, Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(3044)
inline _variant_t IView1::FindObjects ( double X, double Y, double Limit, struct IFindObjectParameters * Param ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FindObjects(X, Y, Limit, Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3045)
inline _variant_t IView1::SelectObjects ( enum ksRegionTypeEnum RegionType, double XMin, double YMin, double XMax, double YMax ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SelectObjects(RegionType, XMin, YMin, XMax, YMax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3046)
inline VARIANT_BOOL IView1::TransformPointToSheet ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformPointToSheet(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3047)
inline VARIANT_BOOL IView1::TransformPointFromSheet ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformPointFromSheet(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3048)
inline VARIANT_BOOL IView1::TransformAngleToSheet ( double * Angle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformAngleToSheet(Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3049)
inline VARIANT_BOOL IView1::TransformAngleFromSheet ( double * Angle ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformAngleFromSheet(Angle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAutoNumerationManager wrapper method implementations
//

#pragma implementation_key(3050)
inline long IAutoNumerationManager::GetNumericGroupsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_NumericGroupsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3051)
inline INumericGroupPtr IAutoNumerationManager::GetNumericGroup ( const _variant_t & Index ) {
    struct INumericGroup * _result = 0;
    HRESULT _hr = get_NumericGroup(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericGroupPtr(_result, false);
}

#pragma implementation_key(3052)
inline INumericGroupPtr IAutoNumerationManager::GetCurrentNumericGroup ( ) {
    struct INumericGroup * _result = 0;
    HRESULT _hr = get_CurrentNumericGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericGroupPtr(_result, false);
}

#pragma implementation_key(3053)
inline void IAutoNumerationManager::PutCurrentNumericGroup ( struct INumericGroup * Result ) {
    HRESULT _hr = put_CurrentNumericGroup(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3054)
inline INumericGroupPtr IAutoNumerationManager::AddNumericGroup ( _bstr_t Name ) {
    struct INumericGroup * _result = 0;
    HRESULT _hr = raw_AddNumericGroup(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericGroupPtr(_result, false);
}

//
// interface IDocument2DSettings wrapper method implementations
//

#pragma implementation_key(3055)
inline void IDocument2DSettings::PutLayersGroupWay ( enum LayersGroupWayEnum PVal ) {
    HRESULT _hr = put_LayersGroupWay(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3056)
inline enum LayersGroupWayEnum IDocument2DSettings::GetLayersGroupWay ( ) {
    enum LayersGroupWayEnum _result;
    HRESULT _hr = get_LayersGroupWay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3057)
inline void IDocument2DSettings::PutCompositionInherit ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CompositionInherit(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3058)
inline VARIANT_BOOL IDocument2DSettings::GetCompositionInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CompositionInherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3059)
inline IAutoSortObjectsParametersPtr IDocument2DSettings::GetAutoSortObjectsParameters ( ) {
    struct IAutoSortObjectsParameters * _result = 0;
    HRESULT _hr = get_AutoSortObjectsParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAutoSortObjectsParametersPtr(_result, false);
}

#pragma implementation_key(3060)
inline void IDocument2DSettings::PutRoughModification ( enum ksRoughModificationEnum PVal ) {
    HRESULT _hr = put_RoughModification(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3061)
inline enum ksRoughModificationEnum IDocument2DSettings::GetRoughModification ( ) {
    enum ksRoughModificationEnum _result;
    HRESULT _hr = get_RoughModification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDocument3DSettings wrapper method implementations
//

#pragma implementation_key(3062)
inline void IDocument3DSettings::PutAccuracyModelDisplaying ( double PVal ) {
    HRESULT _hr = put_AccuracyModelDisplaying(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3063)
inline double IDocument3DSettings::GetAccuracyModelDisplaying ( ) {
    double _result = 0;
    HRESULT _hr = get_AccuracyModelDisplaying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3064)
inline void IDocument3DSettings::PutAccuracyMassProperties ( double PVal ) {
    HRESULT _hr = put_AccuracyMassProperties(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3065)
inline double IDocument3DSettings::GetAccuracyMassProperties ( ) {
    double _result = 0;
    HRESULT _hr = get_AccuracyMassProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3066)
inline void IDocument3DSettings::PutRoughModification ( enum ksRoughModificationEnum PVal ) {
    HRESULT _hr = put_RoughModification(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3067)
inline enum ksRoughModificationEnum IDocument3DSettings::GetRoughModification ( ) {
    enum ksRoughModificationEnum _result;
    HRESULT _hr = get_RoughModification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IThreadDialogParam wrapper method implementations
//

#pragma implementation_key(3068)
inline _bstr_t IThreadDialogParam::GetStandart ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Standart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3069)
inline void IThreadDialogParam::PutStandart ( _bstr_t PVal ) {
    HRESULT _hr = put_Standart(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3070)
inline VARIANT_BOOL IThreadDialogParam::GetIsConic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3071)
inline void IThreadDialogParam::PutIsConic ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IsConic(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3072)
inline double IThreadDialogParam::GetNominalDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_NominalDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3073)
inline void IThreadDialogParam::PutNominalDiameter ( double PVal ) {
    HRESULT _hr = put_NominalDiameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3074)
inline double IThreadDialogParam::GetP ( ) {
    double _result = 0;
    HRESULT _hr = get_P(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3075)
inline void IThreadDialogParam::PutP ( double PVal ) {
    HRESULT _hr = put_P(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IContentDialogParam wrapper method implementations
//

#pragma implementation_key(3076)
inline _bstr_t IContentDialogParam::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3077)
inline void IContentDialogParam::PutTitle ( _bstr_t PVal ) {
    HRESULT _hr = put_Title(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3078)
inline VARIANT_BOOL IContentDialogParam::GetUpperCaseTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpperCaseTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3079)
inline void IContentDialogParam::PutUpperCaseTitle ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UpperCaseTitle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3080)
inline VARIANT_BOOL IContentDialogParam::GetResizable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Resizable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3081)
inline void IContentDialogParam::PutResizable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Resizable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3082)
inline _bstr_t IContentDialogParam::GetPositiveButton ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PositiveButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3083)
inline void IContentDialogParam::PutPositiveButton ( _bstr_t PVal ) {
    HRESULT _hr = put_PositiveButton(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3084)
inline _bstr_t IContentDialogParam::GetNegativeButton ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NegativeButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3085)
inline void IContentDialogParam::PutNegativeButton ( _bstr_t PVal ) {
    HRESULT _hr = put_NegativeButton(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3086)
inline _bstr_t IContentDialogParam::GetCancelButton ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CancelButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3087)
inline void IContentDialogParam::PutCancelButton ( _bstr_t PVal ) {
    HRESULT _hr = put_CancelButton(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3088)
inline _bstr_t IContentDialogParam::GetAdditionalButton ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AdditionalButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3089)
inline void IContentDialogParam::PutAdditionalButton ( _bstr_t PVal ) {
    HRESULT _hr = put_AdditionalButton(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3090)
inline long IContentDialogParam::GetHelpId ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3091)
inline void IContentDialogParam::PutHelpId ( long PVal ) {
    HRESULT _hr = put_HelpId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3092)
inline _bstr_t IContentDialogParam::GetHelpFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3093)
inline void IContentDialogParam::PutHelpFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_HelpFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3094)
inline _bstr_t IContentDialogParam::GetCheckBoxTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CheckBoxTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3095)
inline void IContentDialogParam::PutCheckBoxTitle ( _bstr_t PVal ) {
    HRESULT _hr = put_CheckBoxTitle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3096)
inline VARIANT_BOOL IContentDialogParam::GetCheckBoxChecked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckBoxChecked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3097)
inline void IContentDialogParam::PutCheckBoxChecked ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CheckBoxChecked(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3098)
inline double IContentDialogParam::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3099)
inline void IContentDialogParam::PutWidth ( double PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3100)
inline double IContentDialogParam::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3101)
inline void IContentDialogParam::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3102)
inline double IContentDialogParam::GetMinWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MinWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3103)
inline void IContentDialogParam::PutMinWidth ( double PVal ) {
    HRESULT _hr = put_MinWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3104)
inline double IContentDialogParam::GetMinHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_MinHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3105)
inline void IContentDialogParam::PutMinHeight ( double PVal ) {
    HRESULT _hr = put_MinHeight(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3106)
inline double IContentDialogParam::GetMaxWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3107)
inline void IContentDialogParam::PutMaxWidth ( double PVal ) {
    HRESULT _hr = put_MaxWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3108)
inline double IContentDialogParam::GetMaxHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3109)
inline void IContentDialogParam::PutMaxHeight ( double PVal ) {
    HRESULT _hr = put_MaxHeight(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3110)
inline VARIANT_BOOL IContentDialogParam::AddLeftToolButton ( _bstr_t Header, VARIANT_BOOL HeaderVisible, long CommandID, long IconId, _bstr_t IconFont, enum ButtonTypeEnum ButtonType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddLeftToolButton(Header, HeaderVisible, CommandID, IconId, IconFont, ButtonType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3111)
inline VARIANT_BOOL IContentDialogParam::AddRightToolButton ( _bstr_t Header, VARIANT_BOOL HeaderVisible, long CommandID, long IconId, _bstr_t IconFont, enum ButtonTypeEnum ButtonType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddRightToolButton(Header, HeaderVisible, CommandID, IconId, IconFont, ButtonType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3112)
inline VARIANT_BOOL IContentDialogParam::AddLeftSeparator ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddLeftSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3113)
inline VARIANT_BOOL IContentDialogParam::AddRightSeparator ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddRightSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IApplicationDialogs wrapper method implementations
//

#pragma implementation_key(3114)
inline IKompasAPIObjectPtr IApplicationDialogs::GetDialogParam ( enum KompasAPIObjectTypeEnum ParamType ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = raw_GetDialogParam(ParamType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3115)
inline VARIANT_BOOL IApplicationDialogs::SelectThread ( OLE_HANDLE ParentHwnd, struct IThreadDialogParam * DialogParam ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SelectThread(ParentHwnd, DialogParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3116)
inline long IApplicationDialogs::ShowContentDialog ( OLE_HANDLE ParentHwnd, struct IContentDialogParam * DialogParam ) {
    long _result = 0;
    HRESULT _hr = raw_ShowContentDialog(ParentHwnd, DialogParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3117)
inline long IApplicationDialogs::WhatsWrongDlg ( const _variant_t & Objs ) {
    long _result = 0;
    HRESULT _hr = raw_WhatsWrongDlg(Objs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFormatLabelRules wrapper method implementations
//

#pragma implementation_key(3118)
inline long IFormatLabelRules::GetPropertiesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PropertiesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3119)
inline IPropertyPtr IFormatLabelRules::GetProperty ( long Index ) {
    struct IProperty * _result = 0;
    HRESULT _hr = get_Property(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyPtr(_result, false);
}

#pragma implementation_key(3120)
inline void IFormatLabelRules::PutProperty ( long Index, struct IProperty * Result ) {
    HRESULT _hr = put_Property(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3121)
inline double IFormatLabelRules::GetPropertyId ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_PropertyId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3122)
inline void IFormatLabelRules::PutPropertyId ( long Index, double Result ) {
    HRESULT _hr = put_PropertyId(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3123)
inline VARIANT_BOOL IFormatLabelRules::GetPropertyUse ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PropertyUse(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3124)
inline void IFormatLabelRules::PutPropertyUse ( long Index, VARIANT_BOOL Result ) {
    HRESULT _hr = put_PropertyUse(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3125)
inline _bstr_t IFormatLabelRules::GetPropertyPrefix ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PropertyPrefix(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3126)
inline void IFormatLabelRules::PutPropertyPrefix ( long Index, _bstr_t Result ) {
    HRESULT _hr = put_PropertyPrefix(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3127)
inline VARIANT_BOOL IFormatLabelRules::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3128)
inline VARIANT_BOOL IFormatLabelRules::AddProperty ( long IndexAt, struct IProperty * Property, VARIANT_BOOL Use, _bstr_t Prefix ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddProperty(IndexAt, Property, Use, Prefix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3129)
inline VARIANT_BOOL IFormatLabelRules::AddPropertyById ( long IndexAt, double PropertyId, VARIANT_BOOL Use, _bstr_t Prefix ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPropertyById(IndexAt, PropertyId, Use, Prefix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3130)
inline VARIANT_BOOL IFormatLabelRules::AddPropertyFromLibrary ( long IndexAt, _bstr_t FileName, double PropertyId, VARIANT_BOOL Use, _bstr_t Prefix ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPropertyFromLibrary(IndexAt, FileName, PropertyId, Use, Prefix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3131)
inline VARIANT_BOOL IFormatLabelRules::DeleteProperty ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteProperty(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3132)
inline VARIANT_BOOL IFormatLabelRules::SwapProperties ( long Index1, long Index2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SwapProperties(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDocumentSettings1 wrapper method implementations
//

#pragma implementation_key(3133)
inline IFormatLabelRulesPtr IDocumentSettings1::GetFormatLabelRules ( ) {
    struct IFormatLabelRules * _result = 0;
    HRESULT _hr = get_FormatLabelRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormatLabelRulesPtr(_result, false);
}

//
// interface IHypertextReferenceParam wrapper method implementations
//

#pragma implementation_key(3134)
inline void IHypertextReferenceParam::PutLinkObject ( struct IKompasAPIObject * PVal ) {
    HRESULT _hr = put_LinkObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3135)
inline IKompasAPIObjectPtr IHypertextReferenceParam::GetLinkObject ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_LinkObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3136)
inline void IHypertextReferenceParam::PutHypertextType ( enum ksHypertextTypeEnum PVal ) {
    HRESULT _hr = put_HypertextType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3137)
inline enum ksHypertextTypeEnum IHypertextReferenceParam::GetHypertextType ( ) {
    enum ksHypertextTypeEnum _result;
    HRESULT _hr = get_HypertextType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3138)
inline void IHypertextReferenceParam::PutTextLineIndex ( long PVal ) {
    HRESULT _hr = put_TextLineIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3139)
inline long IHypertextReferenceParam::GetTextLineIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_TextLineIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3140)
inline void IHypertextReferenceParam::PutBrackets ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Brackets(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3141)
inline VARIANT_BOOL IHypertextReferenceParam::GetBrackets ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Brackets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3142)
inline void IHypertextReferenceParam::PutPrecission ( long PVal ) {
    HRESULT _hr = put_Precission(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3143)
inline long IHypertextReferenceParam::GetPrecission ( ) {
    long _result = 0;
    HRESULT _hr = get_Precission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3144)
inline VARIANT_BOOL IHypertextReferenceParam::Destroy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Destroy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3145)
inline void IHypertextReferenceParam::PutPropertyId ( double PVal ) {
    HRESULT _hr = put_PropertyId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3146)
inline double IHypertextReferenceParam::GetPropertyId ( ) {
    double _result = 0;
    HRESULT _hr = get_PropertyId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITableCell wrapper method implementations
//

#pragma implementation_key(3147)
inline IKompasAPIObjectPtr ITableCell::GetText ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3148)
inline long ITableCell::GetCellID ( ) {
    long _result = 0;
    HRESULT _hr = get_CellID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3149)
inline long ITableCell::GetRow ( ) {
    long _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3150)
inline long ITableCell::GetColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITable wrapper method implementations
//

#pragma implementation_key(3151)
inline long ITable::GetRowsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3152)
inline long ITable::GetColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3153)
inline ITableCellPtr ITable::GetCell ( long RowN, long ColN ) {
    struct ITableCell * _result = 0;
    HRESULT _hr = get_Cell(RowN, ColN, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITableCellPtr(_result, false);
}

#pragma implementation_key(3154)
inline ITableCellPtr ITable::GetCellById ( long CellID ) {
    struct ITableCell * _result = 0;
    HRESULT _hr = get_CellById(CellID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITableCellPtr(_result, false);
}

#pragma implementation_key(3155)
inline VARIANT_BOOL ITable::AddColumn ( long ColN, VARIANT_BOOL Right ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddColumn(ColN, Right, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3156)
inline VARIANT_BOOL ITable::DeleteColumn ( long ColN ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteColumn(ColN, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3157)
inline VARIANT_BOOL ITable::AddRow ( long RowN, VARIANT_BOOL Down ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddRow(RowN, Down, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3158)
inline VARIANT_BOOL ITable::DeleteRow ( long RowN ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteRow(RowN, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3159)
inline VARIANT_BOOL ITable::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3160)
inline ITableRangePtr ITable::GetRange ( long BeginRow, long BeginColumn, long EndRow, long EndColumn ) {
    struct ITableRange * _result = 0;
    HRESULT _hr = get_Range(BeginRow, BeginColumn, EndRow, EndColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITableRangePtr(_result, false);
}

//
// interface IKompasDocument3DNotifyResult wrapper method implementations
//

#pragma implementation_key(3161)
inline enum ksDocument3DNotifyEnum IKompasDocument3DNotifyResult::GetNotifyType ( ) {
    enum ksDocument3DNotifyEnum _result;
    HRESULT _hr = get_NotifyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3162)
inline ksObj3dTypeEnum IKompasDocument3DNotifyResult::GetNotifyObjectType ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_NotifyObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3163)
inline IKompasAPIObjectPtr IKompasDocument3DNotifyResult::GetNotifyObject ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_NotifyObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3164)
inline enum ksRequestFilesTypeEnum IKompasDocument3DNotifyResult::GetRequestFilesType ( ) {
    enum ksRequestFilesTypeEnum _result;
    HRESULT _hr = get_RequestFilesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPoints3D wrapper method implementations
//

#pragma implementation_key(3165)
inline IPoint3DPtr IPoints3D::GetPoint3D ( const _variant_t & Index ) {
    struct IPoint3D * _result = 0;
    HRESULT _hr = get_Point3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPoint3DPtr(_result, false);
}

#pragma implementation_key(3166)
inline IPoint3DPtr IPoints3D::Add ( ) {
    struct IPoint3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPoint3DPtr(_result, false);
}

//
// interface IFeaturePattern wrapper method implementations
//

#pragma implementation_key(3167)
inline void IFeaturePattern::PutInitialObjects ( const _variant_t & Objects ) {
    HRESULT _hr = put_InitialObjects(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3168)
inline _variant_t IFeaturePattern::GetInitialObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3169)
inline void IFeaturePattern::PutInstanceDeletedIndexes ( const _variant_t & PVal ) {
    HRESULT _hr = put_InstanceDeletedIndexes(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3170)
inline _variant_t IFeaturePattern::GetInstanceDeletedIndexes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceDeletedIndexes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3171)
inline VARIANT_BOOL IFeaturePattern::Destroy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Destroy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3172)
inline VARIANT_BOOL IFeaturePattern::IsInitialObject ( struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsInitialObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3173)
inline VARIANT_BOOL IFeaturePattern::AddInitialObjects ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddInitialObjects(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3174)
inline VARIANT_BOOL IFeaturePattern::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3175)
inline VARIANT_BOOL IFeaturePattern::IsSuitableObject ( struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuitableObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3176)
inline void IFeaturePattern::PutGeometryPattern ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_GeometryPattern(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3177)
inline VARIANT_BOOL IFeaturePattern::GetGeometryPattern ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GeometryPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3178)
inline void IFeaturePattern::PutBasePointType ( enum ksPatternBasePointTypeEnum PVal ) {
    HRESULT _hr = put_BasePointType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3179)
inline enum ksPatternBasePointTypeEnum IFeaturePattern::GetBasePointType ( ) {
    enum ksPatternBasePointTypeEnum _result;
    HRESULT _hr = get_BasePointType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3180)
inline void IFeaturePattern::PutBasePoint ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BasePoint(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3181)
inline IModelObjectPtr IFeaturePattern::GetBasePoint ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BasePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3182)
inline IModelObjectPtr IFeaturePattern::GetExemplar ( long Index1, long Index2 ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Exemplar(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3183)
inline VARIANT_BOOL IFeaturePattern::GetExemplarsCounts ( long * Count1, long * Count2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetExemplarsCounts(Count1, Count2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFeaturePatterns wrapper method implementations
//

#pragma implementation_key(3184)
inline IFeaturePatternPtr IFeaturePatterns::GetFeaturePattern ( const _variant_t & Index ) {
    struct IFeaturePattern * _result = 0;
    HRESULT _hr = get_FeaturePattern(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFeaturePatternPtr(_result, false);
}

#pragma implementation_key(3185)
inline IFeaturePatternPtr IFeaturePatterns::Add ( ksObj3dTypeEnum Type ) {
    struct IFeaturePattern * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFeaturePatternPtr(_result, false);
}

//
// interface ISurfaceThickening wrapper method implementations
//

#pragma implementation_key(3186)
inline void ISurfaceThickening::PutFaces ( const _variant_t & Faces ) {
    HRESULT _hr = put_Faces(Faces);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3187)
inline _variant_t ISurfaceThickening::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISurfaceThickenings wrapper method implementations
//

#pragma implementation_key(3188)
inline ISurfaceThickeningPtr ISurfaceThickenings::GetSurfaceThickening ( const _variant_t & Index ) {
    struct ISurfaceThickening * _result = 0;
    HRESULT _hr = get_SurfaceThickening(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceThickeningPtr(_result, false);
}

#pragma implementation_key(3189)
inline ISurfaceThickeningPtr ISurfaceThickenings::Add ( ) {
    struct ISurfaceThickening * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceThickeningPtr(_result, false);
}

//
// interface IRotated wrapper method implementations
//

#pragma implementation_key(3190)
inline void IRotated::PutProfile ( struct IModelObject * Result ) {
    HRESULT _hr = put_Profile(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3191)
inline IModelObjectPtr IRotated::GetProfile ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Profile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3192)
inline void IRotated::PutAxis ( struct IModelObject * Result ) {
    HRESULT _hr = put_Axis(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3193)
inline IModelObjectPtr IRotated::GetAxis ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3194)
inline void IRotated::PutDirection ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3195)
inline ksDirectionTypeEnum IRotated::GetDirection ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3196)
inline void IRotated::PutToroidShapeType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ToroidShapeType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3197)
inline VARIANT_BOOL IRotated::GetToroidShapeType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToroidShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3198)
inline void IRotated::PutRotatedType ( VARIANT_BOOL Normal, enum ksRotatedTypeEnum PVal ) {
    HRESULT _hr = put_RotatedType(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3199)
inline enum ksRotatedTypeEnum IRotated::GetRotatedType ( VARIANT_BOOL Normal ) {
    enum ksRotatedTypeEnum _result;
    HRESULT _hr = get_RotatedType(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3200)
inline void IRotated::PutAngle ( VARIANT_BOOL Normal, double PVal ) {
    HRESULT _hr = put_Angle(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3201)
inline double IRotated::GetAngle ( VARIANT_BOOL Normal ) {
    double _result = 0;
    HRESULT _hr = get_Angle(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3202)
inline void IRotated::PutAngleObject ( VARIANT_BOOL Normal, struct IModelObject * PVal ) {
    HRESULT _hr = put_AngleObject(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3203)
inline IModelObjectPtr IRotated::GetAngleObject ( VARIANT_BOOL Normal ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AngleObject(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3204)
inline void IRotated::PutCutOffByPoint ( VARIANT_BOOL Normal, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CutOffByPoint(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3205)
inline VARIANT_BOOL IRotated::GetCutOffByPoint ( VARIANT_BOOL Normal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CutOffByPoint(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRotateds wrapper method implementations
//

#pragma implementation_key(3206)
inline IRotatedPtr IRotateds::GetRotated ( const _variant_t & Index ) {
    struct IRotated * _result = 0;
    HRESULT _hr = get_Rotated(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRotatedPtr(_result, false);
}

#pragma implementation_key(3207)
inline IRotatedPtr IRotateds::Add ( ksObj3dTypeEnum RotatedType ) {
    struct IRotated * _result = 0;
    HRESULT _hr = raw_Add(RotatedType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRotatedPtr(_result, false);
}

//
// interface IScaling3D wrapper method implementations
//

#pragma implementation_key(3208)
inline void IScaling3D::PutShell ( struct IKompasAPIObject * PVal ) {
    HRESULT _hr = put_Shell(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3209)
inline IKompasAPIObjectPtr IScaling3D::GetShell ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Shell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3210)
inline void IScaling3D::PutScale ( double Result ) {
    HRESULT _hr = put_Scale(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3211)
inline double IScaling3D::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3212)
inline void IScaling3D::PutBasePoint ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BasePoint(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3213)
inline IModelObjectPtr IScaling3D::GetBasePoint ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BasePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3214)
inline void IScaling3D::PutScalingType ( enum ksScalingTypeEnum Result ) {
    HRESULT _hr = put_ScalingType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3215)
inline enum ksScalingTypeEnum IScaling3D::GetScalingType ( ) {
    enum ksScalingTypeEnum _result;
    HRESULT _hr = get_ScalingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3216)
inline void IScaling3D::PutScaleX ( double Result ) {
    HRESULT _hr = put_ScaleX(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3217)
inline double IScaling3D::GetScaleX ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3218)
inline void IScaling3D::PutScaleY ( double Result ) {
    HRESULT _hr = put_ScaleY(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3219)
inline double IScaling3D::GetScaleY ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3220)
inline void IScaling3D::PutScaleZ ( double Result ) {
    HRESULT _hr = put_ScaleZ(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3221)
inline double IScaling3D::GetScaleZ ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3222)
inline void IScaling3D::PutCopySolids ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_CopySolids(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3223)
inline VARIANT_BOOL IScaling3D::GetCopySolids ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CopySolids(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3224)
inline void IScaling3D::PutScalingObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_ScalingObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3225)
inline _variant_t IScaling3D::GetScalingObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ScalingObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3226)
inline VARIANT_BOOL IScaling3D::GetCentrePoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCentrePoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3227)
inline VARIANT_BOOL IScaling3D::SetCentrePoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCentrePoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3228)
inline void IScaling3D::PutCentrePointBuildingType ( enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_CentrePointBuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3229)
inline enum ksPoint3DTypeEnum IScaling3D::GetCentrePointBuildingType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_CentrePointBuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3230)
inline IKompasAPIObjectPtr IScaling3D::GetCentrePointParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_CentrePointParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3231)
inline VARIANT_BOOL IScaling3D::HideCurves ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HideCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IScalings3D wrapper method implementations
//

#pragma implementation_key(3232)
inline IScaling3DPtr IScalings3D::GetScaling3D ( const _variant_t & Index ) {
    struct IScaling3D * _result = 0;
    HRESULT _hr = get_Scaling3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScaling3DPtr(_result, false);
}

#pragma implementation_key(3233)
inline IScaling3DPtr IScalings3D::Add ( ) {
    struct IScaling3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScaling3DPtr(_result, false);
}

//
// interface IBilletObsolete wrapper method implementations
//

#pragma implementation_key(3234)
inline void IBilletObsolete::PutFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_FileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3235)
inline _bstr_t IBilletObsolete::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IBilletsObsoletes wrapper method implementations
//

#pragma implementation_key(3236)
inline IBilletObsoletePtr IBilletsObsoletes::GetBilletObsolete ( const _variant_t & Index ) {
    struct IBilletObsolete * _result = 0;
    HRESULT _hr = get_BilletObsolete(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBilletObsoletePtr(_result, false);
}

#pragma implementation_key(3237)
inline IBilletObsoletePtr IBilletsObsoletes::Add ( _bstr_t FileName, VARIANT_BOOL Mirror ) {
    struct IBilletObsolete * _result = 0;
    HRESULT _hr = raw_Add(FileName, Mirror, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBilletObsoletePtr(_result, false);
}

//
// interface ICollectionGeometry wrapper method implementations
//

#pragma implementation_key(3238)
inline void ICollectionGeometry::PutGeometry ( const _variant_t & Objects ) {
    HRESULT _hr = put_Geometry(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3239)
inline _variant_t ICollectionGeometry::GetGeometry ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ICollectionsGeometry wrapper method implementations
//

#pragma implementation_key(3240)
inline ICollectionGeometryPtr ICollectionsGeometry::GetCollectionGeometry ( const _variant_t & Index ) {
    struct ICollectionGeometry * _result = 0;
    HRESULT _hr = get_CollectionGeometry(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICollectionGeometryPtr(_result, false);
}

#pragma implementation_key(3241)
inline ICollectionGeometryPtr ICollectionsGeometry::Add ( ) {
    struct ICollectionGeometry * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICollectionGeometryPtr(_result, false);
}

//
// interface IUserObject3D wrapper method implementations
//

#pragma implementation_key(3242)
inline IUnknownPtr IUserObject3D::GetUserParameters ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_UserParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3243)
inline void IUserObject3D::PutAssociationObject ( long Index, struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3244)
inline IModelObjectPtr IUserObject3D::GetAssociationObject ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3245)
inline long IUserObject3D::GetAssociationObjectCount ( ) {
    long _result = 0;
    HRESULT _hr = get_AssociationObjectCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3246)
inline VARIANT_BOOL IUserObject3D::ClearAssociationObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearAssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3247)
inline void IUserObject3D::PutPropertyObjectEditable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PropertyObjectEditable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3248)
inline VARIANT_BOOL IUserObject3D::GetPropertyObjectEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PropertyObjectEditable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUserObjects3D wrapper method implementations
//

#pragma implementation_key(3249)
inline IUserObject3DPtr IUserObjects3D::GetUserObject3D ( const _variant_t & Index ) {
    struct IUserObject3D * _result = 0;
    HRESULT _hr = get_UserObject3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserObject3DPtr(_result, false);
}

#pragma implementation_key(3250)
inline IUserObject3DPtr IUserObjects3D::Add ( ksObj3dTypeEnum Type ) {
    struct IUserObject3D * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserObject3DPtr(_result, false);
}

//
// interface IThread wrapper method implementations
//

#pragma implementation_key(3251)
inline IModelObjectPtr IThread::GetBaseObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3252)
inline void IThread::PutBaseObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BaseObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3253)
inline IModelObjectPtr IThread::GetInitialBorder ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_InitialBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3254)
inline void IThread::PutInitialBorder ( struct IModelObject * PVal ) {
    HRESULT _hr = put_InitialBorder(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3255)
inline IModelObjectPtr IThread::GetFinalBorder ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_FinalBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3256)
inline void IThread::PutFinalBorder ( struct IModelObject * PVal ) {
    HRESULT _hr = put_FinalBorder(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3257)
inline VARIANT_BOOL IThread::GetAutoLenght ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLenght(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3258)
inline void IThread::PutAutoLenght ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoLenght(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3259)
inline double IThread::GetLenght ( ) {
    double _result = 0;
    HRESULT _hr = get_Lenght(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3260)
inline void IThread::PutLenght ( double PVal ) {
    HRESULT _hr = put_Lenght(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3261)
inline void IThread::PutAutoDiameter ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoDiameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3262)
inline VARIANT_BOOL IThread::GetAutoDiameter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3263)
inline VARIANT_BOOL IThread::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3264)
inline void IThread::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3265)
inline VARIANT_BOOL IThread::GetBaseObjectAdjustment ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BaseObjectAdjustment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3266)
inline void IThread::PutBaseObjectAdjustment ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BaseObjectAdjustment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3267)
inline VARIANT_BOOL IThread::GetBaseObjectAdjustmentOffset1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BaseObjectAdjustmentOffset1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3268)
inline void IThread::PutBaseObjectAdjustmentOffset1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BaseObjectAdjustmentOffset1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3269)
inline VARIANT_BOOL IThread::GetBaseObjectAdjustmentOffset2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BaseObjectAdjustmentOffset2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3270)
inline void IThread::PutBaseObjectAdjustmentOffset2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BaseObjectAdjustmentOffset2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3271)
inline VARIANT_BOOL IThread::GetLeftThread ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LeftThread(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3272)
inline void IThread::PutLeftThread ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_LeftThread(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHole3D wrapper method implementations
//

#pragma implementation_key(3273)
inline double IHole3D::GetDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3274)
inline void IHole3D::PutDiameter ( double PVal ) {
    HRESULT _hr = put_Diameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3275)
inline double IHole3D::GetDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3276)
inline void IHole3D::PutDepth ( double PVal ) {
    HRESULT _hr = put_Depth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3277)
inline enum ksDepthTypeEnum IHole3D::GetDepthType ( ) {
    enum ksDepthTypeEnum _result;
    HRESULT _hr = get_DepthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3278)
inline void IHole3D::PutDepthType ( enum ksDepthTypeEnum PVal ) {
    HRESULT _hr = put_DepthType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3279)
inline enum ksEndFaceTypeEnum IHole3D::GetEndFaceType ( ) {
    enum ksEndFaceTypeEnum _result;
    HRESULT _hr = get_EndFaceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3280)
inline void IHole3D::PutEndFaceType ( enum ksEndFaceTypeEnum PVal ) {
    HRESULT _hr = put_EndFaceType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3281)
inline double IHole3D::GetEndFaceAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_EndFaceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3282)
inline void IHole3D::PutEndFaceAngle ( double PVal ) {
    HRESULT _hr = put_EndFaceAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3283)
inline enum ksHoleTypeEnum IHole3D::GetHoleType ( ) {
    enum ksHoleTypeEnum _result;
    HRESULT _hr = get_HoleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3284)
inline void IHole3D::PutHoleType ( enum ksHoleTypeEnum PVal ) {
    HRESULT _hr = put_HoleType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3285)
inline IModelObjectPtr IHole3D::GetDepthVertex ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DepthVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3286)
inline void IHole3D::PutDepthVertex ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DepthVertex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3287)
inline IModelObjectPtr IHole3D::GetDepthFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DepthFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3288)
inline void IHole3D::PutDepthFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DepthFace(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3289)
inline VARIANT_BOOL IHole3D::GetAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3290)
inline void IHole3D::PutAxis ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Axis(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3291)
inline IThreadPtr IHole3D::GetThread ( ) {
    struct IThread * _result = 0;
    HRESULT _hr = get_Thread(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThreadPtr(_result, false);
}

#pragma implementation_key(3292)
inline IKompasAPIObjectPtr IHole3D::GetHoleParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_HoleParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3293)
inline VARIANT_BOOL IHole3D::GetShowThread ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowThread(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3294)
inline void IHole3D::PutShowThread ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowThread(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHoles3D wrapper method implementations
//

#pragma implementation_key(3295)
inline IHole3DPtr IHoles3D::GetHole3D ( const _variant_t & Index ) {
    struct IHole3D * _result = 0;
    HRESULT _hr = get_Hole3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHole3DPtr(_result, false);
}

#pragma implementation_key(3296)
inline IHole3DPtr IHoles3D::Add ( ) {
    struct IHole3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHole3DPtr(_result, false);
}

//
// interface IChamfer wrapper method implementations
//

#pragma implementation_key(3297)
inline enum ksChamferBuildingTypeEnum IChamfer::GetBuildingType ( ) {
    enum ksChamferBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3298)
inline void IChamfer::PutBuildingType ( enum ksChamferBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3299)
inline _variant_t IChamfer::GetBaseObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3300)
inline void IChamfer::PutBaseObjects ( const _variant_t & PVal ) {
    HRESULT _hr = put_BaseObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3301)
inline double IChamfer::GetDistance1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3302)
inline void IChamfer::PutDistance1 ( double PVal ) {
    HRESULT _hr = put_Distance1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3303)
inline double IChamfer::GetDistance2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3304)
inline void IChamfer::PutDistance2 ( double PVal ) {
    HRESULT _hr = put_Distance2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3305)
inline double IChamfer::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3306)
inline void IChamfer::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3307)
inline void IChamfer::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3308)
inline VARIANT_BOOL IChamfer::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3309)
inline void IChamfer::PutTangent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Tangent(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3310)
inline VARIANT_BOOL IChamfer::GetTangent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Tangent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IChamfers wrapper method implementations
//

#pragma implementation_key(3311)
inline IChamferPtr IChamfers::GetChamfer ( const _variant_t & Index ) {
    struct IChamfer * _result = 0;
    HRESULT _hr = get_Chamfer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChamferPtr(_result, false);
}

#pragma implementation_key(3312)
inline IChamferPtr IChamfers::Add ( ) {
    struct IChamfer * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChamferPtr(_result, false);
}

//
// interface IFillet wrapper method implementations
//

#pragma implementation_key(3313)
inline enum ksFilletBuildingTypeEnum IFillet::GetBuildingType ( ) {
    enum ksFilletBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3314)
inline void IFillet::PutBuildingType ( enum ksFilletBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3315)
inline _variant_t IFillet::GetBaseObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3316)
inline void IFillet::PutBaseObjects ( const _variant_t & PVal ) {
    HRESULT _hr = put_BaseObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3317)
inline double IFillet::GetRadius1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3318)
inline void IFillet::PutRadius1 ( double PVal ) {
    HRESULT _hr = put_Radius1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3319)
inline double IFillet::GetRadius2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3320)
inline void IFillet::PutRadius2 ( double PVal ) {
    HRESULT _hr = put_Radius2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3321)
inline double IFillet::GetCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_Coefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3322)
inline void IFillet::PutCoefficient ( double PVal ) {
    HRESULT _hr = put_Coefficient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3323)
inline double IFillet::GetChord ( ) {
    double _result = 0;
    HRESULT _hr = get_Chord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3324)
inline void IFillet::PutChord ( double PVal ) {
    HRESULT _hr = put_Chord(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3325)
inline void IFillet::PutTangent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Tangent(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3326)
inline VARIANT_BOOL IFillet::GetTangent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Tangent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3327)
inline VARIANT_BOOL IFillet::GetSmoothCorner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmoothCorner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3328)
inline void IFillet::PutSmoothCorner ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SmoothCorner(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3329)
inline VARIANT_BOOL IFillet::GetRoundCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3330)
inline void IFillet::PutRoundCorners ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RoundCorners(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3331)
inline void IFillet::PutAutoSaveEdge ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoSaveEdge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3332)
inline VARIANT_BOOL IFillet::GetAutoSaveEdge ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSaveEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3333)
inline void IFillet::PutSaveEdge ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveEdge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3334)
inline VARIANT_BOOL IFillet::GetSaveEdge ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3335)
inline void IFillet::PutStopFilletOn ( VARIANT_BOOL First, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StopFilletOn(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3336)
inline VARIANT_BOOL IFillet::GetStopFilletOn ( VARIANT_BOOL First ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StopFilletOn(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3337)
inline void IFillet::PutStopFilletOffsetMode ( VARIANT_BOOL First, enum ksFilletOffsetModeEnum PVal ) {
    HRESULT _hr = put_StopFilletOffsetMode(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3338)
inline enum ksFilletOffsetModeEnum IFillet::GetStopFilletOffsetMode ( VARIANT_BOOL First ) {
    enum ksFilletOffsetModeEnum _result;
    HRESULT _hr = get_StopFilletOffsetMode(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3339)
inline void IFillet::PutStopFilletOffset ( VARIANT_BOOL First, double PVal ) {
    HRESULT _hr = put_StopFilletOffset(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3340)
inline double IFillet::GetStopFilletOffset ( VARIANT_BOOL First ) {
    double _result = 0;
    HRESULT _hr = get_StopFilletOffset(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3341)
inline void IFillet::PutStopFilletCutObject ( VARIANT_BOOL First, struct IModelObject * PVal ) {
    HRESULT _hr = put_StopFilletCutObject(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3342)
inline IModelObjectPtr IFillet::GetStopFilletCutObject ( VARIANT_BOOL First ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_StopFilletCutObject(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3343)
inline void IFillet::PutStopFilletCutByObject ( VARIANT_BOOL First, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StopFilletCutByObject(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3344)
inline VARIANT_BOOL IFillet::GetStopFilletCutByObject ( VARIANT_BOOL First ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StopFilletCutByObject(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3345)
inline void IFillet::PutStopFilletCutPointIndex ( VARIANT_BOOL First, long PVal ) {
    HRESULT _hr = put_StopFilletCutPointIndex(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3346)
inline long IFillet::GetStopFilletCutPointIndex ( VARIANT_BOOL First ) {
    long _result = 0;
    HRESULT _hr = get_StopFilletCutPointIndex(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3347)
inline void IFillet::PutStopFilletDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StopFilletDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3348)
inline VARIANT_BOOL IFillet::GetStopFilletDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StopFilletDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3349)
inline void IFillet::PutVariableRadiusOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_VariableRadiusOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3350)
inline VARIANT_BOOL IFillet::GetVariableRadiusOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VariableRadiusOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3351)
inline long IFillet::GetVariableRadiusCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VariableRadiusCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3352)
inline VARIANT_BOOL IFillet::AddVariableRadius ( struct IModelObject * PointObject, double Radius, double Position, VARIANT_BOOL PositionType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddVariableRadius(PointObject, Radius, Position, PositionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3353)
inline VARIANT_BOOL IFillet::VariableRadiusClear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_VariableRadiusClear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3354)
inline VARIANT_BOOL IFillet::VariableRadiusDelete ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_VariableRadiusDelete(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3355)
inline void IFillet::PutVariableRadius ( long Index, double PVal ) {
    HRESULT _hr = put_VariableRadius(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3356)
inline double IFillet::GetVariableRadius ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_VariableRadius(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3357)
inline void IFillet::PutVariableRadiusPosition ( long Index, double PVal ) {
    HRESULT _hr = put_VariableRadiusPosition(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3358)
inline double IFillet::GetVariableRadiusPosition ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_VariableRadiusPosition(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3359)
inline void IFillet::PutVariableRadiusPositionLenght ( long Index, double PVal ) {
    HRESULT _hr = put_VariableRadiusPositionLenght(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3360)
inline double IFillet::GetVariableRadiusPositionLenght ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_VariableRadiusPositionLenght(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3361)
inline IModelObjectPtr IFillet::GetVariableRadiusEdge ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_VariableRadiusEdge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IFillets wrapper method implementations
//

#pragma implementation_key(3362)
inline IFilletPtr IFillets::GetFillet ( const _variant_t & Index ) {
    struct IFillet * _result = 0;
    HRESULT _hr = get_Fillet(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilletPtr(_result, false);
}

#pragma implementation_key(3363)
inline IFilletPtr IFillets::Add ( ) {
    struct IFillet * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilletPtr(_result, false);
}

//
// interface IIncline wrapper method implementations
//

#pragma implementation_key(3364)
inline _variant_t IIncline::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3365)
inline void IIncline::PutFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_Faces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3366)
inline double IIncline::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3367)
inline void IIncline::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3368)
inline VARIANT_BOOL IIncline::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3369)
inline void IIncline::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3370)
inline IModelObjectPtr IIncline::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3371)
inline void IIncline::PutPlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Plane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IInclines wrapper method implementations
//

#pragma implementation_key(3372)
inline IInclinePtr IInclines::GetIncline ( const _variant_t & Index ) {
    struct IIncline * _result = 0;
    HRESULT _hr = get_Incline(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInclinePtr(_result, false);
}

#pragma implementation_key(3373)
inline IInclinePtr IInclines::Add ( ) {
    struct IIncline * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInclinePtr(_result, false);
}

//
// interface IShell wrapper method implementations
//

#pragma implementation_key(3374)
inline void IShell::PutDeletedFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_DeletedFaces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3375)
inline _variant_t IShell::GetDeletedFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DeletedFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3376)
inline void IShell::PutThinType ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_ThinType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3377)
inline ksDirectionTypeEnum IShell::GetThinType ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_ThinType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3378)
inline void IShell::PutThickness ( double PVal ) {
    HRESULT _hr = put_Thickness(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3379)
inline double IShell::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3380)
inline VARIANT_BOOL IShell::SetFaces ( const _variant_t & Faces, VARIANT_BOOL TangentFaces ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetFaces(Faces, TangentFaces, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IShells wrapper method implementations
//

#pragma implementation_key(3381)
inline IShellPtr IShells::GetShell ( const _variant_t & Index ) {
    struct IShell * _result = 0;
    HRESULT _hr = get_Shell(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShellPtr(_result, false);
}

#pragma implementation_key(3382)
inline IShellPtr IShells::Add ( ) {
    struct IShell * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShellPtr(_result, false);
}

//
// interface IBoolean wrapper method implementations
//

#pragma implementation_key(3383)
inline enum ksBooleanType IBoolean::GetBooleanType ( ) {
    enum ksBooleanType _result;
    HRESULT _hr = get_BooleanType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3384)
inline void IBoolean::PutBooleanType ( enum ksBooleanType PVal ) {
    HRESULT _hr = put_BooleanType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3385)
inline _variant_t IBoolean::GetBodies ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3386)
inline void IBoolean::PutBodies ( const _variant_t & PVal ) {
    HRESULT _hr = put_Bodies(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3387)
inline IKompasAPIObjectPtr IBoolean::GetBaseObject ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3388)
inline void IBoolean::PutBaseObject ( struct IKompasAPIObject * PVal ) {
    HRESULT _hr = put_BaseObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3389)
inline VARIANT_BOOL IBoolean::GetSaveCopyBaseObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveCopyBaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3390)
inline void IBoolean::PutSaveCopyBaseObject ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveCopyBaseObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3391)
inline _variant_t IBoolean::GetModifyObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifyObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3392)
inline void IBoolean::PutModifyObjects ( const _variant_t & PVal ) {
    HRESULT _hr = put_ModifyObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3393)
inline VARIANT_BOOL IBoolean::GetSaveCopyModifyObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveCopyModifyObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3394)
inline void IBoolean::PutSaveCopyModifyObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveCopyModifyObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBooleans wrapper method implementations
//

#pragma implementation_key(3395)
inline IBooleanPtr IBooleans::GetBoolean ( const _variant_t & Index ) {
    struct IBoolean * _result = 0;
    HRESULT _hr = get_Boolean(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBooleanPtr(_result, false);
}

#pragma implementation_key(3396)
inline IBooleanPtr IBooleans::Add ( ) {
    struct IBoolean * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBooleanPtr(_result, false);
}

//
// interface ICut wrapper method implementations
//

#pragma implementation_key(3397)
inline void ICut::PutCutObject ( struct IModelObject * CurrentObject ) {
    HRESULT _hr = put_CutObject(CurrentObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3398)
inline IModelObjectPtr ICut::GetCutObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CutObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3399)
inline void ICut::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3400)
inline VARIANT_BOOL ICut::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3401)
inline void ICut::PutChooseType ( enum ksChooseType CurrentValue ) {
    HRESULT _hr = put_ChooseType(CurrentValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3402)
inline enum ksChooseType ICut::GetChooseType ( ) {
    enum ksChooseType _result;
    HRESULT _hr = get_ChooseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3403)
inline void ICut::PutChoosePartsType ( enum ksChoosePartsType CurrentValue ) {
    HRESULT _hr = put_ChoosePartsType(CurrentValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3404)
inline enum ksChoosePartsType ICut::GetChoosePartsType ( ) {
    enum ksChoosePartsType _result;
    HRESULT _hr = get_ChoosePartsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3405)
inline void ICut::PutChooseBodies ( const _variant_t & Result ) {
    HRESULT _hr = put_ChooseBodies(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3406)
inline _variant_t ICut::GetChooseBodies ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChooseBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3407)
inline void ICut::PutChooseParts ( const _variant_t & Result ) {
    HRESULT _hr = put_ChooseParts(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3408)
inline _variant_t ICut::GetChooseParts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChooseParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3409)
inline void ICut::PutBuildingType ( enum ksCutBuildingTypeEnum Value ) {
    HRESULT _hr = put_BuildingType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3410)
inline enum ksCutBuildingTypeEnum ICut::GetBuildingType ( ) {
    enum ksCutBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICuts wrapper method implementations
//

#pragma implementation_key(3411)
inline ICutPtr ICuts::GetCut ( const _variant_t & Index ) {
    struct ICut * _result = 0;
    HRESULT _hr = get_Cut(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutPtr(_result, false);
}

#pragma implementation_key(3412)
inline ICutPtr ICuts::Add ( ) {
    struct ICut * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutPtr(_result, false);
}

//
// interface ICoupling wrapper method implementations
//

#pragma implementation_key(3413)
inline long ICoupling::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3414)
inline IModelObjectPtr ICoupling::GetSketch ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Sketch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3415)
inline IModelObjectPtr ICoupling::GetPositionObject ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_PositionObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3416)
inline void ICoupling::PutPositionObject ( long Index, struct IModelObject * NewObject ) {
    HRESULT _hr = put_PositionObject(Index, NewObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3417)
inline void ICoupling::PutPosition ( long Index, double PVal ) {
    HRESULT _hr = put_Position(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3418)
inline double ICoupling::GetPosition ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_Position(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3419)
inline void ICoupling::PutPositionOffset ( long Index, double PVal ) {
    HRESULT _hr = put_PositionOffset(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3420)
inline double ICoupling::GetPositionOffset ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_PositionOffset(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3421)
inline VARIANT_BOOL ICoupling::GetPoint ( long Index, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3422)
inline VARIANT_BOOL ICoupling::SetPoint ( long Index, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3423)
inline VARIANT_BOOL ICoupling::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILoft wrapper method implementations
//

#pragma implementation_key(3424)
inline void ILoft::PutOperationResult ( enum ksOperationResultEnum Result ) {
    HRESULT _hr = put_OperationResult(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3425)
inline enum ksOperationResultEnum ILoft::GetOperationResult ( ) {
    enum ksOperationResultEnum _result;
    HRESULT _hr = get_OperationResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3426)
inline void ILoft::PutSketchs ( const _variant_t & Result ) {
    HRESULT _hr = put_Sketchs(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3427)
inline _variant_t ILoft::GetSketchs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Sketchs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3428)
inline void ILoft::PutAxisLine ( struct IModelObject * PVal ) {
    HRESULT _hr = put_AxisLine(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3429)
inline IModelObjectPtr ILoft::GetAxisLine ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AxisLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3430)
inline void ILoft::PutClosed ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Closed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3431)
inline VARIANT_BOOL ILoft::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3432)
inline void ILoft::PutBuildingType ( VARIANT_BOOL BeginSection, enum ksLoftBuildingType Result ) {
    HRESULT _hr = put_BuildingType(BeginSection, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3433)
inline enum ksLoftBuildingType ILoft::GetBuildingType ( VARIANT_BOOL BeginSection ) {
    enum ksLoftBuildingType _result;
    HRESULT _hr = get_BuildingType(BeginSection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3434)
inline void ILoft::PutBuildingObject ( VARIANT_BOOL BeginSection, struct IModelObject * Result ) {
    HRESULT _hr = put_BuildingObject(BeginSection, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3435)
inline IModelObjectPtr ILoft::GetBuildingObject ( VARIANT_BOOL BeginSection ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BuildingObject(BeginSection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3436)
inline void ILoft::PutDirectionalLines ( const _variant_t & PVal ) {
    HRESULT _hr = put_DirectionalLines(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3437)
inline _variant_t ILoft::GetDirectionalLines ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DirectionalLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3438)
inline ICouplingPtr ILoft::AddCoupling ( ) {
    struct ICoupling * _result = 0;
    HRESULT _hr = raw_AddCoupling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICouplingPtr(_result, false);
}

#pragma implementation_key(3439)
inline long ILoft::GetCouplingsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CouplingsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3440)
inline ICouplingPtr ILoft::GetCoupling ( long Index ) {
    struct ICoupling * _result = 0;
    HRESULT _hr = get_Coupling(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICouplingPtr(_result, false);
}

#pragma implementation_key(3441)
inline VARIANT_BOOL ILoft::DeleteCoupling ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteCoupling(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3442)
inline VARIANT_BOOL ILoft::ClearCouplings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearCouplings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILofts wrapper method implementations
//

#pragma implementation_key(3443)
inline ILoftPtr ILofts::GetLoft ( const _variant_t & Index ) {
    struct ILoft * _result = 0;
    HRESULT _hr = get_Loft(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILoftPtr(_result, false);
}

#pragma implementation_key(3444)
inline ILoftPtr ILofts::Add ( ksObj3dTypeEnum LoftType ) {
    struct ILoft * _result = 0;
    HRESULT _hr = raw_Add(LoftType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILoftPtr(_result, false);
}

//
// interface IEvolution wrapper method implementations
//

#pragma implementation_key(3445)
inline void IEvolution::PutOperationResult ( enum ksOperationResultEnum Result ) {
    HRESULT _hr = put_OperationResult(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3446)
inline enum ksOperationResultEnum IEvolution::GetOperationResult ( ) {
    enum ksOperationResultEnum _result;
    HRESULT _hr = get_OperationResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3447)
inline void IEvolution::PutSketch ( struct IModelObject * Result ) {
    HRESULT _hr = put_Sketch(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3448)
inline IModelObjectPtr IEvolution::GetSketch ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3449)
inline void IEvolution::PutEdges ( const _variant_t & Result ) {
    HRESULT _hr = put_Edges(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3450)
inline _variant_t IEvolution::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3451)
inline void IEvolution::PutSketchShiftType ( enum ksEvolutionShiftSketchTypeEnum Result ) {
    HRESULT _hr = put_SketchShiftType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3452)
inline enum ksEvolutionShiftSketchTypeEnum IEvolution::GetSketchShiftType ( ) {
    enum ksEvolutionShiftSketchTypeEnum _result;
    HRESULT _hr = get_SketchShiftType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3453)
inline double IEvolution::GetPathLength ( enum ksLengthUnitsEnum Unit ) {
    double _result = 0;
    HRESULT _hr = raw_GetPathLength(Unit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3454)
inline void IEvolution::PutBySurfaceNormal ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BySurfaceNormal(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3455)
inline VARIANT_BOOL IEvolution::GetBySurfaceNormal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BySurfaceNormal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3456)
inline void IEvolution::PutEvolutionVersion ( enum ksEvolutionVersionEnum Result ) {
    HRESULT _hr = put_EvolutionVersion(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3457)
inline enum ksEvolutionVersionEnum IEvolution::GetEvolutionVersion ( ) {
    enum ksEvolutionVersionEnum _result;
    HRESULT _hr = get_EvolutionVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEvolutions wrapper method implementations
//

#pragma implementation_key(3458)
inline IEvolutionPtr IEvolutions::GetEvolution ( const _variant_t & Index ) {
    struct IEvolution * _result = 0;
    HRESULT _hr = get_Evolution(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEvolutionPtr(_result, false);
}

#pragma implementation_key(3459)
inline IEvolutionPtr IEvolutions::Add ( ksObj3dTypeEnum EvolutionType ) {
    struct IEvolution * _result = 0;
    HRESULT _hr = raw_Add(EvolutionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEvolutionPtr(_result, false);
}

//
// interface IUnionComponents wrapper method implementations
//

#pragma implementation_key(3460)
inline void IUnionComponents::PutParts ( const _variant_t & Result ) {
    HRESULT _hr = put_Parts(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3461)
inline _variant_t IUnionComponents::GetParts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IUnionsComponents wrapper method implementations
//

#pragma implementation_key(3462)
inline IUnionComponentsPtr IUnionsComponents::GetUnionComponents ( const _variant_t & Index ) {
    struct IUnionComponents * _result = 0;
    HRESULT _hr = get_UnionComponents(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnionComponentsPtr(_result, false);
}

#pragma implementation_key(3463)
inline IUnionComponentsPtr IUnionsComponents::Add ( ) {
    struct IUnionComponents * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnionComponentsPtr(_result, false);
}

//
// interface IMoldCavity wrapper method implementations
//

#pragma implementation_key(3464)
inline void IMoldCavity::PutParts ( const _variant_t & Result ) {
    HRESULT _hr = put_Parts(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3465)
inline _variant_t IMoldCavity::GetParts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3466)
inline double IMoldCavity::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3467)
inline void IMoldCavity::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3468)
inline IModelObjectPtr IMoldCavity::GetScaleCentre ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_ScaleCentre(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3469)
inline void IMoldCavity::PutScaleCentre ( struct IModelObject * PVal ) {
    HRESULT _hr = put_ScaleCentre(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMoldCavities wrapper method implementations
//

#pragma implementation_key(3470)
inline IMoldCavityPtr IMoldCavities::GetMoldCavity ( const _variant_t & Index ) {
    struct IMoldCavity * _result = 0;
    HRESULT _hr = get_MoldCavity(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMoldCavityPtr(_result, false);
}

#pragma implementation_key(3471)
inline IMoldCavityPtr IMoldCavities::Add ( ) {
    struct IMoldCavity * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMoldCavityPtr(_result, false);
}

//
// interface IMacroObject3D wrapper method implementations
//

#pragma implementation_key(3472)
inline void IMacroObject3D::PutObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_Objects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3473)
inline _variant_t IMacroObject3D::GetObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3474)
inline void IMacroObject3D::PutStaffVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StaffVisible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3475)
inline VARIANT_BOOL IMacroObject3D::GetStaffVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StaffVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3476)
inline void IMacroObject3D::PutDoubleClickEditable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DoubleClickEditable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3477)
inline VARIANT_BOOL IMacroObject3D::GetDoubleClickEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DoubleClickEditable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3478)
inline void IMacroObject3D::PutPropertyObjectEditable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PropertyObjectEditable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3479)
inline VARIANT_BOOL IMacroObject3D::GetPropertyObjectEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PropertyObjectEditable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3480)
inline void IMacroObject3D::PutAssociationObject ( long Index, struct IKompasAPIObject * PVal ) {
    HRESULT _hr = put_AssociationObject(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3481)
inline IKompasAPIObjectPtr IMacroObject3D::GetAssociationObject ( long Index ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_AssociationObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3482)
inline long IMacroObject3D::GetAssociationObjectCount ( ) {
    long _result = 0;
    HRESULT _hr = get_AssociationObjectCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3483)
inline VARIANT_BOOL IMacroObject3D::ClearAssociationObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearAssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3484)
inline VARIANT_BOOL IMacroObject3D::Destroy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Destroy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMacroObjects3D wrapper method implementations
//

#pragma implementation_key(3485)
inline IMacroObject3DPtr IMacroObjects3D::GetMacroObject3D ( const _variant_t & Index ) {
    struct IMacroObject3D * _result = 0;
    HRESULT _hr = get_MacroObject3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMacroObject3DPtr(_result, false);
}

#pragma implementation_key(3486)
inline IMacroObject3DPtr IMacroObjects3D::Add ( ) {
    struct IMacroObject3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMacroObject3DPtr(_result, false);
}

//
// interface IBodyReposition wrapper method implementations
//

#pragma implementation_key(3487)
inline void IBodyReposition::PutRepositionBody ( struct IKompasAPIObject * Result ) {
    HRESULT _hr = put_RepositionBody(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3488)
inline IKompasAPIObjectPtr IBodyReposition::GetRepositionBody ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_RepositionBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(3489)
inline IModelObjectPtr IBodyReposition::GetRepositionCentre ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_RepositionCentre(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3490)
inline void IBodyReposition::PutRepositionCentre ( struct IModelObject * PVal ) {
    HRESULT _hr = put_RepositionCentre(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3491)
inline VARIANT_BOOL IBodyReposition::GetCopyBoby ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CopyBoby(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3492)
inline void IBodyReposition::PutCopyBoby ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CopyBoby(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3493)
inline ILocalCoordinateSystemPtr IBodyReposition::GetPosition ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

//
// interface IBodyRepositions wrapper method implementations
//

#pragma implementation_key(3494)
inline IBodyRepositionPtr IBodyRepositions::GetBodyReposition ( const _variant_t & Index ) {
    struct IBodyReposition * _result = 0;
    HRESULT _hr = get_BodyReposition(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyRepositionPtr(_result, false);
}

#pragma implementation_key(3495)
inline IBodyRepositionPtr IBodyRepositions::Add ( ) {
    struct IBodyReposition * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyRepositionPtr(_result, false);
}

//
// interface IFullFillet wrapper method implementations
//

#pragma implementation_key(3496)
inline _variant_t IFullFillet::GetSide1Faces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Side1Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3497)
inline void IFullFillet::PutSide1Faces ( const _variant_t & PVal ) {
    HRESULT _hr = put_Side1Faces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3498)
inline _variant_t IFullFillet::GetSide2Faces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Side2Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3499)
inline void IFullFillet::PutSide2Faces ( const _variant_t & PVal ) {
    HRESULT _hr = put_Side2Faces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3500)
inline _variant_t IFullFillet::GetCenterFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CenterFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3501)
inline void IFullFillet::PutCenterFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_CenterFaces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3502)
inline void IFullFillet::PutTangent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Tangent(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3503)
inline VARIANT_BOOL IFullFillet::GetTangent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Tangent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFullFillets wrapper method implementations
//

#pragma implementation_key(3504)
inline IFullFilletPtr IFullFillets::GetFullFillet ( const _variant_t & Index ) {
    struct IFullFillet * _result = 0;
    HRESULT _hr = get_FullFillet(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFullFilletPtr(_result, false);
}

#pragma implementation_key(3505)
inline IFullFilletPtr IFullFillets::Add ( ) {
    struct IFullFillet * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFullFilletPtr(_result, false);
}

//
// interface IWireFrame3D wrapper method implementations
//

#pragma implementation_key(3506)
inline long IWireFrame3D::GetVertexCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VertexCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3507)
inline long IWireFrame3D::GetEdgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3508)
inline IModelObjectPtr IWireFrame3D::GetVertex ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Vertex(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3509)
inline IModelObjectPtr IWireFrame3D::GetEdge ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Edge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3510)
inline VARIANT_BOOL IWireFrame3D::AddVertex ( struct IKompasAPIObject * Obj ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddVertex(Obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3511)
inline VARIANT_BOOL IWireFrame3D::AddVertexByPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddVertexByPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3512)
inline VARIANT_BOOL IWireFrame3D::AddEdge ( struct IKompasAPIObject * Obj ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddEdge(Obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3513)
inline VARIANT_BOOL IWireFrame3D::ClearVertexes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearVertexes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3514)
inline VARIANT_BOOL IWireFrame3D::ClearEdges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearEdges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWireFrames3D wrapper method implementations
//

#pragma implementation_key(3515)
inline IWireFrame3DPtr IWireFrames3D::GetWireFrame3D ( const _variant_t & Index ) {
    struct IWireFrame3D * _result = 0;
    HRESULT _hr = get_WireFrame3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWireFrame3DPtr(_result, false);
}

#pragma implementation_key(3516)
inline IWireFrame3DPtr IWireFrames3D::Add ( ) {
    struct IWireFrame3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWireFrame3DPtr(_result, false);
}

//
// interface ISplitSolid wrapper method implementations
//

#pragma implementation_key(3517)
inline void ISplitSolid::PutCutObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_CutObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3518)
inline _variant_t ISplitSolid::GetCutObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CutObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISplitSolids wrapper method implementations
//

#pragma implementation_key(3519)
inline ISplitSolidPtr ISplitSolids::GetSplitSolid ( const _variant_t & Index ) {
    struct ISplitSolid * _result = 0;
    HRESULT _hr = get_SplitSolid(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplitSolidPtr(_result, false);
}

#pragma implementation_key(3520)
inline ISplitSolidPtr ISplitSolids::Add ( ) {
    struct ISplitSolid * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplitSolidPtr(_result, false);
}

//
// interface IExtrusion1 wrapper method implementations
//

#pragma implementation_key(3521)
inline void IExtrusion1::PutProfile ( struct IModelObject * Result ) {
    HRESULT _hr = put_Profile(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3522)
inline IModelObjectPtr IExtrusion1::GetProfile ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Profile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3523)
inline void IExtrusion1::PutDirectionObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_DirectionObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3524)
inline IModelObjectPtr IExtrusion1::GetDirectionObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirectionObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3525)
inline IVector3DPtr IExtrusion1::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(3526)
inline void IExtrusion1::PutCutOffByPoint ( VARIANT_BOOL Normal, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CutOffByPoint(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3527)
inline VARIANT_BOOL IExtrusion1::GetCutOffByPoint ( VARIANT_BOOL Normal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CutOffByPoint(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3528)
inline void IExtrusion1::PutOperationResult ( enum ksOperationResultEnum Result ) {
    HRESULT _hr = put_OperationResult(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3529)
inline enum ksOperationResultEnum IExtrusion1::GetOperationResult ( ) {
    enum ksOperationResultEnum _result;
    HRESULT _hr = get_OperationResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3530)
inline void IExtrusion1::PutProfiles ( const _variant_t & Profiles ) {
    HRESULT _hr = put_Profiles(Profiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3531)
inline _variant_t IExtrusion1::GetProfiles ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Profiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISheetMetalBend wrapper method implementations
//

#pragma implementation_key(3532)
inline void ISheetMetalBend::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3533)
inline VARIANT_BOOL ISheetMetalBend::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3534)
inline void ISheetMetalBend::PutDisposal ( enum ksBendDisposalEnum PVal ) {
    HRESULT _hr = put_Disposal(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3535)
inline enum ksBendDisposalEnum ISheetMetalBend::GetDisposal ( ) {
    enum ksBendDisposalEnum _result;
    HRESULT _hr = get_Disposal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3536)
inline void ISheetMetalBend::PutWidth ( double PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3537)
inline double ISheetMetalBend::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3538)
inline void ISheetMetalBend::PutLengthType ( enum ksBendLengthTypeEnum PVal ) {
    HRESULT _hr = put_LengthType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3539)
inline enum ksBendLengthTypeEnum ISheetMetalBend::GetLengthType ( ) {
    enum ksBendLengthTypeEnum _result;
    HRESULT _hr = get_LengthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3540)
inline void ISheetMetalBend::PutInternalLength ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InternalLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3541)
inline VARIANT_BOOL ISheetMetalBend::GetInternalLength ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InternalLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3542)
inline void ISheetMetalBend::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3543)
inline double ISheetMetalBend::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3544)
inline void ISheetMetalBend::PutAngleType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AngleType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3545)
inline VARIANT_BOOL ISheetMetalBend::GetAngleType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AngleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3546)
inline void ISheetMetalBend::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3547)
inline double ISheetMetalBend::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3548)
inline void ISheetMetalBend::PutOffsetType ( enum ksBendOffsetTypeEnum PVal ) {
    HRESULT _hr = put_OffsetType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3549)
inline enum ksBendOffsetTypeEnum ISheetMetalBend::GetOffsetType ( ) {
    enum ksBendOffsetTypeEnum _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3550)
inline void ISheetMetalBend::PutOffset ( double PVal ) {
    HRESULT _hr = put_Offset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3551)
inline double ISheetMetalBend::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3552)
inline void ISheetMetalBend::PutStraighten ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Straighten(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3553)
inline VARIANT_BOOL ISheetMetalBend::GetStraighten ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Straighten(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3554)
inline void ISheetMetalBend::PutLeftSideType ( enum ksBendSideTypeEnum PVal ) {
    HRESULT _hr = put_LeftSideType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3555)
inline enum ksBendSideTypeEnum ISheetMetalBend::GetLeftSideType ( ) {
    enum ksBendSideTypeEnum _result;
    HRESULT _hr = get_LeftSideType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3556)
inline void ISheetMetalBend::PutDistanceLeftSide ( double PVal ) {
    HRESULT _hr = put_DistanceLeftSide(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3557)
inline double ISheetMetalBend::GetDistanceLeftSide ( ) {
    double _result = 0;
    HRESULT _hr = get_DistanceLeftSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3558)
inline void ISheetMetalBend::PutLeftSideAngle ( double PVal ) {
    HRESULT _hr = put_LeftSideAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3559)
inline double ISheetMetalBend::GetLeftSideAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftSideAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3560)
inline void ISheetMetalBend::PutDeviationLeftSide ( double PVal ) {
    HRESULT _hr = put_DeviationLeftSide(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3561)
inline double ISheetMetalBend::GetDeviationLeftSide ( ) {
    double _result = 0;
    HRESULT _hr = get_DeviationLeftSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3562)
inline void ISheetMetalBend::PutWideningLeftSide ( double PVal ) {
    HRESULT _hr = put_WideningLeftSide(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3563)
inline double ISheetMetalBend::GetWideningLeftSide ( ) {
    double _result = 0;
    HRESULT _hr = get_WideningLeftSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3564)
inline void ISheetMetalBend::PutRightSideType ( enum ksBendSideTypeEnum PVal ) {
    HRESULT _hr = put_RightSideType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3565)
inline enum ksBendSideTypeEnum ISheetMetalBend::GetRightSideType ( ) {
    enum ksBendSideTypeEnum _result;
    HRESULT _hr = get_RightSideType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3566)
inline void ISheetMetalBend::PutDistanceRightSide ( double PVal ) {
    HRESULT _hr = put_DistanceRightSide(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3567)
inline double ISheetMetalBend::GetDistanceRightSide ( ) {
    double _result = 0;
    HRESULT _hr = get_DistanceRightSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3568)
inline void ISheetMetalBend::PutRightSideAngle ( double PVal ) {
    HRESULT _hr = put_RightSideAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3569)
inline double ISheetMetalBend::GetRightSideAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RightSideAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3570)
inline void ISheetMetalBend::PutDeviationRightSide ( double PVal ) {
    HRESULT _hr = put_DeviationRightSide(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3571)
inline double ISheetMetalBend::GetDeviationRightSide ( ) {
    double _result = 0;
    HRESULT _hr = get_DeviationRightSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3572)
inline void ISheetMetalBend::PutWideningRightSide ( double PVal ) {
    HRESULT _hr = put_WideningRightSide(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3573)
inline double ISheetMetalBend::GetWideningRightSide ( ) {
    double _result = 0;
    HRESULT _hr = get_WideningRightSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3574)
inline void ISheetMetalBend::PutWithoutAngleRelease ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithoutAngleRelease(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3575)
inline VARIANT_BOOL ISheetMetalBend::GetWithoutAngleRelease ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithoutAngleRelease(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3576)
inline void ISheetMetalBend::PutWithoutBendRelease ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithoutBendRelease(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3577)
inline VARIANT_BOOL ISheetMetalBend::GetWithoutBendRelease ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithoutBendRelease(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3578)
inline void ISheetMetalBend::PutDismissalWithWidth ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DismissalWithWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3579)
inline VARIANT_BOOL ISheetMetalBend::GetDismissalWithWidth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DismissalWithWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3580)
inline void ISheetMetalBend::PutBendRelease ( enum ksBendReleaseTypeEnum PVal ) {
    HRESULT _hr = put_BendRelease(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3581)
inline enum ksBendReleaseTypeEnum ISheetMetalBend::GetBendRelease ( ) {
    enum ksBendReleaseTypeEnum _result;
    HRESULT _hr = get_BendRelease(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3582)
inline void ISheetMetalBend::PutDismissalWidth ( double PVal ) {
    HRESULT _hr = put_DismissalWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3583)
inline double ISheetMetalBend::GetDismissalWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_DismissalWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3584)
inline void ISheetMetalBend::PutDismissalDepth ( double PVal ) {
    HRESULT _hr = put_DismissalDepth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3585)
inline double ISheetMetalBend::GetDismissalDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_DismissalDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3586)
inline void ISheetMetalBend::PutDismissalAngleType ( enum ksBendAngleReleaseTypeEnum PVal ) {
    HRESULT _hr = put_DismissalAngleType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3587)
inline enum ksBendAngleReleaseTypeEnum ISheetMetalBend::GetDismissalAngleType ( ) {
    enum ksBendAngleReleaseTypeEnum _result;
    HRESULT _hr = get_DismissalAngleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3588)
inline void ISheetMetalBend::PutBendObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_BendObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3589)
inline IModelObjectPtr ISheetMetalBend::GetBendObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BendObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3590)
inline void ISheetMetalBend::PutInternalRadius ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InternalRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3591)
inline VARIANT_BOOL ISheetMetalBend::GetInternalRadius ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InternalRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3592)
inline void ISheetMetalBend::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3593)
inline double ISheetMetalBend::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3594)
inline void ISheetMetalBend::PutUnfoldType ( enum ksUnfoldTypeEnum PVal ) {
    HRESULT _hr = put_UnfoldType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3595)
inline enum ksUnfoldTypeEnum ISheetMetalBend::GetUnfoldType ( ) {
    enum ksUnfoldTypeEnum _result;
    HRESULT _hr = get_UnfoldType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3596)
inline void ISheetMetalBend::PutBendCoefficient ( double PVal ) {
    HRESULT _hr = put_BendCoefficient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3597)
inline double ISheetMetalBend::GetBendCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_BendCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3598)
inline void ISheetMetalBend::PutBendValue ( double PVal ) {
    HRESULT _hr = put_BendValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3599)
inline double ISheetMetalBend::GetBendValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BendValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3600)
inline void ISheetMetalBend::PutBendReduction ( double PVal ) {
    HRESULT _hr = put_BendReduction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3601)
inline double ISheetMetalBend::GetBendReduction ( ) {
    double _result = 0;
    HRESULT _hr = get_BendReduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3602)
inline _bstr_t ISheetMetalBend::GetBendTablePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BendTablePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3603)
inline void ISheetMetalBend::PutLengthBy2Sides ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_LengthBy2Sides(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3604)
inline VARIANT_BOOL ISheetMetalBend::GetLengthBy2Sides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LengthBy2Sides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3605)
inline void ISheetMetalBend::PutLength1 ( double PVal ) {
    HRESULT _hr = put_Length1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3606)
inline double ISheetMetalBend::GetLength1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Length1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3607)
inline void ISheetMetalBend::PutLength2 ( double PVal ) {
    HRESULT _hr = put_Length2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3608)
inline double ISheetMetalBend::GetLength2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Length2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3609)
inline void ISheetMetalBend::PutLengthObject1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_LengthObject1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3610)
inline IModelObjectPtr ISheetMetalBend::GetLengthObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_LengthObject1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3611)
inline void ISheetMetalBend::PutOffsetFromLengthObject1 ( double PVal ) {
    HRESULT _hr = put_OffsetFromLengthObject1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3612)
inline double ISheetMetalBend::GetOffsetFromLengthObject1 ( ) {
    double _result = 0;
    HRESULT _hr = get_OffsetFromLengthObject1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3613)
inline void ISheetMetalBend::PutOffsetDirection1 ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_OffsetDirection1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3614)
inline ksDirectionTypeEnum ISheetMetalBend::GetOffsetDirection1 ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_OffsetDirection1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3615)
inline void ISheetMetalBend::PutLengthBuildingType1 ( enum ksLengthBuildingTypeEnum PVal ) {
    HRESULT _hr = put_LengthBuildingType1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3616)
inline enum ksLengthBuildingTypeEnum ISheetMetalBend::GetLengthBuildingType1 ( ) {
    enum ksLengthBuildingTypeEnum _result;
    HRESULT _hr = get_LengthBuildingType1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3617)
inline void ISheetMetalBend::PutLengthType1 ( enum ksBendLengthTypeEnum PVal ) {
    HRESULT _hr = put_LengthType1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3618)
inline enum ksBendLengthTypeEnum ISheetMetalBend::GetLengthType1 ( ) {
    enum ksBendLengthTypeEnum _result;
    HRESULT _hr = get_LengthType1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3619)
inline void ISheetMetalBend::PutLengthObject2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_LengthObject2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3620)
inline IModelObjectPtr ISheetMetalBend::GetLengthObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_LengthObject2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3621)
inline void ISheetMetalBend::PutOffsetFromLengthObject2 ( double PVal ) {
    HRESULT _hr = put_OffsetFromLengthObject2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3622)
inline double ISheetMetalBend::GetOffsetFromLengthObject2 ( ) {
    double _result = 0;
    HRESULT _hr = get_OffsetFromLengthObject2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3623)
inline void ISheetMetalBend::PutOffsetDirection2 ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_OffsetDirection2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3624)
inline ksDirectionTypeEnum ISheetMetalBend::GetOffsetDirection2 ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_OffsetDirection2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3625)
inline void ISheetMetalBend::PutLengthBuildingType2 ( enum ksLengthBuildingTypeEnum PVal ) {
    HRESULT _hr = put_LengthBuildingType2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3626)
inline enum ksLengthBuildingTypeEnum ISheetMetalBend::GetLengthBuildingType2 ( ) {
    enum ksLengthBuildingTypeEnum _result;
    HRESULT _hr = get_LengthBuildingType2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3627)
inline void ISheetMetalBend::PutLengthType2 ( enum ksBendLengthTypeEnum PVal ) {
    HRESULT _hr = put_LengthType2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3628)
inline enum ksBendLengthTypeEnum ISheetMetalBend::GetLengthType2 ( ) {
    enum ksBendLengthTypeEnum _result;
    HRESULT _hr = get_LengthType2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3629)
inline void ISheetMetalBend::PutBendObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_BendObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3630)
inline _variant_t ISheetMetalBend::GetBendObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BendObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISheetMetalBends wrapper method implementations
//

#pragma implementation_key(3631)
inline ISheetMetalBendPtr ISheetMetalBends::GetSheetMetalBend ( const _variant_t & Index ) {
    struct ISheetMetalBend * _result = 0;
    HRESULT _hr = get_SheetMetalBend(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBendPtr(_result, false);
}

#pragma implementation_key(3632)
inline ISheetMetalBendPtr ISheetMetalBends::Add ( ) {
    struct ISheetMetalBend * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBendPtr(_result, false);
}

//
// interface ISheetMetalLineBend wrapper method implementations
//

#pragma implementation_key(3633)
inline void ISheetMetalLineBend::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3634)
inline VARIANT_BOOL ISheetMetalLineBend::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3635)
inline void ISheetMetalLineBend::PutBendLeftSideFixed ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BendLeftSideFixed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3636)
inline VARIANT_BOOL ISheetMetalLineBend::GetBendLeftSideFixed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BendLeftSideFixed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3637)
inline void ISheetMetalLineBend::PutAngleType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AngleType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3638)
inline VARIANT_BOOL ISheetMetalLineBend::GetAngleType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AngleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3639)
inline void ISheetMetalLineBend::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3640)
inline double ISheetMetalLineBend::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3641)
inline void ISheetMetalLineBend::PutBendType ( enum ksBendTypeEnum PVal ) {
    HRESULT _hr = put_BendType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3642)
inline enum ksBendTypeEnum ISheetMetalLineBend::GetBendType ( ) {
    enum ksBendTypeEnum _result;
    HRESULT _hr = get_BendType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3643)
inline void ISheetMetalLineBend::PutStraighten ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Straighten(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3644)
inline VARIANT_BOOL ISheetMetalLineBend::GetStraighten ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Straighten(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3645)
inline void ISheetMetalLineBend::PutDismissalAngleType ( enum ksBendAngleReleaseTypeEnum PVal ) {
    HRESULT _hr = put_DismissalAngleType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3646)
inline enum ksBendAngleReleaseTypeEnum ISheetMetalLineBend::GetDismissalAngleType ( ) {
    enum ksBendAngleReleaseTypeEnum _result;
    HRESULT _hr = get_DismissalAngleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3647)
inline void ISheetMetalLineBend::PutInternalRadius ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InternalRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3648)
inline VARIANT_BOOL ISheetMetalLineBend::GetInternalRadius ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InternalRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3649)
inline void ISheetMetalLineBend::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3650)
inline double ISheetMetalLineBend::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3651)
inline void ISheetMetalLineBend::PutUnfoldType ( enum ksUnfoldTypeEnum PVal ) {
    HRESULT _hr = put_UnfoldType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3652)
inline enum ksUnfoldTypeEnum ISheetMetalLineBend::GetUnfoldType ( ) {
    enum ksUnfoldTypeEnum _result;
    HRESULT _hr = get_UnfoldType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3653)
inline void ISheetMetalLineBend::PutBendCoefficient ( double PVal ) {
    HRESULT _hr = put_BendCoefficient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3654)
inline double ISheetMetalLineBend::GetBendCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_BendCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3655)
inline void ISheetMetalLineBend::PutBendValue ( double PVal ) {
    HRESULT _hr = put_BendValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3656)
inline double ISheetMetalLineBend::GetBendValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BendValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3657)
inline void ISheetMetalLineBend::PutBendReduction ( double PVal ) {
    HRESULT _hr = put_BendReduction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3658)
inline double ISheetMetalLineBend::GetBendReduction ( ) {
    double _result = 0;
    HRESULT _hr = get_BendReduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3659)
inline _bstr_t ISheetMetalLineBend::GetBendTablePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BendTablePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3660)
inline void ISheetMetalLineBend::PutFaces ( const _variant_t & Result ) {
    HRESULT _hr = put_Faces(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3661)
inline _variant_t ISheetMetalLineBend::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3662)
inline void ISheetMetalLineBend::PutLine ( struct IModelObject * Result ) {
    HRESULT _hr = put_Line(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3663)
inline IModelObjectPtr ISheetMetalLineBend::GetLine ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface ISheetMetalLineBends wrapper method implementations
//

#pragma implementation_key(3664)
inline ISheetMetalLineBendPtr ISheetMetalLineBends::GetSheetMetalLineBend ( const _variant_t & Index ) {
    struct ISheetMetalLineBend * _result = 0;
    HRESULT _hr = get_SheetMetalLineBend(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalLineBendPtr(_result, false);
}

#pragma implementation_key(3665)
inline ISheetMetalLineBendPtr ISheetMetalLineBends::Add ( ) {
    struct ISheetMetalLineBend * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalLineBendPtr(_result, false);
}

//
// interface ISheetMetalSketchBend wrapper method implementations
//

#pragma implementation_key(3666)
inline void ISheetMetalSketchBend::PutStraighten ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Straighten(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3667)
inline VARIANT_BOOL ISheetMetalSketchBend::GetStraighten ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Straighten(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3668)
inline void ISheetMetalSketchBend::PutSketch ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Sketch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3669)
inline IModelObjectPtr ISheetMetalSketchBend::GetSketch ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3670)
inline _variant_t ISheetMetalSketchBend::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3671)
inline void ISheetMetalSketchBend::PutEdges ( const _variant_t & PVal ) {
    HRESULT _hr = put_Edges(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3672)
inline enum ksSketchBendBuildingTypeEnum ISheetMetalSketchBend::GetBuildingType ( ) {
    enum ksSketchBendBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3673)
inline void ISheetMetalSketchBend::PutBuildingType ( enum ksSketchBendBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3674)
inline void ISheetMetalSketchBend::PutInternalRadius ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InternalRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3675)
inline VARIANT_BOOL ISheetMetalSketchBend::GetInternalRadius ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InternalRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3676)
inline void ISheetMetalSketchBend::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3677)
inline double ISheetMetalSketchBend::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3678)
inline void ISheetMetalSketchBend::PutDirection ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3679)
inline ksDirectionTypeEnum ISheetMetalSketchBend::GetDirection ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3680)
inline void ISheetMetalSketchBend::PutWidth1 ( double PVal ) {
    HRESULT _hr = put_Width1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3681)
inline double ISheetMetalSketchBend::GetWidth1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Width1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3682)
inline void ISheetMetalSketchBend::PutWidth2 ( double PVal ) {
    HRESULT _hr = put_Width2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3683)
inline double ISheetMetalSketchBend::GetWidth2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Width2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3684)
inline void ISheetMetalSketchBend::PutUnfoldType ( enum ksUnfoldTypeEnum PVal ) {
    HRESULT _hr = put_UnfoldType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3685)
inline enum ksUnfoldTypeEnum ISheetMetalSketchBend::GetUnfoldType ( ) {
    enum ksUnfoldTypeEnum _result;
    HRESULT _hr = get_UnfoldType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3686)
inline void ISheetMetalSketchBend::PutBendCoefficient ( double PVal ) {
    HRESULT _hr = put_BendCoefficient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3687)
inline double ISheetMetalSketchBend::GetBendCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_BendCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3688)
inline void ISheetMetalSketchBend::PutBendValue ( double PVal ) {
    HRESULT _hr = put_BendValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3689)
inline double ISheetMetalSketchBend::GetBendValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BendValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3690)
inline void ISheetMetalSketchBend::PutBendReduction ( double PVal ) {
    HRESULT _hr = put_BendReduction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3691)
inline double ISheetMetalSketchBend::GetBendReduction ( ) {
    double _result = 0;
    HRESULT _hr = get_BendReduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3692)
inline _bstr_t ISheetMetalSketchBend::GetBendTablePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BendTablePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3693)
inline void ISheetMetalSketchBend::PutWithoutAngleRelease ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithoutAngleRelease(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3694)
inline VARIANT_BOOL ISheetMetalSketchBend::GetWithoutAngleRelease ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithoutAngleRelease(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3695)
inline void ISheetMetalSketchBend::PutWithoutBendRelease ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithoutBendRelease(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3696)
inline VARIANT_BOOL ISheetMetalSketchBend::GetWithoutBendRelease ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithoutBendRelease(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3697)
inline void ISheetMetalSketchBend::PutDismissalWithWidth ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DismissalWithWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3698)
inline VARIANT_BOOL ISheetMetalSketchBend::GetDismissalWithWidth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DismissalWithWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3699)
inline void ISheetMetalSketchBend::PutBendRelease ( enum ksBendReleaseTypeEnum PVal ) {
    HRESULT _hr = put_BendRelease(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3700)
inline enum ksBendReleaseTypeEnum ISheetMetalSketchBend::GetBendRelease ( ) {
    enum ksBendReleaseTypeEnum _result;
    HRESULT _hr = get_BendRelease(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3701)
inline void ISheetMetalSketchBend::PutDismissalWidth ( double PVal ) {
    HRESULT _hr = put_DismissalWidth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3702)
inline double ISheetMetalSketchBend::GetDismissalWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_DismissalWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3703)
inline void ISheetMetalSketchBend::PutDismissalDepth ( double PVal ) {
    HRESULT _hr = put_DismissalDepth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3704)
inline double ISheetMetalSketchBend::GetDismissalDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_DismissalDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3705)
inline void ISheetMetalSketchBend::PutDismissalAngleType ( enum ksBendAngleReleaseTypeEnum PVal ) {
    HRESULT _hr = put_DismissalAngleType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3706)
inline enum ksBendAngleReleaseTypeEnum ISheetMetalSketchBend::GetDismissalAngleType ( ) {
    enum ksBendAngleReleaseTypeEnum _result;
    HRESULT _hr = get_DismissalAngleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3707)
inline void ISheetMetalSketchBend::PutClosingEnable ( enum ksClosingTypeEnum Type, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosingEnable(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3708)
inline VARIANT_BOOL ISheetMetalSketchBend::GetClosingEnable ( enum ksClosingTypeEnum Type ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosingEnable(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3709)
inline enum ksClosingClosedTypeEnum ISheetMetalSketchBend::GetClosingClosedType ( enum ksClosingTypeEnum Type ) {
    enum ksClosingClosedTypeEnum _result;
    HRESULT _hr = get_ClosingClosedType(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3710)
inline void ISheetMetalSketchBend::PutClosingClosedType ( enum ksClosingTypeEnum Type, enum ksClosingClosedTypeEnum PVal ) {
    HRESULT _hr = put_ClosingClosedType(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3711)
inline enum ksClosingCorneringEnum ISheetMetalSketchBend::GetClosingCorneringType ( enum ksClosingTypeEnum Type ) {
    enum ksClosingCorneringEnum _result;
    HRESULT _hr = get_ClosingCorneringType(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3712)
inline void ISheetMetalSketchBend::PutClosingCorneringType ( enum ksClosingTypeEnum Type, enum ksClosingCorneringEnum PVal ) {
    HRESULT _hr = put_ClosingCorneringType(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3713)
inline double ISheetMetalSketchBend::GetClosingAngle ( enum ksClosingTypeEnum Type ) {
    double _result = 0;
    HRESULT _hr = get_ClosingAngle(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3714)
inline void ISheetMetalSketchBend::PutClosingAngle ( enum ksClosingTypeEnum Type, double PVal ) {
    HRESULT _hr = put_ClosingAngle(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3715)
inline double ISheetMetalSketchBend::GetClosingGapValue ( enum ksClosingTypeEnum Type ) {
    double _result = 0;
    HRESULT _hr = get_ClosingGapValue(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3716)
inline void ISheetMetalSketchBend::PutClosingGapValue ( enum ksClosingTypeEnum Type, double PVal ) {
    HRESULT _hr = put_ClosingGapValue(Type, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3717)
inline enum ksClosingHolePlacementEnum ISheetMetalSketchBend::GetClosingHolePlacement ( ) {
    enum ksClosingHolePlacementEnum _result;
    HRESULT _hr = get_ClosingHolePlacement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3718)
inline void ISheetMetalSketchBend::PutClosingHolePlacement ( enum ksClosingHolePlacementEnum PVal ) {
    HRESULT _hr = put_ClosingHolePlacement(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3719)
inline double ISheetMetalSketchBend::GetClosingHoleDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_ClosingHoleDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3720)
inline void ISheetMetalSketchBend::PutClosingHoleDiameter ( double PVal ) {
    HRESULT _hr = put_ClosingHoleDiameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3721)
inline double ISheetMetalSketchBend::GetClosingHoleOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ClosingHoleOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3722)
inline void ISheetMetalSketchBend::PutClosingHoleOffset ( double PVal ) {
    HRESULT _hr = put_ClosingHoleOffset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISheetMetalSketchBends wrapper method implementations
//

#pragma implementation_key(3723)
inline ISheetMetalSketchBendPtr ISheetMetalSketchBends::GetSheetMetalSketchBend ( const _variant_t & Index ) {
    struct ISheetMetalSketchBend * _result = 0;
    HRESULT _hr = get_SheetMetalSketchBend(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalSketchBendPtr(_result, false);
}

#pragma implementation_key(3724)
inline ISheetMetalSketchBendPtr ISheetMetalSketchBends::Add ( ) {
    struct ISheetMetalSketchBend * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalSketchBendPtr(_result, false);
}

//
// interface ISheetMetalClosedCorner wrapper method implementations
//

#pragma implementation_key(3725)
inline _variant_t ISheetMetalClosedCorner::GetCornersObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CornersObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3726)
inline void ISheetMetalClosedCorner::PutCornersObjects ( const _variant_t & PVal ) {
    HRESULT _hr = put_CornersObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3727)
inline long ISheetMetalClosedCorner::GetCornersCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CornersCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3728)
inline IModelObjectPtr ISheetMetalClosedCorner::GetCornerObject ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CornerObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3729)
inline VARIANT_BOOL ISheetMetalClosedCorner::AddCornerObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddCornerObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3730)
inline VARIANT_BOOL ISheetMetalClosedCorner::DeleteCornerObject ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteCornerObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3731)
inline VARIANT_BOOL ISheetMetalClosedCorner::ClearCornerObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearCornerObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3732)
inline long ISheetMetalClosedCorner::GetDefailtParametersIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_DefailtParametersIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3733)
inline void ISheetMetalClosedCorner::PutDefailtParametersIndex ( long PVal ) {
    HRESULT _hr = put_DefailtParametersIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3734)
inline enum ksClosingClosedTypeEnum ISheetMetalClosedCorner::GetClosingClosedType ( long Index ) {
    enum ksClosingClosedTypeEnum _result;
    HRESULT _hr = get_ClosingClosedType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3735)
inline void ISheetMetalClosedCorner::PutClosingClosedType ( long Index, enum ksClosingClosedTypeEnum PVal ) {
    HRESULT _hr = put_ClosingClosedType(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3736)
inline enum ksClosingCorneringEnum ISheetMetalClosedCorner::GetClosingCorneringType ( long Index ) {
    enum ksClosingCorneringEnum _result;
    HRESULT _hr = get_ClosingCorneringType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3737)
inline void ISheetMetalClosedCorner::PutClosingCorneringType ( long Index, enum ksClosingCorneringEnum PVal ) {
    HRESULT _hr = put_ClosingCorneringType(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3738)
inline double ISheetMetalClosedCorner::GetClosingGapValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_ClosingGapValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3739)
inline void ISheetMetalClosedCorner::PutClosingGapValue ( long Index, double PVal ) {
    HRESULT _hr = put_ClosingGapValue(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3740)
inline enum ksClosingHolePlacementEnum ISheetMetalClosedCorner::GetClosingHolePlacement ( long Index ) {
    enum ksClosingHolePlacementEnum _result;
    HRESULT _hr = get_ClosingHolePlacement(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3741)
inline void ISheetMetalClosedCorner::PutClosingHolePlacement ( long Index, enum ksClosingHolePlacementEnum PVal ) {
    HRESULT _hr = put_ClosingHolePlacement(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3742)
inline double ISheetMetalClosedCorner::GetClosingHoleDiameter ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_ClosingHoleDiameter(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3743)
inline void ISheetMetalClosedCorner::PutClosingHoleDiameter ( long Index, double PVal ) {
    HRESULT _hr = put_ClosingHoleDiameter(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3744)
inline double ISheetMetalClosedCorner::GetClosingHoleOffset ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_ClosingHoleOffset(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3745)
inline void ISheetMetalClosedCorner::PutClosingHoleOffset ( long Index, double PVal ) {
    HRESULT _hr = put_ClosingHoleOffset(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3746)
inline VARIANT_BOOL ISheetMetalClosedCorner::GetClosingContinue ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosingContinue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3747)
inline void ISheetMetalClosedCorner::PutClosingContinue ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosingContinue(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3748)
inline VARIANT_BOOL ISheetMetalClosedCorner::GetClosingDirection ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosingDirection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3749)
inline void ISheetMetalClosedCorner::PutClosingDirection ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosingDirection(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISheetMetalClosedCorners wrapper method implementations
//

#pragma implementation_key(3750)
inline ISheetMetalClosedCornerPtr ISheetMetalClosedCorners::GetSheetMetalClosedCorner ( const _variant_t & Index ) {
    struct ISheetMetalClosedCorner * _result = 0;
    HRESULT _hr = get_SheetMetalClosedCorner(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalClosedCornerPtr(_result, false);
}

#pragma implementation_key(3751)
inline ISheetMetalClosedCornerPtr ISheetMetalClosedCorners::Add ( ) {
    struct ISheetMetalClosedCorner * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalClosedCornerPtr(_result, false);
}

//
// interface ISheetMetalPlate wrapper method implementations
//

#pragma implementation_key(3752)
inline void ISheetMetalPlate::PutSketch ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Sketch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3753)
inline IModelObjectPtr ISheetMetalPlate::GetSketch ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3754)
inline void ISheetMetalPlate::PutThicknessObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_ThicknessObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3755)
inline IModelObjectPtr ISheetMetalPlate::GetThicknessObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_ThicknessObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3756)
inline void ISheetMetalPlate::PutIsUserThickness ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IsUserThickness(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3757)
inline VARIANT_BOOL ISheetMetalPlate::GetIsUserThickness ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3758)
inline void ISheetMetalPlate::PutThickness ( double PVal ) {
    HRESULT _hr = put_Thickness(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3759)
inline double ISheetMetalPlate::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalPlates wrapper method implementations
//

#pragma implementation_key(3760)
inline ISheetMetalPlatePtr ISheetMetalPlates::GetSheetMetalPlate ( const _variant_t & Index ) {
    struct ISheetMetalPlate * _result = 0;
    HRESULT _hr = get_SheetMetalPlate(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPlatePtr(_result, false);
}

#pragma implementation_key(3761)
inline ISheetMetalPlatePtr ISheetMetalPlates::Add ( ) {
    struct ISheetMetalPlate * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPlatePtr(_result, false);
}

//
// interface ISheetMetalBendedStraighten wrapper method implementations
//

#pragma implementation_key(3762)
inline void ISheetMetalBendedStraighten::PutFixedFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_FixedFace(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3763)
inline IModelObjectPtr ISheetMetalBendedStraighten::GetFixedFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_FixedFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3764)
inline _variant_t ISheetMetalBendedStraighten::GetBendObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BendObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3765)
inline void ISheetMetalBendedStraighten::PutBendObjects ( const _variant_t & PVal ) {
    HRESULT _hr = put_BendObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3766)
inline VARIANT_BOOL ISheetMetalBendedStraighten::GetFoldLinesEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FoldLinesEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3767)
inline void ISheetMetalBendedStraighten::PutFoldLinesEnabled ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FoldLinesEnabled(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3768)
inline enum ksCurveStyleEnum ISheetMetalBendedStraighten::GetFoldLinesStyle ( ) {
    enum ksCurveStyleEnum _result;
    HRESULT _hr = get_FoldLinesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3769)
inline void ISheetMetalBendedStraighten::PutFoldLinesStyle ( enum ksCurveStyleEnum Style ) {
    HRESULT _hr = put_FoldLinesStyle(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISheetMetalBendedStraightens wrapper method implementations
//

#pragma implementation_key(3770)
inline ISheetMetalBendedStraightenPtr ISheetMetalBendedStraightens::GetSheetMetalBendedStraighten ( const _variant_t & Index ) {
    struct ISheetMetalBendedStraighten * _result = 0;
    HRESULT _hr = get_SheetMetalBendedStraighten(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBendedStraightenPtr(_result, false);
}

#pragma implementation_key(3771)
inline ISheetMetalBendedStraightenPtr ISheetMetalBendedStraightens::Add ( ksObj3dTypeEnum Type ) {
    struct ISheetMetalBendedStraighten * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBendedStraightenPtr(_result, false);
}

//
// interface ISheetMetalBendUnfoldParameters wrapper method implementations
//

#pragma implementation_key(3772)
inline void ISheetMetalBendUnfoldParameters::PutUnfoldPlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_UnfoldPlane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3773)
inline IModelObjectPtr ISheetMetalBendUnfoldParameters::GetUnfoldPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_UnfoldPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3774)
inline void ISheetMetalBendUnfoldParameters::PutFixedFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_FixedFaces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3775)
inline _variant_t ISheetMetalBendUnfoldParameters::GetFixedFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FixedFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3776)
inline _variant_t ISheetMetalBendUnfoldParameters::GetExcludedBendObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExcludedBendObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3777)
inline void ISheetMetalBendUnfoldParameters::PutExcludedBendObjects ( const _variant_t & PVal ) {
    HRESULT _hr = put_ExcludedBendObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3778)
inline void ISheetMetalBendUnfoldParameters::PutUnfold ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Unfold(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3779)
inline VARIANT_BOOL ISheetMetalBendUnfoldParameters::GetUnfold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Unfold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3780)
inline VARIANT_BOOL ISheetMetalBendUnfoldParameters::GetIsCreated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3781)
inline VARIANT_BOOL ISheetMetalBendUnfoldParameters::UpdateParam ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UpdateParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3782)
inline VARIANT_BOOL ISheetMetalBendUnfoldParameters::DeleteParam ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalPressForming wrapper method implementations
//

#pragma implementation_key(3783)
inline void ISheetMetalPressForming::PutSketch ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Sketch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3784)
inline IModelObjectPtr ISheetMetalPressForming::GetSketch ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3785)
inline void ISheetMetalPressForming::PutHeightType ( enum ksPressFormingHeightTypeEnum PVal ) {
    HRESULT _hr = put_HeightType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3786)
inline enum ksPressFormingHeightTypeEnum ISheetMetalPressForming::GetHeightType ( ) {
    enum ksPressFormingHeightTypeEnum _result;
    HRESULT _hr = get_HeightType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3787)
inline void ISheetMetalPressForming::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3788)
inline double ISheetMetalPressForming::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3789)
inline void ISheetMetalPressForming::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3790)
inline VARIANT_BOOL ISheetMetalPressForming::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3791)
inline void ISheetMetalPressForming::PutThicknessDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ThicknessDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3792)
inline VARIANT_BOOL ISheetMetalPressForming::GetThicknessDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ThicknessDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3793)
inline void ISheetMetalPressForming::PutSide ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Side(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3794)
inline VARIANT_BOOL ISheetMetalPressForming::GetSide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Side(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3795)
inline void ISheetMetalPressForming::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3796)
inline double ISheetMetalPressForming::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3797)
inline void ISheetMetalPressForming::PutRoundEdges ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RoundEdges(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3798)
inline VARIANT_BOOL ISheetMetalPressForming::GetRoundEdges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundEdges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3799)
inline void ISheetMetalPressForming::PutRadius1 ( double PVal ) {
    HRESULT _hr = put_Radius1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3800)
inline double ISheetMetalPressForming::GetRadius1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3801)
inline void ISheetMetalPressForming::PutRound ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Round(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3802)
inline VARIANT_BOOL ISheetMetalPressForming::GetRound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Round(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3803)
inline void ISheetMetalPressForming::PutRadius2 ( double PVal ) {
    HRESULT _hr = put_Radius2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3804)
inline double ISheetMetalPressForming::GetRadius2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3805)
inline void ISheetMetalPressForming::PutRoundBottom ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RoundBottom(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3806)
inline VARIANT_BOOL ISheetMetalPressForming::GetRoundBottom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3807)
inline void ISheetMetalPressForming::PutRadius3 ( double PVal ) {
    HRESULT _hr = put_Radius3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3808)
inline double ISheetMetalPressForming::GetRadius3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalPressFormings wrapper method implementations
//

#pragma implementation_key(3809)
inline ISheetMetalPressFormingPtr ISheetMetalPressFormings::GetSheetMetalPressForming ( const _variant_t & Index ) {
    struct ISheetMetalPressForming * _result = 0;
    HRESULT _hr = get_SheetMetalPressForming(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPressFormingPtr(_result, false);
}

#pragma implementation_key(3810)
inline ISheetMetalPressFormingPtr ISheetMetalPressFormings::Add ( ksObj3dTypeEnum Type ) {
    struct ISheetMetalPressForming * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPressFormingPtr(_result, false);
}

//
// interface ISheetMetalShoulder wrapper method implementations
//

#pragma implementation_key(3811)
inline void ISheetMetalShoulder::PutSketch ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Sketch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3812)
inline IModelObjectPtr ISheetMetalShoulder::GetSketch ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3813)
inline void ISheetMetalShoulder::PutShoulderType ( enum ksShoulderTypeEnum PVal ) {
    HRESULT _hr = put_ShoulderType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3814)
inline enum ksShoulderTypeEnum ISheetMetalShoulder::GetShoulderType ( ) {
    enum ksShoulderTypeEnum _result;
    HRESULT _hr = get_ShoulderType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3815)
inline void ISheetMetalShoulder::PutCutingType ( enum ksShoulderCutingTypeEnum PVal ) {
    HRESULT _hr = put_CutingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3816)
inline enum ksShoulderCutingTypeEnum ISheetMetalShoulder::GetCutingType ( ) {
    enum ksShoulderCutingTypeEnum _result;
    HRESULT _hr = get_CutingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3817)
inline void ISheetMetalShoulder::PutBuildingType ( enum ksShoulderBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3818)
inline enum ksShoulderBuildingTypeEnum ISheetMetalShoulder::GetBuildingType ( ) {
    enum ksShoulderBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3819)
inline void ISheetMetalShoulder::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3820)
inline double ISheetMetalShoulder::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3821)
inline void ISheetMetalShoulder::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3822)
inline VARIANT_BOOL ISheetMetalShoulder::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3823)
inline void ISheetMetalShoulder::PutWidth1 ( double PVal ) {
    HRESULT _hr = put_Width1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3824)
inline double ISheetMetalShoulder::GetWidth1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Width1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3825)
inline void ISheetMetalShoulder::PutWidth2 ( double PVal ) {
    HRESULT _hr = put_Width2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3826)
inline double ISheetMetalShoulder::GetWidth2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Width2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3827)
inline void ISheetMetalShoulder::PutRadius1 ( double PVal ) {
    HRESULT _hr = put_Radius1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3828)
inline double ISheetMetalShoulder::GetRadius1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3829)
inline void ISheetMetalShoulder::PutRound ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Round(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3830)
inline VARIANT_BOOL ISheetMetalShoulder::GetRound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Round(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3831)
inline void ISheetMetalShoulder::PutRadius2 ( double PVal ) {
    HRESULT _hr = put_Radius2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3832)
inline double ISheetMetalShoulder::GetRadius2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3833)
inline void ISheetMetalShoulder::PutGapValue ( double PVal ) {
    HRESULT _hr = put_GapValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3834)
inline double ISheetMetalShoulder::GetGapValue ( ) {
    double _result = 0;
    HRESULT _hr = get_GapValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalShoulders wrapper method implementations
//

#pragma implementation_key(3835)
inline ISheetMetalShoulderPtr ISheetMetalShoulders::GetSheetMetalShoulder ( const _variant_t & Index ) {
    struct ISheetMetalShoulder * _result = 0;
    HRESULT _hr = get_SheetMetalShoulder(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalShoulderPtr(_result, false);
}

#pragma implementation_key(3836)
inline ISheetMetalShoulderPtr ISheetMetalShoulders::Add ( ) {
    struct ISheetMetalShoulder * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalShoulderPtr(_result, false);
}

//
// interface ISheetMetalJalousie wrapper method implementations
//

#pragma implementation_key(3837)
inline void ISheetMetalJalousie::PutSketch ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Sketch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3838)
inline IModelObjectPtr ISheetMetalJalousie::GetSketch ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3839)
inline void ISheetMetalJalousie::PutBuildingType ( enum ksJalousieBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3840)
inline enum ksJalousieBuildingTypeEnum ISheetMetalJalousie::GetBuildingType ( ) {
    enum ksJalousieBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3841)
inline void ISheetMetalJalousie::PutFormEnd ( enum ksJalousieFormEndEnum PVal ) {
    HRESULT _hr = put_FormEnd(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3842)
inline enum ksJalousieFormEndEnum ISheetMetalJalousie::GetFormEnd ( ) {
    enum ksJalousieFormEndEnum _result;
    HRESULT _hr = get_FormEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3843)
inline void ISheetMetalJalousie::PutHeightType ( enum ksJalousieHeightTypeEnum PVal ) {
    HRESULT _hr = put_HeightType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3844)
inline enum ksJalousieHeightTypeEnum ISheetMetalJalousie::GetHeightType ( ) {
    enum ksJalousieHeightTypeEnum _result;
    HRESULT _hr = get_HeightType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3845)
inline void ISheetMetalJalousie::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3846)
inline double ISheetMetalJalousie::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3847)
inline void ISheetMetalJalousie::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3848)
inline VARIANT_BOOL ISheetMetalJalousie::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3849)
inline void ISheetMetalJalousie::PutWidth ( double PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3850)
inline double ISheetMetalJalousie::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3851)
inline void ISheetMetalJalousie::PutSide ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Side(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3852)
inline VARIANT_BOOL ISheetMetalJalousie::GetSide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Side(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3853)
inline void ISheetMetalJalousie::PutRound ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Round(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3854)
inline VARIANT_BOOL ISheetMetalJalousie::GetRound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Round(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3855)
inline void ISheetMetalJalousie::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3856)
inline double ISheetMetalJalousie::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalJalousies wrapper method implementations
//

#pragma implementation_key(3857)
inline ISheetMetalJalousiePtr ISheetMetalJalousies::GetSheetMetalJalousie ( const _variant_t & Index ) {
    struct ISheetMetalJalousie * _result = 0;
    HRESULT _hr = get_SheetMetalJalousie(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalJalousiePtr(_result, false);
}

#pragma implementation_key(3858)
inline ISheetMetalJalousiePtr ISheetMetalJalousies::Add ( ) {
    struct ISheetMetalJalousie * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalJalousiePtr(_result, false);
}

//
// interface ISheetMetalRib wrapper method implementations
//

#pragma implementation_key(3859)
inline IModelObjectPtr ISheetMetalRib::GetBendObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BendObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3860)
inline IModelObjectPtr ISheetMetalRib::GetBendFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BendFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3861)
inline IModelObjectPtr ISheetMetalRib::GetBendEdge ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BendEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3862)
inline VARIANT_BOOL ISheetMetalRib::InitBendObjects ( struct IModelObject * BendObject, struct IModelObject * BendFace, struct IModelObject * BendEdge ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitBendObjects(BendObject, BendFace, BendEdge, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3863)
inline VARIANT_BOOL ISheetMetalRib::AutoInitBendObjects ( struct IModelObject * InitObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AutoInitBendObjects(InitObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3864)
inline VARIANT_BOOL ISheetMetalRib::CalculateOptimalParams ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CalculateOptimalParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3865)
inline void ISheetMetalRib::PutOffsetType ( enum ksPoint3DCurveParamTypeEnum PVal ) {
    HRESULT _hr = put_OffsetType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3866)
inline enum ksPoint3DCurveParamTypeEnum ISheetMetalRib::GetOffsetType ( ) {
    enum ksPoint3DCurveParamTypeEnum _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3867)
inline void ISheetMetalRib::PutOffset ( double PVal ) {
    HRESULT _hr = put_Offset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3868)
inline double ISheetMetalRib::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3869)
inline void ISheetMetalRib::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3870)
inline VARIANT_BOOL ISheetMetalRib::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3871)
inline void ISheetMetalRib::PutBuildingType ( enum ksSHRibBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3872)
inline enum ksSHRibBuildingTypeEnum ISheetMetalRib::GetBuildingType ( ) {
    enum ksSHRibBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3873)
inline void ISheetMetalRib::PutCutingType ( enum ksSHRibCutingTypeEnum PVal ) {
    HRESULT _hr = put_CutingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3874)
inline enum ksSHRibCutingTypeEnum ISheetMetalRib::GetCutingType ( ) {
    enum ksSHRibCutingTypeEnum _result;
    HRESULT _hr = get_CutingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3875)
inline void ISheetMetalRib::PutLenght1 ( double PVal ) {
    HRESULT _hr = put_Lenght1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3876)
inline double ISheetMetalRib::GetLenght1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Lenght1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3877)
inline void ISheetMetalRib::PutLenght2 ( double PVal ) {
    HRESULT _hr = put_Lenght2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3878)
inline double ISheetMetalRib::GetLenght2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Lenght2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3879)
inline void ISheetMetalRib::PutAngle1 ( double PVal ) {
    HRESULT _hr = put_Angle1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3880)
inline double ISheetMetalRib::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3881)
inline void ISheetMetalRib::PutRadius1 ( double PVal ) {
    HRESULT _hr = put_Radius1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3882)
inline double ISheetMetalRib::GetRadius1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3883)
inline void ISheetMetalRib::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3884)
inline double ISheetMetalRib::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3885)
inline void ISheetMetalRib::PutWidth ( double PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3886)
inline double ISheetMetalRib::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3887)
inline void ISheetMetalRib::PutRound ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Round(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3888)
inline VARIANT_BOOL ISheetMetalRib::GetRound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Round(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3889)
inline void ISheetMetalRib::PutRadius2 ( double PVal ) {
    HRESULT _hr = put_Radius2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3890)
inline double ISheetMetalRib::GetRadius2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3891)
inline void ISheetMetalRib::PutArchCreate ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ArchCreate(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3892)
inline VARIANT_BOOL ISheetMetalRib::GetArchCreate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ArchCreate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3893)
inline void ISheetMetalRib::PutArchCoefficient ( double PVal ) {
    HRESULT _hr = put_ArchCoefficient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3894)
inline double ISheetMetalRib::GetArchCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_ArchCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3895)
inline void ISheetMetalRib::PutArchRadius ( double PVal ) {
    HRESULT _hr = put_ArchRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3896)
inline double ISheetMetalRib::GetArchRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_ArchRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3897)
inline void ISheetMetalRib::PutArchMeasure ( enum ksArchMeasureEnum PVal ) {
    HRESULT _hr = put_ArchMeasure(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3898)
inline enum ksArchMeasureEnum ISheetMetalRib::GetArchMeasure ( ) {
    enum ksArchMeasureEnum _result;
    HRESULT _hr = get_ArchMeasure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3899)
inline void ISheetMetalRib::PutArchLength ( double PVal ) {
    HRESULT _hr = put_ArchLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3900)
inline double ISheetMetalRib::GetArchLength ( ) {
    double _result = 0;
    HRESULT _hr = get_ArchLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalRibs wrapper method implementations
//

#pragma implementation_key(3901)
inline ISheetMetalRibPtr ISheetMetalRibs::GetSheetMetalRib ( const _variant_t & Index ) {
    struct ISheetMetalRib * _result = 0;
    HRESULT _hr = get_SheetMetalRib(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalRibPtr(_result, false);
}

#pragma implementation_key(3902)
inline ISheetMetalRibPtr ISheetMetalRibs::Add ( ) {
    struct ISheetMetalRib * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalRibPtr(_result, false);
}

//
// interface ISheetMetalPunch wrapper method implementations
//

#pragma implementation_key(3903)
inline void ISheetMetalPunch::PutFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Face(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3904)
inline IModelObjectPtr ISheetMetalPunch::GetFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3905)
inline void ISheetMetalPunch::PutBody ( struct IBody7 * PVal ) {
    HRESULT _hr = put_Body(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3906)
inline IBody7Ptr ISheetMetalPunch::GetBody ( ) {
    struct IBody7 * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBody7Ptr(_result, false);
}

#pragma implementation_key(3907)
inline void ISheetMetalPunch::PutBodyFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_BodyFaces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3908)
inline _variant_t ISheetMetalPunch::GetBodyFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BodyFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3909)
inline void ISheetMetalPunch::PutBuildingType ( enum ksSheetMetalPunchBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3910)
inline enum ksSheetMetalPunchBuildingTypeEnum ISheetMetalPunch::GetBuildingType ( ) {
    enum ksSheetMetalPunchBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3911)
inline void ISheetMetalPunch::PutDeleteBody ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DeleteBody(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3912)
inline VARIANT_BOOL ISheetMetalPunch::GetDeleteBody ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3913)
inline void ISheetMetalPunch::PutRoundOffEdges ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RoundOffEdges(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3914)
inline VARIANT_BOOL ISheetMetalPunch::GetRoundOffEdges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundOffEdges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3915)
inline void ISheetMetalPunch::PutRoundEdgesRadius ( double PVal ) {
    HRESULT _hr = put_RoundEdgesRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3916)
inline double ISheetMetalPunch::GetRoundEdgesRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_RoundEdgesRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3917)
inline void ISheetMetalPunch::PutRound ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Round(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3918)
inline VARIANT_BOOL ISheetMetalPunch::GetRound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Round(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3919)
inline void ISheetMetalPunch::PutRadius2 ( double PVal ) {
    HRESULT _hr = put_Radius2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3920)
inline double ISheetMetalPunch::GetRadius2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3921)
inline void ISheetMetalPunch::PutThicknessType ( enum ksSheetMetalPunchThicknessTypeEnum PVal ) {
    HRESULT _hr = put_ThicknessType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3922)
inline enum ksSheetMetalPunchThicknessTypeEnum ISheetMetalPunch::GetThicknessType ( ) {
    enum ksSheetMetalPunchThicknessTypeEnum _result;
    HRESULT _hr = get_ThicknessType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3923)
inline void ISheetMetalPunch::PutThickness ( double PVal ) {
    HRESULT _hr = put_Thickness(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3924)
inline double ISheetMetalPunch::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalPunchs wrapper method implementations
//

#pragma implementation_key(3925)
inline ISheetMetalPunchPtr ISheetMetalPunchs::GetSheetMetalPunch ( const _variant_t & Index ) {
    struct ISheetMetalPunch * _result = 0;
    HRESULT _hr = get_SheetMetalPunch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPunchPtr(_result, false);
}

#pragma implementation_key(3926)
inline ISheetMetalPunchPtr ISheetMetalPunchs::Add ( ) {
    struct ISheetMetalPunch * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPunchPtr(_result, false);
}

//
// interface IPoint3DParamDisplace wrapper method implementations
//

#pragma implementation_key(3927)
inline void IPoint3DParamDisplace::PutDX ( double PVal ) {
    HRESULT _hr = put_DX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3928)
inline double IPoint3DParamDisplace::GetDX ( ) {
    double _result = 0;
    HRESULT _hr = get_DX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3929)
inline void IPoint3DParamDisplace::PutDY ( double PVal ) {
    HRESULT _hr = put_DY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3930)
inline double IPoint3DParamDisplace::GetDY ( ) {
    double _result = 0;
    HRESULT _hr = get_DY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3931)
inline void IPoint3DParamDisplace::PutDZ ( double PVal ) {
    HRESULT _hr = put_DZ(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3932)
inline double IPoint3DParamDisplace::GetDZ ( ) {
    double _result = 0;
    HRESULT _hr = get_DZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3933)
inline VARIANT_BOOL IPoint3DParamDisplace::SetAssociationVertex ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetAssociationVertex(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3934)
inline IModelObjectPtr IPoint3DParamDisplace::GetAssociationVertex ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3935)
inline VARIANT_BOOL IPoint3DParamDisplace::SetGuidingObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetGuidingObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3936)
inline IModelObjectPtr IPoint3DParamDisplace::GetGuidingObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_GuidingObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3937)
inline void IPoint3DParamDisplace::PutDistance ( double PVal ) {
    HRESULT _hr = put_Distance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3938)
inline double IPoint3DParamDisplace::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3939)
inline IVector3DPtr IPoint3DParamDisplace::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

//
// interface IPoint3DParamIntersect wrapper method implementations
//

#pragma implementation_key(3940)
inline VARIANT_BOOL IPoint3DParamIntersect::SetCurveObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCurveObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3941)
inline IModelObjectPtr IPoint3DParamIntersect::GetCurveObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CurveObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3942)
inline VARIANT_BOOL IPoint3DParamIntersect::SetSurfaceObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSurfaceObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3943)
inline IModelObjectPtr IPoint3DParamIntersect::GetSurfaceObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_SurfaceObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3944)
inline _variant_t IPoint3DParamIntersect::GetCartPointArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CartPointArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3945)
inline void IPoint3DParamIntersect::PutIndex ( long PVal ) {
    HRESULT _hr = put_Index(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3946)
inline long IPoint3DParamIntersect::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPoint3DParamCenter wrapper method implementations
//

#pragma implementation_key(3947)
inline VARIANT_BOOL IPoint3DParamCenter::SetObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3948)
inline IModelObjectPtr IPoint3DParamCenter::GetObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPoint3DParamCurve wrapper method implementations
//

#pragma implementation_key(3949)
inline VARIANT_BOOL IPoint3DParamCurve::SetCurveObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCurveObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3950)
inline IModelObjectPtr IPoint3DParamCurve::GetCurveObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CurveObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3951)
inline void IPoint3DParamCurve::PutOffsetType ( enum ksPoint3DCurveParamTypeEnum PVal ) {
    HRESULT _hr = put_OffsetType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3952)
inline enum ksPoint3DCurveParamTypeEnum IPoint3DParamCurve::GetOffsetType ( ) {
    enum ksPoint3DCurveParamTypeEnum _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3953)
inline void IPoint3DParamCurve::PutOffset ( double PVal ) {
    HRESULT _hr = put_Offset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3954)
inline double IPoint3DParamCurve::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3955)
inline void IPoint3DParamCurve::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3956)
inline VARIANT_BOOL IPoint3DParamCurve::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPoint3DParamSurface wrapper method implementations
//

#pragma implementation_key(3957)
inline VARIANT_BOOL IPoint3DParamSurface::SetSurfaceObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSurfaceObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3958)
inline IModelObjectPtr IPoint3DParamSurface::GetSurfaceObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_SurfaceObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3959)
inline void IPoint3DParamSurface::PutOffsetType ( enum ksPoint3DSurfaceParamTypeEnum PVal ) {
    HRESULT _hr = put_OffsetType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3960)
inline enum ksPoint3DSurfaceParamTypeEnum IPoint3DParamSurface::GetOffsetType ( ) {
    enum ksPoint3DSurfaceParamTypeEnum _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3961)
inline void IPoint3DParamSurface::PutOffset1 ( double PVal ) {
    HRESULT _hr = put_Offset1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3962)
inline double IPoint3DParamSurface::GetOffset1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3963)
inline void IPoint3DParamSurface::PutOffset2 ( double PVal ) {
    HRESULT _hr = put_Offset2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3964)
inline double IPoint3DParamSurface::GetOffset2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3965)
inline VARIANT_BOOL IPoint3DParamSurface::SetObject1 ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetObject1(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3966)
inline IModelObjectPtr IPoint3DParamSurface::GetObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3967)
inline VARIANT_BOOL IPoint3DParamSurface::SetObject2 ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetObject2(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3968)
inline IModelObjectPtr IPoint3DParamSurface::GetObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3969)
inline void IPoint3DParamSurface::PutAllowBoundaries ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AllowBoundaries(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3970)
inline VARIANT_BOOL IPoint3DParamSurface::GetAllowBoundaries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowBoundaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPoint3DParamProjection wrapper method implementations
//

#pragma implementation_key(3971)
inline VARIANT_BOOL IPoint3DParamProjection::SetAssociationVertex ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetAssociationVertex(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3972)
inline IModelObjectPtr IPoint3DParamProjection::GetAssociationVertex ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3973)
inline VARIANT_BOOL IPoint3DParamProjection::SetSurfaceObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSurfaceObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3974)
inline IModelObjectPtr IPoint3DParamProjection::GetSurfaceObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_SurfaceObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3975)
inline VARIANT_BOOL IPoint3DParamProjection::SetGuidingObject ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetGuidingObject(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3976)
inline IModelObjectPtr IPoint3DParamProjection::GetGuidingObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_GuidingObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3977)
inline IVector3DPtr IPoint3DParamProjection::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

//
// interface IBaseLineDimension3D wrapper method implementations
//

#pragma implementation_key(3978)
inline double IBaseLineDimension3D::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3979)
inline void IBaseLineDimension3D::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3980)
inline IModelObjectPtr IBaseLineDimension3D::GetObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3981)
inline void IBaseLineDimension3D::PutObject1 ( struct IModelObject * Object1 ) {
    HRESULT _hr = put_Object1(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3982)
inline IModelObjectPtr IBaseLineDimension3D::GetObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3983)
inline void IBaseLineDimension3D::PutObject2 ( struct IModelObject * Object2 ) {
    HRESULT _hr = put_Object2(Object2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILineDimensions3D wrapper method implementations
//

#pragma implementation_key(3984)
inline IBaseLineDimension3DPtr ILineDimensions3D::GetLineDimension3D ( const _variant_t & Index ) {
    struct IBaseLineDimension3D * _result = 0;
    HRESULT _hr = get_LineDimension3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseLineDimension3DPtr(_result, false);
}

#pragma implementation_key(3985)
inline IBaseLineDimension3DPtr ILineDimensions3D::Add ( ksObj3dTypeEnum DimType ) {
    struct IBaseLineDimension3D * _result = 0;
    HRESULT _hr = raw_Add(DimType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseLineDimension3DPtr(_result, false);
}

//
// interface IRadialDimension3D wrapper method implementations
//

#pragma implementation_key(3986)
inline IModelObjectPtr IRadialDimension3D::GetObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3987)
inline void IRadialDimension3D::PutObject1 ( struct IModelObject * Object1 ) {
    HRESULT _hr = put_Object1(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3988)
inline IModelObjectPtr IRadialDimension3D::GetPlaneObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_PlaneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(3989)
inline void IRadialDimension3D::PutPlaneObject ( struct IModelObject * Object ) {
    HRESULT _hr = put_PlaneObject(Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3990)
inline VARIANT_BOOL IRadialDimension3D::GetDimensionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3991)
inline void IRadialDimension3D::PutDimensionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DimensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3992)
inline double IRadialDimension3D::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3993)
inline void IRadialDimension3D::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3994)
inline VARIANT_BOOL IRadialDimension3D::GetSurfacePoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSurfacePoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3995)
inline VARIANT_BOOL IRadialDimension3D::SetSurfacePoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSurfacePoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3996)
inline VARIANT_BOOL IRadialDimension3D::GetCenterPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCenterPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3997)
inline VARIANT_BOOL IRadialDimension3D::SetCenterPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCenterPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRadialDimensions3D wrapper method implementations
//

#pragma implementation_key(3998)
inline IRadialDimension3DPtr IRadialDimensions3D::GetRadialDimension3D ( const _variant_t & Index ) {
    struct IRadialDimension3D * _result = 0;
    HRESULT _hr = get_RadialDimension3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRadialDimension3DPtr(_result, false);
}

#pragma implementation_key(3999)
inline IRadialDimension3DPtr IRadialDimensions3D::Add ( ) {
    struct IRadialDimension3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRadialDimension3DPtr(_result, false);
}

//
// interface IDiametralDimension3D wrapper method implementations
//

#pragma implementation_key(4000)
inline IModelObjectPtr IDiametralDimension3D::GetObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4001)
inline void IDiametralDimension3D::PutObject1 ( struct IModelObject * Object1 ) {
    HRESULT _hr = put_Object1(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4002)
inline IModelObjectPtr IDiametralDimension3D::GetPlaneObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_PlaneObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4003)
inline void IDiametralDimension3D::PutPlaneObject ( struct IModelObject * Object2 ) {
    HRESULT _hr = put_PlaneObject(Object2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4004)
inline VARIANT_BOOL IDiametralDimension3D::GetDimensionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4005)
inline void IDiametralDimension3D::PutDimensionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DimensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4006)
inline double IDiametralDimension3D::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4007)
inline void IDiametralDimension3D::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4008)
inline VARIANT_BOOL IDiametralDimension3D::GetSurfacePoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSurfacePoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4009)
inline VARIANT_BOOL IDiametralDimension3D::SetSurfacePoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSurfacePoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4010)
inline VARIANT_BOOL IDiametralDimension3D::GetCenterPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCenterPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4011)
inline VARIANT_BOOL IDiametralDimension3D::SetCenterPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCenterPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDiametralDimensions3D wrapper method implementations
//

#pragma implementation_key(4012)
inline IDiametralDimension3DPtr IDiametralDimensions3D::GetDiametralDimension3D ( const _variant_t & Index ) {
    struct IDiametralDimension3D * _result = 0;
    HRESULT _hr = get_DiametralDimension3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiametralDimension3DPtr(_result, false);
}

#pragma implementation_key(4013)
inline IDiametralDimension3DPtr IDiametralDimensions3D::Add ( ) {
    struct IDiametralDimension3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiametralDimension3DPtr(_result, false);
}

//
// interface IAngleDimension3D wrapper method implementations
//

#pragma implementation_key(4014)
inline IModelObjectPtr IAngleDimension3D::GetObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4015)
inline void IAngleDimension3D::PutObject1 ( struct IModelObject * Object1 ) {
    HRESULT _hr = put_Object1(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4016)
inline IModelObjectPtr IAngleDimension3D::GetObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4017)
inline void IAngleDimension3D::PutObject2 ( struct IModelObject * Object2 ) {
    HRESULT _hr = put_Object2(Object2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4018)
inline double IAngleDimension3D::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4019)
inline void IAngleDimension3D::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4020)
inline enum ksAngleDimTypeEnum IAngleDimension3D::GetDimensionType ( ) {
    enum ksAngleDimTypeEnum _result;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4021)
inline void IAngleDimension3D::PutDimensionType ( enum ksAngleDimTypeEnum PVal ) {
    HRESULT _hr = put_DimensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4022)
inline VARIANT_BOOL IAngleDimension3D::Inverse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Inverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4023)
inline VARIANT_BOOL IAngleDimension3D::GetCenterPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCenterPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4024)
inline VARIANT_BOOL IAngleDimension3D::SetCenterPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCenterPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAngleDimensions3D wrapper method implementations
//

#pragma implementation_key(4025)
inline IAngleDimension3DPtr IAngleDimensions3D::GetAngleDimension3D ( const _variant_t & Index ) {
    struct IAngleDimension3D * _result = 0;
    HRESULT _hr = get_AngleDimension3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAngleDimension3DPtr(_result, false);
}

#pragma implementation_key(4026)
inline IAngleDimension3DPtr IAngleDimensions3D::Add ( ) {
    struct IAngleDimension3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAngleDimension3DPtr(_result, false);
}

//
// interface IBaseLeader3D wrapper method implementations
//

#pragma implementation_key(4027)
inline ksObj3dTypeEnum IBaseLeader3D::GetBasePlane ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4028)
inline void IBaseLeader3D::PutBasePlane ( ksObj3dTypeEnum Val ) {
    HRESULT _hr = put_BasePlane(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4029)
inline IModelObjectPtr IBaseLeader3D::GetPositionObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_PositionObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4030)
inline void IBaseLeader3D::PutPositionObject ( struct IModelObject * Val ) {
    HRESULT _hr = put_PositionObject(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4031)
inline VARIANT_BOOL IBaseLeader3D::GetPosition ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4032)
inline VARIANT_BOOL IBaseLeader3D::SetPosition ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4033)
inline enum ksArrowEnum IBaseLeader3D::GetArrowType ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4034)
inline void IBaseLeader3D::PutArrowType ( enum ksArrowEnum Result ) {
    HRESULT _hr = put_ArrowType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILeaders3D wrapper method implementations
//

#pragma implementation_key(4035)
inline IBaseLeader3DPtr ILeaders3D::GetLeader3D ( const _variant_t & Index ) {
    struct IBaseLeader3D * _result = 0;
    HRESULT _hr = get_Leader3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseLeader3DPtr(_result, false);
}

#pragma implementation_key(4036)
inline IBaseLeader3DPtr ILeaders3D::Add ( ksObj3dTypeEnum DimType ) {
    struct IBaseLeader3D * _result = 0;
    HRESULT _hr = raw_Add(DimType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBaseLeader3DPtr(_result, false);
}

//
// interface IRough3D wrapper method implementations
//

#pragma implementation_key(4037)
inline ksObj3dTypeEnum IRough3D::GetBasePlane ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4038)
inline void IRough3D::PutBasePlane ( ksObj3dTypeEnum Val ) {
    HRESULT _hr = put_BasePlane(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4039)
inline IModelObjectPtr IRough3D::GetPositionObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_PositionObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4040)
inline void IRough3D::PutPositionObject ( struct IModelObject * Val ) {
    HRESULT _hr = put_PositionObject(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4041)
inline VARIANT_BOOL IRough3D::GetPosition ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4042)
inline VARIANT_BOOL IRough3D::SetPosition ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4043)
inline IModelObjectPtr IRough3D::GetBaseObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4044)
inline VARIANT_BOOL IRough3D::GetBasePosition ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBasePosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4045)
inline VARIANT_BOOL IRough3D::SetBasePosition ( double X, double Y, double Z, struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBasePosition(X, Y, Z, Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4046)
inline VARIANT_BOOL IRough3D::GetShelfPosition ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetShelfPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4047)
inline VARIANT_BOOL IRough3D::SetShelfPosition ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetShelfPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRoughs3D wrapper method implementations
//

#pragma implementation_key(4048)
inline IRough3DPtr IRoughs3D::GetRough3D ( const _variant_t & Index ) {
    struct IRough3D * _result = 0;
    HRESULT _hr = get_Rough3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRough3DPtr(_result, false);
}

#pragma implementation_key(4049)
inline IRough3DPtr IRoughs3D::Add ( ) {
    struct IRough3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRough3DPtr(_result, false);
}

//
// interface IBase3D wrapper method implementations
//

#pragma implementation_key(4050)
inline ksObj3dTypeEnum IBase3D::GetBasePlane ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4051)
inline void IBase3D::PutBasePlane ( ksObj3dTypeEnum Val ) {
    HRESULT _hr = put_BasePlane(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4052)
inline IModelObjectPtr IBase3D::GetPositionObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_PositionObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4053)
inline void IBase3D::PutPositionObject ( struct IModelObject * Val ) {
    HRESULT _hr = put_PositionObject(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4054)
inline VARIANT_BOOL IBase3D::GetPosition ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4055)
inline VARIANT_BOOL IBase3D::SetPosition ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4056)
inline IModelObjectPtr IBase3D::GetBaseObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4057)
inline VARIANT_BOOL IBase3D::GetDrawType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4058)
inline void IBase3D::PutDrawType ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_DrawType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4059)
inline VARIANT_BOOL IBase3D::GetAutoSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4060)
inline void IBase3D::PutAutoSorted ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSorted(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4061)
inline ITextPtr IBase3D::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(4062)
inline VARIANT_BOOL IBase3D::GetBranchBeginPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBranchBeginPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4063)
inline VARIANT_BOOL IBase3D::SetBranchBeginPoint ( double X, double Y, double Z, struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBranchBeginPoint(X, Y, Z, Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4064)
inline VARIANT_BOOL IBase3D::GetBranchEndPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBranchEndPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4065)
inline VARIANT_BOOL IBase3D::SetBranchEndPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBranchEndPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBases3D wrapper method implementations
//

#pragma implementation_key(4066)
inline IBase3DPtr IBases3D::GetBase3D ( const _variant_t & Index ) {
    struct IBase3D * _result = 0;
    HRESULT _hr = get_Base3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBase3DPtr(_result, false);
}

#pragma implementation_key(4067)
inline IBase3DPtr IBases3D::Add ( ) {
    struct IBase3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBase3DPtr(_result, false);
}

//
// interface ITolerance3D wrapper method implementations
//

#pragma implementation_key(4068)
inline ksObj3dTypeEnum ITolerance3D::GetBasePlane ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4069)
inline void ITolerance3D::PutBasePlane ( ksObj3dTypeEnum Val ) {
    HRESULT _hr = put_BasePlane(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4070)
inline IModelObjectPtr ITolerance3D::GetPositionObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_PositionObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4071)
inline void ITolerance3D::PutPositionObject ( struct IModelObject * Val ) {
    HRESULT _hr = put_PositionObject(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4072)
inline VARIANT_BOOL ITolerance3D::GetPosition ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4073)
inline VARIANT_BOOL ITolerance3D::SetPosition ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPosition(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4074)
inline VARIANT_BOOL ITolerance3D::GetArrowType ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ArrowType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4075)
inline void ITolerance3D::PutArrowType ( long Index, VARIANT_BOOL Result ) {
    HRESULT _hr = put_ArrowType(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4076)
inline enum ksToleranceArrowType ITolerance3D::GetToleranceArrowType ( long Index ) {
    enum ksToleranceArrowType _result;
    HRESULT _hr = get_ToleranceArrowType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4077)
inline void ITolerance3D::PutToleranceArrowType ( long Index, enum ksToleranceArrowType Result ) {
    HRESULT _hr = put_ToleranceArrowType(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4078)
inline enum ksTablePointEnum ITolerance3D::GetBranchPos ( long Index ) {
    enum ksTablePointEnum _result;
    HRESULT _hr = get_BranchPos(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4079)
inline void ITolerance3D::PutBranchPos ( long Index, enum ksTablePointEnum Result ) {
    HRESULT _hr = put_BranchPos(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4080)
inline VARIANT_BOOL ITolerance3D::FormatTolerance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FormatTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITolerances3D wrapper method implementations
//

#pragma implementation_key(4081)
inline ITolerance3DPtr ITolerances3D::GetTolerance3D ( const _variant_t & Index ) {
    struct ITolerance3D * _result = 0;
    HRESULT _hr = get_Tolerance3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITolerance3DPtr(_result, false);
}

#pragma implementation_key(4082)
inline ITolerance3DPtr ITolerances3D::Add ( ) {
    struct ITolerance3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITolerance3DPtr(_result, false);
}

//
// interface IThreads wrapper method implementations
//

#pragma implementation_key(4083)
inline IThreadPtr IThreads::GetThread ( const _variant_t & Index ) {
    struct IThread * _result = 0;
    HRESULT _hr = get_Thread(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThreadPtr(_result, false);
}

#pragma implementation_key(4084)
inline IThreadPtr IThreads::Add ( ) {
    struct IThread * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThreadPtr(_result, false);
}

//
// interface IArcDimension3D wrapper method implementations
//

#pragma implementation_key(4085)
inline IModelObjectPtr IArcDimension3D::GetObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4086)
inline void IArcDimension3D::PutObject ( struct IModelObject * Object ) {
    HRESULT _hr = put_Object(Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4087)
inline double IArcDimension3D::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4088)
inline void IArcDimension3D::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IArcDimensions3D wrapper method implementations
//

#pragma implementation_key(4089)
inline IArcDimension3DPtr IArcDimensions3D::GetArcDimension3D ( const _variant_t & Index ) {
    struct IArcDimension3D * _result = 0;
    HRESULT _hr = get_ArcDimension3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcDimension3DPtr(_result, false);
}

#pragma implementation_key(4090)
inline IArcDimension3DPtr IArcDimensions3D::Add ( ) {
    struct IArcDimension3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcDimension3DPtr(_result, false);
}

//
// interface IModelText wrapper method implementations
//

#pragma implementation_key(4091)
inline VARIANT_BOOL IModelText::GetPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4092)
inline VARIANT_BOOL IModelText::SetPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4093)
inline void IModelText::PutAssociationObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4094)
inline IModelObjectPtr IModelText::GetAssociationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4095)
inline void IModelText::PutPlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Plane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4096)
inline IModelObjectPtr IModelText::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4097)
inline void IModelText::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4098)
inline double IModelText::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4099)
inline void IModelText::PutPointParameterType ( enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointParameterType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4100)
inline enum ksPoint3DTypeEnum IModelText::GetPointParameterType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointParameterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4101)
inline IKompasAPIObjectPtr IModelText::GetPointParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4102)
inline double IModelText::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4103)
inline void IModelText::PutHeight ( double Result ) {
    HRESULT _hr = put_Height(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4104)
inline double IModelText::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4105)
inline void IModelText::PutWidth ( double Result ) {
    HRESULT _hr = put_Width(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4106)
inline enum ksTextHorizontalFormatEnum IModelText::GetHFormat ( ) {
    enum ksTextHorizontalFormatEnum _result;
    HRESULT _hr = get_HFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4107)
inline void IModelText::PutHFormat ( enum ksTextHorizontalFormatEnum Result ) {
    HRESULT _hr = put_HFormat(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4108)
inline VARIANT_BOOL IModelText::GetVFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4109)
inline void IModelText::PutVFormat ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_VFormat(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4110)
inline enum ksAllocationEnum IModelText::GetAllocation ( ) {
    enum ksAllocationEnum _result;
    HRESULT _hr = get_Allocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4111)
inline void IModelText::PutAllocation ( enum ksAllocationEnum Result ) {
    HRESULT _hr = put_Allocation(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4112)
inline void IModelText::PutTextObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_TextObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4113)
inline _variant_t IModelText::GetTextObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4114)
inline ITextPtr IModelText::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

//
// interface IModelTexts wrapper method implementations
//

#pragma implementation_key(4115)
inline IModelTextPtr IModelTexts::GetModelText ( const _variant_t & Index ) {
    struct IModelText * _result = 0;
    HRESULT _hr = get_ModelText(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelTextPtr(_result, false);
}

#pragma implementation_key(4116)
inline IModelTextPtr IModelTexts::Add ( ) {
    struct IModelText * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelTextPtr(_result, false);
}

//
// interface IModelTable wrapper method implementations
//

#pragma implementation_key(4117)
inline VARIANT_BOOL IModelTable::GetPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4118)
inline VARIANT_BOOL IModelTable::SetPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4119)
inline void IModelTable::PutAssociationObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4120)
inline IModelObjectPtr IModelTable::GetAssociationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4121)
inline void IModelTable::PutPlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Plane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4122)
inline IModelObjectPtr IModelTable::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4123)
inline void IModelTable::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4124)
inline double IModelTable::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4125)
inline void IModelTable::PutPointParameterType ( enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointParameterType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4126)
inline enum ksPoint3DTypeEnum IModelTable::GetPointParameterType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointParameterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4127)
inline IKompasAPIObjectPtr IModelTable::GetPointParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4128)
inline void IModelTable::PutFixedCellsSize ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedCellsSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4129)
inline VARIANT_BOOL IModelTable::GetFixedCellsSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedCellsSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4130)
inline void IModelTable::PutFixedRowCount ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedRowCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4131)
inline VARIANT_BOOL IModelTable::GetFixedRowCount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedRowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4132)
inline void IModelTable::PutFixedColumnCount ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedColumnCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4133)
inline VARIANT_BOOL IModelTable::GetFixedColumnCount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4134)
inline VARIANT_BOOL IModelTable::Save ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Save(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4135)
inline ITablePtr IModelTable::GetTable ( ) {
    struct ITable * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITablePtr(_result, false);
}

//
// interface IModelTables wrapper method implementations
//

#pragma implementation_key(4136)
inline IModelTablePtr IModelTables::GetModelTable ( const _variant_t & Index ) {
    struct IModelTable * _result = 0;
    HRESULT _hr = get_ModelTable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelTablePtr(_result, false);
}

#pragma implementation_key(4137)
inline IModelTablePtr IModelTables::Add ( long RowsCount, long ColumnsCount, double RowHeigh, double ColumnsWidth, enum ksTableTileLayoutEnum TitlePos ) {
    struct IModelTable * _result = 0;
    HRESULT _hr = raw_Add(RowsCount, ColumnsCount, RowHeigh, ColumnsWidth, TitlePos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelTablePtr(_result, false);
}

#pragma implementation_key(4138)
inline IModelTablePtr IModelTables::Load ( _bstr_t FileName ) {
    struct IModelTable * _result = 0;
    HRESULT _hr = raw_Load(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelTablePtr(_result, false);
}

//
// interface ISymbols3DContainer wrapper method implementations
//

#pragma implementation_key(4139)
inline ILineDimensions3DPtr ISymbols3DContainer::GetLineDimensions3D ( ) {
    struct ILineDimensions3D * _result = 0;
    HRESULT _hr = get_LineDimensions3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineDimensions3DPtr(_result, false);
}

#pragma implementation_key(4140)
inline IRadialDimensions3DPtr ISymbols3DContainer::GetRadialDimensions3D ( ) {
    struct IRadialDimensions3D * _result = 0;
    HRESULT _hr = get_RadialDimensions3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRadialDimensions3DPtr(_result, false);
}

#pragma implementation_key(4141)
inline IDiametralDimensions3DPtr ISymbols3DContainer::GetDiametralDimensions3D ( ) {
    struct IDiametralDimensions3D * _result = 0;
    HRESULT _hr = get_DiametralDimensions3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiametralDimensions3DPtr(_result, false);
}

#pragma implementation_key(4142)
inline IAngleDimensions3DPtr ISymbols3DContainer::GetAngleDimensions3D ( ) {
    struct IAngleDimensions3D * _result = 0;
    HRESULT _hr = get_AngleDimensions3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAngleDimensions3DPtr(_result, false);
}

#pragma implementation_key(4143)
inline ILeaders3DPtr ISymbols3DContainer::GetLeaders3D ( ) {
    struct ILeaders3D * _result = 0;
    HRESULT _hr = get_Leaders3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILeaders3DPtr(_result, false);
}

#pragma implementation_key(4144)
inline IRoughs3DPtr ISymbols3DContainer::GetRoughs3D ( ) {
    struct IRoughs3D * _result = 0;
    HRESULT _hr = get_Roughs3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRoughs3DPtr(_result, false);
}

#pragma implementation_key(4145)
inline IBases3DPtr ISymbols3DContainer::GetBases3D ( ) {
    struct IBases3D * _result = 0;
    HRESULT _hr = get_Bases3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBases3DPtr(_result, false);
}

#pragma implementation_key(4146)
inline ITolerances3DPtr ISymbols3DContainer::GetTolerances3D ( ) {
    struct ITolerances3D * _result = 0;
    HRESULT _hr = get_Tolerances3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITolerances3DPtr(_result, false);
}

#pragma implementation_key(4147)
inline VARIANT_BOOL ISymbols3DContainer::CreateGenerativeDimensions ( const _variant_t & Objects, VARIANT_BOOL CreateZeroDimensions ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CreateGenerativeDimensions(Objects, CreateZeroDimensions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4148)
inline IVariable7Ptr ISymbols3DContainer::GetDimensionVariable ( struct IModelObject * Dimension ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = raw_GetDimensionVariable(Dimension, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(4149)
inline IThreadsPtr ISymbols3DContainer::GetThreads ( ) {
    struct IThreads * _result = 0;
    HRESULT _hr = get_Threads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IThreadsPtr(_result, false);
}

#pragma implementation_key(4150)
inline IArcDimensions3DPtr ISymbols3DContainer::GetArcDimensions3D ( ) {
    struct IArcDimensions3D * _result = 0;
    HRESULT _hr = get_ArcDimensions3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcDimensions3DPtr(_result, false);
}

#pragma implementation_key(4151)
inline IModelTextsPtr ISymbols3DContainer::GetModelTexts ( ) {
    struct IModelTexts * _result = 0;
    HRESULT _hr = get_ModelTexts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelTextsPtr(_result, false);
}

#pragma implementation_key(4152)
inline IModelTablesPtr ISymbols3DContainer::GetModelTables ( ) {
    struct IModelTables * _result = 0;
    HRESULT _hr = get_ModelTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelTablesPtr(_result, false);
}

//
// interface ILineDimension3D wrapper method implementations
//

#pragma implementation_key(4153)
inline IModelObjectPtr ILineDimension3D::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4154)
inline void ILineDimension3D::PutPlane ( struct IModelObject * Plane ) {
    HRESULT _hr = put_Plane(Plane);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICurveVertexParam wrapper method implementations
//

#pragma implementation_key(4155)
inline void ICurveVertexParam::PutBuildingType ( enum ksLineBuildingType Result ) {
    HRESULT _hr = put_BuildingType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4156)
inline enum ksLineBuildingType ICurveVertexParam::GetBuildingType ( ) {
    enum ksLineBuildingType _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4157)
inline void ICurveVertexParam::PutBuildingObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_BuildingObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4158)
inline IModelObjectPtr ICurveVertexParam::GetBuildingObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BuildingObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4159)
inline void ICurveVertexParam::PutAssociationVertex ( struct IModelObject * Result ) {
    HRESULT _hr = put_AssociationVertex(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4160)
inline IModelObjectPtr ICurveVertexParam::GetAssociationVertex ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4161)
inline IModelObjectPtr ICurveVertexParam::GetVertex ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Vertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4162)
inline int ICurveVertexParam::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4163)
inline IKompasAPIObjectPtr ICurveVertexParam::GetPointParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4164)
inline void ICurveVertexParam::PutPointType ( enum ksPoint3DTypeEnum Result ) {
    HRESULT _hr = put_PointType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4165)
inline enum ksPoint3DTypeEnum ICurveVertexParam::GetPointType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4166)
inline VARIANT_BOOL ICurveVertexParam::GetParamVertex ( double * X, double * Y, double * Z, double * Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetParamVertex(X, Y, Z, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4167)
inline VARIANT_BOOL ICurveVertexParam::SetParamVertex ( double X, double Y, double Z, double Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetParamVertex(X, Y, Z, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4168)
inline VARIANT_BOOL ICurveVertexParam::SetParamByVertex ( struct IModelObject * Obj, double Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetParamByVertex(Obj, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4169)
inline VARIANT_BOOL ICurveVertexParam::GetParamByDistance ( double * Distance, double * Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetParamByDistance(Distance, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4170)
inline VARIANT_BOOL ICurveVertexParam::SetParamByDistance ( double Distance, double Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetParamByDistance(Distance, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4171)
inline IVector3DPtr ICurveVertexParam::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4172)
inline VARIANT_BOOL ICurveVertexParam::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpline3D wrapper method implementations
//

#pragma implementation_key(4173)
inline void ISpline3D::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4174)
inline VARIANT_BOOL ISpline3D::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4175)
inline void ISpline3D::PutSplineOnPoles ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_SplineOnPoles(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4176)
inline VARIANT_BOOL ISpline3D::GetSplineOnPoles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SplineOnPoles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4177)
inline void ISpline3D::PutSplineOrder ( long Result ) {
    HRESULT _hr = put_SplineOrder(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4178)
inline long ISpline3D::GetSplineOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_SplineOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4179)
inline long ISpline3D::GetVertexCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VertexCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4180)
inline ICurveVertexParamPtr ISpline3D::GetVertexParams ( long Index ) {
    struct ICurveVertexParam * _result = 0;
    HRESULT _hr = get_VertexParams(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveVertexParamPtr(_result, false);
}

#pragma implementation_key(4181)
inline ICurveVertexParamPtr ISpline3D::AddVertex ( long Index ) {
    struct ICurveVertexParam * _result = 0;
    HRESULT _hr = raw_AddVertex(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveVertexParamPtr(_result, false);
}

#pragma implementation_key(4182)
inline VARIANT_BOOL ISpline3D::DeleteVertex ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteVertex(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4183)
inline VARIANT_BOOL ISpline3D::Flush ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Flush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4184)
inline VARIANT_BOOL ISpline3D::ReadFromFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4185)
inline VARIANT_BOOL ISpline3D::WriteToFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteToFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4186)
inline _variant_t ISpline3D::GetVertexParamsArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VertexParamsArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4187)
inline VARIANT_BOOL ISpline3D::GetVertexCoordinatesArray ( VARIANT * Coordinates, VARIANT * Weights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVertexCoordinatesArray(Coordinates, Weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4188)
inline void ISpline3D::PutKnots ( const _variant_t & PVal ) {
    HRESULT _hr = put_Knots(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4189)
inline _variant_t ISpline3D::GetKnots ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Knots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4190)
inline void ISpline3D::PutSplineTransitionType ( long PointIndex, enum ksSplineTransitionTypeEnum PVal ) {
    HRESULT _hr = put_SplineTransitionType(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4191)
inline enum ksSplineTransitionTypeEnum ISpline3D::GetSplineTransitionType ( long PointIndex ) {
    enum ksSplineTransitionTypeEnum _result;
    HRESULT _hr = get_SplineTransitionType(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4192)
inline void ISpline3D::PutConstraintObject ( long PointIndex, struct IModelObject * PVal ) {
    HRESULT _hr = put_ConstraintObject(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4193)
inline IModelObjectPtr ISpline3D::GetConstraintObject ( long PointIndex ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_ConstraintObject(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4194)
inline void ISpline3D::PutConstraintLimitObject ( long PointIndex, struct IModelObject * PVal ) {
    HRESULT _hr = put_ConstraintLimitObject(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4195)
inline IModelObjectPtr ISpline3D::GetConstraintLimitObject ( long PointIndex ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_ConstraintLimitObject(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4196)
inline void ISpline3D::PutConstraintType ( long PointIndex, enum ksNurbsByPointsPointConstraintsEnum PVal ) {
    HRESULT _hr = put_ConstraintType(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4197)
inline enum ksNurbsByPointsPointConstraintsEnum ISpline3D::GetConstraintType ( long PointIndex ) {
    enum ksNurbsByPointsPointConstraintsEnum _result;
    HRESULT _hr = get_ConstraintType(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4198)
inline void ISpline3D::PutConstraintReverse ( long PointIndex, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ConstraintReverse(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4199)
inline VARIANT_BOOL ISpline3D::GetConstraintReverse ( long PointIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConstraintReverse(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4200)
inline void ISpline3D::PutTangentVectorLenght ( long PointIndex, double PVal ) {
    HRESULT _hr = put_TangentVectorLenght(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4201)
inline double ISpline3D::GetTangentVectorLenght ( long PointIndex ) {
    double _result = 0;
    HRESULT _hr = get_TangentVectorLenght(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4202)
inline void ISpline3D::PutCurvatureRadius ( long PointIndex, double PVal ) {
    HRESULT _hr = put_CurvatureRadius(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4203)
inline double ISpline3D::GetCurvatureRadius ( long PointIndex ) {
    double _result = 0;
    HRESULT _hr = get_CurvatureRadius(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4204)
inline void ISpline3D::PutCurvature ( long PointIndex, double PVal ) {
    HRESULT _hr = put_Curvature(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4205)
inline double ISpline3D::GetCurvature ( long PointIndex ) {
    double _result = 0;
    HRESULT _hr = get_Curvature(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4206)
inline VARIANT_BOOL ISpline3D::GetVector ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVector(PointIndex, VectorIndex, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4207)
inline VARIANT_BOOL ISpline3D::SetVector ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetVector(PointIndex, VectorIndex, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4208)
inline VARIANT_BOOL ISpline3D::InvertVector ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InvertVector(PointIndex, VectorIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4209)
inline void ISpline3D::PutVectorDirectionObject ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex, struct IModelObject * PVal ) {
    HRESULT _hr = put_VectorDirectionObject(PointIndex, VectorIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4210)
inline IModelObjectPtr ISpline3D::GetVectorDirectionObject ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_VectorDirectionObject(PointIndex, VectorIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4211)
inline void ISpline3D::PutVectorOrientation ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_VectorOrientation(PointIndex, VectorIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4212)
inline VARIANT_BOOL ISpline3D::GetVectorOrientation ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VectorOrientation(PointIndex, VectorIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4213)
inline IVector3DPtr ISpline3D::GetDirectionVector ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_DirectionVector(PointIndex, VectorIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4214)
inline VARIANT_BOOL ISpline3D::GetCenterPoint ( long PointIndex, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCenterPoint(PointIndex, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4215)
inline VARIANT_BOOL ISpline3D::SetCenterPoint ( long PointIndex, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCenterPoint(PointIndex, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4216)
inline IKompasAPIObjectPtr ISpline3D::GetCenterPointParams ( long PointIndex ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_CenterPointParams(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4217)
inline void ISpline3D::PutCenterPointType ( long PointIndex, enum ksPoint3DTypeEnum Result ) {
    HRESULT _hr = put_CenterPointType(PointIndex, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4218)
inline enum ksPoint3DTypeEnum ISpline3D::GetCenterPointType ( long PointIndex ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_CenterPointType(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4219)
inline void ISpline3D::PutCenterPointAssociationObject ( long PointIndex, struct IModelObject * PVal ) {
    HRESULT _hr = put_CenterPointAssociationObject(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4220)
inline IModelObjectPtr ISpline3D::GetCenterPointAssociationObject ( long PointIndex ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CenterPointAssociationObject(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4221)
inline VARIANT_BOOL ISpline3D::DeleteCenterPointParams ( long PointIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteCenterPointParams(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4222)
inline VARIANT_BOOL ISpline3D::ClearTangentParameters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearTangentParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISplines3D wrapper method implementations
//

#pragma implementation_key(4223)
inline ISpline3DPtr ISplines3D::GetSpline3D ( const _variant_t & Index ) {
    struct ISpline3D * _result = 0;
    HRESULT _hr = get_Spline3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpline3DPtr(_result, false);
}

#pragma implementation_key(4224)
inline ISpline3DPtr ISplines3D::Add ( ) {
    struct ISpline3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpline3DPtr(_result, false);
}

#pragma implementation_key(4225)
inline _variant_t ISplines3D::Convert ( const _variant_t & Objects ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Convert(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ILocalCoordinateSystems wrapper method implementations
//

#pragma implementation_key(4226)
inline ILocalCoordinateSystemPtr ILocalCoordinateSystems::GetLocalCoordinateSystem ( const _variant_t & Index ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_LocalCoordinateSystem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(4227)
inline ILocalCoordinateSystemPtr ILocalCoordinateSystems::Add ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(4228)
inline IModelObjectPtr ILocalCoordinateSystems::GetCurrent ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4229)
inline VARIANT_BOOL ILocalCoordinateSystems::SetCurrent ( struct ILocalCoordinateSystem * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCurrent(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPolyLine wrapper method implementations
//

#pragma implementation_key(4230)
inline void IPolyLine::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4231)
inline VARIANT_BOOL IPolyLine::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4232)
inline void IPolyLine::PutVertexVisible ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_VertexVisible(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4233)
inline VARIANT_BOOL IPolyLine::GetVertexVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VertexVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4234)
inline long IPolyLine::GetVertexCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VertexCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4235)
inline _variant_t IPolyLine::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4236)
inline ICurveVertexParamPtr IPolyLine::GetVertexParams ( long Index ) {
    struct ICurveVertexParam * _result = 0;
    HRESULT _hr = get_VertexParams(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveVertexParamPtr(_result, false);
}

#pragma implementation_key(4237)
inline VARIANT_BOOL IPolyLine::ReadFromFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4238)
inline VARIANT_BOOL IPolyLine::WriteToFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteToFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4239)
inline ICurveVertexParamPtr IPolyLine::AddVertex ( long Index ) {
    struct ICurveVertexParam * _result = 0;
    HRESULT _hr = raw_AddVertex(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveVertexParamPtr(_result, false);
}

#pragma implementation_key(4240)
inline VARIANT_BOOL IPolyLine::DeleteVertex ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteVertex(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4241)
inline VARIANT_BOOL IPolyLine::Flush ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Flush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4242)
inline _variant_t IPolyLine::GetVertexParamsArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VertexParamsArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4243)
inline VARIANT_BOOL IPolyLine::GetVertexCoordinatesArray ( VARIANT * Coordinates, VARIANT * Radiuses ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVertexCoordinatesArray(Coordinates, Radiuses, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4244)
inline _variant_t IPolyLine::GetErrorIndexes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ErrorIndexes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IPolyLines wrapper method implementations
//

#pragma implementation_key(4245)
inline IPolyLinePtr IPolyLines::GetPolyLine ( const _variant_t & Index ) {
    struct IPolyLine * _result = 0;
    HRESULT _hr = get_PolyLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolyLinePtr(_result, false);
}

#pragma implementation_key(4246)
inline IPolyLinePtr IPolyLines::Add ( ) {
    struct IPolyLine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolyLinePtr(_result, false);
}

//
// interface IControlPoint wrapper method implementations
//

#pragma implementation_key(4247)
inline void IControlPoint::PutShowName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4248)
inline VARIANT_BOOL IControlPoint::GetShowName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IControlPoints wrapper method implementations
//

#pragma implementation_key(4249)
inline IControlPointPtr IControlPoints::GetControlPoint ( const _variant_t & Index ) {
    struct IControlPoint * _result = 0;
    HRESULT _hr = get_ControlPoint(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPointPtr(_result, false);
}

#pragma implementation_key(4250)
inline IControlPointPtr IControlPoints::Add ( ) {
    struct IControlPoint * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPointPtr(_result, false);
}

//
// interface IConjunctivePoint wrapper method implementations
//

#pragma implementation_key(4251)
inline VARIANT_BOOL IConjunctivePoint::SetDirectionObject1 ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetDirectionObject1(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4252)
inline IModelObjectPtr IConjunctivePoint::GetDirectionObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirectionObject1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4253)
inline VARIANT_BOOL IConjunctivePoint::SetDirectionObject2 ( struct IModelObject * NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetDirectionObject2(NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4254)
inline IModelObjectPtr IConjunctivePoint::GetDirectionObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirectionObject2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4255)
inline VARIANT_BOOL IConjunctivePoint::GetDirection1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4256)
inline void IConjunctivePoint::PutDirection1 ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_Direction1(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4257)
inline VARIANT_BOOL IConjunctivePoint::GetDirection2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4258)
inline void IConjunctivePoint::PutDirection2 ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_Direction2(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4259)
inline IModelObjectPtr IConjunctivePoint::GetAxis ( ksObj3dTypeEnum Val ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Axis(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4260)
inline IVector3DPtr IConjunctivePoint::GetVector3D ( VARIANT_BOOL First ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4261)
inline enum ksConjunctivePointTypeEnum IConjunctivePoint::GetBuildingType ( ) {
    enum ksConjunctivePointTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4262)
inline void IConjunctivePoint::PutBuildingType ( enum ksConjunctivePointTypeEnum Val ) {
    HRESULT _hr = put_BuildingType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4263)
inline VARIANT_BOOL IConjunctivePoint::InitByMatrix3D ( const _variant_t & mtr ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitByMatrix3D(mtr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4264)
inline VARIANT_BOOL IConjunctivePoint::GetVector ( ksObj3dTypeEnum Axis, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVector(Axis, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4265)
inline void IConjunctivePoint::PutUseDirection2 ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_UseDirection2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4266)
inline VARIANT_BOOL IConjunctivePoint::GetUseDirection2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDirection2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4267)
inline void IConjunctivePoint::PutShowName ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4268)
inline VARIANT_BOOL IConjunctivePoint::GetShowName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IConjunctivePoints wrapper method implementations
//

#pragma implementation_key(4269)
inline IConjunctivePointPtr IConjunctivePoints::GetConjunctivePoint ( const _variant_t & Index ) {
    struct IConjunctivePoint * _result = 0;
    HRESULT _hr = get_ConjunctivePoint(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConjunctivePointPtr(_result, false);
}

#pragma implementation_key(4270)
inline IConjunctivePointPtr IConjunctivePoints::Add ( ) {
    struct IConjunctivePoint * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConjunctivePointPtr(_result, false);
}

//
// interface ISurfacesIntersectionCurve wrapper method implementations
//

#pragma implementation_key(4271)
inline VARIANT_BOOL ISurfacesIntersectionCurve::SetObjects ( const _variant_t & ObjectsArray1, const _variant_t & ObjectsArray2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetObjects(ObjectsArray1, ObjectsArray2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4272)
inline VARIANT_BOOL ISurfacesIntersectionCurve::GetObjects ( VARIANT * ObjectsArray1, VARIANT * ObjectsArray2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetObjects(ObjectsArray1, ObjectsArray2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4273)
inline VARIANT_BOOL ISurfacesIntersectionCurve::AddObjects ( VARIANT_BOOL ForArray1, const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddObjects(ForArray1, Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4274)
inline VARIANT_BOOL ISurfacesIntersectionCurve::Clear ( VARIANT_BOOL ForArray1 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(ForArray1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4275)
inline long ISurfacesIntersectionCurve::GetObjectsCount ( VARIANT_BOOL ForArray1 ) {
    long _result = 0;
    HRESULT _hr = get_ObjectsCount(ForArray1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4276)
inline IModelObjectPtr ISurfacesIntersectionCurve::GetObject ( VARIANT_BOOL ForArray1, long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = raw_GetObject(ForArray1, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4277)
inline VARIANT_BOOL ISurfacesIntersectionCurve::GetAutoCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4278)
inline void ISurfacesIntersectionCurve::PutAutoCheck ( VARIANT_BOOL CheckValue ) {
    HRESULT _hr = put_AutoCheck(CheckValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4279)
inline _variant_t ISurfacesIntersectionCurve::GetEdgesChecks ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EdgesChecks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4280)
inline void ISurfacesIntersectionCurve::PutEdgesChecks ( const _variant_t & Checks ) {
    HRESULT _hr = put_EdgesChecks(Checks);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4281)
inline long ISurfacesIntersectionCurve::GetEdgesArraysCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesArraysCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4282)
inline _variant_t ISurfacesIntersectionCurve::GetEdges ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4283)
inline VARIANT_BOOL ISurfacesIntersectionCurve::GetEdgesCheck ( long ContourIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EdgesCheck(ContourIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4284)
inline void ISurfacesIntersectionCurve::PutEdgesCheck ( long ContourIndex, VARIANT_BOOL CheckValue ) {
    HRESULT _hr = put_EdgesCheck(ContourIndex, CheckValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4285)
inline long ISurfacesIntersectionCurve::GetEdgesChecksCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesChecksCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISurfacesIntersectionCurves wrapper method implementations
//

#pragma implementation_key(4286)
inline ISurfacesIntersectionCurvePtr ISurfacesIntersectionCurves::GetSurfacesIntersectionCurve ( const _variant_t & Index ) {
    struct ISurfacesIntersectionCurve * _result = 0;
    HRESULT _hr = get_SurfacesIntersectionCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfacesIntersectionCurvePtr(_result, false);
}

#pragma implementation_key(4287)
inline ISurfacesIntersectionCurvePtr ISurfacesIntersectionCurves::Add ( ) {
    struct ISurfacesIntersectionCurve * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfacesIntersectionCurvePtr(_result, false);
}

//
// interface IEquidistant3D wrapper method implementations
//

#pragma implementation_key(4288)
inline _variant_t IEquidistant3D::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4289)
inline void IEquidistant3D::PutEdges ( const _variant_t & PVal ) {
    HRESULT _hr = put_Edges(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4290)
inline void IEquidistant3D::PutOnFace ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_OnFace(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4291)
inline VARIANT_BOOL IEquidistant3D::GetOnFace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4292)
inline IModelObjectPtr IEquidistant3D::GetBaseObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4293)
inline void IEquidistant3D::PutBaseObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_BaseObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4294)
inline void IEquidistant3D::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4295)
inline double IEquidistant3D::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4296)
inline void IEquidistant3D::PutDistance ( double PVal ) {
    HRESULT _hr = put_Distance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4297)
inline double IEquidistant3D::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4298)
inline void IEquidistant3D::PutCutMode ( enum ksEquidistant3DCutModeEnum PVal ) {
    HRESULT _hr = put_CutMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4299)
inline enum ksEquidistant3DCutModeEnum IEquidistant3D::GetCutMode ( ) {
    enum ksEquidistant3DCutModeEnum _result;
    HRESULT _hr = get_CutMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4300)
inline void IEquidistant3D::PutKeepRadius ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_KeepRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4301)
inline VARIANT_BOOL IEquidistant3D::GetKeepRadius ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4302)
inline void IEquidistant3D::PutDirFromBegin ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DirFromBegin(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4303)
inline VARIANT_BOOL IEquidistant3D::GetDirFromBegin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DirFromBegin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4304)
inline IVector3DPtr IEquidistant3D::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4305)
inline VARIANT_BOOL IEquidistant3D::AddEdge ( struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddEdge(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4306)
inline VARIANT_BOOL IEquidistant3D::RemoveEdge ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveEdge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4307)
inline long IEquidistant3D::GetEdgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEquidistants3D wrapper method implementations
//

#pragma implementation_key(4308)
inline IEquidistant3DPtr IEquidistants3D::GetEquidistant3D ( const _variant_t & Index ) {
    struct IEquidistant3D * _result = 0;
    HRESULT _hr = get_Equidistant3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistant3DPtr(_result, false);
}

#pragma implementation_key(4309)
inline IEquidistant3DPtr IEquidistants3D::Add ( ) {
    struct IEquidistant3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistant3DPtr(_result, false);
}

//
// interface ITrimmedCurve wrapper method implementations
//

#pragma implementation_key(4310)
inline void ITrimmedCurve::PutCurve ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Curve(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4311)
inline IModelObjectPtr ITrimmedCurve::GetCurve ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Curve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4312)
inline void ITrimmedCurve::PutCutObject1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_CutObject1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4313)
inline IModelObjectPtr ITrimmedCurve::GetCutObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CutObject1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4314)
inline void ITrimmedCurve::PutCutObject2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_CutObject2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4315)
inline IModelObjectPtr ITrimmedCurve::GetCutObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CutObject2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4316)
inline void ITrimmedCurve::PutUseTwoCutObjecs ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_UseTwoCutObjecs(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4317)
inline VARIANT_BOOL ITrimmedCurve::GetUseTwoCutObjecs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTwoCutObjecs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4318)
inline void ITrimmedCurve::PutSense ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Sense(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4319)
inline VARIANT_BOOL ITrimmedCurve::GetSense ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4320)
inline void ITrimmedCurve::PutBeginParameter ( double Val ) {
    HRESULT _hr = put_BeginParameter(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4321)
inline double ITrimmedCurve::GetBeginParameter ( ) {
    double _result = 0;
    HRESULT _hr = get_BeginParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4322)
inline void ITrimmedCurve::PutEndParameter ( double Val ) {
    HRESULT _hr = put_EndParameter(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4323)
inline double ITrimmedCurve::GetEndParameter ( ) {
    double _result = 0;
    HRESULT _hr = get_EndParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4324)
inline VARIANT_BOOL ITrimmedCurve::GetIntersectParameters ( VARIANT * CutPoints1, VARIANT * CutPoints2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIntersectParameters(CutPoints1, CutPoints2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITrimmedCurves wrapper method implementations
//

#pragma implementation_key(4325)
inline ITrimmedCurvePtr ITrimmedCurves::GetTrimmedCurve ( const _variant_t & Index ) {
    struct ITrimmedCurve * _result = 0;
    HRESULT _hr = get_TrimmedCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrimmedCurvePtr(_result, false);
}

#pragma implementation_key(4326)
inline ITrimmedCurvePtr ITrimmedCurves::Add ( ) {
    struct ITrimmedCurve * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrimmedCurvePtr(_result, false);
}

//
// interface IConnectCurve wrapper method implementations
//

#pragma implementation_key(4327)
inline void IConnectCurve::PutCurve1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Curve1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4328)
inline IModelObjectPtr IConnectCurve::GetCurve1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Curve1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4329)
inline void IConnectCurve::PutCurve2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Curve2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4330)
inline IModelObjectPtr IConnectCurve::GetCurve2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Curve2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4331)
inline void IConnectCurve::PutCurve1ConnectType ( enum ksConnectTypeEnum PVal ) {
    HRESULT _hr = put_Curve1ConnectType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4332)
inline enum ksConnectTypeEnum IConnectCurve::GetCurve1ConnectType ( ) {
    enum ksConnectTypeEnum _result;
    HRESULT _hr = get_Curve1ConnectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4333)
inline void IConnectCurve::PutCurve2ConnectType ( enum ksConnectTypeEnum PVal ) {
    HRESULT _hr = put_Curve2ConnectType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4334)
inline enum ksConnectTypeEnum IConnectCurve::GetCurve2ConnectType ( ) {
    enum ksConnectTypeEnum _result;
    HRESULT _hr = get_Curve2ConnectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4335)
inline void IConnectCurve::PutCurve1ConnectVertex ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Curve1ConnectVertex(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4336)
inline VARIANT_BOOL IConnectCurve::GetCurve1ConnectVertex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Curve1ConnectVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4337)
inline void IConnectCurve::PutCurve2ConnectVertex ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Curve2ConnectVertex(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4338)
inline VARIANT_BOOL IConnectCurve::GetCurve2ConnectVertex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Curve2ConnectVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4339)
inline void IConnectCurve::PutTension ( double Result ) {
    HRESULT _hr = put_Tension(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4340)
inline double IConnectCurve::GetTension ( ) {
    double _result = 0;
    HRESULT _hr = get_Tension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IConnectCurves wrapper method implementations
//

#pragma implementation_key(4341)
inline IConnectCurvePtr IConnectCurves::GetConnectCurve ( const _variant_t & Index ) {
    struct IConnectCurve * _result = 0;
    HRESULT _hr = get_ConnectCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConnectCurvePtr(_result, false);
}

#pragma implementation_key(4342)
inline IConnectCurvePtr IConnectCurves::Add ( ) {
    struct IConnectCurve * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConnectCurvePtr(_result, false);
}

//
// interface IFilletCurve wrapper method implementations
//

#pragma implementation_key(4343)
inline void IFilletCurve::PutCurve1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Curve1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4344)
inline IModelObjectPtr IFilletCurve::GetCurve1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Curve1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4345)
inline void IFilletCurve::PutCurve2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Curve2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4346)
inline IModelObjectPtr IFilletCurve::GetCurve2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Curve2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4347)
inline void IFilletCurve::PutTrimCurve1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TrimCurve1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4348)
inline VARIANT_BOOL IFilletCurve::GetTrimCurve1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TrimCurve1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4349)
inline void IFilletCurve::PutTrimCurve2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TrimCurve2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4350)
inline VARIANT_BOOL IFilletCurve::GetTrimCurve2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TrimCurve2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4351)
inline VARIANT_BOOL IFilletCurve::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4352)
inline void IFilletCurve::PutDirection ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_Direction(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4353)
inline void IFilletCurve::PutRadius ( double Result ) {
    HRESULT _hr = put_Radius(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4354)
inline double IFilletCurve::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4355)
inline VARIANT_BOOL IFilletCurve::GetCurve1CutPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCurve1CutPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4356)
inline VARIANT_BOOL IFilletCurve::SetCurve1CutPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCurve1CutPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4357)
inline VARIANT_BOOL IFilletCurve::GetCurve2CutPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCurve2CutPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4358)
inline VARIANT_BOOL IFilletCurve::SetCurve2CutPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCurve2CutPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4359)
inline VARIANT_BOOL IFilletCurve::GetOnSurface ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4360)
inline void IFilletCurve::PutOnSurface ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_OnSurface(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFilletCurves wrapper method implementations
//

#pragma implementation_key(4361)
inline IFilletCurvePtr IFilletCurves::GetFilletCurve ( const _variant_t & Index ) {
    struct IFilletCurve * _result = 0;
    HRESULT _hr = get_FilletCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilletCurvePtr(_result, false);
}

#pragma implementation_key(4362)
inline IFilletCurvePtr IFilletCurves::Add ( ) {
    struct IFilletCurve * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilletCurvePtr(_result, false);
}

//
// interface IArc3D wrapper method implementations
//

#pragma implementation_key(4363)
inline void IArc3D::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4364)
inline VARIANT_BOOL IArc3D::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4365)
inline void IArc3D::PutDirection ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Direction(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4366)
inline VARIANT_BOOL IArc3D::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4367)
inline void IArc3D::PutBuildingType ( enum ksArc3DBuildingTypeEnum Result ) {
    HRESULT _hr = put_BuildingType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4368)
inline enum ksArc3DBuildingTypeEnum IArc3D::GetBuildingType ( ) {
    enum ksArc3DBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4369)
inline void IArc3D::PutRadius ( double Result ) {
    HRESULT _hr = put_Radius(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4370)
inline double IArc3D::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4371)
inline void IArc3D::PutAngle1 ( double Result ) {
    HRESULT _hr = put_Angle1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4372)
inline double IArc3D::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4373)
inline void IArc3D::PutAngle2 ( double Result ) {
    HRESULT _hr = put_Angle2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4374)
inline double IArc3D::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4375)
inline VARIANT_BOOL IArc3D::GetPoint ( enum ksArc3DParameterEnum Index, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4376)
inline VARIANT_BOOL IArc3D::SetPoint ( enum ksArc3DParameterEnum Index, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4377)
inline void IArc3D::PutAssociationObject ( enum ksArc3DParameterEnum Index, struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4378)
inline IModelObjectPtr IArc3D::GetAssociationObject ( enum ksArc3DParameterEnum Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4379)
inline void IArc3D::PutBuildingObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_BuildingObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4380)
inline IModelObjectPtr IArc3D::GetBuildingObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BuildingObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4381)
inline IVector3DPtr IArc3D::GetBuildingVectorParameters ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_BuildingVectorParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4382)
inline void IArc3D::PutDirectionPointIndex ( enum ksArc3DParameterEnum Index ) {
    HRESULT _hr = put_DirectionPointIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4383)
inline enum ksArc3DParameterEnum IArc3D::GetDirectionPointIndex ( ) {
    enum ksArc3DParameterEnum _result;
    HRESULT _hr = get_DirectionPointIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4384)
inline void IArc3D::PutPointType ( enum ksArc3DParameterEnum Index, enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointType(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4385)
inline enum ksPoint3DTypeEnum IArc3D::GetPointType ( enum ksArc3DParameterEnum Index ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4386)
inline IKompasAPIObjectPtr IArc3D::GetPointParameters ( enum ksArc3DParameterEnum Index ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

//
// interface IArcs3D wrapper method implementations
//

#pragma implementation_key(4387)
inline IArc3DPtr IArcs3D::GetArc3D ( const _variant_t & Index ) {
    struct IArc3D * _result = 0;
    HRESULT _hr = get_Arc3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArc3DPtr(_result, false);
}

#pragma implementation_key(4388)
inline IArc3DPtr IArcs3D::Add ( ) {
    struct IArc3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArc3DPtr(_result, false);
}

//
// interface ICurveOutLine wrapper method implementations
//

#pragma implementation_key(4389)
inline void ICurveOutLine::PutFaces ( const _variant_t & Faces ) {
    HRESULT _hr = put_Faces(Faces);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4390)
inline _variant_t ICurveOutLine::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4391)
inline IVector3DPtr ICurveOutLine::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4392)
inline VARIANT_BOOL ICurveOutLine::GetAutoCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4393)
inline void ICurveOutLine::PutAutoCheck ( VARIANT_BOOL CheckValue ) {
    HRESULT _hr = put_AutoCheck(CheckValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4394)
inline _variant_t ICurveOutLine::GetEdgesChecks ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EdgesChecks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4395)
inline void ICurveOutLine::PutEdgesChecks ( const _variant_t & Checks ) {
    HRESULT _hr = put_EdgesChecks(Checks);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4396)
inline long ICurveOutLine::GetEdgesArraysCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesArraysCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4397)
inline _variant_t ICurveOutLine::GetEdges ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4398)
inline VARIANT_BOOL ICurveOutLine::GetEdgesCheck ( long ContourIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EdgesCheck(ContourIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4399)
inline void ICurveOutLine::PutEdgesCheck ( long ContourIndex, VARIANT_BOOL CheckValue ) {
    HRESULT _hr = put_EdgesCheck(ContourIndex, CheckValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4400)
inline long ICurveOutLine::GetEdgesChecksCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesChecksCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICurveOutLines wrapper method implementations
//

#pragma implementation_key(4401)
inline ICurveOutLinePtr ICurveOutLines::GetCurveOutLine ( const _variant_t & Index ) {
    struct ICurveOutLine * _result = 0;
    HRESULT _hr = get_CurveOutLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveOutLinePtr(_result, false);
}

#pragma implementation_key(4402)
inline ICurveOutLinePtr ICurveOutLines::Add ( ) {
    struct ICurveOutLine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveOutLinePtr(_result, false);
}

//
// interface ICurveByLaw wrapper method implementations
//

#pragma implementation_key(4403)
inline void ICurveByLaw::PutPointsType ( enum ksPoint3DTypeEnum Type ) {
    HRESULT _hr = put_PointsType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4404)
inline enum ksPoint3DTypeEnum ICurveByLaw::GetPointsType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4405)
inline void ICurveByLaw::PutLawType ( enum ksCoordLawEnum coord, enum ksLawTypeEnum Type ) {
    HRESULT _hr = put_LawType(coord, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4406)
inline enum ksLawTypeEnum ICurveByLaw::GetLawType ( enum ksCoordLawEnum coord ) {
    enum ksLawTypeEnum _result;
    HRESULT _hr = get_LawType(coord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4407)
inline void ICurveByLaw::PutTMin ( enum ksCoordLawEnum coord, double T ) {
    HRESULT _hr = put_TMin(coord, T);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4408)
inline double ICurveByLaw::GetTMin ( enum ksCoordLawEnum coord ) {
    double _result = 0;
    HRESULT _hr = get_TMin(coord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4409)
inline void ICurveByLaw::PutTMax ( enum ksCoordLawEnum coord, double T ) {
    HRESULT _hr = put_TMax(coord, T);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4410)
inline double ICurveByLaw::GetTMax ( enum ksCoordLawEnum coord ) {
    double _result = 0;
    HRESULT _hr = get_TMax(coord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4411)
inline void ICurveByLaw::PutExpression ( enum ksCoordLawEnum coord, _bstr_t PVal ) {
    HRESULT _hr = put_Expression(coord, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4412)
inline _bstr_t ICurveByLaw::GetExpression ( enum ksCoordLawEnum coord ) {
    BSTR _result = 0;
    HRESULT _hr = get_Expression(coord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4413)
inline _variant_t ICurveByLaw::GetUserVariables ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UserVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4414)
inline void ICurveByLaw::PutIntervalExpression ( enum ksCoordLawEnum coord, _bstr_t PVal ) {
    HRESULT _hr = put_IntervalExpression(coord, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4415)
inline _bstr_t ICurveByLaw::GetIntervalExpression ( enum ksCoordLawEnum coord ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntervalExpression(coord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICurveByLaws wrapper method implementations
//

#pragma implementation_key(4416)
inline ICurveByLawPtr ICurveByLaws::GetCurveByLaw ( const _variant_t & Index ) {
    struct ICurveByLaw * _result = 0;
    HRESULT _hr = get_CurveByLaw(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveByLawPtr(_result, false);
}

#pragma implementation_key(4417)
inline ICurveByLawPtr ICurveByLaws::Add ( ) {
    struct ICurveByLaw * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveByLawPtr(_result, false);
}

//
// interface IIsoparametricCurve wrapper method implementations
//

#pragma implementation_key(4418)
inline void IIsoparametricCurve::PutSurfaceObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_SurfaceObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4419)
inline IModelObjectPtr IIsoparametricCurve::GetSurfaceObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_SurfaceObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4420)
inline void IIsoparametricCurve::PutU ( double PVal ) {
    HRESULT _hr = put_U(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4421)
inline double IIsoparametricCurve::GetU ( ) {
    double _result = 0;
    HRESULT _hr = get_U(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4422)
inline void IIsoparametricCurve::PutV ( double PVal ) {
    HRESULT _hr = put_V(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4423)
inline double IIsoparametricCurve::GetV ( ) {
    double _result = 0;
    HRESULT _hr = get_V(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4424)
inline void IIsoparametricCurve::PutAssociationObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4425)
inline IModelObjectPtr IIsoparametricCurve::GetAssociationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4426)
inline void IIsoparametricCurve::PutUDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4427)
inline VARIANT_BOOL IIsoparametricCurve::GetUDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4428)
inline VARIANT_BOOL IIsoparametricCurve::GetPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4429)
inline VARIANT_BOOL IIsoparametricCurve::SetPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IIsoparametricCurves wrapper method implementations
//

#pragma implementation_key(4430)
inline IIsoparametricCurvePtr IIsoparametricCurves::GetIsoparametricCurve ( const _variant_t & Index ) {
    struct IIsoparametricCurve * _result = 0;
    HRESULT _hr = get_IsoparametricCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IIsoparametricCurvePtr(_result, false);
}

#pragma implementation_key(4431)
inline IIsoparametricCurvePtr IIsoparametricCurves::Add ( ) {
    struct IIsoparametricCurve * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IIsoparametricCurvePtr(_result, false);
}

//
// interface IIsoparametricCurvesSet wrapper method implementations
//

#pragma implementation_key(4432)
inline void IIsoparametricCurvesSet::PutSurfaceObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_SurfaceObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4433)
inline IModelObjectPtr IIsoparametricCurvesSet::GetSurfaceObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_SurfaceObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4434)
inline void IIsoparametricCurvesSet::PutUCount ( long PVal ) {
    HRESULT _hr = put_UCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4435)
inline long IIsoparametricCurvesSet::GetUCount ( ) {
    long _result = 0;
    HRESULT _hr = get_UCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4436)
inline void IIsoparametricCurvesSet::PutVCount ( long PVal ) {
    HRESULT _hr = put_VCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4437)
inline long IIsoparametricCurvesSet::GetVCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4438)
inline void IIsoparametricCurvesSet::PutSaveBoundaries ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveBoundaries(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4439)
inline VARIANT_BOOL IIsoparametricCurvesSet::GetSaveBoundaries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveBoundaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4440)
inline VARIANT_BOOL IIsoparametricCurvesSet::Destroy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Destroy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IIsoparametricCurvesSets wrapper method implementations
//

#pragma implementation_key(4441)
inline IIsoparametricCurvesSetPtr IIsoparametricCurvesSets::GetIsoparametricCurvesSet ( const _variant_t & Index ) {
    struct IIsoparametricCurvesSet * _result = 0;
    HRESULT _hr = get_IsoparametricCurvesSet(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IIsoparametricCurvesSetPtr(_result, false);
}

#pragma implementation_key(4442)
inline IIsoparametricCurvesSetPtr IIsoparametricCurvesSets::Add ( ) {
    struct IIsoparametricCurvesSet * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IIsoparametricCurvesSetPtr(_result, false);
}

//
// interface ISplineOnSurface wrapper method implementations
//

#pragma implementation_key(4443)
inline void ISplineOnSurface::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4444)
inline VARIANT_BOOL ISplineOnSurface::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4445)
inline void ISplineOnSurface::PutSplineOnPoles ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_SplineOnPoles(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4446)
inline VARIANT_BOOL ISplineOnSurface::GetSplineOnPoles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SplineOnPoles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4447)
inline void ISplineOnSurface::PutSplineOrder ( long Result ) {
    HRESULT _hr = put_SplineOrder(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4448)
inline long ISplineOnSurface::GetSplineOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_SplineOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4449)
inline void ISplineOnSurface::PutSurfaceObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_SurfaceObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4450)
inline IModelObjectPtr ISplineOnSurface::GetSurfaceObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_SurfaceObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4451)
inline long ISplineOnSurface::GetVertexCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VertexCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4452)
inline VARIANT_BOOL ISplineOnSurface::GetVertex ( long Index, double * U, double * V, double * W ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVertex(Index, U, V, W, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4453)
inline VARIANT_BOOL ISplineOnSurface::SetVertex ( long Index, double U, double V, double W ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetVertex(Index, U, V, W, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4454)
inline VARIANT_BOOL ISplineOnSurface::AddVertex ( long IndexAt, double U, double V, double W, struct IModelObject * AssociationObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddVertex(IndexAt, U, V, W, AssociationObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4455)
inline VARIANT_BOOL ISplineOnSurface::DeleteVertex ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteVertex(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4456)
inline VARIANT_BOOL ISplineOnSurface::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4457)
inline VARIANT_BOOL ISplineOnSurface::GetPoint ( long Index, double * X, double * Y, double * Z, double * W ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Index, X, Y, Z, W, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4458)
inline VARIANT_BOOL ISplineOnSurface::SetPoint ( long Index, double X, double Y, double Z, double W ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(Index, X, Y, Z, W, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4459)
inline VARIANT_BOOL ISplineOnSurface::AddPoint ( long IndexAt, double X, double Y, double Z, double W, struct IModelObject * AssociationObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPoint(IndexAt, X, Y, Z, W, AssociationObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4460)
inline VARIANT_BOOL ISplineOnSurface::GetVertexParams ( VARIANT * UV, VARIANT * Points, VARIANT * Weights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVertexParams(UV, Points, Weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4461)
inline void ISplineOnSurface::PutAssociationObject ( long Index, struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4462)
inline IModelObjectPtr ISplineOnSurface::GetAssociationObject ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4463)
inline void ISplineOnSurface::PutSplineTangent ( long Index, enum ksSplineTangentEnum PVal ) {
    HRESULT _hr = put_SplineTangent(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4464)
inline enum ksSplineTangentEnum ISplineOnSurface::GetSplineTangent ( long Index ) {
    enum ksSplineTangentEnum _result;
    HRESULT _hr = get_SplineTangent(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4465)
inline VARIANT_BOOL ISplineOnSurface::SetTangentVector ( long Index, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTangentVector(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4466)
inline VARIANT_BOOL ISplineOnSurface::GetTangentVector ( long Index, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetTangentVector(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4467)
inline VARIANT_BOOL ISplineOnSurface::Invert ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Invert(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4468)
inline void ISplineOnSurface::PutVectorLenght ( long Index, double PVal ) {
    HRESULT _hr = put_VectorLenght(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4469)
inline double ISplineOnSurface::GetVectorLenght ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_VectorLenght(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4470)
inline void ISplineOnSurface::PutTangentCurve ( long Index, struct IModelObject * PVal ) {
    HRESULT _hr = put_TangentCurve(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4471)
inline IModelObjectPtr ISplineOnSurface::GetTangentCurve ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_TangentCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4472)
inline VARIANT_BOOL ISplineOnSurface::ClearTangentParameters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearTangentParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4473)
inline void ISplineOnSurface::PutReverse ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Reverse(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4474)
inline VARIANT_BOOL ISplineOnSurface::GetReverse ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Reverse(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISplinesOnSurfaces wrapper method implementations
//

#pragma implementation_key(4475)
inline ISplineOnSurfacePtr ISplinesOnSurfaces::GetSplineOnSurface ( const _variant_t & Index ) {
    struct ISplineOnSurface * _result = 0;
    HRESULT _hr = get_SplineOnSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplineOnSurfacePtr(_result, false);
}

#pragma implementation_key(4476)
inline ISplineOnSurfacePtr ISplinesOnSurfaces::Add ( ) {
    struct ISplineOnSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplineOnSurfacePtr(_result, false);
}

//
// interface IProjectionCurve wrapper method implementations
//

#pragma implementation_key(4477)
inline void IProjectionCurve::PutFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_Faces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4478)
inline _variant_t IProjectionCurve::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4479)
inline void IProjectionCurve::PutCurves ( const _variant_t & PVal ) {
    HRESULT _hr = put_Curves(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4480)
inline _variant_t IProjectionCurve::GetCurves ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Curves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4481)
inline enum ksCurveProjectionTypeEnum IProjectionCurve::GetProjectionType ( ) {
    enum ksCurveProjectionTypeEnum _result;
    HRESULT _hr = get_ProjectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4482)
inline void IProjectionCurve::PutProjectionType ( enum ksCurveProjectionTypeEnum PVal ) {
    HRESULT _hr = put_ProjectionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4483)
inline IVector3DPtr IProjectionCurve::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4484)
inline VARIANT_BOOL IProjectionCurve::GetTruncationByBounds ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TruncationByBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4485)
inline void IProjectionCurve::PutTruncationByBounds ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TruncationByBounds(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4486)
inline VARIANT_BOOL IProjectionCurve::GetAutoCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4487)
inline void IProjectionCurve::PutAutoCheck ( VARIANT_BOOL CheckValue ) {
    HRESULT _hr = put_AutoCheck(CheckValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4488)
inline _variant_t IProjectionCurve::GetEdgesChecks ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EdgesChecks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4489)
inline void IProjectionCurve::PutEdgesChecks ( const _variant_t & Checks ) {
    HRESULT _hr = put_EdgesChecks(Checks);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4490)
inline long IProjectionCurve::GetEdgesArraysCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesArraysCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4491)
inline _variant_t IProjectionCurve::GetEdges ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4492)
inline VARIANT_BOOL IProjectionCurve::GetEdgesCheck ( long ContourIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EdgesCheck(ContourIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4493)
inline void IProjectionCurve::PutEdgesCheck ( long ContourIndex, VARIANT_BOOL CheckValue ) {
    HRESULT _hr = put_EdgesCheck(ContourIndex, CheckValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4494)
inline long IProjectionCurve::GetEdgesChecksCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesChecksCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProjectionCurves wrapper method implementations
//

#pragma implementation_key(4495)
inline IProjectionCurvePtr IProjectionCurves::GetProjectionCurve ( const _variant_t & Index ) {
    struct IProjectionCurve * _result = 0;
    HRESULT _hr = get_ProjectionCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProjectionCurvePtr(_result, false);
}

#pragma implementation_key(4496)
inline IProjectionCurvePtr IProjectionCurves::Add ( ) {
    struct IProjectionCurve * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProjectionCurvePtr(_result, false);
}

//
// interface ICurveBy2Projections wrapper method implementations
//

#pragma implementation_key(4497)
inline void ICurveBy2Projections::PutProjection1 ( const _variant_t & PVal ) {
    HRESULT _hr = put_Projection1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4498)
inline _variant_t ICurveBy2Projections::GetProjection1 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Projection1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4499)
inline void ICurveBy2Projections::PutProjection2 ( const _variant_t & PVal ) {
    HRESULT _hr = put_Projection2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4500)
inline _variant_t ICurveBy2Projections::GetProjection2 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Projection2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4501)
inline VARIANT_BOOL ICurveBy2Projections::GetAutoCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4502)
inline void ICurveBy2Projections::PutAutoCheck ( VARIANT_BOOL CheckValue ) {
    HRESULT _hr = put_AutoCheck(CheckValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4503)
inline _variant_t ICurveBy2Projections::GetEdgesChecks ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EdgesChecks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4504)
inline void ICurveBy2Projections::PutEdgesChecks ( const _variant_t & Checks ) {
    HRESULT _hr = put_EdgesChecks(Checks);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4505)
inline long ICurveBy2Projections::GetEdgesArraysCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesArraysCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4506)
inline _variant_t ICurveBy2Projections::GetEdges ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4507)
inline VARIANT_BOOL ICurveBy2Projections::GetEdgesCheck ( long ContourIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EdgesCheck(ContourIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4508)
inline void ICurveBy2Projections::PutEdgesCheck ( long ContourIndex, VARIANT_BOOL CheckValue ) {
    HRESULT _hr = put_EdgesCheck(ContourIndex, CheckValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4509)
inline long ICurveBy2Projections::GetEdgesChecksCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesChecksCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICurvesBy2Projectionses wrapper method implementations
//

#pragma implementation_key(4510)
inline ICurveBy2ProjectionsPtr ICurvesBy2Projectionses::GetCurveBy2Projections ( const _variant_t & Index ) {
    struct ICurveBy2Projections * _result = 0;
    HRESULT _hr = get_CurveBy2Projections(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveBy2ProjectionsPtr(_result, false);
}

#pragma implementation_key(4511)
inline ICurveBy2ProjectionsPtr ICurvesBy2Projectionses::Add ( ) {
    struct ICurveBy2Projections * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveBy2ProjectionsPtr(_result, false);
}

//
// interface IContour3D wrapper method implementations
//

#pragma implementation_key(4512)
inline void IContour3D::PutContour3DType ( enum ksContour3DTypeEnum PVal ) {
    HRESULT _hr = put_Contour3DType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4513)
inline enum ksContour3DTypeEnum IContour3D::GetContour3DType ( ) {
    enum ksContour3DTypeEnum _result;
    HRESULT _hr = get_Contour3DType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4514)
inline void IContour3D::PutEdges ( const _variant_t & PVal ) {
    HRESULT _hr = put_Edges(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4515)
inline _variant_t IContour3D::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4516)
inline void IContour3D::PutCutMode ( enum ksEquidistant3DCutModeEnum PVal ) {
    HRESULT _hr = put_CutMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4517)
inline enum ksEquidistant3DCutModeEnum IContour3D::GetCutMode ( ) {
    enum ksEquidistant3DCutModeEnum _result;
    HRESULT _hr = get_CutMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4518)
inline void IContour3D::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4519)
inline double IContour3D::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4520)
inline void IContour3D::PutEdgesVisibility ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EdgesVisibility(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4521)
inline VARIANT_BOOL IContour3D::GetEdgesVisibility ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EdgesVisibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4522)
inline VARIANT_BOOL IContour3D::AddEdge ( struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddEdge(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4523)
inline VARIANT_BOOL IContour3D::RemoveEdge ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveEdge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4524)
inline long IContour3D::GetEdgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4525)
inline void IContour3D::PutBuildingType ( enum ksContour3DBuildingTypeTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4526)
inline enum ksContour3DBuildingTypeTypeEnum IContour3D::GetBuildingType ( ) {
    enum ksContour3DBuildingTypeTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4527)
inline IEquidistant3DPtr IContour3D::GetEquidistant ( ) {
    struct IEquidistant3D * _result = 0;
    HRESULT _hr = get_Equidistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistant3DPtr(_result, false);
}

#pragma implementation_key(4528)
inline long IContour3D::GetPointsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PointsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4529)
inline void IContour3D::PutVarRadius ( long PointNum, double PVal ) {
    HRESULT _hr = put_VarRadius(PointNum, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4530)
inline double IContour3D::GetVarRadius ( long PointNum ) {
    double _result = 0;
    HRESULT _hr = get_VarRadius(PointNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4531)
inline VARIANT_BOOL IContour3D::DelVarRadius ( long PointNum ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DelVarRadius(PointNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4532)
inline VARIANT_BOOL IContour3D::GetIntersectionPoint ( long PointNum, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIntersectionPoint(PointNum, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContours3D wrapper method implementations
//

#pragma implementation_key(4533)
inline IContour3DPtr IContours3D::GetContour3D ( const _variant_t & Index ) {
    struct IContour3D * _result = 0;
    HRESULT _hr = get_Contour3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContour3DPtr(_result, false);
}

#pragma implementation_key(4534)
inline IContour3DPtr IContours3D::Add ( ) {
    struct IContour3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContour3DPtr(_result, false);
}

//
// interface ILineSegment3D wrapper method implementations
//

#pragma implementation_key(4535)
inline VARIANT_BOOL ILineSegment3D::GetPoint ( VARIANT_BOOL Begin, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Begin, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4536)
inline VARIANT_BOOL ILineSegment3D::SetPoint ( VARIANT_BOOL Begin, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(Begin, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4537)
inline void ILineSegment3D::PutAssociationObject ( VARIANT_BOOL Begin, struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(Begin, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4538)
inline IModelObjectPtr ILineSegment3D::GetAssociationObject ( VARIANT_BOOL Begin ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(Begin, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4539)
inline void ILineSegment3D::PutPointType ( VARIANT_BOOL Begin, enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointType(Begin, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4540)
inline enum ksPoint3DTypeEnum ILineSegment3D::GetPointType ( VARIANT_BOOL Begin ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointType(Begin, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4541)
inline IKompasAPIObjectPtr ILineSegment3D::GetPointParameters ( VARIANT_BOOL Begin ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(Begin, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4542)
inline double ILineSegment3D::GetLenght ( ) {
    double _result = 0;
    HRESULT _hr = get_Lenght(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4543)
inline void ILineSegment3D::PutLenght ( double Result ) {
    HRESULT _hr = put_Lenght(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4544)
inline void ILineSegment3D::PutBuildingType ( enum ksLineSegment3DTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4545)
inline enum ksLineSegment3DTypeEnum ILineSegment3D::GetBuildingType ( ) {
    enum ksLineSegment3DTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4546)
inline void ILineSegment3D::PutBasePlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BasePlane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4547)
inline IModelObjectPtr ILineSegment3D::GetBasePlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4548)
inline void ILineSegment3D::PutAngle ( double Result ) {
    HRESULT _hr = put_Angle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4549)
inline double ILineSegment3D::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILineSegments3D wrapper method implementations
//

#pragma implementation_key(4550)
inline ILineSegment3DPtr ILineSegments3D::GetLineSegment3D ( const _variant_t & Index ) {
    struct ILineSegment3D * _result = 0;
    HRESULT _hr = get_LineSegment3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineSegment3DPtr(_result, false);
}

#pragma implementation_key(4551)
inline ILineSegment3DPtr ILineSegments3D::Add ( ) {
    struct ILineSegment3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineSegment3DPtr(_result, false);
}

//
// interface IUnhistoredCurve3D wrapper method implementations
//

#pragma implementation_key(4552)
inline VARIANT_BOOL IUnhistoredCurve3D::Replace ( struct IModelObject * Curve, VARIANT_BOOL DeleteSource ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Replace(Curve, DeleteSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4553)
inline VARIANT_BOOL IUnhistoredCurve3D::Unwrap ( const _variant_t & Placement, double X, double Y, double Z, double Accuracy ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Unwrap(Placement, X, Y, Z, Accuracy, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUnhistoredCurves3D wrapper method implementations
//

#pragma implementation_key(4554)
inline IUnhistoredCurve3DPtr IUnhistoredCurves3D::GetUnhistoredCurve3D ( const _variant_t & Index ) {
    struct IUnhistoredCurve3D * _result = 0;
    HRESULT _hr = get_UnhistoredCurve3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnhistoredCurve3DPtr(_result, false);
}

#pragma implementation_key(4555)
inline IUnhistoredCurve3DPtr IUnhistoredCurves3D::Add ( const _variant_t & Points ) {
    struct IUnhistoredCurve3D * _result = 0;
    HRESULT _hr = raw_Add(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnhistoredCurve3DPtr(_result, false);
}

#pragma implementation_key(4556)
inline _variant_t IUnhistoredCurves3D::Load ( _bstr_t FileName, VARIANT_BOOL SewCurves ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Load(FileName, SewCurves, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4557)
inline IUnhistoredCurve3DPtr IUnhistoredCurves3D::Convert ( struct IModelObject * Curve, VARIANT_BOOL DeleteSource ) {
    struct IUnhistoredCurve3D * _result = 0;
    HRESULT _hr = raw_Convert(Curve, DeleteSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnhistoredCurve3DPtr(_result, false);
}

//
// interface IPointsArrOnCurve wrapper method implementations
//

#pragma implementation_key(4558)
inline void IPointsArrOnCurve::PutCurve ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Curve(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4559)
inline IModelObjectPtr IPointsArrOnCurve::GetCurve ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Curve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4560)
inline void IPointsArrOnCurve::PutBuildingType ( enum ksPointsArrOnCurveTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4561)
inline enum ksPointsArrOnCurveTypeEnum IPointsArrOnCurve::GetBuildingType ( ) {
    enum ksPointsArrOnCurveTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4562)
inline void IPointsArrOnCurve::PutCount ( long PVal ) {
    HRESULT _hr = put_Count(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4563)
inline long IPointsArrOnCurve::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4564)
inline void IPointsArrOnCurve::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4565)
inline double IPointsArrOnCurve::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4566)
inline void IPointsArrOnCurve::PutByStep ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ByStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4567)
inline VARIANT_BOOL IPointsArrOnCurve::GetByStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ByStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4568)
inline void IPointsArrOnCurve::PutReverseDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReverseDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4569)
inline VARIANT_BOOL IPointsArrOnCurve::GetReverseDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReverseDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4570)
inline void IPointsArrOnCurve::PutOnOffsets ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_OnOffsets(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4571)
inline VARIANT_BOOL IPointsArrOnCurve::GetOnOffsets ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnOffsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4572)
inline void IPointsArrOnCurve::PutOffsetType ( VARIANT_BOOL FirstPoint, enum ksPoint3DCurveParamTypeEnum PVal ) {
    HRESULT _hr = put_OffsetType(FirstPoint, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4573)
inline enum ksPoint3DCurveParamTypeEnum IPointsArrOnCurve::GetOffsetType ( VARIANT_BOOL FirstPoint ) {
    enum ksPoint3DCurveParamTypeEnum _result;
    HRESULT _hr = get_OffsetType(FirstPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4574)
inline void IPointsArrOnCurve::PutOffset ( VARIANT_BOOL FirstPoint, double PVal ) {
    HRESULT _hr = put_Offset(FirstPoint, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4575)
inline double IPointsArrOnCurve::GetOffset ( VARIANT_BOOL FirstPoint ) {
    double _result = 0;
    HRESULT _hr = get_Offset(FirstPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4576)
inline void IPointsArrOnCurve::PutOffsetDirection ( VARIANT_BOOL FirstPoint, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_OffsetDirection(FirstPoint, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4577)
inline VARIANT_BOOL IPointsArrOnCurve::GetOffsetDirection ( VARIANT_BOOL FirstPoint ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OffsetDirection(FirstPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4578)
inline void IPointsArrOnCurve::PutSymbol ( enum ksAnnotationSymbolEnum PVal ) {
    HRESULT _hr = put_Symbol(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4579)
inline enum ksAnnotationSymbolEnum IPointsArrOnCurve::GetSymbol ( ) {
    enum ksAnnotationSymbolEnum _result;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4580)
inline VARIANT_BOOL IPointsArrOnCurve::Destroy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Destroy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPointsArrsOnCurves wrapper method implementations
//

#pragma implementation_key(4581)
inline IPointsArrOnCurvePtr IPointsArrsOnCurves::GetPointsArrOnCurve ( const _variant_t & Index ) {
    struct IPointsArrOnCurve * _result = 0;
    HRESULT _hr = get_PointsArrOnCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrOnCurvePtr(_result, false);
}

#pragma implementation_key(4582)
inline IPointsArrOnCurvePtr IPointsArrsOnCurves::Add ( ) {
    struct IPointsArrOnCurve * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrOnCurvePtr(_result, false);
}

//
// interface IPointsArrOnSurface wrapper method implementations
//

#pragma implementation_key(4583)
inline void IPointsArrOnSurface::PutFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Face(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4584)
inline IModelObjectPtr IPointsArrOnSurface::GetFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4585)
inline void IPointsArrOnSurface::PutBuildingType ( enum ksPointsArrOnSurfaceTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4586)
inline enum ksPointsArrOnSurfaceTypeEnum IPointsArrOnSurface::GetBuildingType ( ) {
    enum ksPointsArrOnSurfaceTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4587)
inline void IPointsArrOnSurface::PutUCount ( long PVal ) {
    HRESULT _hr = put_UCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4588)
inline long IPointsArrOnSurface::GetUCount ( ) {
    long _result = 0;
    HRESULT _hr = get_UCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4589)
inline void IPointsArrOnSurface::PutVCount ( long PVal ) {
    HRESULT _hr = put_VCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4590)
inline long IPointsArrOnSurface::GetVCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4591)
inline void IPointsArrOnSurface::PutLinearDeflection ( double PVal ) {
    HRESULT _hr = put_LinearDeflection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4592)
inline double IPointsArrOnSurface::GetLinearDeflection ( ) {
    double _result = 0;
    HRESULT _hr = get_LinearDeflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4593)
inline void IPointsArrOnSurface::PutAngularDeflection ( double PVal ) {
    HRESULT _hr = put_AngularDeflection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4594)
inline double IPointsArrOnSurface::GetAngularDeflection ( ) {
    double _result = 0;
    HRESULT _hr = get_AngularDeflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4595)
inline void IPointsArrOnSurface::PutAllowBoundaries ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AllowBoundaries(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4596)
inline VARIANT_BOOL IPointsArrOnSurface::GetAllowBoundaries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowBoundaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4597)
inline void IPointsArrOnSurface::PutSymbol ( enum ksAnnotationSymbolEnum PVal ) {
    HRESULT _hr = put_Symbol(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4598)
inline enum ksAnnotationSymbolEnum IPointsArrOnSurface::GetSymbol ( ) {
    enum ksAnnotationSymbolEnum _result;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4599)
inline VARIANT_BOOL IPointsArrOnSurface::Destroy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Destroy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPointsArrsOnSurfaces wrapper method implementations
//

#pragma implementation_key(4600)
inline IPointsArrOnSurfacePtr IPointsArrsOnSurfaces::GetPointsArrOnSurface ( const _variant_t & Index ) {
    struct IPointsArrOnSurface * _result = 0;
    HRESULT _hr = get_PointsArrOnSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrOnSurfacePtr(_result, false);
}

#pragma implementation_key(4601)
inline IPointsArrOnSurfacePtr IPointsArrsOnSurfaces::Add ( ) {
    struct IPointsArrOnSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrOnSurfacePtr(_result, false);
}

//
// interface IPointsArrFromFile wrapper method implementations
//

#pragma implementation_key(4602)
inline void IPointsArrFromFile::PutPointsType ( enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointsType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4603)
inline enum ksPoint3DTypeEnum IPointsArrFromFile::GetPointsType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4604)
inline void IPointsArrFromFile::PutFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_FileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4605)
inline _bstr_t IPointsArrFromFile::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4606)
inline void IPointsArrFromFile::PutSymbol ( enum ksAnnotationSymbolEnum PVal ) {
    HRESULT _hr = put_Symbol(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4607)
inline enum ksAnnotationSymbolEnum IPointsArrFromFile::GetSymbol ( ) {
    enum ksAnnotationSymbolEnum _result;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4608)
inline VARIANT_BOOL IPointsArrFromFile::Destroy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Destroy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPointsArrsFromFiles wrapper method implementations
//

#pragma implementation_key(4609)
inline IPointsArrFromFilePtr IPointsArrsFromFiles::GetPointsArrFromFile ( const _variant_t & Index ) {
    struct IPointsArrFromFile * _result = 0;
    HRESULT _hr = get_PointsArrFromFile(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrFromFilePtr(_result, false);
}

#pragma implementation_key(4610)
inline IPointsArrFromFilePtr IPointsArrsFromFiles::Add ( ) {
    struct IPointsArrFromFile * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrFromFilePtr(_result, false);
}

//
// interface IMathCurve3D wrapper method implementations
//

#pragma implementation_key(4611)
inline VARIANT_BOOL IMathCurve3D::GetPoint ( double ParamT, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(ParamT, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4612)
inline VARIANT_BOOL IMathCurve3D::GetTangentVector ( double ParamT, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetTangentVector(ParamT, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4613)
inline VARIANT_BOOL IMathCurve3D::GetNormal ( double ParamT, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNormal(ParamT, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4614)
inline VARIANT_BOOL IMathCurve3D::GetDerivativeT ( double ParamT, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeT(ParamT, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4615)
inline VARIANT_BOOL IMathCurve3D::GetDerivativeTT ( double ParamT, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeTT(ParamT, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4616)
inline VARIANT_BOOL IMathCurve3D::GetDerivativeTTT ( double ParamT, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeTTT(ParamT, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4617)
inline double IMathCurve3D::GetParamMin ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4618)
inline double IMathCurve3D::GetParamMax ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4619)
inline VARIANT_BOOL IMathCurve3D::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4620)
inline VARIANT_BOOL IMathCurve3D::GetPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Periodic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4621)
inline double IMathCurve3D::GetMetricLength ( double StartParam, double EndParam ) {
    double _result = 0;
    HRESULT _hr = raw_GetMetricLength(StartParam, EndParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4622)
inline VARIANT_BOOL IMathCurve3D::GetGabarit ( double * X1, double * Y1, double * Z1, double * X2, double * Y2, double * Z2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGabarit(X1, Y1, Z1, X2, Y2, Z2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4623)
inline VARIANT_BOOL IMathCurve3D::GetDegenerate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Degenerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4624)
inline enum ksMathCurve3DTypeEnum IMathCurve3D::GetCurveType ( ) {
    enum ksMathCurve3DTypeEnum _result;
    HRESULT _hr = get_CurveType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4625)
inline double IMathCurve3D::GetLength ( enum ksLengthUnitsEnum BitVector ) {
    double _result = 0;
    HRESULT _hr = raw_GetLength(BitVector, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4626)
inline VARIANT_BOOL IMathCurve3D::NearPointProjection ( double X, double Y, double Z, double * T, VARIANT_BOOL Ext ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_NearPointProjection(X, Y, Z, T, Ext, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4627)
inline _variant_t IMathCurve3D::CalculatePolygon ( double Step ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CalculatePolygon(Step, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4628)
inline VARIANT_BOOL IMathCurve3D::GetCentre ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCentre(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4629)
inline VARIANT_BOOL IMathCurve3D::GetWeightCentre ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetWeightCentre(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4630)
inline double IMathCurve3D::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxis3D wrapper method implementations
//

#pragma implementation_key(4631)
inline IMathCurve3DPtr IAxis3D::GetMathCurve ( ) {
    struct IMathCurve3D * _result = 0;
    HRESULT _hr = get_MathCurve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathCurve3DPtr(_result, false);
}

//
// interface IAxes3D wrapper method implementations
//

#pragma implementation_key(4632)
inline IAxis3DPtr IAxes3D::GetAxis3D ( const _variant_t & Index ) {
    struct IAxis3D * _result = 0;
    HRESULT _hr = get_Axis3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxis3DPtr(_result, false);
}

#pragma implementation_key(4633)
inline IAxis3DPtr IAxes3D::Add ( ksObj3dTypeEnum Type ) {
    struct IAxis3D * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxis3DPtr(_result, false);
}

//
// interface IMathSurface3D wrapper method implementations
//

#pragma implementation_key(4634)
inline VARIANT_BOOL IMathSurface3D::GetGabarit ( double * X1, double * Y1, double * Z1, double * X2, double * Y2, double * Z2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGabarit(X1, Y1, Z1, X2, Y2, Z2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4635)
inline VARIANT_BOOL IMathSurface3D::GetPoint ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4636)
inline VARIANT_BOOL IMathSurface3D::GetNormal ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNormal(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4637)
inline VARIANT_BOOL IMathSurface3D::GetTangentVectorU ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetTangentVectorU(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4638)
inline VARIANT_BOOL IMathSurface3D::GetTangentVectorV ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetTangentVectorV(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4639)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeU ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeU(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4640)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeV ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeV(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4641)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeUU ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeUU(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4642)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeVV ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeVV(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4643)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeUV ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeUV(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4644)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeUUU ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeUUU(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4645)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeVVV ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeVVV(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4646)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeUVV ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeUVV(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4647)
inline VARIANT_BOOL IMathSurface3D::GetDerivativeUUV ( double ParamU, double ParamV, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDerivativeUUV(ParamU, ParamV, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4648)
inline double IMathSurface3D::GetParamUMin ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamUMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4649)
inline double IMathSurface3D::GetParamUMax ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamUMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4650)
inline double IMathSurface3D::GetParamVMin ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamVMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4651)
inline double IMathSurface3D::GetParamVMax ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamVMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4652)
inline VARIANT_BOOL IMathSurface3D::GetClosedU ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4653)
inline VARIANT_BOOL IMathSurface3D::GetClosedV ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4654)
inline enum ksMathSurface3DTypeEnum IMathSurface3D::GetSurface3DType ( ) {
    enum ksMathSurface3DTypeEnum _result;
    HRESULT _hr = get_Surface3DType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4655)
inline double IMathSurface3D::GetArea ( enum ksLengthUnitsEnum BitVector ) {
    double _result = 0;
    HRESULT _hr = raw_GetArea(BitVector, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4656)
inline VARIANT_BOOL IMathSurface3D::NearPointProjection ( double X, double Y, double Z, double * ParamU, double * ParamV, VARIANT_BOOL Ext ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_NearPointProjection(X, Y, Z, ParamU, ParamV, Ext, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4657)
inline VARIANT_BOOL IMathSurface3D::GetBoundaryUVNurbs ( VARIANT_BOOL UV, VARIANT_BOOL Closed, long LoopIndex, long EdgeIndex, long * Degree, VARIANT * Points, VARIANT * Weights, VARIANT * Knots, double * TMin, double * TMax ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBoundaryUVNurbs(UV, Closed, LoopIndex, EdgeIndex, Degree, Points, Weights, Knots, TMin, TMax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4658)
inline long IMathSurface3D::GetBoundaryCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BoundaryCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4659)
inline long IMathSurface3D::GetEdgesCount ( long LoopIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetEdgesCount(LoopIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4660)
inline VARIANT_BOOL IMathSurface3D::NearDirectPointProjection ( double X, double Y, double Z, double VX, double VY, double VZ, VARIANT_BOOL Extended, double * U, double * V ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_NearDirectPointProjection(X, Y, Z, VX, VY, VZ, Extended, U, V, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4661)
inline _variant_t IMathSurface3D::PointProjection ( double X, double Y, double Z, double VX, double VY, double VZ, VARIANT_BOOL Extended ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PointProjection(X, Y, Z, VX, VY, VZ, Extended, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4662)
inline double IMathSurface3D::GetAreaEx ( enum ksLengthUnitsEnum Unit, double AngleTolerance ) {
    double _result = 0;
    HRESULT _hr = raw_GetAreaEx(Unit, AngleTolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlane3D wrapper method implementations
//

#pragma implementation_key(4663)
inline IMathSurface3DPtr IPlane3D::GetSurface ( ) {
    struct IMathSurface3D * _result = 0;
    HRESULT _hr = get_Surface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathSurface3DPtr(_result, false);
}

//
// interface IPlanes3D wrapper method implementations
//

#pragma implementation_key(4664)
inline IPlane3DPtr IPlanes3D::GetPlane3D ( const _variant_t & Index ) {
    struct IPlane3D * _result = 0;
    HRESULT _hr = get_Plane3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlane3DPtr(_result, false);
}

#pragma implementation_key(4665)
inline IPlane3DPtr IPlanes3D::Add ( ksObj3dTypeEnum PlaneType ) {
    struct IPlane3D * _result = 0;
    HRESULT _hr = raw_Add(PlaneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlane3DPtr(_result, false);
}

//
// interface ILocalCSAxesDirectionParam wrapper method implementations
//

#pragma implementation_key(4666)
inline VARIANT_BOOL ILocalCSAxesDirectionParam::SetDirectingObject ( ksObj3dTypeEnum Axis, struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetDirectingObject(Axis, Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4667)
inline IModelObjectPtr ILocalCSAxesDirectionParam::GetDirectingObject ( ksObj3dTypeEnum Axis ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirectingObject(Axis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4668)
inline VARIANT_BOOL ILocalCSAxesDirectionParam::RotateAxis ( ksObj3dTypeEnum Axis ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RotateAxis(Axis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4669)
inline void ILocalCSAxesDirectionParam::PutAngleByOwnAxis ( ksObj3dTypeEnum Axis, double _arg2 ) {
    HRESULT _hr = put_AngleByOwnAxis(Axis, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILocalCSEulerParam wrapper method implementations
//

#pragma implementation_key(4670)
inline void ILocalCSEulerParam::PutNutationAngle ( double Result ) {
    HRESULT _hr = put_NutationAngle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4671)
inline double ILocalCSEulerParam::GetNutationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_NutationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4672)
inline void ILocalCSEulerParam::PutPrecessionAngle ( double Result ) {
    HRESULT _hr = put_PrecessionAngle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4673)
inline double ILocalCSEulerParam::GetPrecessionAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_PrecessionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4674)
inline void ILocalCSEulerParam::PutRotationAngle ( double Result ) {
    HRESULT _hr = put_RotationAngle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4675)
inline double ILocalCSEulerParam::GetRotationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRoughParams wrapper method implementations
//

#pragma implementation_key(4676)
inline enum ksRoughSignEnum IRoughParams::GetSignType ( ) {
    enum ksRoughSignEnum _result;
    HRESULT _hr = get_SignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4677)
inline void IRoughParams::PutSignType ( enum ksRoughSignEnum Result ) {
    HRESULT _hr = put_SignType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4678)
inline ITextPtr IRoughParams::GetRoughParamText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_RoughParamText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(4679)
inline ITextPtr IRoughParams::GetProcessText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_ProcessText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(4680)
inline ITextPtr IRoughParams::GetBaseLengthText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_BaseLengthText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(4681)
inline ITextPtr IRoughParams::GetTrendText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TrendText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(4682)
inline VARIANT_BOOL IRoughParams::GetProcessingByContour ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProcessingByContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4683)
inline void IRoughParams::PutProcessingByContour ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProcessingByContour(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4684)
inline enum ksShelfDirectionEnum IRoughParams::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4685)
inline void IRoughParams::PutShelfDirection ( enum ksShelfDirectionEnum Result ) {
    HRESULT _hr = put_ShelfDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4686)
inline double IRoughParams::GetLeaderLength ( ) {
    double _result = 0;
    HRESULT _hr = get_LeaderLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4687)
inline void IRoughParams::PutLeaderLength ( double Result ) {
    HRESULT _hr = put_LeaderLength(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4688)
inline double IRoughParams::GetLeaderAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_LeaderAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4689)
inline void IRoughParams::PutLeaderAngle ( double Result ) {
    HRESULT _hr = put_LeaderAngle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4690)
inline enum ksArrowEnum IRoughParams::GetArrowType ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4691)
inline void IRoughParams::PutArrowType ( enum ksArrowEnum Result ) {
    HRESULT _hr = put_ArrowType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4692)
inline VARIANT_BOOL IRoughParams::GetArrowInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ArrowInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4693)
inline void IRoughParams::PutArrowInside ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ArrowInside(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBranchs3D wrapper method implementations
//

#pragma implementation_key(4694)
inline long IBranchs3D::GetBranchCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BranchCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4695)
inline VARIANT_BOOL IBranchs3D::GetBranchBeginPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBranchBeginPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4696)
inline VARIANT_BOOL IBranchs3D::SetBranchBeginPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBranchBeginPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4697)
inline VARIANT_BOOL IBranchs3D::GetBranchEndPoint ( long Index, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBranchEndPoint(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4698)
inline VARIANT_BOOL IBranchs3D::SetBranchEndPoint ( long Index, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBranchEndPoint(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4699)
inline void IBranchs3D::PutBranchPoints ( long Index, const _variant_t & PVal ) {
    HRESULT _hr = put_BranchPoints(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4700)
inline _variant_t IBranchs3D::GetBranchPoints ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BranchPoints(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4701)
inline long IBranchs3D::GetBranchPointsCount ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_BranchPointsCount(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4702)
inline VARIANT_BOOL IBranchs3D::AddBranch ( const _variant_t & Points, struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranch(Points, Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4703)
inline VARIANT_BOOL IBranchs3D::AddBranchByPoint ( double X, double Y, double Z, struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranchByPoint(X, Y, Z, Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4704)
inline VARIANT_BOOL IBranchs3D::DeleteBranch ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteBranch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4705)
inline IModelObjectPtr IBranchs3D::GetBranchObject ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BranchObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4706)
inline _variant_t IBranchs3D::GetBranchObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BranchObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4707)
inline _variant_t IBranchs3D::GetBranchEndPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BranchEndPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ILocalCSOrientByObjectParam wrapper method implementations
//

#pragma implementation_key(4708)
inline VARIANT_BOOL ILocalCSOrientByObjectParam::SetOrientationObject ( struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetOrientationObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4709)
inline IModelObjectPtr ILocalCSOrientByObjectParam::GetOrientationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_OrientationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface ILocalCSObject wrapper method implementations
//

#pragma implementation_key(4710)
inline void ILocalCSObject::PutModelObjectParamType ( enum ksModelObjectParamTypeEnum PVal ) {
    HRESULT _hr = put_ModelObjectParamType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4711)
inline enum ksModelObjectParamTypeEnum ILocalCSObject::GetModelObjectParamType ( ) {
    enum ksModelObjectParamTypeEnum _result;
    HRESULT _hr = get_ModelObjectParamType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4712)
inline ILocalCoordinateSystemPtr ILocalCSObject::GetLocalCoordinateSystem ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_LocalCoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(4713)
inline IModelObjectPtr ILocalCSObject::GetCoordinateSystem ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4714)
inline void ILocalCSObject::PutCoordinateSystem ( struct IModelObject * PVal ) {
    HRESULT _hr = put_CoordinateSystem(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISurfacePatch wrapper method implementations
//

#pragma implementation_key(4715)
inline _variant_t ISurfacePatch::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4716)
inline void ISurfacePatch::PutEdges ( const _variant_t & PVal ) {
    HRESULT _hr = put_Edges(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISurfacePatches wrapper method implementations
//

#pragma implementation_key(4717)
inline ISurfacePatchPtr ISurfacePatches::GetSurfacePatch ( const _variant_t & Index ) {
    struct ISurfacePatch * _result = 0;
    HRESULT _hr = get_SurfacePatch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfacePatchPtr(_result, false);
}

#pragma implementation_key(4718)
inline ISurfacePatchPtr ISurfacePatches::Add ( ) {
    struct ISurfacePatch * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfacePatchPtr(_result, false);
}

//
// interface IFaceRemover wrapper method implementations
//

#pragma implementation_key(4719)
inline _variant_t IFaceRemover::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4720)
inline void IFaceRemover::PutFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_Faces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4721)
inline VARIANT_BOOL IFaceRemover::GetSaveBody ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4722)
inline void IFaceRemover::PutSaveBody ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_SaveBody(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFaceRemovers wrapper method implementations
//

#pragma implementation_key(4723)
inline IFaceRemoverPtr IFaceRemovers::GetFaceRemover ( const _variant_t & Index ) {
    struct IFaceRemover * _result = 0;
    HRESULT _hr = get_FaceRemover(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFaceRemoverPtr(_result, false);
}

#pragma implementation_key(4724)
inline IFaceRemoverPtr IFaceRemovers::Add ( ) {
    struct IFaceRemover * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFaceRemoverPtr(_result, false);
}

//
// interface ISurfaceSewer wrapper method implementations
//

#pragma implementation_key(4725)
inline _variant_t ISurfaceSewer::GetShells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Shells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4726)
inline void ISurfaceSewer::PutShells ( const _variant_t & PVal ) {
    HRESULT _hr = put_Shells(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4727)
inline double ISurfaceSewer::GetPrecision ( ) {
    double _result = 0;
    HRESULT _hr = get_Precision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4728)
inline void ISurfaceSewer::PutPrecision ( double Result ) {
    HRESULT _hr = put_Precision(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4729)
inline VARIANT_BOOL ISurfaceSewer::GetCreateBody ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4730)
inline void ISurfaceSewer::PutCreateBody ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_CreateBody(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISurfaceSewers wrapper method implementations
//

#pragma implementation_key(4731)
inline ISurfaceSewerPtr ISurfaceSewers::GetSurfaceSewer ( const _variant_t & Index ) {
    struct ISurfaceSewer * _result = 0;
    HRESULT _hr = get_SurfaceSewer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceSewerPtr(_result, false);
}

#pragma implementation_key(4732)
inline ISurfaceSewerPtr ISurfaceSewers::Add ( ) {
    struct ISurfaceSewer * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceSewerPtr(_result, false);
}

//
// interface INurbsSurface wrapper method implementations
//

#pragma implementation_key(4733)
inline VARIANT_BOOL INurbsSurface::GetNurbsParams ( VARIANT_BOOL ClosedV, VARIANT_BOOL ClosedU, long * DegreeV, long * DegreeU, long * NPV, long * NPU, VARIANT * Points, VARIANT * Weights, VARIANT * KnotsV, VARIANT * KnotsU ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNurbsParams(ClosedV, ClosedU, DegreeV, DegreeU, NPV, NPU, Points, Weights, KnotsV, KnotsU, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4734)
inline VARIANT_BOOL INurbsSurface::SetNurbsParams ( VARIANT_BOOL ClosedV, VARIANT_BOOL ClosedU, long DegreeV, long DegreeU, long NPV, long NPU, const _variant_t & Points, const _variant_t & Weights, const _variant_t & KnotsV, const _variant_t & KnotsU ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetNurbsParams(ClosedV, ClosedU, DegreeV, DegreeU, NPV, NPU, Points, Weights, KnotsV, KnotsU, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4735)
inline VARIANT_BOOL INurbsSurface::InitParamByFace ( struct IModelObject * Face ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitParamByFace(Face, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4736)
inline VARIANT_BOOL INurbsSurface::GetClosedU ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4737)
inline void INurbsSurface::PutClosedU ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosedU(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4738)
inline VARIANT_BOOL INurbsSurface::GetClosedV ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4739)
inline void INurbsSurface::PutClosedV ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosedV(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4740)
inline long INurbsSurface::GetBoundaryCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BoundaryCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4741)
inline VARIANT_BOOL INurbsSurface::AddBoundary ( VARIANT_BOOL UV, VARIANT_BOOL Closed, long Degree, const _variant_t & Points, const _variant_t & Weights, const _variant_t & Knots, double TMin, double TMax ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBoundary(UV, Closed, Degree, Points, Weights, Knots, TMin, TMax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4742)
inline VARIANT_BOOL INurbsSurface::GetBoundary ( VARIANT_BOOL UV, VARIANT_BOOL Closed, long BoundaryIndex, long * Degree, VARIANT * Points, VARIANT * Weights, VARIANT * Knots, double * TMin, double * TMax ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBoundary(UV, Closed, BoundaryIndex, Degree, Points, Weights, Knots, TMin, TMax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4743)
inline VARIANT_BOOL INurbsSurface::DeleteBoundary ( long BoundaryIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteBoundary(BoundaryIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface INurbsSurfaces wrapper method implementations
//

#pragma implementation_key(4744)
inline INurbsSurfacePtr INurbsSurfaces::GetNurbsSurface ( const _variant_t & Index ) {
    struct INurbsSurface * _result = 0;
    HRESULT _hr = get_NurbsSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsSurfacePtr(_result, false);
}

#pragma implementation_key(4745)
inline INurbsSurfacePtr INurbsSurfaces::Add ( ) {
    struct INurbsSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsSurfacePtr(_result, false);
}

//
// interface IRuledSurface wrapper method implementations
//

#pragma implementation_key(4746)
inline void IRuledSurface::PutCurves1 ( const _variant_t & Curves ) {
    HRESULT _hr = put_Curves1(Curves);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4747)
inline _variant_t IRuledSurface::GetCurves1 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Curves1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4748)
inline void IRuledSurface::PutCurves2 ( const _variant_t & Curves ) {
    HRESULT _hr = put_Curves2(Curves);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4749)
inline _variant_t IRuledSurface::GetCurves2 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Curves2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4750)
inline void IRuledSurface::PutCheckSelfIntersection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CheckSelfIntersection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4751)
inline VARIANT_BOOL IRuledSurface::GetCheckSelfIntersection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckSelfIntersection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4752)
inline void IRuledSurface::PutAutoSegmentation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoSegmentation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4753)
inline VARIANT_BOOL IRuledSurface::GetAutoSegmentation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSegmentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4754)
inline VARIANT_BOOL IRuledSurface::AddNewEdge ( long IndexAt ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddNewEdge(IndexAt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4755)
inline VARIANT_BOOL IRuledSurface::DeleteEdge ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteEdge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4756)
inline long IRuledSurface::GetEdgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4757)
inline VARIANT_BOOL IRuledSurface::SetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double X, double Y, double Z, double * T, struct IModelObject * Segment, struct IModelObject * AssociateVertex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetEdgePointParam(EdgeIndex, StartPoint, X, Y, Z, T, Segment, AssociateVertex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4758)
inline VARIANT_BOOL IRuledSurface::GetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double * X, double * Y, double * Z, double * T, struct IModelObject * * Segment, struct IModelObject * * AssociateVertex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEdgePointParam(EdgeIndex, StartPoint, X, Y, Z, T, Segment, AssociateVertex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4759)
inline VARIANT_BOOL IRuledSurface::GetEdgePointParams ( VARIANT * Points1, VARIANT * T1, VARIANT * Segments1, VARIANT * AssociateVertexes1, VARIANT * Points2, VARIANT * T2, VARIANT * Segments2, VARIANT * AssociateVertexes2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEdgePointParams(Points1, T1, Segments1, AssociateVertexes1, Points2, T2, Segments2, AssociateVertexes2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4760)
inline void IRuledSurface::PutConsiderComplianceVertices ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ConsiderComplianceVertices(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4761)
inline VARIANT_BOOL IRuledSurface::GetConsiderComplianceVertices ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConsiderComplianceVertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRuledSurfaces wrapper method implementations
//

#pragma implementation_key(4762)
inline IRuledSurfacePtr IRuledSurfaces::GetRuledSurface ( const _variant_t & Index ) {
    struct IRuledSurface * _result = 0;
    HRESULT _hr = get_RuledSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRuledSurfacePtr(_result, false);
}

#pragma implementation_key(4763)
inline IRuledSurfacePtr IRuledSurfaces::Add ( ) {
    struct IRuledSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRuledSurfacePtr(_result, false);
}

//
// interface IEquidistantSurface wrapper method implementations
//

#pragma implementation_key(4764)
inline void IEquidistantSurface::PutBaseSurface ( const _variant_t & Result ) {
    HRESULT _hr = put_BaseSurface(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4765)
inline _variant_t IEquidistantSurface::GetBaseSurface ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4766)
inline void IEquidistantSurface::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4767)
inline VARIANT_BOOL IEquidistantSurface::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4768)
inline void IEquidistantSurface::PutDistance ( double PVal ) {
    HRESULT _hr = put_Distance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4769)
inline double IEquidistantSurface::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEquidistantSurfaces wrapper method implementations
//

#pragma implementation_key(4770)
inline IEquidistantSurfacePtr IEquidistantSurfaces::GetEquidistantSurface ( const _variant_t & Index ) {
    struct IEquidistantSurface * _result = 0;
    HRESULT _hr = get_EquidistantSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistantSurfacePtr(_result, false);
}

#pragma implementation_key(4771)
inline IEquidistantSurfacePtr IEquidistantSurfaces::Add ( ) {
    struct IEquidistantSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistantSurfacePtr(_result, false);
}

//
// interface ITrimmedSurface wrapper method implementations
//

#pragma implementation_key(4772)
inline void ITrimmedSurface::PutSurface ( const _variant_t & PVal ) {
    HRESULT _hr = put_Surface(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4773)
inline _variant_t ITrimmedSurface::GetSurface ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Surface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4774)
inline void ITrimmedSurface::PutCutObject ( const _variant_t & PVal ) {
    HRESULT _hr = put_CutObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4775)
inline _variant_t ITrimmedSurface::GetCutObject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CutObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4776)
inline void ITrimmedSurface::PutSense ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Sense(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4777)
inline VARIANT_BOOL ITrimmedSurface::GetSense ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4778)
inline void ITrimmedSurface::PutOperationResult ( enum ksOperationResultEnum Result ) {
    HRESULT _hr = put_OperationResult(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4779)
inline enum ksOperationResultEnum ITrimmedSurface::GetOperationResult ( ) {
    enum ksOperationResultEnum _result;
    HRESULT _hr = get_OperationResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITrimmedSurfaces wrapper method implementations
//

#pragma implementation_key(4780)
inline ITrimmedSurfacePtr ITrimmedSurfaces::GetTrimmedSurface ( const _variant_t & Index ) {
    struct ITrimmedSurface * _result = 0;
    HRESULT _hr = get_TrimmedSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrimmedSurfacePtr(_result, false);
}

#pragma implementation_key(4781)
inline ITrimmedSurfacePtr ITrimmedSurfaces::Add ( ) {
    struct ITrimmedSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrimmedSurfacePtr(_result, false);
}

//
// interface IExtensionSurface wrapper method implementations
//

#pragma implementation_key(4782)
inline _variant_t IExtensionSurface::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4783)
inline void IExtensionSurface::PutEdges ( const _variant_t & PVal ) {
    HRESULT _hr = put_Edges(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4784)
inline void IExtensionSurface::PutExtensionType ( enum ksExtensionSurfaceTypeEnum PVal ) {
    HRESULT _hr = put_ExtensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4785)
inline enum ksExtensionSurfaceTypeEnum IExtensionSurface::GetExtensionType ( ) {
    enum ksExtensionSurfaceTypeEnum _result;
    HRESULT _hr = get_ExtensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4786)
inline void IExtensionSurface::PutExtensionLimitType ( enum ksExtensionLimitTypeEnum PVal ) {
    HRESULT _hr = put_ExtensionLimitType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4787)
inline enum ksExtensionLimitTypeEnum IExtensionSurface::GetExtensionLimitType ( ) {
    enum ksExtensionLimitTypeEnum _result;
    HRESULT _hr = get_ExtensionLimitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4788)
inline void IExtensionSurface::PutLength ( double Result ) {
    HRESULT _hr = put_Length(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4789)
inline double IExtensionSurface::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4790)
inline void IExtensionSurface::PutSideEdges ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_SideEdges(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4791)
inline VARIANT_BOOL IExtensionSurface::GetSideEdges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SideEdges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4792)
inline void IExtensionSurface::PutDirObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DirObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4793)
inline IModelObjectPtr IExtensionSurface::GetDirObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4794)
inline void IExtensionSurface::PutTargetObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_TargetObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4795)
inline IModelObjectPtr IExtensionSurface::GetTargetObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_TargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4796)
inline void IExtensionSurface::PutSense ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Sense(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4797)
inline VARIANT_BOOL IExtensionSurface::GetSense ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4798)
inline IVector3DPtr IExtensionSurface::GetBuildingVectorParameters ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_BuildingVectorParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

//
// interface IExtensionSurfaces wrapper method implementations
//

#pragma implementation_key(4799)
inline IExtensionSurfacePtr IExtensionSurfaces::GetExtensionSurface ( const _variant_t & Index ) {
    struct IExtensionSurface * _result = 0;
    HRESULT _hr = get_ExtensionSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExtensionSurfacePtr(_result, false);
}

#pragma implementation_key(4800)
inline IExtensionSurfacePtr IExtensionSurfaces::Add ( ) {
    struct IExtensionSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExtensionSurfacePtr(_result, false);
}

//
// interface IMeshPointsSurface wrapper method implementations
//

#pragma implementation_key(4801)
inline enum ksMeshPointsSurfaceBuildingTypeEnum IMeshPointsSurface::GetBuildingType ( ) {
    enum ksMeshPointsSurfaceBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4802)
inline void IMeshPointsSurface::PutBuildingType ( enum ksMeshPointsSurfaceBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4803)
inline VARIANT_BOOL IMeshPointsSurface::GetParams ( VARIANT_BOOL * ClosedV, VARIANT_BOOL * ClosedU, long * DegreeV, long * DegreeU, long * RowsCount, long * ColumsCount, VARIANT * Points, VARIANT * Weights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetParams(ClosedV, ClosedU, DegreeV, DegreeU, RowsCount, ColumsCount, Points, Weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4804)
inline VARIANT_BOOL IMeshPointsSurface::SetParams ( VARIANT_BOOL ClosedV, VARIANT_BOOL ClosedU, long DegreeV, long DegreeU, long RowsCount, long ColumsCount, const _variant_t & Points, const _variant_t & Weights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetParams(ClosedV, ClosedU, DegreeV, DegreeU, RowsCount, ColumsCount, Points, Weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4805)
inline VARIANT_BOOL IMeshPointsSurface::InitParamByFace ( struct IModelObject * Face ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitParamByFace(Face, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4806)
inline VARIANT_BOOL IMeshPointsSurface::GetClosedU ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4807)
inline void IMeshPointsSurface::PutClosedU ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosedU(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4808)
inline VARIANT_BOOL IMeshPointsSurface::GetClosedV ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4809)
inline void IMeshPointsSurface::PutClosedV ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosedV(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4810)
inline long IMeshPointsSurface::GetDegreeU ( ) {
    long _result = 0;
    HRESULT _hr = get_DegreeU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4811)
inline void IMeshPointsSurface::PutDegreeU ( long PVal ) {
    HRESULT _hr = put_DegreeU(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4812)
inline long IMeshPointsSurface::GetDegreeV ( ) {
    long _result = 0;
    HRESULT _hr = get_DegreeV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4813)
inline void IMeshPointsSurface::PutDegreeV ( long PVal ) {
    HRESULT _hr = put_DegreeV(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4814)
inline VARIANT_BOOL IMeshPointsSurface::BeginPointsSeries ( VARIANT_BOOL AddNewRow, long IndexAt ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_BeginPointsSeries(AddNewRow, IndexAt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4815)
inline IKompasAPIObjectPtr IMeshPointsSurface::AddPoint ( double X, double Y, double Z, double Weight, enum ksPoint3DTypeEnum PointType, struct IModelObject * AssociationObject ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = raw_AddPoint(X, Y, Z, Weight, PointType, AssociationObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4816)
inline VARIANT_BOOL IMeshPointsSurface::EndPointsSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EndPointsSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4817)
inline VARIANT_BOOL IMeshPointsSurface::AddPointsSeries ( VARIANT_BOOL AddNewRow, long IndexAt, const _variant_t & Points, const _variant_t & Weights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPointsSeries(AddNewRow, IndexAt, Points, Weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4818)
inline VARIANT_BOOL IMeshPointsSurface::DeletePointsSeries ( VARIANT_BOOL DeleteRow, long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePointsSeries(DeleteRow, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4819)
inline VARIANT_BOOL IMeshPointsSurface::ClearPointsSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearPointsSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4820)
inline long IMeshPointsSurface::GetRowsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4821)
inline long IMeshPointsSurface::GetColumnsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4822)
inline void IMeshPointsSurface::PutPointType ( long IRow, long ICol, enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointType(IRow, ICol, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4823)
inline enum ksPoint3DTypeEnum IMeshPointsSurface::GetPointType ( long IRow, long ICol ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointType(IRow, ICol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4824)
inline IKompasAPIObjectPtr IMeshPointsSurface::GetPointParameters ( long IRow, long ICol ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(IRow, ICol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4825)
inline VARIANT_BOOL IMeshPointsSurface::GetPoint ( long IRow, long ICol, double * X, double * Y, double * Z, double * Weight ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(IRow, ICol, X, Y, Z, Weight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4826)
inline VARIANT_BOOL IMeshPointsSurface::SetPoint ( long IRow, long ICol, double X, double Y, double Z, double Weight ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(IRow, ICol, X, Y, Z, Weight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4827)
inline VARIANT_BOOL IMeshPointsSurface::GetCheckSelfIntersection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckSelfIntersection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4828)
inline void IMeshPointsSurface::PutCheckSelfIntersection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CheckSelfIntersection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4829)
inline void IMeshPointsSurface::PutAssociationObject ( long IRow, long ICol, struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(IRow, ICol, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4830)
inline IModelObjectPtr IMeshPointsSurface::GetAssociationObject ( long IRow, long ICol ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(IRow, ICol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IMeshPointsSurfaces wrapper method implementations
//

#pragma implementation_key(4831)
inline IMeshPointsSurfacePtr IMeshPointsSurfaces::GetMeshPointsSurface ( const _variant_t & Index ) {
    struct IMeshPointsSurface * _result = 0;
    HRESULT _hr = get_MeshPointsSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMeshPointsSurfacePtr(_result, false);
}

#pragma implementation_key(4832)
inline IMeshPointsSurfacePtr IMeshPointsSurfaces::Add ( ) {
    struct IMeshPointsSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMeshPointsSurfacePtr(_result, false);
}

#pragma implementation_key(4833)
inline IMeshPointsSurfacePtr IMeshPointsSurfaces::Load ( _bstr_t FileName ) {
    struct IMeshPointsSurface * _result = 0;
    HRESULT _hr = raw_Load(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMeshPointsSurfacePtr(_result, false);
}

//
// interface ICloudPointsSurface wrapper method implementations
//

#pragma implementation_key(4834)
inline enum ksCloudPointsSurfaceBuildingTypeEnum ICloudPointsSurface::GetBuildingType ( ) {
    enum ksCloudPointsSurfaceBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4835)
inline void ICloudPointsSurface::PutBuildingType ( enum ksCloudPointsSurfaceBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4836)
inline _variant_t ICloudPointsSurface::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4837)
inline void ICloudPointsSurface::PutPoints ( const _variant_t & Points ) {
    HRESULT _hr = put_Points(Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4838)
inline long ICloudPointsSurface::GetDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_Degree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4839)
inline void ICloudPointsSurface::PutDegree ( long PVal ) {
    HRESULT _hr = put_Degree(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4840)
inline enum ksCloudTypeEnum ICloudPointsSurface::GetCloudType ( ) {
    enum ksCloudTypeEnum _result;
    HRESULT _hr = get_CloudType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4841)
inline void ICloudPointsSurface::PutCloudType ( enum ksCloudTypeEnum Type ) {
    HRESULT _hr = put_CloudType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4842)
inline ILocalCoordinateSystemPtr ICloudPointsSurface::GetCloudLCS ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_CloudLCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(4843)
inline void ICloudPointsSurface::PutCloudLCS ( struct ILocalCoordinateSystem * Object ) {
    HRESULT _hr = put_CloudLCS(Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4844)
inline VARIANT_BOOL ICloudPointsSurface::GetFixedPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4845)
inline void ICloudPointsSurface::PutFixedPosition ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedPosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4846)
inline IKompasAPIObjectPtr ICloudPointsSurface::AddPoint ( double X, double Y, double Z, enum ksPoint3DTypeEnum PVal, struct IModelObject * AssociationObject ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = raw_AddPoint(X, Y, Z, PVal, AssociationObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4847)
inline long ICloudPointsSurface::GetPointsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PointsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4848)
inline void ICloudPointsSurface::PutPointType ( long Index, enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointType(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4849)
inline enum ksPoint3DTypeEnum ICloudPointsSurface::GetPointType ( long Index ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4850)
inline IKompasAPIObjectPtr ICloudPointsSurface::GetPointParameters ( long Index ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(4851)
inline void ICloudPointsSurface::PutAssociationObject ( long Index, struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4852)
inline IModelObjectPtr ICloudPointsSurface::GetAssociationObject ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4853)
inline VARIANT_BOOL ICloudPointsSurface::GetCheckSelfIntersection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckSelfIntersection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4854)
inline void ICloudPointsSurface::PutCheckSelfIntersection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CheckSelfIntersection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4855)
inline VARIANT_BOOL ICloudPointsSurface::ClearPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4856)
inline VARIANT_BOOL ICloudPointsSurface::AddPoints ( const _variant_t & Points ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPoints(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4857)
inline VARIANT_BOOL ICloudPointsSurface::GetPoint ( long Index, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4858)
inline VARIANT_BOOL ICloudPointsSurface::SetPoint ( long Index, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(Index, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4859)
inline VARIANT_BOOL ICloudPointsSurface::DeletePoint ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePoint(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICloudPointsSurfaces wrapper method implementations
//

#pragma implementation_key(4860)
inline ICloudPointsSurfacePtr ICloudPointsSurfaces::GetCloudPointsSurface ( const _variant_t & Index ) {
    struct ICloudPointsSurface * _result = 0;
    HRESULT _hr = get_CloudPointsSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICloudPointsSurfacePtr(_result, false);
}

#pragma implementation_key(4861)
inline ICloudPointsSurfacePtr ICloudPointsSurfaces::Add ( ) {
    struct ICloudPointsSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICloudPointsSurfacePtr(_result, false);
}

#pragma implementation_key(4862)
inline ICloudPointsSurfacePtr ICloudPointsSurfaces::Load ( _bstr_t FileName ) {
    struct ICloudPointsSurface * _result = 0;
    HRESULT _hr = raw_Load(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICloudPointsSurfacePtr(_result, false);
}

//
// interface IImportedSurface wrapper method implementations
//

#pragma implementation_key(4863)
inline _variant_t IImportedSurface::GetPoints ( long * UPCount, long * VPCount ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPoints(UPCount, VPCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4864)
inline VARIANT_BOOL IImportedSurface::SetPoints ( long UPCount, long VPCount, const _variant_t & Points ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoints(UPCount, VPCount, Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4865)
inline VARIANT_BOOL IImportedSurface::ClearPointsSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearPointsSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4866)
inline VARIANT_BOOL IImportedSurface::BeginPointsSeries ( VARIANT_BOOL UV, long IndexAt ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_BeginPointsSeries(UV, IndexAt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4867)
inline VARIANT_BOOL IImportedSurface::AddPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4868)
inline VARIANT_BOOL IImportedSurface::EndPointsSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EndPointsSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4869)
inline VARIANT_BOOL IImportedSurface::AddPointsSeries ( VARIANT_BOOL UV, long IndexAt, const _variant_t & Arr ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPointsSeries(UV, IndexAt, Arr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4870)
inline long IImportedSurface::GetPointsVCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PointsVCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4871)
inline long IImportedSurface::GetPointsUCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PointsUCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4872)
inline VARIANT_BOOL IImportedSurface::GetPoint ( long UIndex, long VIndex, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(UIndex, VIndex, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4873)
inline VARIANT_BOOL IImportedSurface::SetPoint ( long UIndex, long VIndex, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(UIndex, VIndex, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4874)
inline VARIANT_BOOL IImportedSurface::DeletePointsSeries ( VARIANT_BOOL UV, long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePointsSeries(UV, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IImportedSurfaces wrapper method implementations
//

#pragma implementation_key(4875)
inline IImportedSurfacePtr IImportedSurfaces::GetImportedSurface ( const _variant_t & Index ) {
    struct IImportedSurface * _result = 0;
    HRESULT _hr = get_ImportedSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImportedSurfacePtr(_result, false);
}

#pragma implementation_key(4876)
inline IImportedSurfacePtr IImportedSurfaces::Add ( ) {
    struct IImportedSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImportedSurfacePtr(_result, false);
}

#pragma implementation_key(4877)
inline _variant_t IImportedSurfaces::Load ( _bstr_t FileName, VARIANT_BOOL SewSurfaces ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Load(FileName, SewSurfaces, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface INurbsSurfaceByCurvesMesh wrapper method implementations
//

#pragma implementation_key(4878)
inline void INurbsSurfaceByCurvesMesh::PutUCurves ( const _variant_t & Curves ) {
    HRESULT _hr = put_UCurves(Curves);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4879)
inline _variant_t INurbsSurfaceByCurvesMesh::GetUCurves ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4880)
inline void INurbsSurfaceByCurvesMesh::PutVCurves ( const _variant_t & Curves ) {
    HRESULT _hr = put_VCurves(Curves);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4881)
inline _variant_t INurbsSurfaceByCurvesMesh::GetVCurves ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4882)
inline void INurbsSurfaceByCurvesMesh::PutCheckSelfIntersection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CheckSelfIntersection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4883)
inline VARIANT_BOOL INurbsSurfaceByCurvesMesh::GetCheckSelfIntersection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckSelfIntersection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4884)
inline void INurbsSurfaceByCurvesMesh::PutUClosed ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UClosed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4885)
inline VARIANT_BOOL INurbsSurfaceByCurvesMesh::GetUClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4886)
inline void INurbsSurfaceByCurvesMesh::PutVClosed ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_VClosed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4887)
inline VARIANT_BOOL INurbsSurfaceByCurvesMesh::GetVClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4888)
inline void INurbsSurfaceByCurvesMesh::PutConnectSurface ( long Index, struct IModelObject * PVal ) {
    HRESULT _hr = put_ConnectSurface(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4889)
inline IModelObjectPtr INurbsSurfaceByCurvesMesh::GetConnectSurface ( long Index ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_ConnectSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4890)
inline void INurbsSurfaceByCurvesMesh::PutConnectType ( long Index, enum ksConnectTypeEnum PVal ) {
    HRESULT _hr = put_ConnectType(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4891)
inline enum ksConnectTypeEnum INurbsSurfaceByCurvesMesh::GetConnectType ( long Index ) {
    enum ksConnectTypeEnum _result;
    HRESULT _hr = get_ConnectType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface INurbsSurfacesByCurvesMeshs wrapper method implementations
//

#pragma implementation_key(4892)
inline INurbsSurfaceByCurvesMeshPtr INurbsSurfacesByCurvesMeshs::GetNurbsSurfaceByCurvesMesh ( const _variant_t & Index ) {
    struct INurbsSurfaceByCurvesMesh * _result = 0;
    HRESULT _hr = get_NurbsSurfaceByCurvesMesh(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsSurfaceByCurvesMeshPtr(_result, false);
}

#pragma implementation_key(4893)
inline INurbsSurfaceByCurvesMeshPtr INurbsSurfacesByCurvesMeshs::Add ( ) {
    struct INurbsSurfaceByCurvesMesh * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsSurfaceByCurvesMeshPtr(_result, false);
}

//
// interface IJointSurface wrapper method implementations
//

#pragma implementation_key(4894)
inline void IJointSurface::PutCurves1 ( const _variant_t & PVal ) {
    HRESULT _hr = put_Curves1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4895)
inline _variant_t IJointSurface::GetCurves1 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Curves1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4896)
inline void IJointSurface::PutCurves2 ( const _variant_t & PVal ) {
    HRESULT _hr = put_Curves2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4897)
inline _variant_t IJointSurface::GetCurves2 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Curves2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4898)
inline void IJointSurface::PutFace1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Face1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4899)
inline IModelObjectPtr IJointSurface::GetFace1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4900)
inline void IJointSurface::PutFace2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Face2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4901)
inline IModelObjectPtr IJointSurface::GetFace2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4902)
inline void IJointSurface::PutFace1ConnectType ( enum ksConnectTypeEnum PVal ) {
    HRESULT _hr = put_Face1ConnectType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4903)
inline enum ksConnectTypeEnum IJointSurface::GetFace1ConnectType ( ) {
    enum ksConnectTypeEnum _result;
    HRESULT _hr = get_Face1ConnectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4904)
inline void IJointSurface::PutFace2ConnectType ( enum ksConnectTypeEnum PVal ) {
    HRESULT _hr = put_Face2ConnectType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4905)
inline enum ksConnectTypeEnum IJointSurface::GetFace2ConnectType ( ) {
    enum ksConnectTypeEnum _result;
    HRESULT _hr = get_Face2ConnectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4906)
inline void IJointSurface::PutSense1 ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Sense1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4907)
inline VARIANT_BOOL IJointSurface::GetSense1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sense1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4908)
inline void IJointSurface::PutSense2 ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Sense2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4909)
inline VARIANT_BOOL IJointSurface::GetSense2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sense2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4910)
inline void IJointSurface::PutTension1 ( double PVal ) {
    HRESULT _hr = put_Tension1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4911)
inline double IJointSurface::GetTension1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Tension1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4912)
inline void IJointSurface::PutTension2 ( double PVal ) {
    HRESULT _hr = put_Tension2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4913)
inline double IJointSurface::GetTension2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Tension2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4914)
inline void IJointSurface::PutSideEdges1 ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_SideEdges1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4915)
inline VARIANT_BOOL IJointSurface::GetSideEdges1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SideEdges1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4916)
inline void IJointSurface::PutSideEdges2 ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_SideEdges2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4917)
inline VARIANT_BOOL IJointSurface::GetSideEdges2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SideEdges2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4918)
inline void IJointSurface::PutGeneralTension ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_GeneralTension(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4919)
inline VARIANT_BOOL IJointSurface::GetGeneralTension ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GeneralTension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4920)
inline void IJointSurface::PutCheckSelfIntersection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CheckSelfIntersection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4921)
inline VARIANT_BOOL IJointSurface::GetCheckSelfIntersection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckSelfIntersection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4922)
inline void IJointSurface::PutAutoSegmentation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoSegmentation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4923)
inline VARIANT_BOOL IJointSurface::GetAutoSegmentation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSegmentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4924)
inline VARIANT_BOOL IJointSurface::AddNewEdge ( long IndexAt ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddNewEdge(IndexAt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4925)
inline VARIANT_BOOL IJointSurface::DeleteEdge ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteEdge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4926)
inline long IJointSurface::GetEdgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4927)
inline VARIANT_BOOL IJointSurface::SetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double X, double Y, double Z, double * T, struct IModelObject * AssociateVertex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetEdgePointParam(EdgeIndex, StartPoint, X, Y, Z, T, AssociateVertex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4928)
inline VARIANT_BOOL IJointSurface::GetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double * X, double * Y, double * Z, double * T, struct IModelObject * * AssociateVertex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEdgePointParam(EdgeIndex, StartPoint, X, Y, Z, T, AssociateVertex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4929)
inline VARIANT_BOOL IJointSurface::GetEdgePointParams ( VARIANT * Points1, VARIANT * T1, VARIANT * AssociateVertexes1, VARIANT * Points2, VARIANT * T2, VARIANT * AssociateVertexes2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEdgePointParams(Points1, T1, AssociateVertexes1, Points2, T2, AssociateVertexes2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IJointSurfaces wrapper method implementations
//

#pragma implementation_key(4930)
inline IJointSurfacePtr IJointSurfaces::GetJointSurface ( const _variant_t & Index ) {
    struct IJointSurface * _result = 0;
    HRESULT _hr = get_JointSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IJointSurfacePtr(_result, false);
}

#pragma implementation_key(4931)
inline IJointSurfacePtr IJointSurfaces::Add ( ) {
    struct IJointSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IJointSurfacePtr(_result, false);
}

//
// interface IRestoredSurface wrapper method implementations
//

#pragma implementation_key(4932)
inline void IRestoredSurface::PutFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Face(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4933)
inline IModelObjectPtr IRestoredSurface::GetFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IRestoredSurfaces wrapper method implementations
//

#pragma implementation_key(4934)
inline IRestoredSurfacePtr IRestoredSurfaces::GetRestoredSurface ( const _variant_t & Index ) {
    struct IRestoredSurface * _result = 0;
    HRESULT _hr = get_RestoredSurface(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRestoredSurfacePtr(_result, false);
}

#pragma implementation_key(4935)
inline IRestoredSurfacePtr IRestoredSurfaces::Add ( ) {
    struct IRestoredSurface * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRestoredSurfacePtr(_result, false);
}

//
// interface IFaceMover wrapper method implementations
//

#pragma implementation_key(4936)
inline _variant_t IFaceMover::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4937)
inline VARIANT_BOOL IFaceMover::SetFaces ( const _variant_t & Faces, VARIANT_BOOL TangentFaces ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetFaces(Faces, TangentFaces, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4938)
inline void IFaceMover::PutOffset ( double PVal ) {
    HRESULT _hr = put_Offset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4939)
inline double IFaceMover::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4940)
inline void IFaceMover::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4941)
inline VARIANT_BOOL IFaceMover::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFaceMovers wrapper method implementations
//

#pragma implementation_key(4942)
inline IFaceMoverPtr IFaceMovers::GetFaceMover ( const _variant_t & Index ) {
    struct IFaceMover * _result = 0;
    HRESULT _hr = get_FaceMover(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFaceMoverPtr(_result, false);
}

#pragma implementation_key(4943)
inline IFaceMoverPtr IFaceMovers::Add ( ) {
    struct IFaceMover * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFaceMoverPtr(_result, false);
}

//
// interface ILinearPattern wrapper method implementations
//

#pragma implementation_key(4944)
inline void ILinearPattern::PutAxis1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Axis1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4945)
inline IModelObjectPtr ILinearPattern::GetAxis1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Axis1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4946)
inline IVector3DPtr ILinearPattern::GetVector1 ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4947)
inline void ILinearPattern::PutAngle1 ( double Val ) {
    HRESULT _hr = put_Angle1(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4948)
inline double ILinearPattern::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4949)
inline void ILinearPattern::PutDirection1 ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_Direction1(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4950)
inline VARIANT_BOOL ILinearPattern::GetDirection1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4951)
inline void ILinearPattern::PutStep1 ( double PVal ) {
    HRESULT _hr = put_Step1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4952)
inline double ILinearPattern::GetStep1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4953)
inline void ILinearPattern::PutBoundaryInstancesStepFactor1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BoundaryInstancesStepFactor1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4954)
inline VARIANT_BOOL ILinearPattern::GetBoundaryInstancesStepFactor1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryInstancesStepFactor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4955)
inline void ILinearPattern::PutCount1 ( long Val ) {
    HRESULT _hr = put_Count1(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4956)
inline long ILinearPattern::GetCount1 ( ) {
    long _result = 0;
    HRESULT _hr = get_Count1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4957)
inline void ILinearPattern::PutAxis2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Axis2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4958)
inline IModelObjectPtr ILinearPattern::GetAxis2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Axis2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4959)
inline IVector3DPtr ILinearPattern::GetVector2 ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(4960)
inline void ILinearPattern::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4961)
inline double ILinearPattern::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4962)
inline void ILinearPattern::PutDirection2 ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_Direction2(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4963)
inline VARIANT_BOOL ILinearPattern::GetDirection2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4964)
inline void ILinearPattern::PutStep2 ( double PVal ) {
    HRESULT _hr = put_Step2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4965)
inline double ILinearPattern::GetStep2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4966)
inline void ILinearPattern::PutBoundaryInstancesStepFactor2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BoundaryInstancesStepFactor2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4967)
inline VARIANT_BOOL ILinearPattern::GetBoundaryInstancesStepFactor2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryInstancesStepFactor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4968)
inline void ILinearPattern::PutCount2 ( long PVal ) {
    HRESULT _hr = put_Count2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4969)
inline long ILinearPattern::GetCount2 ( ) {
    long _result = 0;
    HRESULT _hr = get_Count2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4970)
inline void ILinearPattern::PutBuildingType ( enum ksLinearPatternBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4971)
inline enum ksLinearPatternBuildingTypeEnum ILinearPattern::GetBuildingType ( ) {
    enum ksLinearPatternBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4972)
inline VARIANT_BOOL ILinearPattern::SetBaseExemplarPlacement ( long Index1, long Index2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBaseExemplarPlacement(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4973)
inline VARIANT_BOOL ILinearPattern::GetBaseExemplarPlacement ( long * Index1, long * Index2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBaseExemplarPlacement(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPointDrivenPattern wrapper method implementations
//

#pragma implementation_key(4974)
inline void IPointDrivenPattern::PutDrivenObjects ( const _variant_t & Objects ) {
    HRESULT _hr = put_DrivenObjects(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4975)
inline _variant_t IPointDrivenPattern::GetDrivenObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DrivenObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4976)
inline VARIANT_BOOL IPointDrivenPattern::IsSuitableDrivenObject ( struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuitableDrivenObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4977)
inline VARIANT_BOOL IPointDrivenPattern::ClearDrivenObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearDrivenObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4978)
inline void IPointDrivenPattern::PutProjectionPoints ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ProjectionPoints(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4979)
inline VARIANT_BOOL IPointDrivenPattern::GetProjectionPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectionPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4980)
inline void IPointDrivenPattern::PutSaveInitialOrientation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveInitialOrientation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4981)
inline VARIANT_BOOL IPointDrivenPattern::GetSaveInitialOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveInitialOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4982)
inline void IPointDrivenPattern::PutOrientationType ( enum ksPatternExemplarsOrientationTypeEnum PVal ) {
    HRESULT _hr = put_OrientationType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4983)
inline enum ksPatternExemplarsOrientationTypeEnum IPointDrivenPattern::GetOrientationType ( ) {
    enum ksPatternExemplarsOrientationTypeEnum _result;
    HRESULT _hr = get_OrientationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4984)
inline void IPointDrivenPattern::PutOrientationObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_OrientationObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4985)
inline IModelObjectPtr IPointDrivenPattern::GetOrientationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_OrientationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface ICircularPattern wrapper method implementations
//

#pragma implementation_key(4986)
inline void ICircularPattern::PutAxis ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Axis(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4987)
inline IModelObjectPtr ICircularPattern::GetAxis ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(4988)
inline void ICircularPattern::PutStep1 ( double PVal ) {
    HRESULT _hr = put_Step1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4989)
inline double ICircularPattern::GetStep1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4990)
inline void ICircularPattern::PutBoundaryInstancesStepFactor1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BoundaryInstancesStepFactor1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4991)
inline VARIANT_BOOL ICircularPattern::GetBoundaryInstancesStepFactor1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryInstancesStepFactor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4992)
inline void ICircularPattern::PutCount1 ( long Val ) {
    HRESULT _hr = put_Count1(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4993)
inline long ICircularPattern::GetCount1 ( ) {
    long _result = 0;
    HRESULT _hr = get_Count1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4994)
inline void ICircularPattern::PutStep2 ( double PVal ) {
    HRESULT _hr = put_Step2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4995)
inline double ICircularPattern::GetStep2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4996)
inline void ICircularPattern::PutBoundaryInstancesStepFactor2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BoundaryInstancesStepFactor2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4997)
inline VARIANT_BOOL ICircularPattern::GetBoundaryInstancesStepFactor2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryInstancesStepFactor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4998)
inline void ICircularPattern::PutCount2 ( long PVal ) {
    HRESULT _hr = put_Count2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4999)
inline long ICircularPattern::GetCount2 ( ) {
    long _result = 0;
    HRESULT _hr = get_Count2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5000)
inline void ICircularPattern::PutSaveInitialOrientation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveInitialOrientation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5001)
inline VARIANT_BOOL ICircularPattern::GetSaveInitialOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveInitialOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5002)
inline void ICircularPattern::PutReverseDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReverseDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5003)
inline VARIANT_BOOL ICircularPattern::GetReverseDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReverseDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5004)
inline VARIANT_BOOL ICircularPattern::SetBaseExemplarPlacement ( long Index1, long Index2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBaseExemplarPlacement(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5005)
inline VARIANT_BOOL ICircularPattern::GetBaseExemplarPlacement ( long * Index1, long * Index2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBaseExemplarPlacement(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5006)
inline void ICircularPattern::PutBuildingType ( enum ksCircularPatternBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5007)
inline enum ksCircularPatternBuildingTypeEnum ICircularPattern::GetBuildingType ( ) {
    enum ksCircularPatternBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5008)
inline void ICircularPattern::PutStepByAxis ( double PVal ) {
    HRESULT _hr = put_StepByAxis(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5009)
inline double ICircularPattern::GetStepByAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_StepByAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPathPattern wrapper method implementations
//

#pragma implementation_key(5010)
inline void IPathPattern::PutCurves ( const _variant_t & Curves ) {
    HRESULT _hr = put_Curves(Curves);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5011)
inline _variant_t IPathPattern::GetCurves ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Curves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5012)
inline void IPathPattern::PutCount ( long PVal ) {
    HRESULT _hr = put_Count(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5013)
inline long IPathPattern::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5014)
inline void IPathPattern::PutStartingPoint ( struct IModelObject * Object ) {
    HRESULT _hr = put_StartingPoint(Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5015)
inline IModelObjectPtr IPathPattern::GetStartingPoint ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_StartingPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5016)
inline void IPathPattern::PutByStep ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ByStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5017)
inline VARIANT_BOOL IPathPattern::GetByStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ByStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5018)
inline void IPathPattern::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5019)
inline double IPathPattern::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5020)
inline void IPathPattern::PutBoundaryInstancesStepFactor ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BoundaryInstancesStepFactor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5021)
inline VARIANT_BOOL IPathPattern::GetBoundaryInstancesStepFactor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryInstancesStepFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5022)
inline void IPathPattern::PutSaveInitialOrientation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveInitialOrientation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5023)
inline VARIANT_BOOL IPathPattern::GetSaveInitialOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveInitialOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5024)
inline void IPathPattern::PutReverseDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReverseDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5025)
inline VARIANT_BOOL IPathPattern::GetReverseDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReverseDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDerivedPattern wrapper method implementations
//

#pragma implementation_key(5026)
inline void IDerivedPattern::PutMasterPattern ( struct IModelObject * Object ) {
    HRESULT _hr = put_MasterPattern(Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5027)
inline IModelObjectPtr IDerivedPattern::GetMasterPattern ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_MasterPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5028)
inline void IDerivedPattern::PutOrientBySample ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_OrientBySample(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5029)
inline VARIANT_BOOL IDerivedPattern::GetOrientBySample ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrientBySample(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5030)
inline void IDerivedPattern::PutSampleExemplar ( struct IModelObject * Object ) {
    HRESULT _hr = put_SampleExemplar(Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5031)
inline IModelObjectPtr IDerivedPattern::GetSampleExemplar ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_SampleExemplar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5032)
inline void IDerivedPattern::PutAllowNesting ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AllowNesting(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5033)
inline VARIANT_BOOL IDerivedPattern::GetAllowNesting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowNesting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5034)
inline void IDerivedPattern::PutAllowDeleted ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AllowDeleted(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5035)
inline VARIANT_BOOL IDerivedPattern::GetAllowDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DBy2VertexesParameters wrapper method implementations
//

#pragma implementation_key(5036)
inline void IVector3DBy2VertexesParameters::PutVertex1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Vertex1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5037)
inline IModelObjectPtr IVector3DBy2VertexesParameters::GetVertex1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Vertex1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5038)
inline void IVector3DBy2VertexesParameters::PutVertex2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Vertex2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5039)
inline IModelObjectPtr IVector3DBy2VertexesParameters::GetVertex2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Vertex2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5040)
inline void IVector3DBy2VertexesParameters::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5041)
inline VARIANT_BOOL IVector3DBy2VertexesParameters::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMirrorPattern wrapper method implementations
//

#pragma implementation_key(5042)
inline void IMirrorPattern::PutPlane ( struct IModelObject * Object ) {
    HRESULT _hr = put_Plane(Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5043)
inline IModelObjectPtr IMirrorPattern::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5044)
inline void IMirrorPattern::PutSaveInitialObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveInitialObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5045)
inline VARIANT_BOOL IMirrorPattern::GetSaveInitialObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveInitialObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DByCoefficientsParameters wrapper method implementations
//

#pragma implementation_key(5046)
inline void IVector3DByCoefficientsParameters::PutLocalCS ( struct ILocalCoordinateSystem * PVal ) {
    HRESULT _hr = put_LocalCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5047)
inline ILocalCoordinateSystemPtr IVector3DByCoefficientsParameters::GetLocalCS ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_LocalCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(5048)
inline void IVector3DByCoefficientsParameters::PutCoefficientByX ( double PVal ) {
    HRESULT _hr = put_CoefficientByX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5049)
inline double IVector3DByCoefficientsParameters::GetCoefficientByX ( ) {
    double _result = 0;
    HRESULT _hr = get_CoefficientByX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5050)
inline void IVector3DByCoefficientsParameters::PutCoefficientByY ( double PVal ) {
    HRESULT _hr = put_CoefficientByY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5051)
inline double IVector3DByCoefficientsParameters::GetCoefficientByY ( ) {
    double _result = 0;
    HRESULT _hr = get_CoefficientByY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5052)
inline void IVector3DByCoefficientsParameters::PutCoefficientByZ ( double PVal ) {
    HRESULT _hr = put_CoefficientByZ(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5053)
inline double IVector3DByCoefficientsParameters::GetCoefficientByZ ( ) {
    double _result = 0;
    HRESULT _hr = get_CoefficientByZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DBy2AnglesParameters wrapper method implementations
//

#pragma implementation_key(5054)
inline void IVector3DBy2AnglesParameters::PutLocalCS ( struct ILocalCoordinateSystem * PVal ) {
    HRESULT _hr = put_LocalCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5055)
inline ILocalCoordinateSystemPtr IVector3DBy2AnglesParameters::GetLocalCS ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_LocalCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(5056)
inline void IVector3DBy2AnglesParameters::PutAngleA ( double PVal ) {
    HRESULT _hr = put_AngleA(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5057)
inline double IVector3DBy2AnglesParameters::GetAngleA ( ) {
    double _result = 0;
    HRESULT _hr = get_AngleA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5058)
inline void IVector3DBy2AnglesParameters::PutAngleB ( double PVal ) {
    HRESULT _hr = put_AngleB(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5059)
inline double IVector3DBy2AnglesParameters::GetAngleB ( ) {
    double _result = 0;
    HRESULT _hr = get_AngleB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DByLocalCSParameters wrapper method implementations
//

#pragma implementation_key(5060)
inline void IVector3DByLocalCSParameters::PutLocalCS ( struct ILocalCoordinateSystem * PVal ) {
    HRESULT _hr = put_LocalCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5061)
inline ILocalCoordinateSystemPtr IVector3DByLocalCSParameters::GetLocalCS ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_LocalCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(5062)
inline void IVector3DByLocalCSParameters::PutAxisType ( ksObj3dTypeEnum PVal ) {
    HRESULT _hr = put_AxisType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5063)
inline ksObj3dTypeEnum IVector3DByLocalCSParameters::GetAxisType ( ) {
    ksObj3dTypeEnum _result;
    HRESULT _hr = get_AxisType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5064)
inline void IVector3DByLocalCSParameters::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5065)
inline double IVector3DByLocalCSParameters::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5066)
inline void IVector3DByLocalCSParameters::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5067)
inline VARIANT_BOOL IVector3DByLocalCSParameters::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DByObjectParameters wrapper method implementations
//

#pragma implementation_key(5068)
inline void IVector3DByObjectParameters::PutBaseObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BaseObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5069)
inline IModelObjectPtr IVector3DByObjectParameters::GetBaseObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5070)
inline void IVector3DByObjectParameters::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5071)
inline VARIANT_BOOL IVector3DByObjectParameters::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DAlongSurfaceNormalParameters wrapper method implementations
//

#pragma implementation_key(5072)
inline void IVector3DAlongSurfaceNormalParameters::PutBaseObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BaseObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5073)
inline IModelObjectPtr IVector3DAlongSurfaceNormalParameters::GetBaseObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5074)
inline void IVector3DAlongSurfaceNormalParameters::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5075)
inline VARIANT_BOOL IVector3DAlongSurfaceNormalParameters::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5076)
inline void IVector3DAlongSurfaceNormalParameters::PutU ( double PVal ) {
    HRESULT _hr = put_U(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5077)
inline double IVector3DAlongSurfaceNormalParameters::GetU ( ) {
    double _result = 0;
    HRESULT _hr = get_U(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5078)
inline void IVector3DAlongSurfaceNormalParameters::PutV ( double PVal ) {
    HRESULT _hr = put_V(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5079)
inline double IVector3DAlongSurfaceNormalParameters::GetV ( ) {
    double _result = 0;
    HRESULT _hr = get_V(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DByCurveParameters wrapper method implementations
//

#pragma implementation_key(5080)
inline void IVector3DByCurveParameters::PutCurve ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Curve(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5081)
inline IModelObjectPtr IVector3DByCurveParameters::GetCurve ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Curve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5082)
inline void IVector3DByCurveParameters::PutOffset ( double PVal ) {
    HRESULT _hr = put_Offset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5083)
inline double IVector3DByCurveParameters::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5084)
inline void IVector3DByCurveParameters::PutVectorType ( enum ksBasisVectorTypeEnum PVal ) {
    HRESULT _hr = put_VectorType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5085)
inline enum ksBasisVectorTypeEnum IVector3DByCurveParameters::GetVectorType ( ) {
    enum ksBasisVectorTypeEnum _result;
    HRESULT _hr = get_VectorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5086)
inline void IVector3DByCurveParameters::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5087)
inline VARIANT_BOOL IVector3DByCurveParameters::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVector3DByScreenNormalParameters wrapper method implementations
//

#pragma implementation_key(5088)
inline void IVector3DByScreenNormalParameters::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5089)
inline VARIANT_BOOL IVector3DByScreenNormalParameters::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5090)
inline void IVector3DByScreenNormalParameters::PutFix ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Fix(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5091)
inline VARIANT_BOOL IVector3DByScreenNormalParameters::GetFix ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Fix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICutRotated wrapper method implementations
//

#pragma implementation_key(5092)
inline void ICutRotated::PutCut ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Cut(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5093)
inline VARIANT_BOOL ICutRotated::GetCut ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRotatedSurface wrapper method implementations
//

#pragma implementation_key(5094)
inline void IRotatedSurface::PutClosedShell ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosedShell(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5095)
inline VARIANT_BOOL IRotatedSurface::GetClosedShell ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedShell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPoint3DParamBySphere wrapper method implementations
//

#pragma implementation_key(5096)
inline void IPoint3DParamBySphere::PutR ( double PVal ) {
    HRESULT _hr = put_R(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5097)
inline double IPoint3DParamBySphere::GetR ( ) {
    double _result = 0;
    HRESULT _hr = get_R(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5098)
inline void IPoint3DParamBySphere::PutA ( double PVal ) {
    HRESULT _hr = put_A(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5099)
inline double IPoint3DParamBySphere::GetA ( ) {
    double _result = 0;
    HRESULT _hr = get_A(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5100)
inline void IPoint3DParamBySphere::PutB ( double PVal ) {
    HRESULT _hr = put_B(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5101)
inline double IPoint3DParamBySphere::GetB ( ) {
    double _result = 0;
    HRESULT _hr = get_B(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5102)
inline void IPoint3DParamBySphere::PutAssociationObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_AssociationObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5103)
inline IModelObjectPtr IPoint3DParamBySphere::GetAssociationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5104)
inline void IPoint3DParamBySphere::PutRadiusObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_RadiusObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5105)
inline IModelObjectPtr IPoint3DParamBySphere::GetRadiusObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_RadiusObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPoint3DParamByCylinder wrapper method implementations
//

#pragma implementation_key(5106)
inline void IPoint3DParamByCylinder::PutR ( double PVal ) {
    HRESULT _hr = put_R(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5107)
inline double IPoint3DParamByCylinder::GetR ( ) {
    double _result = 0;
    HRESULT _hr = get_R(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5108)
inline void IPoint3DParamByCylinder::PutA ( double PVal ) {
    HRESULT _hr = put_A(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5109)
inline double IPoint3DParamByCylinder::GetA ( ) {
    double _result = 0;
    HRESULT _hr = get_A(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5110)
inline void IPoint3DParamByCylinder::PutZ ( double PVal ) {
    HRESULT _hr = put_Z(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5111)
inline double IPoint3DParamByCylinder::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5112)
inline void IPoint3DParamByCylinder::PutAssociationObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_AssociationObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5113)
inline IModelObjectPtr IPoint3DParamByCylinder::GetAssociationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5114)
inline void IPoint3DParamByCylinder::PutRadiusObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_RadiusObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5115)
inline IModelObjectPtr IPoint3DParamByCylinder::GetRadiusObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_RadiusObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IMeshAroundPointParam wrapper method implementations
//

#pragma implementation_key(5116)
inline void IMeshAroundPointParam::PutMeshType ( enum ksMeshAroundPointTypeEnum PVal ) {
    HRESULT _hr = put_MeshType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5117)
inline enum ksMeshAroundPointTypeEnum IMeshAroundPointParam::GetMeshType ( ) {
    enum ksMeshAroundPointTypeEnum _result;
    HRESULT _hr = get_MeshType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5118)
inline void IMeshAroundPointParam::PutOffsetU ( double PVal ) {
    HRESULT _hr = put_OffsetU(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5119)
inline double IMeshAroundPointParam::GetOffsetU ( ) {
    double _result = 0;
    HRESULT _hr = get_OffsetU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5120)
inline void IMeshAroundPointParam::PutOffsetV ( double PVal ) {
    HRESULT _hr = put_OffsetV(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5121)
inline double IMeshAroundPointParam::GetOffsetV ( ) {
    double _result = 0;
    HRESULT _hr = get_OffsetV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5122)
inline void IMeshAroundPointParam::PutAssociationObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5123)
inline IModelObjectPtr IMeshAroundPointParam::GetAssociationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5124)
inline VARIANT_BOOL IMeshAroundPointParam::GetOffsetPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOffsetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5125)
inline VARIANT_BOOL IMeshAroundPointParam::SetOffsetPoint ( double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetOffsetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5126)
inline void IMeshAroundPointParam::PutStep1 ( double PVal ) {
    HRESULT _hr = put_Step1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5127)
inline double IMeshAroundPointParam::GetStep1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5128)
inline void IMeshAroundPointParam::PutStep2 ( double PVal ) {
    HRESULT _hr = put_Step2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5129)
inline double IMeshAroundPointParam::GetStep2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5130)
inline void IMeshAroundPointParam::PutStepU ( double PVal ) {
    HRESULT _hr = put_StepU(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5131)
inline double IMeshAroundPointParam::GetStepU ( ) {
    double _result = 0;
    HRESULT _hr = get_StepU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5132)
inline void IMeshAroundPointParam::PutStepV ( double PVal ) {
    HRESULT _hr = put_StepV(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5133)
inline double IMeshAroundPointParam::GetStepV ( ) {
    double _result = 0;
    HRESULT _hr = get_StepV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5134)
inline void IMeshAroundPointParam::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5135)
inline double IMeshAroundPointParam::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5136)
inline void IMeshAroundPointParam::PutRayCount ( long PVal ) {
    HRESULT _hr = put_RayCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5137)
inline long IMeshAroundPointParam::GetRayCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RayCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5138)
inline void IMeshAroundPointParam::PutRadialStep ( double PVal ) {
    HRESULT _hr = put_RadialStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5139)
inline double IMeshAroundPointParam::GetRadialStep ( ) {
    double _result = 0;
    HRESULT _hr = get_RadialStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5140)
inline void IMeshAroundPointParam::PutMeshAngle ( double PVal ) {
    HRESULT _hr = put_MeshAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5141)
inline double IMeshAroundPointParam::GetMeshAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_MeshAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxis3DBy2Points wrapper method implementations
//

#pragma implementation_key(5142)
inline void IAxis3DBy2Points::PutPoint1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Point1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5143)
inline IModelObjectPtr IAxis3DBy2Points::GetPoint1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5144)
inline void IAxis3DBy2Points::PutPoint2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Point2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5145)
inline IModelObjectPtr IAxis3DBy2Points::GetPoint2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IAxis3DBy2Planes wrapper method implementations
//

#pragma implementation_key(5146)
inline void IAxis3DBy2Planes::PutPlane1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Plane1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5147)
inline IModelObjectPtr IAxis3DBy2Planes::GetPlane1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5148)
inline void IAxis3DBy2Planes::PutPlane2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Plane2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5149)
inline IModelObjectPtr IAxis3DBy2Planes::GetPlane2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IAxis3DByConeface wrapper method implementations
//

#pragma implementation_key(5150)
inline void IAxis3DByConeface::PutFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Face(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5151)
inline IModelObjectPtr IAxis3DByConeface::GetFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IAxis3DByEdge wrapper method implementations
//

#pragma implementation_key(5152)
inline void IAxis3DByEdge::PutEdge ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Edge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5153)
inline IModelObjectPtr IAxis3DByEdge::GetEdge ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Edge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IAxis3DByPointAndObject wrapper method implementations
//

#pragma implementation_key(5154)
inline void IAxis3DByPointAndObject::PutPoint ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Point(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5155)
inline IModelObjectPtr IAxis3DByPointAndObject::GetPoint ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5156)
inline void IAxis3DByPointAndObject::PutDirectObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DirectObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5157)
inline IModelObjectPtr IAxis3DByPointAndObject::GetDirectObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirectObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5158)
inline IVector3DPtr IAxis3DByPointAndObject::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(5159)
inline void IAxis3DByPointAndObject::PutParallel ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Parallel(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5160)
inline VARIANT_BOOL IAxis3DByPointAndObject::GetParallel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Parallel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxis3DByOperation wrapper method implementations
//

#pragma implementation_key(5161)
inline void IAxis3DByOperation::PutOperation ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Operation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5162)
inline IModelObjectPtr IAxis3DByOperation::GetOperation ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Operation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPlane3DByPlaneCurve wrapper method implementations
//

#pragma implementation_key(5163)
inline void IPlane3DByPlaneCurve::PutCurve ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Curve(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5164)
inline IModelObjectPtr IPlane3DByPlaneCurve::GetCurve ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Curve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPlane3DTangentToFaceInPoint wrapper method implementations
//

#pragma implementation_key(5165)
inline void IPlane3DTangentToFaceInPoint::PutFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Face(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5166)
inline IModelObjectPtr IPlane3DTangentToFaceInPoint::GetFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5167)
inline void IPlane3DTangentToFaceInPoint::PutPoint ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Point(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5168)
inline IModelObjectPtr IPlane3DTangentToFaceInPoint::GetPoint ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5169)
inline void IPlane3DTangentToFaceInPoint::PutParamU ( double PVal ) {
    HRESULT _hr = put_ParamU(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5170)
inline double IPlane3DTangentToFaceInPoint::GetParamU ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5171)
inline void IPlane3DTangentToFaceInPoint::PutParamV ( double PVal ) {
    HRESULT _hr = put_ParamV(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5172)
inline double IPlane3DTangentToFaceInPoint::GetParamV ( ) {
    double _result = 0;
    HRESULT _hr = get_ParamV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlane3DByOffset wrapper method implementations
//

#pragma implementation_key(5173)
inline void IPlane3DByOffset::PutOffset ( double PVal ) {
    HRESULT _hr = put_Offset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5174)
inline double IPlane3DByOffset::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5175)
inline void IPlane3DByOffset::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5176)
inline VARIANT_BOOL IPlane3DByOffset::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5177)
inline void IPlane3DByOffset::PutBasePlane ( struct IModelObject * Result ) {
    HRESULT _hr = put_BasePlane(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5178)
inline IModelObjectPtr IPlane3DByOffset::GetBasePlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPlane3DBy3Points wrapper method implementations
//

#pragma implementation_key(5179)
inline void IPlane3DBy3Points::PutPoint1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Point1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5180)
inline IModelObjectPtr IPlane3DBy3Points::GetPoint1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5181)
inline void IPlane3DBy3Points::PutPoint2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Point2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5182)
inline IModelObjectPtr IPlane3DBy3Points::GetPoint2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5183)
inline void IPlane3DBy3Points::PutPoint3 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Point3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5184)
inline IModelObjectPtr IPlane3DBy3Points::GetPoint3 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPlane3DByAngle wrapper method implementations
//

#pragma implementation_key(5185)
inline void IPlane3DByAngle::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5186)
inline double IPlane3DByAngle::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5187)
inline void IPlane3DByAngle::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5188)
inline VARIANT_BOOL IPlane3DByAngle::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5189)
inline void IPlane3DByAngle::PutBasePlane ( struct IModelObject * Result ) {
    HRESULT _hr = put_BasePlane(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5190)
inline IModelObjectPtr IPlane3DByAngle::GetBasePlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5191)
inline void IPlane3DByAngle::PutBaseLine ( struct IModelObject * Result ) {
    HRESULT _hr = put_BaseLine(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5192)
inline IModelObjectPtr IPlane3DByAngle::GetBaseLine ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPlane3DByEdgeAndPoint wrapper method implementations
//

#pragma implementation_key(5193)
inline void IPlane3DByEdgeAndPoint::PutPoint ( struct IModelObject * Result ) {
    HRESULT _hr = put_Point(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5194)
inline IModelObjectPtr IPlane3DByEdgeAndPoint::GetPoint ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5195)
inline void IPlane3DByEdgeAndPoint::PutEdge ( struct IModelObject * Result ) {
    HRESULT _hr = put_Edge(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5196)
inline IModelObjectPtr IPlane3DByEdgeAndPoint::GetEdge ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Edge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPlane3DParallelByPoint wrapper method implementations
//

#pragma implementation_key(5197)
inline void IPlane3DParallelByPoint::PutPoint ( struct IModelObject * Result ) {
    HRESULT _hr = put_Point(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5198)
inline IModelObjectPtr IPlane3DParallelByPoint::GetPoint ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5199)
inline void IPlane3DParallelByPoint::PutPlane ( struct IModelObject * Result ) {
    HRESULT _hr = put_Plane(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5200)
inline IModelObjectPtr IPlane3DParallelByPoint::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IPlane3DPerpendicularByEdge wrapper method implementations
//

#pragma implementation_key(5201)
inline void IPlane3DPerpendicularByEdge::PutPoint ( struct IModelObject * Result ) {
    HRESULT _hr = put_Point(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5202)
inline IModelObjectPtr IPlane3DPerpendicularByEdge::GetPoint ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5203)
inline void IPlane3DPerpendicularByEdge::PutEdge ( struct IModelObject * Result ) {
    HRESULT _hr = put_Edge(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5204)
inline IModelObjectPtr IPlane3DPerpendicularByEdge::GetEdge ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Edge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5205)
inline IVector3DPtr IPlane3DPerpendicularByEdge::GetVector3D ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

//
// interface IPlane3DNormalToSurface wrapper method implementations
//

#pragma implementation_key(5206)
inline void IPlane3DNormalToSurface::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5207)
inline double IPlane3DNormalToSurface::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5208)
inline void IPlane3DNormalToSurface::PutPlane ( struct IModelObject * Result ) {
    HRESULT _hr = put_Plane(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5209)
inline IModelObjectPtr IPlane3DNormalToSurface::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5210)
inline void IPlane3DNormalToSurface::PutFace ( struct IModelObject * Result ) {
    HRESULT _hr = put_Face(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5211)
inline IModelObjectPtr IPlane3DNormalToSurface::GetFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5212)
inline void IPlane3DNormalToSurface::PutAngleDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AngleDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5213)
inline VARIANT_BOOL IPlane3DNormalToSurface::GetAngleDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AngleDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlane3DMiddle wrapper method implementations
//

#pragma implementation_key(5214)
inline void IPlane3DMiddle::PutObject1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Object1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5215)
inline IModelObjectPtr IPlane3DMiddle::GetObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5216)
inline void IPlane3DMiddle::PutObject2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Object2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5217)
inline IModelObjectPtr IPlane3DMiddle::GetObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5218)
inline void IPlane3DMiddle::PutOriention ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Oriention(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5219)
inline VARIANT_BOOL IPlane3DMiddle::GetOriention ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Oriention(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlane3DByEdgeAndPlane wrapper method implementations
//

#pragma implementation_key(5220)
inline void IPlane3DByEdgeAndPlane::PutPlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Plane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5221)
inline IModelObjectPtr IPlane3DByEdgeAndPlane::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5222)
inline void IPlane3DByEdgeAndPlane::PutEdge ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Edge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5223)
inline IModelObjectPtr IPlane3DByEdgeAndPlane::GetEdge ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Edge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5224)
inline void IPlane3DByEdgeAndPlane::PutParallel ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Parallel(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5225)
inline VARIANT_BOOL IPlane3DByEdgeAndPlane::GetParallel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Parallel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlane3DBy2Edge wrapper method implementations
//

#pragma implementation_key(5226)
inline void IPlane3DBy2Edge::PutEdge1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Edge1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5227)
inline IModelObjectPtr IPlane3DBy2Edge::GetEdge1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Edge1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5228)
inline void IPlane3DBy2Edge::PutEdge2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Edge2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5229)
inline IModelObjectPtr IPlane3DBy2Edge::GetEdge2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Edge2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5230)
inline void IPlane3DBy2Edge::PutParallel ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Parallel(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5231)
inline VARIANT_BOOL IPlane3DBy2Edge::GetParallel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Parallel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlane3DTangentToFace wrapper method implementations
//

#pragma implementation_key(5232)
inline void IPlane3DTangentToFace::PutFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Face(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5233)
inline IModelObjectPtr IPlane3DTangentToFace::GetFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5234)
inline void IPlane3DTangentToFace::PutPlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Plane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5235)
inline IModelObjectPtr IPlane3DTangentToFace::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5236)
inline void IPlane3DTangentToFace::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5237)
inline double IPlane3DTangentToFace::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5238)
inline void IPlane3DTangentToFace::PutOrientation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Orientation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5239)
inline VARIANT_BOOL IPlane3DTangentToFace::GetOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IToleranceRecalc wrapper method implementations
//

#pragma implementation_key(5240)
inline void IToleranceRecalc::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5241)
inline _bstr_t IToleranceRecalc::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5242)
inline void IToleranceRecalc::PutCurrent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Current(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5243)
inline VARIANT_BOOL IToleranceRecalc::GetCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5244)
inline long IToleranceRecalc::GetItemsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ItemsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5245)
inline IKompasAPIObjectPtr IToleranceRecalc::GetItem ( const _variant_t & Index ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(5246)
inline VARIANT_BOOL IToleranceRecalc::AddItems ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddItems(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5247)
inline VARIANT_BOOL IToleranceRecalc::AddAllVariables ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddAllVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5248)
inline VARIANT_BOOL IToleranceRecalc::DeleteItem ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteItem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5249)
inline void IToleranceRecalc::PutRecalcType ( const _variant_t & Index, enum ksToleranceRecalcsEnum PVal ) {
    HRESULT _hr = put_RecalcType(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5250)
inline enum ksToleranceRecalcsEnum IToleranceRecalc::GetRecalcType ( const _variant_t & Index ) {
    enum ksToleranceRecalcsEnum _result;
    HRESULT _hr = get_RecalcType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5251)
inline void IToleranceRecalc::PutRecalcUserType ( const _variant_t & Index, _bstr_t PVal ) {
    HRESULT _hr = put_RecalcUserType(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5252)
inline _bstr_t IToleranceRecalc::GetRecalcUserType ( const _variant_t & Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_RecalcUserType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5253)
inline void IToleranceRecalc::PutCoefficient ( const _variant_t & Index, double PVal ) {
    HRESULT _hr = put_Coefficient(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5254)
inline double IToleranceRecalc::GetCoefficient ( const _variant_t & Index ) {
    double _result = 0;
    HRESULT _hr = get_Coefficient(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5255)
inline long IToleranceRecalc::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IToleranceRecalcsManager wrapper method implementations
//

#pragma implementation_key(5256)
inline long IToleranceRecalcsManager::GetRecalcsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RecalcsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5257)
inline IToleranceRecalcPtr IToleranceRecalcsManager::AddRecalc ( ) {
    struct IToleranceRecalc * _result = 0;
    HRESULT _hr = raw_AddRecalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IToleranceRecalcPtr(_result, false);
}

#pragma implementation_key(5258)
inline IToleranceRecalcPtr IToleranceRecalcsManager::AddRecalcCopy ( struct IToleranceRecalc * Source ) {
    struct IToleranceRecalc * _result = 0;
    HRESULT _hr = raw_AddRecalcCopy(Source, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IToleranceRecalcPtr(_result, false);
}

#pragma implementation_key(5259)
inline IToleranceRecalcPtr IToleranceRecalcsManager::GetRecalc ( const _variant_t & Index ) {
    struct IToleranceRecalc * _result = 0;
    HRESULT _hr = raw_GetRecalc(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IToleranceRecalcPtr(_result, false);
}

#pragma implementation_key(5260)
inline void IToleranceRecalcsManager::PutToleranceMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ToleranceMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5261)
inline VARIANT_BOOL IToleranceRecalcsManager::GetToleranceMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5262)
inline VARIANT_BOOL IToleranceRecalcsManager::SaveRecalcModel ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveRecalcModel(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5263)
inline IToleranceRecalcPtr IToleranceRecalcsManager::GetCurrentRecalc ( ) {
    struct IToleranceRecalc * _result = 0;
    HRESULT _hr = get_CurrentRecalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IToleranceRecalcPtr(_result, false);
}

//
// interface IMate3DByAngle wrapper method implementations
//

#pragma implementation_key(5264)
inline void IMate3DByAngle::PutAngle3D ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Angle3D(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5265)
inline VARIANT_BOOL IMate3DByAngle::GetAngle3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Angle3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5266)
inline void IMate3DByAngle::PutAxis ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Axis(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5267)
inline IModelObjectPtr IMate3DByAngle::GetAxis ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IMate3DByTangent wrapper method implementations
//

#pragma implementation_key(5268)
inline void IMate3DByTangent::PutTangentType ( enum ksMateTangentTypeEnum PVal ) {
    HRESULT _hr = put_TangentType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5269)
inline enum ksMateTangentTypeEnum IMate3DByTangent::GetTangentType ( ) {
    enum ksMateTangentTypeEnum _result;
    HRESULT _hr = get_TangentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMate3DSymmetry wrapper method implementations
//

#pragma implementation_key(5270)
inline void IMate3DSymmetry::PutPlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Plane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5271)
inline IModelObjectPtr IMate3DSymmetry::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IMate3DTransmission wrapper method implementations
//

#pragma implementation_key(5272)
inline void IMate3DTransmission::PutMotionType1 ( enum ksMateMotionTypeEnum PVal ) {
    HRESULT _hr = put_MotionType1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5273)
inline enum ksMateMotionTypeEnum IMate3DTransmission::GetMotionType1 ( ) {
    enum ksMateMotionTypeEnum _result;
    HRESULT _hr = get_MotionType1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5274)
inline void IMate3DTransmission::PutMotionType2 ( enum ksMateMotionTypeEnum PVal ) {
    HRESULT _hr = put_MotionType2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5275)
inline enum ksMateMotionTypeEnum IMate3DTransmission::GetMotionType2 ( ) {
    enum ksMateMotionTypeEnum _result;
    HRESULT _hr = get_MotionType2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5276)
inline void IMate3DTransmission::PutRotationAxis1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_RotationAxis1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5277)
inline IModelObjectPtr IMate3DTransmission::GetRotationAxis1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_RotationAxis1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5278)
inline void IMate3DTransmission::PutRotationAxis2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_RotationAxis2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5279)
inline IModelObjectPtr IMate3DTransmission::GetRotationAxis2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_RotationAxis2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5280)
inline void IMate3DTransmission::PutTrajectory1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Trajectory1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5281)
inline IModelObjectPtr IMate3DTransmission::GetTrajectory1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Trajectory1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5282)
inline void IMate3DTransmission::PutTrajectory2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Trajectory2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5283)
inline IModelObjectPtr IMate3DTransmission::GetTrajectory2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Trajectory2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5284)
inline void IMate3DTransmission::PutDirection1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5285)
inline VARIANT_BOOL IMate3DTransmission::GetDirection1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5286)
inline void IMate3DTransmission::PutDirection2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5287)
inline VARIANT_BOOL IMate3DTransmission::GetDirection2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5288)
inline double IMate3DTransmission::GetScale1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5289)
inline double IMate3DTransmission::GetScale2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5290)
inline VARIANT_BOOL IMate3DTransmission::SetScale ( double Scale1, double Scale2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetScale(Scale1, Scale2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMate3DCamGear wrapper method implementations
//

#pragma implementation_key(5291)
inline void IMate3DCamGear::PutCamFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_CamFaces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5292)
inline _variant_t IMate3DCamGear::GetCamFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CamFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5293)
inline void IMate3DCamGear::PutRotationAxis ( struct IModelObject * PVal ) {
    HRESULT _hr = put_RotationAxis(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5294)
inline IModelObjectPtr IMate3DCamGear::GetRotationAxis ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_RotationAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5295)
inline void IMate3DCamGear::PutFollowerFace ( struct IModelObject * PVal ) {
    HRESULT _hr = put_FollowerFace(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5296)
inline IModelObjectPtr IMate3DCamGear::GetFollowerFace ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_FollowerFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5297)
inline void IMate3DCamGear::PutTrajectory ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Trajectory(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5298)
inline IModelObjectPtr IMate3DCamGear::GetTrajectory ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface ICountersinkHoleParameters wrapper method implementations
//

#pragma implementation_key(5299)
inline enum ksCountersinkTypeEnum ICountersinkHoleParameters::GetCountersinkType ( ) {
    enum ksCountersinkTypeEnum _result;
    HRESULT _hr = get_CountersinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5300)
inline void ICountersinkHoleParameters::PutCountersinkType ( enum ksCountersinkTypeEnum PVal ) {
    HRESULT _hr = put_CountersinkType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5301)
inline double ICountersinkHoleParameters::GetCountersinkDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_CountersinkDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5302)
inline void ICountersinkHoleParameters::PutCountersinkDiameter ( double PVal ) {
    HRESULT _hr = put_CountersinkDiameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5303)
inline double ICountersinkHoleParameters::GetCountersinkAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_CountersinkAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5304)
inline void ICountersinkHoleParameters::PutCountersinkAngle ( double PVal ) {
    HRESULT _hr = put_CountersinkAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5305)
inline double ICountersinkHoleParameters::GetCountersinkDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_CountersinkDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5306)
inline void ICountersinkHoleParameters::PutCountersinkDepth ( double PVal ) {
    HRESULT _hr = put_CountersinkDepth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpotfacingHoleParameters wrapper method implementations
//

#pragma implementation_key(5307)
inline double ISpotfacingHoleParameters::GetSpotfacingDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_SpotfacingDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5308)
inline void ISpotfacingHoleParameters::PutSpotfacingDiameter ( double PVal ) {
    HRESULT _hr = put_SpotfacingDiameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5309)
inline double ISpotfacingHoleParameters::GetSpotfacingDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_SpotfacingDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5310)
inline void ISpotfacingHoleParameters::PutSpotfacingDepth ( double PVal ) {
    HRESULT _hr = put_SpotfacingDepth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICountersinkSpotfacingHoleParameters wrapper method implementations
//

#pragma implementation_key(5311)
inline double ICountersinkSpotfacingHoleParameters::GetSpotfacingCountersinkDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_SpotfacingCountersinkDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5312)
inline void ICountersinkSpotfacingHoleParameters::PutSpotfacingCountersinkDiameter ( double PVal ) {
    HRESULT _hr = put_SpotfacingCountersinkDiameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5313)
inline double ICountersinkSpotfacingHoleParameters::GetSpotfacingDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_SpotfacingDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5314)
inline void ICountersinkSpotfacingHoleParameters::PutSpotfacingDepth ( double PVal ) {
    HRESULT _hr = put_SpotfacingDepth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5315)
inline double ICountersinkSpotfacingHoleParameters::GetCountersinkAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_CountersinkAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5316)
inline void ICountersinkSpotfacingHoleParameters::PutCountersinkAngle ( double PVal ) {
    HRESULT _hr = put_CountersinkAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IConicHoleParameters wrapper method implementations
//

#pragma implementation_key(5317)
inline enum ksConicTypeEnum IConicHoleParameters::GetConicType ( ) {
    enum ksConicTypeEnum _result;
    HRESULT _hr = get_ConicType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5318)
inline void IConicHoleParameters::PutConicType ( enum ksConicTypeEnum PVal ) {
    HRESULT _hr = put_ConicType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5319)
inline double IConicHoleParameters::GetConicDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_ConicDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5320)
inline void IConicHoleParameters::PutConicDiameter ( double PVal ) {
    HRESULT _hr = put_ConicDiameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5321)
inline double IConicHoleParameters::GetConicAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_ConicAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5322)
inline void IConicHoleParameters::PutConicAngle ( double PVal ) {
    HRESULT _hr = put_ConicAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHoleDisposal wrapper method implementations
//

#pragma implementation_key(5323)
inline IModelObjectPtr IHoleDisposal::GetBaseSurface ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BaseSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5324)
inline void IHoleDisposal::PutBaseSurface ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BaseSurface(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5325)
inline enum ksPoint3DSurfaceParamTypeEnum IHoleDisposal::GetOffsetType ( ) {
    enum ksPoint3DSurfaceParamTypeEnum _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5326)
inline void IHoleDisposal::PutOffsetType ( enum ksPoint3DSurfaceParamTypeEnum PVal ) {
    HRESULT _hr = put_OffsetType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5327)
inline IKompasAPIObjectPtr IHoleDisposal::GetPoint3DParamSurface ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Point3DParamSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(5328)
inline IModelObjectPtr IHoleDisposal::GetAssociationVertex ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5329)
inline void IHoleDisposal::PutAssociationVertex ( struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationVertex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5330)
inline VARIANT_BOOL IHoleDisposal::GetPerpendicular ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Perpendicular(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5331)
inline void IHoleDisposal::PutPerpendicular ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Perpendicular(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5332)
inline VARIANT_BOOL IHoleDisposal::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5333)
inline void IHoleDisposal::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5334)
inline VARIANT_BOOL IHoleDisposal::GetProcessCanopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProcessCanopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5335)
inline void IHoleDisposal::PutProcessCanopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ProcessCanopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5336)
inline IVector3DPtr IHoleDisposal::GetVector ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(5337)
inline IModelObjectPtr IHoleDisposal::GetDirectionObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirectionObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5338)
inline void IHoleDisposal::PutDirectionObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DirectionObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVertex wrapper method implementations
//

#pragma implementation_key(5339)
inline VARIANT_BOOL IVertex::GetPoint ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5340)
inline VARIANT_BOOL IVertex::GetIsFreeVertex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFreeVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5341)
inline VARIANT_BOOL IVertex::GetIsTopologyVertex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTopologyVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5342)
inline VARIANT_BOOL IVertex::GetIsSketchVertex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSketchVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFace wrapper method implementations
//

#pragma implementation_key(5343)
inline enum ksMathSurface3DTypeEnum IFace::GetSurface3DType ( ) {
    enum ksMathSurface3DTypeEnum _result;
    HRESULT _hr = get_Surface3DType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5344)
inline enum ksMathSurface3DTypeEnum IFace::GetBaseSurface3DType ( ) {
    enum ksMathSurface3DTypeEnum _result;
    HRESULT _hr = get_BaseSurface3DType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5345)
inline IMathSurface3DPtr IFace::GetMathSurface ( ) {
    struct IMathSurface3D * _result = 0;
    HRESULT _hr = get_MathSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathSurface3DPtr(_result, false);
}

#pragma implementation_key(5346)
inline VARIANT_BOOL IFace::GetNormalOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NormalOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5347)
inline _variant_t IFace::GetLoops ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Loops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5348)
inline _variant_t IFace::GetConnectedFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ConnectedFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5349)
inline _variant_t IFace::GetLimitingEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LimitingEdges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5350)
inline VARIANT_BOOL IFace::IsConnectedWith ( struct IFace * OtherFace ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsConnectedWith(OtherFace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5351)
inline double IFace::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5352)
inline VARIANT_BOOL IFace::GetConeParam ( double * Height, double * Angle, double * Radius ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetConeParam(Height, Angle, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5353)
inline double IFace::GetArea ( enum ksLengthUnitsEnum Unit ) {
    double _result = 0;
    HRESULT _hr = raw_GetArea(Unit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5354)
inline ITessellation7Ptr IFace::GetTessellation ( ) {
    struct ITessellation7 * _result = 0;
    HRESULT _hr = get_Tessellation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITessellation7Ptr(_result, false);
}

#pragma implementation_key(5355)
inline double IFace::GetAreaEx ( enum ksLengthUnitsEnum Unit, double AngleTolerance ) {
    double _result = 0;
    HRESULT _hr = raw_GetAreaEx(Unit, AngleTolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEdge wrapper method implementations
//

#pragma implementation_key(5356)
inline enum ksMathCurve3DTypeEnum IEdge::GetCurve3DType ( ) {
    enum ksMathCurve3DTypeEnum _result;
    HRESULT _hr = get_Curve3DType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5357)
inline enum ksMathCurve3DTypeEnum IEdge::GetBaseCurve3DType ( ) {
    enum ksMathCurve3DTypeEnum _result;
    HRESULT _hr = get_BaseCurve3DType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5358)
inline IMathCurve3DPtr IEdge::GetMathCurve ( ) {
    struct IMathCurve3D * _result = 0;
    HRESULT _hr = get_MathCurve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMathCurve3DPtr(_result, false);
}

#pragma implementation_key(5359)
inline VARIANT_BOOL IEdge::GetIsPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPeriodic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5360)
inline VARIANT_BOOL IEdge::GetIsStraight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStraight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5361)
inline IFacePtr IEdge::GetAdjacentFace ( VARIANT_BOOL FacePlus ) {
    struct IFace * _result = 0;
    HRESULT _hr = get_AdjacentFace(FacePlus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFacePtr(_result, false);
}

#pragma implementation_key(5362)
inline IVertexPtr IEdge::GetVertex ( VARIANT_BOOL Start ) {
    struct IVertex * _result = 0;
    HRESULT _hr = get_Vertex(Start, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVertexPtr(_result, false);
}

#pragma implementation_key(5363)
inline VARIANT_BOOL IEdge::GetPoint ( VARIANT_BOOL Start, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Start, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5364)
inline _variant_t IEdge::GetEdges ( VARIANT_BOOL Start ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(Start, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5365)
inline _variant_t IEdge::GetOrientedEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OrientedEdges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5366)
inline double IEdge::GetLength ( enum ksLengthUnitsEnum BitVector ) {
    double _result = 0;
    HRESULT _hr = raw_GetLength(BitVector, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5367)
inline VARIANT_BOOL IEdge::GetIsSketchEdge ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSketchEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILoop7 wrapper method implementations
//

#pragma implementation_key(5368)
inline _variant_t ILoop7::GetOrientedEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OrientedEdges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5369)
inline _variant_t ILoop7::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5370)
inline VARIANT_BOOL ILoop7::GetIsOuter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOuter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5371)
inline double ILoop7::GetLength ( enum ksLengthUnitsEnum Unit ) {
    double _result = 0;
    HRESULT _hr = raw_GetLength(Unit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IOrientedEdge7 wrapper method implementations
//

#pragma implementation_key(5372)
inline VARIANT_BOOL IOrientedEdge7::GetOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5373)
inline VARIANT_BOOL IOrientedEdge7::GetSameSense ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SameSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5374)
inline IModelObjectPtr IOrientedEdge7::GetEdge ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Edge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5375)
inline IOrientedEdge7Ptr IOrientedEdge7::GetNext ( ) {
    struct IOrientedEdge7 * _result = 0;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOrientedEdge7Ptr(_result, false);
}

#pragma implementation_key(5376)
inline IFacePtr IOrientedEdge7::GetAdjacentFace ( VARIANT_BOOL FacePlus ) {
    struct IFace * _result = 0;
    HRESULT _hr = get_AdjacentFace(FacePlus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFacePtr(_result, false);
}

#pragma implementation_key(5377)
inline VARIANT_BOOL IOrientedEdge7::GetIsStraight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStraight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5378)
inline VARIANT_BOOL IOrientedEdge7::GetIsSeam ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSeam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5379)
inline VARIANT_BOOL IOrientedEdge7::GetIsPole ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPole(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDistanceAngleMeasurement3D wrapper method implementations
//

#pragma implementation_key(5380)
inline IModelObjectPtr IDistanceAngleMeasurement3D::GetObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5381)
inline void IDistanceAngleMeasurement3D::PutObject1 ( struct IModelObject * Result ) {
    HRESULT _hr = put_Object1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5382)
inline IModelObjectPtr IDistanceAngleMeasurement3D::GetObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5383)
inline void IDistanceAngleMeasurement3D::PutObject2 ( struct IModelObject * Result ) {
    HRESULT _hr = put_Object2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5384)
inline VARIANT_BOOL IDistanceAngleMeasurement3D::GetBriefly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Briefly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5385)
inline void IDistanceAngleMeasurement3D::PutBriefly ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Briefly(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5386)
inline enum ksMeasureResultEnum IDistanceAngleMeasurement3D::GetMeasureResult ( ) {
    enum ksMeasureResultEnum _result;
    HRESULT _hr = get_MeasureResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5387)
inline double IDistanceAngleMeasurement3D::GetLmin ( ) {
    double _result = 0;
    HRESULT _hr = get_Lmin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5388)
inline double IDistanceAngleMeasurement3D::GetLmax ( ) {
    double _result = 0;
    HRESULT _hr = get_Lmax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5389)
inline double IDistanceAngleMeasurement3D::GetLNormal ( ) {
    double _result = 0;
    HRESULT _hr = get_LNormal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5390)
inline VARIANT_BOOL IDistanceAngleMeasurement3D::GetIsAngleValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAngleValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5391)
inline double IDistanceAngleMeasurement3D::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5392)
inline VARIANT_BOOL IDistanceAngleMeasurement3D::GetMinPoint1 ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetMinPoint1(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5393)
inline VARIANT_BOOL IDistanceAngleMeasurement3D::GetMinPoint2 ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetMinPoint2(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5394)
inline VARIANT_BOOL IDistanceAngleMeasurement3D::GetMaxPoint1 ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetMaxPoint1(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5395)
inline VARIANT_BOOL IDistanceAngleMeasurement3D::GetMaxPoint2 ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetMaxPoint2(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5396)
inline VARIANT_BOOL IDistanceAngleMeasurement3D::GetNormalPoint1 ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNormalPoint1(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5397)
inline VARIANT_BOOL IDistanceAngleMeasurement3D::GetNormalPoint2 ( double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNormalPoint2(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDistanceAngleMeasurements3D wrapper method implementations
//

#pragma implementation_key(5398)
inline IDistanceAngleMeasurement3DPtr IDistanceAngleMeasurements3D::GetDistanceAngleMeasurement3D ( const _variant_t & Index ) {
    struct IDistanceAngleMeasurement3D * _result = 0;
    HRESULT _hr = get_DistanceAngleMeasurement3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDistanceAngleMeasurement3DPtr(_result, false);
}

#pragma implementation_key(5399)
inline IDistanceAngleMeasurement3DPtr IDistanceAngleMeasurements3D::Add ( ) {
    struct IDistanceAngleMeasurement3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDistanceAngleMeasurement3DPtr(_result, false);
}

//
// interface IEdgeLengthMeasurement3D wrapper method implementations
//

#pragma implementation_key(5400)
inline _variant_t IEdgeLengthMeasurement3D::GetEdges ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5401)
inline void IEdgeLengthMeasurement3D::PutEdges ( const _variant_t & Result ) {
    HRESULT _hr = put_Edges(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5402)
inline _variant_t IEdgeLengthMeasurement3D::GetLengths ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lengths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5403)
inline double IEdgeLengthMeasurement3D::GetSum ( ) {
    double _result = 0;
    HRESULT _hr = get_Sum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEdgeLengthMeasurements3D wrapper method implementations
//

#pragma implementation_key(5404)
inline IEdgeLengthMeasurement3DPtr IEdgeLengthMeasurements3D::GetEdgeLengthMeasurement3D ( const _variant_t & Index ) {
    struct IEdgeLengthMeasurement3D * _result = 0;
    HRESULT _hr = get_EdgeLengthMeasurement3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEdgeLengthMeasurement3DPtr(_result, false);
}

#pragma implementation_key(5405)
inline IEdgeLengthMeasurement3DPtr IEdgeLengthMeasurements3D::Add ( ) {
    struct IEdgeLengthMeasurement3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEdgeLengthMeasurement3DPtr(_result, false);
}

//
// interface IAreaMeasurement3D wrapper method implementations
//

#pragma implementation_key(5406)
inline _variant_t IAreaMeasurement3D::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5407)
inline void IAreaMeasurement3D::PutFaces ( const _variant_t & Result ) {
    HRESULT _hr = put_Faces(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5408)
inline _variant_t IAreaMeasurement3D::GetAreas ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Areas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5409)
inline double IAreaMeasurement3D::GetSum ( ) {
    double _result = 0;
    HRESULT _hr = get_Sum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAreaMeasurements3D wrapper method implementations
//

#pragma implementation_key(5410)
inline IAreaMeasurement3DPtr IAreaMeasurements3D::GetAreaMeasurement3D ( const _variant_t & Index ) {
    struct IAreaMeasurement3D * _result = 0;
    HRESULT _hr = get_AreaMeasurement3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaMeasurement3DPtr(_result, false);
}

#pragma implementation_key(5411)
inline IAreaMeasurement3DPtr IAreaMeasurements3D::Add ( ) {
    struct IAreaMeasurement3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaMeasurement3DPtr(_result, false);
}

//
// interface IMeasurementContainer wrapper method implementations
//

#pragma implementation_key(5412)
inline IDistanceAngleMeasurements3DPtr IMeasurementContainer::GetDistanceAngleMeasurements3D ( ) {
    struct IDistanceAngleMeasurements3D * _result = 0;
    HRESULT _hr = get_DistanceAngleMeasurements3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDistanceAngleMeasurements3DPtr(_result, false);
}

#pragma implementation_key(5413)
inline IEdgeLengthMeasurements3DPtr IMeasurementContainer::GetEdgeLengthMeasurements3D ( ) {
    struct IEdgeLengthMeasurements3D * _result = 0;
    HRESULT _hr = get_EdgeLengthMeasurements3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEdgeLengthMeasurements3DPtr(_result, false);
}

#pragma implementation_key(5414)
inline IAreaMeasurements3DPtr IMeasurementContainer::GetAreaMeasurements3D ( ) {
    struct IAreaMeasurements3D * _result = 0;
    HRESULT _hr = get_AreaMeasurements3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaMeasurements3DPtr(_result, false);
}

//
// interface IUserDesignationCompObj wrapper method implementations
//

#pragma implementation_key(5415)
inline VARIANT_BOOL IUserDesignationCompObj::SetObjects ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetObjects(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILibraryHoleParameters wrapper method implementations
//

#pragma implementation_key(5416)
inline _bstr_t ILibraryHoleParameters::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5417)
inline void ILibraryHoleParameters::PutFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_FileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5418)
inline _variant_t ILibraryHoleParameters::GetVariables ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Variables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5419)
inline IVariable7Ptr ILibraryHoleParameters::GetVariable ( const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_Variable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(5420)
inline long ILibraryHoleParameters::GetVariablesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VariablesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IZoneParametersByObjects wrapper method implementations
//

#pragma implementation_key(5421)
inline _variant_t IZoneParametersByObjects::GetBaseObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5422)
inline void IZoneParametersByObjects::PutBaseObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_BaseObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IZoneDivisionParametersRegular wrapper method implementations
//

#pragma implementation_key(5423)
inline long IZoneDivisionParametersRegular::GetXCount ( ) {
    long _result = 0;
    HRESULT _hr = get_XCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5424)
inline void IZoneDivisionParametersRegular::PutXCount ( long PVal ) {
    HRESULT _hr = put_XCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5425)
inline long IZoneDivisionParametersRegular::GetYCount ( ) {
    long _result = 0;
    HRESULT _hr = get_YCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5426)
inline void IZoneDivisionParametersRegular::PutYCount ( long PVal ) {
    HRESULT _hr = put_YCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5427)
inline long IZoneDivisionParametersRegular::GetZCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ZCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5428)
inline void IZoneDivisionParametersRegular::PutZCount ( long PVal ) {
    HRESULT _hr = put_ZCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IZoneDivisionParametersByPlanes wrapper method implementations
//

#pragma implementation_key(5429)
inline _variant_t IZoneDivisionParametersByPlanes::GetPlanes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Planes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5430)
inline void IZoneDivisionParametersByPlanes::PutPlanes ( const _variant_t & Result ) {
    HRESULT _hr = put_Planes(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDynamicCrossSectionStep wrapper method implementations
//

#pragma implementation_key(5431)
inline enum ksDynamicCrossSectionStepBuildingTypeEnum IDynamicCrossSectionStep::GetBuildingType ( ) {
    enum ksDynamicCrossSectionStepBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5432)
inline void IDynamicCrossSectionStep::PutBuildingType ( enum ksDynamicCrossSectionStepBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5433)
inline IKompasAPIObjectPtr IDynamicCrossSectionStep::GetParameters ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(5434)
inline VARIANT_BOOL IDynamicCrossSectionStep::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDynamicCrossSection wrapper method implementations
//

#pragma implementation_key(5435)
inline VARIANT_BOOL IDynamicCrossSection::GetFillCutPlanes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillCutPlanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5436)
inline void IDynamicCrossSection::PutFillCutPlanes ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_FillCutPlanes(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5437)
inline long IDynamicCrossSection::GetStepsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_StepsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5438)
inline IDynamicCrossSectionStepPtr IDynamicCrossSection::AddStep ( enum ksDynamicCrossSectionStepBuildingTypeEnum BuildingType ) {
    struct IDynamicCrossSectionStep * _result = 0;
    HRESULT _hr = raw_AddStep(BuildingType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDynamicCrossSectionStepPtr(_result, false);
}

#pragma implementation_key(5439)
inline IDynamicCrossSectionStepPtr IDynamicCrossSection::GetStep ( long Index ) {
    struct IDynamicCrossSectionStep * _result = 0;
    HRESULT _hr = get_Step(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDynamicCrossSectionStepPtr(_result, false);
}

#pragma implementation_key(5440)
inline VARIANT_BOOL IDynamicCrossSection::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDynamicCrossSectionsManager wrapper method implementations
//

#pragma implementation_key(5441)
inline long IDynamicCrossSectionsManager::GetDynamicCrossSectionsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DynamicCrossSectionsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5442)
inline IDynamicCrossSectionPtr IDynamicCrossSectionsManager::GetDynamicCrossSection ( const _variant_t & Index ) {
    struct IDynamicCrossSection * _result = 0;
    HRESULT _hr = get_DynamicCrossSection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDynamicCrossSectionPtr(_result, false);
}

#pragma implementation_key(5443)
inline IDynamicCrossSectionPtr IDynamicCrossSectionsManager::AddDynamicCrossSection ( ) {
    struct IDynamicCrossSection * _result = 0;
    HRESULT _hr = raw_AddDynamicCrossSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDynamicCrossSectionPtr(_result, false);
}

#pragma implementation_key(5444)
inline IDynamicCrossSectionPtr IDynamicCrossSectionsManager::GetCurrentDynamicCrossSection ( ) {
    struct IDynamicCrossSection * _result = 0;
    HRESULT _hr = get_CurrentDynamicCrossSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDynamicCrossSectionPtr(_result, false);
}

#pragma implementation_key(5445)
inline void IDynamicCrossSectionsManager::PutCurrentDynamicCrossSection ( struct IDynamicCrossSection * Result ) {
    HRESULT _hr = put_CurrentDynamicCrossSection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5446)
inline VARIANT_BOOL IDynamicCrossSectionsManager::GetDynamicCrossSectionModeOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DynamicCrossSectionModeOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5447)
inline void IDynamicCrossSectionsManager::PutDynamicCrossSectionModeOn ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_DynamicCrossSectionModeOn(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDynamicCrossSectionStepParametersByFreePlane wrapper method implementations
//

#pragma implementation_key(5448)
inline ILocalCoordinateSystemPtr IDynamicCrossSectionStepParametersByFreePlane::GetLocalCoordinateSystem ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_LocalCoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(5449)
inline VARIANT_BOOL IDynamicCrossSectionStepParametersByFreePlane::ReverseDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReverseDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDynamicCrossSectionStepParametersByOffsetPlane wrapper method implementations
//

#pragma implementation_key(5450)
inline IPlane3DByOffsetPtr IDynamicCrossSectionStepParametersByOffsetPlane::GetOffsetPlane ( ) {
    struct IPlane3DByOffset * _result = 0;
    HRESULT _hr = get_OffsetPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlane3DByOffsetPtr(_result, false);
}

#pragma implementation_key(5451)
inline enum ksCrossSectionPlaneBuildingTypeEnum IDynamicCrossSectionStepParametersByOffsetPlane::GetPlaneBuildingType ( ) {
    enum ksCrossSectionPlaneBuildingTypeEnum _result;
    HRESULT _hr = get_PlaneBuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5452)
inline void IDynamicCrossSectionStepParametersByOffsetPlane::PutPlaneBuildingType ( enum ksCrossSectionPlaneBuildingTypeEnum PVal ) {
    HRESULT _hr = put_PlaneBuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5453)
inline IDynamicCrossSectionStepPtr IDynamicCrossSectionStepParametersByOffsetPlane::GetBaseStep ( ) {
    struct IDynamicCrossSectionStep * _result = 0;
    HRESULT _hr = get_BaseStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDynamicCrossSectionStepPtr(_result, false);
}

#pragma implementation_key(5454)
inline void IDynamicCrossSectionStepParametersByOffsetPlane::PutBaseStep ( struct IDynamicCrossSectionStep * PVal ) {
    HRESULT _hr = put_BaseStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5455)
inline VARIANT_BOOL IDynamicCrossSectionStepParametersByOffsetPlane::ReverseDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReverseDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDynamicCrossSectionStepParametersByRotatedPlane wrapper method implementations
//

#pragma implementation_key(5456)
inline IPlane3DByAnglePtr IDynamicCrossSectionStepParametersByRotatedPlane::GetPlane ( ) {
    struct IPlane3DByAngle * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlane3DByAnglePtr(_result, false);
}

#pragma implementation_key(5457)
inline enum ksCrossSectionPlaneBuildingTypeEnum IDynamicCrossSectionStepParametersByRotatedPlane::GetPlaneBuildingType ( ) {
    enum ksCrossSectionPlaneBuildingTypeEnum _result;
    HRESULT _hr = get_PlaneBuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5458)
inline void IDynamicCrossSectionStepParametersByRotatedPlane::PutPlaneBuildingType ( enum ksCrossSectionPlaneBuildingTypeEnum PVal ) {
    HRESULT _hr = put_PlaneBuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5459)
inline IDynamicCrossSectionStepPtr IDynamicCrossSectionStepParametersByRotatedPlane::GetBaseStep ( ) {
    struct IDynamicCrossSectionStep * _result = 0;
    HRESULT _hr = get_BaseStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDynamicCrossSectionStepPtr(_result, false);
}

#pragma implementation_key(5460)
inline void IDynamicCrossSectionStepParametersByRotatedPlane::PutBaseStep ( struct IDynamicCrossSectionStep * PVal ) {
    HRESULT _hr = put_BaseStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5461)
inline VARIANT_BOOL IDynamicCrossSectionStepParametersByRotatedPlane::ReverseDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReverseDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDynamicCrossSectionStepParametersByZone wrapper method implementations
//

#pragma implementation_key(5462)
inline IZonePtr IDynamicCrossSectionStepParametersByZone::GetZone ( ) {
    struct IZone * _result = 0;
    HRESULT _hr = get_Zone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZonePtr(_result, false);
}

#pragma implementation_key(5463)
inline void IDynamicCrossSectionStepParametersByZone::PutZone ( struct IZone * PVal ) {
    HRESULT _hr = put_Zone(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxisLine3D wrapper method implementations
//

#pragma implementation_key(5464)
inline IModelObjectPtr IAxisLine3D::GetObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5465)
inline void IAxisLine3D::PutObject1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Object1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5466)
inline IModelObjectPtr IAxisLine3D::GetObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Object2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5467)
inline void IAxisLine3D::PutObject2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_Object2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDismantleStep wrapper method implementations
//

#pragma implementation_key(5468)
inline _variant_t IDismantleStep::GetParts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5469)
inline void IDismantleStep::PutParts ( const _variant_t & Result ) {
    HRESULT _hr = put_Parts(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5470)
inline double IDismantleStep::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5471)
inline void IDismantleStep::PutDistance ( double Result ) {
    HRESULT _hr = put_Distance(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5472)
inline IVector3DPtr IDismantleStep::GetVector ( ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(5473)
inline IModelObjectPtr IDismantleStep::GetDirectionObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirectionObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(5474)
inline void IDismantleStep::PutDirectionObject ( struct IModelObject * Result ) {
    HRESULT _hr = put_DirectionObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5475)
inline long IDismantleStep::Update ( ) {
    long _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDismantleParameters wrapper method implementations
//

#pragma implementation_key(5476)
inline long IDismantleParameters::GetDismantleStepsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DismantleStepsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5477)
inline IDismantleStepPtr IDismantleParameters::GetDismantleStep ( long Index ) {
    struct IDismantleStep * _result = 0;
    HRESULT _hr = get_DismantleStep(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDismantleStepPtr(_result, false);
}

#pragma implementation_key(5478)
inline IDismantleStepPtr IDismantleParameters::AddDismantleStep ( ) {
    struct IDismantleStep * _result = 0;
    HRESULT _hr = raw_AddDismantleStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDismantleStepPtr(_result, false);
}

#pragma implementation_key(5479)
inline VARIANT_BOOL IDismantleParameters::ClearDismantleParameters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearDismantleParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5480)
inline VARIANT_BOOL IDismantleParameters::DeleteDismantleStep ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteDismantleStep(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDrawingText wrapper method implementations
//

#pragma implementation_key(5481)
inline double IDrawingText::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5482)
inline void IDrawingText::PutX ( double Result ) {
    HRESULT _hr = put_X(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5483)
inline double IDrawingText::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5484)
inline void IDrawingText::PutY ( double Result ) {
    HRESULT _hr = put_Y(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5485)
inline void IDrawingText::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5486)
inline double IDrawingText::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5487)
inline double IDrawingText::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5488)
inline void IDrawingText::PutHeight ( double Result ) {
    HRESULT _hr = put_Height(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5489)
inline double IDrawingText::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5490)
inline void IDrawingText::PutWidth ( double Result ) {
    HRESULT _hr = put_Width(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5491)
inline enum ksTextHorizontalFormatEnum IDrawingText::GetHFormat ( ) {
    enum ksTextHorizontalFormatEnum _result;
    HRESULT _hr = get_HFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5492)
inline void IDrawingText::PutHFormat ( enum ksTextHorizontalFormatEnum Result ) {
    HRESULT _hr = put_HFormat(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5493)
inline VARIANT_BOOL IDrawingText::GetVFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5494)
inline void IDrawingText::PutVFormat ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_VFormat(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5495)
inline enum ksAllocationEnum IDrawingText::GetAllocation ( ) {
    enum ksAllocationEnum _result;
    HRESULT _hr = get_Allocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5496)
inline void IDrawingText::PutAllocation ( enum ksAllocationEnum Result ) {
    HRESULT _hr = put_Allocation(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5497)
inline VARIANT_BOOL IDrawingText::GetMirrorSymmetry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MirrorSymmetry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5498)
inline void IDrawingText::PutMirrorSymmetry ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_MirrorSymmetry(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5499)
inline VARIANT_BOOL IDrawingText::GetIsTextMark ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTextMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDrawingTexts wrapper method implementations
//

#pragma implementation_key(5500)
inline IDrawingTextPtr IDrawingTexts::GetDrawingText ( const _variant_t & Index ) {
    struct IDrawingText * _result = 0;
    HRESULT _hr = get_DrawingText(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTextPtr(_result, false);
}

#pragma implementation_key(5501)
inline IDrawingTextPtr IDrawingTexts::Add ( ) {
    struct IDrawingText * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTextPtr(_result, false);
}

#pragma implementation_key(5502)
inline IDrawingTextPtr IDrawingTexts::AddTextMark ( struct IDrawingObject * Object ) {
    struct IDrawingText * _result = 0;
    HRESULT _hr = raw_AddTextMark(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTextPtr(_result, false);
}

#pragma implementation_key(5503)
inline IDrawingTextPtr IDrawingTexts::FindTextMark ( struct IDrawingObject * Object ) {
    struct IDrawingText * _result = 0;
    HRESULT _hr = raw_FindTextMark(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTextPtr(_result, false);
}

#pragma implementation_key(5504)
inline IDrawingObjectPtr IDrawingTexts::FindTextMarkObject ( struct IDrawingText * Mark ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = raw_FindTextMarkObject(Mark, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(5505)
inline VARIANT_BOOL IDrawingTexts::DeleteTextMark ( struct IDrawingObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteTextMark(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILineSegment wrapper method implementations
//

#pragma implementation_key(5506)
inline void ILineSegment::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5507)
inline double ILineSegment::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5508)
inline void ILineSegment::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5509)
inline double ILineSegment::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5510)
inline void ILineSegment::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5511)
inline double ILineSegment::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5512)
inline void ILineSegment::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5513)
inline double ILineSegment::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5514)
inline void ILineSegment::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5515)
inline double ILineSegment::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5516)
inline void ILineSegment::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5517)
inline double ILineSegment::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5518)
inline long ILineSegment::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5519)
inline void ILineSegment::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILineSegments wrapper method implementations
//

#pragma implementation_key(5520)
inline ILineSegmentPtr ILineSegments::GetLineSegment ( const _variant_t & Index ) {
    struct ILineSegment * _result = 0;
    HRESULT _hr = get_LineSegment(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineSegmentPtr(_result, false);
}

#pragma implementation_key(5521)
inline ILineSegmentPtr ILineSegments::Add ( ) {
    struct ILineSegment * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineSegmentPtr(_result, false);
}

//
// interface IArc wrapper method implementations
//

#pragma implementation_key(5522)
inline void IArc::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5523)
inline double IArc::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5524)
inline void IArc::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5525)
inline VARIANT_BOOL IArc::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5526)
inline void IArc::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5527)
inline double IArc::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5528)
inline void IArc::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5529)
inline double IArc::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5530)
inline void IArc::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5531)
inline double IArc::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5532)
inline void IArc::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5533)
inline double IArc::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5534)
inline void IArc::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5535)
inline double IArc::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5536)
inline void IArc::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5537)
inline double IArc::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5538)
inline void IArc::PutX3 ( double PVal ) {
    HRESULT _hr = put_X3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5539)
inline double IArc::GetX3 ( ) {
    double _result = 0;
    HRESULT _hr = get_X3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5540)
inline void IArc::PutY3 ( double PVal ) {
    HRESULT _hr = put_Y3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5541)
inline double IArc::GetY3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5542)
inline void IArc::PutAngle1 ( double PVal ) {
    HRESULT _hr = put_Angle1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5543)
inline double IArc::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5544)
inline void IArc::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5545)
inline double IArc::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5546)
inline long IArc::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5547)
inline void IArc::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IArcs wrapper method implementations
//

#pragma implementation_key(5548)
inline IArcPtr IArcs::GetArc ( const _variant_t & Index ) {
    struct IArc * _result = 0;
    HRESULT _hr = get_Arc(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcPtr(_result, false);
}

#pragma implementation_key(5549)
inline IArcPtr IArcs::Add ( ) {
    struct IArc * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcPtr(_result, false);
}

//
// interface IContour wrapper method implementations
//

#pragma implementation_key(5550)
inline void IContour::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5551)
inline VARIANT_BOOL IContour::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5552)
inline IKompasAPIObjectPtr IContour::AddSegment ( enum ksContourSegmentEnum Type ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = raw_AddSegment(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(5553)
inline IKompasAPIObjectPtr IContour::GetSegment ( long Index ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Segment(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(5554)
inline VARIANT_BOOL IContour::CopyCurve ( struct IDrawingObject * Curve, VARIANT_BOOL DeleteSource ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CopyCurve(Curve, DeleteSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5555)
inline long IContour::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5556)
inline _variant_t IContour::GetTmpObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TmpObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5557)
inline VARIANT_BOOL IContour::CopySegments ( const _variant_t & Val, VARIANT_BOOL DeleteSource ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CopySegments(Val, DeleteSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5558)
inline VARIANT_BOOL IContour::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5559)
inline VARIANT_BOOL IContour::RemoveContourGaps ( double Accuracy, VARIANT_BOOL CanInsert, VARIANT_BOOL CanReplace ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveContourGaps(Accuracy, CanInsert, CanReplace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMultiline wrapper method implementations
//

#pragma implementation_key(5560)
inline void IMultiline::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5561)
inline VARIANT_BOOL IMultiline::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5562)
inline IContourPtr IMultiline::GetBaseContour ( ) {
    struct IContour * _result = 0;
    HRESULT _hr = get_BaseContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContourPtr(_result, false);
}

#pragma implementation_key(5563)
inline enum ksMlVertexTrackingEnum IMultiline::GetTrackingType ( long VertexIndex ) {
    enum ksMlVertexTrackingEnum _result;
    HRESULT _hr = get_TrackingType(VertexIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5564)
inline void IMultiline::PutTrackingType ( long VertexIndex, enum ksMlVertexTrackingEnum Val ) {
    HRESULT _hr = put_TrackingType(VertexIndex, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5565)
inline enum ksMlVertexLimiterEnum IMultiline::GetVertexLimiter ( long VertexIndex ) {
    enum ksMlVertexLimiterEnum _result;
    HRESULT _hr = get_VertexLimiter(VertexIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5566)
inline void IMultiline::PutVertexLimiter ( long VertexIndex, enum ksMlVertexLimiterEnum PVal ) {
    HRESULT _hr = put_VertexLimiter(VertexIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5567)
inline VARIANT_BOOL IMultiline::GetVertexDirection ( long VertexIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VertexDirection(VertexIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5568)
inline void IMultiline::PutVertexDirection ( long VertexIndex, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_VertexDirection(VertexIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5569)
inline void IMultiline::PutVertexRadius ( long VertexIndex, double PVal ) {
    HRESULT _hr = put_VertexRadius(VertexIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5570)
inline double IMultiline::GetVertexRadius ( long VertexIndex ) {
    double _result = 0;
    HRESULT _hr = get_VertexRadius(VertexIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5571)
inline long IMultiline::GetVertexStyle ( long VertexIndex ) {
    long _result = 0;
    HRESULT _hr = get_VertexStyle(VertexIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5572)
inline void IMultiline::PutVertexStyle ( long VertexIndex, long Result ) {
    HRESULT _hr = put_VertexStyle(VertexIndex, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5573)
inline long IMultiline::GetVertexCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VertexCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5574)
inline enum ksMlEndLimiterEnum IMultiline::GetEndLimiter ( VARIANT_BOOL First ) {
    enum ksMlEndLimiterEnum _result;
    HRESULT _hr = get_EndLimiter(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5575)
inline void IMultiline::PutEndLimiter ( VARIANT_BOOL First, enum ksMlEndLimiterEnum PVal ) {
    HRESULT _hr = put_EndLimiter(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5576)
inline void IMultiline::PutEndParameter ( VARIANT_BOOL First, double PVal ) {
    HRESULT _hr = put_EndParameter(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5577)
inline double IMultiline::GetEndParameter ( VARIANT_BOOL First ) {
    double _result = 0;
    HRESULT _hr = get_EndParameter(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5578)
inline long IMultiline::GetEndStyle ( VARIANT_BOOL First ) {
    long _result = 0;
    HRESULT _hr = get_EndStyle(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5579)
inline void IMultiline::PutEndStyle ( VARIANT_BOOL First, long Result ) {
    HRESULT _hr = put_EndStyle(First, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5580)
inline VARIANT_BOOL IMultiline::AddLine ( double Offset, long Style ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddLine(Offset, Style, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5581)
inline VARIANT_BOOL IMultiline::DeleteLine ( long LineIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteLine(LineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5582)
inline long IMultiline::GetLineCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LineCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5583)
inline void IMultiline::PutLineOffset ( long LineIndex, double PVal ) {
    HRESULT _hr = put_LineOffset(LineIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5584)
inline double IMultiline::GetLineOffset ( long LineIndex ) {
    double _result = 0;
    HRESULT _hr = get_LineOffset(LineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5585)
inline long IMultiline::GetLineStyle ( long LineIndex ) {
    long _result = 0;
    HRESULT _hr = get_LineStyle(LineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5586)
inline void IMultiline::PutLineStyle ( long LineIndex, long Result ) {
    HRESULT _hr = put_LineStyle(LineIndex, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5587)
inline long IMultiline::FindLine ( double Offset ) {
    long _result = 0;
    HRESULT _hr = raw_FindLine(Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5588)
inline _variant_t IMultiline::GetLineOffsets ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineOffsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IMultilines wrapper method implementations
//

#pragma implementation_key(5589)
inline IMultilinePtr IMultilines::GetMultiline ( const _variant_t & Index ) {
    struct IMultiline * _result = 0;
    HRESULT _hr = get_Multiline(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMultilinePtr(_result, false);
}

#pragma implementation_key(5590)
inline IMultilinePtr IMultilines::Add ( ) {
    struct IMultiline * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMultilinePtr(_result, false);
}

//
// interface IDrawingContour wrapper method implementations
//

#pragma implementation_key(5591)
inline long IDrawingContour::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5592)
inline void IDrawingContour::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDrawingContours wrapper method implementations
//

#pragma implementation_key(5593)
inline IDrawingContourPtr IDrawingContours::GetDrawingContour ( const _variant_t & Index ) {
    struct IDrawingContour * _result = 0;
    HRESULT _hr = get_DrawingContour(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingContourPtr(_result, false);
}

#pragma implementation_key(5594)
inline IDrawingContourPtr IDrawingContours::Add ( ) {
    struct IDrawingContour * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingContourPtr(_result, false);
}

#pragma implementation_key(5595)
inline _variant_t IDrawingContours::AddBooleanResultContours ( struct IDrawingObject * Contour1, struct IDrawingObject * Contour2, enum ksBooleanType BooleanType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddBooleanResultContours(Contour1, Contour2, BooleanType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ICircle wrapper method implementations
//

#pragma implementation_key(5596)
inline void ICircle::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5597)
inline double ICircle::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5598)
inline void ICircle::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5599)
inline double ICircle::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5600)
inline void ICircle::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5601)
inline double ICircle::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5602)
inline void ICircle::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5603)
inline double ICircle::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5604)
inline void ICircle::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5605)
inline double ICircle::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5606)
inline long ICircle::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5607)
inline void ICircle::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICircles wrapper method implementations
//

#pragma implementation_key(5608)
inline ICirclePtr ICircles::GetCircle ( const _variant_t & Index ) {
    struct ICircle * _result = 0;
    HRESULT _hr = get_Circle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICirclePtr(_result, false);
}

#pragma implementation_key(5609)
inline ICirclePtr ICircles::Add ( ) {
    struct ICircle * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICirclePtr(_result, false);
}

//
// interface IPoint wrapper method implementations
//

#pragma implementation_key(5610)
inline void IPoint::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5611)
inline double IPoint::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5612)
inline void IPoint::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5613)
inline double IPoint::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5614)
inline void IPoint::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5615)
inline double IPoint::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5616)
inline long IPoint::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5617)
inline void IPoint::PutStyle ( long PVal ) {
    HRESULT _hr = put_Style(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPoints wrapper method implementations
//

#pragma implementation_key(5618)
inline IPointPtr IPoints::GetPoint ( const _variant_t & Index ) {
    struct IPoint * _result = 0;
    HRESULT _hr = get_Point(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointPtr(_result, false);
}

#pragma implementation_key(5619)
inline IPointPtr IPoints::Add ( ) {
    struct IPoint * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointPtr(_result, false);
}

//
// interface IBezier wrapper method implementations
//

#pragma implementation_key(5620)
inline void IBezier::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5621)
inline VARIANT_BOOL IBezier::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5622)
inline long IBezier::GetPointsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PointsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5623)
inline void IBezier::PutPoints ( VARIANT_BOOL AllPoints, const _variant_t & Points ) {
    HRESULT _hr = put_Points(AllPoints, Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5624)
inline _variant_t IBezier::GetPoints ( VARIANT_BOOL AllPoints ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(AllPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5625)
inline VARIANT_BOOL IBezier::AddPoint ( long Index, double XBase, double YBase, double * XLeft, double * YLeft, double * XRight, double * YRight ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPoint(Index, XBase, YBase, XLeft, YLeft, XRight, YRight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5626)
inline VARIANT_BOOL IBezier::GetPoint ( long Index, double * XBase, double * YBase, double * XLeft, double * YLeft, double * XRight, double * YRight ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Index, XBase, YBase, XLeft, YLeft, XRight, YRight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5627)
inline VARIANT_BOOL IBezier::DeletePoint ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePoint(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5628)
inline VARIANT_BOOL IBezier::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5629)
inline long IBezier::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5630)
inline void IBezier::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5631)
inline VARIANT_BOOL IBezier::ReadFromFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5632)
inline VARIANT_BOOL IBezier::WriteToFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteToFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBeziers wrapper method implementations
//

#pragma implementation_key(5633)
inline IBezierPtr IBeziers::GetBezier ( const _variant_t & Index ) {
    struct IBezier * _result = 0;
    HRESULT _hr = get_Bezier(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBezierPtr(_result, false);
}

#pragma implementation_key(5634)
inline IBezierPtr IBeziers::Add ( ) {
    struct IBezier * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBezierPtr(_result, false);
}

//
// interface IMacroObjects wrapper method implementations
//

#pragma implementation_key(5635)
inline IMacroObjectPtr IMacroObjects::GetMacroObject ( const _variant_t & Index ) {
    struct IMacroObject * _result = 0;
    HRESULT _hr = get_MacroObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMacroObjectPtr(_result, false);
}

#pragma implementation_key(5636)
inline IMacroObjectPtr IMacroObjects::Add ( VARIANT_BOOL MultiLayer ) {
    struct IMacroObject * _result = 0;
    HRESULT _hr = raw_Add(MultiLayer, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMacroObjectPtr(_result, false);
}

//
// interface ILine wrapper method implementations
//

#pragma implementation_key(5637)
inline void ILine::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5638)
inline double ILine::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5639)
inline void ILine::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5640)
inline double ILine::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5641)
inline void ILine::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5642)
inline double ILine::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5643)
inline void ILine::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5644)
inline double ILine::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5645)
inline void ILine::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5646)
inline double ILine::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILines wrapper method implementations
//

#pragma implementation_key(5647)
inline ILinePtr ILines::GetLine ( const _variant_t & Index ) {
    struct ILine * _result = 0;
    HRESULT _hr = get_Line(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILinePtr(_result, false);
}

#pragma implementation_key(5648)
inline ILinePtr ILines::Add ( ) {
    struct ILine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILinePtr(_result, false);
}

//
// interface IPolyLine2D wrapper method implementations
//

#pragma implementation_key(5649)
inline void IPolyLine2D::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5650)
inline VARIANT_BOOL IPolyLine2D::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5651)
inline long IPolyLine2D::GetPointsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PointsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5652)
inline void IPolyLine2D::PutPoints ( const _variant_t & Points ) {
    HRESULT _hr = put_Points(Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5653)
inline _variant_t IPolyLine2D::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5654)
inline VARIANT_BOOL IPolyLine2D::AddPoint ( long Index, double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPoint(Index, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5655)
inline VARIANT_BOOL IPolyLine2D::GetPoint ( long Index, double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Index, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5656)
inline VARIANT_BOOL IPolyLine2D::DeletePoint ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePoint(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5657)
inline VARIANT_BOOL IPolyLine2D::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5658)
inline long IPolyLine2D::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5659)
inline void IPolyLine2D::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5660)
inline VARIANT_BOOL IPolyLine2D::ReadFromFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5661)
inline VARIANT_BOOL IPolyLine2D::WriteToFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteToFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPolyLines2D wrapper method implementations
//

#pragma implementation_key(5662)
inline IPolyLine2DPtr IPolyLines2D::GetPolyLine2D ( const _variant_t & Index ) {
    struct IPolyLine2D * _result = 0;
    HRESULT _hr = get_PolyLine2D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolyLine2DPtr(_result, false);
}

#pragma implementation_key(5663)
inline IPolyLine2DPtr IPolyLines2D::Add ( ) {
    struct IPolyLine2D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolyLine2DPtr(_result, false);
}

//
// interface INurbs wrapper method implementations
//

#pragma implementation_key(5664)
inline void INurbs::PutClosed ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Closed(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5665)
inline VARIANT_BOOL INurbs::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5666)
inline void INurbs::PutDegree ( long Result ) {
    HRESULT _hr = put_Degree(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5667)
inline long INurbs::GetDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_Degree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5668)
inline VARIANT_BOOL INurbs::GetPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Periodic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5669)
inline long INurbs::GetPointsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PointsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5670)
inline VARIANT_BOOL INurbs::SetNurbsParams ( const _variant_t & Points, const _variant_t & Weight, const _variant_t & Knots, long Degree, VARIANT_BOOL Closed ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetNurbsParams(Points, Weight, Knots, Degree, Closed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5671)
inline VARIANT_BOOL INurbs::GetNurbsParams ( VARIANT * Points, VARIANT * Weight, VARIANT * Knots ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNurbsParams(Points, Weight, Knots, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5672)
inline VARIANT_BOOL INurbs::AddPoint ( long Index, double X, double Y, double Weight ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPoint(Index, X, Y, Weight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5673)
inline VARIANT_BOOL INurbs::GetPoint ( long Index, double * X, double * Y, double * Weight ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(Index, X, Y, Weight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5674)
inline VARIANT_BOOL INurbs::DeletePoint ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeletePoint(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5675)
inline VARIANT_BOOL INurbs::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5676)
inline long INurbs::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5677)
inline void INurbs::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5678)
inline VARIANT_BOOL INurbs::ReadFromFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReadFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5679)
inline VARIANT_BOOL INurbs::WriteToFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteToFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface INurbses wrapper method implementations
//

#pragma implementation_key(5680)
inline INurbsPtr INurbses::GetNurbs ( const _variant_t & Index ) {
    struct INurbs * _result = 0;
    HRESULT _hr = get_Nurbs(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsPtr(_result, false);
}

#pragma implementation_key(5681)
inline INurbsPtr INurbses::Add ( ) {
    struct INurbs * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsPtr(_result, false);
}

#pragma implementation_key(5682)
inline INurbsPtr INurbses::Convert ( struct IDrawingObject * Curve ) {
    struct INurbs * _result = 0;
    HRESULT _hr = raw_Convert(Curve, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsPtr(_result, false);
}

#pragma implementation_key(5683)
inline INurbsPtr INurbses::ConvertEx ( struct IDrawingObject * Curve, enum ksNurbsByPointsAproximationTypeEnum AproximationType, double Step ) {
    struct INurbs * _result = 0;
    HRESULT _hr = raw_ConvertEx(Curve, AproximationType, Step, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsPtr(_result, false);
}

//
// interface IRaster wrapper method implementations
//

#pragma implementation_key(5684)
inline VARIANT_BOOL IRaster::GetPlacement ( double * X, double * Y, double * Angle, VARIANT_BOOL * MirrorSymmetry ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPlacement(X, Y, Angle, MirrorSymmetry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5685)
inline VARIANT_BOOL IRaster::SetPlacement ( double X, double Y, double Angle, VARIANT_BOOL MirrorSymmetry ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPlacement(X, Y, Angle, MirrorSymmetry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5686)
inline void IRaster::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5687)
inline double IRaster::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5688)
inline void IRaster::PutFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_FileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5689)
inline _bstr_t IRaster::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5690)
inline void IRaster::PutInsertionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InsertionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5691)
inline VARIANT_BOOL IRaster::GetInsertionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InsertionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5692)
inline void IRaster::PutResolution ( double PVal ) {
    HRESULT _hr = put_Resolution(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5693)
inline double IRaster::GetResolution ( ) {
    double _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5694)
inline void IRaster::PutDisplayModePartial ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DisplayModePartial(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5695)
inline VARIANT_BOOL IRaster::GetDisplayModePartial ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayModePartial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5696)
inline double IRaster::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5697)
inline void IRaster::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5698)
inline double IRaster::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5699)
inline void IRaster::PutWidth ( double PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5700)
inline double IRaster::GetSourceHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_SourceHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5701)
inline double IRaster::GetSourceWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SourceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5702)
inline long IRaster::GetPalette ( ) {
    long _result = 0;
    HRESULT _hr = get_Palette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5703)
inline VARIANT_BOOL IRaster::GetIsEnableChangeResolution ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEnableChangeResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5704)
inline VARIANT_BOOL IRaster::GetIsCutBoundarySet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCutBoundarySet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRasters wrapper method implementations
//

#pragma implementation_key(5705)
inline IRasterPtr IRasters::GetRaster ( const _variant_t & Index ) {
    struct IRaster * _result = 0;
    HRESULT _hr = get_Raster(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRasterPtr(_result, false);
}

#pragma implementation_key(5706)
inline IRasterPtr IRasters::Add ( ) {
    struct IRaster * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRasterPtr(_result, false);
}

//
// interface IOleDrawingObject wrapper method implementations
//

#pragma implementation_key(5707)
inline VARIANT_BOOL IOleDrawingObject::GetPlacement ( double * X, double * Y, double * Angle, VARIANT_BOOL * MirrorSymmetry ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPlacement(X, Y, Angle, MirrorSymmetry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5708)
inline VARIANT_BOOL IOleDrawingObject::SetPlacement ( double X, double Y, double Angle, VARIANT_BOOL MirrorSymmetry ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPlacement(X, Y, Angle, MirrorSymmetry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5709)
inline void IOleDrawingObject::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5710)
inline double IOleDrawingObject::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5711)
inline void IOleDrawingObject::PutClassId ( _bstr_t PVal ) {
    HRESULT _hr = put_ClassId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5712)
inline _bstr_t IOleDrawingObject::GetClassId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5713)
inline void IOleDrawingObject::PutFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_FileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5714)
inline _bstr_t IOleDrawingObject::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5715)
inline void IOleDrawingObject::PutLink ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Link(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5716)
inline VARIANT_BOOL IOleDrawingObject::GetLink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Link(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5717)
inline void IOleDrawingObject::PutInsertionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InsertionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5718)
inline VARIANT_BOOL IOleDrawingObject::GetInsertionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InsertionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5719)
inline IDispatchPtr IOleDrawingObject::DoVerb ( long iVerb ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DoVerb(iVerb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5720)
inline VARIANT_BOOL IOleDrawingObject::Close ( VARIANT_BOOL Save ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Close(Save, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IOleDrawingObjects wrapper method implementations
//

#pragma implementation_key(5721)
inline IOleDrawingObjectPtr IOleDrawingObjects::GetOleDrawingObject ( const _variant_t & Index ) {
    struct IOleDrawingObject * _result = 0;
    HRESULT _hr = get_OleDrawingObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOleDrawingObjectPtr(_result, false);
}

#pragma implementation_key(5722)
inline IOleDrawingObjectPtr IOleDrawingObjects::Add ( ) {
    struct IOleDrawingObject * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOleDrawingObjectPtr(_result, false);
}

//
// interface IEllipse wrapper method implementations
//

#pragma implementation_key(5723)
inline void IEllipse::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5724)
inline double IEllipse::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5725)
inline void IEllipse::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5726)
inline double IEllipse::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5727)
inline void IEllipse::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5728)
inline double IEllipse::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5729)
inline void IEllipse::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5730)
inline double IEllipse::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5731)
inline void IEllipse::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5732)
inline double IEllipse::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5733)
inline void IEllipse::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5734)
inline double IEllipse::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5735)
inline void IEllipse::PutSemiAxisA ( double PVal ) {
    HRESULT _hr = put_SemiAxisA(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5736)
inline double IEllipse::GetSemiAxisA ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiAxisA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5737)
inline void IEllipse::PutSemiAxisB ( double PVal ) {
    HRESULT _hr = put_SemiAxisB(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5738)
inline double IEllipse::GetSemiAxisB ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiAxisB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5739)
inline void IEllipse::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5740)
inline double IEllipse::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5741)
inline long IEllipse::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5742)
inline void IEllipse::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEllipses wrapper method implementations
//

#pragma implementation_key(5743)
inline IEllipsePtr IEllipses::GetEllipse ( const _variant_t & Index ) {
    struct IEllipse * _result = 0;
    HRESULT _hr = get_Ellipse(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEllipsePtr(_result, false);
}

#pragma implementation_key(5744)
inline IEllipsePtr IEllipses::Add ( ) {
    struct IEllipse * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEllipsePtr(_result, false);
}

//
// interface IEllipseArc wrapper method implementations
//

#pragma implementation_key(5745)
inline void IEllipseArc::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5746)
inline double IEllipseArc::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5747)
inline void IEllipseArc::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5748)
inline double IEllipseArc::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5749)
inline void IEllipseArc::PutT1 ( double PVal ) {
    HRESULT _hr = put_T1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5750)
inline double IEllipseArc::GetT1 ( ) {
    double _result = 0;
    HRESULT _hr = get_T1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5751)
inline void IEllipseArc::PutT2 ( double PVal ) {
    HRESULT _hr = put_T2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5752)
inline double IEllipseArc::GetT2 ( ) {
    double _result = 0;
    HRESULT _hr = get_T2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5753)
inline void IEllipseArc::PutAngle1 ( double PVal ) {
    HRESULT _hr = put_Angle1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5754)
inline double IEllipseArc::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5755)
inline void IEllipseArc::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5756)
inline double IEllipseArc::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5757)
inline void IEllipseArc::PutSemiAxisA ( double PVal ) {
    HRESULT _hr = put_SemiAxisA(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5758)
inline double IEllipseArc::GetSemiAxisA ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiAxisA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5759)
inline void IEllipseArc::PutSemiAxisB ( double PVal ) {
    HRESULT _hr = put_SemiAxisB(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5760)
inline double IEllipseArc::GetSemiAxisB ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiAxisB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5761)
inline void IEllipseArc::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5762)
inline double IEllipseArc::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5763)
inline VARIANT_BOOL IEllipseArc::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5764)
inline void IEllipseArc::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5765)
inline long IEllipseArc::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5766)
inline void IEllipseArc::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEllipseArcs wrapper method implementations
//

#pragma implementation_key(5767)
inline IEllipseArcPtr IEllipseArcs::GetEllipseArc ( const _variant_t & Index ) {
    struct IEllipseArc * _result = 0;
    HRESULT _hr = get_EllipseArc(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEllipseArcPtr(_result, false);
}

#pragma implementation_key(5768)
inline IEllipseArcPtr IEllipseArcs::Add ( ) {
    struct IEllipseArc * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEllipseArcPtr(_result, false);
}

//
// interface IRectangle wrapper method implementations
//

#pragma implementation_key(5769)
inline void IRectangle::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5770)
inline double IRectangle::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5771)
inline void IRectangle::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5772)
inline double IRectangle::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5773)
inline void IRectangle::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5774)
inline double IRectangle::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5775)
inline void IRectangle::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5776)
inline double IRectangle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5777)
inline void IRectangle::PutWidth ( double PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5778)
inline double IRectangle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5779)
inline long IRectangle::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5780)
inline void IRectangle::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5781)
inline VARIANT_BOOL IRectangle::GetCorner ( long Index, enum ksCornerTypeEnum * Type, double * L1, double * L2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCorner(Index, Type, L1, L2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5782)
inline VARIANT_BOOL IRectangle::SetCorner ( long Index, enum ksCornerTypeEnum Type, double L1, double L2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCorner(Index, Type, L1, L2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5783)
inline _variant_t IRectangle::GetContourSegmentsPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContourSegmentsPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IRectangles wrapper method implementations
//

#pragma implementation_key(5784)
inline IRectanglePtr IRectangles::GetRectangle ( const _variant_t & Index ) {
    struct IRectangle * _result = 0;
    HRESULT _hr = get_Rectangle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRectanglePtr(_result, false);
}

#pragma implementation_key(5785)
inline IRectanglePtr IRectangles::Add ( ) {
    struct IRectangle * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRectanglePtr(_result, false);
}

//
// interface IRegularPolygon wrapper method implementations
//

#pragma implementation_key(5786)
inline void IRegularPolygon::PutCount ( long PVal ) {
    HRESULT _hr = put_Count(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5787)
inline long IRegularPolygon::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5788)
inline void IRegularPolygon::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5789)
inline double IRegularPolygon::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5790)
inline void IRegularPolygon::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5791)
inline double IRegularPolygon::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5792)
inline void IRegularPolygon::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5793)
inline double IRegularPolygon::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5794)
inline void IRegularPolygon::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5795)
inline double IRegularPolygon::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5796)
inline void IRegularPolygon::PutDescribe ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Describe(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5797)
inline VARIANT_BOOL IRegularPolygon::GetDescribe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Describe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5798)
inline long IRegularPolygon::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5799)
inline void IRegularPolygon::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5800)
inline VARIANT_BOOL IRegularPolygon::GetCorner ( long Index, enum ksCornerTypeEnum * Type, double * L1, double * L2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCorner(Index, Type, L1, L2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5801)
inline VARIANT_BOOL IRegularPolygon::SetCorner ( long Index, enum ksCornerTypeEnum Type, double L1, double L2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCorner(Index, Type, L1, L2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5802)
inline _variant_t IRegularPolygon::GetContourSegmentsPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContourSegmentsPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IRegularPolygons wrapper method implementations
//

#pragma implementation_key(5803)
inline IRegularPolygonPtr IRegularPolygons::GetRegularPolygon ( const _variant_t & Index ) {
    struct IRegularPolygon * _result = 0;
    HRESULT _hr = get_RegularPolygon(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRegularPolygonPtr(_result, false);
}

#pragma implementation_key(5804)
inline IRegularPolygonPtr IRegularPolygons::Add ( ) {
    struct IRegularPolygon * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRegularPolygonPtr(_result, false);
}

//
// interface IEquidistant wrapper method implementations
//

#pragma implementation_key(5805)
inline IDrawingObjectPtr IEquidistant::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(5806)
inline void IEquidistant::PutBaseObject ( struct IDrawingObject * Result ) {
    HRESULT _hr = put_BaseObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5807)
inline void IEquidistant::PutSide ( enum ksEquidistantTypeEnum PVal ) {
    HRESULT _hr = put_Side(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5808)
inline enum ksEquidistantTypeEnum IEquidistant::GetSide ( ) {
    enum ksEquidistantTypeEnum _result;
    HRESULT _hr = get_Side(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5809)
inline void IEquidistant::PutCutMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CutMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5810)
inline VARIANT_BOOL IEquidistant::GetCutMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CutMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5811)
inline void IEquidistant::PutDegenerateSegment ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DegenerateSegment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5812)
inline VARIANT_BOOL IEquidistant::GetDegenerateSegment ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DegenerateSegment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5813)
inline void IEquidistant::PutLeftRadius ( double PVal ) {
    HRESULT _hr = put_LeftRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5814)
inline double IEquidistant::GetLeftRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5815)
inline void IEquidistant::PutRightRadius ( double PVal ) {
    HRESULT _hr = put_RightRadius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5816)
inline double IEquidistant::GetRightRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_RightRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5817)
inline long IEquidistant::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5818)
inline void IEquidistant::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEquidistants wrapper method implementations
//

#pragma implementation_key(5819)
inline IEquidistantPtr IEquidistants::GetEquidistant ( const _variant_t & Index ) {
    struct IEquidistant * _result = 0;
    HRESULT _hr = get_Equidistant(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistantPtr(_result, false);
}

#pragma implementation_key(5820)
inline IEquidistantPtr IEquidistants::Add ( ) {
    struct IEquidistant * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistantPtr(_result, false);
}

//
// interface IHatch wrapper method implementations
//

#pragma implementation_key(5821)
inline double IHatch::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5822)
inline void IHatch::PutX ( double Result ) {
    HRESULT _hr = put_X(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5823)
inline double IHatch::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5824)
inline void IHatch::PutY ( double Result ) {
    HRESULT _hr = put_Y(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5825)
inline VARIANT_BOOL IHatch::GetSide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Side(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5826)
inline void IHatch::PutSide ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Side(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHatches wrapper method implementations
//

#pragma implementation_key(5827)
inline IHatchPtr IHatches::GetHatch ( const _variant_t & Index ) {
    struct IHatch * _result = 0;
    HRESULT _hr = get_Hatch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHatchPtr(_result, false);
}

#pragma implementation_key(5828)
inline IHatchPtr IHatches::Add ( ) {
    struct IHatch * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHatchPtr(_result, false);
}

//
// interface IColouring wrapper method implementations
//

#pragma implementation_key(5829)
inline enum ksColouringTypeEnum IColouring::GetColouringType ( ) {
    enum ksColouringTypeEnum _result;
    HRESULT _hr = get_ColouringType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5830)
inline void IColouring::PutColouringType ( enum ksColouringTypeEnum Result ) {
    HRESULT _hr = put_ColouringType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5831)
inline long IColouring::GetColor1 ( ) {
    long _result = 0;
    HRESULT _hr = get_Color1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5832)
inline void IColouring::PutColor1 ( long Result ) {
    HRESULT _hr = put_Color1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5833)
inline long IColouring::GetColor2 ( ) {
    long _result = 0;
    HRESULT _hr = get_Color2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5834)
inline void IColouring::PutColor2 ( long Result ) {
    HRESULT _hr = put_Color2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5835)
inline long IColouring::GetTransparency1 ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5836)
inline void IColouring::PutTransparency1 ( long PVal ) {
    HRESULT _hr = put_Transparency1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5837)
inline long IColouring::GetTransparency2 ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5838)
inline void IColouring::PutTransparency2 ( long PVal ) {
    HRESULT _hr = put_Transparency2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5839)
inline VARIANT_BOOL IColouring::GetGradientType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5840)
inline void IColouring::PutGradientType ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_GradientType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5841)
inline long IColouring::GetGradientCount ( ) {
    long _result = 0;
    HRESULT _hr = get_GradientCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5842)
inline void IColouring::PutGradientCount ( long Result ) {
    HRESULT _hr = put_GradientCount(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5843)
inline double IColouring::GetGradientAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_GradientAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5844)
inline void IColouring::PutGradientAngle ( double Result ) {
    HRESULT _hr = put_GradientAngle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5845)
inline double IColouring::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5846)
inline void IColouring::PutXc ( double Result ) {
    HRESULT _hr = put_Xc(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5847)
inline double IColouring::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5848)
inline void IColouring::PutYc ( double Result ) {
    HRESULT _hr = put_Yc(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5849)
inline VARIANT_BOOL IColouring::GetGradations ( VARIANT * Positions, VARIANT * Colors, VARIANT * Transparences, VARIANT * Interpolations ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGradations(Positions, Colors, Transparences, Interpolations, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5850)
inline VARIANT_BOOL IColouring::SetGradations ( const _variant_t & Positions, const _variant_t & Colors, const _variant_t & Transparences, const _variant_t & Interpolations ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetGradations(Positions, Colors, Transparences, Interpolations, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5851)
inline long IColouring::AddGradation ( long Position, long Color, long Transparency, VARIANT_BOOL Interpolation ) {
    long _result = 0;
    HRESULT _hr = raw_AddGradation(Position, Color, Transparency, Interpolation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5852)
inline VARIANT_BOOL IColouring::ClearGradations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearGradations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5853)
inline long IColouring::GetGradationsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_GradationsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5854)
inline VARIANT_BOOL IColouring::GetGradation ( long Index, long * Position, long * Color, long * Transparency, VARIANT_BOOL * Interpolation ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetGradation(Index, Position, Color, Transparency, Interpolation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5855)
inline long IColouring::SetGradation ( long Index, long Position, long Color, long Transparency, VARIANT_BOOL Interpolation ) {
    long _result = 0;
    HRESULT _hr = raw_SetGradation(Index, Position, Color, Transparency, Interpolation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5856)
inline VARIANT_BOOL IColouring::DeleteGradation ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteGradation(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5857)
inline long IColouring::FindPosition ( long Position ) {
    long _result = 0;
    HRESULT _hr = raw_FindPosition(Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IColourings wrapper method implementations
//

#pragma implementation_key(5858)
inline IColouringPtr IColourings::GetColouring ( const _variant_t & Index ) {
    struct IColouring * _result = 0;
    HRESULT _hr = get_Colouring(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColouringPtr(_result, false);
}

#pragma implementation_key(5859)
inline IColouringPtr IColourings::Add ( ) {
    struct IColouring * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColouringPtr(_result, false);
}

//
// interface IConicCurve wrapper method implementations
//

#pragma implementation_key(5860)
inline VARIANT_BOOL IConicCurve::GetPoint ( enum ksConicCurvePontIndexEnum PointIndex, double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(PointIndex, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5861)
inline VARIANT_BOOL IConicCurve::SetPoint ( enum ksConicCurvePontIndexEnum PointIndex, double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(PointIndex, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5862)
inline double IConicCurve::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5863)
inline void IConicCurve::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5864)
inline double IConicCurve::GetCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_Coefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5865)
inline void IConicCurve::PutCoefficient ( double PVal ) {
    HRESULT _hr = put_Coefficient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5866)
inline double IConicCurve::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5867)
inline void IConicCurve::PutAngle1 ( double PVal ) {
    HRESULT _hr = put_Angle1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5868)
inline double IConicCurve::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5869)
inline void IConicCurve::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5870)
inline long IConicCurve::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5871)
inline void IConicCurve::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IConicCurves wrapper method implementations
//

#pragma implementation_key(5872)
inline IConicCurvePtr IConicCurves::GetConicCurve ( const _variant_t & Index ) {
    struct IConicCurve * _result = 0;
    HRESULT _hr = get_ConicCurve(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConicCurvePtr(_result, false);
}

#pragma implementation_key(5873)
inline IConicCurvePtr IConicCurves::Add ( ) {
    struct IConicCurve * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConicCurvePtr(_result, false);
}

//
// interface IMark wrapper method implementations
//

#pragma implementation_key(5874)
inline double IMark::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5875)
inline void IMark::PutX ( double Result ) {
    HRESULT _hr = put_X(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5876)
inline double IMark::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5877)
inline void IMark::PutY ( double Result ) {
    HRESULT _hr = put_Y(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5878)
inline VARIANT_BOOL IMark::GetAutoNumber ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5879)
inline void IMark::PutAutoNumber ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoNumber(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5880)
inline ITextPtr IMark::GetName ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5881)
inline ITextPtr IMark::GetNumber ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5882)
inline ITextPtr IMark::GetTextBefore ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5883)
inline ITextPtr IMark::GetTextAfter ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5884)
inline ITextPtr IMark::GetTextUnder ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUnder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5885)
inline _bstr_t IMark::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5886)
inline void IMark::PutComment ( _bstr_t Result ) {
    HRESULT _hr = put_Comment(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMarks wrapper method implementations
//

#pragma implementation_key(5887)
inline IMarkPtr IMarks::GetMark ( const _variant_t & Index ) {
    struct IMark * _result = 0;
    HRESULT _hr = get_Mark(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkPtr(_result, false);
}

#pragma implementation_key(5888)
inline IMarkPtr IMarks::Add ( enum DrawingObjectTypeEnum MarkType ) {
    struct IMark * _result = 0;
    HRESULT _hr = raw_Add(MarkType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkPtr(_result, false);
}

//
// interface IMarkInsideForm wrapper method implementations
//

#pragma implementation_key(5889)
inline double IMarkInsideForm::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5890)
inline void IMarkInsideForm::PutAngle ( double Result ) {
    HRESULT _hr = put_Angle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5891)
inline void IMarkInsideForm::PutForm ( enum ksMarkInsideFormEnum NewVal ) {
    HRESULT _hr = put_Form(NewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5892)
inline enum ksMarkInsideFormEnum IMarkInsideForm::GetForm ( ) {
    enum ksMarkInsideFormEnum _result;
    HRESULT _hr = get_Form(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5893)
inline void IMarkInsideForm::PutFormGabarit ( double PVal ) {
    HRESULT _hr = put_FormGabarit(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5894)
inline double IMarkInsideForm::GetFormGabarit ( ) {
    double _result = 0;
    HRESULT _hr = get_FormGabarit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5895)
inline void IMarkInsideForm::PutFormHeight ( double PVal ) {
    HRESULT _hr = put_FormHeight(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5896)
inline double IMarkInsideForm::GetFormHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_FormHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5897)
inline void IMarkInsideForm::PutFormStyle ( long PVal ) {
    HRESULT _hr = put_FormStyle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5898)
inline long IMarkInsideForm::GetFormStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_FormStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMarkOnLine wrapper method implementations
//

#pragma implementation_key(5899)
inline enum ksMarkOnLinePosTypeEnum IMarkOnLine::GetPosition ( ) {
    enum ksMarkOnLinePosTypeEnum _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5900)
inline void IMarkOnLine::PutPosition ( enum ksMarkOnLinePosTypeEnum Result ) {
    HRESULT _hr = put_Position(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5901)
inline IDrawingObjectPtr IMarkOnLine::GetLine ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(5902)
inline void IMarkOnLine::PutLine ( struct IDrawingObject * Result ) {
    HRESULT _hr = put_Line(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMarkOnLeader wrapper method implementations
//

#pragma implementation_key(5903)
inline enum ksArrowEnum IMarkOnLeader::GetArrowType ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5904)
inline void IMarkOnLeader::PutArrowType ( enum ksArrowEnum PVal ) {
    HRESULT _hr = put_ArrowType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5905)
inline enum ksShelfDirectionEnum IMarkOnLeader::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5906)
inline void IMarkOnLeader::PutShelfDirection ( enum ksShelfDirectionEnum PVal ) {
    HRESULT _hr = put_ShelfDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5907)
inline VARIANT_BOOL IMarkOnLeader::GetParallelBranch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ParallelBranch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5908)
inline void IMarkOnLeader::PutParallelBranch ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ParallelBranch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5909)
inline long IMarkOnLeader::GetBranchCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BranchCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5910)
inline void IMarkOnLeader::PutBranchPoints ( long Index, const _variant_t & PVal ) {
    HRESULT _hr = put_BranchPoints(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5911)
inline _variant_t IMarkOnLeader::GetBranchPoints ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BranchPoints(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5912)
inline void IMarkOnLeader::PutBranchBegin ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BranchBegin(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5913)
inline VARIANT_BOOL IMarkOnLeader::GetBranchBegin ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BranchBegin(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5914)
inline void IMarkOnLeader::PutBranchX ( long Index, double PVal ) {
    HRESULT _hr = put_BranchX(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5915)
inline double IMarkOnLeader::GetBranchX ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_BranchX(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5916)
inline void IMarkOnLeader::PutBranchY ( long Index, double PVal ) {
    HRESULT _hr = put_BranchY(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5917)
inline double IMarkOnLeader::GetBranchY ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_BranchY(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5918)
inline long IMarkOnLeader::GetBranchPointsCount ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_BranchPointsCount(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5919)
inline VARIANT_BOOL IMarkOnLeader::AddBranch ( long Index, VARIANT_BOOL Begin, const _variant_t & Points ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranch(Index, Begin, Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5920)
inline VARIANT_BOOL IMarkOnLeader::AddBranchByPoint ( long Index, VARIANT_BOOL Begin, double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranchByPoint(Index, Begin, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5921)
inline VARIANT_BOOL IMarkOnLeader::DeleteBranch ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteBranch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxisJut wrapper method implementations
//

#pragma implementation_key(5922)
inline void IAxisJut::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5923)
inline double IAxisJut::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5924)
inline void IAxisJut::PutMarkOffset ( double PVal ) {
    HRESULT _hr = put_MarkOffset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5925)
inline double IAxisJut::GetMarkOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5926)
inline void IAxisJut::PutBreakOffset ( double PVal ) {
    HRESULT _hr = put_BreakOffset(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5927)
inline double IAxisJut::GetBreakOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5928)
inline void IAxisJut::PutBreakDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BreakDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5929)
inline VARIANT_BOOL IAxisJut::GetBreakDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BreakDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5930)
inline void IAxisJut::PutMarkOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MarkOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5931)
inline VARIANT_BOOL IAxisJut::GetMarkOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICutUnitMarking wrapper method implementations
//

#pragma implementation_key(5932)
inline long ICutUnitMarking::GetStrokeCount ( ) {
    long _result = 0;
    HRESULT _hr = get_StrokeCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5933)
inline void ICutUnitMarking::PutStrokeX ( long Index, double PVal ) {
    HRESULT _hr = put_StrokeX(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5934)
inline double ICutUnitMarking::GetStrokeX ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_StrokeX(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5935)
inline void ICutUnitMarking::PutStrokeY ( long Index, double PVal ) {
    HRESULT _hr = put_StrokeY(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5936)
inline double ICutUnitMarking::GetStrokeY ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_StrokeY(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5937)
inline void ICutUnitMarking::PutStroke ( long Index, double PVal ) {
    HRESULT _hr = put_Stroke(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5938)
inline double ICutUnitMarking::GetStroke ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_Stroke(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5939)
inline double ICutUnitMarking::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5940)
inline void ICutUnitMarking::PutAngle ( double Result ) {
    HRESULT _hr = put_Angle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5941)
inline enum ksShelfDirectionEnum ICutUnitMarking::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5942)
inline void ICutUnitMarking::PutShelfDirection ( enum ksShelfDirectionEnum Result ) {
    HRESULT _hr = put_ShelfDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5943)
inline double ICutUnitMarking::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5944)
inline void ICutUnitMarking::PutShelfX ( double Result ) {
    HRESULT _hr = put_ShelfX(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5945)
inline double ICutUnitMarking::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5946)
inline void ICutUnitMarking::PutShelfY ( double Result ) {
    HRESULT _hr = put_ShelfY(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5947)
inline ITextPtr ICutUnitMarking::GetTextUp ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5948)
inline ITextPtr ICutUnitMarking::GetTextDown ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5949)
inline VARIANT_BOOL ICutUnitMarking::AddStroke ( double X, double Y, double Length ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddStroke(X, Y, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5950)
inline VARIANT_BOOL ICutUnitMarking::DeleteStroke ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteStroke(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICutUnitMarkings wrapper method implementations
//

#pragma implementation_key(5951)
inline ICutUnitMarkingPtr ICutUnitMarkings::GetCutUnitMarking ( const _variant_t & Index ) {
    struct ICutUnitMarking * _result = 0;
    HRESULT _hr = get_CutUnitMarking(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutUnitMarkingPtr(_result, false);
}

#pragma implementation_key(5952)
inline ICutUnitMarkingPtr ICutUnitMarkings::Add ( ) {
    struct ICutUnitMarking * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutUnitMarkingPtr(_result, false);
}

//
// interface IUnitMarking wrapper method implementations
//

#pragma implementation_key(5953)
inline double IUnitMarking::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5954)
inline void IUnitMarking::PutXc ( double Result ) {
    HRESULT _hr = put_Xc(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5955)
inline double IUnitMarking::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5956)
inline void IUnitMarking::PutYc ( double Result ) {
    HRESULT _hr = put_Yc(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5957)
inline double IUnitMarking::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5958)
inline void IUnitMarking::PutRadius ( double Result ) {
    HRESULT _hr = put_Radius(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5959)
inline double IUnitMarking::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5960)
inline void IUnitMarking::PutHeight ( double Result ) {
    HRESULT _hr = put_Height(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5961)
inline double IUnitMarking::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5962)
inline void IUnitMarking::PutWidth ( double Result ) {
    HRESULT _hr = put_Width(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5963)
inline enum ksShelfDirectionEnum IUnitMarking::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5964)
inline void IUnitMarking::PutShelfDirection ( enum ksShelfDirectionEnum Result ) {
    HRESULT _hr = put_ShelfDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5965)
inline double IUnitMarking::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5966)
inline void IUnitMarking::PutShelfX ( double Result ) {
    HRESULT _hr = put_ShelfX(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5967)
inline double IUnitMarking::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5968)
inline void IUnitMarking::PutShelfY ( double Result ) {
    HRESULT _hr = put_ShelfY(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5969)
inline enum ksContourFormEnum IUnitMarking::GetForm ( ) {
    enum ksContourFormEnum _result;
    HRESULT _hr = get_Form(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5970)
inline void IUnitMarking::PutForm ( enum ksContourFormEnum Result ) {
    HRESULT _hr = put_Form(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5971)
inline ITextPtr IUnitMarking::GetTextUp ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5972)
inline ITextPtr IUnitMarking::GetTextDown ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(5973)
inline double IUnitMarking::GetFilletRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_FilletRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5974)
inline void IUnitMarking::PutFilletRadius ( double Result ) {
    HRESULT _hr = put_FilletRadius(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IUnitMarkings wrapper method implementations
//

#pragma implementation_key(5975)
inline IUnitMarkingPtr IUnitMarkings::GetUnitMarking ( const _variant_t & Index ) {
    struct IUnitMarking * _result = 0;
    HRESULT _hr = get_UnitMarking(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnitMarkingPtr(_result, false);
}

#pragma implementation_key(5976)
inline IUnitMarkingPtr IUnitMarkings::Add ( ) {
    struct IUnitMarking * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnitMarkingPtr(_result, false);
}

//
// interface IMultiTextLeader wrapper method implementations
//

#pragma implementation_key(5977)
inline enum ksArrowEnum IMultiTextLeader::GetArrowType ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5978)
inline void IMultiTextLeader::PutArrowType ( enum ksArrowEnum Result ) {
    HRESULT _hr = put_ArrowType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5979)
inline long IMultiTextLeader::GetBranchCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BranchCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5980)
inline void IMultiTextLeader::PutBranchPoints ( long Index, const _variant_t & PVal ) {
    HRESULT _hr = put_BranchPoints(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5981)
inline _variant_t IMultiTextLeader::GetBranchPoints ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BranchPoints(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5982)
inline long IMultiTextLeader::GetBranchPointsCount ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_BranchPointsCount(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5983)
inline void IMultiTextLeader::PutBranchX ( long Index, double PVal ) {
    HRESULT _hr = put_BranchX(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5984)
inline double IMultiTextLeader::GetBranchX ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_BranchX(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5985)
inline void IMultiTextLeader::PutBranchY ( long Index, double PVal ) {
    HRESULT _hr = put_BranchY(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5986)
inline double IMultiTextLeader::GetBranchY ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_BranchY(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5987)
inline VARIANT_BOOL IMultiTextLeader::AddBranch ( long Index, const _variant_t & Points ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranch(Index, Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5988)
inline VARIANT_BOOL IMultiTextLeader::AddBranchByPoint ( long Index, double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranchByPoint(Index, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5989)
inline VARIANT_BOOL IMultiTextLeader::DeleteBranch ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteBranch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5990)
inline double IMultiTextLeader::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5991)
inline void IMultiTextLeader::PutShelfX ( double Result ) {
    HRESULT _hr = put_ShelfX(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5992)
inline double IMultiTextLeader::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5993)
inline void IMultiTextLeader::PutShelfY ( double Result ) {
    HRESULT _hr = put_ShelfY(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5994)
inline enum ksShelfDirectionEnum IMultiTextLeader::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5995)
inline void IMultiTextLeader::PutShelfDirection ( enum ksShelfDirectionEnum Result ) {
    HRESULT _hr = put_ShelfDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5996)
inline VARIANT_BOOL IMultiTextLeader::GetTextDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5997)
inline void IMultiTextLeader::PutTextDirection ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_TextDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5998)
inline VARIANT_BOOL IMultiTextLeader::GetForm ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Form(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5999)
inline void IMultiTextLeader::PutForm ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Form(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6000)
inline VARIANT_BOOL IMultiTextLeader::GetAlign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Align(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6001)
inline void IMultiTextLeader::PutAlign ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Align(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6002)
inline ITextPtr IMultiTextLeader::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

//
// interface IMultiTextLeaders wrapper method implementations
//

#pragma implementation_key(6003)
inline IMultiTextLeaderPtr IMultiTextLeaders::GetMultiTextLeader ( const _variant_t & Index ) {
    struct IMultiTextLeader * _result = 0;
    HRESULT _hr = get_MultiTextLeader(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMultiTextLeaderPtr(_result, false);
}

#pragma implementation_key(6004)
inline IMultiTextLeaderPtr IMultiTextLeaders::Add ( ) {
    struct IMultiTextLeader * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMultiTextLeaderPtr(_result, false);
}

//
// interface IUnitNumber wrapper method implementations
//

#pragma implementation_key(6005)
inline double IUnitNumber::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6006)
inline void IUnitNumber::PutX ( double Result ) {
    HRESULT _hr = put_X(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6007)
inline double IUnitNumber::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6008)
inline void IUnitNumber::PutY ( double Result ) {
    HRESULT _hr = put_Y(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6009)
inline ITextPtr IUnitNumber::GetTextUp ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6010)
inline ITextPtr IUnitNumber::GetTextDown ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

//
// interface IUnitNumbers wrapper method implementations
//

#pragma implementation_key(6011)
inline IUnitNumberPtr IUnitNumbers::GetUnitNumber ( const _variant_t & Index ) {
    struct IUnitNumber * _result = 0;
    HRESULT _hr = get_UnitNumber(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnitNumberPtr(_result, false);
}

#pragma implementation_key(6012)
inline IUnitNumberPtr IUnitNumbers::Add ( ) {
    struct IUnitNumber * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnitNumberPtr(_result, false);
}

//
// interface IBrace wrapper method implementations
//

#pragma implementation_key(6013)
inline void IBrace::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6014)
inline double IBrace::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6015)
inline void IBrace::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6016)
inline double IBrace::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6017)
inline void IBrace::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6018)
inline double IBrace::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6019)
inline void IBrace::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6020)
inline double IBrace::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6021)
inline void IBrace::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6022)
inline double IBrace::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6023)
inline void IBrace::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6024)
inline double IBrace::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6025)
inline double IBrace::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6026)
inline void IBrace::PutRadius ( double Result ) {
    HRESULT _hr = put_Radius(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6027)
inline enum ksShelfDirectionEnum IBrace::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6028)
inline void IBrace::PutShelfDirection ( enum ksShelfDirectionEnum Result ) {
    HRESULT _hr = put_ShelfDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6029)
inline double IBrace::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6030)
inline void IBrace::PutShelfX ( double Result ) {
    HRESULT _hr = put_ShelfX(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6031)
inline double IBrace::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6032)
inline void IBrace::PutShelfY ( double Result ) {
    HRESULT _hr = put_ShelfY(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6033)
inline VARIANT_BOOL IBrace::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6034)
inline void IBrace::PutDirection ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Direction(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6035)
inline enum ksAlignmentTypeEnum IBrace::GetAlignment ( ) {
    enum ksAlignmentTypeEnum _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6036)
inline void IBrace::PutAlignment ( enum ksAlignmentTypeEnum Result ) {
    HRESULT _hr = put_Alignment(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6037)
inline long IBrace::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6038)
inline void IBrace::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6039)
inline ITextPtr IBrace::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6040)
inline void IBrace::PutShelfPoints ( const _variant_t & PVal ) {
    HRESULT _hr = put_ShelfPoints(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6041)
inline _variant_t IBrace::GetShelfPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ShelfPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IBraces wrapper method implementations
//

#pragma implementation_key(6042)
inline IBracePtr IBraces::GetBrace ( const _variant_t & Index ) {
    struct IBrace * _result = 0;
    HRESULT _hr = get_Brace(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBracePtr(_result, false);
}

#pragma implementation_key(6043)
inline IBracePtr IBraces::Add ( ) {
    struct IBrace * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBracePtr(_result, false);
}

//
// interface ICutLine wrapper method implementations
//

#pragma implementation_key(6044)
inline VARIANT_BOOL ICutLine::GetArrowPos ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ArrowPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6045)
inline void ICutLine::PutArrowPos ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ArrowPos(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6046)
inline double ICutLine::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6047)
inline void ICutLine::PutX1 ( double Result ) {
    HRESULT _hr = put_X1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6048)
inline double ICutLine::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6049)
inline void ICutLine::PutY1 ( double Result ) {
    HRESULT _hr = put_Y1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6050)
inline double ICutLine::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6051)
inline void ICutLine::PutX2 ( double Result ) {
    HRESULT _hr = put_X2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6052)
inline double ICutLine::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6053)
inline void ICutLine::PutY2 ( double Result ) {
    HRESULT _hr = put_Y2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6054)
inline void ICutLine::PutPoints ( const _variant_t & PVal ) {
    HRESULT _hr = put_Points(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6055)
inline _variant_t ICutLine::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6056)
inline VARIANT_BOOL ICutLine::GetAutoSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6057)
inline void ICutLine::PutAutoSorted ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSorted(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6058)
inline ITextPtr ICutLine::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6059)
inline ITextPtr ICutLine::GetAdditionalText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_AdditionalText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6060)
inline VARIANT_BOOL ICutLine::GetAutoSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6061)
inline void ICutLine::PutAutoSheet ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSheet(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6062)
inline VARIANT_BOOL ICutLine::GetAutoZone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6063)
inline void ICutLine::PutAutoZone ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoZone(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6064)
inline VARIANT_BOOL ICutLine::GetAdditionalTextPos ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdditionalTextPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6065)
inline void ICutLine::PutAdditionalTextPos ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AdditionalTextPos(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6066)
inline enum ksArrowEnum ICutLine::GetArrowType ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6067)
inline void ICutLine::PutArrowType ( enum ksArrowEnum PVal ) {
    HRESULT _hr = put_ArrowType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICutLines wrapper method implementations
//

#pragma implementation_key(6068)
inline ICutLinePtr ICutLines::GetCutLine ( const _variant_t & Index ) {
    struct ICutLine * _result = 0;
    HRESULT _hr = get_CutLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutLinePtr(_result, false);
}

#pragma implementation_key(6069)
inline ICutLinePtr ICutLines::Add ( ) {
    struct ICutLine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutLinePtr(_result, false);
}

//
// interface ILineDimension wrapper method implementations
//

#pragma implementation_key(6070)
inline double ILineDimension::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6071)
inline void ILineDimension::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6072)
inline double ILineDimension::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6073)
inline void ILineDimension::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6074)
inline double ILineDimension::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6075)
inline void ILineDimension::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6076)
inline double ILineDimension::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6077)
inline void ILineDimension::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6078)
inline double ILineDimension::GetX3 ( ) {
    double _result = 0;
    HRESULT _hr = get_X3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6079)
inline void ILineDimension::PutX3 ( double PVal ) {
    HRESULT _hr = put_X3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6080)
inline double ILineDimension::GetY3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6081)
inline void ILineDimension::PutY3 ( double PVal ) {
    HRESULT _hr = put_Y3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6082)
inline double ILineDimension::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6083)
inline void ILineDimension::PutShelfX ( double PVal ) {
    HRESULT _hr = put_ShelfX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6084)
inline double ILineDimension::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6085)
inline void ILineDimension::PutShelfY ( double PVal ) {
    HRESULT _hr = put_ShelfY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6086)
inline enum ksLineDimensionOrientationEnum ILineDimension::GetOrientation ( ) {
    enum ksLineDimensionOrientationEnum _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6087)
inline void ILineDimension::PutOrientation ( enum ksLineDimensionOrientationEnum PVal ) {
    HRESULT _hr = put_Orientation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6088)
inline double ILineDimension::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6089)
inline void ILineDimension::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILineDimensions wrapper method implementations
//

#pragma implementation_key(6090)
inline ILineDimensionPtr ILineDimensions::GetLineDimension ( const _variant_t & Index ) {
    struct ILineDimension * _result = 0;
    HRESULT _hr = get_LineDimension(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineDimensionPtr(_result, false);
}

#pragma implementation_key(6091)
inline ILineDimensionPtr ILineDimensions::Add ( ) {
    struct ILineDimension * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineDimensionPtr(_result, false);
}

#pragma implementation_key(6092)
inline ILineDimensionPtr ILineDimensions::AddLineSegmentAndPointDimension ( ) {
    struct ILineDimension * _result = 0;
    HRESULT _hr = raw_AddLineSegmentAndPointDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineDimensionPtr(_result, false);
}

//
// interface IRadialDimension wrapper method implementations
//

#pragma implementation_key(6093)
inline double IRadialDimension::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6094)
inline void IRadialDimension::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6095)
inline double IRadialDimension::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6096)
inline void IRadialDimension::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6097)
inline double IRadialDimension::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6098)
inline void IRadialDimension::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6099)
inline VARIANT_BOOL IRadialDimension::GetDimensionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6100)
inline void IRadialDimension::PutDimensionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DimensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6101)
inline IDrawingObjectPtr IRadialDimension::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6102)
inline void IRadialDimension::PutBaseObject ( struct IDrawingObject * Object1 ) {
    HRESULT _hr = put_BaseObject(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6103)
inline double IRadialDimension::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6104)
inline void IRadialDimension::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6105)
inline VARIANT_BOOL IRadialDimension::AddBranch ( VARIANT_BOOL BranchBegin, struct IDrawingObject * BranchObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranch(BranchBegin, BranchObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6106)
inline VARIANT_BOOL IRadialDimension::AddBranchByArcParam ( VARIANT_BOOL BranchBegin, double Xc, double Yc, double Radius, double Angle1, double Angle2, VARIANT_BOOL Direction ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddBranchByArcParam(BranchBegin, Xc, Yc, Radius, Angle1, Angle2, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6107)
inline long IRadialDimension::GetBranchsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BranchsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6108)
inline IDrawingObjectPtr IRadialDimension::GetBranchObject ( long Index ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BranchObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6109)
inline void IRadialDimension::PutBranchObject ( long Index, struct IDrawingObject * BranchObject ) {
    HRESULT _hr = put_BranchObject(Index, BranchObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6110)
inline VARIANT_BOOL IRadialDimension::DeleteBranch ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteBranch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6111)
inline VARIANT_BOOL IRadialDimension::GetBranchParam ( long Index, double * Xc, double * Yc, double * Angle1, double * Angle2, VARIANT_BOOL * Direction ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBranchParam(Index, Xc, Yc, Angle1, Angle2, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6112)
inline VARIANT_BOOL IRadialDimension::SetBranchParam ( long Index, double Xc, double Yc, double Angle1, double Angle2, VARIANT_BOOL Direction ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBranchParam(Index, Xc, Yc, Angle1, Angle2, Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6113)
inline VARIANT_BOOL IRadialDimension::GetBranchBegin ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BranchBegin(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6114)
inline void IRadialDimension::PutBranchBegin ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BranchBegin(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6115)
inline double IRadialDimension::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6116)
inline void IRadialDimension::PutShelfX ( double PVal ) {
    HRESULT _hr = put_ShelfX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6117)
inline double IRadialDimension::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6118)
inline void IRadialDimension::PutShelfY ( double PVal ) {
    HRESULT _hr = put_ShelfY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRadialDimensions wrapper method implementations
//

#pragma implementation_key(6119)
inline IRadialDimensionPtr IRadialDimensions::GetRadialDimension ( const _variant_t & Index ) {
    struct IRadialDimension * _result = 0;
    HRESULT _hr = get_RadialDimension(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRadialDimensionPtr(_result, false);
}

#pragma implementation_key(6120)
inline IRadialDimensionPtr IRadialDimensions::Add ( ) {
    struct IRadialDimension * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRadialDimensionPtr(_result, false);
}

//
// interface IDiametralDimension wrapper method implementations
//

#pragma implementation_key(6121)
inline double IDiametralDimension::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6122)
inline void IDiametralDimension::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6123)
inline double IDiametralDimension::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6124)
inline void IDiametralDimension::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6125)
inline double IDiametralDimension::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6126)
inline void IDiametralDimension::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6127)
inline VARIANT_BOOL IDiametralDimension::GetDimensionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6128)
inline void IDiametralDimension::PutDimensionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DimensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6129)
inline IDrawingObjectPtr IDiametralDimension::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6130)
inline void IDiametralDimension::PutBaseObject ( struct IDrawingObject * Object1 ) {
    HRESULT _hr = put_BaseObject(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6131)
inline double IDiametralDimension::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6132)
inline void IDiametralDimension::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDiametralDimensions wrapper method implementations
//

#pragma implementation_key(6133)
inline IDiametralDimensionPtr IDiametralDimensions::GetDiametralDimension ( const _variant_t & Index ) {
    struct IDiametralDimension * _result = 0;
    HRESULT _hr = get_DiametralDimension(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiametralDimensionPtr(_result, false);
}

#pragma implementation_key(6134)
inline IDiametralDimensionPtr IDiametralDimensions::Add ( ) {
    struct IDiametralDimension * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiametralDimensionPtr(_result, false);
}

//
// interface IAngleDimension wrapper method implementations
//

#pragma implementation_key(6135)
inline double IAngleDimension::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6136)
inline void IAngleDimension::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6137)
inline double IAngleDimension::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6138)
inline void IAngleDimension::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6139)
inline void IAngleDimension::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6140)
inline double IAngleDimension::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6141)
inline void IAngleDimension::PutAngle1 ( double PVal ) {
    HRESULT _hr = put_Angle1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6142)
inline double IAngleDimension::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6143)
inline void IAngleDimension::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6144)
inline double IAngleDimension::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6145)
inline void IAngleDimension::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6146)
inline double IAngleDimension::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6147)
inline void IAngleDimension::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6148)
inline double IAngleDimension::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6149)
inline void IAngleDimension::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6150)
inline double IAngleDimension::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6151)
inline void IAngleDimension::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6152)
inline double IAngleDimension::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6153)
inline IDrawingObjectPtr IAngleDimension::GetBaseObject1 ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6154)
inline void IAngleDimension::PutBaseObject1 ( struct IDrawingObject * Object1 ) {
    HRESULT _hr = put_BaseObject1(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6155)
inline IDrawingObjectPtr IAngleDimension::GetBaseObject2 ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6156)
inline void IAngleDimension::PutBaseObject2 ( struct IDrawingObject * Object1 ) {
    HRESULT _hr = put_BaseObject2(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6157)
inline enum ksAngleDimTypeEnum IAngleDimension::GetDimensionType ( ) {
    enum ksAngleDimTypeEnum _result;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6158)
inline void IAngleDimension::PutDimensionType ( enum ksAngleDimTypeEnum PVal ) {
    HRESULT _hr = put_DimensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6159)
inline double IAngleDimension::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6160)
inline void IAngleDimension::PutShelfX ( double PVal ) {
    HRESULT _hr = put_ShelfX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6161)
inline double IAngleDimension::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6162)
inline void IAngleDimension::PutShelfY ( double PVal ) {
    HRESULT _hr = put_ShelfY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6163)
inline void IAngleDimension::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6164)
inline VARIANT_BOOL IAngleDimension::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6165)
inline void IAngleDimension::PutX3 ( double PVal ) {
    HRESULT _hr = put_X3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6166)
inline double IAngleDimension::GetX3 ( ) {
    double _result = 0;
    HRESULT _hr = get_X3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6167)
inline void IAngleDimension::PutY3 ( double PVal ) {
    HRESULT _hr = put_Y3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6168)
inline double IAngleDimension::GetY3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAngleDimensions wrapper method implementations
//

#pragma implementation_key(6169)
inline IAngleDimensionPtr IAngleDimensions::GetAngleDimension ( const _variant_t & Index ) {
    struct IAngleDimension * _result = 0;
    HRESULT _hr = get_AngleDimension(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAngleDimensionPtr(_result, false);
}

#pragma implementation_key(6170)
inline IAngleDimensionPtr IAngleDimensions::Add ( enum DrawingObjectTypeEnum DimType ) {
    struct IAngleDimension * _result = 0;
    HRESULT _hr = raw_Add(DimType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAngleDimensionPtr(_result, false);
}

//
// interface IBreakLineDimension wrapper method implementations
//

#pragma implementation_key(6171)
inline double IBreakLineDimension::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6172)
inline void IBreakLineDimension::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6173)
inline double IBreakLineDimension::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6174)
inline void IBreakLineDimension::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6175)
inline double IBreakLineDimension::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6176)
inline void IBreakLineDimension::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6177)
inline double IBreakLineDimension::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6178)
inline void IBreakLineDimension::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6179)
inline double IBreakLineDimension::GetX3 ( ) {
    double _result = 0;
    HRESULT _hr = get_X3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6180)
inline void IBreakLineDimension::PutX3 ( double PVal ) {
    HRESULT _hr = put_X3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6181)
inline double IBreakLineDimension::GetY3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6182)
inline void IBreakLineDimension::PutY3 ( double PVal ) {
    HRESULT _hr = put_Y3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6183)
inline double IBreakLineDimension::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6184)
inline void IBreakLineDimension::PutShelfX ( double PVal ) {
    HRESULT _hr = put_ShelfX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6185)
inline double IBreakLineDimension::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6186)
inline void IBreakLineDimension::PutShelfY ( double PVal ) {
    HRESULT _hr = put_ShelfY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6187)
inline IDrawingObjectPtr IBreakLineDimension::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6188)
inline void IBreakLineDimension::PutBaseObject ( struct IDrawingObject * Object1 ) {
    HRESULT _hr = put_BaseObject(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBreakLineDimensions wrapper method implementations
//

#pragma implementation_key(6189)
inline IBreakLineDimensionPtr IBreakLineDimensions::GetBreakLineDimension ( const _variant_t & Index ) {
    struct IBreakLineDimension * _result = 0;
    HRESULT _hr = get_BreakLineDimension(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBreakLineDimensionPtr(_result, false);
}

#pragma implementation_key(6190)
inline IBreakLineDimensionPtr IBreakLineDimensions::Add ( ) {
    struct IBreakLineDimension * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBreakLineDimensionPtr(_result, false);
}

//
// interface IHeightDimension wrapper method implementations
//

#pragma implementation_key(6191)
inline enum ksHeightDimTypeEnum IHeightDimension::GetDimensionType ( ) {
    enum ksHeightDimTypeEnum _result;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6192)
inline void IHeightDimension::PutDimensionType ( enum ksHeightDimTypeEnum PVal ) {
    HRESULT _hr = put_DimensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6193)
inline double IHeightDimension::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6194)
inline void IHeightDimension::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6195)
inline double IHeightDimension::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6196)
inline void IHeightDimension::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6197)
inline double IHeightDimension::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6198)
inline void IHeightDimension::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6199)
inline double IHeightDimension::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6200)
inline void IHeightDimension::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6201)
inline double IHeightDimension::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6202)
inline void IHeightDimension::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6203)
inline double IHeightDimension::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6204)
inline void IHeightDimension::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHeightDimensions wrapper method implementations
//

#pragma implementation_key(6205)
inline IHeightDimensionPtr IHeightDimensions::GetHeightDimension ( const _variant_t & Index ) {
    struct IHeightDimension * _result = 0;
    HRESULT _hr = get_HeightDimension(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHeightDimensionPtr(_result, false);
}

#pragma implementation_key(6206)
inline IHeightDimensionPtr IHeightDimensions::Add ( ) {
    struct IHeightDimension * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHeightDimensionPtr(_result, false);
}

//
// interface IArcDimension wrapper method implementations
//

#pragma implementation_key(6207)
inline IDrawingObjectPtr IArcDimension::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6208)
inline void IArcDimension::PutBaseObject ( struct IDrawingObject * Object1 ) {
    HRESULT _hr = put_BaseObject(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6209)
inline double IArcDimension::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6210)
inline void IArcDimension::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6211)
inline double IArcDimension::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6212)
inline void IArcDimension::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6213)
inline double IArcDimension::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6214)
inline void IArcDimension::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6215)
inline double IArcDimension::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6216)
inline void IArcDimension::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6217)
inline double IArcDimension::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6218)
inline void IArcDimension::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6219)
inline double IArcDimension::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6220)
inline void IArcDimension::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6221)
inline double IArcDimension::GetX3 ( ) {
    double _result = 0;
    HRESULT _hr = get_X3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6222)
inline void IArcDimension::PutX3 ( double PVal ) {
    HRESULT _hr = put_X3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6223)
inline double IArcDimension::GetY3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6224)
inline void IArcDimension::PutY3 ( double PVal ) {
    HRESULT _hr = put_Y3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6225)
inline double IArcDimension::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6226)
inline void IArcDimension::PutShelfX ( double PVal ) {
    HRESULT _hr = put_ShelfX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6227)
inline double IArcDimension::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6228)
inline void IArcDimension::PutShelfY ( double PVal ) {
    HRESULT _hr = put_ShelfY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6229)
inline void IArcDimension::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6230)
inline VARIANT_BOOL IArcDimension::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6231)
inline VARIANT_BOOL IArcDimension::GetDimensionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6232)
inline void IArcDimension::PutDimensionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DimensionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6233)
inline VARIANT_BOOL IArcDimension::GetTextPointer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextPointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6234)
inline void IArcDimension::PutTextPointer ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TextPointer(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IArcDimensions wrapper method implementations
//

#pragma implementation_key(6235)
inline IArcDimensionPtr IArcDimensions::GetArcDimension ( const _variant_t & Index ) {
    struct IArcDimension * _result = 0;
    HRESULT _hr = get_ArcDimension(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcDimensionPtr(_result, false);
}

#pragma implementation_key(6236)
inline IArcDimensionPtr IArcDimensions::Add ( ) {
    struct IArcDimension * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcDimensionPtr(_result, false);
}

//
// interface IBreakRadialDimension wrapper method implementations
//

#pragma implementation_key(6237)
inline double IBreakRadialDimension::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6238)
inline void IBreakRadialDimension::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6239)
inline double IBreakRadialDimension::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6240)
inline void IBreakRadialDimension::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6241)
inline double IBreakRadialDimension::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6242)
inline void IBreakRadialDimension::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6243)
inline IDrawingObjectPtr IBreakRadialDimension::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6244)
inline void IBreakRadialDimension::PutBaseObject ( struct IDrawingObject * Object1 ) {
    HRESULT _hr = put_BaseObject(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6245)
inline double IBreakRadialDimension::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6246)
inline void IBreakRadialDimension::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6247)
inline double IBreakRadialDimension::GetBreakLength ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6248)
inline void IBreakRadialDimension::PutBreakLength ( double PVal ) {
    HRESULT _hr = put_BreakLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6249)
inline enum ksDimensionTextPosEnum IBreakRadialDimension::GetTextOnLine ( ) {
    enum ksDimensionTextPosEnum _result;
    HRESULT _hr = get_TextOnLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6250)
inline void IBreakRadialDimension::PutTextOnLine ( enum ksDimensionTextPosEnum PVal ) {
    HRESULT _hr = put_TextOnLine(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6251)
inline double IBreakRadialDimension::GetBreakAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6252)
inline void IBreakRadialDimension::PutBreakAngle ( double PVal ) {
    HRESULT _hr = put_BreakAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6253)
inline double IBreakRadialDimension::GetBreakX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakX1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6254)
inline void IBreakRadialDimension::PutBreakX1 ( double PVal ) {
    HRESULT _hr = put_BreakX1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6255)
inline double IBreakRadialDimension::GetBreakY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakY1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6256)
inline void IBreakRadialDimension::PutBreakY1 ( double PVal ) {
    HRESULT _hr = put_BreakY1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6257)
inline double IBreakRadialDimension::GetBreakX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakX2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6258)
inline void IBreakRadialDimension::PutBreakX2 ( double PVal ) {
    HRESULT _hr = put_BreakX2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6259)
inline double IBreakRadialDimension::GetBreakY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakY2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6260)
inline void IBreakRadialDimension::PutBreakY2 ( double PVal ) {
    HRESULT _hr = put_BreakY2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBreakRadialDimensions wrapper method implementations
//

#pragma implementation_key(6261)
inline IBreakRadialDimensionPtr IBreakRadialDimensions::GetBreakRadialDimension ( const _variant_t & Index ) {
    struct IBreakRadialDimension * _result = 0;
    HRESULT _hr = get_BreakRadialDimension(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBreakRadialDimensionPtr(_result, false);
}

#pragma implementation_key(6262)
inline IBreakRadialDimensionPtr IBreakRadialDimensions::Add ( ) {
    struct IBreakRadialDimension * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBreakRadialDimensionPtr(_result, false);
}

//
// interface IRough wrapper method implementations
//

#pragma implementation_key(6263)
inline IDrawingObjectPtr IRough::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6264)
inline void IRough::PutBaseObject ( struct IDrawingObject * NewObject ) {
    HRESULT _hr = put_BaseObject(NewObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6265)
inline double IRough::GetBranchX0 ( ) {
    double _result = 0;
    HRESULT _hr = get_BranchX0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6266)
inline void IRough::PutBranchX0 ( double Result ) {
    HRESULT _hr = put_BranchX0(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6267)
inline double IRough::GetBranchY0 ( ) {
    double _result = 0;
    HRESULT _hr = get_BranchY0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6268)
inline void IRough::PutBranchY0 ( double Result ) {
    HRESULT _hr = put_BranchY0(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6269)
inline double IRough::GetShelfX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6270)
inline void IRough::PutShelfX ( double Result ) {
    HRESULT _hr = put_ShelfX(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6271)
inline double IRough::GetShelfY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShelfY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6272)
inline void IRough::PutShelfY ( double Result ) {
    HRESULT _hr = put_ShelfY(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6273)
inline enum ksArrowEnum IRough::GetBranchArrowType ( long Index ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_BranchArrowType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6274)
inline void IRough::PutBranchArrowType ( long Index, enum ksArrowEnum Result ) {
    HRESULT _hr = put_BranchArrowType(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6275)
inline VARIANT_BOOL IRough::GetBranchArrowInside ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BranchArrowInside(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6276)
inline void IRough::PutBranchArrowInside ( long Index, VARIANT_BOOL Result ) {
    HRESULT _hr = put_BranchArrowInside(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRoughs wrapper method implementations
//

#pragma implementation_key(6277)
inline IRoughPtr IRoughs::GetRough ( const _variant_t & Index ) {
    struct IRough * _result = 0;
    HRESULT _hr = get_Rough(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRoughPtr(_result, false);
}

#pragma implementation_key(6278)
inline IRoughPtr IRoughs::Add ( ) {
    struct IRough * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRoughPtr(_result, false);
}

//
// interface IBase wrapper method implementations
//

#pragma implementation_key(6279)
inline IDrawingObjectPtr IBase::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6280)
inline void IBase::PutBaseObject ( struct IDrawingObject * Object1 ) {
    HRESULT _hr = put_BaseObject(Object1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6281)
inline double IBase::GetX0 ( ) {
    double _result = 0;
    HRESULT _hr = get_X0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6282)
inline void IBase::PutX0 ( double Result ) {
    HRESULT _hr = put_X0(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6283)
inline double IBase::GetY0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6284)
inline void IBase::PutY0 ( double Result ) {
    HRESULT _hr = put_Y0(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6285)
inline double IBase::GetBranchX ( ) {
    double _result = 0;
    HRESULT _hr = get_BranchX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6286)
inline void IBase::PutBranchX ( double Result ) {
    HRESULT _hr = put_BranchX(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6287)
inline double IBase::GetBranchY ( ) {
    double _result = 0;
    HRESULT _hr = get_BranchY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6288)
inline void IBase::PutBranchY ( double Result ) {
    HRESULT _hr = put_BranchY(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6289)
inline VARIANT_BOOL IBase::GetDrawType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6290)
inline void IBase::PutDrawType ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_DrawType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6291)
inline VARIANT_BOOL IBase::GetAutoSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6292)
inline void IBase::PutAutoSorted ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSorted(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6293)
inline ITextPtr IBase::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

//
// interface IBases wrapper method implementations
//

#pragma implementation_key(6294)
inline IBasePtr IBases::GetBase ( const _variant_t & Index ) {
    struct IBase * _result = 0;
    HRESULT _hr = get_Base(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBasePtr(_result, false);
}

#pragma implementation_key(6295)
inline IBasePtr IBases::Add ( ) {
    struct IBase * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBasePtr(_result, false);
}

//
// interface ITolerance wrapper method implementations
//

#pragma implementation_key(6296)
inline VARIANT_BOOL ITolerance::GetArrowType ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ArrowType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6297)
inline void ITolerance::PutArrowType ( long Index, VARIANT_BOOL Result ) {
    HRESULT _hr = put_ArrowType(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6298)
inline enum ksTablePointEnum ITolerance::GetBranchPos ( long Index ) {
    enum ksTablePointEnum _result;
    HRESULT _hr = get_BranchPos(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6299)
inline void ITolerance::PutBranchPos ( long Index, enum ksTablePointEnum Result ) {
    HRESULT _hr = put_BranchPos(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6300)
inline enum ksToleranceArrowType ITolerance::GetToleranceArrowType ( long Index ) {
    enum ksToleranceArrowType _result;
    HRESULT _hr = get_ToleranceArrowType(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6301)
inline void ITolerance::PutToleranceArrowType ( long Index, enum ksToleranceArrowType Result ) {
    HRESULT _hr = put_ToleranceArrowType(Index, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6302)
inline VARIANT_BOOL ITolerance::FormatTolerance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FormatTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITolerances wrapper method implementations
//

#pragma implementation_key(6303)
inline ITolerancePtr ITolerances::GetTolerance ( const _variant_t & Index ) {
    struct ITolerance * _result = 0;
    HRESULT _hr = get_Tolerance(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITolerancePtr(_result, false);
}

#pragma implementation_key(6304)
inline ITolerancePtr ITolerances::Add ( ) {
    struct ITolerance * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITolerancePtr(_result, false);
}

//
// interface IDrawingTable wrapper method implementations
//

#pragma implementation_key(6305)
inline double IDrawingTable::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6306)
inline void IDrawingTable::PutX ( double Result ) {
    HRESULT _hr = put_X(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6307)
inline double IDrawingTable::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6308)
inline void IDrawingTable::PutY ( double Result ) {
    HRESULT _hr = put_Y(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6309)
inline void IDrawingTable::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6310)
inline double IDrawingTable::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6311)
inline void IDrawingTable::PutFixedCellsSize ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedCellsSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6312)
inline VARIANT_BOOL IDrawingTable::GetFixedCellsSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedCellsSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6313)
inline void IDrawingTable::PutFixedRowCount ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedRowCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6314)
inline VARIANT_BOOL IDrawingTable::GetFixedRowCount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedRowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6315)
inline void IDrawingTable::PutFixedColumnCount ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FixedColumnCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6316)
inline VARIANT_BOOL IDrawingTable::GetFixedColumnCount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6317)
inline VARIANT_BOOL IDrawingTable::Save ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Save(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6318)
inline ITextPtr IDrawingTable::GetTitle ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6319)
inline INumericGroupPtr IDrawingTable::GetNumericGroup ( ) {
    struct INumericGroup * _result = 0;
    HRESULT _hr = get_NumericGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericGroupPtr(_result, false);
}

#pragma implementation_key(6320)
inline void IDrawingTable::PutNumericGroup ( struct INumericGroup * Result ) {
    HRESULT _hr = put_NumericGroup(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDrawingTables wrapper method implementations
//

#pragma implementation_key(6321)
inline IDrawingTablePtr IDrawingTables::GetDrawingTable ( const _variant_t & Index ) {
    struct IDrawingTable * _result = 0;
    HRESULT _hr = get_DrawingTable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTablePtr(_result, false);
}

#pragma implementation_key(6322)
inline IDrawingTablePtr IDrawingTables::Add ( long RowsCount, long ColumnsCount, double RowHeigh, double ColumnsWidth, enum ksTableTileLayoutEnum TitlePos ) {
    struct IDrawingTable * _result = 0;
    HRESULT _hr = raw_Add(RowsCount, ColumnsCount, RowHeigh, ColumnsWidth, TitlePos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTablePtr(_result, false);
}

#pragma implementation_key(6323)
inline IDrawingTablePtr IDrawingTables::Load ( _bstr_t FileName ) {
    struct IDrawingTable * _result = 0;
    HRESULT _hr = raw_Load(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTablePtr(_result, false);
}

//
// interface IViewPointer wrapper method implementations
//

#pragma implementation_key(6324)
inline double IViewPointer::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6325)
inline void IViewPointer::PutX1 ( double Result ) {
    HRESULT _hr = put_X1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6326)
inline double IViewPointer::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6327)
inline void IViewPointer::PutY1 ( double Result ) {
    HRESULT _hr = put_Y1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6328)
inline double IViewPointer::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6329)
inline void IViewPointer::PutX2 ( double Result ) {
    HRESULT _hr = put_X2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6330)
inline double IViewPointer::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6331)
inline void IViewPointer::PutY2 ( double Result ) {
    HRESULT _hr = put_Y2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6332)
inline double IViewPointer::GetTextX ( ) {
    double _result = 0;
    HRESULT _hr = get_TextX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6333)
inline void IViewPointer::PutTextX ( double Result ) {
    HRESULT _hr = put_TextX(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6334)
inline double IViewPointer::GetTextY ( ) {
    double _result = 0;
    HRESULT _hr = get_TextY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6335)
inline void IViewPointer::PutTextY ( double Result ) {
    HRESULT _hr = put_TextY(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6336)
inline VARIANT_BOOL IViewPointer::GetAutoSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6337)
inline void IViewPointer::PutAutoSorted ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSorted(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6338)
inline VARIANT_BOOL IViewPointer::GetAutoSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6339)
inline void IViewPointer::PutAutoSheet ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSheet(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6340)
inline VARIANT_BOOL IViewPointer::GetAutoZone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6341)
inline void IViewPointer::PutAutoZone ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoZone(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6342)
inline ITextPtr IViewPointer::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6343)
inline ITextPtr IViewPointer::GetAdditionalText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_AdditionalText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6344)
inline enum ksArrowEnum IViewPointer::GetArrowType ( ) {
    enum ksArrowEnum _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6345)
inline void IViewPointer::PutArrowType ( enum ksArrowEnum PVal ) {
    HRESULT _hr = put_ArrowType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IViewPointers wrapper method implementations
//

#pragma implementation_key(6346)
inline IViewPointerPtr IViewPointers::GetViewPointer ( const _variant_t & Index ) {
    struct IViewPointer * _result = 0;
    HRESULT _hr = get_ViewPointer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPointerPtr(_result, false);
}

#pragma implementation_key(6347)
inline IViewPointerPtr IViewPointers::Add ( ) {
    struct IViewPointer * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPointerPtr(_result, false);
}

//
// interface ICentreMarker wrapper method implementations
//

#pragma implementation_key(6348)
inline IDrawingObjectPtr ICentreMarker::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6349)
inline void ICentreMarker::PutBaseObject ( struct IDrawingObject * Result ) {
    HRESULT _hr = put_BaseObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6350)
inline void ICentreMarker::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6351)
inline double ICentreMarker::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6352)
inline void ICentreMarker::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6353)
inline double ICentreMarker::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6354)
inline void ICentreMarker::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6355)
inline double ICentreMarker::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6356)
inline void ICentreMarker::PutSignType ( enum ksCentreMarkerEnum PVal ) {
    HRESULT _hr = put_SignType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6357)
inline enum ksCentreMarkerEnum ICentreMarker::GetSignType ( ) {
    enum ksCentreMarkerEnum _result;
    HRESULT _hr = get_SignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6358)
inline void ICentreMarker::PutSemiAxisAutoLength ( enum ksSemiAxisTypeEnum AxisType, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SemiAxisAutoLength(AxisType, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6359)
inline VARIANT_BOOL ICentreMarker::GetSemiAxisAutoLength ( enum ksSemiAxisTypeEnum AxisType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SemiAxisAutoLength(AxisType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6360)
inline void ICentreMarker::PutSemiAxisLength ( enum ksSemiAxisTypeEnum AxisType, double PVal ) {
    HRESULT _hr = put_SemiAxisLength(AxisType, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6361)
inline double ICentreMarker::GetSemiAxisLength ( enum ksSemiAxisTypeEnum AxisType ) {
    double _result = 0;
    HRESULT _hr = get_SemiAxisLength(AxisType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6362)
inline void ICentreMarker::PutCrosshairSize ( double PVal ) {
    HRESULT _hr = put_CrosshairSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6363)
inline double ICentreMarker::GetCrosshairSize ( ) {
    double _result = 0;
    HRESULT _hr = get_CrosshairSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6364)
inline void ICentreMarker::PutCrosshairSizeModify ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CrosshairSizeModify(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6365)
inline VARIANT_BOOL ICentreMarker::GetCrosshairSizeModify ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CrosshairSizeModify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICentreMarkers wrapper method implementations
//

#pragma implementation_key(6366)
inline ICentreMarkerPtr ICentreMarkers::GetCentreMarker ( const _variant_t & Index ) {
    struct ICentreMarker * _result = 0;
    HRESULT _hr = get_CentreMarker(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICentreMarkerPtr(_result, false);
}

#pragma implementation_key(6367)
inline ICentreMarkerPtr ICentreMarkers::Add ( ) {
    struct ICentreMarker * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICentreMarkerPtr(_result, false);
}

//
// interface IRemoteElement wrapper method implementations
//

#pragma implementation_key(6368)
inline VARIANT_BOOL IRemoteElement::GetAutoSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6369)
inline void IRemoteElement::PutAutoSorted ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSorted(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6370)
inline VARIANT_BOOL IRemoteElement::GetAutoSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6371)
inline void IRemoteElement::PutAutoSheet ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSheet(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6372)
inline VARIANT_BOOL IRemoteElement::GetAutoZone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6373)
inline void IRemoteElement::PutAutoZone ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoZone(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6374)
inline ITextPtr IRemoteElement::GetAdditionalText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_AdditionalText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

//
// interface IRemoteElements wrapper method implementations
//

#pragma implementation_key(6375)
inline IRemoteElementPtr IRemoteElements::GetRemoteElement ( const _variant_t & Index ) {
    struct IRemoteElement * _result = 0;
    HRESULT _hr = get_RemoteElement(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRemoteElementPtr(_result, false);
}

#pragma implementation_key(6376)
inline IRemoteElementPtr IRemoteElements::Add ( ) {
    struct IRemoteElement * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRemoteElementPtr(_result, false);
}

//
// interface IAxisLine wrapper method implementations
//

#pragma implementation_key(6377)
inline void IAxisLine::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6378)
inline double IAxisLine::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6379)
inline void IAxisLine::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6380)
inline double IAxisLine::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6381)
inline void IAxisLine::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6382)
inline double IAxisLine::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6383)
inline void IAxisLine::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6384)
inline double IAxisLine::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6385)
inline void IAxisLine::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6386)
inline double IAxisLine::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6387)
inline void IAxisLine::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6388)
inline double IAxisLine::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxisLines wrapper method implementations
//

#pragma implementation_key(6389)
inline IAxisLinePtr IAxisLines::GetAxisLine ( const _variant_t & Index ) {
    struct IAxisLine * _result = 0;
    HRESULT _hr = get_AxisLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisLinePtr(_result, false);
}

#pragma implementation_key(6390)
inline IAxisLinePtr IAxisLines::Add ( ) {
    struct IAxisLine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisLinePtr(_result, false);
}

//
// interface IWaveLine wrapper method implementations
//

#pragma implementation_key(6391)
inline void IWaveLine::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6392)
inline double IWaveLine::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6393)
inline void IWaveLine::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6394)
inline double IWaveLine::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6395)
inline void IWaveLine::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6396)
inline double IWaveLine::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6397)
inline void IWaveLine::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6398)
inline double IWaveLine::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6399)
inline void IWaveLine::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6400)
inline double IWaveLine::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6401)
inline void IWaveLine::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6402)
inline double IWaveLine::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6403)
inline long IWaveLine::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6404)
inline void IWaveLine::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6405)
inline void IWaveLine::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6406)
inline VARIANT_BOOL IWaveLine::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6407)
inline void IWaveLine::PutHalfWavesCount ( long PVal ) {
    HRESULT _hr = put_HalfWavesCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6408)
inline long IWaveLine::GetHalfWavesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_HalfWavesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6409)
inline void IWaveLine::PutWaveLength ( double PVal ) {
    HRESULT _hr = put_WaveLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6410)
inline double IWaveLine::GetWaveLength ( ) {
    double _result = 0;
    HRESULT _hr = get_WaveLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6411)
inline VARIANT_BOOL IWaveLine::SetWavesAmplitude ( VARIANT_BOOL Representation, double NewVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetWavesAmplitude(Representation, NewVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6412)
inline double IWaveLine::GetWavesAmplitude ( ) {
    double _result = 0;
    HRESULT _hr = get_WavesAmplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6413)
inline VARIANT_BOOL IWaveLine::GetWavesAmplitudeRepresentation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WavesAmplitudeRepresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6414)
inline void IWaveLine::PutAutoWavesAmplitude ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoWavesAmplitude(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6415)
inline VARIANT_BOOL IWaveLine::GetAutoWavesAmplitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoWavesAmplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWaveLines wrapper method implementations
//

#pragma implementation_key(6416)
inline IWaveLinePtr IWaveLines::GetWaveLine ( const _variant_t & Index ) {
    struct IWaveLine * _result = 0;
    HRESULT _hr = get_WaveLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWaveLinePtr(_result, false);
}

#pragma implementation_key(6417)
inline IWaveLinePtr IWaveLines::Add ( ) {
    struct IWaveLine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWaveLinePtr(_result, false);
}

//
// interface IBrokenLine wrapper method implementations
//

#pragma implementation_key(6418)
inline void IBrokenLine::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6419)
inline double IBrokenLine::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6420)
inline void IBrokenLine::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6421)
inline double IBrokenLine::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6422)
inline void IBrokenLine::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6423)
inline double IBrokenLine::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6424)
inline void IBrokenLine::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6425)
inline double IBrokenLine::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6426)
inline void IBrokenLine::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6427)
inline double IBrokenLine::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6428)
inline void IBrokenLine::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6429)
inline double IBrokenLine::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6430)
inline long IBrokenLine::GetStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6431)
inline void IBrokenLine::PutStyle ( long Result ) {
    HRESULT _hr = put_Style(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6432)
inline void IBrokenLine::PutJutValue ( double PVal ) {
    HRESULT _hr = put_JutValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6433)
inline double IBrokenLine::GetJutValue ( ) {
    double _result = 0;
    HRESULT _hr = get_JutValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6434)
inline void IBrokenLine::PutAutoJutValue ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoJutValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6435)
inline VARIANT_BOOL IBrokenLine::GetAutoJutValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoJutValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6436)
inline void IBrokenLine::PutBreaksCount ( long PVal ) {
    HRESULT _hr = put_BreaksCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6437)
inline long IBrokenLine::GetBreaksCount ( ) {
    long _result = 0;
    HRESULT _hr = get_BreaksCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6438)
inline void IBrokenLine::PutBreakAmplitude ( double PVal ) {
    HRESULT _hr = put_BreakAmplitude(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6439)
inline double IBrokenLine::GetBreakAmplitude ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakAmplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6440)
inline void IBrokenLine::PutAutoBreakAmplitude ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoBreakAmplitude(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6441)
inline VARIANT_BOOL IBrokenLine::GetAutoBreakAmplitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoBreakAmplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6442)
inline void IBrokenLine::PutBreakDisplacement ( double PVal ) {
    HRESULT _hr = put_BreakDisplacement(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6443)
inline double IBrokenLine::GetBreakDisplacement ( ) {
    double _result = 0;
    HRESULT _hr = get_BreakDisplacement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6444)
inline void IBrokenLine::PutType1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Type1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6445)
inline VARIANT_BOOL IBrokenLine::GetType1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Type1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBrokenLines wrapper method implementations
//

#pragma implementation_key(6446)
inline IBrokenLinePtr IBrokenLines::GetBrokenLine ( const _variant_t & Index ) {
    struct IBrokenLine * _result = 0;
    HRESULT _hr = get_BrokenLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrokenLinePtr(_result, false);
}

#pragma implementation_key(6447)
inline IBrokenLinePtr IBrokenLines::Add ( ) {
    struct IBrokenLine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrokenLinePtr(_result, false);
}

//
// interface ICircularCentres wrapper method implementations
//

#pragma implementation_key(6448)
inline _variant_t ICircularCentres::GetBaseObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6449)
inline void ICircularCentres::PutBaseObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_BaseObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6450)
inline void ICircularCentres::PutX0 ( double PVal ) {
    HRESULT _hr = put_X0(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6451)
inline double ICircularCentres::GetX0 ( ) {
    double _result = 0;
    HRESULT _hr = get_X0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6452)
inline void ICircularCentres::PutY0 ( double PVal ) {
    HRESULT _hr = put_Y0(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6453)
inline double ICircularCentres::GetY0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6454)
inline void ICircularCentres::PutWithCenter ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WithCenter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6455)
inline VARIANT_BOOL ICircularCentres::GetWithCenter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WithCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6456)
inline void ICircularCentres::PutClosed ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Closed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6457)
inline VARIANT_BOOL ICircularCentres::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6458)
inline _variant_t ICircularCentres::GetCentres ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Centres(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6459)
inline _variant_t ICircularCentres::GetRadiuses ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Radiuses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6460)
inline VARIANT_BOOL ICircularCentres::AddCentre ( double X, double Y, double Radius ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddCentre(X, Y, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6461)
inline VARIANT_BOOL ICircularCentres::AddCentreByObject ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddCentreByObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6462)
inline VARIANT_BOOL ICircularCentres::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6463)
inline VARIANT_BOOL ICircularCentres::DeleteCentre ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteCentre(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6464)
inline VARIANT_BOOL ICircularCentres::DeleteCentreByPoint ( double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteCentreByPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6465)
inline long ICircularCentres::GetAxisesCount ( VARIANT_BOOL WithCenter ) {
    long _result = 0;
    HRESULT _hr = get_AxisesCount(WithCenter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6466)
inline void ICircularCentres::PutSemiAxisAutoLength ( VARIANT_BOOL WithCenter, long Index, enum ksSemiAxisTypeEnum AxisType, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SemiAxisAutoLength(WithCenter, Index, AxisType, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6467)
inline VARIANT_BOOL ICircularCentres::GetSemiAxisAutoLength ( VARIANT_BOOL WithCenter, long Index, enum ksSemiAxisTypeEnum AxisType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SemiAxisAutoLength(WithCenter, Index, AxisType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6468)
inline void ICircularCentres::PutSemiAxisLength ( VARIANT_BOOL WithCenter, long Index, enum ksSemiAxisTypeEnum AxisType, double PVal ) {
    HRESULT _hr = put_SemiAxisLength(WithCenter, Index, AxisType, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6469)
inline double ICircularCentres::GetSemiAxisLength ( VARIANT_BOOL WithCenter, long Index, enum ksSemiAxisTypeEnum AxisType ) {
    double _result = 0;
    HRESULT _hr = get_SemiAxisLength(WithCenter, Index, AxisType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICircularsCentries wrapper method implementations
//

#pragma implementation_key(6470)
inline ICircularCentresPtr ICircularsCentries::GetCircularCentres ( const _variant_t & Index ) {
    struct ICircularCentres * _result = 0;
    HRESULT _hr = get_CircularCentres(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICircularCentresPtr(_result, false);
}

#pragma implementation_key(6471)
inline ICircularCentresPtr ICircularsCentries::Add ( const _variant_t & BaseObjects, VARIANT_BOOL AutoFindOtherObjects, VARIANT_BOOL Closed, VARIANT_BOOL WithCenter ) {
    struct ICircularCentres * _result = 0;
    HRESULT _hr = raw_Add(BaseObjects, AutoFindOtherObjects, Closed, WithCenter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICircularCentresPtr(_result, false);
}

#pragma implementation_key(6472)
inline ICircularCentresPtr ICircularsCentries::AddByPoint ( double X0, double Y0, const _variant_t & BaseObjects, VARIANT_BOOL AutoFindOtherObjects, VARIANT_BOOL Closed, VARIANT_BOOL WithCenter ) {
    struct ICircularCentres * _result = 0;
    HRESULT _hr = raw_AddByPoint(X0, Y0, BaseObjects, AutoFindOtherObjects, Closed, WithCenter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICircularCentresPtr(_result, false);
}

//
// interface ILinearCentres wrapper method implementations
//

#pragma implementation_key(6473)
inline _variant_t ILinearCentres::GetBaseObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6474)
inline void ILinearCentres::PutBaseObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_BaseObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6475)
inline void ILinearCentres::PutHasBreaks ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HasBreaks(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6476)
inline VARIANT_BOOL ILinearCentres::GetHasBreaks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6477)
inline void ILinearCentres::PutAxisAngle ( double PVal ) {
    HRESULT _hr = put_AxisAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6478)
inline double ILinearCentres::GetAxisAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_AxisAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6479)
inline void ILinearCentres::PutTurnAngle ( double PVal ) {
    HRESULT _hr = put_TurnAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6480)
inline double ILinearCentres::GetTurnAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_TurnAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6481)
inline _variant_t ILinearCentres::GetCentres ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Centres(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6482)
inline _variant_t ILinearCentres::GetRadiuses ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Radiuses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6483)
inline VARIANT_BOOL ILinearCentres::AddCentre ( double X, double Y, double Radius ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddCentre(X, Y, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6484)
inline VARIANT_BOOL ILinearCentres::AddCentreByObject ( struct IKompasAPIObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddCentreByObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6485)
inline VARIANT_BOOL ILinearCentres::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6486)
inline VARIANT_BOOL ILinearCentres::DeleteCentre ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteCentre(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6487)
inline VARIANT_BOOL ILinearCentres::DeleteCentreByPoint ( double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteCentreByPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILinearsCentries wrapper method implementations
//

#pragma implementation_key(6488)
inline ILinearCentresPtr ILinearsCentries::GetLinearCentres ( const _variant_t & Index ) {
    struct ILinearCentres * _result = 0;
    HRESULT _hr = get_LinearCentres(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILinearCentresPtr(_result, false);
}

#pragma implementation_key(6489)
inline ILinearCentresPtr ILinearsCentries::Add ( const _variant_t & BaseObjects, VARIANT_BOOL AutoFindOtherObjects, VARIANT_BOOL HasBreaks, double AxisAngle, double TurnAngle ) {
    struct ILinearCentres * _result = 0;
    HRESULT _hr = raw_Add(BaseObjects, AutoFindOtherObjects, HasBreaks, AxisAngle, TurnAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILinearCentresPtr(_result, false);
}

//
// interface IConditionIntersect wrapper method implementations
//

#pragma implementation_key(6490)
inline VARIANT_BOOL IConditionIntersect::GetIntersectPoint ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIntersectPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6491)
inline VARIANT_BOOL IConditionIntersect::GetCurvePoint ( VARIANT_BOOL FirstCurve, double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCurvePoint(FirstCurve, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6492)
inline void IConditionIntersect::PutRemoteLine1Visible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RemoteLine1Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6493)
inline VARIANT_BOOL IConditionIntersect::GetRemoteLine1Visible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoteLine1Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6494)
inline void IConditionIntersect::PutRemoteLine2Visible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RemoteLine2Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6495)
inline VARIANT_BOOL IConditionIntersect::GetRemoteLine2Visible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoteLine2Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6496)
inline VARIANT_BOOL IConditionIntersect::GetGap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6497)
inline void IConditionIntersect::PutGap ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Gap(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6498)
inline double IConditionIntersect::GetGapValue ( ) {
    double _result = 0;
    HRESULT _hr = get_GapValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6499)
inline void IConditionIntersect::PutGapValue ( double PVal ) {
    HRESULT _hr = put_GapValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6500)
inline void IConditionIntersect::PutPointVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PointVisible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6501)
inline VARIANT_BOOL IConditionIntersect::GetPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6502)
inline void IConditionIntersect::PutPointStyle ( enum ksAnnotationSymbolEnum PVal ) {
    HRESULT _hr = put_PointStyle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6503)
inline enum ksAnnotationSymbolEnum IConditionIntersect::GetPointStyle ( ) {
    enum ksAnnotationSymbolEnum _result;
    HRESULT _hr = get_PointStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6504)
inline VARIANT_BOOL IConditionIntersect::InitByObjects ( struct IKompasAPIObject * Curve1, struct IKompasAPIObject * Curve2, double * X1, double * Y1, double * X2, double * Y2, VARIANT_BOOL RemoteLine1Visible, VARIANT_BOOL RemoteLine2Visible ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitByObjects(Curve1, Curve2, X1, Y1, X2, Y2, RemoteLine1Visible, RemoteLine2Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6505)
inline IDrawingObjectPtr IConditionIntersect::GetAssociationObject ( VARIANT_BOOL First ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_AssociationObject(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

//
// interface IConditionIntersects wrapper method implementations
//

#pragma implementation_key(6506)
inline IConditionIntersectPtr IConditionIntersects::GetConditionIntersect ( const _variant_t & Index ) {
    struct IConditionIntersect * _result = 0;
    HRESULT _hr = get_ConditionIntersect(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConditionIntersectPtr(_result, false);
}

#pragma implementation_key(6507)
inline IConditionIntersectPtr IConditionIntersects::Add ( ) {
    struct IConditionIntersect * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConditionIntersectPtr(_result, false);
}

//
// interface ILeader wrapper method implementations
//

#pragma implementation_key(6508)
inline enum ksShelfDirectionEnum ILeader::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6509)
inline void ILeader::PutShelfDirection ( enum ksShelfDirectionEnum Result ) {
    HRESULT _hr = put_ShelfDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6510)
inline enum ksLeaderSignEnum ILeader::GetSignType ( ) {
    enum ksLeaderSignEnum _result;
    HRESULT _hr = get_SignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6511)
inline void ILeader::PutSignType ( enum ksLeaderSignEnum Result ) {
    HRESULT _hr = put_SignType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6512)
inline VARIANT_BOOL ILeader::GetArround ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Arround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6513)
inline void ILeader::PutArround ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Arround(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6514)
inline ITextPtr ILeader::GetTextOnShelf ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextOnShelf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6515)
inline ITextPtr ILeader::GetTextUnderShelf ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUnderShelf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6516)
inline ITextPtr ILeader::GetTextOnBranch ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextOnBranch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6517)
inline ITextPtr ILeader::GetTextUnderBranch ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUnderBranch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6518)
inline ITextPtr ILeader::GetTextAfterShelf ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextAfterShelf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6519)
inline void ILeader::PutBranchBegin ( long Index, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BranchBegin(Index, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6520)
inline VARIANT_BOOL ILeader::GetBranchBegin ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BranchBegin(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6521)
inline VARIANT_BOOL ILeader::GetParallelBranch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ParallelBranch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6522)
inline void ILeader::PutParallelBranch ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ParallelBranch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6523)
inline VARIANT_BOOL ILeader::GetAutoSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6524)
inline void ILeader::PutAutoSorted ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_AutoSorted(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMarkLeader wrapper method implementations
//

#pragma implementation_key(6525)
inline ITextPtr IMarkLeader::GetTextOnBranch ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextOnBranch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6526)
inline ITextPtr IMarkLeader::GetTextUnderBranch ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUnderBranch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6527)
inline ITextPtr IMarkLeader::GetDesignation ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Designation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

//
// interface IPositionLeader wrapper method implementations
//

#pragma implementation_key(6528)
inline enum ksShelfDirectionEnum IPositionLeader::GetShelfDirection ( ) {
    enum ksShelfDirectionEnum _result;
    HRESULT _hr = get_ShelfDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6529)
inline void IPositionLeader::PutShelfDirection ( enum ksShelfDirectionEnum Result ) {
    HRESULT _hr = put_ShelfDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6530)
inline VARIANT_BOOL IPositionLeader::GetShelfVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShelfVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6531)
inline void IPositionLeader::PutShelfVisible ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ShelfVisible(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6532)
inline VARIANT_BOOL IPositionLeader::GetTextDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6533)
inline void IPositionLeader::PutTextDirection ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_TextDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6534)
inline enum ksPositionLederFormEnum IPositionLeader::GetForm ( ) {
    enum ksPositionLederFormEnum _result;
    HRESULT _hr = get_Form(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6535)
inline void IPositionLeader::PutForm ( enum ksPositionLederFormEnum Result ) {
    HRESULT _hr = put_Form(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6536)
inline ITextPtr IPositionLeader::GetPositions ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6537)
inline ITextPtr IPositionLeader::GetUnderPositionText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_UnderPositionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6538)
inline VARIANT_BOOL IPositionLeader::GetHorizontally ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Horizontally(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6539)
inline void IPositionLeader::PutHorizontally ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Horizontally(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChangeLeader wrapper method implementations
//

#pragma implementation_key(6540)
inline enum ksChangeLeaderSignEnum IChangeLeader::GetSignType ( ) {
    enum ksChangeLeaderSignEnum _result;
    HRESULT _hr = get_SignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6541)
inline void IChangeLeader::PutSignType ( enum ksChangeLeaderSignEnum Result ) {
    HRESULT _hr = put_SignType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6542)
inline double IChangeLeader::GetSignHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_SignHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6543)
inline void IChangeLeader::PutSignHeight ( double Result ) {
    HRESULT _hr = put_SignHeight(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6544)
inline double IChangeLeader::GetLeaderLength ( ) {
    double _result = 0;
    HRESULT _hr = get_LeaderLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6545)
inline void IChangeLeader::PutLeaderLength ( double Result ) {
    HRESULT _hr = put_LeaderLength(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6546)
inline VARIANT_BOOL IChangeLeader::GetFullLeaderLength ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FullLeaderLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6547)
inline void IChangeLeader::PutFullLeaderLength ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_FullLeaderLength(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6548)
inline ITextPtr IChangeLeader::GetDesignation ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Designation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6549)
inline INumericGroupPtr IChangeLeader::GetNumericGroup ( ) {
    struct INumericGroup * _result = 0;
    HRESULT _hr = get_NumericGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericGroupPtr(_result, false);
}

#pragma implementation_key(6550)
inline void IChangeLeader::PutNumericGroup ( struct INumericGroup * Result ) {
    HRESULT _hr = put_NumericGroup(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBrandLeader wrapper method implementations
//

#pragma implementation_key(6551)
inline ITextPtr IBrandLeader::GetTextOnBranch ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextOnBranch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6552)
inline ITextPtr IBrandLeader::GetTextUnderBranch ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextUnderBranch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6553)
inline ITextPtr IBrandLeader::GetDesignation ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Designation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(6554)
inline VARIANT_BOOL IBrandLeader::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6555)
inline void IBrandLeader::PutDirection ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Direction(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IToleranceParam wrapper method implementations
//

#pragma implementation_key(6556)
inline enum ksTablePointEnum IToleranceParam::GetBasePointPos ( ) {
    enum ksTablePointEnum _result;
    HRESULT _hr = get_BasePointPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6557)
inline void IToleranceParam::PutBasePointPos ( enum ksTablePointEnum Result ) {
    HRESULT _hr = put_BasePointPos(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6558)
inline VARIANT_BOOL IToleranceParam::GetVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6559)
inline void IToleranceParam::PutVertical ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Vertical(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6560)
inline ITablePtr IToleranceParam::GetTable ( ) {
    struct ITable * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITablePtr(_result, false);
}

#pragma implementation_key(6561)
inline long IToleranceParam::GetSign ( ) {
    long _result = 0;
    HRESULT _hr = get_Sign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6562)
inline void IToleranceParam::PutSign ( long Result ) {
    HRESULT _hr = put_Sign(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6563)
inline enum ksTolerancePrefixSignEnum IToleranceParam::GetPrefixSign ( ) {
    enum ksTolerancePrefixSignEnum _result;
    HRESULT _hr = get_PrefixSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6564)
inline void IToleranceParam::PutPrefixSign ( enum ksTolerancePrefixSignEnum Result ) {
    HRESULT _hr = put_PrefixSign(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6565)
inline _bstr_t IToleranceParam::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6566)
inline void IToleranceParam::PutValue ( _bstr_t PVal ) {
    HRESULT _hr = put_Value(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6567)
inline enum ksToleranceSuffixSignEnum IToleranceParam::GetSuffixSign ( ) {
    enum ksToleranceSuffixSignEnum _result;
    HRESULT _hr = get_SuffixSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6568)
inline void IToleranceParam::PutSuffixSign ( enum ksToleranceSuffixSignEnum Result ) {
    HRESULT _hr = put_SuffixSign(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6569)
inline ITextLinePtr IToleranceParam::GetBaseValue1 ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_BaseValue1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(6570)
inline enum ksToleranceSuffixSignEnum IToleranceParam::GetBaseSign1 ( ) {
    enum ksToleranceSuffixSignEnum _result;
    HRESULT _hr = get_BaseSign1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6571)
inline void IToleranceParam::PutBaseSign1 ( enum ksToleranceSuffixSignEnum Result ) {
    HRESULT _hr = put_BaseSign1(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6572)
inline ITextLinePtr IToleranceParam::GetBaseValue2 ( ) {
    struct ITextLine * _result = 0;
    HRESULT _hr = get_BaseValue2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextLinePtr(_result, false);
}

#pragma implementation_key(6573)
inline enum ksToleranceSuffixSignEnum IToleranceParam::GetBaseSign2 ( ) {
    enum ksToleranceSuffixSignEnum _result;
    HRESULT _hr = get_BaseSign2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6574)
inline void IToleranceParam::PutBaseSign2 ( enum ksToleranceSuffixSignEnum Result ) {
    HRESULT _hr = put_BaseSign2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IContourSegment wrapper method implementations
//

#pragma implementation_key(6575)
inline enum ksContourSegmentEnum IContourSegment::GetSegmentType ( ) {
    enum ksContourSegmentEnum _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6576)
inline ICurve2DPtr IContourSegment::GetCurve2D ( ) {
    struct ICurve2D * _result = 0;
    HRESULT _hr = get_Curve2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurve2DPtr(_result, false);
}

//
// interface IContourLineSegment wrapper method implementations
//

#pragma implementation_key(6577)
inline void IContourLineSegment::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6578)
inline double IContourLineSegment::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6579)
inline void IContourLineSegment::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6580)
inline double IContourLineSegment::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6581)
inline void IContourLineSegment::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6582)
inline double IContourLineSegment::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6583)
inline void IContourLineSegment::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6584)
inline double IContourLineSegment::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6585)
inline void IContourLineSegment::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6586)
inline double IContourLineSegment::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6587)
inline void IContourLineSegment::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6588)
inline double IContourLineSegment::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContourArc wrapper method implementations
//

#pragma implementation_key(6589)
inline void IContourArc::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6590)
inline double IContourArc::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6591)
inline void IContourArc::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6592)
inline VARIANT_BOOL IContourArc::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6593)
inline void IContourArc::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6594)
inline double IContourArc::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6595)
inline void IContourArc::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6596)
inline double IContourArc::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6597)
inline void IContourArc::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6598)
inline double IContourArc::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6599)
inline void IContourArc::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6600)
inline double IContourArc::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6601)
inline void IContourArc::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6602)
inline double IContourArc::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6603)
inline void IContourArc::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6604)
inline double IContourArc::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6605)
inline void IContourArc::PutX3 ( double PVal ) {
    HRESULT _hr = put_X3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6606)
inline double IContourArc::GetX3 ( ) {
    double _result = 0;
    HRESULT _hr = get_X3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6607)
inline void IContourArc::PutY3 ( double PVal ) {
    HRESULT _hr = put_Y3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6608)
inline double IContourArc::GetY3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6609)
inline void IContourArc::PutAngle1 ( double PVal ) {
    HRESULT _hr = put_Angle1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6610)
inline double IContourArc::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6611)
inline void IContourArc::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6612)
inline double IContourArc::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAnnotativeContainer wrapper method implementations
//

#pragma implementation_key(6613)
inline IAnnotativeObjectPtr IAnnotativeContainer::GetItem ( const _variant_t & Index ) {
    struct IAnnotativeObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAnnotativeObjectPtr(_result, false);
}

#pragma implementation_key(6614)
inline long IAnnotativeContainer::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6615)
inline IAnnotativeObjectPtr IAnnotativeContainer::Add ( enum DrawingObjectTypeEnum Type ) {
    struct IAnnotativeObject * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAnnotativeObjectPtr(_result, false);
}

#pragma implementation_key(6616)
inline IAnnotativeObjectPtr IAnnotativeContainer::CreateByGeomObject ( struct IDrawingObject * Obj ) {
    struct IAnnotativeObject * _result = 0;
    HRESULT _hr = raw_CreateByGeomObject(Obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAnnotativeObjectPtr(_result, false);
}

//
// interface ICurveCopyObjectParam wrapper method implementations
//

#pragma implementation_key(6617)
inline void ICurveCopyObjectParam::PutBaseCurve ( struct IDrawingObject * Curve ) {
    HRESULT _hr = put_BaseCurve(Curve);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6618)
inline IDrawingObjectPtr ICurveCopyObjectParam::GetBaseCurve ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseCurve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6619)
inline void ICurveCopyObjectParam::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6620)
inline double ICurveCopyObjectParam::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6621)
inline void ICurveCopyObjectParam::PutCount ( long PVal ) {
    HRESULT _hr = put_Count(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6622)
inline long ICurveCopyObjectParam::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6623)
inline void ICurveCopyObjectParam::PutTurnToNormal ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TurnToNormal(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6624)
inline VARIANT_BOOL ICurveCopyObjectParam::GetTurnToNormal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TurnToNormal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6625)
inline void ICurveCopyObjectParam::PutPositiveDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PositiveDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6626)
inline VARIANT_BOOL ICurveCopyObjectParam::GetPositiveDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositiveDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6627)
inline void ICurveCopyObjectParam::PutStepFactor ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StepFactor(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6628)
inline VARIANT_BOOL ICurveCopyObjectParam::GetStepFactor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StepFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICircleCopyObjectParam wrapper method implementations
//

#pragma implementation_key(6629)
inline void ICircleCopyObjectParam::PutXc ( double Val ) {
    HRESULT _hr = put_Xc(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6630)
inline double ICircleCopyObjectParam::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6631)
inline void ICircleCopyObjectParam::PutYc ( double Val ) {
    HRESULT _hr = put_Yc(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6632)
inline double ICircleCopyObjectParam::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6633)
inline void ICircleCopyObjectParam::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6634)
inline double ICircleCopyObjectParam::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6635)
inline void ICircleCopyObjectParam::PutCount ( long PVal ) {
    HRESULT _hr = put_Count(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6636)
inline long ICircleCopyObjectParam::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6637)
inline void ICircleCopyObjectParam::PutByStep ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ByStep(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6638)
inline VARIANT_BOOL ICircleCopyObjectParam::GetByStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ByStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6639)
inline void ICircleCopyObjectParam::PutPositiveDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PositiveDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6640)
inline VARIANT_BOOL ICircleCopyObjectParam::GetPositiveDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositiveDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface INurbsByPoints wrapper method implementations
//

#pragma implementation_key(6641)
inline void INurbsByPoints::PutPointsBuildingType ( enum ksNurbsByPointsBuildingTypeEnum PVal ) {
    HRESULT _hr = put_PointsBuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6642)
inline enum ksNurbsByPointsBuildingTypeEnum INurbsByPoints::GetPointsBuildingType ( ) {
    enum ksNurbsByPointsBuildingTypeEnum _result;
    HRESULT _hr = get_PointsBuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6643)
inline VARIANT_BOOL INurbsByPoints::AddPointByParam ( long Index, double X, double Y, enum ksNurbsByPointsPointConstraintsEnum ConstraintsType, double * DerivativeLenght, double * DerivativeAngle, double * Curvature ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddPointByParam(Index, X, Y, ConstraintsType, DerivativeLenght, DerivativeAngle, Curvature, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6644)
inline VARIANT_BOOL INurbsByPoints::GetPointParam ( long Index, double * X, double * Y, enum ksNurbsByPointsPointConstraintsEnum * ConstraintsType, double * DerivativeLenght, double * DerivativeAngle, double * Curvature ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPointParam(Index, X, Y, ConstraintsType, DerivativeLenght, DerivativeAngle, Curvature, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6645)
inline void INurbsByPoints::PutPointConstraints ( long PointIndex, enum ksNurbsByPointsPointConstraintsEnum PVal ) {
    HRESULT _hr = put_PointConstraints(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6646)
inline enum ksNurbsByPointsPointConstraintsEnum INurbsByPoints::GetPointConstraints ( long PointIndex ) {
    enum ksNurbsByPointsPointConstraintsEnum _result;
    HRESULT _hr = get_PointConstraints(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6647)
inline void INurbsByPoints::PutDerivativeLenghtInPoint ( long PointIndex, double PVal ) {
    HRESULT _hr = put_DerivativeLenghtInPoint(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6648)
inline double INurbsByPoints::GetDerivativeLenghtInPoint ( long PointIndex ) {
    double _result = 0;
    HRESULT _hr = get_DerivativeLenghtInPoint(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6649)
inline void INurbsByPoints::PutDerivativeAngleInPoint ( long PointIndex, double PVal ) {
    HRESULT _hr = put_DerivativeAngleInPoint(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6650)
inline double INurbsByPoints::GetDerivativeAngleInPoint ( long PointIndex ) {
    double _result = 0;
    HRESULT _hr = get_DerivativeAngleInPoint(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6651)
inline void INurbsByPoints::PutCurvatureInPoint ( long PointIndex, double PVal ) {
    HRESULT _hr = put_CurvatureInPoint(PointIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6652)
inline double INurbsByPoints::GetCurvatureInPoint ( long PointIndex ) {
    double _result = 0;
    HRESULT _hr = get_CurvatureInPoint(PointIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITextDocumentSection wrapper method implementations
//

#pragma implementation_key(6653)
inline ISheetFormatPtr ITextDocumentSection::GetFormat ( ) {
    struct ISheetFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetFormatPtr(_result, false);
}

#pragma implementation_key(6654)
inline _bstr_t ITextDocumentSection::GetLayoutLibraryFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LayoutLibraryFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6655)
inline void ITextDocumentSection::PutLayoutLibraryFileName ( LPWSTR PVal ) {
    HRESULT _hr = put_LayoutLibraryFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6656)
inline double ITextDocumentSection::GetLayoutStyleNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_LayoutStyleNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6657)
inline void ITextDocumentSection::PutLayoutStyleNumber ( double PVal ) {
    HRESULT _hr = put_LayoutStyleNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6658)
inline _bstr_t ITextDocumentSection::GetEvenLayoutLibraryFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EvenLayoutLibraryFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6659)
inline void ITextDocumentSection::PutEvenLayoutLibraryFileName ( LPWSTR PVal ) {
    HRESULT _hr = put_EvenLayoutLibraryFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6660)
inline double ITextDocumentSection::GetEvenLayoutStyleNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_EvenLayoutStyleNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6661)
inline void ITextDocumentSection::PutEvenLayoutStyleNumber ( double PVal ) {
    HRESULT _hr = put_EvenLayoutStyleNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6662)
inline _bstr_t ITextDocumentSection::GetOddLayoutLibraryFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OddLayoutLibraryFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6663)
inline void ITextDocumentSection::PutOddLayoutLibraryFileName ( LPWSTR PVal ) {
    HRESULT _hr = put_OddLayoutLibraryFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6664)
inline double ITextDocumentSection::GetOddLayoutStyleNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_OddLayoutStyleNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6665)
inline void ITextDocumentSection::PutOddLayoutStyleNumber ( double PVal ) {
    HRESULT _hr = put_OddLayoutStyleNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6666)
inline VARIANT_BOOL ITextDocumentSection::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6667)
inline VARIANT_BOOL ITextDocumentSection::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITextDocumentSectionsManager wrapper method implementations
//

#pragma implementation_key(6668)
inline ITextDocumentSectionPtr ITextDocumentSectionsManager::AddSection ( ) {
    struct ITextDocumentSection * _result = 0;
    HRESULT _hr = raw_AddSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextDocumentSectionPtr(_result, false);
}

#pragma implementation_key(6669)
inline ITextDocumentSectionPtr ITextDocumentSectionsManager::AddSectionAt ( long Index ) {
    struct ITextDocumentSection * _result = 0;
    HRESULT _hr = raw_AddSectionAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextDocumentSectionPtr(_result, false);
}

#pragma implementation_key(6670)
inline long ITextDocumentSectionsManager::GetSectionsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SectionsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6671)
inline ITextDocumentSectionPtr ITextDocumentSectionsManager::GetSection ( long Index ) {
    struct ITextDocumentSection * _result = 0;
    HRESULT _hr = get_Section(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextDocumentSectionPtr(_result, false);
}

#pragma implementation_key(6672)
inline ITextDocumentSectionPtr ITextDocumentSectionsManager::GetSectionByTextLine ( long LineIndex ) {
    struct ITextDocumentSection * _result = 0;
    HRESULT _hr = get_SectionByTextLine(LineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextDocumentSectionPtr(_result, false);
}

#pragma implementation_key(6673)
inline VARIANT_BOOL ITextDocumentSectionsManager::MoveSection ( long SectionIndex, long NewSectionIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_MoveSection(SectionIndex, NewSectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6674)
inline long ITextDocumentSectionsManager::GetSectionLineIndexes ( long SectionIndex, long * FirstLineIndex, long * LastLineIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetSectionLineIndexes(SectionIndex, FirstLineIndex, LastLineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6675)
inline VARIANT_BOOL ITextDocumentSectionsManager::MoveLinesToSection ( struct ITextDocumentSection * Section, long FirstLineIndex, long LastLineIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_MoveLinesToSection(Section, FirstLineIndex, LastLineIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExternalTessellationObject wrapper method implementations
//

#pragma implementation_key(6676)
inline long IExternalTessellationObject::GetObjectID ( ) {
    long _result = 0;
    HRESULT _hr = get_ObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6677)
inline VARIANT_BOOL IExternalTessellationObject::SetTessellation ( const _variant_t & Points, const _variant_t & Indexes, const _variant_t & Normals, const _variant_t & Colors ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTessellation(Points, Indexes, Normals, Colors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6678)
inline void IExternalTessellationObject::PutVisible ( struct IDocumentFrame * Frame, VARIANT_BOOL _arg2 ) {
    HRESULT _hr = put_Visible(Frame, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6679)
inline VARIANT_BOOL IExternalTessellationObject::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6680)
inline VARIANT_BOOL IExternalTessellationObject::SetAdvancedColor ( long Color, double Ambient, double Diffuse, double Specularity, double Shininess, double Transparency, double Emission ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetAdvancedColor(Color, Ambient, Diffuse, Specularity, Shininess, Transparency, Emission, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6681)
inline VARIANT_BOOL IExternalTessellationObject::SetEdges ( const _variant_t & Points, const _variant_t & Edges, const _variant_t & Colors ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetEdges(Points, Edges, Colors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6682)
inline VARIANT_BOOL IExternalTessellationObject::SetPlaces ( const _variant_t & Places ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPlaces(Places, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6683)
inline VARIANT_BOOL IExternalTessellationObject::SetEdgeStyles ( const _variant_t & Styles ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetEdgeStyles(Styles, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6684)
inline VARIANT_BOOL IExternalTessellationObject::SetEdgeWidths ( const _variant_t & Widths ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetEdgeWidths(Widths, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6685)
inline VARIANT_BOOL IExternalTessellationObject::SetTextureImage ( long Width, long Heigh, VARIANT_BOOL RGBA, VARIANT_BOOL WrapMode, VARIANT_BOOL FiltMode, const _variant_t & ImageData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTextureImage(Width, Heigh, RGBA, WrapMode, FiltMode, ImageData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6686)
inline VARIANT_BOOL IExternalTessellationObject::SetTexturePoints ( VARIANT_BOOL Image2D, const _variant_t & ImagePoints ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTexturePoints(Image2D, ImagePoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6687)
inline VARIANT_BOOL IExternalTessellationObject::SetFacetMode ( VARIANT_BOOL SideMode, enum ksFacetCullingMode CullingMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetFacetMode(SideMode, CullingMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6688)
inline VARIANT_BOOL IExternalTessellationObject::GetDisableDepthTest ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableDepthTest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6689)
inline void IExternalTessellationObject::PutDisableDepthTest ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DisableDepthTest(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6690)
inline VARIANT_BOOL IExternalTessellationObject::GetNonScalableX ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonScalableX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6691)
inline void IExternalTessellationObject::PutNonScalableX ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonScalableX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6692)
inline VARIANT_BOOL IExternalTessellationObject::GetNonScalableY ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonScalableY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6693)
inline void IExternalTessellationObject::PutNonScalableY ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonScalableY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6694)
inline VARIANT_BOOL IExternalTessellationObject::GetNonScalableZ ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonScalableZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6695)
inline void IExternalTessellationObject::PutNonScalableZ ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonScalableZ(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6696)
inline enum ksDrawInScreenPlaneEnum IExternalTessellationObject::GetAlwaysDrawInScreenPlane ( ) {
    enum ksDrawInScreenPlaneEnum _result;
    HRESULT _hr = get_AlwaysDrawInScreenPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6697)
inline void IExternalTessellationObject::PutAlwaysDrawInScreenPlane ( enum ksDrawInScreenPlaneEnum PVal ) {
    HRESULT _hr = put_AlwaysDrawInScreenPlane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6698)
inline VARIANT_BOOL IExternalTessellationObject::GetNonGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6699)
inline void IExternalTessellationObject::PutNonGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6700)
inline VARIANT_BOOL IExternalTessellationObject::SelectTextureImage ( long TexImgId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SelectTextureImage(TexImgId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6701)
inline VARIANT_BOOL IExternalTessellationObject::GetNonPickable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonPickable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6702)
inline void IExternalTessellationObject::PutNonPickable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonPickable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6703)
inline VARIANT_BOOL IExternalTessellationObject::SetEdgeColors ( const _variant_t & Colors ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetEdgeColors(Colors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExternalGDIObject wrapper method implementations
//

#pragma implementation_key(6704)
inline long IExternalGDIObject::GetObjectID ( ) {
    long _result = 0;
    HRESULT _hr = get_ObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6705)
inline VARIANT_BOOL IExternalGDIObject::SetTexts ( const _variant_t & Texts, const _variant_t & Points, const _variant_t & Colors, const _variant_t & Fonts, VARIANT_BOOL Is3DPoints ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTexts(Texts, Points, Colors, Fonts, Is3DPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6706)
inline void IExternalGDIObject::PutVisible ( struct IDocumentFrame * Frame, VARIANT_BOOL _arg2 ) {
    HRESULT _hr = put_Visible(Frame, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6707)
inline VARIANT_BOOL IExternalGDIObject::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6708)
inline VARIANT_BOOL IExternalGDIObject::SetPlace ( const _variant_t & Place ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPlace(Place, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6709)
inline VARIANT_BOOL IExternalGDIObject::GetNonScalableX ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonScalableX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6710)
inline void IExternalGDIObject::PutNonScalableX ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonScalableX(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6711)
inline VARIANT_BOOL IExternalGDIObject::GetNonScalableY ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonScalableY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6712)
inline void IExternalGDIObject::PutNonScalableY ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonScalableY(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6713)
inline VARIANT_BOOL IExternalGDIObject::GetNonScalableZ ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonScalableZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6714)
inline void IExternalGDIObject::PutNonScalableZ ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonScalableZ(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6715)
inline enum ksDrawInScreenPlaneEnum IExternalGDIObject::GetAlwaysDrawInScreenPlane ( ) {
    enum ksDrawInScreenPlaneEnum _result;
    HRESULT _hr = get_AlwaysDrawInScreenPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6716)
inline void IExternalGDIObject::PutAlwaysDrawInScreenPlane ( enum ksDrawInScreenPlaneEnum PVal ) {
    HRESULT _hr = put_AlwaysDrawInScreenPlane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6717)
inline VARIANT_BOOL IExternalGDIObject::SetTextsAlign ( const _variant_t & TextsAlign ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTextsAlign(TextsAlign, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6718)
inline VARIANT_BOOL IExternalGDIObject::SetBkColors ( const _variant_t & BkColors ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBkColors(BkColors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6719)
inline VARIANT_BOOL IExternalGDIObject::GetNonPickable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NonPickable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6720)
inline void IExternalGDIObject::PutNonPickable ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NonPickable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6721)
inline VARIANT_BOOL IExternalGDIObject::SetTextColors ( const _variant_t & textColors ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTextColors(textColors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6722)
inline VARIANT_BOOL IExternalGDIObject::SetTextOrientation ( const _variant_t & textOrients ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetTextOrientation(textOrients, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6723)
inline VARIANT_BOOL IExternalGDIObject::GetScalableText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScalableText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6724)
inline void IExternalGDIObject::PutScalableText ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ScalableText(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IExternalTessellationManager wrapper method implementations
//

#pragma implementation_key(6725)
inline IExternalTessellationObjectPtr IExternalTessellationManager::Add ( ) {
    struct IExternalTessellationObject * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExternalTessellationObjectPtr(_result, false);
}

#pragma implementation_key(6726)
inline IExternalTessellationObjectPtr IExternalTessellationManager::GetTessellationObject ( long Id ) {
    struct IExternalTessellationObject * _result = 0;
    HRESULT _hr = get_TessellationObject(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExternalTessellationObjectPtr(_result, false);
}

#pragma implementation_key(6727)
inline void IExternalTessellationManager::PutObjectsVisible ( const _variant_t & Ids, struct IDocumentFrame * Frame, VARIANT_BOOL _arg3 ) {
    HRESULT _hr = put_ObjectsVisible(Ids, Frame, _arg3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6728)
inline VARIANT_BOOL IExternalTessellationManager::DeleteObjects ( const _variant_t & Id ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteObjects(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6729)
inline VARIANT_BOOL IExternalTessellationManager::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6730)
inline IExternalGDIObjectPtr IExternalTessellationManager::AddGDIObject ( ) {
    struct IExternalGDIObject * _result = 0;
    HRESULT _hr = raw_AddGDIObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExternalGDIObjectPtr(_result, false);
}

#pragma implementation_key(6731)
inline IExternalGDIObjectPtr IExternalTessellationManager::GetGDIObject ( long Id ) {
    struct IExternalGDIObject * _result = 0;
    HRESULT _hr = get_GDIObject(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExternalGDIObjectPtr(_result, false);
}

#pragma implementation_key(6732)
inline long IExternalTessellationManager::CreateTextureImage ( long Width, long Heigh, VARIANT_BOOL RGBA, VARIANT_BOOL WrapMode, VARIANT_BOOL FiltMode, const _variant_t & ImageData ) {
    long _result = 0;
    HRESULT _hr = raw_CreateTextureImage(Width, Heigh, RGBA, WrapMode, FiltMode, ImageData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6733)
inline VARIANT_BOOL IExternalTessellationManager::DeleteTextureImage ( long TexImgId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteTextureImage(TexImgId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6734)
inline VARIANT_BOOL IExternalTessellationManager::PickObjects ( struct IDocumentFrame * Frame, const _variant_t & PickRay, VARIANT_BOOL Visible, VARIANT * PickedObjs, VARIANT * PickedPars ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PickObjects(Frame, PickRay, Visible, PickedObjs, PickedPars, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6735)
inline VARIANT_BOOL IExternalTessellationManager::DisableModelDrawing ( long ForElements ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DisableModelDrawing(ForElements, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6736)
inline VARIANT_BOOL IExternalTessellationManager::EnableModelDrawing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EnableModelDrawing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6737)
inline VARIANT_BOOL IExternalTessellationManager::IsModelDrawingEnabled ( long ForElements ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsModelDrawingEnabled(ForElements, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6738)
inline void IExternalTessellationManager::PutDisableModelRotation ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_DisableModelRotation(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6739)
inline VARIANT_BOOL IExternalTessellationManager::GetDisableModelRotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableModelRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICircularCopyObjectParam wrapper method implementations
//

#pragma implementation_key(6740)
inline void ICircularCopyObjectParam::PutRadius ( double Val ) {
    HRESULT _hr = put_Radius(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6741)
inline double ICircularCopyObjectParam::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6742)
inline void ICircularCopyObjectParam::PutStep1 ( double PVal ) {
    HRESULT _hr = put_Step1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6743)
inline double ICircularCopyObjectParam::GetStep1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6744)
inline void ICircularCopyObjectParam::PutStepFactor1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StepFactor1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6745)
inline VARIANT_BOOL ICircularCopyObjectParam::GetStepFactor1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StepFactor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6746)
inline void ICircularCopyObjectParam::PutCount1 ( long Val ) {
    HRESULT _hr = put_Count1(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6747)
inline long ICircularCopyObjectParam::GetCount1 ( ) {
    long _result = 0;
    HRESULT _hr = get_Count1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6748)
inline void ICircularCopyObjectParam::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6749)
inline double ICircularCopyObjectParam::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6750)
inline void ICircularCopyObjectParam::PutStep2 ( double PVal ) {
    HRESULT _hr = put_Step2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6751)
inline double ICircularCopyObjectParam::GetStep2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6752)
inline void ICircularCopyObjectParam::PutStepFactor2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StepFactor2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6753)
inline VARIANT_BOOL ICircularCopyObjectParam::GetStepFactor2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StepFactor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6754)
inline void ICircularCopyObjectParam::PutCount2 ( long PVal ) {
    HRESULT _hr = put_Count2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6755)
inline long ICircularCopyObjectParam::GetCount2 ( ) {
    long _result = 0;
    HRESULT _hr = get_Count2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6756)
inline void ICircularCopyObjectParam::PutSaveCentreCopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveCentreCopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6757)
inline VARIANT_BOOL ICircularCopyObjectParam::GetSaveCentreCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveCentreCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6758)
inline void ICircularCopyObjectParam::PutTurnObject ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TurnObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6759)
inline VARIANT_BOOL ICircularCopyObjectParam::GetTurnObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TurnObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMeshCopyObjectParam wrapper method implementations
//

#pragma implementation_key(6760)
inline void IMeshCopyObjectParam::PutAngle1 ( double Val ) {
    HRESULT _hr = put_Angle1(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6761)
inline double IMeshCopyObjectParam::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6762)
inline void IMeshCopyObjectParam::PutStep1 ( double PVal ) {
    HRESULT _hr = put_Step1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6763)
inline double IMeshCopyObjectParam::GetStep1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6764)
inline void IMeshCopyObjectParam::PutStepFactor1 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StepFactor1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6765)
inline VARIANT_BOOL IMeshCopyObjectParam::GetStepFactor1 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StepFactor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6766)
inline void IMeshCopyObjectParam::PutCount1 ( long Val ) {
    HRESULT _hr = put_Count1(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6767)
inline long IMeshCopyObjectParam::GetCount1 ( ) {
    long _result = 0;
    HRESULT _hr = get_Count1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6768)
inline void IMeshCopyObjectParam::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6769)
inline double IMeshCopyObjectParam::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6770)
inline void IMeshCopyObjectParam::PutStep2 ( double PVal ) {
    HRESULT _hr = put_Step2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6771)
inline double IMeshCopyObjectParam::GetStep2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Step2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6772)
inline void IMeshCopyObjectParam::PutStepFactor2 ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StepFactor2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6773)
inline VARIANT_BOOL IMeshCopyObjectParam::GetStepFactor2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StepFactor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6774)
inline void IMeshCopyObjectParam::PutCount2 ( long PVal ) {
    HRESULT _hr = put_Count2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6775)
inline long IMeshCopyObjectParam::GetCount2 ( ) {
    long _result = 0;
    HRESULT _hr = get_Count2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6776)
inline void IMeshCopyObjectParam::PutSaveCornersCopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveCornersCopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6777)
inline VARIANT_BOOL IMeshCopyObjectParam::GetSaveCornersCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveCornersCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6778)
inline void IMeshCopyObjectParam::PutSaveCentreCopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveCentreCopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6779)
inline VARIANT_BOOL IMeshCopyObjectParam::GetSaveCentreCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveCentreCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyOpticalProps wrapper method implementations
//

#pragma implementation_key(6780)
inline IColorParam7Ptr IPropertyOpticalProps::GetColorParam ( ) {
    struct IColorParam7 * _result = 0;
    HRESULT _hr = get_ColorParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorParam7Ptr(_result, false);
}

#pragma implementation_key(6781)
inline VARIANT_BOOL IPropertyOpticalProps::Init ( struct IColorParam7 * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Init(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6782)
inline VARIANT_BOOL IPropertyOpticalProps::GetEnableAmbient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAmbient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6783)
inline void IPropertyOpticalProps::PutEnableAmbient ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableAmbient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6784)
inline VARIANT_BOOL IPropertyOpticalProps::GetEnableDiffuse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDiffuse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6785)
inline void IPropertyOpticalProps::PutEnableDiffuse ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableDiffuse(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6786)
inline VARIANT_BOOL IPropertyOpticalProps::GetEnableSpecularity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSpecularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6787)
inline void IPropertyOpticalProps::PutEnableSpecularity ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableSpecularity(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6788)
inline VARIANT_BOOL IPropertyOpticalProps::GetEnableShininess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableShininess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6789)
inline void IPropertyOpticalProps::PutEnableShininess ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableShininess(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6790)
inline VARIANT_BOOL IPropertyOpticalProps::GetEnableTransparency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6791)
inline void IPropertyOpticalProps::PutEnableTransparency ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableTransparency(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6792)
inline VARIANT_BOOL IPropertyOpticalProps::GetEnableEmission ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableEmission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6793)
inline void IPropertyOpticalProps::PutEnableEmission ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableEmission(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITablePattern wrapper method implementations
//

#pragma implementation_key(6794)
inline void ITablePattern::PutFileName ( _bstr_t Name ) {
    HRESULT _hr = put_FileName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6795)
inline _bstr_t ITablePattern::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6796)
inline void ITablePattern::PutPointsType ( enum ksPoint3DTypeEnum Type ) {
    HRESULT _hr = put_PointsType(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6797)
inline enum ksPoint3DTypeEnum ITablePattern::GetPointsType ( ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6798)
inline void ITablePattern::PutSaveInitialOrientation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveInitialOrientation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6799)
inline VARIANT_BOOL ITablePattern::GetSaveInitialOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveInitialOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6800)
inline void ITablePattern::PutOrientationType ( enum ksPatternExemplarsOrientationTypeEnum PVal ) {
    HRESULT _hr = put_OrientationType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6801)
inline enum ksPatternExemplarsOrientationTypeEnum ITablePattern::GetOrientationType ( ) {
    enum ksPatternExemplarsOrientationTypeEnum _result;
    HRESULT _hr = get_OrientationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6802)
inline void ITablePattern::PutOrientationObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_OrientationObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6803)
inline IModelObjectPtr ITablePattern::GetOrientationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_OrientationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IModelObject1 wrapper method implementations
//

#pragma implementation_key(6804)
inline _variant_t IModelObject1::GetParents ( enum ksRelationTypeEnum RelType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parents(RelType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6805)
inline _variant_t IModelObject1::GetChildrens ( enum ksRelationTypeEnum RelType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Childrens(RelType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6806)
inline _variant_t IModelObject1::GetLinks ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6807)
inline VARIANT_BOOL IModelObject1::IsMyLink ( enum ksRelationTypeEnum RelType, struct IModelObject * Primitive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMyLink(RelType, Primitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6808)
inline long IModelObject1::GetLayerNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_LayerNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6809)
inline void IModelObject1::PutLayerNumber ( long PVal ) {
    HRESULT _hr = put_LayerNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6810)
inline void IModelObject1::PutProjected ( enum ksProjectionOptionEnum PVal ) {
    HRESULT _hr = put_Projected(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6811)
inline enum ksProjectionOptionEnum IModelObject1::GetProjected ( ) {
    enum ksProjectionOptionEnum _result;
    HRESULT _hr = get_Projected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6812)
inline void IModelObject1::PutHiddenEx ( enum ksVisibleStateEnum PVal ) {
    HRESULT _hr = put_HiddenEx(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6813)
inline enum ksVisibleStateEnum IModelObject1::GetHiddenEx ( ) {
    enum ksVisibleStateEnum _result;
    HRESULT _hr = get_HiddenEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6814)
inline void IModelObject1::PutEditable ( enum ksEditableStateEnum PVal ) {
    HRESULT _hr = put_Editable(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6815)
inline enum ksEditableStateEnum IModelObject1::GetEditable ( ) {
    enum ksEditableStateEnum _result;
    HRESULT _hr = get_Editable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6816)
inline VARIANT_BOOL IModelObject1::Reset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Reset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6817)
inline IKompasAPIObjectPtr IModelObject1::GetMathObject ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_MathObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(6818)
inline void IModelObject1::PutConnectedWithInitialEmbodiment ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ConnectedWithInitialEmbodiment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6819)
inline VARIANT_BOOL IModelObject1::GetConnectedWithInitialEmbodiment ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConnectedWithInitialEmbodiment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6820)
inline VARIANT_BOOL IModelObject1::GetIsEditableObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEditableObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6821)
inline VARIANT_BOOL IModelObject1::GetIsExternalObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsExternalObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyLinkButton wrapper method implementations
//

#pragma implementation_key(6822)
inline VARIANT_BOOL IPropertyLinkButton::AddButton ( long BtnID, _bstr_t Lebel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddButton(BtnID, Lebel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6823)
inline void IPropertyLinkButton::PutButtonChecked ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonChecked(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6824)
inline VARIANT_BOOL IPropertyLinkButton::GetButtonChecked ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonChecked(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6825)
inline void IPropertyLinkButton::PutButtonEnable ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonEnable(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6826)
inline VARIANT_BOOL IPropertyLinkButton::GetButtonEnable ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonEnable(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6827)
inline void IPropertyLinkButton::PutButtonVisible ( long BtnID, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ButtonVisible(BtnID, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6828)
inline VARIANT_BOOL IPropertyLinkButton::GetButtonVisible ( long BtnID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ButtonVisible(BtnID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProductDataManager wrapper method implementations
//

#pragma implementation_key(6829)
inline _variant_t IProductDataManager::GetProductObjects ( long Filter ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ProductObjects(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6830)
inline IPropertyKeeperPtr IProductDataManager::GetProductObject ( _bstr_t UniqueMetaObjectKey ) {
    struct IPropertyKeeper * _result = 0;
    HRESULT _hr = get_ProductObject(UniqueMetaObjectKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyKeeperPtr(_result, false);
}

#pragma implementation_key(6831)
inline IPropertyKeeperPtr IProductDataManager::AddProductObject ( struct IPropertyKeeper * Parent, _bstr_t Name, enum ksProductObjectTypeEnum ObjectType ) {
    struct IPropertyKeeper * _result = 0;
    HRESULT _hr = raw_AddProductObject(Parent, Name, ObjectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyKeeperPtr(_result, false);
}

#pragma implementation_key(6832)
inline VARIANT_BOOL IProductDataManager::DeleteProductObject ( _bstr_t UniqueMetaObjectKey ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteProductObject(UniqueMetaObjectKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6833)
inline _variant_t IProductDataManager::GetGeometry ( struct IPropertyKeeper * PropObject ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Geometry(PropObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6834)
inline void IProductDataManager::PutGeometry ( struct IPropertyKeeper * PropObject, const _variant_t & PVal ) {
    HRESULT _hr = put_Geometry(PropObject, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6835)
inline _variant_t IProductDataManager::GetObjectAttachedDocuments ( struct IPropertyKeeper * PropObject ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectAttachedDocuments(PropObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6836)
inline void IProductDataManager::PutObjectAttachedDocuments ( struct IPropertyKeeper * PropObject, const _variant_t & PVal ) {
    HRESULT _hr = put_ObjectAttachedDocuments(PropObject, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6837)
inline _bstr_t IProductDataManager::GetMetaProductInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MetaProductInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6838)
inline void IProductDataManager::PutMetaProductInfo ( _bstr_t PVal ) {
    HRESULT _hr = put_MetaProductInfo(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6839)
inline _bstr_t IProductDataManager::GetObjectMetaProductInfo ( struct IPropertyKeeper * PropObject ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectMetaProductInfo(PropObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6840)
inline void IProductDataManager::PutObjectMetaProductInfo ( struct IPropertyKeeper * PropObject, _bstr_t PVal ) {
    HRESULT _hr = put_ObjectMetaProductInfo(PropObject, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6841)
inline _bstr_t IProductDataManager::GetReferenceData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6842)
inline void IProductDataManager::PutReferenceData ( _bstr_t PVal ) {
    HRESULT _hr = put_ReferenceData(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6843)
inline _variant_t IProductDataManager::GetReferenceDataIds ( _bstr_t ReferenceDataType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReferenceDataIds(ReferenceDataType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6844)
inline _bstr_t IProductDataManager::GetReferenceDataInfo ( _bstr_t ReferenceDataType, _bstr_t ReferenceDataId ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceDataInfo(ReferenceDataType, ReferenceDataId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6845)
inline void IProductDataManager::PutReferenceDataInfo ( _bstr_t ReferenceDataType, _bstr_t ReferenceDataId, _bstr_t PVal ) {
    HRESULT _hr = put_ReferenceDataInfo(ReferenceDataType, ReferenceDataId, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6846)
inline _bstr_t IProductDataManager::AddReferenceData ( _bstr_t ReferenceDataType, _bstr_t ReferenceDataInfo ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AddReferenceData(ReferenceDataType, ReferenceDataInfo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6847)
inline VARIANT_BOOL IProductDataManager::DeleteReferenceData ( _bstr_t ReferenceDataType, _bstr_t ReferenceDataId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteReferenceData(ReferenceDataType, ReferenceDataId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMeshObject3D wrapper method implementations
//

#pragma implementation_key(6848)
inline VARIANT_BOOL IMeshObject3D::InitByObjects ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InitByObjects(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IZoneParametersByBorderPoints wrapper method implementations
//

#pragma implementation_key(6849)
inline enum ksGabaritBuildingTypeEnum IZoneParametersByBorderPoints::GetBuildingType ( ) {
    enum ksGabaritBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6850)
inline void IZoneParametersByBorderPoints::PutBuildingType ( enum ksGabaritBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6851)
inline VARIANT_BOOL IZoneParametersByBorderPoints::GetPoint ( VARIANT_BOOL First, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(First, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6852)
inline VARIANT_BOOL IZoneParametersByBorderPoints::SetPoint ( VARIANT_BOOL First, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(First, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6853)
inline void IZoneParametersByBorderPoints::PutAssociationObject ( VARIANT_BOOL First, struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6854)
inline IModelObjectPtr IZoneParametersByBorderPoints::GetAssociationObject ( VARIANT_BOOL First ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(6855)
inline void IZoneParametersByBorderPoints::PutPointType ( VARIANT_BOOL First, enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointType(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6856)
inline enum ksPoint3DTypeEnum IZoneParametersByBorderPoints::GetPointType ( VARIANT_BOOL First ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointType(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6857)
inline IKompasAPIObjectPtr IZoneParametersByBorderPoints::GetPointParameters ( VARIANT_BOOL First ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

//
// interface IDynamicCrossSectionStepParametersByBorderPoints wrapper method implementations
//

#pragma implementation_key(6858)
inline enum ksGabaritBuildingTypeEnum IDynamicCrossSectionStepParametersByBorderPoints::GetBuildingType ( ) {
    enum ksGabaritBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6859)
inline void IDynamicCrossSectionStepParametersByBorderPoints::PutBuildingType ( enum ksGabaritBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6860)
inline VARIANT_BOOL IDynamicCrossSectionStepParametersByBorderPoints::GetPoint ( VARIANT_BOOL First, double * X, double * Y, double * Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPoint(First, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6861)
inline VARIANT_BOOL IDynamicCrossSectionStepParametersByBorderPoints::SetPoint ( VARIANT_BOOL First, double X, double Y, double Z ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPoint(First, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6862)
inline void IDynamicCrossSectionStepParametersByBorderPoints::PutAssociationObject ( VARIANT_BOOL First, struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6863)
inline IModelObjectPtr IDynamicCrossSectionStepParametersByBorderPoints::GetAssociationObject ( VARIANT_BOOL First ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(6864)
inline void IDynamicCrossSectionStepParametersByBorderPoints::PutPointType ( VARIANT_BOOL First, enum ksPoint3DTypeEnum PVal ) {
    HRESULT _hr = put_PointType(First, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6865)
inline enum ksPoint3DTypeEnum IDynamicCrossSectionStepParametersByBorderPoints::GetPointType ( VARIANT_BOOL First ) {
    enum ksPoint3DTypeEnum _result;
    HRESULT _hr = get_PointType(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6866)
inline IKompasAPIObjectPtr IDynamicCrossSectionStepParametersByBorderPoints::GetPointParameters ( VARIANT_BOOL First ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_PointParameters(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

//
// interface IProcessWithVariables wrapper method implementations
//

#pragma implementation_key(6867)
inline VARIANT_BOOL IProcessWithVariables::SetControlExpression ( struct IPropertyControl * Control, _bstr_t VariableName, _bstr_t Expression ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetControlExpression(Control, VariableName, Expression, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6868)
inline _bstr_t IProcessWithVariables::GetControlExpression ( struct IPropertyControl * Control ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetControlExpression(Control, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6869)
inline _bstr_t IProcessWithVariables::GetControlVariableName ( struct IPropertyControl * Control ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetControlVariableName(Control, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6870)
inline VARIANT_BOOL IProcessWithVariables::ClearExpressions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearExpressions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6871)
inline VARIANT_BOOL IProcessWithVariables::UpdateExpressionsControls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UpdateExpressionsControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILineSegmentAndPointDimension wrapper method implementations
//

#pragma implementation_key(6872)
inline VARIANT_BOOL ILineSegmentAndPointDimension::GetBaseObjectPoint ( long PointIndex, double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBaseObjectPoint(PointIndex, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6873)
inline VARIANT_BOOL ILineSegmentAndPointDimension::SetBaseObjectPoint ( long PointIndex, double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBaseObjectPoint(PointIndex, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6874)
inline IDrawingObjectPtr ILineSegmentAndPointDimension::GetBaseObject ( long Index ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = raw_GetBaseObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(6875)
inline VARIANT_BOOL ILineSegmentAndPointDimension::SetBaseObject ( long Index, struct IDrawingObject * NewObject, long SegmentIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBaseObject(Index, NewObject, SegmentIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAdditionConvertParameters wrapper method implementations
//

#pragma implementation_key(6876)
inline void IAdditionConvertParameters::PutFormat ( enum ksKOMPASConverterEnum PVal ) {
    HRESULT _hr = put_Format(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6877)
inline enum ksKOMPASConverterEnum IAdditionConvertParameters::GetFormat ( ) {
    enum ksKOMPASConverterEnum _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6878)
inline void IAdditionConvertParameters::PutFormatBinary ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FormatBinary(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6879)
inline VARIANT_BOOL IAdditionConvertParameters::GetFormatBinary ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FormatBinary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6880)
inline void IAdditionConvertParameters::PutTopolgyIncluded ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TopolgyIncluded(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6881)
inline VARIANT_BOOL IAdditionConvertParameters::GetTopolgyIncluded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TopolgyIncluded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6882)
inline void IAdditionConvertParameters::PutTextExportForm ( enum ksTextExportFormEnum PVal ) {
    HRESULT _hr = put_TextExportForm(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6883)
inline enum ksTextExportFormEnum IAdditionConvertParameters::GetTextExportForm ( ) {
    enum ksTextExportFormEnum _result;
    HRESULT _hr = get_TextExportForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6884)
inline void IAdditionConvertParameters::PutStepType ( enum ksStepTypeEnum Result ) {
    HRESULT _hr = put_StepType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6885)
inline enum ksStepTypeEnum IAdditionConvertParameters::GetStepType ( ) {
    enum ksStepTypeEnum _result;
    HRESULT _hr = get_StepType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6886)
inline void IAdditionConvertParameters::PutStep ( double Result ) {
    HRESULT _hr = put_Step(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6887)
inline double IAdditionConvertParameters::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6888)
inline void IAdditionConvertParameters::PutAngle ( double Result ) {
    HRESULT _hr = put_Angle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6889)
inline double IAdditionConvertParameters::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6890)
inline void IAdditionConvertParameters::PutLength ( double Result ) {
    HRESULT _hr = put_Length(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6891)
inline double IAdditionConvertParameters::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6892)
inline void IAdditionConvertParameters::PutMaxTeselationCellCount ( long Result ) {
    HRESULT _hr = put_MaxTeselationCellCount(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6893)
inline long IAdditionConvertParameters::GetMaxTeselationCellCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxTeselationCellCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6894)
inline void IAdditionConvertParameters::PutLengthUnits ( enum ksLengthUnitsEnum Result ) {
    HRESULT _hr = put_LengthUnits(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6895)
inline enum ksLengthUnitsEnum IAdditionConvertParameters::GetLengthUnits ( ) {
    enum ksLengthUnitsEnum _result;
    HRESULT _hr = get_LengthUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6896)
inline void IAdditionConvertParameters::PutStitchSurfaces ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StitchSurfaces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6897)
inline VARIANT_BOOL IAdditionConvertParameters::GetStitchSurfaces ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StitchSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6898)
inline void IAdditionConvertParameters::PutStitchPrecision ( double Result ) {
    HRESULT _hr = put_StitchPrecision(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6899)
inline double IAdditionConvertParameters::GetStitchPrecision ( ) {
    double _result = 0;
    HRESULT _hr = get_StitchPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6900)
inline void IAdditionConvertParameters::PutNeedCreateComponentsFiles ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NeedCreateComponentsFiles(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6901)
inline VARIANT_BOOL IAdditionConvertParameters::GetNeedCreateComponentsFiles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NeedCreateComponentsFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6902)
inline void IAdditionConvertParameters::PutSaveResultDocument ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SaveResultDocument(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6903)
inline VARIANT_BOOL IAdditionConvertParameters::GetSaveResultDocument ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveResultDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6904)
inline void IAdditionConvertParameters::PutConfiguration ( const _variant_t & PVal ) {
    HRESULT _hr = put_Configuration(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6905)
inline _variant_t IAdditionConvertParameters::GetConfiguration ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Configuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6906)
inline void IAdditionConvertParameters::PutAuthor ( _bstr_t PVal ) {
    HRESULT _hr = put_Author(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6907)
inline _bstr_t IAdditionConvertParameters::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6908)
inline void IAdditionConvertParameters::PutOrganization ( _bstr_t PVal ) {
    HRESULT _hr = put_Organization(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6909)
inline _bstr_t IAdditionConvertParameters::GetOrganization ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Organization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6910)
inline void IAdditionConvertParameters::PutComment ( _bstr_t PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6911)
inline _bstr_t IAdditionConvertParameters::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6912)
inline void IAdditionConvertParameters::PutPassword ( _bstr_t PVal ) {
    HRESULT _hr = put_Password(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6913)
inline _bstr_t IAdditionConvertParameters::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6914)
inline void IAdditionConvertParameters::PutObjectsOptions ( enum ksD3ConverterOptionsEnum Option, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ObjectsOptions(Option, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6915)
inline VARIANT_BOOL IAdditionConvertParameters::GetObjectsOptions ( enum ksD3ConverterOptionsEnum Option ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ObjectsOptions(Option, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6916)
inline IPlacement3DPtr IAdditionConvertParameters::GetPlacement ( ) {
    struct IPlacement3D * _result = 0;
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlacement3DPtr(_result, false);
}

#pragma implementation_key(6917)
inline void IAdditionConvertParameters::PutConfigurationFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_ConfigurationFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6918)
inline _bstr_t IAdditionConvertParameters::GetConfigurationFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConfigurationFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6919)
inline VARIANT_BOOL IAdditionConvertParameters::SaveConfigurationFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveConfigurationFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6920)
inline VARIANT_BOOL IAdditionConvertParameters::LoadConfigurationFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadConfigurationFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6921)
inline VARIANT_BOOL IAdditionConvertParameters::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IApplication wrapper method implementations
//

#pragma implementation_key(6922)
inline void IApplication::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6923)
inline VARIANT_BOOL IApplication::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6924)
inline IDocumentsPtr IApplication::GetDocuments ( ) {
    struct IDocuments * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDocumentsPtr(_result, false);
}

#pragma implementation_key(6925)
inline HRESULT IApplication::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6926)
inline IProcessParamPtr IApplication::CreateProcessParam ( ) {
    struct IProcessParam * _result = 0;
    HRESULT _hr = raw_CreateProcessParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcessParamPtr(_result, false);
}

#pragma implementation_key(6927)
inline HRESULT IApplication::StopCurrentProcess ( VARIANT_BOOL PostMessage, struct IKompasDocument * PDoc ) {
    HRESULT _hr = raw_StopCurrentProcess(PostMessage, PDoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6928)
inline IPropertyManagerPtr IApplication::CreatePropertyManager ( VARIANT_BOOL NewManager ) {
    struct IPropertyManager * _result = 0;
    HRESULT _hr = raw_CreatePropertyManager(NewManager, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyManagerPtr(_result, false);
}

#pragma implementation_key(6929)
inline void IApplication::PutActiveDocument ( struct IKompasDocument * PDoc ) {
    HRESULT _hr = put_ActiveDocument(PDoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6930)
inline IKompasDocumentPtr IApplication::GetActiveDocument ( ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6931)
inline ILibraryManagerPtr IApplication::GetLibraryManager ( ) {
    struct ILibraryManager * _result = 0;
    HRESULT _hr = get_LibraryManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILibraryManagerPtr(_result, false);
}

#pragma implementation_key(6932)
inline IKompasErrorPtr IApplication::GetKompasError ( ) {
    struct IKompasError * _result = 0;
    HRESULT _hr = get_KompasError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasErrorPtr(_result, false);
}

#pragma implementation_key(6933)
inline IConverterPtr IApplication::GetConverter ( const _variant_t & Library ) {
    struct IConverter * _result = 0;
    HRESULT _hr = get_Converter(Library, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConverterPtr(_result, false);
}

#pragma implementation_key(6934)
inline ICheckSumPtr IApplication::GetCheckSum ( ) {
    struct ICheckSum * _result = 0;
    HRESULT _hr = get_CheckSum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICheckSumPtr(_result, false);
}

#pragma implementation_key(6935)
inline IProgressBarIndicatorPtr IApplication::GetProgressBarIndicator ( ) {
    struct IProgressBarIndicator * _result = 0;
    HRESULT _hr = get_ProgressBarIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProgressBarIndicatorPtr(_result, false);
}

#pragma implementation_key(6936)
inline void IApplication::PutHideMessage ( enum ksHideMessageEnum PVal ) {
    HRESULT _hr = put_HideMessage(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6937)
inline enum ksHideMessageEnum IApplication::GetHideMessage ( ) {
    enum ksHideMessageEnum _result;
    HRESULT _hr = get_HideMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6938)
inline VARIANT_BOOL IApplication::ExecuteKompasCommand ( long CommandID, VARIANT_BOOL PostMessage ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExecuteKompasCommand(CommandID, PostMessage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6939)
inline VARIANT_BOOL IApplication::IsKompasCommandEnable ( long CommandID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsKompasCommandEnable(CommandID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6940)
inline long IApplication::IsKompasCommandCheck ( long CommandID ) {
    long _result = 0;
    HRESULT _hr = raw_IsKompasCommandCheck(CommandID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6941)
inline ISystemSettingsPtr IApplication::GetSystemSettings ( ) {
    struct ISystemSettings * _result = 0;
    HRESULT _hr = get_SystemSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISystemSettingsPtr(_result, false);
}

#pragma implementation_key(6942)
inline _bstr_t IApplication::GetApplicationName ( VARIANT_BOOL FullName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApplicationName(FullName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6943)
inline IMath2DPtr IApplication::GetMath2D ( ) {
    struct IMath2D * _result = 0;
    HRESULT _hr = get_Math2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMath2DPtr(_result, false);
}

#pragma implementation_key(6944)
inline IPrintJobPtr IApplication::GetPrintJob ( ) {
    struct IPrintJob * _result = 0;
    HRESULT _hr = get_PrintJob(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPrintJobPtr(_result, false);
}

#pragma implementation_key(6945)
inline long IApplication::MessageBoxEx ( _bstr_t Text, _bstr_t Caption, long Flags ) {
    long _result = 0;
    HRESULT _hr = raw_MessageBoxEx(Text, Caption, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6946)
inline long IApplication::MessageDlg ( OLE_HANDLE Parent, _bstr_t Text, _bstr_t Caption, _bstr_t Explanation, long Flags, _bstr_t PositiveButton, _bstr_t NegativeButton, _bstr_t CancelButton, long HelpId, _bstr_t HelpFileName ) {
    long _result = 0;
    HRESULT _hr = raw_MessageDlg(Parent, Text, Caption, Explanation, Flags, PositiveButton, NegativeButton, CancelButton, HelpId, HelpFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6947)
inline _bstr_t IApplication::GetCurrentDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6948)
inline void IApplication::PutCurrentDirectory ( _bstr_t PVal ) {
    HRESULT _hr = put_CurrentDirectory(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6949)
inline IStylesPtr IApplication::GetLibraryStyles ( _bstr_t Path, enum ksStylesLibraryTypeEnum StylesType ) {
    struct IStyles * _result = 0;
    HRESULT _hr = get_LibraryStyles(Path, StylesType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStylesPtr(_result, false);
}

//
// interface IDocuments wrapper method implementations
//

#pragma implementation_key(6950)
inline IKompasDocumentPtr IDocuments::GetItem ( const _variant_t & Index ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6951)
inline IKompasDocumentPtr IDocuments::Add ( enum DocumentTypeEnum Type, VARIANT_BOOL Visible ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_Add(Type, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6952)
inline IKompasDocumentPtr IDocuments::Open ( _bstr_t PathName, VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_Open(PathName, Visible, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6953)
inline IKompasDocumentPtr IDocuments::OpenEx ( _bstr_t PathName, VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly, const _variant_t & LoadCombinationIndex ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_OpenEx(PathName, Visible, ReadOnly, LoadCombinationIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6954)
inline _variant_t IDocuments::GetLoadCombinations ( _bstr_t PathName, long * CurrentIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetLoadCombinations(PathName, CurrentIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6955)
inline IKompasDocumentPtr IDocuments::AddWithDefaultSettings ( enum DocumentTypeEnum Type, VARIANT_BOOL Visible ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_AddWithDefaultSettings(Type, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6956)
inline void IDocuments::PutDocumentSynchronize ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DocumentSynchronize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6957)
inline VARIANT_BOOL IDocuments::GetDocumentSynchronize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocumentSynchronize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6958)
inline VARIANT_BOOL IDocuments::GetRecoverMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RecoverMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6959)
inline void IDocuments::PutRecoverMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RecoverMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6960)
inline enum ksRecoverErrorEnum IDocuments::GetRecoverError ( ) {
    enum ksRecoverErrorEnum _result;
    HRESULT _hr = get_RecoverError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6961)
inline void IDocuments::PutRecoverError ( enum ksRecoverErrorEnum PVal ) {
    HRESULT _hr = put_RecoverError(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6962)
inline ILoadCombinationsParamPtr IDocuments::GetLoadCombinationsParam ( _bstr_t PathName ) {
    struct ILoadCombinationsParam * _result = 0;
    HRESULT _hr = raw_GetLoadCombinationsParam(PathName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILoadCombinationsParamPtr(_result, false);
}

#pragma implementation_key(6963)
inline IOpenDocumentParamPtr IDocuments::GetOpenDocumentParam ( ) {
    struct IOpenDocumentParam * _result = 0;
    HRESULT _hr = raw_GetOpenDocumentParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOpenDocumentParamPtr(_result, false);
}

#pragma implementation_key(6964)
inline IKompasDocumentPtr IDocuments::OpenDocument ( _bstr_t FileName, struct IOpenDocumentParam * Param ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_OpenDocument(FileName, Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6965)
inline _variant_t IDocuments::GetEmbodimentsTree ( _bstr_t FileName, enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer, VARIANT_BOOL AddSpaces, long * CurrentEmbodiment ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetEmbodimentsTree(FileName, MarkingType, AddSystemDelimer, AddSpaces, CurrentEmbodiment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6966)
inline _variant_t IDocuments::GetRecoverModeErrorList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RecoverModeErrorList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6967)
inline IKompasDocumentPtr IDocuments::AddCustomDocument ( _bstr_t DocumentTypeId ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_AddCustomDocument(DocumentTypeId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6968)
inline IKompasDocumentPtr IDocuments::AddNewDocumentFromTemplate ( _bstr_t TemplateFileName ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_AddNewDocumentFromTemplate(TemplateFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

//
// interface IKompasDocument wrapper method implementations
//

#pragma implementation_key(6969)
inline enum DocumentTypeEnum IKompasDocument::GetDocumentType ( ) {
    enum DocumentTypeEnum _result;
    HRESULT _hr = get_DocumentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6970)
inline IDocumentFramesPtr IKompasDocument::GetDocumentFrames ( ) {
    struct IDocumentFrames * _result = 0;
    HRESULT _hr = get_DocumentFrames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDocumentFramesPtr(_result, false);
}

#pragma implementation_key(6971)
inline VARIANT_BOOL IKompasDocument::Close ( enum DocumentCloseOptions closeOptions ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Close(closeOptions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6972)
inline HRESULT IKompasDocument::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6973)
inline HRESULT IKompasDocument::SaveAs ( _bstr_t PathName ) {
    HRESULT _hr = raw_SaveAs(PathName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6974)
inline _bstr_t IKompasDocument::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6975)
inline _bstr_t IKompasDocument::GetPathName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6976)
inline _bstr_t IKompasDocument::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6977)
inline VARIANT_BOOL IKompasDocument::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6978)
inline VARIANT_BOOL IKompasDocument::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6979)
inline void IKompasDocument::PutActive ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Active(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6980)
inline VARIANT_BOOL IKompasDocument::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6981)
inline void IKompasDocument::PutReadOnly ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6982)
inline VARIANT_BOOL IKompasDocument::GetChanged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Changed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6983)
inline IDocumentSettingsPtr IKompasDocument::GetDocumentSettings ( ) {
    struct IDocumentSettings * _result = 0;
    HRESULT _hr = get_DocumentSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDocumentSettingsPtr(_result, false);
}

#pragma implementation_key(6984)
inline ISpecificationDescriptionsPtr IKompasDocument::GetSpecificationDescriptions ( ) {
    struct ISpecificationDescriptions * _result = 0;
    HRESULT _hr = get_SpecificationDescriptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationDescriptionsPtr(_result, false);
}

#pragma implementation_key(6985)
inline ILayoutSheetsPtr IKompasDocument::GetLayoutSheets ( ) {
    struct ILayoutSheets * _result = 0;
    HRESULT _hr = get_LayoutSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayoutSheetsPtr(_result, false);
}

#pragma implementation_key(6986)
inline IUserDataStoragesMngPtr IKompasDocument::GetUserDataStoragesMng ( ) {
    struct IUserDataStoragesMng * _result = 0;
    HRESULT _hr = get_UserDataStoragesMng(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserDataStoragesMngPtr(_result, false);
}

//
// interface IInsert wrapper method implementations
//

#pragma implementation_key(6987)
inline _bstr_t IInsert::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6988)
inline void IInsert::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6989)
inline _variant_t IInsert::GetComment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6990)
inline void IInsert::PutComment ( const _variant_t & PVal ) {
    HRESULT _hr = put_Comment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6991)
inline _bstr_t IInsert::GetLibraryFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LibraryFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6992)
inline _bstr_t IInsert::GetPathName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6993)
inline IKompasDocumentPtr IInsert::Edit ( ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_Edit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(6994)
inline VARIANT_BOOL IInsert::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6995)
inline enum ksDocumentsLibraryInsertionTypeEnum IInsert::GetInsertType ( ) {
    enum ksDocumentsLibraryInsertionTypeEnum _result;
    HRESULT _hr = get_InsertType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IInserts wrapper method implementations
//

#pragma implementation_key(6996)
inline IInsertPtr IInserts::GetItem ( const _variant_t & Index ) {
    struct IInsert * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertPtr(_result, false);
}

#pragma implementation_key(6997)
inline IInsertPtr IInserts::Add ( _bstr_t Name, enum DocumentTypeEnum DocType ) {
    struct IInsert * _result = 0;
    HRESULT _hr = raw_Add(Name, DocType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertPtr(_result, false);
}

//
// interface IInsertsLibrary wrapper method implementations
//

#pragma implementation_key(6998)
inline _bstr_t IInsertsLibrary::GetActiveFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActiveFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6999)
inline VARIANT_BOOL IInsertsLibrary::SetActiveFolder ( _bstr_t PathFolder, VARIANT_BOOL LastIsFile, VARIANT_BOOL HaveLibName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetActiveFolder(PathFolder, LastIsFile, HaveLibName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7000)
inline IInsertsPtr IInsertsLibrary::GetInserts ( ) {
    struct IInserts * _result = 0;
    HRESULT _hr = get_Inserts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertsPtr(_result, false);
}

#pragma implementation_key(7001)
inline VARIANT_BOOL IInsertsLibrary::AddFolder ( _bstr_t PathFolder ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddFolder(PathFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7002)
inline VARIANT_BOOL IInsertsLibrary::RemoveFolder ( _bstr_t PathFolder ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveFolder(PathFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7003)
inline VARIANT_BOOL IInsertsLibrary::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IInsertsLibraries wrapper method implementations
//

#pragma implementation_key(7004)
inline IInsertsLibraryPtr IInsertsLibraries::GetItem ( const _variant_t & Index ) {
    struct IInsertsLibrary * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertsLibraryPtr(_result, false);
}

#pragma implementation_key(7005)
inline IInsertsLibraryPtr IInsertsLibraries::Add ( _bstr_t PathName, _bstr_t LibManagerFolder ) {
    struct IInsertsLibrary * _result = 0;
    HRESULT _hr = raw_Add(PathName, LibManagerFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertsLibraryPtr(_result, false);
}

//
// interface ILibraryManager wrapper method implementations
//

#pragma implementation_key(7006)
inline IProceduresLibrariesPtr ILibraryManager::GetProceduresLibraries ( ) {
    struct IProceduresLibraries * _result = 0;
    HRESULT _hr = get_ProceduresLibraries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProceduresLibrariesPtr(_result, false);
}

#pragma implementation_key(7007)
inline IInsertsLibrariesPtr ILibraryManager::GetFragmentsLibraries ( ) {
    struct IInsertsLibraries * _result = 0;
    HRESULT _hr = get_FragmentsLibraries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertsLibrariesPtr(_result, false);
}

#pragma implementation_key(7008)
inline IInsertsLibrariesPtr ILibraryManager::GetModelsLibraries ( ) {
    struct IInsertsLibraries * _result = 0;
    HRESULT _hr = get_ModelsLibraries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertsLibrariesPtr(_result, false);
}

#pragma implementation_key(7009)
inline VARIANT_BOOL ILibraryManager::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7010)
inline void ILibraryManager::PutVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Visible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7011)
inline enum PropertyManagerLayout ILibraryManager::GetLayout ( ) {
    enum PropertyManagerLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7012)
inline _bstr_t ILibraryManager::GetActiveFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActiveFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7013)
inline void ILibraryManager::PutActiveFolder ( _bstr_t PVal ) {
    HRESULT _hr = put_ActiveFolder(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7014)
inline _variant_t ILibraryManager::GetActiveFolderComment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ActiveFolderComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7015)
inline void ILibraryManager::PutActiveFolderComment ( const _variant_t & PVal ) {
    HRESULT _hr = put_ActiveFolderComment(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7016)
inline HRESULT ILibraryManager::AddFolder ( _bstr_t PathFolder ) {
    HRESULT _hr = raw_AddFolder(PathFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7017)
inline HRESULT ILibraryManager::RemoveFolder ( _bstr_t PathFolder ) {
    HRESULT _hr = raw_RemoveFolder(PathFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7018)
inline IProceduresLibraryPtr ILibraryManager::GetSystemControlStartLibrary ( ) {
    struct IProceduresLibrary * _result = 0;
    HRESULT _hr = get_SystemControlStartLibrary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProceduresLibraryPtr(_result, false);
}

#pragma implementation_key(7019)
inline IProceduresLibraryPtr ILibraryManager::GetCurrentLibrary ( ) {
    struct IProceduresLibrary * _result = 0;
    HRESULT _hr = get_CurrentLibrary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProceduresLibraryPtr(_result, false);
}

#pragma implementation_key(7020)
inline VARIANT_BOOL ILibraryManager::SetCurrentLibrary ( struct IProceduresLibrary * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCurrentLibrary(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7021)
inline enum ksSystemControlStartEnum ILibraryManager::GetSystemControlStartResult ( ) {
    enum ksSystemControlStartEnum _result;
    HRESULT _hr = get_SystemControlStartResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7022)
inline IInsertsLibrariesPtr ILibraryManager::GetDocumentsLibraries ( ) {
    struct IInsertsLibraries * _result = 0;
    HRESULT _hr = get_DocumentsLibraries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertsLibrariesPtr(_result, false);
}

//
// interface ISpecificationDocument wrapper method implementations
//

#pragma implementation_key(7023)
inline IAttachedDocumentsPtr ISpecificationDocument::GetAttachedDocuments ( ) {
    struct IAttachedDocuments * _result = 0;
    HRESULT _hr = get_AttachedDocuments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttachedDocumentsPtr(_result, false);
}

#pragma implementation_key(7024)
inline VARIANT_BOOL ISpecificationDocument::RebuildDocument ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RebuildDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7025)
inline VARIANT_BOOL ISpecificationDocument::GetCrossed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Crossed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITextDocument wrapper method implementations
//

#pragma implementation_key(7026)
inline ITextPtr ITextDocument::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(7027)
inline VARIANT_BOOL ITextDocument::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7028)
inline _variant_t ITextDocument::GetBlocksGabarits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BlocksGabarits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7029)
inline _variant_t ITextDocument::GetBlocksStartLineNumbers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BlocksStartLineNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7030)
inline _variant_t ITextDocument::GetSectionsStartLineNumbers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SectionsStartLineNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IReport wrapper method implementations
//

#pragma implementation_key(7031)
inline enum ksReportTypeEnum IReport::GetReportType ( ) {
    enum ksReportTypeEnum _result;
    HRESULT _hr = get_ReportType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7032)
inline VARIANT_BOOL IReport::GetShowAllObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAllObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7033)
inline void IReport::PutShowAllObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowAllObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7034)
inline IReportStylePtr IReport::GetCurrentReportStyle ( ) {
    struct IReportStyle * _result = 0;
    HRESULT _hr = get_CurrentReportStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportStylePtr(_result, false);
}

#pragma implementation_key(7035)
inline long IReport::GetStylesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_StylesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7036)
inline IReportStylePtr IReport::GetReportStyle ( const _variant_t & Index ) {
    struct IReportStyle * _result = 0;
    HRESULT _hr = get_ReportStyle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportStylePtr(_result, false);
}

#pragma implementation_key(7037)
inline IReportStylePtr IReport::AddStyle ( _bstr_t FileName, double Id ) {
    struct IReportStyle * _result = 0;
    HRESULT _hr = raw_AddStyle(FileName, Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportStylePtr(_result, false);
}

#pragma implementation_key(7038)
inline long IReport::GetCurrentStyleIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentStyleIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7039)
inline void IReport::PutCurrentStyleIndex ( long PVal ) {
    HRESULT _hr = put_CurrentStyleIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7040)
inline VARIANT_BOOL IReport::Rebuild ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Rebuild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7041)
inline _bstr_t IReport::GetSourceFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7042)
inline IKompasDocumentPtr IReport::LoadSourceDocument ( VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly ) {
    struct IKompasDocument * _result = 0;
    HRESULT _hr = raw_LoadSourceDocument(Visible, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocumentPtr(_result, false);
}

#pragma implementation_key(7043)
inline void IReport::PutUseReportFilter ( VARIANT_BOOL Index ) {
    HRESULT _hr = put_UseReportFilter(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7044)
inline VARIANT_BOOL IReport::GetUseReportFilter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseReportFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7045)
inline IReportFilterPtr IReport::GetReportFilter ( ) {
    struct IReportFilter * _result = 0;
    HRESULT _hr = get_ReportFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportFilterPtr(_result, false);
}

#pragma implementation_key(7046)
inline VARIANT_BOOL IReport::SaveAs ( const _variant_t & FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveAs(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPropertyMng wrapper method implementations
//

#pragma implementation_key(7047)
inline long IPropertyMng::GetPropertyCount ( const _variant_t & Libname ) {
    long _result = 0;
    HRESULT _hr = get_PropertyCount(Libname, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7048)
inline IPropertyPtr IPropertyMng::GetProperty ( const _variant_t & Libname, const _variant_t & Index ) {
    struct IProperty * _result = 0;
    HRESULT _hr = raw_GetProperty(Libname, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyPtr(_result, false);
}

#pragma implementation_key(7049)
inline _variant_t IPropertyMng::GetProperties ( const _variant_t & Libname ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperties(Libname, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7050)
inline IPropertyPtr IPropertyMng::AddProperty ( const _variant_t & Libname, const _variant_t & Val ) {
    struct IProperty * _result = 0;
    HRESULT _hr = raw_AddProperty(Libname, Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPropertyPtr(_result, false);
}

#pragma implementation_key(7051)
inline VARIANT_BOOL IPropertyMng::RemoveProperty ( const _variant_t & Libname, const _variant_t & Val ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RemoveProperty(Libname, Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7052)
inline IReportPtr IPropertyMng::GetReport ( const _variant_t & Document, enum ksReportTypeEnum Type ) {
    struct IReport * _result = 0;
    HRESULT _hr = raw_GetReport(Document, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

//
// interface IAssociationTable wrapper method implementations
//

#pragma implementation_key(7053)
inline double IAssociationTable::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7054)
inline void IAssociationTable::PutX ( double Result ) {
    HRESULT _hr = put_X(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7055)
inline double IAssociationTable::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7056)
inline void IAssociationTable::PutY ( double Result ) {
    HRESULT _hr = put_Y(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7057)
inline enum ksTablePointEnum IAssociationTable::GetTablePlaceType ( ) {
    enum ksTablePointEnum _result;
    HRESULT _hr = get_TablePlaceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7058)
inline void IAssociationTable::PutTablePlaceType ( enum ksTablePointEnum PVal ) {
    HRESULT _hr = put_TablePlaceType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7059)
inline IReportPtr IAssociationTable::GetReport ( ) {
    struct IReport * _result = 0;
    HRESULT _hr = get_Report(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(7060)
inline VARIANT_BOOL IAssociationTable::GetActual ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Actual(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7061)
inline VARIANT_BOOL IAssociationTable::Rebuild ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Rebuild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7062)
inline long IAssociationTable::GetTablesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_TablesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7063)
inline ITextPtr IAssociationTable::GetTitle ( long TableIndex ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Title(TableIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(7064)
inline INumericGroupPtr IAssociationTable::GetNumericGroup ( ) {
    struct INumericGroup * _result = 0;
    HRESULT _hr = get_NumericGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INumericGroupPtr(_result, false);
}

#pragma implementation_key(7065)
inline void IAssociationTable::PutNumericGroup ( struct INumericGroup * Result ) {
    HRESULT _hr = put_NumericGroup(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAssociationTables wrapper method implementations
//

#pragma implementation_key(7066)
inline IAssociationTablePtr IAssociationTables::GetAssociationTable ( const _variant_t & Index ) {
    struct IAssociationTable * _result = 0;
    HRESULT _hr = get_AssociationTable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAssociationTablePtr(_result, false);
}

#pragma implementation_key(7067)
inline IAssociationTablePtr IAssociationTables::Add ( const _variant_t & Document, enum ksReportTypeEnum Type ) {
    struct IAssociationTable * _result = 0;
    HRESULT _hr = raw_Add(Document, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAssociationTablePtr(_result, false);
}

//
// interface ISymbols2DContainer wrapper method implementations
//

#pragma implementation_key(7068)
inline ILineDimensionsPtr ISymbols2DContainer::GetLineDimensions ( ) {
    struct ILineDimensions * _result = 0;
    HRESULT _hr = get_LineDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineDimensionsPtr(_result, false);
}

#pragma implementation_key(7069)
inline IRadialDimensionsPtr ISymbols2DContainer::GetRadialDimensions ( ) {
    struct IRadialDimensions * _result = 0;
    HRESULT _hr = get_RadialDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRadialDimensionsPtr(_result, false);
}

#pragma implementation_key(7070)
inline IDiametralDimensionsPtr ISymbols2DContainer::GetDiametralDimensions ( ) {
    struct IDiametralDimensions * _result = 0;
    HRESULT _hr = get_DiametralDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDiametralDimensionsPtr(_result, false);
}

#pragma implementation_key(7071)
inline IAngleDimensionsPtr ISymbols2DContainer::GetAngleDimensions ( ) {
    struct IAngleDimensions * _result = 0;
    HRESULT _hr = get_AngleDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAngleDimensionsPtr(_result, false);
}

#pragma implementation_key(7072)
inline IBreakLineDimensionsPtr ISymbols2DContainer::GetBreakLineDimensions ( ) {
    struct IBreakLineDimensions * _result = 0;
    HRESULT _hr = get_BreakLineDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBreakLineDimensionsPtr(_result, false);
}

#pragma implementation_key(7073)
inline IHeightDimensionsPtr ISymbols2DContainer::GetHeightDimensions ( ) {
    struct IHeightDimensions * _result = 0;
    HRESULT _hr = get_HeightDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHeightDimensionsPtr(_result, false);
}

#pragma implementation_key(7074)
inline IArcDimensionsPtr ISymbols2DContainer::GetArcDimensions ( ) {
    struct IArcDimensions * _result = 0;
    HRESULT _hr = get_ArcDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcDimensionsPtr(_result, false);
}

#pragma implementation_key(7075)
inline IBreakRadialDimensionsPtr ISymbols2DContainer::GetBreakRadialDimensions ( ) {
    struct IBreakRadialDimensions * _result = 0;
    HRESULT _hr = get_BreakRadialDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBreakRadialDimensionsPtr(_result, false);
}

#pragma implementation_key(7076)
inline IRoughsPtr ISymbols2DContainer::GetRoughs ( ) {
    struct IRoughs * _result = 0;
    HRESULT _hr = get_Roughs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRoughsPtr(_result, false);
}

#pragma implementation_key(7077)
inline ILeadersPtr ISymbols2DContainer::GetLeaders ( ) {
    struct ILeaders * _result = 0;
    HRESULT _hr = get_Leaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILeadersPtr(_result, false);
}

#pragma implementation_key(7078)
inline IBasesPtr ISymbols2DContainer::GetBases ( ) {
    struct IBases * _result = 0;
    HRESULT _hr = get_Bases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBasesPtr(_result, false);
}

#pragma implementation_key(7079)
inline ITolerancesPtr ISymbols2DContainer::GetTolerances ( ) {
    struct ITolerances * _result = 0;
    HRESULT _hr = get_Tolerances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITolerancesPtr(_result, false);
}

#pragma implementation_key(7080)
inline IDrawingTablesPtr ISymbols2DContainer::GetDrawingTables ( ) {
    struct IDrawingTables * _result = 0;
    HRESULT _hr = get_DrawingTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTablesPtr(_result, false);
}

#pragma implementation_key(7081)
inline ICutLinesPtr ISymbols2DContainer::GetCutLines ( ) {
    struct ICutLines * _result = 0;
    HRESULT _hr = get_CutLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutLinesPtr(_result, false);
}

#pragma implementation_key(7082)
inline IViewPointersPtr ISymbols2DContainer::GetViewPointers ( ) {
    struct IViewPointers * _result = 0;
    HRESULT _hr = get_ViewPointers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPointersPtr(_result, false);
}

#pragma implementation_key(7083)
inline ICentreMarkersPtr ISymbols2DContainer::GetCentreMarkers ( ) {
    struct ICentreMarkers * _result = 0;
    HRESULT _hr = get_CentreMarkers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICentreMarkersPtr(_result, false);
}

#pragma implementation_key(7084)
inline IRemoteElementsPtr ISymbols2DContainer::GetRemoteElements ( ) {
    struct IRemoteElements * _result = 0;
    HRESULT _hr = get_RemoteElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRemoteElementsPtr(_result, false);
}

#pragma implementation_key(7085)
inline IAxisLinesPtr ISymbols2DContainer::GetAxisLines ( ) {
    struct IAxisLines * _result = 0;
    HRESULT _hr = get_AxisLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisLinesPtr(_result, false);
}

#pragma implementation_key(7086)
inline IWaveLinesPtr ISymbols2DContainer::GetWaveLines ( ) {
    struct IWaveLines * _result = 0;
    HRESULT _hr = get_WaveLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWaveLinesPtr(_result, false);
}

#pragma implementation_key(7087)
inline IBrokenLinesPtr ISymbols2DContainer::GetBrokenLines ( ) {
    struct IBrokenLines * _result = 0;
    HRESULT _hr = get_BrokenLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrokenLinesPtr(_result, false);
}

#pragma implementation_key(7088)
inline IAssociationTablesPtr ISymbols2DContainer::GetAssociationTables ( ) {
    struct IAssociationTables * _result = 0;
    HRESULT _hr = get_AssociationTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAssociationTablesPtr(_result, false);
}

#pragma implementation_key(7089)
inline ICircularsCentriesPtr ISymbols2DContainer::GetCircularsCentries ( ) {
    struct ICircularsCentries * _result = 0;
    HRESULT _hr = get_CircularsCentries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICircularsCentriesPtr(_result, false);
}

#pragma implementation_key(7090)
inline ILinearsCentriesPtr ISymbols2DContainer::GetLinearsCentries ( ) {
    struct ILinearsCentries * _result = 0;
    HRESULT _hr = get_LinearsCentries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILinearsCentriesPtr(_result, false);
}

#pragma implementation_key(7091)
inline IConditionIntersectsPtr ISymbols2DContainer::GetConditionIntersects ( ) {
    struct IConditionIntersects * _result = 0;
    HRESULT _hr = get_ConditionIntersects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConditionIntersectsPtr(_result, false);
}

//
// interface IApplicationServises wrapper method implementations
//

#pragma implementation_key(7092)
inline VARIANT_BOOL IApplicationServises::CheckDocumentMatchingNames ( struct IKompasDocument * Document ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CheckDocumentMatchingNames(Document, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7093)
inline long IApplicationServises::GetCurrentUniqueName ( struct IKompasDocument * Document ) {
    long _result = 0;
    HRESULT _hr = raw_GetCurrentUniqueName(Document, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7094)
inline VARIANT_BOOL IApplicationServises::CreateModelSnapshot ( _bstr_t Path, _bstr_t Options ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CreateModelSnapshot(Path, Options, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationDescriptions wrapper method implementations
//

#pragma implementation_key(7095)
inline ISpecificationDescriptionPtr ISpecificationDescriptions::GetItem ( const _variant_t & Index ) {
    struct ISpecificationDescription * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationDescriptionPtr(_result, false);
}

#pragma implementation_key(7096)
inline ISpecificationDescriptionPtr ISpecificationDescriptions::Add ( _bstr_t LayoutName, long StyleID, _bstr_t SpcName ) {
    struct ISpecificationDescription * _result = 0;
    HRESULT _hr = raw_Add(LayoutName, StyleID, SpcName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationDescriptionPtr(_result, false);
}

#pragma implementation_key(7097)
inline ISpecificationDescriptionPtr ISpecificationDescriptions::GetDescription ( _bstr_t LayoutName, long StyleID ) {
    struct ISpecificationDescription * _result = 0;
    HRESULT _hr = get_Description(LayoutName, StyleID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationDescriptionPtr(_result, false);
}

#pragma implementation_key(7098)
inline ISpecificationDescriptionPtr ISpecificationDescriptions::GetActive ( ) {
    struct ISpecificationDescription * _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationDescriptionPtr(_result, false);
}

#pragma implementation_key(7099)
inline ISpecificationDescriptionPtr ISpecificationDescriptions::GetActiveFromLibStyle ( ) {
    struct ISpecificationDescription * _result = 0;
    HRESULT _hr = get_ActiveFromLibStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationDescriptionPtr(_result, false);
}

//
// interface ISpecificationDescription wrapper method implementations
//

#pragma implementation_key(7100)
inline _bstr_t ISpecificationDescription::GetLayoutName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LayoutName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7101)
inline void ISpecificationDescription::PutLayoutName ( _bstr_t PVal ) {
    HRESULT _hr = put_LayoutName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7102)
inline long ISpecificationDescription::GetStyleID ( ) {
    long _result = 0;
    HRESULT _hr = get_StyleID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7103)
inline void ISpecificationDescription::PutStyleID ( long PVal ) {
    HRESULT _hr = put_StyleID(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7104)
inline _bstr_t ISpecificationDescription::GetSpecificationDocumentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SpecificationDocumentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7105)
inline void ISpecificationDescription::PutSpecificationDocumentName ( _bstr_t PVal ) {
    HRESULT _hr = put_SpecificationDocumentName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7106)
inline VARIANT_BOOL ISpecificationDescription::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7107)
inline void ISpecificationDescription::PutActive ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Active(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7108)
inline VARIANT_BOOL ISpecificationDescription::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7109)
inline VARIANT_BOOL ISpecificationDescription::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7110)
inline ISpecificationStylePtr ISpecificationDescription::GetSpecificationStyle ( ) {
    struct ISpecificationStyle * _result = 0;
    HRESULT _hr = get_SpecificationStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationStylePtr(_result, false);
}

#pragma implementation_key(7111)
inline ISpecificationTuningPtr ISpecificationDescription::GetSpecificationTuning ( ) {
    struct ISpecificationTuning * _result = 0;
    HRESULT _hr = get_SpecificationTuning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationTuningPtr(_result, false);
}

#pragma implementation_key(7112)
inline _variant_t ISpecificationDescription::GetObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7113)
inline ISpecificationBaseObjectsPtr ISpecificationDescription::GetBaseObjects ( ) {
    struct ISpecificationBaseObjects * _result = 0;
    HRESULT _hr = get_BaseObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationBaseObjectsPtr(_result, false);
}

#pragma implementation_key(7114)
inline ISpecificationCommentObjectsPtr ISpecificationDescription::GetCommentObjects ( ) {
    struct ISpecificationCommentObjects * _result = 0;
    HRESULT _hr = get_CommentObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationCommentObjectsPtr(_result, false);
}

#pragma implementation_key(7115)
inline VARIANT_BOOL ISpecificationDescription::GetShowOnSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowOnSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7116)
inline void ISpecificationDescription::PutShowOnSheet ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowOnSheet(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7117)
inline ISpecificationObjectPtr ISpecificationDescription::GetCurrentObject ( ) {
    struct ISpecificationObject * _result = 0;
    HRESULT _hr = get_CurrentObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationObjectPtr(_result, false);
}

#pragma implementation_key(7118)
inline void ISpecificationDescription::PutCurrentObject ( struct ISpecificationObject * Result ) {
    HRESULT _hr = put_CurrentObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7119)
inline VARIANT_BOOL ISpecificationDescription::GetShowAllObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAllObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7120)
inline void ISpecificationDescription::PutShowAllObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowAllObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7121)
inline _bstr_t ISpecificationDescription::GetPerformanceName ( long PerformanceIndex, long BlockIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_PerformanceName(PerformanceIndex, BlockIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7122)
inline void ISpecificationDescription::PutPerformanceName ( long PerformanceIndex, long BlockIndex, _bstr_t PVal ) {
    HRESULT _hr = put_PerformanceName(PerformanceIndex, BlockIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7123)
inline VARIANT_BOOL ISpecificationDescription::GetDelegateMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DelegateMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7124)
inline void ISpecificationDescription::PutDelegateMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DelegateMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7125)
inline VARIANT_BOOL ISpecificationDescription::GetNeedRebuild ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NeedRebuild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7126)
inline void ISpecificationDescription::PutNeedRebuild ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_NeedRebuild(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7127)
inline enum ksSpecificationStyleDifferenceTypeEnum ISpecificationDescription::CompareStyleWithLibStyle ( ) {
    enum ksSpecificationStyleDifferenceTypeEnum _result;
    HRESULT _hr = raw_CompareStyleWithLibStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7128)
inline _bstr_t ISpecificationDescription::GetPerformanceParam ( long DisplayPerformanceIndex, long * PerformanceIndex, long * BlockIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPerformanceParam(DisplayPerformanceIndex, PerformanceIndex, BlockIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7129)
inline VARIANT_BOOL ISpecificationDescription::GetShowExcludedObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowExcludedObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7130)
inline void ISpecificationDescription::PutShowExcludedObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShowExcludedObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7131)
inline long ISpecificationDescription::GetPerformanceCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PerformanceCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7132)
inline void ISpecificationDescription::PutPerformanceCount ( long PVal ) {
    HRESULT _hr = put_PerformanceCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7133)
inline long ISpecificationDescription::GetPerformanceCountInBlock ( ) {
    long _result = 0;
    HRESULT _hr = get_PerformanceCountInBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationBaseObjects wrapper method implementations
//

#pragma implementation_key(7134)
inline ISpecificationBaseObjectPtr ISpecificationBaseObjects::GetItem ( const _variant_t & Index ) {
    struct ISpecificationBaseObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationBaseObjectPtr(_result, false);
}

#pragma implementation_key(7135)
inline ISpecificationBaseObjectPtr ISpecificationBaseObjects::Add ( long SectionNumb, double AttrNumb ) {
    struct ISpecificationBaseObject * _result = 0;
    HRESULT _hr = raw_Add(SectionNumb, AttrNumb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationBaseObjectPtr(_result, false);
}

#pragma implementation_key(7136)
inline _variant_t ISpecificationBaseObjects::GetSpecificationObjectsForGeom ( const _variant_t & PGeom, VARIANT_BOOL Equal, long SectionNumb, double AttrNumb ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSpecificationObjectsForGeom(PGeom, Equal, SectionNumb, AttrNumb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7137)
inline ISpecificationBaseObjectPtr ISpecificationBaseObjects::CopySpecificationObject ( struct ISpecificationBaseObject * SpcObj, const _variant_t & Geometry ) {
    struct ISpecificationBaseObject * _result = 0;
    HRESULT _hr = raw_CopySpecificationObject(SpcObj, Geometry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationBaseObjectPtr(_result, false);
}

#pragma implementation_key(7138)
inline ISpecificationBaseObjectPtr ISpecificationBaseObjects::AddWithParam ( struct ISpecificationObjectCreateParam * Param, struct IPropertyKeeper * PropertyObject, VARIANT_BOOL FillText, const _variant_t & Geometry ) {
    struct ISpecificationBaseObject * _result = 0;
    HRESULT _hr = raw_AddWithParam(Param, PropertyObject, FillText, Geometry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationBaseObjectPtr(_result, false);
}

//
// interface ISpecificationBaseObject wrapper method implementations
//

#pragma implementation_key(7139)
inline VARIANT_BOOL ISpecificationBaseObject::GetDraw ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Draw(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7140)
inline void ISpecificationBaseObject::PutDraw ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Draw(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7141)
inline VARIANT_BOOL ISpecificationBaseObject::GetDrawPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7142)
inline void ISpecificationBaseObject::PutDrawPosition ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DrawPosition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7143)
inline VARIANT_BOOL ISpecificationBaseObject::GetPerformance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Performance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7144)
inline void ISpecificationBaseObject::PutPerformance ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Performance(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7145)
inline ISpecificationCommentObjectsPtr ISpecificationBaseObject::GetCommentObjects ( ) {
    struct ISpecificationCommentObjects * _result = 0;
    HRESULT _hr = get_CommentObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationCommentObjectsPtr(_result, false);
}

#pragma implementation_key(7146)
inline _variant_t ISpecificationBaseObject::GetDocuments ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7147)
inline double ISpecificationBaseObject::GetAttributeNumber ( ) {
    double _result = 0;
    HRESULT _hr = get_AttributeNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7148)
inline void ISpecificationBaseObject::PutAttributeNumber ( double PVal ) {
    HRESULT _hr = put_AttributeNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7149)
inline double ISpecificationBaseObject::GetSummaryCount ( long ColumnTypeNumber, long BlockNumber ) {
    double _result = 0;
    HRESULT _hr = get_SummaryCount(ColumnTypeNumber, BlockNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7150)
inline VARIANT_BOOL ISpecificationBaseObject::SetMaterial ( _bstr_t Material, double Density ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetMaterial(Material, Density, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7151)
inline _variant_t ISpecificationBaseObject::GetGeometry ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7152)
inline void ISpecificationBaseObject::PutGeometry ( const _variant_t & PVal ) {
    HRESULT _hr = put_Geometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7153)
inline VARIANT_BOOL ISpecificationBaseObject::IncludeGeometry ( const _variant_t & PVal, VARIANT_BOOL FillText ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IncludeGeometry(PVal, FillText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7154)
inline VARIANT_BOOL ISpecificationBaseObject::ClearGeometry ( VARIANT_BOOL ClearGeometry, VARIANT_BOOL ClearLeaders ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearGeometry(ClearGeometry, ClearLeaders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7155)
inline VARIANT_BOOL ISpecificationBaseObject::GetEditSourceObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EditSourceObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7156)
inline void ISpecificationBaseObject::PutEditSourceObject ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EditSourceObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7157)
inline VARIANT_BOOL ISpecificationBaseObject::GetSyncronizeWithProperties ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SyncronizeWithProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7158)
inline void ISpecificationBaseObject::PutSyncronizeWithProperties ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SyncronizeWithProperties(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7159)
inline VARIANT_BOOL ISpecificationBaseObject::SetSection ( long Val ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSection(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7160)
inline void ISpecificationBaseObject::PutSpcUsed ( enum ksSpcUsedTypeEnum SpcUsed, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_SpcUsed(SpcUsed, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7161)
inline VARIANT_BOOL ISpecificationBaseObject::GetSpcUsed ( enum ksSpcUsedTypeEnum SpcUsed ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SpcUsed(SpcUsed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7162)
inline _bstr_t ISpecificationBaseObject::GetUniqueMetaObjectKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueMetaObjectKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7163)
inline VARIANT_BOOL ISpecificationBaseObject::GetIsFirstObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFirstObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7164)
inline VARIANT_BOOL ISpecificationBaseObject::GetFillNameByMaterial ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillNameByMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7165)
inline void ISpecificationBaseObject::PutFillNameByMaterial ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_FillNameByMaterial(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7166)
inline ITextPtr ISpecificationBaseObject::GetSummaryCountText ( long ColumnTypeNumber, long BlockNumber ) {
    struct IText * _result = 0;
    HRESULT _hr = get_SummaryCountText(ColumnTypeNumber, BlockNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

//
// interface ISpecificationCommentObject wrapper method implementations
//

#pragma implementation_key(7167)
inline ISpecificationBaseObjectPtr ISpecificationCommentObject::GetBaseObject ( ) {
    struct ISpecificationBaseObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationBaseObjectPtr(_result, false);
}

#pragma implementation_key(7168)
inline long ISpecificationCommentObject::GetBlockNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_BlockNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7169)
inline void ISpecificationCommentObject::PutBlockNumber ( long PVal ) {
    HRESULT _hr = put_BlockNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7170)
inline VARIANT_BOOL ISpecificationCommentObject::GetEditSourceObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EditSourceObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7171)
inline void ISpecificationCommentObject::PutEditSourceObject ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EditSourceObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7172)
inline VARIANT_BOOL ISpecificationCommentObject::SetSection ( long Val ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSection(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecificationCommentObjects wrapper method implementations
//

#pragma implementation_key(7173)
inline ISpecificationCommentObjectPtr ISpecificationCommentObjects::GetItem ( const _variant_t & Index ) {
    struct ISpecificationCommentObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationCommentObjectPtr(_result, false);
}

#pragma implementation_key(7174)
inline ISpecificationCommentObjectPtr ISpecificationCommentObjects::Add ( long SectionNamb ) {
    struct ISpecificationCommentObject * _result = 0;
    HRESULT _hr = raw_Add(SectionNamb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationCommentObjectPtr(_result, false);
}

#pragma implementation_key(7175)
inline VARIANT_BOOL ISpecificationCommentObjects::Attach ( struct ISpecificationCommentObject * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Attach(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7176)
inline VARIANT_BOOL ISpecificationCommentObjects::Detach ( struct ISpecificationCommentObject * PVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Detach(PVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7177)
inline ISpecificationCommentObjectPtr ISpecificationCommentObjects::CopySpecificationObject ( struct ISpecificationCommentObject * SpcObj ) {
    struct ISpecificationCommentObject * _result = 0;
    HRESULT _hr = raw_CopySpecificationObject(SpcObj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationCommentObjectPtr(_result, false);
}

#pragma implementation_key(7178)
inline ISpecificationCommentObjectPtr ISpecificationCommentObjects::AddWithParam ( struct ISpecificationObjectCreateParam * Param, struct ISpecificationBaseObject * ParentObject ) {
    struct ISpecificationCommentObject * _result = 0;
    HRESULT _hr = raw_AddWithParam(Param, ParentObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationCommentObjectPtr(_result, false);
}

//
// interface IKompasDocument2D wrapper method implementations
//

#pragma implementation_key(7179)
inline IViewsAndLayersManagerPtr IKompasDocument2D::GetViewsAndLayersManager ( ) {
    struct IViewsAndLayersManager * _result = 0;
    HRESULT _hr = get_ViewsAndLayersManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewsAndLayersManagerPtr(_result, false);
}

#pragma implementation_key(7180)
inline IDispatchPtr IKompasDocument2D::GetDrawingObjectNotifyResult ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetDrawingObjectNotifyResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IDrawingDocument wrapper method implementations
//

#pragma implementation_key(7181)
inline ISpecificationDescriptionsPtr IDrawingDocument::GetChangeListDescriptions ( ) {
    struct ISpecificationDescriptions * _result = 0;
    HRESULT _hr = get_ChangeListDescriptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecificationDescriptionsPtr(_result, false);
}

#pragma implementation_key(7182)
inline ISpecRoughPtr IDrawingDocument::GetSpecRough ( ) {
    struct ISpecRough * _result = 0;
    HRESULT _hr = get_SpecRough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecRoughPtr(_result, false);
}

#pragma implementation_key(7183)
inline ITechnicalDemandPtr IDrawingDocument::GetTechnicalDemand ( ) {
    struct ITechnicalDemand * _result = 0;
    HRESULT _hr = get_TechnicalDemand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITechnicalDemandPtr(_result, false);
}

//
// interface IFragmentDocument wrapper method implementations
//

#pragma implementation_key(7184)
inline VARIANT_BOOL IFragmentDocument::GetIsSketch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IInsertionDefinition wrapper method implementations
//

#pragma implementation_key(7185)
inline enum ksInsertionTypeEnum IInsertionDefinition::GetInsertionType ( ) {
    enum ksInsertionTypeEnum _result;
    HRESULT _hr = get_InsertionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7186)
inline void IInsertionDefinition::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7187)
inline _bstr_t IInsertionDefinition::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7188)
inline void IInsertionDefinition::PutFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_FileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7189)
inline _bstr_t IInsertionDefinition::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7190)
inline IKompasDocument2DPtr IInsertionDefinition::Open ( VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly ) {
    struct IKompasDocument2D * _result = 0;
    HRESULT _hr = raw_Open(Visible, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocument2DPtr(_result, false);
}

#pragma implementation_key(7191)
inline long IInsertionDefinition::GetInsertionObjectsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_InsertionObjectsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IInsertionParameters wrapper method implementations
//

#pragma implementation_key(7192)
inline _bstr_t IInsertionParameters::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7193)
inline double IInsertionParameters::GetSourceHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_SourceHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7194)
inline double IInsertionParameters::GetSourceWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_SourceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7195)
inline double IInsertionParameters::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7196)
inline void IInsertionParameters::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7197)
inline double IInsertionParameters::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7198)
inline void IInsertionParameters::PutWidth ( double PVal ) {
    HRESULT _hr = put_Width(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7199)
inline double IInsertionParameters::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7200)
inline void IInsertionParameters::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7201)
inline VARIANT_BOOL IInsertionParameters::AutoScale ( VARIANT_BOOL ByHeight ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AutoScale(ByHeight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7202)
inline enum ksAngleEnum IInsertionParameters::GetAngle ( ) {
    enum ksAngleEnum _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7203)
inline void IInsertionParameters::PutAngle ( enum ksAngleEnum PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7204)
inline IInsertionDefinitionPtr IInsertionParameters::GetInsertionDefinition ( ) {
    struct IInsertionDefinition * _result = 0;
    HRESULT _hr = get_InsertionDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertionDefinitionPtr(_result, false);
}

#pragma implementation_key(7205)
inline void IInsertionParameters::PutInsertionDefinition ( struct IInsertionDefinition * PVal ) {
    HRESULT _hr = put_InsertionDefinition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7206)
inline double IInsertionParameters::GetImageResolution ( ) {
    double _result = 0;
    HRESULT _hr = get_ImageResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7207)
inline void IInsertionParameters::PutImageResolution ( double PVal ) {
    HRESULT _hr = put_ImageResolution(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7208)
inline long IInsertionParameters::GetPalette ( ) {
    long _result = 0;
    HRESULT _hr = get_Palette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISketch wrapper method implementations
//

#pragma implementation_key(7209)
inline void ISketch::PutPlane ( struct IModelObject * Result ) {
    HRESULT _hr = put_Plane(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7210)
inline IModelObjectPtr ISketch::GetPlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_Plane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7211)
inline void ISketch::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7212)
inline double ISketch::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7213)
inline VARIANT_BOOL ISketch::GetLocation ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetLocation(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7214)
inline VARIANT_BOOL ISketch::SetLocation ( double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLocation(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7215)
inline VARIANT_BOOL ISketch::GetLoftPoint ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetLoftPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7216)
inline VARIANT_BOOL ISketch::SetLoftPoint ( double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLoftPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7217)
inline IFragmentDocumentPtr ISketch::BeginEdit ( ) {
    struct IFragmentDocument * _result = 0;
    HRESULT _hr = raw_BeginEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFragmentDocumentPtr(_result, false);
}

#pragma implementation_key(7218)
inline VARIANT_BOOL ISketch::EndEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EndEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7219)
inline IFragmentDocumentPtr ISketch::BeginEditEx ( VARIANT_BOOL ReadOnly ) {
    struct IFragmentDocument * _result = 0;
    HRESULT _hr = raw_BeginEditEx(ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFragmentDocumentPtr(_result, false);
}

#pragma implementation_key(7220)
inline VARIANT_BOOL ISketch::AddSketch ( struct IModelObject * Sketch, struct IModelObject * Plane ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddSketch(Sketch, Plane, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7221)
inline VARIANT_BOOL ISketch::WriteToFragment ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WriteToFragment(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7222)
inline VARIANT_BOOL ISketch::DeleteWrongProjection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteWrongProjection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7223)
inline void ISketch::PutLeftHandedCS ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_LeftHandedCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7224)
inline VARIANT_BOOL ISketch::GetLeftHandedCS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LeftHandedCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7225)
inline void ISketch::PutFixed ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Fixed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7226)
inline VARIANT_BOOL ISketch::GetFixed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Fixed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7227)
inline IModelObjectPtr ISketch::GetCoordinateSystem ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_CoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7228)
inline void ISketch::PutCoordinateSystem ( struct IModelObject * PVal ) {
    HRESULT _hr = put_CoordinateSystem(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7229)
inline IModelObjectPtr ISketch::GetAssociationObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7230)
inline void ISketch::PutAssociationObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7231)
inline IModelObjectPtr ISketch::GetDirectingObject ( ksObj3dTypeEnum Axis ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DirectingObject(Axis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7232)
inline void ISketch::PutDirectingObject ( ksObj3dTypeEnum Axis, struct IModelObject * PVal ) {
    HRESULT _hr = put_DirectingObject(Axis, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7233)
inline IVector3DPtr ISketch::GetVector3D ( ksObj3dTypeEnum Axis ) {
    struct IVector3D * _result = 0;
    HRESULT _hr = get_Vector3D(Axis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVector3DPtr(_result, false);
}

#pragma implementation_key(7234)
inline VARIANT_BOOL ISketch::RotateAxis ( ksObj3dTypeEnum Axis ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RotateAxis(Axis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISketchs wrapper method implementations
//

#pragma implementation_key(7235)
inline ISketchPtr ISketchs::GetSketch ( const _variant_t & Index ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

#pragma implementation_key(7236)
inline ISketchPtr ISketchs::Add ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

//
// interface IExtrusion wrapper method implementations
//

#pragma implementation_key(7237)
inline void IExtrusion::PutSketch ( struct ISketch * Result ) {
    HRESULT _hr = put_Sketch(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7238)
inline ISketchPtr IExtrusion::GetSketch ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

#pragma implementation_key(7239)
inline void IExtrusion::PutDirection ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7240)
inline ksDirectionTypeEnum IExtrusion::GetDirection ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7241)
inline void IExtrusion::PutExtrusionType ( VARIANT_BOOL Normal, ksEndTypeEnum PVal ) {
    HRESULT _hr = put_ExtrusionType(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7242)
inline ksEndTypeEnum IExtrusion::GetExtrusionType ( VARIANT_BOOL Normal ) {
    ksEndTypeEnum _result;
    HRESULT _hr = get_ExtrusionType(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7243)
inline void IExtrusion::PutDepth ( VARIANT_BOOL Normal, double PVal ) {
    HRESULT _hr = put_Depth(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7244)
inline double IExtrusion::GetDepth ( VARIANT_BOOL Normal ) {
    double _result = 0;
    HRESULT _hr = get_Depth(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7245)
inline void IExtrusion::PutDraftValue ( VARIANT_BOOL Normal, double PVal ) {
    HRESULT _hr = put_DraftValue(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7246)
inline double IExtrusion::GetDraftValue ( VARIANT_BOOL Normal ) {
    double _result = 0;
    HRESULT _hr = get_DraftValue(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7247)
inline void IExtrusion::PutDraftOutward ( VARIANT_BOOL Normal, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DraftOutward(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7248)
inline VARIANT_BOOL IExtrusion::GetDraftOutward ( VARIANT_BOOL Normal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DraftOutward(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7249)
inline void IExtrusion::PutDepthObject ( VARIANT_BOOL Normal, struct IModelObject * PVal ) {
    HRESULT _hr = put_DepthObject(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7250)
inline IModelObjectPtr IExtrusion::GetDepthObject ( VARIANT_BOOL Normal ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DepthObject(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7251)
inline VARIANT_BOOL IExtrusion::GetSideParameters ( VARIANT_BOOL Normal, ksEndTypeEnum * ExtrusionType, double * Depth, double * DraftValue, VARIANT_BOOL * DraftOutward, struct IModelObject * * DepthObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSideParameters(Normal, ExtrusionType, Depth, DraftValue, DraftOutward, DepthObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7252)
inline VARIANT_BOOL IExtrusion::SetSideParameters ( VARIANT_BOOL Normal, ksEndTypeEnum ExtrusionType, double Depth, double DraftValue, VARIANT_BOOL DraftOutward, struct IModelObject * DepthObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSideParameters(Normal, ExtrusionType, Depth, DraftValue, DraftOutward, DepthObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExtrusions wrapper method implementations
//

#pragma implementation_key(7253)
inline IExtrusionPtr IExtrusions::GetExtrusion ( const _variant_t & Index ) {
    struct IExtrusion * _result = 0;
    HRESULT _hr = get_Extrusion(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExtrusionPtr(_result, false);
}

#pragma implementation_key(7254)
inline IExtrusionPtr IExtrusions::Add ( ksObj3dTypeEnum ExtrusionType ) {
    struct IExtrusion * _result = 0;
    HRESULT _hr = raw_Add(ExtrusionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExtrusionPtr(_result, false);
}

//
// interface IRib wrapper method implementations
//

#pragma implementation_key(7255)
inline ISketchPtr IRib::GetSketch ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

#pragma implementation_key(7256)
inline void IRib::PutSketch ( struct ISketch * PVal ) {
    HRESULT _hr = put_Sketch(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7257)
inline enum ksRibSideEnum IRib::GetSide ( ) {
    enum ksRibSideEnum _result;
    HRESULT _hr = get_Side(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7258)
inline void IRib::PutSide ( enum ksRibSideEnum PVal ) {
    HRESULT _hr = put_Side(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7259)
inline double IRib::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7260)
inline void IRib::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7261)
inline long IRib::GetSegmentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_SegmentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7262)
inline void IRib::PutSegmentIndex ( long PVal ) {
    HRESULT _hr = put_SegmentIndex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7263)
inline void IRib::PutBody ( struct IKompasAPIObject * PVal ) {
    HRESULT _hr = put_Body(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7264)
inline IKompasAPIObjectPtr IRib::GetBody ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

//
// interface IRibs wrapper method implementations
//

#pragma implementation_key(7265)
inline IRibPtr IRibs::GetRib ( const _variant_t & Index ) {
    struct IRib * _result = 0;
    HRESULT _hr = get_Rib(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRibPtr(_result, false);
}

#pragma implementation_key(7266)
inline IRibPtr IRibs::Add ( ) {
    struct IRib * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRibPtr(_result, false);
}

//
// interface ICutExtrusion wrapper method implementations
//

#pragma implementation_key(7267)
inline void ICutExtrusion::PutCut ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Cut(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7268)
inline VARIANT_BOOL ICutExtrusion::GetCut ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalBody wrapper method implementations
//

#pragma implementation_key(7269)
inline void ISheetMetalBody::PutThicknessDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ThicknessDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7270)
inline VARIANT_BOOL ISheetMetalBody::GetThicknessDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ThicknessDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7271)
inline void ISheetMetalBody::PutThickness ( double PVal ) {
    HRESULT _hr = put_Thickness(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7272)
inline double ISheetMetalBody::GetThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7273)
inline void ISheetMetalBody::PutStraighten ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Straighten(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7274)
inline VARIANT_BOOL ISheetMetalBody::GetStraighten ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Straighten(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7275)
inline void ISheetMetalBody::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7276)
inline double ISheetMetalBody::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7277)
inline void ISheetMetalBody::PutUnfoldType ( enum ksUnfoldTypeEnum PVal ) {
    HRESULT _hr = put_UnfoldType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7278)
inline enum ksUnfoldTypeEnum ISheetMetalBody::GetUnfoldType ( ) {
    enum ksUnfoldTypeEnum _result;
    HRESULT _hr = get_UnfoldType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7279)
inline void ISheetMetalBody::PutBendCoefficient ( double PVal ) {
    HRESULT _hr = put_BendCoefficient(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7280)
inline double ISheetMetalBody::GetBendCoefficient ( ) {
    double _result = 0;
    HRESULT _hr = get_BendCoefficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7281)
inline void ISheetMetalBody::PutBendValue ( double PVal ) {
    HRESULT _hr = put_BendValue(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7282)
inline double ISheetMetalBody::GetBendValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BendValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7283)
inline void ISheetMetalBody::PutBendReduction ( double PVal ) {
    HRESULT _hr = put_BendReduction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7284)
inline double ISheetMetalBody::GetBendReduction ( ) {
    double _result = 0;
    HRESULT _hr = get_BendReduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7285)
inline void ISheetMetalBody::PutBendTablePath ( _bstr_t PVal ) {
    HRESULT _hr = put_BendTablePath(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7286)
inline _bstr_t ISheetMetalBody::GetBendTablePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BendTablePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7287)
inline void ISheetMetalBody::PutSketch ( struct ISketch * Result ) {
    HRESULT _hr = put_Sketch(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7288)
inline ISketchPtr ISheetMetalBody::GetSketch ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

#pragma implementation_key(7289)
inline void ISheetMetalBody::PutDirection ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7290)
inline ksDirectionTypeEnum ISheetMetalBody::GetDirection ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7291)
inline void ISheetMetalBody::PutExtrusionType ( VARIANT_BOOL Normal, ksEndTypeEnum PVal ) {
    HRESULT _hr = put_ExtrusionType(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7292)
inline ksEndTypeEnum ISheetMetalBody::GetExtrusionType ( VARIANT_BOOL Normal ) {
    ksEndTypeEnum _result;
    HRESULT _hr = get_ExtrusionType(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7293)
inline void ISheetMetalBody::PutDepth ( VARIANT_BOOL Normal, double PVal ) {
    HRESULT _hr = put_Depth(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7294)
inline double ISheetMetalBody::GetDepth ( VARIANT_BOOL Normal ) {
    double _result = 0;
    HRESULT _hr = get_Depth(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7295)
inline void ISheetMetalBody::PutDepthObject ( VARIANT_BOOL Normal, struct IModelObject * PVal ) {
    HRESULT _hr = put_DepthObject(Normal, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7296)
inline IModelObjectPtr ISheetMetalBody::GetDepthObject ( VARIANT_BOOL Normal ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DepthObject(Normal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7297)
inline VARIANT_BOOL ISheetMetalBody::GetSideParameters ( VARIANT_BOOL Normal, ksEndTypeEnum * ExtrusionType, double * Depth, struct IModelObject * * DepthObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSideParameters(Normal, ExtrusionType, Depth, DepthObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7298)
inline VARIANT_BOOL ISheetMetalBody::SetSideParameters ( VARIANT_BOOL Normal, ksEndTypeEnum ExtrusionType, double Depth, struct IModelObject * DepthObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSideParameters(Normal, ExtrusionType, Depth, DepthObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalBodies wrapper method implementations
//

#pragma implementation_key(7299)
inline ISheetMetalBodyPtr ISheetMetalBodies::GetSheetMetalBody ( const _variant_t & Index ) {
    struct ISheetMetalBody * _result = 0;
    HRESULT _hr = get_SheetMetalBody(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBodyPtr(_result, false);
}

#pragma implementation_key(7300)
inline ISheetMetalBodyPtr ISheetMetalBodies::Add ( ) {
    struct ISheetMetalBody * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBodyPtr(_result, false);
}

//
// interface ISheetMetalHole wrapper method implementations
//

#pragma implementation_key(7301)
inline void ISheetMetalHole::PutX ( double PVal ) {
    HRESULT _hr = put_X(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7302)
inline double ISheetMetalHole::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7303)
inline void ISheetMetalHole::PutY ( double PVal ) {
    HRESULT _hr = put_Y(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7304)
inline double ISheetMetalHole::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7305)
inline void ISheetMetalHole::PutCutType ( enum ksHoleCutTypeEnum PVal ) {
    HRESULT _hr = put_CutType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7306)
inline enum ksHoleCutTypeEnum ISheetMetalHole::GetCutType ( ) {
    enum ksHoleCutTypeEnum _result;
    HRESULT _hr = get_CutType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7307)
inline void ISheetMetalHole::PutDiameter ( double PVal ) {
    HRESULT _hr = put_Diameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7308)
inline double ISheetMetalHole::GetDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7309)
inline void ISheetMetalHole::PutDepth ( double PVal ) {
    HRESULT _hr = put_Depth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7310)
inline double ISheetMetalHole::GetDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7311)
inline void ISheetMetalHole::PutBasePlane ( struct IModelObject * Result ) {
    HRESULT _hr = put_BasePlane(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7312)
inline IModelObjectPtr ISheetMetalHole::GetBasePlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7313)
inline void ISheetMetalHole::PutDepthObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DepthObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7314)
inline IModelObjectPtr ISheetMetalHole::GetDepthObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DepthObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7315)
inline ISketchPtr ISheetMetalHole::GetSketch ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

#pragma implementation_key(7316)
inline void ISheetMetalHole::PutBody ( struct IKompasAPIObject * PVal ) {
    HRESULT _hr = put_Body(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7317)
inline IKompasAPIObjectPtr ISheetMetalHole::GetBody ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(7318)
inline IKompasAPIObjectPtr ISheetMetalHole::GetPoint3DParamSurface ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Point3DParamSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(7319)
inline IModelObjectPtr ISheetMetalHole::GetAssociationVertex ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_AssociationVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7320)
inline void ISheetMetalHole::PutAssociationVertex ( struct IModelObject * PVal ) {
    HRESULT _hr = put_AssociationVertex(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7321)
inline VARIANT_BOOL ISheetMetalHole::GetAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7322)
inline void ISheetMetalHole::PutAxis ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Axis(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7323)
inline VARIANT_BOOL ISheetMetalHole::GetPerpendicularEdge ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerpendicularEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7324)
inline void ISheetMetalHole::PutPerpendicularEdge ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_PerpendicularEdge(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISheetMetalHoles wrapper method implementations
//

#pragma implementation_key(7325)
inline ISheetMetalHolePtr ISheetMetalHoles::GetSheetMetalHole ( const _variant_t & Index ) {
    struct ISheetMetalHole * _result = 0;
    HRESULT _hr = get_SheetMetalHole(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalHolePtr(_result, false);
}

#pragma implementation_key(7326)
inline ISheetMetalHolePtr ISheetMetalHoles::Add ( ) {
    struct ISheetMetalHole * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalHolePtr(_result, false);
}

//
// interface ISheetMetalCut wrapper method implementations
//

#pragma implementation_key(7327)
inline void ISheetMetalCut::PutSketch ( struct ISketch * Result ) {
    HRESULT _hr = put_Sketch(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7328)
inline ISketchPtr ISheetMetalCut::GetSketch ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

#pragma implementation_key(7329)
inline void ISheetMetalCut::PutCutType ( enum ksHoleCutTypeEnum PVal ) {
    HRESULT _hr = put_CutType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7330)
inline enum ksHoleCutTypeEnum ISheetMetalCut::GetCutType ( ) {
    enum ksHoleCutTypeEnum _result;
    HRESULT _hr = get_CutType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7331)
inline void ISheetMetalCut::PutDepth ( double PVal ) {
    HRESULT _hr = put_Depth(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7332)
inline double ISheetMetalCut::GetDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7333)
inline void ISheetMetalCut::PutDepthObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DepthObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7334)
inline IModelObjectPtr ISheetMetalCut::GetDepthObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DepthObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7335)
inline void ISheetMetalCut::PutCut ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Cut(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7336)
inline VARIANT_BOOL ISheetMetalCut::GetCut ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7337)
inline void ISheetMetalCut::PutBody ( struct IKompasAPIObject * PVal ) {
    HRESULT _hr = put_Body(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7338)
inline IKompasAPIObjectPtr ISheetMetalCut::GetBody ( ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

//
// interface ISheetMetalCuts wrapper method implementations
//

#pragma implementation_key(7339)
inline ISheetMetalCutPtr ISheetMetalCuts::GetSheetMetalCut ( const _variant_t & Index ) {
    struct ISheetMetalCut * _result = 0;
    HRESULT _hr = get_SheetMetalCut(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalCutPtr(_result, false);
}

#pragma implementation_key(7340)
inline ISheetMetalCutPtr ISheetMetalCuts::Add ( ) {
    struct ISheetMetalCut * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalCutPtr(_result, false);
}

//
// interface ISheetMetalContainer wrapper method implementations
//

#pragma implementation_key(7341)
inline ISheetMetalBodiesPtr ISheetMetalContainer::GetSheetMetalBodies ( ) {
    struct ISheetMetalBodies * _result = 0;
    HRESULT _hr = get_SheetMetalBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBodiesPtr(_result, false);
}

#pragma implementation_key(7342)
inline ISheetMetalBendsPtr ISheetMetalContainer::GetSheetMetalBends ( ) {
    struct ISheetMetalBends * _result = 0;
    HRESULT _hr = get_SheetMetalBends(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBendsPtr(_result, false);
}

#pragma implementation_key(7343)
inline ISheetMetalLineBendsPtr ISheetMetalContainer::GetSheetMetalLineBends ( ) {
    struct ISheetMetalLineBends * _result = 0;
    HRESULT _hr = get_SheetMetalLineBends(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalLineBendsPtr(_result, false);
}

#pragma implementation_key(7344)
inline ISheetMetalHolesPtr ISheetMetalContainer::GetSheetMetalHoles ( ) {
    struct ISheetMetalHoles * _result = 0;
    HRESULT _hr = get_SheetMetalHoles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalHolesPtr(_result, false);
}

#pragma implementation_key(7345)
inline ISheetMetalCutsPtr ISheetMetalContainer::GetSheetMetalCuts ( ) {
    struct ISheetMetalCuts * _result = 0;
    HRESULT _hr = get_SheetMetalCuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalCutsPtr(_result, false);
}

#pragma implementation_key(7346)
inline ISheetMetalSketchBendsPtr ISheetMetalContainer::GetSheetMetalSketchBends ( ) {
    struct ISheetMetalSketchBends * _result = 0;
    HRESULT _hr = get_SheetMetalSketchBends(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalSketchBendsPtr(_result, false);
}

#pragma implementation_key(7347)
inline ISheetMetalClosedCornersPtr ISheetMetalContainer::GetSheetMetalClosedCorners ( ) {
    struct ISheetMetalClosedCorners * _result = 0;
    HRESULT _hr = get_SheetMetalClosedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalClosedCornersPtr(_result, false);
}

#pragma implementation_key(7348)
inline ISheetMetalPlatesPtr ISheetMetalContainer::GetSheetMetalPlates ( ) {
    struct ISheetMetalPlates * _result = 0;
    HRESULT _hr = get_SheetMetalPlates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPlatesPtr(_result, false);
}

#pragma implementation_key(7349)
inline ISheetMetalLineBendsPtr ISheetMetalContainer::GetSheetMetalUndercuts ( ) {
    struct ISheetMetalLineBends * _result = 0;
    HRESULT _hr = get_SheetMetalUndercuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalLineBendsPtr(_result, false);
}

#pragma implementation_key(7350)
inline ISheetMetalBendedStraightensPtr ISheetMetalContainer::GetSheetMetalBendedStraightens ( ) {
    struct ISheetMetalBendedStraightens * _result = 0;
    HRESULT _hr = get_SheetMetalBendedStraightens(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBendedStraightensPtr(_result, false);
}

#pragma implementation_key(7351)
inline ISheetMetalBendUnfoldParametersPtr ISheetMetalContainer::GetSheetMetalBendUnfoldParameters ( ) {
    struct ISheetMetalBendUnfoldParameters * _result = 0;
    HRESULT _hr = get_SheetMetalBendUnfoldParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBendUnfoldParametersPtr(_result, false);
}

#pragma implementation_key(7352)
inline ISheetMetalPressFormingsPtr ISheetMetalContainer::GetSheetMetalPressFormings ( ) {
    struct ISheetMetalPressFormings * _result = 0;
    HRESULT _hr = get_SheetMetalPressFormings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPressFormingsPtr(_result, false);
}

#pragma implementation_key(7353)
inline ISheetMetalShouldersPtr ISheetMetalContainer::GetSheetMetalShoulders ( ) {
    struct ISheetMetalShoulders * _result = 0;
    HRESULT _hr = get_SheetMetalShoulders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalShouldersPtr(_result, false);
}

#pragma implementation_key(7354)
inline ISheetMetalJalousiesPtr ISheetMetalContainer::GetSheetMetalJalousies ( ) {
    struct ISheetMetalJalousies * _result = 0;
    HRESULT _hr = get_SheetMetalJalousies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalJalousiesPtr(_result, false);
}

#pragma implementation_key(7355)
inline ISheetMetalRibsPtr ISheetMetalContainer::GetSheetMetalRibs ( ) {
    struct ISheetMetalRibs * _result = 0;
    HRESULT _hr = get_SheetMetalRibs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalRibsPtr(_result, false);
}

#pragma implementation_key(7356)
inline ISheetMetalBodiesPtr ISheetMetalContainer::GetSheetMetalRuledShells ( ) {
    struct ISheetMetalBodies * _result = 0;
    HRESULT _hr = get_SheetMetalRuledShells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBodiesPtr(_result, false);
}

#pragma implementation_key(7357)
inline ISheetMetalBodiesPtr ISheetMetalContainer::GetSheetMetalLinearRuledShells ( ) {
    struct ISheetMetalBodies * _result = 0;
    HRESULT _hr = get_SheetMetalLinearRuledShells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBodiesPtr(_result, false);
}

#pragma implementation_key(7358)
inline ISheetMetalPunchsPtr ISheetMetalContainer::GetSheetMetalPunchs ( ) {
    struct ISheetMetalPunchs * _result = 0;
    HRESULT _hr = get_SheetMetalPunchs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalPunchsPtr(_result, false);
}

#pragma implementation_key(7359)
inline ISheetMetalBendsPtr ISheetMetalContainer::GetSheetMetalFlangings ( ) {
    struct ISheetMetalBends * _result = 0;
    HRESULT _hr = get_SheetMetalFlangings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISheetMetalBendsPtr(_result, false);
}

//
// interface ISplitLine wrapper method implementations
//

#pragma implementation_key(7360)
inline void ISplitLine::PutSketch ( struct ISketch * Result ) {
    HRESULT _hr = put_Sketch(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7361)
inline ISketchPtr ISplitLine::GetSketch ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

#pragma implementation_key(7362)
inline _variant_t ISplitLine::GetFaces ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7363)
inline void ISplitLine::PutFaces ( const _variant_t & PVal ) {
    HRESULT _hr = put_Faces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7364)
inline void ISplitLine::PutDirection ( ksDirectionTypeEnum PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7365)
inline ksDirectionTypeEnum ISplitLine::GetDirection ( ) {
    ksDirectionTypeEnum _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7366)
inline void ISplitLine::PutCutObjects ( const _variant_t & Result ) {
    HRESULT _hr = put_CutObjects(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7367)
inline _variant_t ISplitLine::GetCutObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CutObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISplitLines wrapper method implementations
//

#pragma implementation_key(7368)
inline ISplitLinePtr ISplitLines::GetSplitLine ( const _variant_t & Index ) {
    struct ISplitLine * _result = 0;
    HRESULT _hr = get_SplitLine(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplitLinePtr(_result, false);
}

#pragma implementation_key(7369)
inline ISplitLinePtr ISplitLines::Add ( ) {
    struct ISplitLine * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplitLinePtr(_result, false);
}

//
// interface ISpiral3D wrapper method implementations
//

#pragma implementation_key(7370)
inline void ISpiral3D::PutTurnsCount ( double PVal ) {
    HRESULT _hr = put_TurnsCount(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7371)
inline double ISpiral3D::GetTurnsCount ( ) {
    double _result = 0;
    HRESULT _hr = get_TurnsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7372)
inline void ISpiral3D::PutStep ( double PVal ) {
    HRESULT _hr = put_Step(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7373)
inline double ISpiral3D::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7374)
inline void ISpiral3D::PutTurnDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_TurnDirection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7375)
inline VARIANT_BOOL ISpiral3D::GetTurnDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TurnDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7376)
inline void ISpiral3D::PutBasePlane ( struct IModelObject * PVal ) {
    HRESULT _hr = put_BasePlane(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7377)
inline IModelObjectPtr ISpiral3D::GetBasePlane ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_BasePlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7378)
inline VARIANT_BOOL ISpiral3D::GetBasePoint ( double * X, double * Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetBasePoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7379)
inline VARIANT_BOOL ISpiral3D::SetBasePoint ( double X, double Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetBasePoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7380)
inline void ISpiral3D::PutBuildingType ( enum ksSpline3DBuildingTypeEnum Result ) {
    HRESULT _hr = put_BuildingType(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7381)
inline enum ksSpline3DBuildingTypeEnum ISpiral3D::GetBuildingType ( ) {
    enum ksSpline3DBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7382)
inline void ISpiral3D::PutBuildingDirection ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_BuildingDirection(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7383)
inline VARIANT_BOOL ISpiral3D::GetBuildingDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuildingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7384)
inline void ISpiral3D::PutHeightType ( enum ksSpiral3DHeightTypeEnum PVal ) {
    HRESULT _hr = put_HeightType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7385)
inline enum ksSpiral3DHeightTypeEnum ISpiral3D::GetHeightType ( ) {
    enum ksSpiral3DHeightTypeEnum _result;
    HRESULT _hr = get_HeightType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7386)
inline void ISpiral3D::PutHeight ( double PVal ) {
    HRESULT _hr = put_Height(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7387)
inline double ISpiral3D::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7388)
inline void ISpiral3D::PutHeightBaseObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_HeightBaseObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7389)
inline IModelObjectPtr ISpiral3D::GetHeightBaseObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_HeightBaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7390)
inline void ISpiral3D::PutHeightCorrection ( double PVal ) {
    HRESULT _hr = put_HeightCorrection(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7391)
inline double ISpiral3D::GetHeightCorrection ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightCorrection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7392)
inline void ISpiral3D::PutTurningAngle ( double PVal ) {
    HRESULT _hr = put_TurningAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7393)
inline double ISpiral3D::GetTurningAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_TurningAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7394)
inline ISketchPtr ISpiral3D::GetSketch ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

//
// interface ISpirals3D wrapper method implementations
//

#pragma implementation_key(7395)
inline ISpiral3DPtr ISpirals3D::GetSpiral3D ( const _variant_t & Index ) {
    struct ISpiral3D * _result = 0;
    HRESULT _hr = get_Spiral3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpiral3DPtr(_result, false);
}

#pragma implementation_key(7396)
inline ISpiral3DPtr ISpirals3D::Add ( ksObj3dTypeEnum Type ) {
    struct ISpiral3D * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpiral3DPtr(_result, false);
}

//
// interface IAuxiliaryGeomContainer wrapper method implementations
//

#pragma implementation_key(7397)
inline ILocalCoordinateSystemsPtr IAuxiliaryGeomContainer::GetLocalCoordinateSystems ( ) {
    struct ILocalCoordinateSystems * _result = 0;
    HRESULT _hr = get_LocalCoordinateSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemsPtr(_result, false);
}

#pragma implementation_key(7398)
inline ISplines3DPtr IAuxiliaryGeomContainer::GetSplines3D ( ) {
    struct ISplines3D * _result = 0;
    HRESULT _hr = get_Splines3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplines3DPtr(_result, false);
}

#pragma implementation_key(7399)
inline IPolyLinesPtr IAuxiliaryGeomContainer::GetPolyLines ( ) {
    struct IPolyLines * _result = 0;
    HRESULT _hr = get_PolyLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolyLinesPtr(_result, false);
}

#pragma implementation_key(7400)
inline IControlPointsPtr IAuxiliaryGeomContainer::GetControlPoints ( ) {
    struct IControlPoints * _result = 0;
    HRESULT _hr = get_ControlPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPointsPtr(_result, false);
}

#pragma implementation_key(7401)
inline IConjunctivePointsPtr IAuxiliaryGeomContainer::GetConjunctivePoints ( ) {
    struct IConjunctivePoints * _result = 0;
    HRESULT _hr = get_ConjunctivePoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConjunctivePointsPtr(_result, false);
}

#pragma implementation_key(7402)
inline ISplitLinesPtr IAuxiliaryGeomContainer::GetSplitLines ( ) {
    struct ISplitLines * _result = 0;
    HRESULT _hr = get_SplitLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplitLinesPtr(_result, false);
}

#pragma implementation_key(7403)
inline ISurfacesIntersectionCurvesPtr IAuxiliaryGeomContainer::GetSurfacesIntersectionCurves ( ) {
    struct ISurfacesIntersectionCurves * _result = 0;
    HRESULT _hr = get_SurfacesIntersectionCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfacesIntersectionCurvesPtr(_result, false);
}

#pragma implementation_key(7404)
inline IEquidistants3DPtr IAuxiliaryGeomContainer::GetEquidistants3D ( ) {
    struct IEquidistants3D * _result = 0;
    HRESULT _hr = get_Equidistants3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistants3DPtr(_result, false);
}

#pragma implementation_key(7405)
inline ITrimmedCurvesPtr IAuxiliaryGeomContainer::GetTrimmedCurves ( ) {
    struct ITrimmedCurves * _result = 0;
    HRESULT _hr = get_TrimmedCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrimmedCurvesPtr(_result, false);
}

#pragma implementation_key(7406)
inline IConnectCurvesPtr IAuxiliaryGeomContainer::GetConnectCurves ( ) {
    struct IConnectCurves * _result = 0;
    HRESULT _hr = get_ConnectCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConnectCurvesPtr(_result, false);
}

#pragma implementation_key(7407)
inline IFilletCurvesPtr IAuxiliaryGeomContainer::GetFilletCurves ( ) {
    struct IFilletCurves * _result = 0;
    HRESULT _hr = get_FilletCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilletCurvesPtr(_result, false);
}

#pragma implementation_key(7408)
inline IArcs3DPtr IAuxiliaryGeomContainer::GetArcs3D ( ) {
    struct IArcs3D * _result = 0;
    HRESULT _hr = get_Arcs3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcs3DPtr(_result, false);
}

#pragma implementation_key(7409)
inline ICurveOutLinesPtr IAuxiliaryGeomContainer::GetCurveOutLines ( ) {
    struct ICurveOutLines * _result = 0;
    HRESULT _hr = get_CurveOutLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveOutLinesPtr(_result, false);
}

#pragma implementation_key(7410)
inline ICurveByLawsPtr IAuxiliaryGeomContainer::GetCurveByLaws ( ) {
    struct ICurveByLaws * _result = 0;
    HRESULT _hr = get_CurveByLaws(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveByLawsPtr(_result, false);
}

#pragma implementation_key(7411)
inline IIsoparametricCurvesPtr IAuxiliaryGeomContainer::GetIsoparametricCurves ( ) {
    struct IIsoparametricCurves * _result = 0;
    HRESULT _hr = get_IsoparametricCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IIsoparametricCurvesPtr(_result, false);
}

#pragma implementation_key(7412)
inline IIsoparametricCurvesSetsPtr IAuxiliaryGeomContainer::GetIsoparametricCurvesSets ( ) {
    struct IIsoparametricCurvesSets * _result = 0;
    HRESULT _hr = get_IsoparametricCurvesSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IIsoparametricCurvesSetsPtr(_result, false);
}

#pragma implementation_key(7413)
inline ISplinesOnSurfacesPtr IAuxiliaryGeomContainer::GetSplinesOnSurfaces ( ) {
    struct ISplinesOnSurfaces * _result = 0;
    HRESULT _hr = get_SplinesOnSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplinesOnSurfacesPtr(_result, false);
}

#pragma implementation_key(7414)
inline IProjectionCurvesPtr IAuxiliaryGeomContainer::GetProjectionCurves ( ) {
    struct IProjectionCurves * _result = 0;
    HRESULT _hr = get_ProjectionCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProjectionCurvesPtr(_result, false);
}

#pragma implementation_key(7415)
inline ICurvesBy2ProjectionsesPtr IAuxiliaryGeomContainer::GetCurvesBy2Projectionses ( ) {
    struct ICurvesBy2Projectionses * _result = 0;
    HRESULT _hr = get_CurvesBy2Projectionses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurvesBy2ProjectionsesPtr(_result, false);
}

#pragma implementation_key(7416)
inline IContours3DPtr IAuxiliaryGeomContainer::GetContours3D ( ) {
    struct IContours3D * _result = 0;
    HRESULT _hr = get_Contours3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContours3DPtr(_result, false);
}

#pragma implementation_key(7417)
inline ILineSegments3DPtr IAuxiliaryGeomContainer::GetLineSegments3D ( ) {
    struct ILineSegments3D * _result = 0;
    HRESULT _hr = get_LineSegments3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineSegments3DPtr(_result, false);
}

#pragma implementation_key(7418)
inline IUnhistoredCurves3DPtr IAuxiliaryGeomContainer::GetUnhistoredCurves3D ( ) {
    struct IUnhistoredCurves3D * _result = 0;
    HRESULT _hr = get_UnhistoredCurves3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnhistoredCurves3DPtr(_result, false);
}

#pragma implementation_key(7419)
inline ISpirals3DPtr IAuxiliaryGeomContainer::GetSpirals3D ( ) {
    struct ISpirals3D * _result = 0;
    HRESULT _hr = get_Spirals3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpirals3DPtr(_result, false);
}

#pragma implementation_key(7420)
inline IPointsArrsOnCurvesPtr IAuxiliaryGeomContainer::GetPointsArrsOnCurves ( ) {
    struct IPointsArrsOnCurves * _result = 0;
    HRESULT _hr = get_PointsArrsOnCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrsOnCurvesPtr(_result, false);
}

#pragma implementation_key(7421)
inline IPointsArrsOnSurfacesPtr IAuxiliaryGeomContainer::GetPointsArrsOnSurfaces ( ) {
    struct IPointsArrsOnSurfaces * _result = 0;
    HRESULT _hr = get_PointsArrsOnSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrsOnSurfacesPtr(_result, false);
}

#pragma implementation_key(7422)
inline IPointsArrsFromFilesPtr IAuxiliaryGeomContainer::GetPointsArrsFromFiles ( ) {
    struct IPointsArrsFromFiles * _result = 0;
    HRESULT _hr = get_PointsArrsFromFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsArrsFromFilesPtr(_result, false);
}

#pragma implementation_key(7423)
inline IAxes3DPtr IAuxiliaryGeomContainer::GetAxes3D ( ) {
    struct IAxes3D * _result = 0;
    HRESULT _hr = get_Axes3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxes3DPtr(_result, false);
}

#pragma implementation_key(7424)
inline IPlanes3DPtr IAuxiliaryGeomContainer::GetPlanes3D ( ) {
    struct IPlanes3D * _result = 0;
    HRESULT _hr = get_Planes3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlanes3DPtr(_result, false);
}

//
// interface ISurfaceContainer wrapper method implementations
//

#pragma implementation_key(7425)
inline ISurfacePatchesPtr ISurfaceContainer::GetSurfacePatches ( ) {
    struct ISurfacePatches * _result = 0;
    HRESULT _hr = get_SurfacePatches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfacePatchesPtr(_result, false);
}

#pragma implementation_key(7426)
inline IFaceRemoversPtr ISurfaceContainer::GetFaceRemovers ( ) {
    struct IFaceRemovers * _result = 0;
    HRESULT _hr = get_FaceRemovers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFaceRemoversPtr(_result, false);
}

#pragma implementation_key(7427)
inline ISurfaceSewersPtr ISurfaceContainer::GetSurfaceSewers ( ) {
    struct ISurfaceSewers * _result = 0;
    HRESULT _hr = get_SurfaceSewers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceSewersPtr(_result, false);
}

#pragma implementation_key(7428)
inline INurbsSurfacesPtr ISurfaceContainer::GetNurbsSurfaces ( ) {
    struct INurbsSurfaces * _result = 0;
    HRESULT _hr = get_NurbsSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsSurfacesPtr(_result, false);
}

#pragma implementation_key(7429)
inline IRuledSurfacesPtr ISurfaceContainer::GetRuledSurfaces ( ) {
    struct IRuledSurfaces * _result = 0;
    HRESULT _hr = get_RuledSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRuledSurfacesPtr(_result, false);
}

#pragma implementation_key(7430)
inline IEquidistantSurfacesPtr ISurfaceContainer::GetEquidistantSurfaces ( ) {
    struct IEquidistantSurfaces * _result = 0;
    HRESULT _hr = get_EquidistantSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistantSurfacesPtr(_result, false);
}

#pragma implementation_key(7431)
inline ITrimmedSurfacesPtr ISurfaceContainer::GetTrimmedSurfaces ( ) {
    struct ITrimmedSurfaces * _result = 0;
    HRESULT _hr = get_TrimmedSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITrimmedSurfacesPtr(_result, false);
}

#pragma implementation_key(7432)
inline IExtensionSurfacesPtr ISurfaceContainer::GetExtensionSurfaces ( ) {
    struct IExtensionSurfaces * _result = 0;
    HRESULT _hr = get_ExtensionSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExtensionSurfacesPtr(_result, false);
}

#pragma implementation_key(7433)
inline IExtrusionsPtr ISurfaceContainer::GetExtrusionSurfaces ( ) {
    struct IExtrusions * _result = 0;
    HRESULT _hr = get_ExtrusionSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExtrusionsPtr(_result, false);
}

#pragma implementation_key(7434)
inline IRotatedsPtr ISurfaceContainer::GetRotatedSurfaces ( ) {
    struct IRotateds * _result = 0;
    HRESULT _hr = get_RotatedSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRotatedsPtr(_result, false);
}

#pragma implementation_key(7435)
inline IMeshPointsSurfacesPtr ISurfaceContainer::GetMeshPointsSurfaces ( ) {
    struct IMeshPointsSurfaces * _result = 0;
    HRESULT _hr = get_MeshPointsSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMeshPointsSurfacesPtr(_result, false);
}

#pragma implementation_key(7436)
inline ICloudPointsSurfacesPtr ISurfaceContainer::GetCloudPointsSurfaces ( ) {
    struct ICloudPointsSurfaces * _result = 0;
    HRESULT _hr = get_CloudPointsSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICloudPointsSurfacesPtr(_result, false);
}

#pragma implementation_key(7437)
inline IImportedSurfacesPtr ISurfaceContainer::GetImportedSurfaces ( ) {
    struct IImportedSurfaces * _result = 0;
    HRESULT _hr = get_ImportedSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImportedSurfacesPtr(_result, false);
}

#pragma implementation_key(7438)
inline ILoftsPtr ISurfaceContainer::GetLoftSurfaces ( ) {
    struct ILofts * _result = 0;
    HRESULT _hr = get_LoftSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILoftsPtr(_result, false);
}

#pragma implementation_key(7439)
inline IEvolutionsPtr ISurfaceContainer::GetEvolutionSurfaces ( ) {
    struct IEvolutions * _result = 0;
    HRESULT _hr = get_EvolutionSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEvolutionsPtr(_result, false);
}

#pragma implementation_key(7440)
inline INurbsSurfacesByCurvesMeshsPtr ISurfaceContainer::GetNurbsSurfacesByCurvesMeshs ( ) {
    struct INurbsSurfacesByCurvesMeshs * _result = 0;
    HRESULT _hr = get_NurbsSurfacesByCurvesMeshs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsSurfacesByCurvesMeshsPtr(_result, false);
}

#pragma implementation_key(7441)
inline IJointSurfacesPtr ISurfaceContainer::GetJointSurfaces ( ) {
    struct IJointSurfaces * _result = 0;
    HRESULT _hr = get_JointSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IJointSurfacesPtr(_result, false);
}

#pragma implementation_key(7442)
inline IRestoredSurfacesPtr ISurfaceContainer::GetRestoredSurfaces ( ) {
    struct IRestoredSurfaces * _result = 0;
    HRESULT _hr = get_RestoredSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRestoredSurfacesPtr(_result, false);
}

#pragma implementation_key(7443)
inline IFaceMoversPtr ISurfaceContainer::GetFaceMovers ( ) {
    struct IFaceMovers * _result = 0;
    HRESULT _hr = get_FaceMovers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFaceMoversPtr(_result, false);
}

//
// interface IExtrusionSurface wrapper method implementations
//

#pragma implementation_key(7444)
inline void IExtrusionSurface::PutClosedShell ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ClosedShell(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7445)
inline VARIANT_BOOL IExtrusionSurface::GetClosedShell ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClosedShell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IConicSpiral3D wrapper method implementations
//

#pragma implementation_key(7446)
inline void IConicSpiral3D::PutDiameter1 ( double PVal ) {
    HRESULT _hr = put_Diameter1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7447)
inline double IConicSpiral3D::GetDiameter1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7448)
inline void IConicSpiral3D::PutDiameterType1 ( enum ksSpline3DDiameterTypeEnum PVal ) {
    HRESULT _hr = put_DiameterType1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7449)
inline enum ksSpline3DDiameterTypeEnum IConicSpiral3D::GetDiameterType1 ( ) {
    enum ksSpline3DDiameterTypeEnum _result;
    HRESULT _hr = get_DiameterType1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7450)
inline void IConicSpiral3D::PutDiameterBaseObject1 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DiameterBaseObject1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7451)
inline IModelObjectPtr IConicSpiral3D::GetDiameterBaseObject1 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DiameterBaseObject1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7452)
inline void IConicSpiral3D::PutDiameter2 ( double PVal ) {
    HRESULT _hr = put_Diameter2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7453)
inline double IConicSpiral3D::GetDiameter2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7454)
inline void IConicSpiral3D::PutDiameterType2 ( enum ksSpline3DDiameterTypeEnum PVal ) {
    HRESULT _hr = put_DiameterType2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7455)
inline enum ksSpline3DDiameterTypeEnum IConicSpiral3D::GetDiameterType2 ( ) {
    enum ksSpline3DDiameterTypeEnum _result;
    HRESULT _hr = get_DiameterType2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7456)
inline void IConicSpiral3D::PutDiameterBaseObject2 ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DiameterBaseObject2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7457)
inline IModelObjectPtr IConicSpiral3D::GetDiameterBaseObject2 ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DiameterBaseObject2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7458)
inline void IConicSpiral3D::PutGeneratrixTiltAngle ( double PVal ) {
    HRESULT _hr = put_GeneratrixTiltAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7459)
inline double IConicSpiral3D::GetGeneratrixTiltAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_GeneratrixTiltAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7460)
inline void IConicSpiral3D::PutGeneratrixTiltAngleHow ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_GeneratrixTiltAngleHow(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7461)
inline VARIANT_BOOL IConicSpiral3D::GetGeneratrixTiltAngleHow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GeneratrixTiltAngleHow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7462)
inline void IConicSpiral3D::PutHeightCorrectionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HeightCorrectionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7463)
inline VARIANT_BOOL IConicSpiral3D::GetHeightCorrectionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HeightCorrectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICylindricSpiral3D wrapper method implementations
//

#pragma implementation_key(7464)
inline void ICylindricSpiral3D::PutDiameter ( double PVal ) {
    HRESULT _hr = put_Diameter(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7465)
inline double ICylindricSpiral3D::GetDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7466)
inline void ICylindricSpiral3D::PutDiameterType ( enum ksSpline3DDiameterTypeEnum PVal ) {
    HRESULT _hr = put_DiameterType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7467)
inline enum ksSpline3DDiameterTypeEnum ICylindricSpiral3D::GetDiameterType ( ) {
    enum ksSpline3DDiameterTypeEnum _result;
    HRESULT _hr = get_DiameterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7468)
inline void ICylindricSpiral3D::PutDiameterBaseObject ( struct IModelObject * PVal ) {
    HRESULT _hr = put_DiameterBaseObject(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7469)
inline IModelObjectPtr ICylindricSpiral3D::GetDiameterBaseObject ( ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DiameterBaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7470)
inline void ICylindricSpiral3D::PutHeightCorrectionType ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HeightCorrectionType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7471)
inline VARIANT_BOOL ICylindricSpiral3D::GetHeightCorrectionType ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HeightCorrectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IInsertionObject wrapper method implementations
//

#pragma implementation_key(7472)
inline VARIANT_BOOL IInsertionObject::GetPlacement ( double * X, double * Y, double * Angle, VARIANT_BOOL * MirrorSymmetry ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPlacement(X, Y, Angle, MirrorSymmetry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7473)
inline VARIANT_BOOL IInsertionObject::SetPlacement ( double X, double Y, double Angle, VARIANT_BOOL MirrorSymmetry ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPlacement(X, Y, Angle, MirrorSymmetry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7474)
inline void IInsertionObject::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7475)
inline _bstr_t IInsertionObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7476)
inline _bstr_t IInsertionObject::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7477)
inline enum ksInsertionTypeEnum IInsertionObject::GetInsertionType ( ) {
    enum ksInsertionTypeEnum _result;
    HRESULT _hr = get_InsertionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7478)
inline void IInsertionObject::PutDimensionLineScale ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DimensionLineScale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7479)
inline VARIANT_BOOL IInsertionObject::GetDimensionLineScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DimensionLineScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7480)
inline IInsertionDefinitionPtr IInsertionObject::GetInsertionDefinition ( ) {
    struct IInsertionDefinition * _result = 0;
    HRESULT _hr = get_InsertionDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertionDefinitionPtr(_result, false);
}

#pragma implementation_key(7481)
inline void IInsertionObject::PutInsertionDefinition ( struct IInsertionDefinition * PVal ) {
    HRESULT _hr = put_InsertionDefinition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IInsertionObjects wrapper method implementations
//

#pragma implementation_key(7482)
inline IInsertionObjectPtr IInsertionObjects::GetInsertionObject ( const _variant_t & Index ) {
    struct IInsertionObject * _result = 0;
    HRESULT _hr = get_InsertionObject(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertionObjectPtr(_result, false);
}

#pragma implementation_key(7483)
inline IInsertionObjectPtr IInsertionObjects::Add ( struct IInsertionDefinition * Definition ) {
    struct IInsertionObject * _result = 0;
    HRESULT _hr = raw_Add(Definition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertionObjectPtr(_result, false);
}

//
// interface IDrawingContainer wrapper method implementations
//

#pragma implementation_key(7484)
inline _variant_t IDrawingContainer::GetObjects ( const _variant_t & ObjType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(ObjType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7485)
inline IDrawingTextsPtr IDrawingContainer::GetDrawingTexts ( ) {
    struct IDrawingTexts * _result = 0;
    HRESULT _hr = get_DrawingTexts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingTextsPtr(_result, false);
}

#pragma implementation_key(7486)
inline ILineSegmentsPtr IDrawingContainer::GetLineSegments ( ) {
    struct ILineSegments * _result = 0;
    HRESULT _hr = get_LineSegments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineSegmentsPtr(_result, false);
}

#pragma implementation_key(7487)
inline IArcsPtr IDrawingContainer::GetArcs ( ) {
    struct IArcs * _result = 0;
    HRESULT _hr = get_Arcs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArcsPtr(_result, false);
}

#pragma implementation_key(7488)
inline IMultilinesPtr IDrawingContainer::GetMultilines ( ) {
    struct IMultilines * _result = 0;
    HRESULT _hr = get_Multilines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMultilinesPtr(_result, false);
}

#pragma implementation_key(7489)
inline IDrawingContoursPtr IDrawingContainer::GetDrawingContours ( ) {
    struct IDrawingContours * _result = 0;
    HRESULT _hr = get_DrawingContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingContoursPtr(_result, false);
}

#pragma implementation_key(7490)
inline ICirclesPtr IDrawingContainer::GetCircles ( ) {
    struct ICircles * _result = 0;
    HRESULT _hr = get_Circles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICirclesPtr(_result, false);
}

#pragma implementation_key(7491)
inline IPointsPtr IDrawingContainer::GetPoints ( ) {
    struct IPoints * _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointsPtr(_result, false);
}

#pragma implementation_key(7492)
inline IBeziersPtr IDrawingContainer::GetBeziers ( ) {
    struct IBeziers * _result = 0;
    HRESULT _hr = get_Beziers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBeziersPtr(_result, false);
}

#pragma implementation_key(7493)
inline IMacroObjectsPtr IDrawingContainer::GetMacroObjects ( ) {
    struct IMacroObjects * _result = 0;
    HRESULT _hr = get_MacroObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMacroObjectsPtr(_result, false);
}

#pragma implementation_key(7494)
inline ILinesPtr IDrawingContainer::GetLines ( ) {
    struct ILines * _result = 0;
    HRESULT _hr = get_Lines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILinesPtr(_result, false);
}

#pragma implementation_key(7495)
inline IPolyLines2DPtr IDrawingContainer::GetPolyLines2D ( ) {
    struct IPolyLines2D * _result = 0;
    HRESULT _hr = get_PolyLines2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolyLines2DPtr(_result, false);
}

#pragma implementation_key(7496)
inline INurbsesPtr IDrawingContainer::GetNurbses ( ) {
    struct INurbses * _result = 0;
    HRESULT _hr = get_Nurbses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsesPtr(_result, false);
}

#pragma implementation_key(7497)
inline IRastersPtr IDrawingContainer::GetRasters ( ) {
    struct IRasters * _result = 0;
    HRESULT _hr = get_Rasters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRastersPtr(_result, false);
}

#pragma implementation_key(7498)
inline IOleDrawingObjectsPtr IDrawingContainer::GetOleDrawingObjects ( ) {
    struct IOleDrawingObjects * _result = 0;
    HRESULT _hr = get_OleDrawingObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOleDrawingObjectsPtr(_result, false);
}

#pragma implementation_key(7499)
inline IEllipsesPtr IDrawingContainer::GetEllipses ( ) {
    struct IEllipses * _result = 0;
    HRESULT _hr = get_Ellipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEllipsesPtr(_result, false);
}

#pragma implementation_key(7500)
inline IEllipseArcsPtr IDrawingContainer::GetEllipseArcs ( ) {
    struct IEllipseArcs * _result = 0;
    HRESULT _hr = get_EllipseArcs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEllipseArcsPtr(_result, false);
}

#pragma implementation_key(7501)
inline IRectanglesPtr IDrawingContainer::GetRectangles ( ) {
    struct IRectangles * _result = 0;
    HRESULT _hr = get_Rectangles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRectanglesPtr(_result, false);
}

#pragma implementation_key(7502)
inline IRegularPolygonsPtr IDrawingContainer::GetRegularPolygons ( ) {
    struct IRegularPolygons * _result = 0;
    HRESULT _hr = get_RegularPolygons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRegularPolygonsPtr(_result, false);
}

#pragma implementation_key(7503)
inline IEquidistantsPtr IDrawingContainer::GetEquidistants ( ) {
    struct IEquidistants * _result = 0;
    HRESULT _hr = get_Equidistants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEquidistantsPtr(_result, false);
}

#pragma implementation_key(7504)
inline IInsertionObjectsPtr IDrawingContainer::GetInsertionObjects ( ) {
    struct IInsertionObjects * _result = 0;
    HRESULT _hr = get_InsertionObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertionObjectsPtr(_result, false);
}

#pragma implementation_key(7505)
inline IHatchesPtr IDrawingContainer::GetHatches ( ) {
    struct IHatches * _result = 0;
    HRESULT _hr = get_Hatches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHatchesPtr(_result, false);
}

#pragma implementation_key(7506)
inline IColouringsPtr IDrawingContainer::GetColourings ( ) {
    struct IColourings * _result = 0;
    HRESULT _hr = get_Colourings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColouringsPtr(_result, false);
}

#pragma implementation_key(7507)
inline INurbsesPtr IDrawingContainer::GetNurbsesByPoints ( ) {
    struct INurbses * _result = 0;
    HRESULT _hr = get_NurbsesByPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INurbsesPtr(_result, false);
}

#pragma implementation_key(7508)
inline IConicCurvesPtr IDrawingContainer::GetConicCurves ( ) {
    struct IConicCurves * _result = 0;
    HRESULT _hr = get_ConicCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConicCurvesPtr(_result, false);
}

//
// interface IInsertionFragment wrapper method implementations
//

#pragma implementation_key(7509)
inline void IInsertionFragment::PutScale ( double PVal ) {
    HRESULT _hr = put_Scale(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7510)
inline double IInsertionFragment::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7511)
inline void IInsertionFragment::PutMultiLayer ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MultiLayer(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7512)
inline VARIANT_BOOL IInsertionFragment::GetMultiLayer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7513)
inline _variant_t IInsertionFragment::GetVariables ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Variables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7514)
inline IVariable7Ptr IInsertionFragment::GetVariable ( const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_Variable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(7515)
inline long IInsertionFragment::GetVariablesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VariablesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7516)
inline IVariableTablePtr IInsertionFragment::GetVariableTable ( ) {
    struct IVariableTable * _result = 0;
    HRESULT _hr = get_VariableTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariableTablePtr(_result, false);
}

#pragma implementation_key(7517)
inline void IInsertionFragment::PutCreateSpcObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateSpcObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7518)
inline VARIANT_BOOL IInsertionFragment::GetCreateSpcObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateSpcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7519)
inline void IInsertionFragment::PutBreakObjectsEnabled ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BreakObjectsEnabled(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7520)
inline VARIANT_BOOL IInsertionFragment::GetBreakObjectsEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BreakObjectsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7521)
inline _bstr_t IInsertionFragment::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IInsertionView wrapper method implementations
//

#pragma implementation_key(7522)
inline void IInsertionView::PutViewNumber ( long PVal ) {
    HRESULT _hr = put_ViewNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7523)
inline long IInsertionView::GetViewNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_ViewNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7524)
inline _bstr_t IInsertionView::GetViewName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7525)
inline void IInsertionView::PutThinLines ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ThinLines(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7526)
inline VARIANT_BOOL IInsertionView::GetThinLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ThinLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7527)
inline void IInsertionView::PutOwnerDocumentParams ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_OwnerDocumentParams(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7528)
inline VARIANT_BOOL IInsertionView::GetOwnerDocumentParams ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OwnerDocumentParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7529)
inline void IInsertionView::PutCreateSpcObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateSpcObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7530)
inline VARIANT_BOOL IInsertionView::GetCreateSpcObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateSpcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7531)
inline _bstr_t IInsertionView::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IInsertionsManager wrapper method implementations
//

#pragma implementation_key(7532)
inline _variant_t IInsertionsManager::GetInsertionDefinitions ( enum ksInsertionTypeEnum Type ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InsertionDefinitions(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7533)
inline IInsertionDefinitionPtr IInsertionsManager::GetInsertionDefinition ( enum ksInsertionTypeEnum Type, const _variant_t & Index ) {
    struct IInsertionDefinition * _result = 0;
    HRESULT _hr = get_InsertionDefinition(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertionDefinitionPtr(_result, false);
}

#pragma implementation_key(7534)
inline IInsertionDefinitionPtr IInsertionsManager::AddDefinition ( enum ksInsertionTypeEnum Type, _bstr_t Name, _bstr_t FileName ) {
    struct IInsertionDefinition * _result = 0;
    HRESULT _hr = raw_AddDefinition(Type, Name, FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInsertionDefinitionPtr(_result, false);
}

#pragma implementation_key(7535)
inline long IInsertionsManager::GetDefinitionsCount ( enum ksInsertionTypeEnum Type ) {
    long _result = 0;
    HRESULT _hr = get_DefinitionsCount(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISheetMetalLinearRuledShell wrapper method implementations
//

#pragma implementation_key(7536)
inline void ISheetMetalLinearRuledShell::PutSketch2 ( struct ISketch * Result ) {
    HRESULT _hr = put_Sketch2(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7537)
inline ISketchPtr ISheetMetalLinearRuledShell::GetSketch2 ( ) {
    struct ISketch * _result = 0;
    HRESULT _hr = get_Sketch2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchPtr(_result, false);
}

#pragma implementation_key(7538)
inline VARIANT_BOOL ISheetMetalLinearRuledShell::GetUseCommonSegmentationParameters ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCommonSegmentationParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7539)
inline void ISheetMetalLinearRuledShell::PutUseCommonSegmentationParameters ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseCommonSegmentationParameters(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7540)
inline long ISheetMetalLinearRuledShell::GetCurvesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CurvesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7541)
inline void ISheetMetalLinearRuledShell::PutCurveUseSegmentation ( long CurveIndex, VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CurveUseSegmentation(CurveIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7542)
inline VARIANT_BOOL ISheetMetalLinearRuledShell::GetCurveUseSegmentation ( long CurveIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CurveUseSegmentation(CurveIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7543)
inline void ISheetMetalLinearRuledShell::PutCurveSegmentationMethod ( long CurveIndex, enum ksSegmentationMethodEnum PVal ) {
    HRESULT _hr = put_CurveSegmentationMethod(CurveIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7544)
inline enum ksSegmentationMethodEnum ISheetMetalLinearRuledShell::GetCurveSegmentationMethod ( long CurveIndex ) {
    enum ksSegmentationMethodEnum _result;
    HRESULT _hr = get_CurveSegmentationMethod(CurveIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7545)
inline void ISheetMetalLinearRuledShell::PutCurveSegmentationSplitValue ( long CurveIndex, double PVal ) {
    HRESULT _hr = put_CurveSegmentationSplitValue(CurveIndex, PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7546)
inline double ISheetMetalLinearRuledShell::GetCurveSegmentationSplitValue ( long CurveIndex ) {
    double _result = 0;
    HRESULT _hr = get_CurveSegmentationSplitValue(CurveIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7547)
inline void ISheetMetalLinearRuledShell::PutAutoSegmentation ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoSegmentation(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7548)
inline VARIANT_BOOL ISheetMetalLinearRuledShell::GetAutoSegmentation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSegmentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7549)
inline VARIANT_BOOL ISheetMetalLinearRuledShell::AddNewEdge ( long IndexAt ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddNewEdge(IndexAt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7550)
inline VARIANT_BOOL ISheetMetalLinearRuledShell::DeleteEdge ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteEdge(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7551)
inline long ISheetMetalLinearRuledShell::GetEdgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7552)
inline VARIANT_BOOL ISheetMetalLinearRuledShell::SetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double X, double Y, double Z, double * T, struct IModelObject * AssociateVertex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetEdgePointParam(EdgeIndex, StartPoint, X, Y, Z, T, AssociateVertex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7553)
inline VARIANT_BOOL ISheetMetalLinearRuledShell::GetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double * X, double * Y, double * Z, double * T, struct IModelObject * * AssociateVertex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEdgePointParam(EdgeIndex, StartPoint, X, Y, Z, T, AssociateVertex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7554)
inline VARIANT_BOOL ISheetMetalLinearRuledShell::GetEdgePointParams ( VARIANT * Points1, VARIANT * T1, VARIANT * AssociateVertexes1, VARIANT * Points2, VARIANT * T2, VARIANT * AssociateVertexes2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEdgePointParams(Points1, T1, AssociateVertexes1, Points2, T2, AssociateVertexes2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IViewsAndLayersManager wrapper method implementations
//

#pragma implementation_key(7555)
inline IViewsPtr IViewsAndLayersManager::GetViews ( ) {
    struct IViews * _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewsPtr(_result, false);
}

#pragma implementation_key(7556)
inline ILayerGroupsPtr IViewsAndLayersManager::GetLayerGroups ( ) {
    struct ILayerGroups * _result = 0;
    HRESULT _hr = get_LayerGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroupsPtr(_result, false);
}

//
// interface ILayerGroups wrapper method implementations
//

#pragma implementation_key(7557)
inline ILayerGroupPtr ILayerGroups::GetItem ( const _variant_t & Index ) {
    struct ILayerGroup * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroupPtr(_result, false);
}

#pragma implementation_key(7558)
inline ILayerGroupPtr ILayerGroups::Add ( struct IView * Owner, VARIANT_BOOL Dinamic ) {
    struct ILayerGroup * _result = 0;
    HRESULT _hr = raw_Add(Owner, Dinamic, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroupPtr(_result, false);
}

#pragma implementation_key(7559)
inline VARIANT_BOOL ILayerGroups::Attach ( struct ILayerGroup * PGroup ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Attach(PGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7560)
inline VARIANT_BOOL ILayerGroups::Detach ( struct ILayerGroup * PGroup ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Detach(PGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILayerGroup wrapper method implementations
//

#pragma implementation_key(7561)
inline ILayerGroupPtr ILayerGroup::GetOwnerGroup ( ) {
    struct ILayerGroup * _result = 0;
    HRESULT _hr = get_OwnerGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroupPtr(_result, false);
}

#pragma implementation_key(7562)
inline ILayerGroupsPtr ILayerGroup::GetLayerGroups ( ) {
    struct ILayerGroups * _result = 0;
    HRESULT _hr = get_LayerGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroupsPtr(_result, false);
}

#pragma implementation_key(7563)
inline ILayersPtr ILayerGroup::GetLayers ( ) {
    struct ILayers * _result = 0;
    HRESULT _hr = get_Layers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayersPtr(_result, false);
}

#pragma implementation_key(7564)
inline void ILayerGroup::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7565)
inline _bstr_t ILayerGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7566)
inline ILayerFilterConditionsPtr ILayerGroup::GetLayerFilterConditions ( ) {
    struct ILayerFilterConditions * _result = 0;
    HRESULT _hr = get_LayerFilterConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerFilterConditionsPtr(_result, false);
}

#pragma implementation_key(7567)
inline VARIANT_BOOL ILayerGroup::GetLayerStates ( const _variant_t & LayerIndex, VARIANT_BOOL * Visible, VARIANT_BOOL * Background, VARIANT_BOOL * Curent, long * Color ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetLayerStates(LayerIndex, Visible, Background, Curent, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7568)
inline VARIANT_BOOL ILayerGroup::SetLayerStates ( const _variant_t & LayerIndex, VARIANT_BOOL Visible, VARIANT_BOOL Background, VARIANT_BOOL Curent, long Color ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetLayerStates(LayerIndex, Visible, Background, Curent, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7569)
inline void ILayerGroup::PutCurrent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Current(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7570)
inline VARIANT_BOOL ILayerGroup::GetCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7571)
inline VARIANT_BOOL ILayerGroup::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7572)
inline IViewPtr ILayerGroup::GetOwnerView ( ) {
    struct IView * _result = 0;
    HRESULT _hr = get_OwnerView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPtr(_result, false);
}

#pragma implementation_key(7573)
inline void ILayerGroup::PutOwnerView ( struct IView * PVal ) {
    HRESULT _hr = put_OwnerView(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7574)
inline double ILayerGroup::GetUniqueId ( ) {
    double _result = 0;
    HRESULT _hr = get_UniqueId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IKompasDocument3D wrapper method implementations
//

#pragma implementation_key(7575)
inline IPart7Ptr IKompasDocument3D::GetTopPart ( ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = get_TopPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7576)
inline void IKompasDocument3D::PutHideAllPlanes ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllPlanes(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7577)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllPlanes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllPlanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7578)
inline void IKompasDocument3D::PutHideAllAxis ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllAxis(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7579)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7580)
inline void IKompasDocument3D::PutHideAllSketches ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllSketches(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7581)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllSketches ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllSketches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7582)
inline void IKompasDocument3D::PutHideAllPlaces ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllPlaces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7583)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllPlaces ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllPlaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7584)
inline void IKompasDocument3D::PutHideAllSurfaces ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllSurfaces(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7585)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllSurfaces ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7586)
inline void IKompasDocument3D::PutHideAllThreads ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllThreads(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7587)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllThreads ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllThreads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7588)
inline void IKompasDocument3D::PutHideAllCurves ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllCurves(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7589)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllCurves ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7590)
inline void IKompasDocument3D::PutHideAllControlPoints ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllControlPoints(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7591)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllControlPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllControlPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7592)
inline void IKompasDocument3D::PutPerspective ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Perspective(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7593)
inline VARIANT_BOOL IKompasDocument3D::GetPerspective ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7594)
inline void IKompasDocument3D::PutDrawMode ( long PVal ) {
    HRESULT _hr = put_DrawMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7595)
inline long IKompasDocument3D::GetDrawMode ( ) {
    long _result = 0;
    HRESULT _hr = get_DrawMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7596)
inline void IKompasDocument3D::PutShadedWireframe ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ShadedWireframe(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7597)
inline VARIANT_BOOL IKompasDocument3D::GetShadedWireframe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShadedWireframe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7598)
inline void IKompasDocument3D::PutCreateObjectsInCurrentLocalCS ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateObjectsInCurrentLocalCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7599)
inline VARIANT_BOOL IKompasDocument3D::GetCreateObjectsInCurrentLocalCS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateObjectsInCurrentLocalCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7600)
inline void IKompasDocument3D::PutHideAllDimensions ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllDimensions(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7601)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllDimensions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllDimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7602)
inline void IKompasDocument3D::PutHideAllDesignations ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllDesignations(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7603)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllDesignations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllDesignations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7604)
inline void IKompasDocument3D::PutHideAllAuxiliaryGeom ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideAllAuxiliaryGeom(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7605)
inline VARIANT_BOOL IKompasDocument3D::GetHideAllAuxiliaryGeom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideAllAuxiliaryGeom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7606)
inline void IKompasDocument3D::PutHideInComponentsMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideInComponentsMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7607)
inline VARIANT_BOOL IKompasDocument3D::GetHideInComponentsMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideInComponentsMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7608)
inline ISelectionManagerPtr IKompasDocument3D::GetSelectionManager ( ) {
    struct ISelectionManager * _result = 0;
    HRESULT _hr = get_SelectionManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISelectionManagerPtr(_result, false);
}

#pragma implementation_key(7609)
inline IChooseManagerPtr IKompasDocument3D::GetChooseManager ( ) {
    struct IChooseManager * _result = 0;
    HRESULT _hr = get_ChooseManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChooseManagerPtr(_result, false);
}

#pragma implementation_key(7610)
inline IAttributePtr IKompasDocument3D::CreateAttrEx ( double AttrID, _bstr_t Libname, const _variant_t & Objects, struct IPart7 * SourcePart ) {
    struct IAttribute * _result = 0;
    HRESULT _hr = raw_CreateAttrEx(AttrID, Libname, Objects, SourcePart, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAttributePtr(_result, false);
}

#pragma implementation_key(7611)
inline _variant_t IKompasDocument3D::GetAttributesEx ( long Key1, long Key2, long Key3, long Key4, double Numb, const _variant_t & Objects, struct IPart7 * SourcePart ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AttributesEx(Key1, Key2, Key3, Key4, Numb, Objects, SourcePart, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7612)
inline VARIANT_BOOL IKompasDocument3D::RebuildDocument ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RebuildDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7613)
inline void IKompasDocument3D::PutEnableUndo ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_EnableUndo(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7614)
inline VARIANT_BOOL IKompasDocument3D::GetEnableUndo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableUndo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7615)
inline void IKompasDocument3D::PutUndoContainer ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UndoContainer(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7616)
inline VARIANT_BOOL IKompasDocument3D::GetUndoContainer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UndoContainer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7617)
inline VARIANT_BOOL IKompasDocument3D::DeleteHistory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteHistory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7618)
inline ITechnicalDemand3DPtr IKompasDocument3D::GetTechnicalDemand3D ( ) {
    struct ITechnicalDemand3D * _result = 0;
    HRESULT _hr = get_TechnicalDemand3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITechnicalDemand3DPtr(_result, false);
}

#pragma implementation_key(7619)
inline void IKompasDocument3D::PutToleranceMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ToleranceMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7620)
inline VARIANT_BOOL IKompasDocument3D::GetToleranceMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToleranceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAssemblyDocument wrapper method implementations
//

#pragma implementation_key(7621)
inline void IAssemblyDocument::PutDismantleMode ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DismantleMode(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7622)
inline VARIANT_BOOL IAssemblyDocument::GetDismantleMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DismantleMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAssociationView wrapper method implementations
//

#pragma implementation_key(7623)
inline _bstr_t IAssociationView::GetSourceFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7624)
inline void IAssociationView::PutSourceFileName ( _bstr_t Result ) {
    HRESULT _hr = put_SourceFileName(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7625)
inline _bstr_t IAssociationView::GetProjectionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProjectionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7626)
inline void IAssociationView::PutProjectionName ( _bstr_t Result ) {
    HRESULT _hr = put_ProjectionName(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7627)
inline VARIANT_BOOL IAssociationView::GetExplodedView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExplodedView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7628)
inline void IAssociationView::PutExplodedView ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ExplodedView(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7629)
inline void IAssociationView::PutDimensionLayoutScaling ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_DimensionLayoutScaling(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7630)
inline VARIANT_BOOL IAssociationView::GetProjectionLink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectionLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7631)
inline void IAssociationView::PutProjectionLink ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_ProjectionLink(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7632)
inline VARIANT_BOOL IAssociationView::GetSection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Section(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7633)
inline void IAssociationView::PutSection ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Section(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7634)
inline VARIANT_BOOL IAssociationView::GetUnfold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Unfold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7635)
inline void IAssociationView::PutUnfold ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Unfold(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7636)
inline long IAssociationView::GetVisibleLinesStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_VisibleLinesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7637)
inline void IAssociationView::PutVisibleLinesStyle ( long Result ) {
    HRESULT _hr = put_VisibleLinesStyle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7638)
inline VARIANT_BOOL IAssociationView::GetHiddenLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HiddenLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7639)
inline void IAssociationView::PutHiddenLines ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_HiddenLines(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7640)
inline VARIANT_BOOL IAssociationView::GetHiddenLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HiddenLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7641)
inline void IAssociationView::PutHiddenLinesVisible ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_HiddenLinesVisible(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7642)
inline long IAssociationView::GetHiddenLinesStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_HiddenLinesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7643)
inline void IAssociationView::PutHiddenLinesStyle ( long Result ) {
    HRESULT _hr = put_HiddenLinesStyle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7644)
inline VARIANT_BOOL IAssociationView::GetBreakLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BreakLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7645)
inline void IAssociationView::PutBreakLinesVisible ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_BreakLinesVisible(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7646)
inline long IAssociationView::GetBreakLinesStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_BreakLinesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7647)
inline void IAssociationView::PutBreakLinesStyle ( long Result ) {
    HRESULT _hr = put_BreakLinesStyle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7648)
inline VARIANT_BOOL IAssociationView::GetBendLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BendLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7649)
inline void IAssociationView::PutBendLinesVisible ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_BendLinesVisible(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7650)
inline long IAssociationView::GetBendLinesStyle ( ) {
    long _result = 0;
    HRESULT _hr = get_BendLinesStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7651)
inline void IAssociationView::PutBendLinesStyle ( long Result ) {
    HRESULT _hr = put_BendLinesStyle(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7652)
inline IViewPtr IAssociationView::GetBaseView ( ) {
    struct IView * _result = 0;
    HRESULT _hr = get_BaseView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IViewPtr(_result, false);
}

#pragma implementation_key(7653)
inline void IAssociationView::PutBaseView ( struct IView * Result ) {
    HRESULT _hr = put_BaseView(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7654)
inline IDrawingObjectPtr IAssociationView::GetBaseObject ( ) {
    struct IDrawingObject * _result = 0;
    HRESULT _hr = get_BaseObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawingObjectPtr(_result, false);
}

#pragma implementation_key(7655)
inline void IAssociationView::PutBaseObject ( struct IDrawingObject * Result ) {
    HRESULT _hr = put_BaseObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7656)
inline VARIANT_BOOL IAssociationView::GetLocal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7657)
inline void IAssociationView::PutLocal ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_Local(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7658)
inline VARIANT_BOOL IAssociationView::CreateLocalView ( struct IDrawingObject * Contour ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CreateLocalView(Contour, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7659)
inline VARIANT_BOOL IAssociationView::GetSameHatch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SameHatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7660)
inline void IAssociationView::PutSameHatch ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_SameHatch(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7661)
inline _variant_t IAssociationView::GetProjectionMatrix ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ProjectionMatrix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7662)
inline void IAssociationView::PutProjectionMatrix ( const _variant_t & Result ) {
    HRESULT _hr = put_ProjectionMatrix(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7663)
inline VARIANT_BOOL IAssociationView::GetCenterLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7664)
inline void IAssociationView::PutCenterLinesVisible ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_CenterLinesVisible(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7665)
inline VARIANT_BOOL IAssociationView::GetUseOcclusion ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOcclusion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7666)
inline void IAssociationView::PutUseOcclusion ( VARIANT_BOOL Result ) {
    HRESULT _hr = put_UseOcclusion(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7667)
inline _variant_t IAssociationView::GetAssociationObjects ( struct IKompasAPIObject * ModelObject ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AssociationObjects(ModelObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7668)
inline VARIANT_BOOL IAssociationView::GetIsAssociationObjectsVisible ( struct IKompasAPIObject * ModelObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAssociationObjectsVisible(ModelObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7669)
inline _variant_t IAssociationView::FindFaceEdges ( double X, double Y ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FindFaceEdges(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7670)
inline IModelObjectPtr IAssociationView::FindFace ( double X, double Y, struct IKompasDocument3D * Document3D ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = raw_FindFace(X, Y, Document3D, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface ICopyGeometry wrapper method implementations
//

#pragma implementation_key(7671)
inline void ICopyGeometry::PutInitialObjects ( const _variant_t & Objects ) {
    HRESULT _hr = put_InitialObjects(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7672)
inline _variant_t ICopyGeometry::GetInitialObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InitialObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7673)
inline VARIANT_BOOL ICopyGeometry::Destroy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Destroy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7674)
inline VARIANT_BOOL ICopyGeometry::IsInitialObject ( struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsInitialObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7675)
inline VARIANT_BOOL ICopyGeometry::AddInitialObjects ( const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddInitialObjects(Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7676)
inline VARIANT_BOOL ICopyGeometry::AddInitialObjectsFromExternalDocument ( struct IKompasDocument3D * ExternalDocument, struct ILocalCoordinateSystem * ExternalLocalCS, const _variant_t & Objects ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddInitialObjectsFromExternalDocument(ExternalDocument, ExternalLocalCS, Objects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7677)
inline VARIANT_BOOL ICopyGeometry::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7678)
inline VARIANT_BOOL ICopyGeometry::IsSuitableObject ( struct IModelObject * Object ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSuitableObject(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7679)
inline VARIANT_BOOL ICopyGeometry::GetContextObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContextObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7680)
inline void ICopyGeometry::PutContextObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ContextObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7681)
inline _bstr_t ICopyGeometry::GetDocumentFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7682)
inline IKompasDocument3DPtr ICopyGeometry::OpenDocument ( VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly ) {
    struct IKompasDocument3D * _result = 0;
    HRESULT _hr = raw_OpenDocument(Visible, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocument3DPtr(_result, false);
}

#pragma implementation_key(7683)
inline ILocalCoordinateSystemPtr ICopyGeometry::GetLocalCS ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_LocalCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(7684)
inline void ICopyGeometry::PutLocalCS ( struct ILocalCoordinateSystem * PVal ) {
    HRESULT _hr = put_LocalCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7685)
inline ILocalCoordinateSystemPtr ICopyGeometry::GetExternalLocalCS ( ) {
    struct ILocalCoordinateSystem * _result = 0;
    HRESULT _hr = get_ExternalLocalCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILocalCoordinateSystemPtr(_result, false);
}

#pragma implementation_key(7686)
inline void ICopyGeometry::PutExternalLocalCS ( struct ILocalCoordinateSystem * PVal ) {
    HRESULT _hr = put_ExternalLocalCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7687)
inline VARIANT_BOOL ICopyGeometry::GetByCollectionGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ByCollectionGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7688)
inline void ICopyGeometry::PutByCollectionGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_ByCollectionGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7689)
inline ICollectionGeometryPtr ICopyGeometry::GetCollectionGeometry ( ) {
    struct ICollectionGeometry * _result = 0;
    HRESULT _hr = get_CollectionGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICollectionGeometryPtr(_result, false);
}

#pragma implementation_key(7690)
inline void ICopyGeometry::PutCollectionGeometry ( struct ICollectionGeometry * PVal ) {
    HRESULT _hr = put_CollectionGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7691)
inline VARIANT_BOOL ICopyGeometry::GetMirrorCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MirrorCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7692)
inline void ICopyGeometry::PutMirrorCopy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MirrorCopy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7693)
inline enum ksCopyGeometryBuildingTypeEnum ICopyGeometry::GetBuildingType ( ) {
    enum ksCopyGeometryBuildingTypeEnum _result;
    HRESULT _hr = get_BuildingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7694)
inline void ICopyGeometry::PutBuildingType ( enum ksCopyGeometryBuildingTypeEnum PVal ) {
    HRESULT _hr = put_BuildingType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7695)
inline VARIANT_BOOL ICopyGeometry::GetAutoUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7696)
inline void ICopyGeometry::PutAutoUpdate ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoUpdate(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7697)
inline VARIANT_BOOL ICopyGeometry::GetWatchForSourceChange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WatchForSourceChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7698)
inline void ICopyGeometry::PutWatchForSourceChange ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_WatchForSourceChange(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7699)
inline VARIANT_BOOL ICopyGeometry::Synhronise ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Synhronise(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICopiesGeometry wrapper method implementations
//

#pragma implementation_key(7700)
inline ICopyGeometryPtr ICopiesGeometry::GetCopyGeometry ( const _variant_t & Index ) {
    struct ICopyGeometry * _result = 0;
    HRESULT _hr = get_CopyGeometry(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICopyGeometryPtr(_result, false);
}

#pragma implementation_key(7701)
inline ICopyGeometryPtr ICopiesGeometry::Add ( ) {
    struct ICopyGeometry * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICopyGeometryPtr(_result, false);
}

//
// interface IModelContainer wrapper method implementations
//

#pragma implementation_key(7702)
inline _variant_t IModelContainer::GetObjects ( const _variant_t & ObjType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(ObjType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7703)
inline ISketchsPtr IModelContainer::GetSketchs ( ) {
    struct ISketchs * _result = 0;
    HRESULT _hr = get_Sketchs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISketchsPtr(_result, false);
}

#pragma implementation_key(7704)
inline IExtrusionsPtr IModelContainer::GetExtrusions ( ) {
    struct IExtrusions * _result = 0;
    HRESULT _hr = get_Extrusions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExtrusionsPtr(_result, false);
}

#pragma implementation_key(7705)
inline IPoints3DPtr IModelContainer::GetPoints3D ( ) {
    struct IPoints3D * _result = 0;
    HRESULT _hr = get_Points3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPoints3DPtr(_result, false);
}

#pragma implementation_key(7706)
inline IFeaturePatternsPtr IModelContainer::GetFeaturePatterns ( ) {
    struct IFeaturePatterns * _result = 0;
    HRESULT _hr = get_FeaturePatterns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFeaturePatternsPtr(_result, false);
}

#pragma implementation_key(7707)
inline ISurfaceThickeningsPtr IModelContainer::GetSurfaceThickenings ( ) {
    struct ISurfaceThickenings * _result = 0;
    HRESULT _hr = get_SurfaceThickenings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceThickeningsPtr(_result, false);
}

#pragma implementation_key(7708)
inline IRotatedsPtr IModelContainer::GetRotateds ( ) {
    struct IRotateds * _result = 0;
    HRESULT _hr = get_Rotateds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRotatedsPtr(_result, false);
}

#pragma implementation_key(7709)
inline IScalings3DPtr IModelContainer::GetScalings3D ( ) {
    struct IScalings3D * _result = 0;
    HRESULT _hr = get_Scalings3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScalings3DPtr(_result, false);
}

#pragma implementation_key(7710)
inline IBilletsObsoletesPtr IModelContainer::GetBilletsObsoletes ( ) {
    struct IBilletsObsoletes * _result = 0;
    HRESULT _hr = get_BilletsObsoletes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBilletsObsoletesPtr(_result, false);
}

#pragma implementation_key(7711)
inline ICopiesGeometryPtr IModelContainer::GetCopiesGeometry ( ) {
    struct ICopiesGeometry * _result = 0;
    HRESULT _hr = get_CopiesGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICopiesGeometryPtr(_result, false);
}

#pragma implementation_key(7712)
inline ICollectionsGeometryPtr IModelContainer::GetCollectionsGeometry ( ) {
    struct ICollectionsGeometry * _result = 0;
    HRESULT _hr = get_CollectionsGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICollectionsGeometryPtr(_result, false);
}

#pragma implementation_key(7713)
inline IUserObjects3DPtr IModelContainer::GetUserObjects ( ) {
    struct IUserObjects3D * _result = 0;
    HRESULT _hr = get_UserObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserObjects3DPtr(_result, false);
}

#pragma implementation_key(7714)
inline IHoles3DPtr IModelContainer::GetHoles3D ( ) {
    struct IHoles3D * _result = 0;
    HRESULT _hr = get_Holes3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHoles3DPtr(_result, false);
}

#pragma implementation_key(7715)
inline IChamfersPtr IModelContainer::GetChamfers ( ) {
    struct IChamfers * _result = 0;
    HRESULT _hr = get_Chamfers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChamfersPtr(_result, false);
}

#pragma implementation_key(7716)
inline IFilletsPtr IModelContainer::GetFillets ( ) {
    struct IFillets * _result = 0;
    HRESULT _hr = get_Fillets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFilletsPtr(_result, false);
}

#pragma implementation_key(7717)
inline IInclinesPtr IModelContainer::GetInclines ( ) {
    struct IInclines * _result = 0;
    HRESULT _hr = get_Inclines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInclinesPtr(_result, false);
}

#pragma implementation_key(7718)
inline IRibsPtr IModelContainer::GetRibs ( ) {
    struct IRibs * _result = 0;
    HRESULT _hr = get_Ribs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRibsPtr(_result, false);
}

#pragma implementation_key(7719)
inline IShellsPtr IModelContainer::GetShells ( ) {
    struct IShells * _result = 0;
    HRESULT _hr = get_Shells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShellsPtr(_result, false);
}

#pragma implementation_key(7720)
inline IBooleansPtr IModelContainer::GetBooleans ( ) {
    struct IBooleans * _result = 0;
    HRESULT _hr = get_Booleans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBooleansPtr(_result, false);
}

#pragma implementation_key(7721)
inline ICutsPtr IModelContainer::GetCuts ( ) {
    struct ICuts * _result = 0;
    HRESULT _hr = get_Cuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutsPtr(_result, false);
}

#pragma implementation_key(7722)
inline ILoftsPtr IModelContainer::GetLofts ( ) {
    struct ILofts * _result = 0;
    HRESULT _hr = get_Lofts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILoftsPtr(_result, false);
}

#pragma implementation_key(7723)
inline IEvolutionsPtr IModelContainer::GetEvolutions ( ) {
    struct IEvolutions * _result = 0;
    HRESULT _hr = get_Evolutions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEvolutionsPtr(_result, false);
}

#pragma implementation_key(7724)
inline IUnionsComponentsPtr IModelContainer::GetUnionsComponents ( ) {
    struct IUnionsComponents * _result = 0;
    HRESULT _hr = get_UnionsComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnionsComponentsPtr(_result, false);
}

#pragma implementation_key(7725)
inline IMoldCavitiesPtr IModelContainer::GetMoldCavities ( ) {
    struct IMoldCavities * _result = 0;
    HRESULT _hr = get_MoldCavities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMoldCavitiesPtr(_result, false);
}

#pragma implementation_key(7726)
inline IMacroObjects3DPtr IModelContainer::GetMacroObjects3D ( ) {
    struct IMacroObjects3D * _result = 0;
    HRESULT _hr = get_MacroObjects3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMacroObjects3DPtr(_result, false);
}

#pragma implementation_key(7727)
inline IBodyRepositionsPtr IModelContainer::GetBodyRepositions ( ) {
    struct IBodyRepositions * _result = 0;
    HRESULT _hr = get_BodyRepositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBodyRepositionsPtr(_result, false);
}

#pragma implementation_key(7728)
inline IModelObjectPtr IModelContainer::AddObject ( ksObj3dTypeEnum ObjectType ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = raw_AddObject(ObjectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7729)
inline IFullFilletsPtr IModelContainer::GetFullFillets ( ) {
    struct IFullFillets * _result = 0;
    HRESULT _hr = get_FullFillets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFullFilletsPtr(_result, false);
}

#pragma implementation_key(7730)
inline IWireFrames3DPtr IModelContainer::GetWireFrames3D ( ) {
    struct IWireFrames3D * _result = 0;
    HRESULT _hr = get_WireFrames3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWireFrames3DPtr(_result, false);
}

#pragma implementation_key(7731)
inline ISplitSolidsPtr IModelContainer::GetSplitSolids ( ) {
    struct ISplitSolids * _result = 0;
    HRESULT _hr = get_SplitSolids(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISplitSolidsPtr(_result, false);
}

//
// interface IPart7 wrapper method implementations
//

#pragma implementation_key(7732)
inline _bstr_t IPart7::GetMarking ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Marking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7733)
inline void IPart7::PutMarking ( _bstr_t PVal ) {
    HRESULT _hr = put_Marking(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7734)
inline _bstr_t IPart7::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7735)
inline void IPart7::PutFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_FileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7736)
inline void IPart7::PutStandard ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Standard(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7737)
inline VARIANT_BOOL IPart7::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7738)
inline void IPart7::PutFixed ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Fixed(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7739)
inline VARIANT_BOOL IPart7::GetFixed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Fixed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7740)
inline VARIANT_BOOL IPart7::GetDetail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Detail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7741)
inline double IPart7::GetMass ( ) {
    double _result = 0;
    HRESULT _hr = get_Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7742)
inline double IPart7::GetDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7743)
inline _bstr_t IPart7::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7744)
inline VARIANT_BOOL IPart7::SetMaterial ( _bstr_t Name, double Density ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetMaterial(Name, Density, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7745)
inline IParts7Ptr IPart7::GetParts ( ) {
    struct IParts7 * _result = 0;
    HRESULT _hr = get_Parts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParts7Ptr(_result, false);
}

#pragma implementation_key(7746)
inline IVariableTablePtr IPart7::GetVariableTable ( ) {
    struct IVariableTable * _result = 0;
    HRESULT _hr = get_VariableTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariableTablePtr(_result, false);
}

#pragma implementation_key(7747)
inline _variant_t IPart7::GetPartsEx ( const _variant_t & PartCollectionType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PartsEx(PartCollectionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7748)
inline long IPart7::GetInstanceCount ( struct IPart7 * Part ) {
    long _result = 0;
    HRESULT _hr = get_InstanceCount(Part, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7749)
inline _variant_t IPart7::SelectByPoint ( const _variant_t & Objects, double X, double Y, double Z ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SelectByPoint(Objects, X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7750)
inline VARIANT_BOOL IPart7::TransferObjects ( const _variant_t & Objects, struct ILocalCoordinateSystem * Lcs, VARIANT_BOOL HoldPosition ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransferObjects(Objects, Lcs, HoldPosition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7751)
inline VARIANT_BOOL IPart7::Load ( VARIANT_BOOL Full ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Load(Full, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7752)
inline VARIANT_BOOL IPart7::Unload ( VARIANT_BOOL Full ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Unload(Full, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7753)
inline enum ksLoadStateEnum IPart7::GetLoadState ( ) {
    enum ksLoadStateEnum _result;
    HRESULT _hr = get_LoadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7754)
inline IModelObjectPtr IPart7::GetDefaultObject ( ksObj3dTypeEnum Type ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = get_DefaultObject(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7755)
inline VARIANT_BOOL IPart7::IsVariableNameValid ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVariableNameValid(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7756)
inline IVariable7Ptr IPart7::AddVariable ( _bstr_t Name, double Value, _bstr_t Note ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = raw_AddVariable(Name, Value, Note, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(7757)
inline VARIANT_BOOL IPart7::RebuildModel ( VARIANT_BOOL Redraw ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RebuildModel(Redraw, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7758)
inline enum ksPartAccessTypeEnum IPart7::GetReadOnly ( ) {
    enum ksPartAccessTypeEnum _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7759)
inline void IPart7::PutReadOnly ( enum ksPartAccessTypeEnum PVal ) {
    HRESULT _hr = put_ReadOnly(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7760)
inline VARIANT_BOOL IPart7::GetStaffVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StaffVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7761)
inline void IPart7::PutStaffVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_StaffVisible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7762)
inline VARIANT_BOOL IPart7::SaveAs ( _bstr_t PathName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveAs(PathName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7763)
inline IModelObjectPtr IPart7::FindObject ( struct IModelObject * Obj, struct IPart7 * SourcePart ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = raw_FindObject(Obj, SourcePart, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7764)
inline void IPart7::PutCreateSpcObjects ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_CreateSpcObjects(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7765)
inline VARIANT_BOOL IPart7::GetCreateSpcObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CreateSpcObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7766)
inline void IPart7::PutIsLocal ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IsLocal(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7767)
inline VARIANT_BOOL IPart7::GetIsLocal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7768)
inline IOpenDocumentParamPtr IPart7::GetOpenDocumentParam ( ) {
    struct IOpenDocumentParam * _result = 0;
    HRESULT _hr = raw_GetOpenDocumentParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOpenDocumentParamPtr(_result, false);
}

#pragma implementation_key(7769)
inline IKompasDocument3DPtr IPart7::BeginEdit ( struct IOpenDocumentParam * Param ) {
    struct IKompasDocument3D * _result = 0;
    HRESULT _hr = raw_BeginEdit(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocument3DPtr(_result, false);
}

#pragma implementation_key(7770)
inline VARIANT_BOOL IPart7::EndEdit ( VARIANT_BOOL Rebuild ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_EndEdit(Rebuild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7771)
inline _variant_t IPart7::FindObjectsByPoint ( double X, double Y, double Z, VARIANT_BOOL FirstLevel ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FindObjectsByPoint(X, Y, Z, FirstLevel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7772)
inline IHatchParamPtr IPart7::GetHatchParam ( ) {
    struct IHatchParam * _result = 0;
    HRESULT _hr = get_HatchParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHatchParamPtr(_result, false);
}

#pragma implementation_key(7773)
inline long IPart7::GetUniqueNum ( ksObj3dTypeEnum OType ) {
    long _result = 0;
    HRESULT _hr = get_UniqueNum(OType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7774)
inline void IPart7::PutUniqueNum ( ksObj3dTypeEnum OType, long Result ) {
    HRESULT _hr = put_UniqueNum(OType, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7775)
inline VARIANT_BOOL IPart7::ChangeObjectLinks ( const _variant_t & SourceObjs, const _variant_t & DestObjs, VARIANT_BOOL RebuildAll ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ChangeObjectLinks(SourceObjs, DestObjs, RebuildAll, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7776)
inline VARIANT_BOOL IPart7::GetIsLayoutGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLayoutGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7777)
inline void IPart7::PutIsLayoutGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IsLayoutGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7778)
inline VARIANT_BOOL IPart7::GetIsBillet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsBillet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7779)
inline void IPart7::PutIsBillet ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IsBillet(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7780)
inline IPlacement3DPtr IPart7::GetPlacement ( ) {
    struct IPlacement3D * _result = 0;
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlacement3DPtr(_result, false);
}

#pragma implementation_key(7781)
inline VARIANT_BOOL IPart7::UpdatePlacement ( VARIANT_BOOL Redraw ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UpdatePlacement(Redraw, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7782)
inline ISpecRough3DPtr IPart7::GetSpecRough ( ) {
    struct ISpecRough3D * _result = 0;
    HRESULT _hr = get_SpecRough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecRough3DPtr(_result, false);
}

#pragma implementation_key(7783)
inline void IPart7::PutLeftHandedCS ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_LeftHandedCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7784)
inline VARIANT_BOOL IPart7::GetLeftHandedCS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LeftHandedCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7785)
inline VARIANT_BOOL IPart7::MirroringPlacement ( ksObj3dTypeEnum Axis ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_MirroringPlacement(Axis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7786)
inline VARIANT_BOOL IPart7::DestroySubassembly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DestroySubassembly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7787)
inline double IPart7::GetMaxSag ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxSag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7788)
inline IMateConstraints3DPtr IPart7::GetMateConstraints ( ) {
    struct IMateConstraints3D * _result = 0;
    HRESULT _hr = get_MateConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMateConstraints3DPtr(_result, false);
}

#pragma implementation_key(7789)
inline IBody7Ptr IPart7::GetBodyById ( long BodyId ) {
    struct IBody7 * _result = 0;
    HRESULT _hr = raw_GetBodyById(BodyId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBody7Ptr(_result, false);
}

#pragma implementation_key(7790)
inline IUserFoldersPtr IPart7::GetUserFolders ( ) {
    struct IUserFolders * _result = 0;
    HRESULT _hr = get_UserFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserFoldersPtr(_result, false);
}

#pragma implementation_key(7791)
inline void IPart7::PutToleranceRecalcType ( enum ksToleranceRecalcsEnum PVal ) {
    HRESULT _hr = put_ToleranceRecalcType(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7792)
inline enum ksToleranceRecalcsEnum IPart7::GetToleranceRecalcType ( ) {
    enum ksToleranceRecalcsEnum _result;
    HRESULT _hr = get_ToleranceRecalcType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7793)
inline void IPart7::PutUserToleranceRecalcId ( long PVal ) {
    HRESULT _hr = put_UserToleranceRecalcId(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7794)
inline long IPart7::GetUserToleranceRecalcId ( ) {
    long _result = 0;
    HRESULT _hr = get_UserToleranceRecalcId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7795)
inline void IPart7::PutUserToleranceRecalcName ( _bstr_t PVal ) {
    HRESULT _hr = put_UserToleranceRecalcName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7796)
inline _bstr_t IPart7::GetUserToleranceRecalcName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserToleranceRecalcName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7797)
inline void IPart7::PutUseDummy ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_UseDummy(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7798)
inline VARIANT_BOOL IPart7::GetUseDummy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDummy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7799)
inline void IPart7::PutDummyFileName ( _bstr_t PVal ) {
    HRESULT _hr = put_DummyFileName(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7800)
inline _bstr_t IPart7::GetDummyFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DummyFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7801)
inline long IPart7::GetDummyEmbodimentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_DummyEmbodimentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7802)
inline _bstr_t IPart7::GetDummyEmbodimentMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDummyEmbodimentMarking(MarkingType, AddSystemDelimer, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7803)
inline VARIANT_BOOL IPart7::SetDummyEmbodiment ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetDummyEmbodiment(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7804)
inline VARIANT_BOOL IPart7::UnloadEx ( enum ksLoadStateEnum Type ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UnloadEx(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7805)
inline IKompasDocument3DPtr IPart7::OpenSourceDocument ( struct IOpenDocumentParam * Param ) {
    struct IKompasDocument3D * _result = 0;
    HRESULT _hr = raw_OpenSourceDocument(Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasDocument3DPtr(_result, false);
}

#pragma implementation_key(7806)
inline IZonesManagerPtr IPart7::GetZonesManager ( ) {
    struct IZonesManager * _result = 0;
    HRESULT _hr = get_ZonesManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZonesManagerPtr(_result, false);
}

#pragma implementation_key(7807)
inline void IPart7::PutInheritExclude ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InheritExclude(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7808)
inline VARIANT_BOOL IPart7::GetInheritExclude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritExclude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7809)
inline long IPart7::GetPartsGroupNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_PartsGroupNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7810)
inline void IPart7::PutPartsGroupNumber ( long PVal ) {
    HRESULT _hr = put_PartsGroupNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7811)
inline VARIANT_BOOL IPart7::IsLocalResultExist ( VARIANT_BOOL Reqursive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLocalResultExist(Reqursive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7812)
inline void IPart7::PutRevealComposition ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_RevealComposition(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7813)
inline VARIANT_BOOL IPart7::GetRevealComposition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RevealComposition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7814)
inline void IPart7::PutInheritVisible ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_InheritVisible(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7815)
inline VARIANT_BOOL IPart7::GetInheritVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7816)
inline VARIANT_BOOL IPart7::TransformPoint ( double * X, double * Y, double * Z, struct IPart7 * Part ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformPoint(X, Y, Z, Part, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7817)
inline VARIANT_BOOL IPart7::TransformPoints ( VARIANT * Points, struct IPart7 * Part ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TransformPoints(Points, Part, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7818)
inline _variant_t IPart7::GetSummMatrix ( struct IPart7 * Part ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSummMatrix(Part, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7819)
inline IBody7Ptr IPart7::FindBody ( _bstr_t UniqueMetaObjectKey ) {
    struct IBody7 * _result = 0;
    HRESULT _hr = raw_FindBody(UniqueMetaObjectKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBody7Ptr(_result, false);
}

#pragma implementation_key(7820)
inline _variant_t IPart7::GetSimilarInstances ( struct IPart7 * Part ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSimilarInstances(Part, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7821)
inline IModelObjectPtr IPart7::FindSimilarObject ( struct IModelObject * Obj ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = raw_FindSimilarObject(Obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

//
// interface IParts7 wrapper method implementations
//

#pragma implementation_key(7822)
inline IPart7Ptr IParts7::GetPart ( const _variant_t & Index ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = get_Part(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7823)
inline IPart7Ptr IParts7::AddFromFile ( _bstr_t FileName, VARIANT_BOOL ExternalFile, VARIANT_BOOL Redraw ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = raw_AddFromFile(FileName, ExternalFile, Redraw, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7824)
inline IPart7Ptr IParts7::Add ( _bstr_t FileName, struct IModelObject * Plane ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = raw_Add(FileName, Plane, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7825)
inline IPart7Ptr IParts7::CreateDocument ( enum DocumentTypeEnum Type, VARIANT_BOOL Local, VARIANT_BOOL Redraw ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = raw_CreateDocument(Type, Local, Redraw, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7826)
inline IPart7Ptr IParts7::CreateDocumentEx ( _bstr_t StartFileName, enum DocumentTypeEnum Type, VARIANT_BOOL Local, VARIANT_BOOL Redraw ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = raw_CreateDocumentEx(StartFileName, Type, Local, Redraw, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7827)
inline IPart7Ptr IParts7::SaveAsDetail ( const _variant_t & Objects, struct ISaveAsDetailParam * Param ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = raw_SaveAsDetail(Objects, Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7828)
inline VARIANT_BOOL IParts7::MoveParts ( const _variant_t & Parts ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_MoveParts(Parts, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7829)
inline IPart7Ptr IParts7::CreateSubAssembly ( const _variant_t & Parts, _bstr_t FileName ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = raw_CreateSubAssembly(Parts, FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7830)
inline IPart7Ptr IParts7::FindPart ( _bstr_t UniqueMetaObjectKey, VARIANT_BOOL Reqursive ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = raw_FindPart(UniqueMetaObjectKey, Reqursive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

//
// interface IEmbodiment wrapper method implementations
//

#pragma implementation_key(7831)
inline _bstr_t IEmbodiment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7832)
inline void IEmbodiment::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7833)
inline _bstr_t IEmbodiment::GetMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMarking(MarkingType, AddSystemDelimer, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7834)
inline VARIANT_BOOL IEmbodiment::SetMarking ( enum ksVariantMarkingTypeEnum MarkingType, _bstr_t Marking ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetMarking(MarkingType, Marking, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7835)
inline double IEmbodiment::GetMass ( ) {
    double _result = 0;
    HRESULT _hr = get_Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7836)
inline double IEmbodiment::GetDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7837)
inline _bstr_t IEmbodiment::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7838)
inline VARIANT_BOOL IEmbodiment::SetMaterial ( _bstr_t Name, double Density ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetMaterial(Name, Density, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7839)
inline VARIANT_BOOL IEmbodiment::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7840)
inline VARIANT_BOOL IEmbodiment::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7841)
inline VARIANT_BOOL IEmbodiment::GetIsCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCurrent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7842)
inline void IEmbodiment::PutIsCurrent ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_IsCurrent(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7843)
inline IEmbodimentPtr IEmbodiment::GetOwner ( ) {
    struct IEmbodiment * _result = 0;
    HRESULT _hr = get_Owner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEmbodimentPtr(_result, false);
}

#pragma implementation_key(7844)
inline IEmbodimentPtr IEmbodiment::GetEmbodiment ( long Index ) {
    struct IEmbodiment * _result = 0;
    HRESULT _hr = get_Embodiment(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEmbodimentPtr(_result, false);
}

#pragma implementation_key(7845)
inline long IEmbodiment::GetEmbodimentsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EmbodimentsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7846)
inline ISpecRough3DPtr IEmbodiment::GetSpecRough ( ) {
    struct ISpecRough3D * _result = 0;
    HRESULT _hr = get_SpecRough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecRough3DPtr(_result, false);
}

#pragma implementation_key(7847)
inline void IEmbodiment::PutLeftHandedCS ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_LeftHandedCS(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7848)
inline VARIANT_BOOL IEmbodiment::GetLeftHandedCS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LeftHandedCS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7849)
inline IPart7Ptr IEmbodiment::GetPart ( ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

//
// interface IEmbodimentsManager wrapper method implementations
//

#pragma implementation_key(7850)
inline _variant_t IEmbodimentsManager::GetEmbodimentsTree ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer, VARIANT_BOOL AddSpaces ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetEmbodimentsTree(MarkingType, AddSystemDelimer, AddSpaces, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7851)
inline _bstr_t IEmbodimentsManager::GetCurrentEmbodimentMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCurrentEmbodimentMarking(MarkingType, AddSystemDelimer, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7852)
inline long IEmbodimentsManager::GetCurrentEmbodimentIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentEmbodimentIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7853)
inline VARIANT_BOOL IEmbodimentsManager::SetCurrentEmbodiment ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCurrentEmbodiment(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7854)
inline VARIANT_BOOL IEmbodimentsManager::AddEmbodiment ( const _variant_t & ParentIndex, VARIANT_BOOL Depended, _bstr_t BaseMarking, _bstr_t EmbodimentNumber, _bstr_t AdditionalNumber ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddEmbodiment(ParentIndex, Depended, BaseMarking, EmbodimentNumber, AdditionalNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7855)
inline VARIANT_BOOL IEmbodimentsManager::DeleteEmbodiment ( const _variant_t & Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DeleteEmbodiment(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7856)
inline _bstr_t IEmbodimentsManager::GetEmbodimentMarking ( long Index, enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetEmbodimentMarking(Index, MarkingType, AddSystemDelimer, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7857)
inline VARIANT_BOOL IEmbodimentsManager::SetEmbodimentMarking ( long Index, enum ksVariantMarkingTypeEnum MarkingType, _bstr_t Marking ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetEmbodimentMarking(Index, MarkingType, Marking, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7858)
inline long IEmbodimentsManager::GetEmbodimentCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EmbodimentCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7859)
inline IEmbodimentPtr IEmbodimentsManager::GetEmbodiment ( const _variant_t & Index ) {
    struct IEmbodiment * _result = 0;
    HRESULT _hr = get_Embodiment(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEmbodimentPtr(_result, false);
}

#pragma implementation_key(7860)
inline IEmbodimentPtr IEmbodimentsManager::GetTopEmbodiment ( ) {
    struct IEmbodiment * _result = 0;
    HRESULT _hr = get_TopEmbodiment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEmbodimentPtr(_result, false);
}

#pragma implementation_key(7861)
inline IEmbodimentPtr IEmbodimentsManager::GetCurrentEmbodiment ( ) {
    struct IEmbodiment * _result = 0;
    HRESULT _hr = get_CurrentEmbodiment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEmbodimentPtr(_result, false);
}

#pragma implementation_key(7862)
inline VARIANT_BOOL IEmbodimentsManager::AddMirrorEmbodiment ( const _variant_t & ParentIndex, _bstr_t BaseMarking, _bstr_t EmbodimentNumber, _bstr_t AdditionalNumber ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddMirrorEmbodiment(ParentIndex, BaseMarking, EmbodimentNumber, AdditionalNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7863)
inline _bstr_t IEmbodimentsManager::GetEmbodimentAdditionalNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EmbodimentAdditionalNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7864)
inline void IEmbodimentsManager::PutEmbodimentAdditionalNumber ( _bstr_t PVal ) {
    HRESULT _hr = put_EmbodimentAdditionalNumber(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7865)
inline IEmbodimentPtr IEmbodimentsManager::FindEmbodiment ( _bstr_t UniqueMetaObjectKey ) {
    struct IEmbodiment * _result = 0;
    HRESULT _hr = raw_FindEmbodiment(UniqueMetaObjectKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEmbodimentPtr(_result, false);
}

//
// interface IMate3DDependentPosition wrapper method implementations
//

#pragma implementation_key(7866)
inline void IMate3DDependentPosition::PutBySample ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_BySample(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7867)
inline VARIANT_BOOL IMate3DDependentPosition::GetBySample ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BySample(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7868)
inline void IMate3DDependentPosition::PutSampleObject1 ( struct IPart7 * PVal ) {
    HRESULT _hr = put_SampleObject1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7869)
inline IPart7Ptr IMate3DDependentPosition::GetSampleObject1 ( ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = get_SampleObject1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

#pragma implementation_key(7870)
inline void IMate3DDependentPosition::PutSampleObject2 ( struct IPart7 * PVal ) {
    HRESULT _hr = put_SampleObject2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7871)
inline IPart7Ptr IMate3DDependentPosition::GetSampleObject2 ( ) {
    struct IPart7 * _result = 0;
    HRESULT _hr = get_SampleObject2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPart7Ptr(_result, false);
}

//
// interface IKompasDocument3D1 wrapper method implementations
//

#pragma implementation_key(7872)
inline void IKompasDocument3D1::PutHideLayoutGeometry ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_HideLayoutGeometry(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7873)
inline VARIANT_BOOL IKompasDocument3D1::GetHideLayoutGeometry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideLayoutGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7874)
inline void IKompasDocument3D1::PutEditObject ( struct IFeature7 * Result ) {
    HRESULT _hr = put_EditObject(Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7875)
inline IFeature7Ptr IKompasDocument3D1::GetEditObject ( ) {
    struct IFeature7 * _result = 0;
    HRESULT _hr = get_EditObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFeature7Ptr(_result, false);
}

#pragma implementation_key(7876)
inline IDocument3DManagerPtr IKompasDocument3D1::GetDocument3DManager ( ) {
    struct IDocument3DManager * _result = 0;
    HRESULT _hr = get_Document3DManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDocument3DManagerPtr(_result, false);
}

#pragma implementation_key(7877)
inline ISpecRough3DPtr IKompasDocument3D1::GetSpecRough ( ) {
    struct ISpecRough3D * _result = 0;
    HRESULT _hr = get_SpecRough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISpecRough3DPtr(_result, false);
}

#pragma implementation_key(7878)
inline VARIANT_BOOL IKompasDocument3D1::ClearUndo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ClearUndo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7879)
inline IMateConstraints3DPtr IKompasDocument3D1::GetMateConstraints ( ) {
    struct IMateConstraints3D * _result = 0;
    HRESULT _hr = get_MateConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMateConstraints3DPtr(_result, false);
}

#pragma implementation_key(7880)
inline VARIANT_BOOL IKompasDocument3D1::ExcludeObjects ( const _variant_t & Objects, VARIANT_BOOL Excl ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExcludeObjects(Objects, Excl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7881)
inline VARIANT_BOOL IKompasDocument3D1::ExecuteProcessOfInsertComponentFromFile ( _bstr_t FileName, enum ProcessTypeEnum ProcessType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExecuteProcessOfInsertComponentFromFile(FileName, ProcessType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7882)
inline IProcess3DPtr IKompasDocument3D1::GetLibProcess ( enum ksProcess3DTypeEnum ProcessType ) {
    struct IProcess3D * _result = 0;
    HRESULT _hr = get_LibProcess(ProcessType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProcess3DPtr(_result, false);
}

#pragma implementation_key(7883)
inline _variant_t IKompasDocument3D1::PickModelObjects ( const _variant_t & PickRay, struct IFindObject3DParameters * FilterParam ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PickModelObjects(PickRay, FilterParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7884)
inline IModelObjectPtr IKompasDocument3D1::FindNearestObject ( const _variant_t & PickRay, struct IFindObject3DParameters * FilterParam ) {
    struct IModelObject * _result = 0;
    HRESULT _hr = raw_FindNearestObject(PickRay, FilterParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IModelObjectPtr(_result, false);
}

#pragma implementation_key(7885)
inline _variant_t IKompasDocument3D1::GetIntervalVariables ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_IntervalVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7886)
inline IVariable7Ptr IKompasDocument3D1::AddIntervalVariable ( _bstr_t Name, double FirstValue, double SecondValue ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = raw_AddIntervalVariable(Name, FirstValue, SecondValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(7887)
inline IVariable7Ptr IKompasDocument3D1::GetIntervalVariable ( const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_IntervalVariable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(7888)
inline _variant_t IKompasDocument3D1::GetUserFuncVariables ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UserFuncVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7889)
inline IVariable7Ptr IKompasDocument3D1::AddUserFuncVariable ( _bstr_t Name, _bstr_t Expression ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = raw_AddUserFuncVariable(Name, Expression, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(7890)
inline IVariable7Ptr IKompasDocument3D1::GetUserFuncVariable ( const _variant_t & Index ) {
    struct IVariable7 * _result = 0;
    HRESULT _hr = get_UserFuncVariable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVariable7Ptr(_result, false);
}

#pragma implementation_key(7891)
inline IKompasAPIObjectPtr IKompasDocument3D1::FindObjectByAssociationGeometry ( struct IKompasAPIObject * Geometry ) {
    struct IKompasAPIObject * _result = 0;
    HRESULT _hr = raw_FindObjectByAssociationGeometry(Geometry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IKompasAPIObjectPtr(_result, false);
}

#pragma implementation_key(7892)
inline VARIANT_BOOL IKompasDocument3D1::SetHiddenObjects ( const _variant_t & Objects, VARIANT_BOOL Visible ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetHiddenObjects(Objects, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7893)
inline VARIANT_BOOL IKompasDocument3D1::CompleteRebuildDocument ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CompleteRebuildDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDocument3DManager wrapper method implementations
//

#pragma implementation_key(7894)
inline ILayers3DPtr IDocument3DManager::GetLayers3D ( ) {
    struct ILayers3D * _result = 0;
    HRESULT _hr = get_Layers3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayers3DPtr(_result, false);
}

#pragma implementation_key(7895)
inline ILayerGroups3DPtr IDocument3DManager::GetLayersGroups3D ( ) {
    struct ILayerGroups3D * _result = 0;
    HRESULT _hr = get_LayersGroups3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroups3DPtr(_result, false);
}

#pragma implementation_key(7896)
inline ILayerGroups3DPtr IDocument3DManager::GetLayersDynamicGroups3D ( ) {
    struct ILayerGroups3D * _result = 0;
    HRESULT _hr = get_LayersDynamicGroups3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroups3DPtr(_result, false);
}

#pragma implementation_key(7897)
inline VARIANT_BOOL IDocument3DManager::Update ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7898)
inline ILayers3DPtr IDocument3DManager::GetPartsGroups ( ) {
    struct ILayers3D * _result = 0;
    HRESULT _hr = get_PartsGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayers3DPtr(_result, false);
}

//
// interface ILayerGroups3D wrapper method implementations
//

#pragma implementation_key(7899)
inline ILayerGroup3DPtr ILayerGroups3D::GetLayerGroup3D ( const _variant_t & Index ) {
    struct ILayerGroup3D * _result = 0;
    HRESULT _hr = get_LayerGroup3D(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroup3DPtr(_result, false);
}

#pragma implementation_key(7900)
inline ILayerGroup3DPtr ILayerGroups3D::Add ( ) {
    struct ILayerGroup3D * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroup3DPtr(_result, false);
}

//
// interface ILayerGroup3D wrapper method implementations
//

#pragma implementation_key(7901)
inline ILayerGroup3DPtr ILayerGroup3D::GetOwnerGroup ( ) {
    struct ILayerGroup3D * _result = 0;
    HRESULT _hr = get_OwnerGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroup3DPtr(_result, false);
}

#pragma implementation_key(7902)
inline ILayerGroups3DPtr ILayerGroup3D::GetLayerGroups ( ) {
    struct ILayerGroups3D * _result = 0;
    HRESULT _hr = get_LayerGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerGroups3DPtr(_result, false);
}

#pragma implementation_key(7903)
inline ILayers3DPtr ILayerGroup3D::GetLayers ( ) {
    struct ILayers3D * _result = 0;
    HRESULT _hr = get_Layers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayers3DPtr(_result, false);
}

#pragma implementation_key(7904)
inline void ILayerGroup3D::PutName ( _bstr_t PVal ) {
    HRESULT _hr = put_Name(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7905)
inline _bstr_t ILayerGroup3D::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7906)
inline VARIANT_BOOL ILayerGroup3D::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7907)
inline double ILayerGroup3D::GetUniqueId ( ) {
    double _result = 0;
    HRESULT _hr = get_UniqueId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7908)
inline ILayerFilterConditionsPtr ILayerGroup3D::GetLayerFilterConditions ( ) {
    struct ILayerFilterConditions * _result = 0;
    HRESULT _hr = get_LayerFilterConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILayerFilterConditionsPtr(_result, false);
}

//
// interface IBuildingAxis wrapper method implementations
//

#pragma implementation_key(7909)
inline void IBuildingAxis::PutDoubleMark ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DoubleMark(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7910)
inline VARIANT_BOOL IBuildingAxis::GetDoubleMark ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DoubleMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7911)
inline void IBuildingAxis::PutMarkSize ( double PVal ) {
    HRESULT _hr = put_MarkSize(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7912)
inline double IBuildingAxis::GetMarkSize ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7913)
inline void IBuildingAxis::PutDottedLength ( double PVal ) {
    HRESULT _hr = put_DottedLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7914)
inline double IBuildingAxis::GetDottedLength ( ) {
    double _result = 0;
    HRESULT _hr = get_DottedLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7915)
inline void IBuildingAxis::PutInterval ( double PVal ) {
    HRESULT _hr = put_Interval(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7916)
inline double IBuildingAxis::GetInterval ( ) {
    double _result = 0;
    HRESULT _hr = get_Interval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7917)
inline void IBuildingAxis::PutStroke ( double PVal ) {
    HRESULT _hr = put_Stroke(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7918)
inline double IBuildingAxis::GetStroke ( ) {
    double _result = 0;
    HRESULT _hr = get_Stroke(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7919)
inline ITextPtr IBuildingAxis::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(7920)
inline ITextPtr IBuildingAxis::GetTextBefore ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(7921)
inline ITextPtr IBuildingAxis::GetTextAfter ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_TextAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(7922)
inline void IBuildingAxis::PutAutoStroke ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_AutoStroke(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7923)
inline VARIANT_BOOL IBuildingAxis::GetAutoStroke ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoStroke(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7924)
inline VARIANT_BOOL IBuildingAxis::GetInsertionPoints ( VARIANT_BOOL First, VARIANT * Points, VARIANT * Directions, VARIANT * Nodes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetInsertionPoints(First, Points, Directions, Nodes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7925)
inline IMarkNodePtr IBuildingAxis::GetNodeByPoint ( double X, double Y, double Limit ) {
    struct IMarkNode * _result = 0;
    HRESULT _hr = raw_GetNodeByPoint(X, Y, Limit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkNodePtr(_result, false);
}

#pragma implementation_key(7926)
inline IMarkNodePtr IBuildingAxis::AddNodeByPoint ( enum ksMarkNodeEnum Type, double X, double Y ) {
    struct IMarkNode * _result = 0;
    HRESULT _hr = raw_AddNodeByPoint(Type, X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkNodePtr(_result, false);
}

//
// interface IBuildingAxes wrapper method implementations
//

#pragma implementation_key(7927)
inline IBuildingAxisPtr IBuildingAxes::GetBuildingAxis ( const _variant_t & Index ) {
    struct IBuildingAxis * _result = 0;
    HRESULT _hr = get_BuildingAxis(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBuildingAxisPtr(_result, false);
}

#pragma implementation_key(7928)
inline IBuildingAxisPtr IBuildingAxes::Add ( enum DrawingObjectTypeEnum AxisType ) {
    struct IBuildingAxis * _result = 0;
    HRESULT _hr = raw_Add(AxisType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBuildingAxisPtr(_result, false);
}

//
// interface IBuildingContainer wrapper method implementations
//

#pragma implementation_key(7929)
inline IBuildingAxesPtr IBuildingContainer::GetBuildingAxes ( ) {
    struct IBuildingAxes * _result = 0;
    HRESULT _hr = get_BuildingAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBuildingAxesPtr(_result, false);
}

#pragma implementation_key(7930)
inline IMarksPtr IBuildingContainer::GetMarks ( ) {
    struct IMarks * _result = 0;
    HRESULT _hr = get_Marks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarksPtr(_result, false);
}

#pragma implementation_key(7931)
inline ICutUnitMarkingsPtr IBuildingContainer::GetCutUnitMarkings ( ) {
    struct ICutUnitMarkings * _result = 0;
    HRESULT _hr = get_CutUnitMarkings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutUnitMarkingsPtr(_result, false);
}

#pragma implementation_key(7932)
inline IUnitMarkingsPtr IBuildingContainer::GetUnitMarkings ( ) {
    struct IUnitMarkings * _result = 0;
    HRESULT _hr = get_UnitMarkings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnitMarkingsPtr(_result, false);
}

#pragma implementation_key(7933)
inline IMultiTextLeadersPtr IBuildingContainer::GetMultiTextLeaders ( ) {
    struct IMultiTextLeaders * _result = 0;
    HRESULT _hr = get_MultiTextLeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMultiTextLeadersPtr(_result, false);
}

#pragma implementation_key(7934)
inline IUnitNumbersPtr IBuildingContainer::GetUnitNumbers ( ) {
    struct IUnitNumbers * _result = 0;
    HRESULT _hr = get_UnitNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnitNumbersPtr(_result, false);
}

#pragma implementation_key(7935)
inline IBracesPtr IBuildingContainer::GetBraces ( ) {
    struct IBraces * _result = 0;
    HRESULT _hr = get_Braces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBracesPtr(_result, false);
}

#pragma implementation_key(7936)
inline ICutLinesPtr IBuildingContainer::GetBuildingCutLines ( ) {
    struct ICutLines * _result = 0;
    HRESULT _hr = get_BuildingCutLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICutLinesPtr(_result, false);
}

//
// interface IMarkNode wrapper method implementations
//

#pragma implementation_key(7937)
inline void IMarkNode::PutMarkType ( enum ksMarkNodeEnum Val ) {
    HRESULT _hr = put_MarkType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7938)
inline enum ksMarkNodeEnum IMarkNode::GetMarkType ( ) {
    enum ksMarkNodeEnum _result;
    HRESULT _hr = get_MarkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7939)
inline void IMarkNode::PutDoubleMark ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_DoubleMark(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7940)
inline VARIANT_BOOL IMarkNode::GetDoubleMark ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DoubleMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7941)
inline void IMarkNode::PutRefLength ( double PVal ) {
    HRESULT _hr = put_RefLength(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7942)
inline double IMarkNode::GetRefLength ( ) {
    double _result = 0;
    HRESULT _hr = get_RefLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7943)
inline ITextPtr IMarkNode::GetText ( ) {
    struct IText * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextPtr(_result, false);
}

#pragma implementation_key(7944)
inline IMarkNodesPtr IMarkNode::GetMarkNodes ( VARIANT_BOOL Left ) {
    struct IMarkNodes * _result = 0;
    HRESULT _hr = get_MarkNodes(Left, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkNodesPtr(_result, false);
}

#pragma implementation_key(7945)
inline VARIANT_BOOL IMarkNode::Delete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7946)
inline VARIANT_BOOL IMarkNode::GetInsertionPoints ( VARIANT_BOOL LeftJut, VARIANT * Points, VARIANT * Directions ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetInsertionPoints(LeftJut, Points, Directions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMarkNodes wrapper method implementations
//

#pragma implementation_key(7947)
inline IMarkNodePtr IMarkNodes::GetItem ( const _variant_t & Index ) {
    struct IMarkNode * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkNodePtr(_result, false);
}

#pragma implementation_key(7948)
inline IMarkNodePtr IMarkNodes::Add ( enum ksMarkNodeEnum Type, const _variant_t & Index ) {
    struct IMarkNode * _result = 0;
    HRESULT _hr = raw_Add(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkNodePtr(_result, false);
}

#pragma implementation_key(7949)
inline VARIANT_BOOL IMarkNodes::Clear ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IStraightAxis wrapper method implementations
//

#pragma implementation_key(7950)
inline void IStraightAxis::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7951)
inline double IStraightAxis::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7952)
inline void IStraightAxis::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7953)
inline double IStraightAxis::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7954)
inline void IStraightAxis::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7955)
inline double IStraightAxis::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7956)
inline void IStraightAxis::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7957)
inline double IStraightAxis::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7958)
inline void IStraightAxis::PutLength ( double PVal ) {
    HRESULT _hr = put_Length(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7959)
inline double IStraightAxis::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7960)
inline void IStraightAxis::PutAngle ( double PVal ) {
    HRESULT _hr = put_Angle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7961)
inline double IStraightAxis::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7962)
inline IAxisJutPtr IStraightAxis::GetJut ( VARIANT_BOOL First ) {
    struct IAxisJut * _result = 0;
    HRESULT _hr = get_Jut(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisJutPtr(_result, false);
}

#pragma implementation_key(7963)
inline IMarkNodesPtr IStraightAxis::GetMarkNodes ( ) {
    struct IMarkNodes * _result = 0;
    HRESULT _hr = get_MarkNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkNodesPtr(_result, false);
}

//
// interface IArcAxis wrapper method implementations
//

#pragma implementation_key(7964)
inline void IArcAxis::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7965)
inline double IArcAxis::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7966)
inline void IArcAxis::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7967)
inline double IArcAxis::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7968)
inline void IArcAxis::PutX1 ( double PVal ) {
    HRESULT _hr = put_X1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7969)
inline double IArcAxis::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7970)
inline void IArcAxis::PutY1 ( double PVal ) {
    HRESULT _hr = put_Y1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7971)
inline double IArcAxis::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7972)
inline void IArcAxis::PutX2 ( double PVal ) {
    HRESULT _hr = put_X2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7973)
inline double IArcAxis::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7974)
inline void IArcAxis::PutY2 ( double PVal ) {
    HRESULT _hr = put_Y2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7975)
inline double IArcAxis::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7976)
inline void IArcAxis::PutAngle1 ( double PVal ) {
    HRESULT _hr = put_Angle1(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7977)
inline double IArcAxis::GetAngle1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7978)
inline void IArcAxis::PutAngle2 ( double PVal ) {
    HRESULT _hr = put_Angle2(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7979)
inline double IArcAxis::GetAngle2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7980)
inline void IArcAxis::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7981)
inline double IArcAxis::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7982)
inline void IArcAxis::PutDirection ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_Direction(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7983)
inline VARIANT_BOOL IArcAxis::GetDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7984)
inline IAxisJutPtr IArcAxis::GetJut ( VARIANT_BOOL First ) {
    struct IAxisJut * _result = 0;
    HRESULT _hr = get_Jut(First, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisJutPtr(_result, false);
}

#pragma implementation_key(7985)
inline IMarkNodesPtr IArcAxis::GetMarkNodes ( ) {
    struct IMarkNodes * _result = 0;
    HRESULT _hr = get_MarkNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkNodesPtr(_result, false);
}

#pragma implementation_key(7986)
inline void IArcAxis::PutX3 ( double PVal ) {
    HRESULT _hr = put_X3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7987)
inline double IArcAxis::GetX3 ( ) {
    double _result = 0;
    HRESULT _hr = get_X3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7988)
inline void IArcAxis::PutY3 ( double PVal ) {
    HRESULT _hr = put_Y3(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7989)
inline double IArcAxis::GetY3 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICircleAxis wrapper method implementations
//

#pragma implementation_key(7990)
inline void ICircleAxis::PutXc ( double PVal ) {
    HRESULT _hr = put_Xc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7991)
inline double ICircleAxis::GetXc ( ) {
    double _result = 0;
    HRESULT _hr = get_Xc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7992)
inline void ICircleAxis::PutYc ( double PVal ) {
    HRESULT _hr = put_Yc(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7993)
inline double ICircleAxis::GetYc ( ) {
    double _result = 0;
    HRESULT _hr = get_Yc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7994)
inline void ICircleAxis::PutMarkAngle ( double PVal ) {
    HRESULT _hr = put_MarkAngle(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7995)
inline double ICircleAxis::GetMarkAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7996)
inline void ICircleAxis::PutRadius ( double PVal ) {
    HRESULT _hr = put_Radius(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7997)
inline double ICircleAxis::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7998)
inline void ICircleAxis::PutMarkOn ( VARIANT_BOOL PVal ) {
    HRESULT _hr = put_MarkOn(PVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7999)
inline VARIANT_BOOL ICircleAxis::GetMarkOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8000)
inline IMarkNodePtr ICircleAxis::GetBaseMarkNode ( ) {
    struct IMarkNode * _result = 0;
    HRESULT _hr = get_BaseMarkNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarkNodePtr(_result, false);
}
