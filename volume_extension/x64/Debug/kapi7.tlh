// Created by Microsoft (R) C/C++ Compiler Version 14.29.30148.0 (15883836).
//
// C:\Users\Ivan\source\repos\volume_extension\volume_extension\x64\Debug\kapi7.tlh
//
// C++ source equivalent of Win32 type library kAPI7.tlb
// compiler-generated file created 03/18/23 at 18:40:08 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("69ac2981-37c0-4379-84fd-5dd2f3c0a520"))
/* LIBID */ __KompasAPI7;
struct __declspec(uuid("5c799a83-c0a4-4312-beb0-21cbd7ff4c13"))
/* dual interface */ IKompasAPIObject;
struct __declspec(uuid("6a2efaf7-8254-45a5-9dc8-2213f16af5d7"))
/* dual interface */ IApplication;
struct __declspec(uuid("8bf39f08-5537-4910-84ce-b338e55f7bcf"))
/* dual interface */ IDocuments;
struct __declspec(uuid("901f85de-fa5a-4314-bd75-066a79af20a8"))
/* dual interface */ IKompasCollection;
struct __declspec(uuid("5c6e318d-bd6e-4afa-8a13-977eaa0845ef"))
/* dual interface */ IKompasDocument;
struct __declspec(uuid("1d18c466-c085-4d68-a465-a85d0c8e3a0e"))
/* dual interface */ IDocumentFrames;
struct __declspec(uuid("4437faba-990f-45e2-b1a2-7754fb326b76"))
/* dual interface */ IDocumentFrame;
struct __declspec(uuid("b35ff50e-2991-4630-8ab8-dc3153e7971a"))
/* dual interface */ IDocumentSettings;
struct __declspec(uuid("b9632c5c-86e1-4bc9-83a5-a954e407246a"))
/* dual interface */ ISpecificationDescriptions;
struct __declspec(uuid("9678959e-166b-45f3-bde8-88bbf4645f5c"))
/* dual interface */ ISpecificationDescription;
struct __declspec(uuid("f237d2b3-dfee-4702-b71f-e5f6923f03e6"))
/* dual interface */ ISpecificationStyle;
struct __declspec(uuid("bb719d42-e44c-445b-969a-0e2f63e97fc8"))
/* dual interface */ ISpecificationTuning;
struct __declspec(uuid("7ea65ca0-420d-4e1d-8c19-998495c4da2f"))
/* dual interface */ ITextStyle;
struct __declspec(uuid("a6ad008d-58d1-48b5-bd29-e6795289fe4b"))
/* dual interface */ ITextFont;
struct __declspec(uuid("bb66e097-95c7-49b1-b6fd-3506c7758d09"))
/* dual interface */ ITabulators;
struct __declspec(uuid("2dd73b92-f8c8-49aa-aecd-b75713427fc1"))
/* dual interface */ ITabulator;
struct __declspec(uuid("01b1bf6f-b9e3-4e94-99a0-81394fb99b16"))
/* dual interface */ ISpecificationTuningSections;
struct __declspec(uuid("e68aa413-cc35-450d-bf35-0f294f59b08c"))
/* dual interface */ ISpecificationTuningSection;
struct __declspec(uuid("56532cb4-bd3f-442c-afa4-0e6beb677e61"))
/* dual interface */ ISpecificationSubsections;
struct __declspec(uuid("7f0e5f63-815c-46e5-b99e-c24244566c00"))
/* dual interface */ ISpecificationSubsection;
struct __declspec(uuid("8910cc92-ac76-4837-ab7a-5fd3c7b74728"))
/* dual interface */ IAdditionalBlockTunings;
struct __declspec(uuid("9cd5b016-9ce9-4e0a-8902-196d11360536"))
/* dual interface */ IAdditionalBlockTuning;
struct __declspec(uuid("43efa203-f956-43d6-b603-87807ddefd0a"))
/* dual interface */ IAdditionalBlockSectionTunings;
struct __declspec(uuid("e04b8464-c8d6-4bac-99b5-ae79ebbdb205"))
/* dual interface */ IAdditionalBlockSectionTuning;
struct __declspec(uuid("b9cde694-4c33-4375-a6f6-ae94dc759510"))
/* dual interface */ ISheetFormat;
struct __declspec(uuid("41529a95-51f0-44b0-9d55-5753bceb23bc"))
/* dual interface */ ISpecificationColumnStyles;
struct __declspec(uuid("16839caa-3afb-49a4-a19a-c61963967649"))
/* dual interface */ ISpecificationColumnStyle;
struct __declspec(uuid("24ae8484-f4f4-4059-afc7-9492a64c88e8"))
/* dual interface */ ISpecificationSectionStyles;
struct __declspec(uuid("4b61fc7f-4826-4b58-8ccb-7d459ad0be7b"))
/* dual interface */ ISpecificationSectionStyle;
struct __declspec(uuid("90e2fbec-a56f-423c-b89f-479673edd895"))
/* dual interface */ IAdditionalBlockStyles;
struct __declspec(uuid("b2a43fa6-9bce-4468-9662-811a6255e220"))
/* dual interface */ IAdditionalBlockStyle;
struct __declspec(uuid("b2b97d19-3a0b-4c9f-a6ac-deffafe0d1c2"))
/* dual interface */ ISpecificationBaseObjects;
struct __declspec(uuid("49994ed8-96ba-4d9d-b642-5f0f1e3fed16"))
/* dual interface */ ISpecificationBaseObject;
struct __declspec(uuid("72eb4e8e-7952-4b36-852b-4816b7b5afee"))
/* dual interface */ ISpecificationObject;
struct __declspec(uuid("9f44bf03-de25-4dde-ada0-92384199c100"))
/* dual interface */ ISpecificationColumns;
struct __declspec(uuid("3ecfb777-2645-42b5-a6ed-111688433b26"))
/* dual interface */ ISpecificationColumn;
struct __declspec(uuid("f4bab79a-8a35-44d5-be44-c566e444f342"))
/* dual interface */ ISpecificationColumnItems;
struct __declspec(uuid("2babdd01-eaca-4137-9749-25b8c5e230ee"))
/* dual interface */ ISpecificationColumnItem;
struct __declspec(uuid("99b840fc-0150-4dad-bc0e-ad481baab8c2"))
/* dual interface */ IText;
struct __declspec(uuid("aab72fe2-dea3-4fb6-b0dd-b926249ef67c"))
/* dual interface */ ITextLine;
struct __declspec(uuid("1de74afb-5026-4b85-861f-f0cfdbd443e6"))
/* dual interface */ ITextItem;
struct __declspec(uuid("9ae6c0a0-72eb-4a51-b54c-a0e57cc5f6dc"))
/* dual interface */ ITextTable;
struct __declspec(uuid("81fab1c5-f566-4d06-8d3d-17ff01d3566f"))
/* dual interface */ IAttachedDocuments;
struct __declspec(uuid("333e9e11-d161-49ae-9791-8bedb58b4c78"))
/* dual interface */ IAttachedDocument;
struct __declspec(uuid("b8bd0fc7-ab2b-4e7a-8ec2-82060d7d29a7"))
/* dual interface */ ISpecificationCommentObjects;
struct __declspec(uuid("3b6b80ca-2145-4184-b786-0c571df5acd7"))
/* dual interface */ ISpecificationCommentObject;
struct __declspec(uuid("827c4f8f-9ec6-41cc-aa7a-f6a6522458fc"))
/* dual interface */ ISpecificationObjectCreateParam;
struct __declspec(uuid("ae7377cb-28c6-468e-b667-73117bcdc300"))
/* dual interface */ IPropertyKeeper;
struct __declspec(uuid("c389f80d-228d-4fb1-b183-959aea0b5906"))
/* dual interface */ IProperty;
struct __declspec(uuid("dd2af5c4-d5b9-420d-b658-f935f80a8586"))
/* dual interface */ IUserDataStorage;
struct __declspec(uuid("77a6d4ca-6418-4dee-b59c-400bfd052375"))
/* dual interface */ IUserDataStoragesMng;
struct __declspec(uuid("9dbfb4eb-be9f-46ef-88ff-bb603a9e786b"))
/* dual interface */ IUserDataStorages;
struct __declspec(uuid("7ab54196-0b76-4b01-b769-7f47637173c4"))
/* dual interface */ ILayoutSheets;
struct __declspec(uuid("d87b5a80-cf52-4510-add9-d1344ffffc07"))
/* dual interface */ ILayoutSheet;
struct __declspec(uuid("250ce350-7c21-47fd-8ff2-c44a9ff177df"))
/* dual interface */ IStamp;
struct __declspec(uuid("a70bf191-e1e1-4a92-8ca9-e6d3fead2d9a"))
/* dual interface */ ILoadCombinationsParam;
struct __declspec(uuid("fadca157-95b1-4e3f-97aa-622e34da3238"))
/* dual interface */ IOpenDocumentParam;
struct __declspec(uuid("cb5fdbc8-4dae-4c4b-87d5-6fd1f2705c38"))
/* dual interface */ IProcessParam;
struct __declspec(uuid("5ba6324e-e555-490f-a0e2-68d3c6c88d92"))
/* dual interface */ IPropertyTabs;
struct __declspec(uuid("45de8e5b-bc2b-4584-8ba7-d3014d3a2397"))
/* dual interface */ IPropertyTab;
struct __declspec(uuid("548241ba-fda8-4633-981e-94552be38d6b"))
/* dual interface */ IPropertyControls;
struct __declspec(uuid("e35f8ff8-03c6-460c-a2f1-294a3a29a029"))
/* dual interface */ IPropertyControl;
struct __declspec(uuid("34196ec3-58b2-436c-a353-427703740874"))
/* dual interface */ IPropertyManager;
struct __declspec(uuid("53cdc510-99ea-4736-8542-194f4d8fb32b"))
/* dual interface */ ILibraryManager;
struct __declspec(uuid("80f95b5b-db8a-46b7-8c22-605a0aecd597"))
/* dual interface */ IProceduresLibraries;
struct __declspec(uuid("1aece59e-de4c-4fb9-b62b-7967573ad3b1"))
/* dual interface */ IProceduresLibrary;
struct __declspec(uuid("9d6e9ae1-7ddf-4354-b8d0-e12023b186fa"))
/* dual interface */ ILibrary;
struct __declspec(uuid("1a77f076-2295-40f9-b1aa-2838c4ca0887"))
/* dual interface */ IProcedures;
struct __declspec(uuid("7bf9df08-d14d-4da9-abc2-fb458e7122d0"))
/* dual interface */ IProcedure;
struct __declspec(uuid("a6e82d68-69d5-40c0-9a85-275b22219135"))
/* dual interface */ IInsertsLibraries;
struct __declspec(uuid("885cad68-b42b-45cf-8620-e0138558efe3"))
/* dual interface */ IInsertsLibrary;
struct __declspec(uuid("fcbf6340-119d-4736-bb95-f1eab4bef1b8"))
/* dual interface */ IInserts;
struct __declspec(uuid("d6a6d305-6b5c-4392-b61d-d669c092eef2"))
/* dual interface */ IInsert;
struct __declspec(uuid("0a8b4cd1-7158-4ce6-96e0-885376f5de1b"))
/* dual interface */ IKompasError;
struct __declspec(uuid("642d03ab-4798-48a5-b075-3cd9afa18554"))
/* dual interface */ IConverter;
struct __declspec(uuid("2aa9f713-2328-4e8f-b996-9dfdabc67dc9"))
/* dual interface */ ICheckSum;
struct __declspec(uuid("be125aba-eab2-4a22-99d7-108c84b6dcc5"))
/* dual interface */ IProgressBarIndicator;
struct __declspec(uuid("ffb66332-17ff-47eb-ac43-32084f8f6077"))
/* dual interface */ ISystemSettings;
struct __declspec(uuid("76d9033d-5f87-41cc-a3e8-55efee94b677"))
/* dual interface */ ILibArraySettings;
struct __declspec(uuid("246741cf-bc91-4e69-aeee-cf905b9c05f7"))
/* dual interface */ IThreadPattern;
struct __declspec(uuid("0409ec8f-88f7-4242-81e7-965abeae932c"))
/* dual interface */ IMath2D;
struct __declspec(uuid("65c82884-c41b-47a1-8c07-e8820d6718ea"))
/* dual interface */ ICurve2D;
struct __declspec(uuid("9d86880b-c004-475d-8221-b786fd5a228b"))
/* dual interface */ IPrintJob;
struct __declspec(uuid("0ec985bc-81fc-498e-bf15-03ddc870aa33"))
/* dual interface */ IPrintJob_Sheet;
struct __declspec(uuid("e821ae61-fa05-4b39-8908-bd37d6d044a4"))
/* dual interface */ IStyles;
struct __declspec(uuid("8dfd15e0-345e-4b1c-86a1-bd65f87128b5"))
/* dual interface */ IStyle;
struct __declspec(uuid("096e62b3-7184-4998-9925-74bb710d8d8e"))
/* dual interface */ IKompasDocument2D;
struct __declspec(uuid("a4737593-578b-4187-8cad-e1056eb5404b"))
/* dual interface */ IViewsAndLayersManager;
struct __declspec(uuid("9cd1b5e6-c1a2-4910-8d0c-97080b14aa3d"))
/* dual interface */ IViews;
struct __declspec(uuid("3dd7f97b-59cb-4297-a1ba-04e5a7fff448"))
/* dual interface */ IDrawingObjects;
struct __declspec(uuid("07ef021f-11c1-4015-8d87-4dc94a2a71b0"))
/* dual interface */ IDrawingObject;
struct __declspec(uuid("21a7ba87-1c8b-41b4-8247-cdd593546f37"))
/* dual interface */ IView;
struct __declspec(uuid("f6dc2898-d596-4418-a21a-d15ae07b9a40"))
/* dual interface */ ILayers;
struct __declspec(uuid("9ad76c38-cc48-4901-aee5-27b48f51563c"))
/* dual interface */ ILayer;
struct __declspec(uuid("8bab52d9-8ef6-43a6-a1b8-af42d5961a94"))
/* dual interface */ IVariable7;
struct __declspec(uuid("dbff6d98-8f79-453e-9b8b-81e40a6d8027"))
/* dual interface */ ILayerGroups;
struct __declspec(uuid("265bbb5a-7b8a-4aa5-a0bb-ff64d23be62b"))
/* dual interface */ ILayerGroup;
struct __declspec(uuid("bca22e27-ab60-4ba6-87ee-92158aa6d366"))
/* dual interface */ ILayerFilterConditions;
struct __declspec(uuid("d743bc12-82a9-4e8f-85b2-7154a356acc0"))
/* dual interface */ ILayerFilterCondition;
struct __declspec(uuid("7b60e769-06c3-4fdc-9677-7b5ef5180308"))
/* dual interface */ IKompasDocument3D;
struct __declspec(uuid("fa4a5fde-a08c-4f5a-8c04-98395ba44307"))
/* dual interface */ IPart7;
struct __declspec(uuid("e37256d4-9021-47ac-8faf-3713fb2a50c3"))
/* dual interface */ IModelObject;
struct __declspec(uuid("ef4343fa-985d-4fe9-ad5f-439bc8f92958"))
/* dual interface */ IFeature7;
struct __declspec(uuid("42f8fcef-e56f-466c-8814-bebac0719ae6"))
/* dual interface */ IParts7;
struct __declspec(uuid("125cb096-639e-479f-98de-f27fab23838a"))
/* dual interface */ IModelObjects;
struct __declspec(uuid("f65db4ac-06b4-4c93-bd34-7b4fd65e9421"))
/* dual interface */ ISaveAsDetailParam;
struct __declspec(uuid("2b8b154e-ed76-4ff0-b3e4-fee691d014a4"))
/* dual interface */ IVariableTable;
struct __declspec(uuid("ba6395f5-3506-4483-8864-4eec220af316"))
/* dual interface */ ILocalCoordinateSystem;
struct __declspec(uuid("d71aedbe-01d4-4c7d-96dc-94981f2a1c37"))
/* dual interface */ IPoint3D;
struct __declspec(uuid("d51a4dcf-627d-44f5-89ba-46ef2449a212"))
/* dual interface */ IVector3D;
struct __declspec(uuid("437d6587-7649-4a0c-80bb-7a6e89661839"))
/* dual interface */ IHatchParam;
struct __declspec(uuid("9c66de49-529c-4678-9af1-12710cb77804"))
/* dual interface */ IPlacement3D;
struct __declspec(uuid("aed8f9fc-e493-4cbd-9341-9d9e39e14fdc"))
/* dual interface */ ISpecRough3D;
struct __declspec(uuid("95f316e1-0a18-4f42-8b70-1423250f244d"))
/* dual interface */ IMateConstraints3D;
struct __declspec(uuid("9e37e1f5-f770-473a-b996-a6753eda73a5"))
/* dual interface */ IMateConstraint3D;
struct __declspec(uuid("4f122e22-0aa6-46e1-841f-a2504b145995"))
/* dual interface */ IBody7;
struct __declspec(uuid("0155ae59-92f4-4cee-9633-8ada943388cb"))
/* dual interface */ IUserFolders;
struct __declspec(uuid("67671c8a-3587-41eb-9291-39e9f94e4ea5"))
/* dual interface */ IUserFolder;
struct __declspec(uuid("0b93d860-69ec-4d03-8a1d-eb0c936b1d45"))
/* dual interface */ IZonesManager;
struct __declspec(uuid("05c71c4b-f8bc-42e9-89d5-b9bc0145ed36"))
/* dual interface */ IZone;
struct __declspec(uuid("d67aa2b3-2e8a-4882-b11a-3828d106ca0a"))
/* dual interface */ IZoneDivision;
struct __declspec(uuid("e6df688c-5b23-436b-a027-a96bfd5484cc"))
/* dual interface */ ISelectionManager;
struct __declspec(uuid("e2d9eaa6-f88c-4adb-ac32-854e32e9fee1"))
/* dual interface */ IChooseManager;
struct __declspec(uuid("94f965b0-5abb-4994-98c7-b08fa8515452"))
/* dual interface */ IAttribute;
struct __declspec(uuid("414cf83e-4fa3-42ab-bc26-6c6bbf91bb0f"))
/* dual interface */ IAttributeType;
struct __declspec(uuid("3fde0f44-4459-49f3-a012-e64f9bfa454d"))
/* dual interface */ IColumnInfo;
struct __declspec(uuid("cd435b3d-175c-4e18-baa0-81fdd7eb6a86"))
/* dual interface */ ITechnicalDemand3D;
struct __declspec(uuid("649f0eb2-ebc0-449b-8b61-dc3cf1953bf9"))
/* dual interface */ IDrawingObject1;
struct __declspec(uuid("131069f4-a4e2-4db4-a559-85eaccc74ce4"))
/* dual interface */ IParametriticConstraint;
struct __declspec(uuid("58890fe8-e671-4561-994a-600dd29032e4"))
/* dual interface */ IKompasDocument1;
struct __declspec(uuid("ebf0cb2e-31bf-4baf-a668-ab9a9bde8422"))
/* dual interface */ IRasterConvertParameters;
struct __declspec(uuid("fb57f1c4-44fe-4c73-9b15-87241e8735b5"))
/* dual interface */ IKompasDocument2D1;
struct __declspec(uuid("b21c70c9-53ec-4bb7-a9db-bce852ca6716"))
/* dual interface */ IMacroObject;
struct __declspec(uuid("ba2d820c-0db9-47c6-a32d-34c7d8ba1b2f"))
/* dual interface */ ILeaders;
struct __declspec(uuid("1af590a9-c339-477a-9f22-799c04d20bb4"))
/* dual interface */ IBaseLeader;
struct __declspec(uuid("8f1a7123-bd4a-4a49-8e22-1502d59b1fe6"))
/* dual interface */ IFindObjectParameters;
struct __declspec(uuid("0ed06421-907c-4ef0-89f7-aefc81bef1df"))
/* dual interface */ IDrawingGroups;
struct __declspec(uuid("2c96acb2-4877-45d9-b62d-78bbad704458"))
/* dual interface */ IDrawingGroup;
struct __declspec(uuid("58e1baca-32d5-4eab-87e9-d14816dac29f"))
/* dual interface */ ICopyObjectParam;
struct __declspec(uuid("c74d7419-0970-4904-907c-dcc5407c59b0"))
/* dual interface */ IProcess2D;
struct __declspec(uuid("a6e4f3b6-0554-4a67-a700-428090a6739a"))
/* dual interface */ IPhantom2D;
struct __declspec(uuid("92ab02f7-2c68-4a74-9e74-70c51e015fef"))
/* dual interface */ IKompasDocument3D1;
struct __declspec(uuid("75f1ca7e-5071-4c1f-8a9f-f76a6e05caf6"))
/* dual interface */ IDocument3DManager;
struct __declspec(uuid("d637078b-6498-40b6-9f41-83ed1ea40d1f"))
/* dual interface */ ILayers3D;
struct __declspec(uuid("d8adf279-1cac-4a2a-911b-9a44378407a0"))
/* dual interface */ ILayer3D;
struct __declspec(uuid("d3f08d03-3bb2-4de6-95a9-38b5c05d8c12"))
/* dual interface */ ILayerGroups3D;
struct __declspec(uuid("0b176bbc-51f5-4d31-a630-6a04207e4da1"))
/* dual interface */ ILayerGroup3D;
struct __declspec(uuid("77730022-3179-4674-ae49-604fabc0b6b1"))
/* dual interface */ IProcess3D;
struct __declspec(uuid("5fbb9528-b629-46de-8ba6-13c5872bdd15"))
/* dual interface */ IManipulators;
struct __declspec(uuid("606fd023-3944-4215-a426-1e4eb82a8e32"))
/* dual interface */ IBaseManipulator;
struct __declspec(uuid("02e973e5-5f36-4bb9-93b7-ce9b21d95324"))
/* dual interface */ IFindObject3DParameters;
struct __declspec(uuid("c2214318-5c89-40f8-a25c-c87d08b490f4"))
/* dual interface */ IDrawingDocument;
struct __declspec(uuid("d723aac1-0315-4aed-99bf-88a7e55b6e6d"))
/* dual interface */ ISpecRough;
struct __declspec(uuid("18c80ae5-bf92-482a-9c56-3d1638f5e5f5"))
/* dual interface */ ITechnicalDemand;
struct __declspec(uuid("e19ce626-df9c-48c4-a83d-3e3bc7f0daca"))
/* dual interface */ IFragmentDocument;
struct __declspec(uuid("e3fa8fd0-6187-4625-89b7-3c815651944d"))
/* dual interface */ ISpecificationDocument;
struct __declspec(uuid("71a589ea-d32f-42c4-bbc4-a51611e85e90"))
/* dual interface */ ITextDocument;
struct __declspec(uuid("0075ea2a-5498-4e28-bdf3-0288eb168054"))
/* dual interface */ IPartDocument;
struct __declspec(uuid("f6b3f33a-3273-43ef-9b8a-7c0af8faa129"))
/* dual interface */ IAssemblyDocument;
struct __declspec(uuid("e0197ba7-c3fb-44a3-9c13-49115a150ed2"))
/* dual interface */ IDimensionText;
struct __declspec(uuid("534518cc-6577-4273-887a-6b833fde6ed7"))
/* dual interface */ IDimensionParams;
struct __declspec(uuid("e7f1fd16-b641-4264-859c-d47217da8b04"))
/* dual interface */ ILoadCombination;
struct __declspec(uuid("b9019350-ff1d-4161-b41b-cd1b020ecf36"))
/* dual interface */ IFrameTreesManager;
struct __declspec(uuid("5378690e-a57d-473f-84dc-ca508b34fad7"))
/* dual interface */ IAttrTypeMng;
struct __declspec(uuid("cb083231-ee0d-4596-b04d-e6a020926557"))
/* dual interface */ IPrintJob_OutputParameters;
struct __declspec(uuid("095ce8c1-b2e7-4417-ab3d-cce01480c08e"))
/* dual interface */ IPrintJob_PrinterSettings;
struct __declspec(uuid("ab64a064-53e7-4adc-bf40-3bfc04d93963"))
/* dual interface */ ISaveToPreviusParam7;
struct __declspec(uuid("dc982411-cf10-4c00-946b-b5338448568a"))
/* dual interface */ IUserMetadataManager;
struct __declspec(uuid("4f13bb1b-44aa-42e6-bd50-30e21e434d1b"))
/* dual interface */ IStylesManager;
struct __declspec(uuid("5046bf60-687a-4e5d-bbef-3cb5d95f7a41"))
/* dual interface */ ICurveStyle;
struct __declspec(uuid("9315d8a2-95b7-4e7f-b861-b88fa490ee2b"))
/* dual interface */ IHatchStyle;
struct __declspec(uuid("9f627059-04f9-4b14-9c9d-ebdf7fb83e48"))
/* dual interface */ IIntervalVariable;
struct __declspec(uuid("fd515235-4dba-4f81-8d5c-6fe87c834562"))
/* dual interface */ IPropertyMng;
struct __declspec(uuid("37fd3c77-6032-4459-95e9-c8dfc43b85ff"))
/* dual interface */ IReport;
struct __declspec(uuid("5c65f11d-75c8-4130-951c-5ebe0aba4f44"))
/* dual interface */ IReportStyle;
struct __declspec(uuid("dd114fc3-eb24-4fbd-b9e9-b01a893aa3b0"))
/* dual interface */ IReportStyleColumn;
struct __declspec(uuid("9d111c31-1629-4a0b-89e5-8461cdfa2157"))
/* dual interface */ IReportFilter;
struct __declspec(uuid("29bbf2b8-a2e2-4e7d-bf04-0bb79c89ef35"))
/* dual interface */ IReportProcess;
struct __declspec(uuid("88803908-b243-47b0-a388-9e059cfa8e54"))
/* dual interface */ IReportObjectsFilter;
struct __declspec(uuid("96f02f01-04e1-44d1-9974-48330ebe801b"))
/* dual interface */ IAssociationTables;
struct __declspec(uuid("44f0752e-e25b-4896-95b4-6376ac23a2a9"))
/* dual interface */ IAssociationTable;
struct __declspec(uuid("d9c09d24-cb85-4ea2-b5ff-85d59e5d339a"))
/* dual interface */ INumericGroup;
struct __declspec(uuid("f7e44485-b4eb-4897-a263-be3bc1a08789"))
/* dual interface */ IReportTable;
struct __declspec(uuid("a1af048d-93c0-4c21-9064-d437a71d7d53"))
/* dual interface */ IReportParam;
struct __declspec(uuid("7d2a79ff-ec54-4480-b9f3-46f75293b558"))
/* dual interface */ IPropertyControl1;
struct __declspec(uuid("1d238c4c-aad7-4374-b372-013cf7fcedb4"))
/* dual interface */ IPropertyEdit;
struct __declspec(uuid("4504efa0-d059-4fd4-b725-fa264d190869"))
/* dual interface */ IPropertySeparator;
struct __declspec(uuid("8f53e9d5-07ad-412e-8c2a-509bc633c4ff"))
/* dual interface */ IPropertyList;
struct __declspec(uuid("9205277d-b480-4af7-b660-ccdc653f6453"))
/* dual interface */ IPropertyCheckBox;
struct __declspec(uuid("3920a0be-0628-47d5-b0f1-1dfeb77964bc"))
/* dual interface */ IPropertyMultiButton;
struct __declspec(uuid("e1db38cd-a6d5-44b8-9ad0-0056b87924dd"))
/* dual interface */ IPropertySlideBox;
struct __declspec(uuid("5a902c6c-a030-4f37-a089-91505baee466"))
/* dual interface */ IPropertyUserControl;
struct __declspec(uuid("6682b70f-59db-4bf0-ab01-45b65b1bded1"))
/* dual interface */ IPropertyGrid;
struct __declspec(uuid("3cdfe85f-643d-4008-ae32-379c0eb3fb7f"))
/* dual interface */ IPropertyTextButton;
struct __declspec(uuid("f214a46d-2ba9-40ad-a32d-e696ef9c895a"))
/* dual interface */ IPropertySpinEdit;
struct __declspec(uuid("db1f3224-837e-437f-8944-6fb9703f528b"))
/* dual interface */ IPropertyFileName;
struct __declspec(uuid("fc5cdcfb-3f67-43a1-8fc4-1278b901ce0e"))
/* dual interface */ IPropertyColor;
struct __declspec(uuid("fdb82760-7ea3-408e-8699-a8392acfd810"))
/* dual interface */ IPropertyEditList;
struct __declspec(uuid("c2523b7e-eb4b-45db-8e3b-9d6cced99333"))
/* dual interface */ IPropertyToolBar;
struct __declspec(uuid("d18d34f5-0028-4853-998c-25a48d141b43"))
/* dual interface */ IPropertyBmpList;
struct __declspec(uuid("06f93fbf-c65a-49b1-83db-c736ba33f0a5"))
/* dual interface */ IProcessInfoWindow;
struct __declspec(uuid("2a214701-0bcb-406c-b57f-6dfadd799a64"))
/* dual interface */ IPropertyLibExplorer;
struct __declspec(uuid("b2431c46-9a35-494b-a958-d9098f82c3fa"))
/* dual interface */ IPropertyStyleList;
struct __declspec(uuid("5a247709-ea70-443c-968e-bfecc951e14f"))
/* dual interface */ IPropertyGroupBegin;
struct __declspec(uuid("6afddac7-eb89-440c-8ad0-866aeeeab7cc"))
/* dual interface */ IPropertyGroupEnd;
struct __declspec(uuid("74191892-71fc-4820-b8a4-cb264a9e9e8e"))
/* dual interface */ IPropertyTwinSwitcher;
struct __declspec(uuid("64725d44-155c-412c-b0f5-f5203f5f75fd"))
/* dual interface */ IPropertyPoint3D;
struct __declspec(uuid("8576d0c2-3147-4cff-aa39-fa9ef9b799e3"))
/* dual interface */ IPropertyPreviewText;
struct __declspec(uuid("8b2a259e-6819-4ddb-8ea3-c408f9f04054"))
/* dual interface */ IPropertyAggregateControl;
struct __declspec(uuid("c97e7403-b375-4544-87dd-4d3ef36388e5"))
/* dual interface */ IProcessContextPanel;
struct __declspec(uuid("3f23fd10-1526-414d-93bc-ab273794f654"))
/* dual interface */ IProcessContextIconMenu;
struct __declspec(uuid("75e9d1c7-b766-4d53-be99-a3088c249266"))
/* dual interface */ IPropertyBasePoint;
struct __declspec(uuid("2f69f0e3-89da-4b0c-8abe-a6e996f39ad1"))
/* dual interface */ IPropertyMarking;
struct __declspec(uuid("3a7c6a0c-53db-4043-9a77-6d3989175741"))
/* dual interface */ IProcess;
struct __declspec(uuid("89d98e20-a4f4-4f49-8fdf-fe4dc28f208f"))
/* dual interface */ IEditDoubleManipulator;
struct __declspec(uuid("05b6026a-4b53-4015-a7cb-94298073f86c"))
/* dual interface */ IMouseEnterLeaveParameters7;
struct __declspec(uuid("18cf34d8-95e8-4130-a3b2-79d0bcb1055c"))
/* dual interface */ IPropertyReplaceList;
struct __declspec(uuid("0825f23c-0a73-48de-beab-da2ff39962c3"))
/* dual interface */ IAssociationView;
struct __declspec(uuid("5f9580da-915c-4c28-991d-5dffe3bf3b3c"))
/* dual interface */ IViewDesignation;
struct __declspec(uuid("e4e42871-e799-4273-8edb-e5ef83cc66c2"))
/* dual interface */ IAssociationViewElements;
struct __declspec(uuid("1b94c65d-3473-4ff2-b185-0b1c2c98fcae"))
/* dual interface */ IBreakViewParam;
struct __declspec(uuid("d4c8b5af-b2a1-4e07-9cd0-a1fc5b0bc1e1"))
/* dual interface */ ICutViewParam;
struct __declspec(uuid("85efccc7-1667-48b7-a915-bb8149915ef8"))
/* dual interface */ ILocalCoordinateSystem2D;
struct __declspec(uuid("e6a6a1c8-a6f9-470e-af64-d6ab7741d684"))
/* dual interface */ ILocalCoordinateSystems2D;
struct __declspec(uuid("93233f05-b389-4076-bca2-ccdb87bdb7b7"))
/* dual interface */ IView1;
struct __declspec(uuid("6eda87c9-26c9-4040-ae48-33ad3ea9244f"))
/* dual interface */ ITexturesParam;
struct __declspec(uuid("557c20d0-5e6c-485e-b8d6-736180bd4261"))
/* dual interface */ IAutoNumerationManager;
struct __declspec(uuid("b09a64bf-7aa6-4bf6-b8e8-aa8e8ee6e9d6"))
/* dual interface */ IDocument2DSettings;
struct __declspec(uuid("bec74a2d-02e9-46be-9de4-fc09120ca010"))
/* dual interface */ IAutoSortObjectsParameters;
struct __declspec(uuid("0dc39fc2-4fb1-489e-a76e-e47413199fa3"))
/* dual interface */ IDrawingDocumentSettings;
struct __declspec(uuid("a33d05cf-efff-4bbe-9be0-15d283425828"))
/* dual interface */ IFragmentDocumentSettings;
struct __declspec(uuid("c474582a-2ad4-4ed5-a86a-a169c4da5d54"))
/* dual interface */ ILibItemSettings;
struct __declspec(uuid("16777c2b-829d-4405-b5c7-71eafca17bfa"))
/* dual interface */ INewDocument3DSettings;
struct __declspec(uuid("be6a80ee-38fe-4432-8331-bf864830761c"))
/* dual interface */ IColorParam7;
struct __declspec(uuid("6ffaf1bc-98c1-4562-a7a7-1d263996b1d4"))
/* dual interface */ IDocument3DSettings;
struct __declspec(uuid("28c513ee-057a-4094-8c18-d3fd733d2c81"))
/* dual interface */ IThreadDialogParam;
struct __declspec(uuid("c825c801-d6d3-4456-bd37-d48ed799e033"))
/* dual interface */ IApplicationDialogs;
struct __declspec(uuid("b9362883-c8ec-4603-a6aa-7f4703aaa9d9"))
/* dual interface */ IContentDialogParam;
struct __declspec(uuid("48496b1a-c41f-4411-8955-e759330a4f83"))
/* dual interface */ IDocumentSettings1;
struct __declspec(uuid("0a351402-abad-4347-b6ec-b5eb1121dbfb"))
/* dual interface */ IFormatLabelRules;
struct __declspec(uuid("1db65c7e-535e-489e-8f34-84df7fba09b2"))
/* dual interface */ IInsertionParameters;
struct __declspec(uuid("66907239-09ba-4456-ac9a-318804099628"))
/* dual interface */ IInsertionDefinition;
struct __declspec(uuid("040c027e-d385-4a7a-96bd-296df0b9e70e"))
/* dual interface */ ISerializer;
struct __declspec(uuid("b416c2ca-ca76-4cbe-8d3a-458967f8e0ce"))
/* dual interface */ IHypertextReferenceParam;
struct __declspec(uuid("cf9150ba-0e3a-46de-8973-332a00361474"))
/* dual interface */ ITableCell;
struct __declspec(uuid("d3715420-645e-435b-bb25-8e35ac570718"))
/* dual interface */ ITable;
struct __declspec(uuid("d78e47dc-172b-4824-a519-9bc2c0387b5c"))
/* dual interface */ ITableRange;
struct __declspec(uuid("9f2f27e7-8fb2-4c6c-a54d-35db240060d8"))
/* dual interface */ ICellFormat;
struct __declspec(uuid("1e29e849-1d1e-4791-bd31-8ef00ed5d118"))
/* dual interface */ ICellBoundaries;
struct __declspec(uuid("5a89c538-e0dd-4c21-b3d1-3bf65eeb8c3e"))
/* dispinterface */ ksPropertyManagerNotify;
struct __declspec(uuid("5a31bb02-026c-4419-a0ff-a93cf58dca99"))
/* dispinterface */ ksPropertyUserControlNotify;
struct __declspec(uuid("6ecbb531-5609-4364-ac92-7a6a21d23313"))
/* dispinterface */ ksDocumentFrameNotify;
struct __declspec(uuid("4d14726d-0ec2-49ce-b02c-fedaa6d65bbd"))
/* dual interface */ IPaintObject;
struct __declspec(uuid("b1c65023-b908-4cad-9238-c5026520e62c"))
/* dispinterface */ ksGLObject;
struct __declspec(uuid("b6674824-cd9d-4220-b2cb-9f939a9c35c8"))
/* dual interface */ IGabaritObject;
struct __declspec(uuid("e335a73f-df27-4d33-8cbd-e928f797fb94"))
/* dispinterface */ ksDrawingObjectNotify;
struct __declspec(uuid("fc04c62e-ab0f-4614-b3d9-0ea8671ceb08"))
/* dispinterface */ ksViewsAndLayersManagerNotify;
struct __declspec(uuid("9b9cc387-e217-4eed-bce9-9e1d645b49ee"))
/* dispinterface */ ksLibraryManagerNotify;
struct __declspec(uuid("a0da14e6-4f92-4d18-8cd1-2bbab695ce13"))
/* dispinterface */ ksSpecificationDescriptionNotify;
struct __declspec(uuid("1c4dec41-a8ea-40ee-9ac8-f807232db874"))
/* dispinterface */ ksSpecificationObjectNotify;
struct __declspec(uuid("58e30500-6073-4337-bfc1-32a74ea17de8"))
/* dispinterface */ ksLayoutSheetsNotify;
struct __declspec(uuid("7b8e86e1-4304-449d-9cec-1b14f74a16fb"))
/* dispinterface */ ksModelObjectNotify;
struct __declspec(uuid("c784d45b-8c68-4189-8f27-a3b0d6cfaeb2"))
/* dispinterface */ ksDocument3DNotify7;
struct __declspec(uuid("7278f9ec-ac53-4861-9e9e-199b59f82a9a"))
/* dispinterface */ ksProcess2DNotify;
struct __declspec(uuid("e896df8d-6be9-473a-b7b4-38050cdef537"))
/* dispinterface */ ksProcess3DNotify;
struct __declspec(uuid("73653933-51b5-49d6-9ef2-6667639283cc"))
/* dual interface */ IModelObjectNotifyResult;
struct __declspec(uuid("354ea69a-3191-4da4-b980-821be9b7683c"))
/* dual interface */ IKompasDocument3DNotifyResult;
struct __declspec(uuid("7be2f563-98ad-4f96-891e-c568c0ccd61b"))
/* dispinterface */ ksContentDialogNotify;
struct __declspec(uuid("45b82b5c-d0b7-4ac5-965c-26b09612cbf6"))
/* dispinterface */ ksProcess3DManipulatorsNotify;
struct __declspec(uuid("b6db286d-a060-4107-a693-19d135c47751"))
/* dispinterface */ ksPLMObjectNotify;
struct __declspec(uuid("f7694c56-6108-4b75-bac6-87fb246831f9"))
/* dispinterface */ ksFindObject3DParametersNotify;
struct __declspec(uuid("2c6e8a0f-edc8-413c-9304-9278817b915b"))
/* dual interface */ IModelContainer;
struct __declspec(uuid("ee562963-395c-4748-9726-fca9c531b1ca"))
/* dual interface */ ISketchs;
struct __declspec(uuid("e6bbf50d-8401-4fb3-a6b6-153d3f447255"))
/* dual interface */ ISketch;
struct __declspec(uuid("a160c032-cf96-4467-a682-ce2243df76bd"))
/* dual interface */ IExtrusions;
struct __declspec(uuid("0d7ffe70-33eb-442c-a9b6-a205ea85a237"))
/* dual interface */ IExtrusion;
struct __declspec(uuid("81ebb128-3963-4759-9d4e-2829c3078b0f"))
/* dual interface */ IPoints3D;
struct __declspec(uuid("5cd7ac22-d8c2-42c4-96e5-5d64e44046f7"))
/* dual interface */ IFeaturePatterns;
struct __declspec(uuid("c020e994-fb7f-449a-a3d9-2181135f4200"))
/* dual interface */ IFeaturePattern;
struct __declspec(uuid("7a9b6fcc-2156-48c8-bc95-597242ee1b9e"))
/* dual interface */ ISurfaceThickenings;
struct __declspec(uuid("984f7dd6-a7fb-4693-862f-459cc8630b11"))
/* dual interface */ ISurfaceThickening;
struct __declspec(uuid("a9b14309-92b3-46ba-8841-233293a60310"))
/* dual interface */ IRotateds;
struct __declspec(uuid("7bb28ad1-ccae-449c-9086-a97470543089"))
/* dual interface */ IRotated;
struct __declspec(uuid("b180fe26-abee-4f37-932f-24aaacf227a4"))
/* dual interface */ IScalings3D;
struct __declspec(uuid("a37ee5f1-c852-467b-b72a-00c05310174d"))
/* dual interface */ IScaling3D;
struct __declspec(uuid("140de7b8-8291-4220-b7fb-9f3c4fdfb649"))
/* dual interface */ IBilletsObsoletes;
struct __declspec(uuid("5f754ba9-1fb7-4aae-a3f2-f36d7cf938bf"))
/* dual interface */ IBilletObsolete;
struct __declspec(uuid("6cc5e3b7-b509-4b8e-87d1-0b936010120c"))
/* dual interface */ ICopiesGeometry;
struct __declspec(uuid("63e5636b-0661-4635-a902-6e8727e75d93"))
/* dual interface */ ICopyGeometry;
struct __declspec(uuid("cc78f834-4a97-4f69-9207-215308f0abb0"))
/* dual interface */ ICollectionGeometry;
struct __declspec(uuid("f1b04dda-faac-4d51-9567-304cfe3ec094"))
/* dual interface */ ICollectionsGeometry;
struct __declspec(uuid("1753e6be-c57c-415e-931d-37ead991d629"))
/* dual interface */ IUserObjects3D;
struct __declspec(uuid("1c1886bc-98dd-4aa9-b038-6849c7bcc86c"))
/* dual interface */ IUserObject3D;
struct __declspec(uuid("a018e8ce-26f6-4dae-801b-378ed08a6314"))
/* dual interface */ IHoles3D;
struct __declspec(uuid("4c901765-3e0d-4a5d-b2f8-fa708e3cc605"))
/* dual interface */ IHole3D;
struct __declspec(uuid("bc710e4d-a679-40fc-b5ae-16302abbfeb8"))
/* dual interface */ IThread;
struct __declspec(uuid("5e232224-2445-430f-9324-2c75bace1d0c"))
/* dual interface */ IChamfers;
struct __declspec(uuid("59c6927b-fc6d-4494-9cde-648276020929"))
/* dual interface */ IChamfer;
struct __declspec(uuid("7a0672ef-4c38-4fd7-8d06-dadd256e1e38"))
/* dual interface */ IFillets;
struct __declspec(uuid("15e3132f-4d4e-451f-b104-478a4e3e0128"))
/* dual interface */ IFillet;
struct __declspec(uuid("37e37d7d-58d1-4469-9b79-2254d2b9e112"))
/* dual interface */ IInclines;
struct __declspec(uuid("2db9e3ce-7603-4c88-8ff5-f8985ad26c58"))
/* dual interface */ IIncline;
struct __declspec(uuid("70ff934f-d7a2-4d91-ab55-27174e90648b"))
/* dual interface */ IRibs;
struct __declspec(uuid("2d8e1f2b-1610-4aa5-8f7f-ed489c4ededc"))
/* dual interface */ IRib;
struct __declspec(uuid("0ba80020-ad0b-4442-b4c7-7ac75aa04cac"))
/* dual interface */ IShells;
struct __declspec(uuid("05a5c975-d995-4069-90a3-a81391ae8d62"))
/* dual interface */ IShell;
struct __declspec(uuid("1739583b-bfda-4ad2-bfe3-14302133bb21"))
/* dual interface */ IBooleans;
struct __declspec(uuid("1fe29bdf-0b8e-4e34-a7e5-418092c6c9c3"))
/* dual interface */ IBoolean;
struct __declspec(uuid("85b81047-11f3-46d3-869d-efe37a6a8588"))
/* dual interface */ ICuts;
struct __declspec(uuid("d76be44a-2ab3-4b5a-b893-3c27e227df4d"))
/* dual interface */ ICut;
struct __declspec(uuid("af5f922f-8c32-4949-a29a-bb5ec7a99d00"))
/* dual interface */ ILofts;
struct __declspec(uuid("ddb04ecf-12a9-496e-8069-405f7302e039"))
/* dual interface */ ILoft;
struct __declspec(uuid("fb39791b-2100-4f36-b352-aa4eb5fd9373"))
/* dual interface */ ICoupling;
struct __declspec(uuid("8d984124-c430-45b3-939a-b5264c5b1388"))
/* dual interface */ IEvolutions;
struct __declspec(uuid("9ae8a34a-de20-4c56-a793-bfcbb9343903"))
/* dual interface */ IEvolution;
struct __declspec(uuid("2a449ef6-1554-4c66-8a98-2734dab88e97"))
/* dual interface */ IUnionsComponents;
struct __declspec(uuid("2dcdd394-c325-4d41-a5fd-9e8cc7b8ec5c"))
/* dual interface */ IUnionComponents;
struct __declspec(uuid("ef2ee8a8-bcc8-49ba-8ff5-3bbf627c1432"))
/* dual interface */ IMoldCavities;
struct __declspec(uuid("c4b6d128-8013-4af4-b4d5-40e25f2cdbd0"))
/* dual interface */ IMoldCavity;
struct __declspec(uuid("b4c41d1d-02e2-4a05-a493-7d25ceec797c"))
/* dual interface */ IMacroObjects3D;
struct __declspec(uuid("09dbaa1e-fc4c-4e16-b033-fb9b8f7995d8"))
/* dual interface */ IMacroObject3D;
struct __declspec(uuid("c42be43c-5de5-4293-9254-5aa7f3b2ec2b"))
/* dual interface */ IBodyRepositions;
struct __declspec(uuid("621e42c8-0bf8-4cb8-8813-e45e2221694e"))
/* dual interface */ IBodyReposition;
struct __declspec(uuid("f36e8fba-f786-4e65-8782-3f6bc2f9d006"))
/* dual interface */ IFullFillets;
struct __declspec(uuid("7fea11b5-b4d3-4481-ab09-b0de0a699189"))
/* dual interface */ IFullFillet;
struct __declspec(uuid("d5f8b7ed-2477-4480-bdab-c2bb392f7fec"))
/* dual interface */ IWireFrames3D;
struct __declspec(uuid("83bfb72d-16fe-488b-846c-7b9905824f58"))
/* dual interface */ IWireFrame3D;
struct __declspec(uuid("5334bc27-f93d-4bd6-8ce1-f48b73b2dc2a"))
/* dual interface */ ISplitSolids;
struct __declspec(uuid("65851ada-9047-4ad7-91df-c50d58813851"))
/* dual interface */ ISplitSolid;
struct __declspec(uuid("666c987f-2700-4c35-b8ce-db8bfb5aaf02"))
/* dual interface */ IMassInertiaParam7;
struct __declspec(uuid("58b4011d-3c0b-499a-a441-7870b663e8cf"))
/* dual interface */ IExtrusion1;
struct __declspec(uuid("b90d597d-4213-4a59-98d4-0b67e719551b"))
/* dual interface */ IThinParameters;
struct __declspec(uuid("d2a01420-9159-48c2-8302-c1b10a13d8f8"))
/* dual interface */ ICutExtrusion;
struct __declspec(uuid("7bf80daa-25f8-4aff-afea-cad390d4275d"))
/* dual interface */ IChooseBodies7;
struct __declspec(uuid("6d2ee9a7-4c9f-4606-91a5-9941c20701e5"))
/* dual interface */ IChooseObjects;
struct __declspec(uuid("f56dbe72-48cc-48ad-9da4-10d972c903ee"))
/* dual interface */ ISheetMetalBodies;
struct __declspec(uuid("2dc533dc-829e-4eff-a905-541e9220a12d"))
/* dual interface */ ISheetMetalBody;
struct __declspec(uuid("77a4895d-9b09-4c63-a3ff-6857f4340840"))
/* dual interface */ ISheetMetalContainer;
struct __declspec(uuid("6826cfd6-6a48-4eb1-8c89-7db4e36702b4"))
/* dual interface */ ISheetMetalBends;
struct __declspec(uuid("b631d95f-c487-41d6-9726-c65e9f5a4505"))
/* dual interface */ ISheetMetalBend;
struct __declspec(uuid("af8b8310-af82-4b02-8733-783ffafd4dbd"))
/* dual interface */ ISheetMetalLineBends;
struct __declspec(uuid("e13ef07a-b1e8-41fd-9c85-c17f01e52a03"))
/* dual interface */ ISheetMetalLineBend;
struct __declspec(uuid("e117bdf9-5133-4672-9b8f-06046f6b9bf3"))
/* dual interface */ ISheetMetalHoles;
struct __declspec(uuid("3490b8b8-00d7-4bcf-aad8-9487bf271084"))
/* dual interface */ ISheetMetalHole;
struct __declspec(uuid("9515e4bb-7c60-4c3a-af7a-847861e67b55"))
/* dual interface */ ISheetMetalCuts;
struct __declspec(uuid("b50b1730-bacf-46f2-b10a-6ccdf4e4a2b1"))
/* dual interface */ ISheetMetalCut;
struct __declspec(uuid("247539a2-bb15-4d8a-9121-67bde48a989a"))
/* dual interface */ ISheetMetalSketchBends;
struct __declspec(uuid("4e4f3cb3-5596-445b-9a18-0af559e545c5"))
/* dual interface */ ISheetMetalSketchBend;
struct __declspec(uuid("67037d06-603a-41da-8513-45088fea98a8"))
/* dual interface */ ISheetMetalClosedCorners;
struct __declspec(uuid("995bee65-54d2-443e-9423-88b4323308a7"))
/* dual interface */ ISheetMetalClosedCorner;
struct __declspec(uuid("a1ad042d-a57f-4079-8f7a-ce4aab5d9daf"))
/* dual interface */ ISheetMetalPlates;
struct __declspec(uuid("dc733340-dca5-4253-8ab1-045ad169e06e"))
/* dual interface */ ISheetMetalPlate;
struct __declspec(uuid("b19d00a4-1b8e-43fa-9da7-ebe37ec67b67"))
/* dual interface */ ISheetMetalBendedStraightens;
struct __declspec(uuid("194f5af1-1b37-4ff7-9c7a-b939cb556f3a"))
/* dual interface */ ISheetMetalBendedStraighten;
struct __declspec(uuid("bc21145e-5520-4871-aa24-52e19ef82211"))
/* dual interface */ ISheetMetalBendUnfoldParameters;
struct __declspec(uuid("0541bee1-9273-4611-9f26-b3408c51580f"))
/* dual interface */ ISheetMetalPressFormings;
struct __declspec(uuid("bdb9fb08-c8c8-4446-9821-be1ba9306602"))
/* dual interface */ ISheetMetalPressForming;
struct __declspec(uuid("ac0f620e-229a-42be-8c5b-1786c54474c0"))
/* dual interface */ ISheetMetalShoulders;
struct __declspec(uuid("75024bd8-6d1c-4963-9733-326efb3cb28d"))
/* dual interface */ ISheetMetalShoulder;
struct __declspec(uuid("914d5295-8831-4166-994c-d19c5df149e7"))
/* dual interface */ ISheetMetalJalousies;
struct __declspec(uuid("13501739-cd1f-4401-8a48-b2093e974cc1"))
/* dual interface */ ISheetMetalJalousie;
struct __declspec(uuid("b72cc78f-d630-463f-8911-ed9bd58bba1c"))
/* dual interface */ ISheetMetalRibs;
struct __declspec(uuid("aca9c96e-5dbe-44c8-abf5-15230282ab05"))
/* dual interface */ ISheetMetalRib;
struct __declspec(uuid("16298697-3335-435c-8f93-1cafde0ec442"))
/* dual interface */ ISheetMetalPunchs;
struct __declspec(uuid("67c22259-2d49-4f50-9224-adf20f6dd655"))
/* dual interface */ ISheetMetalPunch;
struct __declspec(uuid("6d57994f-c170-4ced-968a-6ad69c1a2c7d"))
/* dual interface */ IPoint3DParamDisplace;
struct __declspec(uuid("c009f9ed-ed8a-4b1e-a4ce-156f43c3f6f3"))
/* dual interface */ IPoint3DParamIntersect;
struct __declspec(uuid("a92f2938-f1d4-475e-aab4-962faa4a4366"))
/* dual interface */ IPoint3DParamCenter;
struct __declspec(uuid("06b6bda5-1dc6-4321-8b28-ac065d87e060"))
/* dual interface */ IPoint3DParamCurve;
struct __declspec(uuid("18ce6bbe-63fb-4c94-8998-e40bc5b5d1c6"))
/* dual interface */ IPoint3DParamSurface;
struct __declspec(uuid("b5d353dd-5f26-42fd-87d3-01c97c44e1bf"))
/* dual interface */ IPoint3DParamProjection;
struct __declspec(uuid("c9e03a9b-0a54-49ac-9397-8de4465a8d1d"))
/* dual interface */ ISourcePart7Params;
struct __declspec(uuid("d695d345-7054-4bbd-8d36-8e1f5aedc5ed"))
/* dual interface */ ISymbols3DContainer;
struct __declspec(uuid("8e30c80c-4c79-497b-a74b-84d44f96ef4d"))
/* dual interface */ ILineDimensions3D;
struct __declspec(uuid("3514887e-321b-4ce3-a966-3eb1a02ceef2"))
/* dual interface */ IBaseLineDimension3D;
struct __declspec(uuid("153924cd-e046-4334-8798-46a6d6663de4"))
/* dual interface */ IRadialDimensions3D;
struct __declspec(uuid("5711b871-1fae-425c-898e-583442d851cd"))
/* dual interface */ IRadialDimension3D;
struct __declspec(uuid("79b5ac3b-9b2f-4c75-8482-3c0d6b07d911"))
/* dual interface */ IDiametralDimensions3D;
struct __declspec(uuid("261ae065-69b8-4b42-b103-c8746720c5bf"))
/* dual interface */ IDiametralDimension3D;
struct __declspec(uuid("e0e8db05-f71b-457e-bfeb-7ec2e803e77a"))
/* dual interface */ IAngleDimensions3D;
struct __declspec(uuid("c22870b5-f002-4c76-9e67-46854e938824"))
/* dual interface */ IAngleDimension3D;
struct __declspec(uuid("c6e6bdd4-2b0e-49bf-87d3-04e800200ddc"))
/* dual interface */ ILeaders3D;
struct __declspec(uuid("7170f38e-8230-4c9c-b36b-0bacbb27b123"))
/* dual interface */ IBaseLeader3D;
struct __declspec(uuid("8533772b-1c43-4fdd-9f0e-bc92f15862c9"))
/* dual interface */ IRoughs3D;
struct __declspec(uuid("083a4984-199e-4591-8fc3-cb8a9d7d4303"))
/* dual interface */ IRough3D;
struct __declspec(uuid("8bc582b3-1f82-4d19-af95-24cbad412e52"))
/* dual interface */ IBases3D;
struct __declspec(uuid("d5b737f6-fd3d-49f8-b3d8-c8475e5e3d3a"))
/* dual interface */ IBase3D;
struct __declspec(uuid("82adda0c-b8de-4336-a5cc-b36504a80e2d"))
/* dual interface */ ITolerances3D;
struct __declspec(uuid("9cf700cf-72db-44eb-a191-3814a3cc21bd"))
/* dual interface */ ITolerance3D;
struct __declspec(uuid("6090c8d4-4eb0-402a-8e25-29c1fae85f11"))
/* dual interface */ IThreads;
struct __declspec(uuid("fa666f0b-f646-468b-a1ec-0cee38103a8b"))
/* dual interface */ IArcDimensions3D;
struct __declspec(uuid("fae2bd57-c091-4009-a7d3-a55371961966"))
/* dual interface */ IArcDimension3D;
struct __declspec(uuid("c18c14c9-bcb8-47a0-9506-5b033ed0ac4c"))
/* dual interface */ IModelTexts;
struct __declspec(uuid("1ae2cbf3-da20-4888-8be7-e1165621a21a"))
/* dual interface */ IModelText;
struct __declspec(uuid("fec86293-7ab2-4bbb-8baf-53ec5d033afe"))
/* dual interface */ IModelTables;
struct __declspec(uuid("be1c5e22-0676-45d0-8081-c1cf7157cb5c"))
/* dual interface */ IModelTable;
struct __declspec(uuid("f38e986b-9cc0-4492-b850-180d3a6af713"))
/* dual interface */ ILineDimension3D;
struct __declspec(uuid("2ad2e4b4-b870-437a-8d57-5807729fcb05"))
/* dual interface */ ICurveVertexParam;
struct __declspec(uuid("c4bc0839-932f-4dbc-9a84-5d1fe8927351"))
/* dual interface */ ISplines3D;
struct __declspec(uuid("4d0940a0-6a4a-4ce8-a08a-ea0a4ae91942"))
/* dual interface */ ISpline3D;
struct __declspec(uuid("cc04cbf6-f0d4-456e-903a-c0b0d3551368"))
/* dual interface */ ILocalCoordinateSystems;
struct __declspec(uuid("950febe2-f916-4e77-a37d-b061e5c22fa8"))
/* dual interface */ IAuxiliaryGeomContainer;
struct __declspec(uuid("0cf9b989-29f8-495f-9dda-8c2cad840bb6"))
/* dual interface */ IPolyLines;
struct __declspec(uuid("6ce7843d-9afa-48ff-b444-61cdf036d118"))
/* dual interface */ IPolyLine;
struct __declspec(uuid("e22e30f6-05ee-4fb5-9eeb-e288234f256a"))
/* dual interface */ IControlPoints;
struct __declspec(uuid("39f4fc2c-99e7-411b-9036-9c756a71e211"))
/* dual interface */ IControlPoint;
struct __declspec(uuid("4df343a0-8744-429d-a605-0eeabb7b5f23"))
/* dual interface */ IConjunctivePoints;
struct __declspec(uuid("bc7ad518-9599-490b-9e2b-9711fd9b8d4c"))
/* dual interface */ IConjunctivePoint;
struct __declspec(uuid("986e4a45-362f-469d-a3ae-ce081b8ea93a"))
/* dual interface */ ISplitLines;
struct __declspec(uuid("969b49d1-e660-4e94-9343-de5b0f397b03"))
/* dual interface */ ISplitLine;
struct __declspec(uuid("453e0e34-4d2d-47b2-8e95-eb05c731961d"))
/* dual interface */ ISurfacesIntersectionCurves;
struct __declspec(uuid("758420a0-becb-4fda-bdde-1f398b41117c"))
/* dual interface */ ISurfacesIntersectionCurve;
struct __declspec(uuid("8b94f332-eefd-4610-9c55-20a1f7336122"))
/* dual interface */ IEquidistants3D;
struct __declspec(uuid("c25ddbf4-3cc1-467d-b996-e30ed4d529b6"))
/* dual interface */ IEquidistant3D;
struct __declspec(uuid("e0916a32-60a7-4786-859f-c4b08402cc36"))
/* dual interface */ ITrimmedCurves;
struct __declspec(uuid("f86b25dd-55a8-40f7-acc4-4795fcf7c87c"))
/* dual interface */ ITrimmedCurve;
struct __declspec(uuid("2e869cee-5432-48c8-b750-5dac8b6094d6"))
/* dual interface */ IConnectCurves;
struct __declspec(uuid("c3bbe1b9-976c-45ef-805f-dda2ba801567"))
/* dual interface */ IConnectCurve;
struct __declspec(uuid("e530740c-ab81-4daa-afb2-18e90121c8dc"))
/* dual interface */ IFilletCurves;
struct __declspec(uuid("962810e4-0c48-4886-8b80-aea166b1952b"))
/* dual interface */ IFilletCurve;
struct __declspec(uuid("0c7e7d56-f8af-4803-9291-6351dde52b69"))
/* dual interface */ IArcs3D;
struct __declspec(uuid("79cc225f-c4f9-4721-9fe8-8af3aa887523"))
/* dual interface */ IArc3D;
struct __declspec(uuid("491f65e7-f227-42fd-ab49-82487eae7775"))
/* dual interface */ ICurveOutLines;
struct __declspec(uuid("bc64a05c-0078-44eb-9492-abad7ad38e86"))
/* dual interface */ ICurveOutLine;
struct __declspec(uuid("7dd7bf03-5348-4345-a2a2-fc116c100b2e"))
/* dual interface */ ICurveByLaws;
struct __declspec(uuid("d875d25c-b52b-47c8-b04c-8cba73623f17"))
/* dual interface */ ICurveByLaw;
struct __declspec(uuid("6046fd5e-434a-4b9f-826f-37ecc1730ad4"))
/* dual interface */ IIsoparametricCurves;
struct __declspec(uuid("d7e519c3-ea15-43ca-a2eb-d5f119a70051"))
/* dual interface */ IIsoparametricCurve;
struct __declspec(uuid("8a0aadfb-d56c-46bb-90e7-29beeb42ea63"))
/* dual interface */ IIsoparametricCurvesSets;
struct __declspec(uuid("f6768800-d726-4530-8966-ca1dc1ac2927"))
/* dual interface */ IIsoparametricCurvesSet;
struct __declspec(uuid("0e670e69-68ab-4075-9ce4-99e0a1547538"))
/* dual interface */ ISplinesOnSurfaces;
struct __declspec(uuid("bff82605-c64b-460e-a6d3-3c22229a8325"))
/* dual interface */ ISplineOnSurface;
struct __declspec(uuid("88819055-3211-47dd-908f-187b5826fe67"))
/* dual interface */ IProjectionCurves;
struct __declspec(uuid("535dd795-507f-41c8-ac1e-6eaf243a3792"))
/* dual interface */ IProjectionCurve;
struct __declspec(uuid("8062145f-c6ac-4006-a89b-f1fc6a08fcc5"))
/* dual interface */ ICurvesBy2Projectionses;
struct __declspec(uuid("75250d2e-1a02-4593-9002-09872f65f1cb"))
/* dual interface */ ICurveBy2Projections;
struct __declspec(uuid("9c1419ee-e99e-47dd-8ba3-9132e03f1307"))
/* dual interface */ IContours3D;
struct __declspec(uuid("05fd7844-ea39-497d-b00b-7a1154830524"))
/* dual interface */ IContour3D;
struct __declspec(uuid("0dfa5c90-9674-4c27-9441-acdcd46c0af4"))
/* dual interface */ ILineSegments3D;
struct __declspec(uuid("74880880-4f48-44cc-8fc3-83fe3ca7c44a"))
/* dual interface */ ILineSegment3D;
struct __declspec(uuid("aaadb4ee-6f26-4865-9a83-01e71a438621"))
/* dual interface */ IUnhistoredCurves3D;
struct __declspec(uuid("56f2843f-de6a-43bc-accd-560b7fa7dd05"))
/* dual interface */ IUnhistoredCurve3D;
struct __declspec(uuid("afa7329d-e69c-4980-b3b3-8a2aa39de979"))
/* dual interface */ ISpirals3D;
struct __declspec(uuid("8c428c5d-37ef-43a3-8815-410f177d3577"))
/* dual interface */ ISpiral3D;
struct __declspec(uuid("1a156def-0854-4fbd-9dc6-a6b415385c25"))
/* dual interface */ IPointsArrsOnCurves;
struct __declspec(uuid("13783b5e-3591-4173-8da1-6f3095b88db4"))
/* dual interface */ IPointsArrOnCurve;
struct __declspec(uuid("5bd348d2-2e20-4a8d-87b7-c74ef22d0310"))
/* dual interface */ IPointsArrsOnSurfaces;
struct __declspec(uuid("d385fed6-763e-4b1b-b8e5-8b1926389550"))
/* dual interface */ IPointsArrOnSurface;
struct __declspec(uuid("7ea13b3a-7d45-4e40-a5c3-1920b53437a6"))
/* dual interface */ IPointsArrsFromFiles;
struct __declspec(uuid("782932b2-8969-41e1-819c-2458ea6dc8c0"))
/* dual interface */ IPointsArrFromFile;
struct __declspec(uuid("f2645e37-5d28-4821-8716-86c3f0b13892"))
/* dual interface */ IAxes3D;
struct __declspec(uuid("bc67ce6c-c27b-4c72-a2bf-f850373d8e13"))
/* dual interface */ IAxis3D;
struct __declspec(uuid("6d2112dd-f6e1-49cf-9678-89b0c6cc6aca"))
/* dual interface */ IMathCurve3D;
struct __declspec(uuid("71b69c8b-feae-484f-bbda-f7c71a94ddc7"))
/* dual interface */ IPlanes3D;
struct __declspec(uuid("d71c768d-89f1-4143-903a-ad2595fd8220"))
/* dual interface */ IPlane3D;
struct __declspec(uuid("25675c2f-10fd-4ce7-9e73-d3915d3e894e"))
/* dual interface */ IMathSurface3D;
struct __declspec(uuid("919df6db-0ba9-4edd-b681-33e0b519834b"))
/* dual interface */ ILocalCSAxesDirectionParam;
struct __declspec(uuid("ad261149-1455-49bd-ba0a-b1760a0c8cb0"))
/* dual interface */ ILocalCSEulerParam;
struct __declspec(uuid("6c1943ce-8fdb-47d2-9b2f-95f7b851be3d"))
/* dual interface */ IRoughParams;
struct __declspec(uuid("afe08aec-f751-42d9-a6f5-3c004e4d41a6"))
/* dual interface */ IBranchs3D;
struct __declspec(uuid("618485e7-d88a-4dcc-8896-7ea04d831dbb"))
/* dual interface */ ILocalCSOrientByObjectParam;
struct __declspec(uuid("116f7e59-f175-47d2-8346-eb3c87d60578"))
/* dual interface */ ILocalCSObject;
struct __declspec(uuid("2fe3b199-a6b2-4644-9950-f9905250ff0d"))
/* dual interface */ ISurfaceContainer;
struct __declspec(uuid("dee5b135-4d8e-4ad8-aea4-e763f68290b2"))
/* dual interface */ ISurfacePatches;
struct __declspec(uuid("b6330040-7aba-4ecd-8c92-5b441af11c3b"))
/* dual interface */ ISurfacePatch;
struct __declspec(uuid("6e177627-05d6-40b4-b955-9203f00656b5"))
/* dual interface */ IFaceRemovers;
struct __declspec(uuid("4cae21e3-4183-47a6-94b8-8ad14d5775ee"))
/* dual interface */ IFaceRemover;
struct __declspec(uuid("70ae0ba0-2059-4eab-be41-a6e8c8acfa8a"))
/* dual interface */ ISurfaceSewers;
struct __declspec(uuid("031fd1c7-9cb6-4e49-a27d-73b8d0b648d4"))
/* dual interface */ ISurfaceSewer;
struct __declspec(uuid("db184867-6207-4fb7-9b3f-882beaa16b4d"))
/* dual interface */ INurbsSurfaces;
struct __declspec(uuid("5dafc690-b3a7-4771-8e98-f83b5bf0d454"))
/* dual interface */ INurbsSurface;
struct __declspec(uuid("3f3efc1c-a0a7-4b06-bf7a-384bab27b07f"))
/* dual interface */ IRuledSurfaces;
struct __declspec(uuid("95681235-7522-4a84-b01c-e76a27393552"))
/* dual interface */ IRuledSurface;
struct __declspec(uuid("992d7c05-7a25-46fb-aab1-b7337e6ea74b"))
/* dual interface */ IEquidistantSurfaces;
struct __declspec(uuid("f665724f-7177-4b93-b51a-063baf70ced4"))
/* dual interface */ IEquidistantSurface;
struct __declspec(uuid("799a9110-799b-40e5-85af-087ad30a89b4"))
/* dual interface */ ITrimmedSurfaces;
struct __declspec(uuid("3d64a257-8109-491c-8cb6-f0dcf516f02e"))
/* dual interface */ ITrimmedSurface;
struct __declspec(uuid("5f6ee7f9-972a-4bb8-b1e4-bc1c74048fff"))
/* dual interface */ IExtensionSurfaces;
struct __declspec(uuid("27fe71e1-c84d-4f59-8f9b-f0c144314c83"))
/* dual interface */ IExtensionSurface;
struct __declspec(uuid("46afc862-e2da-432b-95a3-7971bfc82cb8"))
/* dual interface */ IMeshPointsSurfaces;
struct __declspec(uuid("a1d85ab6-c3fd-415b-92db-4eb4414ca78b"))
/* dual interface */ IMeshPointsSurface;
struct __declspec(uuid("6ca7ce7a-12c8-4103-acc1-11001dd1b01d"))
/* dual interface */ ICloudPointsSurfaces;
struct __declspec(uuid("f820f8c4-9c93-4513-8bbd-cc028daae41d"))
/* dual interface */ ICloudPointsSurface;
struct __declspec(uuid("7791ddc6-7c2d-450b-bb44-660b078e52d6"))
/* dual interface */ IImportedSurfaces;
struct __declspec(uuid("2b98dee2-3352-4f9b-85b7-f0d94742efa7"))
/* dual interface */ IImportedSurface;
struct __declspec(uuid("9ceec1df-a155-4702-ad18-0d851a4b85a8"))
/* dual interface */ INurbsSurfacesByCurvesMeshs;
struct __declspec(uuid("d06fc62c-a572-4e6b-9c85-0a7d0f971079"))
/* dual interface */ INurbsSurfaceByCurvesMesh;
struct __declspec(uuid("c8ad51fa-5a71-4ee4-adb2-ddaaa90f1621"))
/* dual interface */ IJointSurfaces;
struct __declspec(uuid("e9c8814e-a3c0-4e31-bffd-ed8f3dd13016"))
/* dual interface */ IJointSurface;
struct __declspec(uuid("cf84b430-2579-49ca-b937-02354eb1f8a7"))
/* dual interface */ IRestoredSurfaces;
struct __declspec(uuid("ec25af95-4117-4fb6-a952-1fc72be32e60"))
/* dual interface */ IRestoredSurface;
struct __declspec(uuid("fc5cb737-7393-40c3-9d8c-e4738469c967"))
/* dual interface */ IFaceMovers;
struct __declspec(uuid("ca8a3896-61a1-4976-84af-ad5ba857adc5"))
/* dual interface */ IFaceMover;
struct __declspec(uuid("eb4ab3a9-8e01-4952-9119-f8d09d9572d5"))
/* dual interface */ IModelCurve3D;
struct __declspec(uuid("faa408c7-1a43-499c-b2e2-06f29b48bcbb"))
/* dual interface */ ILinearPattern;
struct __declspec(uuid("4cf250ac-878e-4e7b-94de-f834cd13543f"))
/* dual interface */ IPointDrivenPattern;
struct __declspec(uuid("b1ed4ca8-0835-4465-925d-c137559a32e0"))
/* dual interface */ ICircularPattern;
struct __declspec(uuid("b05fc37d-7d60-4291-be81-e4a9e23d4740"))
/* dual interface */ IPathPattern;
struct __declspec(uuid("575d30e2-efa3-40b5-9ca1-02a63e0d50d9"))
/* dual interface */ IDerivedPattern;
struct __declspec(uuid("c039c103-ec51-4ff1-a870-7c016bc7a0d9"))
/* dual interface */ IVector3DBy2VertexesParameters;
struct __declspec(uuid("47c76e89-23c0-4a82-8dfc-f770f9f380c8"))
/* dual interface */ IMirrorPattern;
struct __declspec(uuid("794bec80-ebb3-4021-9710-2e7bdac66f63"))
/* dual interface */ IVector3DByCoefficientsParameters;
struct __declspec(uuid("7dc2a592-facb-4ab2-9b74-27d8116fd591"))
/* dual interface */ IVector3DBy2AnglesParameters;
struct __declspec(uuid("1e1f5be3-e502-41d1-b2eb-8a8216c49b18"))
/* dual interface */ IVector3DByLocalCSParameters;
struct __declspec(uuid("4cbab5b7-2350-47eb-84da-2953f932d465"))
/* dual interface */ IVector3DByObjectParameters;
struct __declspec(uuid("064cf423-8d27-41e5-84c4-303f286b38b1"))
/* dual interface */ IVector3DAlongSurfaceNormalParameters;
struct __declspec(uuid("68c9d554-7df1-4509-9b41-007f123efb78"))
/* dual interface */ IVector3DByCurveParameters;
struct __declspec(uuid("f4593ca1-05e9-46f2-bf6c-4288371066d1"))
/* dual interface */ IVector3DByScreenNormalParameters;
struct __declspec(uuid("094d83c7-70c3-45ea-aa20-14e55efa52b8"))
/* dual interface */ IRotated1;
struct __declspec(uuid("115a16ef-b0c3-4deb-9d65-d2324fa075d8"))
/* dual interface */ ICutRotated;
struct __declspec(uuid("3191cebb-584c-4f58-82c1-a3771f73be12"))
/* dual interface */ IRotatedSurface;
struct __declspec(uuid("b505b91c-3444-4f7d-b987-5bb554932362"))
/* dual interface */ IExtrusionSurface;
struct __declspec(uuid("341ee39e-ec72-42a1-ba85-38f4ae2875cc"))
/* dual interface */ IPoint3DParamBySphere;
struct __declspec(uuid("98d8aa95-b217-4cd7-8bb4-c419f9042acf"))
/* dual interface */ IPoint3DParamByCylinder;
struct __declspec(uuid("c1948ce8-0933-4d75-9446-3e143928d045"))
/* dual interface */ IEmbodimentsManager;
struct __declspec(uuid("83dbb66a-83b8-47d9-93fe-2a90992193e8"))
/* dual interface */ IEmbodiment;
struct __declspec(uuid("086df000-a37d-4296-93fb-2129d0b1df13"))
/* dual interface */ IConicSpiral3D;
struct __declspec(uuid("529de4b2-3130-4c96-b230-32db100bcfac"))
/* dual interface */ ICylindricSpiral3D;
struct __declspec(uuid("2cb26ab2-09b9-4b7f-a776-ef02ab25fb78"))
/* dual interface */ IMeshAroundPointParam;
struct __declspec(uuid("8cf29d41-23e9-4e19-8df7-c56560f1a237"))
/* dual interface */ IAxis3DBy2Points;
struct __declspec(uuid("ae53df83-5d00-4851-bbcd-bedfca50bf1c"))
/* dual interface */ IAxis3DBy2Planes;
struct __declspec(uuid("2e23903d-9c7c-42b5-861a-a28da3eea2e6"))
/* dual interface */ IAxis3DByConeface;
struct __declspec(uuid("95be2f02-3b18-4bbc-9451-54b4ab70cc7a"))
/* dual interface */ IAxis3DByEdge;
struct __declspec(uuid("2cc2e874-b336-4a24-bd03-9ac7e30123b6"))
/* dual interface */ IAxis3DByPointAndObject;
struct __declspec(uuid("c068bbe9-180d-4d82-a827-124166a451ee"))
/* dual interface */ IAxis3DByOperation;
struct __declspec(uuid("b815e0a4-a837-48ab-9fd8-3e9cdd5a0ab0"))
/* dual interface */ IPlane3DByPlaneCurve;
struct __declspec(uuid("5ede5e22-2d26-4ae2-a765-8ca314eaad85"))
/* dual interface */ IPlane3DTangentToFaceInPoint;
struct __declspec(uuid("5f5e0fa2-84d7-44d1-a946-018ebeb82926"))
/* dual interface */ IPlane3DByOffset;
struct __declspec(uuid("1a0e3dc8-f3f9-4c73-a3d6-87168b1e0dbd"))
/* dual interface */ IPlane3DBy3Points;
struct __declspec(uuid("4ad8121e-95bb-4b0f-b1d8-e0394a72dee2"))
/* dual interface */ IPlane3DByAngle;
struct __declspec(uuid("5d170073-faa3-4e00-a4b4-27e166556626"))
/* dual interface */ IPlane3DByEdgeAndPoint;
struct __declspec(uuid("b9fcc89d-d48c-4090-b092-b0f016b84d58"))
/* dual interface */ IPlane3DParallelByPoint;
struct __declspec(uuid("972d817b-dec8-41f7-9307-a6d368975f2f"))
/* dual interface */ IPlane3DPerpendicularByEdge;
struct __declspec(uuid("054f3818-eabb-426a-b55a-867152cef8bd"))
/* dual interface */ IPlane3DNormalToSurface;
struct __declspec(uuid("70190dea-7da4-4305-ad83-90d2637697be"))
/* dual interface */ IPlane3DMiddle;
struct __declspec(uuid("ea6f2004-7996-4873-abe4-8c88ac597abc"))
/* dual interface */ IPlane3DByEdgeAndPlane;
struct __declspec(uuid("a4c4d3b7-0daf-43ab-b2c2-bd3fcb6a5f8f"))
/* dual interface */ IPlane3DBy2Edge;
struct __declspec(uuid("a9a97838-3b17-4903-ae8c-82543c91d272"))
/* dual interface */ IPlane3DTangentToFace;
struct __declspec(uuid("2b32e33d-f898-4249-90e6-3770fe3bc906"))
/* dual interface */ IUserParameters;
struct __declspec(uuid("b7134661-5e97-45db-9208-5e1e49bef9c2"))
/* dual interface */ IToleranceRecalcsManager;
struct __declspec(uuid("07c35e20-5554-4c10-b0d4-5b07dd9ce842"))
/* dual interface */ IToleranceRecalc;
struct __declspec(uuid("6dbf5262-75a5-4bb9-8ef6-159f204b49d8"))
/* dual interface */ IThreadsParameters;
struct __declspec(uuid("527ccf94-b32b-413b-8b0b-4afd3705cddf"))
/* dual interface */ IMate3DByAngle;
struct __declspec(uuid("8d3897d5-a2d1-4ccb-b479-e629b50cf12f"))
/* dual interface */ IMate3DByTangent;
struct __declspec(uuid("b6ca167c-64a4-4f46-a2e2-cbc5bb019351"))
/* dual interface */ IMate3DSymmetry;
struct __declspec(uuid("52b90d96-d338-4a92-99d9-a90b9d2ff918"))
/* dual interface */ IMate3DTransmission;
struct __declspec(uuid("68ef30fe-933c-4f3a-bb9e-098adcc66368"))
/* dual interface */ IMate3DCamGear;
struct __declspec(uuid("02b548bf-05ec-4fc6-944f-f4e50ab354cd"))
/* dual interface */ ICountersinkHoleParameters;
struct __declspec(uuid("3ebdd778-87eb-4357-bf08-47bcde5abb5d"))
/* dual interface */ ISpotfacingHoleParameters;
struct __declspec(uuid("c92c6cdf-5cde-456c-a235-67c3e43bb141"))
/* dual interface */ ICountersinkSpotfacingHoleParameters;
struct __declspec(uuid("9110f9b1-83f0-4412-b2fe-2b1f416a0932"))
/* dual interface */ IConicHoleParameters;
struct __declspec(uuid("071c7a25-91e2-4c9d-954a-ca0fa0e94863"))
/* dual interface */ IHoleDisposal;
struct __declspec(uuid("6da1f459-7aae-4a07-9a7d-ff19f8997ad5"))
/* dual interface */ IShellSurface;
struct __declspec(uuid("585e265f-0aad-4a42-8030-3a69882a9b39"))
/* dual interface */ IVertex;
struct __declspec(uuid("5a61ced2-dced-4cda-8c3c-cf710f0e727b"))
/* dual interface */ IEdge;
struct __declspec(uuid("299a549e-3f82-4f60-98a3-258d632aa635"))
/* dual interface */ IFace;
struct __declspec(uuid("ca597ae6-2ece-4483-a997-1afd5abf9d3a"))
/* dual interface */ ITessellation7;
struct __declspec(uuid("02c63f96-1370-4147-b024-8bc6837b98fe"))
/* dual interface */ ILoop7;
struct __declspec(uuid("8e62d0ef-3a22-40c7-b5ea-d85fa0c9f25e"))
/* dual interface */ IOrientedEdge7;
struct __declspec(uuid("ff326c86-55cd-49fb-bbce-bc033f762cf7"))
/* dual interface */ IDistanceAngleMeasurement3D;
struct __declspec(uuid("f16c388f-16dc-4498-8875-ec8b300ce4a0"))
/* dual interface */ IDistanceAngleMeasurements3D;
struct __declspec(uuid("93154762-202b-41e4-9ada-7792ec3e6481"))
/* dual interface */ IEdgeLengthMeasurement3D;
struct __declspec(uuid("90749843-c25c-4e07-a432-f46201bee90c"))
/* dual interface */ IEdgeLengthMeasurements3D;
struct __declspec(uuid("02d1f030-8709-4602-8bae-e47ce1c9c13d"))
/* dual interface */ IAreaMeasurement3D;
struct __declspec(uuid("12126558-ea51-46e0-baed-07e523f4b7c6"))
/* dual interface */ IAreaMeasurements3D;
struct __declspec(uuid("c84cb131-1565-4794-abf5-e5bddb9ee5df"))
/* dual interface */ IMeasurementContainer;
struct __declspec(uuid("701ee4da-4a8c-4f64-9ed3-4b51a0abf79c"))
/* dual interface */ IUserDesignationCompObj;
struct __declspec(uuid("2cb2f820-a083-46e3-83f6-5ac4b27078a3"))
/* dual interface */ ISheetMetalUndercut;
struct __declspec(uuid("2123d327-4119-4f1d-a9e4-48462883e968"))
/* dual interface */ ILibraryHoleParameters;
struct __declspec(uuid("f577ed6f-c858-442f-855a-e572aa6068aa"))
/* dual interface */ IZoneParametersByObjects;
struct __declspec(uuid("c29d4dca-6bdc-4e7e-bd93-163950e8a1e1"))
/* dual interface */ IZoneDivisionParametersRegular;
struct __declspec(uuid("3e6ba559-7a5a-4525-8cc0-304ab4164ea5"))
/* dual interface */ IZoneDivisionParametersByPlanes;
struct __declspec(uuid("4a8082d6-fc56-4fd4-a258-51e74a44510d"))
/* dual interface */ IDynamicCrossSectionStep;
struct __declspec(uuid("dc056bc2-64cd-4afe-910e-97ace56b647b"))
/* dual interface */ IDynamicCrossSection;
struct __declspec(uuid("fe4be487-b453-45e4-8be2-2ebd28d56cf5"))
/* dual interface */ IDynamicCrossSectionsManager;
struct __declspec(uuid("3918486a-85b2-4f9b-a85e-13bb754951e0"))
/* dual interface */ IDynamicCrossSectionStepParametersByFreePlane;
struct __declspec(uuid("e5beb695-4c46-4897-9330-7463ed4d6725"))
/* dual interface */ IDynamicCrossSectionStepParametersByOffsetPlane;
struct __declspec(uuid("69ed339f-a095-467d-85f3-91c120bf01bf"))
/* dual interface */ IDynamicCrossSectionStepParametersByRotatedPlane;
struct __declspec(uuid("f966880f-c8ec-4455-a155-43ed46f159f5"))
/* dual interface */ IDynamicCrossSectionStepParametersByZone;
struct __declspec(uuid("4477b6ce-4f64-4bdf-9eaf-c07c7833ce8a"))
/* dual interface */ IAxisLine3D;
struct __declspec(uuid("5a605cf7-d21e-4e02-be8b-3f6fe8e26903"))
/* dual interface */ IDismantleParameters;
struct __declspec(uuid("430d5e8d-1135-4150-a449-a9d434940460"))
/* dual interface */ IDismantleStep;
struct __declspec(uuid("e32e5703-0141-41cf-9917-9565648fe331"))
/* dual interface */ IDrawingText;
struct __declspec(uuid("c72e0e9d-7078-4aa7-95e4-e8c75ca9bcec"))
/* dual interface */ IDrawingTexts;
struct __declspec(uuid("d603fec9-75b7-4fa5-918f-47074c45b848"))
/* dual interface */ IDrawingContainer;
struct __declspec(uuid("b211c782-a830-468e-9f4f-c499a77078d8"))
/* dual interface */ ILineSegments;
struct __declspec(uuid("64acc86f-4b10-4897-8552-bc0a556d228b"))
/* dual interface */ ILineSegment;
struct __declspec(uuid("4fcb4c17-3b9e-45e8-b83c-9284027baa0d"))
/* dual interface */ IArcs;
struct __declspec(uuid("a22dfb7e-21e0-4b28-9ca1-29b7950cf256"))
/* dual interface */ IArc;
struct __declspec(uuid("968d7b84-2bc1-4354-aafe-73192e405546"))
/* dual interface */ IMultilines;
struct __declspec(uuid("f6ccb098-5710-44e3-8198-8fafd56c7a6f"))
/* dual interface */ IMultiline;
struct __declspec(uuid("e79f5a53-f456-4996-b620-16b725f134fb"))
/* dual interface */ IContour;
struct __declspec(uuid("dba3626c-12be-4bff-8d42-b01a78666bc9"))
/* dual interface */ IDrawingContours;
struct __declspec(uuid("25509c3a-7b46-4e3f-b0e8-0e61b7548664"))
/* dual interface */ IDrawingContour;
struct __declspec(uuid("c8ca9255-e5fe-4396-9c3f-75ee7377c508"))
/* dual interface */ ICircles;
struct __declspec(uuid("5c952f95-dfed-4eee-b39a-6699ede08676"))
/* dual interface */ ICircle;
struct __declspec(uuid("8c6846a4-ee3b-4c00-a708-5c0fd01e21b7"))
/* dual interface */ IPoints;
struct __declspec(uuid("d0c19c87-14e7-401d-aef5-a2e88e899f6e"))
/* dual interface */ IPoint;
struct __declspec(uuid("57944ecc-5491-4551-9db9-fabc45125a63"))
/* dual interface */ IBeziers;
struct __declspec(uuid("6d51ec19-200c-47a2-ae55-0593ad746851"))
/* dual interface */ IBezier;
struct __declspec(uuid("5b3f5454-160a-4981-b093-890e9a719ae3"))
/* dual interface */ IMacroObjects;
struct __declspec(uuid("889a9b9c-7533-4ec5-8e2c-5ecf8228b06f"))
/* dual interface */ ILines;
struct __declspec(uuid("3ea0da9b-f2c0-40c4-be36-7103509a9389"))
/* dual interface */ ILine;
struct __declspec(uuid("d1a9cb2d-a259-4ccc-9cd4-fa006494bca7"))
/* dual interface */ IPolyLines2D;
struct __declspec(uuid("4d0da413-9507-4795-896f-e049fa6e44dd"))
/* dual interface */ IPolyLine2D;
struct __declspec(uuid("88eced7c-181c-4d9f-84de-44b2e360f278"))
/* dual interface */ INurbses;
struct __declspec(uuid("ee1ab9f4-b127-4303-a30d-c3509f6d10cd"))
/* dual interface */ INurbs;
struct __declspec(uuid("c6e4e32d-e077-4b14-b9de-041bd628c38c"))
/* dual interface */ IRasters;
struct __declspec(uuid("deed8d7b-404b-4f17-b42a-2f5e64818d0a"))
/* dual interface */ IRaster;
struct __declspec(uuid("e7a8dd07-cd6b-45a6-b6af-155a674bc7e4"))
/* dual interface */ IOleDrawingObjects;
struct __declspec(uuid("9a0ece23-7b60-44e0-9728-c56caaa455a2"))
/* dual interface */ IOleDrawingObject;
struct __declspec(uuid("47633c44-93bb-4f41-a6ca-4f8ccaea0659"))
/* dual interface */ IEllipses;
struct __declspec(uuid("f60c9107-d8e2-433c-a0e3-a4e508d09353"))
/* dual interface */ IEllipse;
struct __declspec(uuid("cc5b7fcb-b887-4a47-ae6b-2522dfa24433"))
/* dual interface */ IEllipseArcs;
struct __declspec(uuid("320d837f-0b27-45b0-98b4-9d21156e9857"))
/* dual interface */ IEllipseArc;
struct __declspec(uuid("d6bc2ee9-249f-4961-89a7-88da854f35fe"))
/* dual interface */ IRectangles;
struct __declspec(uuid("42f9fc58-fea0-4e52-a604-1a00985ab772"))
/* dual interface */ IRectangle;
struct __declspec(uuid("80377cb2-073e-4c38-8532-c42a078ba719"))
/* dual interface */ IRegularPolygons;
struct __declspec(uuid("51968648-f264-4904-a07f-653676ae1d35"))
/* dual interface */ IRegularPolygon;
struct __declspec(uuid("86182e5e-8fa3-4283-9dc5-43d1673c80da"))
/* dual interface */ IEquidistants;
struct __declspec(uuid("ee6713f9-ad9a-466d-9fb9-d19235e42c95"))
/* dual interface */ IEquidistant;
struct __declspec(uuid("c485550b-29e3-4f2a-a85c-c2795e0f1f86"))
/* dual interface */ IInsertionObjects;
struct __declspec(uuid("b9e9ce68-371d-4600-9233-84d89a015c55"))
/* dual interface */ IInsertionObject;
struct __declspec(uuid("b7e776b0-9524-4254-9d1f-0cf8e0314a1b"))
/* dual interface */ IHatches;
struct __declspec(uuid("826c0b5b-0146-417a-8128-e581f8430f37"))
/* dual interface */ IHatch;
struct __declspec(uuid("60437dad-2688-4146-b765-3fcc55c39d0f"))
/* dual interface */ IColourings;
struct __declspec(uuid("1e0ef1b5-08d3-40b6-893e-3ee7e4faec98"))
/* dual interface */ IColouring;
struct __declspec(uuid("d496f149-ab99-402b-b3d2-942b26069753"))
/* dual interface */ IConicCurves;
struct __declspec(uuid("83312bfe-f373-4994-b4b8-ea989fad0e3c"))
/* dual interface */ IConicCurve;
struct __declspec(uuid("b5d1a0be-8f3c-4143-b9c5-66f0cf0fe74d"))
/* dual interface */ IMark;
struct __declspec(uuid("47585370-56bd-4419-82d9-db7cbfb1a252"))
/* dual interface */ IMarks;
struct __declspec(uuid("e5c5a0ff-6cab-4179-9bf3-868d96bf6aea"))
/* dual interface */ IMarkInsideForm;
struct __declspec(uuid("5a1540f9-7388-466f-a13c-eb1133423dd9"))
/* dual interface */ IMarkOnLine;
struct __declspec(uuid("f3d7e6a6-26ea-4d68-ad58-4de194c47b4e"))
/* dual interface */ IMarkOnLeader;
struct __declspec(uuid("123c45bf-14de-433e-b3b0-2fb642a9a418"))
/* dual interface */ IBuildingAxis;
struct __declspec(uuid("5ac48e97-80b1-459f-9709-1f3f374559be"))
/* dual interface */ IMarkNode;
struct __declspec(uuid("eb8acd77-8008-4f89-a311-2f4712462f72"))
/* dual interface */ IMarkNodes;
struct __declspec(uuid("18072e1d-1802-41f5-a434-04bb9d3f157f"))
/* dual interface */ IBuildingAxes;
struct __declspec(uuid("7b2820e0-2cb7-4412-9b96-f291dd790448"))
/* dual interface */ IStraightAxis;
struct __declspec(uuid("5a22e024-f530-45db-a3f2-ca0587bda1b5"))
/* dual interface */ IAxisJut;
struct __declspec(uuid("daa9755a-3971-4713-b281-15995cbf2e56"))
/* dual interface */ IArcAxis;
struct __declspec(uuid("d84358fb-674c-4a5d-93ba-ee5d3342097b"))
/* dual interface */ ICircleAxis;
struct __declspec(uuid("2eda58ee-dbda-44cc-ad10-6895006d498c"))
/* dual interface */ ICutUnitMarking;
struct __declspec(uuid("23b00f94-98d3-4ad7-8827-f4088f4a9e5c"))
/* dual interface */ ICutUnitMarkings;
struct __declspec(uuid("86f46084-16a8-4b5c-99e9-f848216788f0"))
/* dual interface */ IUnitMarking;
struct __declspec(uuid("969ad901-fc09-47f5-94f5-1abeb1a9c85c"))
/* dual interface */ IUnitMarkings;
struct __declspec(uuid("fd1fd236-f5ba-4fb0-a872-21fc13e6895f"))
/* dual interface */ IBuildingContainer;
struct __declspec(uuid("233b2298-7a45-4ce1-aef2-30b063fdb63c"))
/* dual interface */ IMultiTextLeaders;
struct __declspec(uuid("1bfc5d3f-1483-4569-b4b5-7a12163a4655"))
/* dual interface */ IMultiTextLeader;
struct __declspec(uuid("598e649b-970c-454b-9162-1bb6c9fbfcbf"))
/* dual interface */ IUnitNumbers;
struct __declspec(uuid("fabaf607-cb92-47c4-9409-b7678162051d"))
/* dual interface */ IUnitNumber;
struct __declspec(uuid("99f27bd6-6294-45d9-af78-a9d52e9dd799"))
/* dual interface */ IBraces;
struct __declspec(uuid("7f328d28-76e9-4e04-a35c-ad60339998e4"))
/* dual interface */ IBrace;
struct __declspec(uuid("666da5b4-324c-493c-9a91-37d9e078eb4e"))
/* dual interface */ ICutLines;
struct __declspec(uuid("26e86124-dc1c-41a2-8075-e73f3ead8474"))
/* dual interface */ ICutLine;
struct __declspec(uuid("f46b0086-17f2-4489-a5a7-0aa677610afd"))
/* dual interface */ ISymbols2DContainer;
struct __declspec(uuid("a6f6a18a-78fa-4a77-bb75-90647e0c545c"))
/* dual interface */ ILineDimensions;
struct __declspec(uuid("a3767bda-e605-4fc1-988d-81809deb36f4"))
/* dual interface */ ILineDimension;
struct __declspec(uuid("12d26993-449e-42e2-a909-b047afd6e27d"))
/* dual interface */ IRadialDimensions;
struct __declspec(uuid("712a9437-d772-4eae-af83-abc9c22eb281"))
/* dual interface */ IRadialDimension;
struct __declspec(uuid("8e45feb9-7bcd-4c9f-9767-320736980662"))
/* dual interface */ IDiametralDimensions;
struct __declspec(uuid("2b4ce92f-438d-4d3e-8f8d-4d14e5d0e214"))
/* dual interface */ IDiametralDimension;
struct __declspec(uuid("df9abb77-bbb6-4b29-a0e0-81dcfd525c2e"))
/* dual interface */ IAngleDimensions;
struct __declspec(uuid("0f2ce9ec-5d2a-4b21-b96a-46201c120ed1"))
/* dual interface */ IAngleDimension;
struct __declspec(uuid("4125169f-3ea8-4ac0-9e1b-5582d62600c4"))
/* dual interface */ IBreakLineDimensions;
struct __declspec(uuid("61164a26-855c-4220-88ed-c2bdaf49b2db"))
/* dual interface */ IBreakLineDimension;
struct __declspec(uuid("3a56d35c-3242-4c49-ba99-cf790eb10356"))
/* dual interface */ IHeightDimensions;
struct __declspec(uuid("938be57f-55ff-469f-82a5-b1cd6ccf8340"))
/* dual interface */ IHeightDimension;
struct __declspec(uuid("fe2755d9-48e2-44cc-bc24-86cf86be08e2"))
/* dual interface */ IArcDimensions;
struct __declspec(uuid("11487495-b18a-4877-9e85-3dc9016df8bd"))
/* dual interface */ IArcDimension;
struct __declspec(uuid("e2181a3e-5417-4d73-ab65-983ded3438e0"))
/* dual interface */ IBreakRadialDimensions;
struct __declspec(uuid("88491537-9e93-42f3-861c-761a75bb89d6"))
/* dual interface */ IBreakRadialDimension;
struct __declspec(uuid("acc42b32-27f3-4f74-b4a5-c97d4c7b289d"))
/* dual interface */ IRoughs;
struct __declspec(uuid("0a192ac5-d8bc-43e9-8fc7-acf32578ddb4"))
/* dual interface */ IRough;
struct __declspec(uuid("c607727c-6b0a-4fb6-afca-ed9d83f5c6b7"))
/* dual interface */ IBases;
struct __declspec(uuid("01cdfd67-69ea-4289-8f42-5b01bb9bf70b"))
/* dual interface */ IBase;
struct __declspec(uuid("97cdd55f-3c64-469b-b26e-a927d3300b6c"))
/* dual interface */ ITolerances;
struct __declspec(uuid("42def911-adb2-478c-85f1-d5fefa262eec"))
/* dual interface */ ITolerance;
struct __declspec(uuid("df92dace-bdc6-4341-86da-3a9c8dcfdefe"))
/* dual interface */ IDrawingTables;
struct __declspec(uuid("9b421bda-0444-4a68-b69c-1c05d05c9d28"))
/* dual interface */ IDrawingTable;
struct __declspec(uuid("08b45c97-6f86-4809-bbc3-78f216bd0430"))
/* dual interface */ IViewPointers;
struct __declspec(uuid("3ee98177-63e8-4c48-89ad-3d5cccf84d72"))
/* dual interface */ IViewPointer;
struct __declspec(uuid("a0533211-cf52-4ab5-a172-3dc7d94276d1"))
/* dual interface */ ICentreMarkers;
struct __declspec(uuid("8fe1cada-de72-4a55-b303-eaf1f4748cf6"))
/* dual interface */ ICentreMarker;
struct __declspec(uuid("88427a6b-00af-46e2-9b95-bc8348c2162a"))
/* dual interface */ IRemoteElements;
struct __declspec(uuid("a9d96ce2-9fe4-494e-87b2-20122eac2ae4"))
/* dual interface */ IRemoteElement;
struct __declspec(uuid("c567e700-e163-4c8f-b329-931bb93d0223"))
/* dual interface */ IAxisLines;
struct __declspec(uuid("5c5caebd-70a9-41db-9f74-f9760d822d95"))
/* dual interface */ IAxisLine;
struct __declspec(uuid("c1f0a911-8b4a-48b5-9611-5250d3fc2aca"))
/* dual interface */ IWaveLines;
struct __declspec(uuid("fa2012e1-a983-47d3-9d43-b8dc619ac554"))
/* dual interface */ IWaveLine;
struct __declspec(uuid("2a7eadc0-5e79-4ddb-85d5-e3edb743480d"))
/* dual interface */ IBrokenLines;
struct __declspec(uuid("2482eb44-5625-4fb9-a46b-781426b02510"))
/* dual interface */ IBrokenLine;
struct __declspec(uuid("1f7ed8f6-85da-4b32-9306-31e3daba3f84"))
/* dual interface */ ICircularsCentries;
struct __declspec(uuid("43812a86-37cd-4c6c-ae86-78576ec7e834"))
/* dual interface */ ICircularCentres;
struct __declspec(uuid("e0854ccb-7849-4503-bf8b-f70cf493d59b"))
/* dual interface */ ILinearsCentries;
struct __declspec(uuid("c1e24970-64f0-4689-a3ab-cc34698378dc"))
/* dual interface */ ILinearCentres;
struct __declspec(uuid("edb023f6-0862-4cb3-af81-62d784f455b1"))
/* dual interface */ IConditionIntersects;
struct __declspec(uuid("8e844a00-fc0a-47fa-9167-37be6c77d032"))
/* dual interface */ IConditionIntersect;
struct __declspec(uuid("f6ed408a-c2a8-47dd-8ec3-011a7ad60335"))
/* dual interface */ IBreakAngleDimension;
struct __declspec(uuid("c8a55ab3-d6dd-49b8-95f0-716475855c10"))
/* dual interface */ IBranchs;
struct __declspec(uuid("a7419920-06b8-4f34-ac1e-9d48e0ed9dcb"))
/* dual interface */ ILeader;
struct __declspec(uuid("8a5d2a56-ecb6-4151-b1ac-f8548cd668cf"))
/* dual interface */ IMarkLeader;
struct __declspec(uuid("a8227628-4b9c-42c8-ae58-b3716a7ec1af"))
/* dual interface */ IPositionLeader;
struct __declspec(uuid("ccfbe87d-1a3c-4c8b-abe3-1c2319694314"))
/* dual interface */ IChangeLeader;
struct __declspec(uuid("eef8366b-7c8d-448b-9944-be63e82c1543"))
/* dual interface */ IBrandLeader;
struct __declspec(uuid("46e2f216-6bce-4863-9ddc-cc08dc0016f7"))
/* dual interface */ IToleranceParam;
struct __declspec(uuid("aa485b32-ff45-4035-bfc4-aee54e638344"))
/* dual interface */ IContourSegment;
struct __declspec(uuid("fb2432f1-8ae7-4d43-aff2-a3a3be226cfa"))
/* dual interface */ IContourLineSegment;
struct __declspec(uuid("ed4a6d97-4543-4842-b2c3-973fb0e90e87"))
/* dual interface */ IContourArc;
struct __declspec(uuid("3d99b82c-cd88-406d-a946-2d8c8e94ee73"))
/* dual interface */ IInsertionFragment;
struct __declspec(uuid("0c8fc5a9-57a8-4971-8e6c-68933269d42e"))
/* dual interface */ IInsertionView;
struct __declspec(uuid("b43fa13a-9488-422c-a9f3-d279fda296bb"))
/* dual interface */ IInsertionsManager;
struct __declspec(uuid("620cc8eb-a5c0-4978-bd98-38344dc6adc0"))
/* dual interface */ IAxisLineParam;
struct __declspec(uuid("7198c93a-7655-4347-9954-ba9aa28d0608"))
/* dual interface */ IBoundariesObject;
struct __declspec(uuid("0dbd7bcd-f78e-4bda-bcad-3004c60b6d06"))
/* dual interface */ IAnnotativeObject;
struct __declspec(uuid("ae6c238c-4398-4057-9d28-d275954d9506"))
/* dual interface */ IAnnotativeContainer;
struct __declspec(uuid("12b52a99-ff5f-4c08-9e5e-df7c7ad834a8"))
/* dual interface */ ICurveCopyObjectParam;
struct __declspec(uuid("138d1202-ca46-4db3-bf2b-85d260e44355"))
/* dual interface */ ICircleCopyObjectParam;
struct __declspec(uuid("7e553465-7c0d-4e35-b630-d7a54cd4fc2f"))
/* dual interface */ INurbsByPoints;
struct __declspec(uuid("eeb71f69-1c0f-4e73-9d20-523697215e0b"))
/* dual interface */ ITextDocumentSectionsManager;
struct __declspec(uuid("a64be069-8fcb-43f1-ab34-9974dc7fcf5f"))
/* dual interface */ ITextDocumentSection;
struct __declspec(uuid("9d5cde37-7833-4359-b25a-fe7011ea771a"))
/* dual interface */ IExternalTessellationObject;
struct __declspec(uuid("dc21f3d3-ffa6-4274-a976-79f34729b866"))
/* dual interface */ IExternalTessellationManager;
struct __declspec(uuid("c234e81d-4232-41fd-980d-8e7e6ea7b733"))
/* dual interface */ IExternalGDIObject;
struct /* coclass */ KompasDocument;
struct /* coclass */ _Application;
struct /* coclass */ KompasInvisible7;
struct /* coclass */ Documents;
struct /* coclass */ DocumentFrame;
struct /* coclass */ DocumentFrames;
struct /* coclass */ ProcessParam;
struct /* coclass */ PropertyControls;
struct /* coclass */ PropertyTab;
struct /* coclass */ PropertyTabs;
struct /* coclass */ PropertyEdit;
struct /* coclass */ PropertySeparator;
struct /* coclass */ PropertyList;
struct /* coclass */ PropertyCheckBox;
struct /* coclass */ PropertyMultiButton;
struct /* coclass */ PropertySlideBox;
struct /* coclass */ PropertyUserControl;
struct /* coclass */ PropertyGrid;
struct /* coclass */ PropertyManager;
struct /* coclass */ KompasDocument3D;
struct /* coclass */ DrawingDocument;
struct /* coclass */ FragmentDocument;
struct /* coclass */ SpecificationDocument;
struct /* coclass */ TextDocument;
struct /* coclass */ PartDocument;
struct /* coclass */ AssemblyDocument;
struct /* coclass */ PropertyTextButton;
struct /* coclass */ PropertySpinEdit;
struct /* coclass */ ViewsAndLayersManager;
struct /* coclass */ DrawingObject;
struct /* coclass */ DrawingObjects;
struct /* coclass */ Views;
struct /* coclass */ View;
struct /* coclass */ AssociationView;
struct /* coclass */ LayerGroups;
struct /* coclass */ LayerGroup;
struct /* coclass */ Layers;
struct /* coclass */ Layer;
struct /* coclass */ LayerFilterCondition;
struct /* coclass */ LayerFilterConditions;
struct /* coclass */ DocumentSettings;
struct /* coclass */ Document2DSettings;
struct /* coclass */ LibraryManager;
struct /* coclass */ ProceduresLibrary;
struct /* coclass */ Procedures;
struct /* coclass */ Procedure;
struct /* coclass */ InsertsLibrary;
struct /* coclass */ Inserts;
struct /* coclass */ Insert;
struct /* coclass */ InsertsLibraries;
struct /* coclass */ ProceduresLibraries;
struct /* coclass */ SpecificationDescriptions;
struct /* coclass */ SpecificationDescription;
struct /* coclass */ SpecificationStyle;
struct /* coclass */ SpecificationColumnStyles;
struct /* coclass */ SpecificationColumnStyle;
struct /* coclass */ SpecificationSectionStyles;
struct /* coclass */ SpecificationSectionStyle;
struct /* coclass */ AdditionalBlockStyles;
struct /* coclass */ AdditionalBlockStyle;
struct /* coclass */ SheetFormat;
struct /* coclass */ SpecificationTuning;
struct /* coclass */ SpecificationTuningSections;
struct /* coclass */ SpecificationTuningSection;
struct /* coclass */ SpecificationSubsections;
struct /* coclass */ SpecificationSubsection;
struct /* coclass */ AdditionalBlockTunings;
struct /* coclass */ AdditionalBlockTuning;
struct /* coclass */ AdditionalBlockSectionTunings;
struct /* coclass */ AdditionalBlockSectionTuning;
struct /* coclass */ TextFont;
struct /* coclass */ TextStyle;
struct /* coclass */ Tabulators;
struct /* coclass */ Tabulator;
struct /* coclass */ KompasError;
struct /* coclass */ SpecificationBaseObjects;
struct /* coclass */ SpecificationCommentObjects;
struct /* coclass */ SpecificationObject;
struct /* coclass */ SpecificationBaseObject;
struct /* coclass */ SpecificationCommentObject;
struct /* coclass */ SpecificationColumns;
struct /* coclass */ SpecificationColumn;
struct /* coclass */ SpecificationColumnItems;
struct /* coclass */ SpecificationColumnItem;
struct /* coclass */ AttachedDocuments;
struct /* coclass */ AttachedDocument;
struct /* coclass */ PropertyFileName;
struct /* coclass */ PropertyColor;
struct /* coclass */ LayoutSheets;
struct /* coclass */ LayoutSheet;
struct /* coclass */ Converter;
struct /* coclass */ CheckSum;
struct /* coclass */ ModelObject;
struct /* coclass */ ModelObjects;
struct /* coclass */ Parts7;
struct /* coclass */ Part7;
struct /* coclass */ Sketchs;
struct /* coclass */ Extrusions;
struct /* coclass */ VariableTable;
struct /* coclass */ ProgressBarIndicator;
struct /* coclass */ Text;
struct /* coclass */ TextLine;
struct /* coclass */ TextItem;
struct /* coclass */ DrawingText;
struct /* coclass */ DrawingTexts;
struct /* coclass */ Marks;
struct /* coclass */ MarkInsideForm;
struct /* coclass */ MarkOnLine;
struct /* coclass */ MarkOnLeader;
struct /* coclass */ UserDataStoragesMng;
struct /* coclass */ UserDataStorages;
struct /* coclass */ UserDataStorage;
struct /* coclass */ BuildingAxes;
struct /* coclass */ StraightAxis;
struct /* coclass */ ArcAxis;
struct /* coclass */ CircleAxis;
struct /* coclass */ AxisJut;
struct /* coclass */ MarkNodes;
struct /* coclass */ MarkNode;
struct /* coclass */ LineSegments;
struct /* coclass */ LineSegment;
struct /* coclass */ SystemSettings;
struct /* coclass */ CutUnitMarking;
struct /* coclass */ CutUnitMarkings;
struct /* coclass */ UnitMarking;
struct /* coclass */ UnitMarkings;
struct /* coclass */ Arcs;
struct /* coclass */ _Arc;
struct /* coclass */ MultiTextLeader;
struct /* coclass */ MultiTextLeaders;
struct /* coclass */ Brace;
struct /* coclass */ Braces;
struct /* coclass */ UnitNumber;
struct /* coclass */ UnitNumbers;
struct /* coclass */ Sketch;
struct /* coclass */ Extrusion;
struct /* coclass */ ParametriticConstraint;
struct /* coclass */ CutExtrusion;
struct /* coclass */ Body7;
struct /* coclass */ SheetMetalBodies;
struct /* coclass */ SheetMetalBody;
struct /* coclass */ Points3D;
struct /* coclass */ Point3D;
struct /* coclass */ Point3DParamDisplace;
struct /* coclass */ Point3DParamIntersect;
struct /* coclass */ Point3DParamCenter;
struct /* coclass */ Point3DParamCurve;
struct /* coclass */ Point3DParamSurface;
struct /* coclass */ Point3DParamProjection;
struct /* coclass */ SheetMetalBends;
struct /* coclass */ SheetMetalBend;
struct /* coclass */ SheetMetalLineBends;
struct /* coclass */ SheetMetalLineBend;
struct /* coclass */ SheetMetalHole;
struct /* coclass */ SheetMetalHoles;
struct /* coclass */ SheetMetalCut;
struct /* coclass */ SheetMetalCuts;
struct /* coclass */ RadialDimension;
struct /* coclass */ RadialDimensions;
struct /* coclass */ BreakRadialDimension;
struct /* coclass */ RadialBreakDimensions;
struct /* coclass */ DiametralDimension;
struct /* coclass */ DiametralDimensions;
struct /* coclass */ LineDimensions3D;
struct /* coclass */ BaseLineDimension3D;
struct /* coclass */ LineDimension3D;
struct /* coclass */ LineDimension;
struct /* coclass */ LineDimensions;
struct /* coclass */ RadialDimension3D;
struct /* coclass */ DiametralDimension3D;
struct /* coclass */ RadialDimensions3D;
struct /* coclass */ DiametralDimensions3D;
struct /* coclass */ BreakLineDimension;
struct /* coclass */ BreakLineDimensions;
struct /* coclass */ HeightDimension;
struct /* coclass */ HeightDimensions;
struct /* coclass */ AngleDimension;
struct /* coclass */ AngleDimensions;
struct /* coclass */ BreakAngleDimension;
struct /* coclass */ ArcDimension;
struct /* coclass */ ArcDimensions;
struct /* coclass */ AngleDimension3D;
struct /* coclass */ AngleDimensions3D;
struct /* coclass */ CurveVertexParam;
struct /* coclass */ Splines3D;
struct /* coclass */ Spline3D;
struct /* coclass */ LocalCoordinateSystem;
struct /* coclass */ LocalCoordinateSystems;
struct /* coclass */ LocalCSAxesDirectionParam;
struct /* coclass */ LocalCSEulerParam;
struct /* coclass */ PolyLine;
struct /* coclass */ PolyLines;
struct /* coclass */ BaseLeader;
struct /* coclass */ Leaders;
struct /* coclass */ Roughs;
struct /* coclass */ Rough;
struct /* coclass */ BaseLeader3D;
struct /* coclass */ Leaders3D;
struct /* coclass */ Rough3D;
struct /* coclass */ Roughs3D;
struct /* coclass */ _Base;
struct /* coclass */ Bases;
struct /* coclass */ TableCell;
struct /* coclass */ DrawingTable;
struct /* coclass */ DrawingTables;
struct /* coclass */ Tolerances;
struct /* coclass */ _Tolerance;
struct /* coclass */ Bases3D;
struct /* coclass */ Base3D;
struct /* coclass */ Tolerances3D;
struct /* coclass */ Tolerance3D;
struct /* coclass */ LocalCSOrientByObjectParam;
struct /* coclass */ CutLine;
struct /* coclass */ CutLines;
struct /* coclass */ ExternalTessellationObject;
struct /* coclass */ ControlPoints;
struct /* coclass */ ControlPoint;
struct /* coclass */ ConjunctivePoints;
struct /* coclass */ ConjunctivePoint;
struct /* coclass */ PropertyBmpList;
struct /* coclass */ ViewPointer;
struct /* coclass */ ViewPointers;
struct /* coclass */ Multiline;
struct /* coclass */ Multilines;
struct /* coclass */ Contour;
struct /* coclass */ ContourSegment;
struct /* coclass */ ContourLineSegment;
struct /* coclass */ ContourArc;
struct /* coclass */ Curve2D;
struct /* coclass */ DrawingContours;
struct /* coclass */ DrawingContour;
struct /* coclass */ SplitLines;
struct /* coclass */ SplitLine;
struct /* coclass */ SurfacePatches;
struct /* coclass */ SurfacePatch;
struct /* coclass */ FaceRemovers;
struct /* coclass */ FaceRemover;
struct /* coclass */ SurfaceSewers;
struct /* coclass */ SurfaceSewer;
struct /* coclass */ NurbsSurfaces;
struct /* coclass */ NurbsSurface;
struct /* coclass */ PropertyLibExplorer;
struct /* coclass */ ExternalGDIObject;
struct /* coclass */ Circles;
struct /* coclass */ _Circle;
struct /* coclass */ MacroObjects;
struct /* coclass */ MacroObject;
struct /* coclass */ Ellipses;
struct /* coclass */ _Ellipse;
struct /* coclass */ EllipseArcs;
struct /* coclass */ _EllipseArc;
struct /* coclass */ _Point;
struct /* coclass */ Points;
struct /* coclass */ _Line;
struct /* coclass */ Lines;
struct /* coclass */ _Bezier;
struct /* coclass */ Beziers;
struct /* coclass */ Rectangles;
struct /* coclass */ _Rectangle;
struct /* coclass */ RegularPolygons;
struct /* coclass */ RegularPolygon;
struct /* coclass */ InsertionObjects;
struct /* coclass */ InsertionView;
struct /* coclass */ InsertionDefinition;
struct /* coclass */ PolyLine2D;
struct /* coclass */ PolyLines2D;
struct /* coclass */ Equidistants;
struct /* coclass */ _Equidistant;
struct /* coclass */ _Nurbs;
struct /* coclass */ Nurbses;
struct /* coclass */ CentreMarkers;
struct /* coclass */ CentreMarker;
struct /* coclass */ RemoteElement;
struct /* coclass */ RemoteElements;
struct /* coclass */ _Attribute;
struct /* coclass */ _ColumnInfo;
struct /* coclass */ _AttributeType;
struct /* coclass */ AxisLine;
struct /* coclass */ AxisLines;
struct /* coclass */ Variable7;
struct /* coclass */ InsertionParameters;
struct /* coclass */ DrawingGroup;
struct /* coclass */ DrawingGroups;
struct /* coclass */ _Hatch;
struct /* coclass */ _Colouring;
struct /* coclass */ Hatches;
struct /* coclass */ Colourings;
struct /* coclass */ _SpecRough;
struct /* coclass */ TechnicalDemand;
struct /* coclass */ _Raster;
struct /* coclass */ Rasters;
struct /* coclass */ OleDrawingObject;
struct /* coclass */ OleDrawingObjects;
struct /* coclass */ SelectionManager;
struct /* coclass */ ChooseManager;
struct /* coclass */ SurfacesIntersectionCurve;
struct /* coclass */ SurfacesIntersectionCurves;
struct /* coclass */ _Stamp;
struct /* coclass */ WaveLine;
struct /* coclass */ WaveLines;
struct /* coclass */ BrokenLine;
struct /* coclass */ BrokenLines;
struct /* coclass */ PropertyStyleList;
struct /* coclass */ _CopyObjectParam;
struct /* coclass */ CurveCopyObjectParam;
struct /* coclass */ CircleCopyObjectParam;
struct __declspec(uuid("a5b8e337-ee84-4eec-8235-a812fdd6c2de"))
/* dual interface */ ICircularCopyObjectParam;
struct /* coclass */ CircularCopyObjectParam;
struct __declspec(uuid("592ab214-a8cf-462e-acd5-528839113338"))
/* dual interface */ IMeshCopyObjectParam;
struct /* coclass */ MeshCopyObjectParam;
struct /* coclass */ PrintJob;
struct /* coclass */ PrintJob_Sheet;
struct /* coclass */ _Property;
struct /* coclass */ LibArraySettings;
struct /* coclass */ ReportProcess;
struct /* coclass */ Equidistants3D;
struct /* coclass */ Equidistant3D;
struct /* coclass */ TrimmedCurve;
struct /* coclass */ TrimmedCurves;
struct /* coclass */ TrimmedSurfaces;
struct /* coclass */ TrimmedSurface;
struct /* coclass */ FeaturePatterns;
struct /* coclass */ LinearPattern;
struct /* coclass */ RuledSurface;
struct /* coclass */ RuledSurfaces;
struct /* coclass */ Vector3D;
struct /* coclass */ ExtensionSurface;
struct /* coclass */ ExtensionSurfaces;
struct /* coclass */ EquidistantSurface;
struct /* coclass */ EquidistantSurfaces;
struct /* coclass */ PointDrivenPattern;
struct /* coclass */ CircularPattern;
struct /* coclass */ PathPattern;
struct /* coclass */ Vector3DBy2VertexesParameters;
struct /* coclass */ MirrorPattern;
struct /* coclass */ Vector3DByCoefficientsParameters;
struct /* coclass */ Vector3DBy2AnglesParameters;
struct /* coclass */ Vector3DByLocalCSParameters;
struct /* coclass */ Vector3DByObjectParameters;
struct /* coclass */ Vector3DAlongSurfaceNormalParameters;
struct /* coclass */ Vector3DByCurveParameters;
struct /* coclass */ Vector3DByScreenNormalParameters;
struct /* coclass */ DerivedPattern;
struct /* coclass */ LocalCoordinateSystems2D;
struct /* coclass */ LocalCoordinateSystem2D;
struct /* coclass */ ConnectCurve;
struct /* coclass */ ConnectCurves;
struct /* coclass */ FilletCurve;
struct /* coclass */ FilletCurves;
struct /* coclass */ SurfaceThickening;
struct /* coclass */ SurfaceThickenings;
struct /* coclass */ _Arc3D;
struct /* coclass */ Arcs3D;
struct __declspec(uuid("e1ac2948-6191-4240-85f4-5a32321e9d46"))
/* dual interface */ IPropertyOpticalProps;
struct /* coclass */ PropertyOpticalProps;
struct __declspec(uuid("3fbf29aa-5691-4e7b-be08-2025f29f018e"))
/* dual interface */ IPropertyEditCheckBox;
struct __declspec(uuid("efe5b123-174f-4cb0-ae85-7f291fa8ae1b"))
/* dual interface */ ITablePattern;
struct /* coclass */ TablePattern;
struct /* coclass */ Rotateds;
struct /* coclass */ Rotated;
struct /* coclass */ CutRotated;
struct /* coclass */ RotatedSurface;
struct /* coclass */ ExtrusionSurface;
struct /* coclass */ Point3DParamBySphere;
struct /* coclass */ Point3DParamByCylinder;
struct /* coclass */ MeshPointsSurface;
struct /* coclass */ MeshPointsSurfaces;
struct /* coclass */ CloudPointsSurface;
struct /* coclass */ CloudPointsSurfaces;
struct /* coclass */ ImportedSurface;
struct /* coclass */ ImportedSurfaces;
struct __declspec(uuid("65989bdb-ab09-4cc5-a1dc-6dfb5e5c6496"))
/* dual interface */ ICopyObjectParam1;
struct /* coclass */ Scaling3D;
struct /* coclass */ Scalings3D;
struct /* coclass */ CurveOutLine;
struct /* coclass */ CurveOutLines;
struct /* coclass */ CurveByLaw;
struct /* coclass */ CurveByLaws;
struct /* coclass */ TextTable;
struct /* coclass */ LoadCombinationsParam;
struct /* coclass */ OpenDocumentParam;
struct /* coclass */ IsoparametricCurve;
struct /* coclass */ IsoparametricCurves;
struct /* coclass */ IsoparametricCurvesSet;
struct /* coclass */ IsoparametricCurvesSets;
struct /* coclass */ SplineOnSurface;
struct /* coclass */ SplinesOnSurfaces;
struct /* coclass */ CurveBy2Projections;
struct /* coclass */ CurvesBy2Projectionses;
struct /* coclass */ ProjectionCurve;
struct /* coclass */ ProjectionCurves;
struct /* coclass */ Contour3D;
struct /* coclass */ Contours3D;
struct /* coclass */ LineSegment3D;
struct /* coclass */ LineSegments3D;
struct /* coclass */ UnhistoredCurve3D;
struct /* coclass */ UnhistoredCurves3D;
struct /* coclass */ TechnicalDemand3D;
struct /* coclass */ Embodiment;
struct __declspec(uuid("7f3eebf4-9277-4603-ad0a-c8de1624f444"))
/* dual interface */ INewPartDocumentSettings;
struct __declspec(uuid("60ddc74b-8171-4ba6-abd9-549fba84e7b0"))
/* dual interface */ IModelObject1;
struct /* coclass */ Spirals3D;
struct /* coclass */ ConicSpiral3D;
struct /* coclass */ CylindricSpiral3D;
struct /* coclass */ PointsArrOnCurve;
struct /* coclass */ PointsArrsOnCurves;
struct /* coclass */ PointsArrOnSurface;
struct /* coclass */ PointsArrsOnSurfaces;
struct /* coclass */ PointsArrFromFile;
struct /* coclass */ PointsArrsFromFiles;
struct /* coclass */ MathCurve3D;
struct /* coclass */ Axis3D;
struct __declspec(uuid("453b98c0-91d6-415b-8c96-ce924f6e3211"))
/* dual interface */ IAxis3D1;
struct /* coclass */ Axes3D;
struct /* coclass */ Axis3DBy2Points;
struct /* coclass */ Axis3DBy2Planes;
struct /* coclass */ Axis3DByConeface;
struct /* coclass */ Axis3DByEdge;
struct /* coclass */ Axis3DByPointAndObject;
struct /* coclass */ Axis3DByOperation;
struct /* coclass */ MathSurface3D;
struct /* coclass */ Planes3D;
struct /* coclass */ Plane3D;
struct __declspec(uuid("de4efb36-cf27-4dbc-90cb-7128c3903654"))
/* dual interface */ IPlane3D1;
struct /* coclass */ Plane3DByPlaneCurve;
struct /* coclass */ Plane3DTangentToFaceInPoint;
struct /* coclass */ Plane3DByOffset;
struct /* coclass */ Plane3DBy3Points;
struct /* coclass */ Plane3DByAngle;
struct /* coclass */ Plane3DByEdgeAndPoint;
struct /* coclass */ Plane3DParallelByPoint;
struct /* coclass */ Plane3DPerpendicularByEdge;
struct /* coclass */ Plane3DNormalToSurface;
struct /* coclass */ Plane3DMiddle;
struct /* coclass */ Plane3DByEdgeAndPlane;
struct /* coclass */ Plane3DBy2Edge;
struct /* coclass */ Plane3DTangentToFace;
struct /* coclass */ Report;
struct /* coclass */ ReportStyle;
struct /* coclass */ AssociationTables;
struct /* coclass */ AssociationTable;
struct /* coclass */ ReportStyleColumn;
struct /* coclass */ ReportParam;
struct /* coclass */ UserFolders;
struct /* coclass */ UserFolder;
struct /* coclass */ UserDesignationCompObj;
struct /* coclass */ UserObject3D;
struct /* coclass */ UserObjects3D;
struct /* coclass */ Serializer;
struct /* coclass */ Placement3D;
struct /* coclass */ Document3DSettings;
struct /* coclass */ Layer3D;
struct /* coclass */ Layers3D;
struct /* coclass */ LayerGroup3D;
struct /* coclass */ LayerGroups3D;
struct /* coclass */ Document3DManager;
struct /* coclass */ ToleranceRecalc;
struct /* coclass */ SpecRough3D;
struct /* coclass */ BilletObsolete;
struct /* coclass */ BilletsObsoletes;
struct /* coclass */ CopyGeometry;
struct /* coclass */ CopiesGeometry;
struct /* coclass */ CollectionGeometry;
struct /* coclass */ CollectionsGeometry;
struct /* coclass */ Thread;
struct /* coclass */ Threads;
struct /* coclass */ PropertyGroupBegin;
struct /* coclass */ PropertyGroupEnd;
struct /* coclass */ Process2D;
struct /* coclass */ Phantom2D;
struct /* coclass */ Process3D;
struct /* coclass */ ThreadPattern;
struct /* coclass */ PropertyTwinSwitcher;
struct /* coclass */ ThreadDialogParam;
struct /* coclass */ PropertyPoint3D;
struct /* coclass */ MateConstraint3D;
struct /* coclass */ Mate3DByAngle;
struct /* coclass */ Mate3DByTangent;
struct /* coclass */ Mate3DSymmetry;
struct /* coclass */ Mate3DTransmission;
struct /* coclass */ Mate3DCamGear;
struct __declspec(uuid("698a8f34-5759-4fec-afef-c8b29d072e12"))
/* dual interface */ IMate3DDependentPosition;
struct /* coclass */ Mate3DDependentPosition;
struct /* coclass */ PropertyPreviewText;
struct /* coclass */ PropertyAggregateControl;
struct /* coclass */ Hole3D;
struct /* coclass */ Holes3D;
struct /* coclass */ PropertyBasePoint;
struct __declspec(uuid("4be1ac9d-61f2-4305-95d5-2ed6c2b21a6a"))
/* dual interface */ IPropertyLinkButton;
struct /* coclass */ PropertyLinkButton;
struct /* coclass */ CountersinkHole3DParameters;
struct /* coclass */ SpotfacingHoleParameters;
struct /* coclass */ CountersinkSpotfacingHoleParameters;
struct /* coclass */ ConicHoleParameters;
struct /* coclass */ PropertyMarking;
struct /* coclass */ Chamfer;
struct /* coclass */ Chamfers;
struct /* coclass */ Fillet;
struct /* coclass */ Fillets;
struct /* coclass */ Incline;
struct /* coclass */ Inclines;
struct /* coclass */ Rib;
struct /* coclass */ Ribs;
struct /* coclass */ _Shell;
struct /* coclass */ Shells;
struct /* coclass */ _Boolean;
struct /* coclass */ Booleans;
struct /* coclass */ Cut;
struct /* coclass */ Cuts;
struct /* coclass */ Loft;
struct /* coclass */ Lofts;
struct /* coclass */ Coupling;
struct /* coclass */ Evolution;
struct /* coclass */ Evolutions;
struct /* coclass */ Vertex;
struct /* coclass */ Edge;
struct /* coclass */ Face;
struct /* coclass */ Loop7;
struct /* coclass */ OrientedEdge7;
struct /* coclass */ UnionComponents;
struct /* coclass */ UnionsComponents;
struct /* coclass */ MoldCavity;
struct /* coclass */ MoldCavities;
struct /* coclass */ MacroObject3D;
struct /* coclass */ MacroObjects3D;
struct /* coclass */ NurbsSurfaceByCurvesMesh;
struct /* coclass */ NurbsSurfacesByCurvesMeshs;
struct /* coclass */ JointSurface;
struct /* coclass */ JointSurfaces;
struct /* coclass */ BodyReposition;
struct /* coclass */ BodyRepositions;
struct /* coclass */ DistanceAngleMeasurement3D;
struct /* coclass */ DistanceAngleMeasurements3D;
struct /* coclass */ EdgeLengthMeasurement3D;
struct /* coclass */ EdgeLengthMeasurements3D;
struct /* coclass */ AreaMeasurement3D;
struct /* coclass */ AreaMeasurements3D;
struct /* coclass */ SheetMetalSketchBend;
struct /* coclass */ SheetMetalSketchBends;
struct /* coclass */ SheetMetalClosedCorner;
struct /* coclass */ SheetMetalClosedCorners;
struct /* coclass */ SheetMetalPlate;
struct /* coclass */ SheetMetalPlates;
struct /* coclass */ SheetMetalBendedStraighten;
struct /* coclass */ SheetMetalBendedStraightens;
struct /* coclass */ SheetMetalShoulder;
struct /* coclass */ SheetMetalShoulders;
struct /* coclass */ SheetMetalJalousie;
struct /* coclass */ SheetMetalJalousies;
struct /* coclass */ SheetMetalPressForming;
struct /* coclass */ SheetMetalPressFormings;
struct __declspec(uuid("468578bc-beaf-4053-aed9-4e10c48305c1"))
/* dual interface */ IProductDataManager;
struct __declspec(uuid("619a7499-13da-4c43-ad1b-53acaa4ba5b4"))
/* dual interface */ IMeshObject3D;
struct /* coclass */ MeshObject3D;
struct /* coclass */ ContentDialogParam;
struct /* coclass */ SheetMetalRib;
struct /* coclass */ SheetMetalRibs;
struct __declspec(uuid("d92a7102-79cb-46d8-b18a-1804d71f5416"))
/* dual interface */ ISheetMetalRuledShell;
struct __declspec(uuid("934bcc92-bc49-4a46-9a88-70fd2e74537d"))
/* dual interface */ ISheetMetalLinearRuledShell;
struct /* coclass */ LibraryHoleParameters;
struct /* coclass */ ConicCurve;
struct /* coclass */ ConicCurves;
struct /* coclass */ CircularCentres;
struct /* coclass */ CircularsCentries;
struct /* coclass */ LinearCentres;
struct /* coclass */ LinearsCentries;
struct /* coclass */ FullFillet;
struct /* coclass */ FullFillets;
struct /* coclass */ Zone;
struct /* coclass */ ZoneDivision;
struct /* coclass */ ZonesManager;
struct __declspec(uuid("c24eb4cb-ce63-4130-ae76-86de33a8ddd0"))
/* dual interface */ IZoneParametersByBorderPoints;
struct /* coclass */ ZoneParametersByBorderPoints;
struct /* coclass */ ZoneParametersByObjects;
struct /* coclass */ ZoneDivisionParametersRegular;
struct /* coclass */ ZoneDivisionParametersByPlanes;
struct /* coclass */ DynamicCrossSectionStep;
struct /* coclass */ DynamicCrossSection;
struct /* coclass */ DynamicCrossSectionStepParametersByFreePlane;
struct /* coclass */ DynamicCrossSectionStepParametersByOffsetPlane;
struct /* coclass */ DynamicCrossSectionStepParametersByRotatedPlane;
struct /* coclass */ DynamicCrossSectionStepParametersByZone;
struct __declspec(uuid("d8a8bcbb-e337-431b-ac37-07007217190b"))
/* dual interface */ IDynamicCrossSectionStepParametersByBorderPoints;
struct /* coclass */ DynamicCrossSectionStepParametersByBorderPoints;
struct /* coclass */ AxisLine3D;
struct /* coclass */ FindObjectParameters;
struct __declspec(uuid("e0c4d376-8503-4fc1-8442-794ec7f26364"))
/* dispinterface */ ksFindObjectParametersNotify;
struct /* coclass */ Manipulators;
struct __declspec(uuid("46597352-925c-4d1b-89e3-6868d54fafe6"))
/* dual interface */ IPlacement3DManipulator;
struct /* coclass */ Placement3DManipulator;
struct /* coclass */ EditDoubleManipulator;
struct /* coclass */ MouseEnterLeaveParameters7;
struct /* coclass */ RestoredSurface;
struct /* coclass */ RestoredSurfaces;
struct /* coclass */ Styles;
struct /* coclass */ CurveStyle;
struct /* coclass */ HatchStyle;
struct __declspec(uuid("742aa7cc-8019-4854-a8ff-9ee1ffbd0460"))
/* dual interface */ IApplicationLicenseManager;
struct __declspec(uuid("be4ba098-99b4-4c27-912b-3ad83a04e543"))
/* dual interface */ IPLMObject;
struct __declspec(uuid("95615543-48e9-4738-9b01-d8abc2c9001b"))
/* dual interface */ IPLMObjectsManager;
struct __declspec(uuid("4fb26621-6a86-43ff-bb61-af1b04afd22b"))
/* dual interface */ IMultiThicknessGroupsManager;
struct /* coclass */ ConditionIntersect;
struct /* coclass */ ConditionIntersects;
struct /* coclass */ TextDocumentSectionsManager;
struct /* coclass */ TextDocumentSection;
struct /* coclass */ TexturesParam;
struct /* coclass */ WireFrame3D;
struct /* coclass */ WireFrames3D;
struct __declspec(uuid("ee36cadb-07d1-457a-8d7c-1d2d4b240cf3"))
/* dual interface */ IApplicationServises;
struct /* coclass */ DismantleStep;
struct __declspec(uuid("23a5dfee-5e95-4f8d-9cae-805e707f1ef8"))
/* dual interface */ IProcessWithVariables;
struct /* coclass */ SaveAsDetailParam;
struct __declspec(uuid("480a9539-f347-4b46-bdfb-7323aea5bb37"))
/* dual interface */ IContextPanel;
struct /* coclass */ SpecificationObjectCreateParam;
struct __declspec(uuid("92b07ad7-89a8-4d65-987a-0e31d82bc075"))
/* dual interface */ IDimension3D;
struct /* coclass */ FindObject3DParameters;
struct /* coclass */ NumericGroup;
struct /* coclass */ ArcDimension3D;
struct /* coclass */ ArcDimensions3D;
struct /* coclass */ SheetMetalPunch;
struct /* coclass */ SheetMetalPunchs;
struct /* coclass */ FaceMovers;
struct /* coclass */ FaceMover;
struct /* coclass */ DocumentSettings1;
struct /* coclass */ _FormatLabelRules;
struct /* coclass */ SplitSolid;
struct /* coclass */ SplitSolids;
struct __declspec(uuid("d025b2c1-1b75-4266-9f73-8bcfa17ca552"))
/* dual interface */ IDimension2D;
struct __declspec(uuid("b6c0160a-54b2-404e-9667-c7bd278972ed"))
/* dual interface */ IDesignation3D;
struct __declspec(uuid("2843869b-82a0-4cac-91df-abf553ea8a89"))
/* dual interface */ IDesignation2D;
struct /* coclass */ RasterConvertParameters;
struct __declspec(uuid("70b41905-610e-4340-8239-5717aab0fb2d"))
/* dual interface */ ILineSegmentAndPointDimension;
struct __declspec(uuid("544803be-9cf8-4c45-b76f-554ccfd35fb4"))
/* dual interface */ IAdditionConvertParameters;
struct /* coclass */ AdditionConvertParameters;
struct __declspec(uuid("409ce413-1ffa-4e20-b79a-62bfd87efad4"))
/* dual interface */ ISystemTemplatesSettings;
struct /* coclass */ ModelText;
struct /* coclass */ ModelTexts;
struct /* coclass */ ModelTable;
struct /* coclass */ ModelTables;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(ISaveAsDetailParam, __uuidof(ISaveAsDetailParam));
_COM_SMARTPTR_TYPEDEF(IHatchParam, __uuidof(IHatchParam));
_COM_SMARTPTR_TYPEDEF(IDimensionParams, __uuidof(IDimensionParams));
_COM_SMARTPTR_TYPEDEF(ILoadCombination, __uuidof(ILoadCombination));
_COM_SMARTPTR_TYPEDEF(IFrameTreesManager, __uuidof(IFrameTreesManager));
_COM_SMARTPTR_TYPEDEF(IPrintJob_OutputParameters, __uuidof(IPrintJob_OutputParameters));
_COM_SMARTPTR_TYPEDEF(IPrintJob_PrinterSettings, __uuidof(IPrintJob_PrinterSettings));
_COM_SMARTPTR_TYPEDEF(ISaveToPreviusParam7, __uuidof(ISaveToPreviusParam7));
_COM_SMARTPTR_TYPEDEF(IUserMetadataManager, __uuidof(IUserMetadataManager));
_COM_SMARTPTR_TYPEDEF(IIntervalVariable, __uuidof(IIntervalVariable));
_COM_SMARTPTR_TYPEDEF(IReportFilter, __uuidof(IReportFilter));
_COM_SMARTPTR_TYPEDEF(IReportObjectsFilter, __uuidof(IReportObjectsFilter));
_COM_SMARTPTR_TYPEDEF(IReportParam, __uuidof(IReportParam));
_COM_SMARTPTR_TYPEDEF(IPropertyControl1, __uuidof(IPropertyControl1));
_COM_SMARTPTR_TYPEDEF(IPropertyToolBar, __uuidof(IPropertyToolBar));
_COM_SMARTPTR_TYPEDEF(IProcessInfoWindow, __uuidof(IProcessInfoWindow));
_COM_SMARTPTR_TYPEDEF(IProcessContextIconMenu, __uuidof(IProcessContextIconMenu));
_COM_SMARTPTR_TYPEDEF(IEditDoubleManipulator, __uuidof(IEditDoubleManipulator));
_COM_SMARTPTR_TYPEDEF(IAssociationViewElements, __uuidof(IAssociationViewElements));
_COM_SMARTPTR_TYPEDEF(IBreakViewParam, __uuidof(IBreakViewParam));
_COM_SMARTPTR_TYPEDEF(ITexturesParam, __uuidof(ITexturesParam));
_COM_SMARTPTR_TYPEDEF(IAutoSortObjectsParameters, __uuidof(IAutoSortObjectsParameters));
_COM_SMARTPTR_TYPEDEF(IDrawingDocumentSettings, __uuidof(IDrawingDocumentSettings));
_COM_SMARTPTR_TYPEDEF(IFragmentDocumentSettings, __uuidof(IFragmentDocumentSettings));
_COM_SMARTPTR_TYPEDEF(ILibItemSettings, __uuidof(ILibItemSettings));
_COM_SMARTPTR_TYPEDEF(IColorParam7, __uuidof(IColorParam7));
_COM_SMARTPTR_TYPEDEF(INewDocument3DSettings, __uuidof(INewDocument3DSettings));
_COM_SMARTPTR_TYPEDEF(ISerializer, __uuidof(ISerializer));
_COM_SMARTPTR_TYPEDEF(ICellFormat, __uuidof(ICellFormat));
_COM_SMARTPTR_TYPEDEF(ICellBoundaries, __uuidof(ICellBoundaries));
_COM_SMARTPTR_TYPEDEF(ITableRange, __uuidof(ITableRange));
_COM_SMARTPTR_TYPEDEF(ksPropertyManagerNotify, __uuidof(ksPropertyManagerNotify));
_COM_SMARTPTR_TYPEDEF(ksPropertyUserControlNotify, __uuidof(ksPropertyUserControlNotify));
_COM_SMARTPTR_TYPEDEF(ksDocumentFrameNotify, __uuidof(ksDocumentFrameNotify));
_COM_SMARTPTR_TYPEDEF(IPaintObject, __uuidof(IPaintObject));
_COM_SMARTPTR_TYPEDEF(ksGLObject, __uuidof(ksGLObject));
_COM_SMARTPTR_TYPEDEF(IGabaritObject, __uuidof(IGabaritObject));
_COM_SMARTPTR_TYPEDEF(ksDrawingObjectNotify, __uuidof(ksDrawingObjectNotify));
_COM_SMARTPTR_TYPEDEF(ksViewsAndLayersManagerNotify, __uuidof(ksViewsAndLayersManagerNotify));
_COM_SMARTPTR_TYPEDEF(ksLibraryManagerNotify, __uuidof(ksLibraryManagerNotify));
_COM_SMARTPTR_TYPEDEF(ksSpecificationDescriptionNotify, __uuidof(ksSpecificationDescriptionNotify));
_COM_SMARTPTR_TYPEDEF(ksSpecificationObjectNotify, __uuidof(ksSpecificationObjectNotify));
_COM_SMARTPTR_TYPEDEF(ksLayoutSheetsNotify, __uuidof(ksLayoutSheetsNotify));
_COM_SMARTPTR_TYPEDEF(ksModelObjectNotify, __uuidof(ksModelObjectNotify));
_COM_SMARTPTR_TYPEDEF(ksDocument3DNotify7, __uuidof(ksDocument3DNotify7));
_COM_SMARTPTR_TYPEDEF(ksProcess2DNotify, __uuidof(ksProcess2DNotify));
_COM_SMARTPTR_TYPEDEF(ksProcess3DNotify, __uuidof(ksProcess3DNotify));
_COM_SMARTPTR_TYPEDEF(IModelObjectNotifyResult, __uuidof(IModelObjectNotifyResult));
_COM_SMARTPTR_TYPEDEF(ksContentDialogNotify, __uuidof(ksContentDialogNotify));
_COM_SMARTPTR_TYPEDEF(ksProcess3DManipulatorsNotify, __uuidof(ksProcess3DManipulatorsNotify));
_COM_SMARTPTR_TYPEDEF(ksPLMObjectNotify, __uuidof(ksPLMObjectNotify));
_COM_SMARTPTR_TYPEDEF(ksFindObject3DParametersNotify, __uuidof(ksFindObject3DParametersNotify));
_COM_SMARTPTR_TYPEDEF(IMassInertiaParam7, __uuidof(IMassInertiaParam7));
_COM_SMARTPTR_TYPEDEF(IThinParameters, __uuidof(IThinParameters));
_COM_SMARTPTR_TYPEDEF(IChooseBodies7, __uuidof(IChooseBodies7));
_COM_SMARTPTR_TYPEDEF(IChooseObjects, __uuidof(IChooseObjects));
_COM_SMARTPTR_TYPEDEF(ISourcePart7Params, __uuidof(ISourcePart7Params));
_COM_SMARTPTR_TYPEDEF(IModelCurve3D, __uuidof(IModelCurve3D));
_COM_SMARTPTR_TYPEDEF(IRotated1, __uuidof(IRotated1));
_COM_SMARTPTR_TYPEDEF(IUserParameters, __uuidof(IUserParameters));
_COM_SMARTPTR_TYPEDEF(IThreadsParameters, __uuidof(IThreadsParameters));
_COM_SMARTPTR_TYPEDEF(IShellSurface, __uuidof(IShellSurface));
_COM_SMARTPTR_TYPEDEF(ITessellation7, __uuidof(ITessellation7));
_COM_SMARTPTR_TYPEDEF(ISheetMetalUndercut, __uuidof(ISheetMetalUndercut));
_COM_SMARTPTR_TYPEDEF(IBranchs, __uuidof(IBranchs));
_COM_SMARTPTR_TYPEDEF(IAxisLineParam, __uuidof(IAxisLineParam));
_COM_SMARTPTR_TYPEDEF(IBoundariesObject, __uuidof(IBoundariesObject));
_COM_SMARTPTR_TYPEDEF(IAnnotativeObject, __uuidof(IAnnotativeObject));
_COM_SMARTPTR_TYPEDEF(IPropertyEditCheckBox, __uuidof(IPropertyEditCheckBox));
_COM_SMARTPTR_TYPEDEF(ICopyObjectParam1, __uuidof(ICopyObjectParam1));
_COM_SMARTPTR_TYPEDEF(INewPartDocumentSettings, __uuidof(INewPartDocumentSettings));
_COM_SMARTPTR_TYPEDEF(IAxis3D1, __uuidof(IAxis3D1));
_COM_SMARTPTR_TYPEDEF(IPlane3D1, __uuidof(IPlane3D1));
_COM_SMARTPTR_TYPEDEF(ISheetMetalRuledShell, __uuidof(ISheetMetalRuledShell));
_COM_SMARTPTR_TYPEDEF(ksFindObjectParametersNotify, __uuidof(ksFindObjectParametersNotify));
_COM_SMARTPTR_TYPEDEF(IPlacement3DManipulator, __uuidof(IPlacement3DManipulator));
_COM_SMARTPTR_TYPEDEF(IApplicationLicenseManager, __uuidof(IApplicationLicenseManager));
_COM_SMARTPTR_TYPEDEF(IPLMObject, __uuidof(IPLMObject));
_COM_SMARTPTR_TYPEDEF(IPLMObjectsManager, __uuidof(IPLMObjectsManager));
_COM_SMARTPTR_TYPEDEF(IMultiThicknessGroupsManager, __uuidof(IMultiThicknessGroupsManager));
_COM_SMARTPTR_TYPEDEF(IContextPanel, __uuidof(IContextPanel));
_COM_SMARTPTR_TYPEDEF(IDimension3D, __uuidof(IDimension3D));
_COM_SMARTPTR_TYPEDEF(IDimension2D, __uuidof(IDimension2D));
_COM_SMARTPTR_TYPEDEF(IDesignation3D, __uuidof(IDesignation3D));
_COM_SMARTPTR_TYPEDEF(IDesignation2D, __uuidof(IDesignation2D));
_COM_SMARTPTR_TYPEDEF(ISystemTemplatesSettings, __uuidof(ISystemTemplatesSettings));
_COM_SMARTPTR_TYPEDEF(IKompasAPIObject, __uuidof(IKompasAPIObject));
_COM_SMARTPTR_TYPEDEF(IKompasCollection, __uuidof(IKompasCollection));
_COM_SMARTPTR_TYPEDEF(IDocumentFrame, __uuidof(IDocumentFrame));
_COM_SMARTPTR_TYPEDEF(IDocumentFrames, __uuidof(IDocumentFrames));
_COM_SMARTPTR_TYPEDEF(IDocumentSettings, __uuidof(IDocumentSettings));
_COM_SMARTPTR_TYPEDEF(ITextFont, __uuidof(ITextFont));
_COM_SMARTPTR_TYPEDEF(ITabulator, __uuidof(ITabulator));
_COM_SMARTPTR_TYPEDEF(ITabulators, __uuidof(ITabulators));
_COM_SMARTPTR_TYPEDEF(ITextStyle, __uuidof(ITextStyle));
_COM_SMARTPTR_TYPEDEF(ISpecificationSubsection, __uuidof(ISpecificationSubsection));
_COM_SMARTPTR_TYPEDEF(ISpecificationSubsections, __uuidof(ISpecificationSubsections));
_COM_SMARTPTR_TYPEDEF(IAdditionalBlockSectionTuning, __uuidof(IAdditionalBlockSectionTuning));
_COM_SMARTPTR_TYPEDEF(IAdditionalBlockSectionTunings, __uuidof(IAdditionalBlockSectionTunings));
_COM_SMARTPTR_TYPEDEF(IAdditionalBlockTuning, __uuidof(IAdditionalBlockTuning));
_COM_SMARTPTR_TYPEDEF(IAdditionalBlockTunings, __uuidof(IAdditionalBlockTunings));
_COM_SMARTPTR_TYPEDEF(ISpecificationTuningSection, __uuidof(ISpecificationTuningSection));
_COM_SMARTPTR_TYPEDEF(ISpecificationTuningSections, __uuidof(ISpecificationTuningSections));
_COM_SMARTPTR_TYPEDEF(ISpecificationTuning, __uuidof(ISpecificationTuning));
_COM_SMARTPTR_TYPEDEF(ISheetFormat, __uuidof(ISheetFormat));
_COM_SMARTPTR_TYPEDEF(ISpecificationColumnStyle, __uuidof(ISpecificationColumnStyle));
_COM_SMARTPTR_TYPEDEF(ISpecificationColumnStyles, __uuidof(ISpecificationColumnStyles));
_COM_SMARTPTR_TYPEDEF(IAdditionalBlockStyle, __uuidof(IAdditionalBlockStyle));
_COM_SMARTPTR_TYPEDEF(IAdditionalBlockStyles, __uuidof(IAdditionalBlockStyles));
_COM_SMARTPTR_TYPEDEF(ISpecificationSectionStyle, __uuidof(ISpecificationSectionStyle));
_COM_SMARTPTR_TYPEDEF(ISpecificationSectionStyles, __uuidof(ISpecificationSectionStyles));
_COM_SMARTPTR_TYPEDEF(ISpecificationStyle, __uuidof(ISpecificationStyle));
_COM_SMARTPTR_TYPEDEF(ISpecificationColumnItem, __uuidof(ISpecificationColumnItem));
_COM_SMARTPTR_TYPEDEF(ISpecificationColumnItems, __uuidof(ISpecificationColumnItems));
_COM_SMARTPTR_TYPEDEF(ITextItem, __uuidof(ITextItem));
_COM_SMARTPTR_TYPEDEF(ITextLine, __uuidof(ITextLine));
_COM_SMARTPTR_TYPEDEF(ITextTable, __uuidof(ITextTable));
_COM_SMARTPTR_TYPEDEF(IText, __uuidof(IText));
_COM_SMARTPTR_TYPEDEF(ISpecificationColumn, __uuidof(ISpecificationColumn));
_COM_SMARTPTR_TYPEDEF(ISpecificationColumns, __uuidof(ISpecificationColumns));
_COM_SMARTPTR_TYPEDEF(IAttachedDocument, __uuidof(IAttachedDocument));
_COM_SMARTPTR_TYPEDEF(IAttachedDocuments, __uuidof(IAttachedDocuments));
_COM_SMARTPTR_TYPEDEF(ISpecificationObject, __uuidof(ISpecificationObject));
_COM_SMARTPTR_TYPEDEF(ISpecificationObjectCreateParam, __uuidof(ISpecificationObjectCreateParam));
_COM_SMARTPTR_TYPEDEF(IProperty, __uuidof(IProperty));
_COM_SMARTPTR_TYPEDEF(IUserDataStorage, __uuidof(IUserDataStorage));
_COM_SMARTPTR_TYPEDEF(IUserDataStorages, __uuidof(IUserDataStorages));
_COM_SMARTPTR_TYPEDEF(IUserDataStoragesMng, __uuidof(IUserDataStoragesMng));
_COM_SMARTPTR_TYPEDEF(IPropertyKeeper, __uuidof(IPropertyKeeper));
_COM_SMARTPTR_TYPEDEF(IStamp, __uuidof(IStamp));
_COM_SMARTPTR_TYPEDEF(ILayoutSheet, __uuidof(ILayoutSheet));
_COM_SMARTPTR_TYPEDEF(ILayoutSheets, __uuidof(ILayoutSheets));
_COM_SMARTPTR_TYPEDEF(ILoadCombinationsParam, __uuidof(ILoadCombinationsParam));
_COM_SMARTPTR_TYPEDEF(IOpenDocumentParam, __uuidof(IOpenDocumentParam));
_COM_SMARTPTR_TYPEDEF(IPropertyControl, __uuidof(IPropertyControl));
_COM_SMARTPTR_TYPEDEF(IPropertyControls, __uuidof(IPropertyControls));
_COM_SMARTPTR_TYPEDEF(IPropertyTab, __uuidof(IPropertyTab));
_COM_SMARTPTR_TYPEDEF(IPropertyTabs, __uuidof(IPropertyTabs));
_COM_SMARTPTR_TYPEDEF(IProcessParam, __uuidof(IProcessParam));
_COM_SMARTPTR_TYPEDEF(IPropertyManager, __uuidof(IPropertyManager));
_COM_SMARTPTR_TYPEDEF(ILibrary, __uuidof(ILibrary));
_COM_SMARTPTR_TYPEDEF(IProcedure, __uuidof(IProcedure));
_COM_SMARTPTR_TYPEDEF(IProcedures, __uuidof(IProcedures));
_COM_SMARTPTR_TYPEDEF(IProceduresLibrary, __uuidof(IProceduresLibrary));
_COM_SMARTPTR_TYPEDEF(IProceduresLibraries, __uuidof(IProceduresLibraries));
_COM_SMARTPTR_TYPEDEF(IKompasError, __uuidof(IKompasError));
_COM_SMARTPTR_TYPEDEF(IConverter, __uuidof(IConverter));
_COM_SMARTPTR_TYPEDEF(ICheckSum, __uuidof(ICheckSum));
_COM_SMARTPTR_TYPEDEF(IProgressBarIndicator, __uuidof(IProgressBarIndicator));
_COM_SMARTPTR_TYPEDEF(ILibArraySettings, __uuidof(ILibArraySettings));
_COM_SMARTPTR_TYPEDEF(IThreadPattern, __uuidof(IThreadPattern));
_COM_SMARTPTR_TYPEDEF(ISystemSettings, __uuidof(ISystemSettings));
_COM_SMARTPTR_TYPEDEF(ICurve2D, __uuidof(ICurve2D));
_COM_SMARTPTR_TYPEDEF(IMath2D, __uuidof(IMath2D));
_COM_SMARTPTR_TYPEDEF(IPrintJob_Sheet, __uuidof(IPrintJob_Sheet));
_COM_SMARTPTR_TYPEDEF(IPrintJob, __uuidof(IPrintJob));
_COM_SMARTPTR_TYPEDEF(IStyle, __uuidof(IStyle));
_COM_SMARTPTR_TYPEDEF(IStyles, __uuidof(IStyles));
_COM_SMARTPTR_TYPEDEF(IDrawingObject, __uuidof(IDrawingObject));
_COM_SMARTPTR_TYPEDEF(IDrawingObjects, __uuidof(IDrawingObjects));
_COM_SMARTPTR_TYPEDEF(ILayer, __uuidof(ILayer));
_COM_SMARTPTR_TYPEDEF(ILayers, __uuidof(ILayers));
_COM_SMARTPTR_TYPEDEF(IVariable7, __uuidof(IVariable7));
_COM_SMARTPTR_TYPEDEF(IView, __uuidof(IView));
_COM_SMARTPTR_TYPEDEF(IViews, __uuidof(IViews));
_COM_SMARTPTR_TYPEDEF(ILayerFilterCondition, __uuidof(ILayerFilterCondition));
_COM_SMARTPTR_TYPEDEF(ILayerFilterConditions, __uuidof(ILayerFilterConditions));
_COM_SMARTPTR_TYPEDEF(IFeature7, __uuidof(IFeature7));
_COM_SMARTPTR_TYPEDEF(IModelObject, __uuidof(IModelObject));
_COM_SMARTPTR_TYPEDEF(IModelObjects, __uuidof(IModelObjects));
_COM_SMARTPTR_TYPEDEF(IVariableTable, __uuidof(IVariableTable));
_COM_SMARTPTR_TYPEDEF(IPoint3D, __uuidof(IPoint3D));
_COM_SMARTPTR_TYPEDEF(IVector3D, __uuidof(IVector3D));
_COM_SMARTPTR_TYPEDEF(ILocalCoordinateSystem, __uuidof(ILocalCoordinateSystem));
_COM_SMARTPTR_TYPEDEF(IPlacement3D, __uuidof(IPlacement3D));
_COM_SMARTPTR_TYPEDEF(ISpecRough3D, __uuidof(ISpecRough3D));
_COM_SMARTPTR_TYPEDEF(IMateConstraint3D, __uuidof(IMateConstraint3D));
_COM_SMARTPTR_TYPEDEF(IMateConstraints3D, __uuidof(IMateConstraints3D));
_COM_SMARTPTR_TYPEDEF(IBody7, __uuidof(IBody7));
_COM_SMARTPTR_TYPEDEF(IUserFolder, __uuidof(IUserFolder));
_COM_SMARTPTR_TYPEDEF(IUserFolders, __uuidof(IUserFolders));
_COM_SMARTPTR_TYPEDEF(IZone, __uuidof(IZone));
_COM_SMARTPTR_TYPEDEF(IZoneDivision, __uuidof(IZoneDivision));
_COM_SMARTPTR_TYPEDEF(IZonesManager, __uuidof(IZonesManager));
_COM_SMARTPTR_TYPEDEF(ISelectionManager, __uuidof(ISelectionManager));
_COM_SMARTPTR_TYPEDEF(IChooseManager, __uuidof(IChooseManager));
_COM_SMARTPTR_TYPEDEF(IColumnInfo, __uuidof(IColumnInfo));
_COM_SMARTPTR_TYPEDEF(IAttributeType, __uuidof(IAttributeType));
_COM_SMARTPTR_TYPEDEF(IAttribute, __uuidof(IAttribute));
_COM_SMARTPTR_TYPEDEF(ITechnicalDemand3D, __uuidof(ITechnicalDemand3D));
_COM_SMARTPTR_TYPEDEF(IParametriticConstraint, __uuidof(IParametriticConstraint));
_COM_SMARTPTR_TYPEDEF(IDrawingObject1, __uuidof(IDrawingObject1));
_COM_SMARTPTR_TYPEDEF(IRasterConvertParameters, __uuidof(IRasterConvertParameters));
_COM_SMARTPTR_TYPEDEF(IKompasDocument1, __uuidof(IKompasDocument1));
_COM_SMARTPTR_TYPEDEF(IBaseLeader, __uuidof(IBaseLeader));
_COM_SMARTPTR_TYPEDEF(ILeaders, __uuidof(ILeaders));
_COM_SMARTPTR_TYPEDEF(IFindObjectParameters, __uuidof(IFindObjectParameters));
_COM_SMARTPTR_TYPEDEF(IMacroObject, __uuidof(IMacroObject));
_COM_SMARTPTR_TYPEDEF(IDrawingGroup, __uuidof(IDrawingGroup));
_COM_SMARTPTR_TYPEDEF(IDrawingGroups, __uuidof(IDrawingGroups));
_COM_SMARTPTR_TYPEDEF(ICopyObjectParam, __uuidof(ICopyObjectParam));
_COM_SMARTPTR_TYPEDEF(IPhantom2D, __uuidof(IPhantom2D));
_COM_SMARTPTR_TYPEDEF(IProcess2D, __uuidof(IProcess2D));
_COM_SMARTPTR_TYPEDEF(IKompasDocument2D1, __uuidof(IKompasDocument2D1));
_COM_SMARTPTR_TYPEDEF(ILayer3D, __uuidof(ILayer3D));
_COM_SMARTPTR_TYPEDEF(ILayers3D, __uuidof(ILayers3D));
_COM_SMARTPTR_TYPEDEF(IBaseManipulator, __uuidof(IBaseManipulator));
_COM_SMARTPTR_TYPEDEF(IManipulators, __uuidof(IManipulators));
_COM_SMARTPTR_TYPEDEF(IProcess3D, __uuidof(IProcess3D));
_COM_SMARTPTR_TYPEDEF(IFindObject3DParameters, __uuidof(IFindObject3DParameters));
_COM_SMARTPTR_TYPEDEF(ISpecRough, __uuidof(ISpecRough));
_COM_SMARTPTR_TYPEDEF(ITechnicalDemand, __uuidof(ITechnicalDemand));
_COM_SMARTPTR_TYPEDEF(IDimensionText, __uuidof(IDimensionText));
_COM_SMARTPTR_TYPEDEF(IAttrTypeMng, __uuidof(IAttrTypeMng));
_COM_SMARTPTR_TYPEDEF(IStylesManager, __uuidof(IStylesManager));
_COM_SMARTPTR_TYPEDEF(ICurveStyle, __uuidof(ICurveStyle));
_COM_SMARTPTR_TYPEDEF(IHatchStyle, __uuidof(IHatchStyle));
_COM_SMARTPTR_TYPEDEF(IReportStyleColumn, __uuidof(IReportStyleColumn));
_COM_SMARTPTR_TYPEDEF(IReportStyle, __uuidof(IReportStyle));
_COM_SMARTPTR_TYPEDEF(IReportProcess, __uuidof(IReportProcess));
_COM_SMARTPTR_TYPEDEF(INumericGroup, __uuidof(INumericGroup));
_COM_SMARTPTR_TYPEDEF(IReportTable, __uuidof(IReportTable));
_COM_SMARTPTR_TYPEDEF(IPropertyEdit, __uuidof(IPropertyEdit));
_COM_SMARTPTR_TYPEDEF(IPropertySeparator, __uuidof(IPropertySeparator));
_COM_SMARTPTR_TYPEDEF(IPropertyList, __uuidof(IPropertyList));
_COM_SMARTPTR_TYPEDEF(IPropertyCheckBox, __uuidof(IPropertyCheckBox));
_COM_SMARTPTR_TYPEDEF(IPropertyMultiButton, __uuidof(IPropertyMultiButton));
_COM_SMARTPTR_TYPEDEF(IPropertySlideBox, __uuidof(IPropertySlideBox));
_COM_SMARTPTR_TYPEDEF(IPropertyUserControl, __uuidof(IPropertyUserControl));
_COM_SMARTPTR_TYPEDEF(IPropertyGrid, __uuidof(IPropertyGrid));
_COM_SMARTPTR_TYPEDEF(IPropertyTextButton, __uuidof(IPropertyTextButton));
_COM_SMARTPTR_TYPEDEF(IPropertySpinEdit, __uuidof(IPropertySpinEdit));
_COM_SMARTPTR_TYPEDEF(IPropertyFileName, __uuidof(IPropertyFileName));
_COM_SMARTPTR_TYPEDEF(IPropertyColor, __uuidof(IPropertyColor));
_COM_SMARTPTR_TYPEDEF(IPropertyEditList, __uuidof(IPropertyEditList));
_COM_SMARTPTR_TYPEDEF(IPropertyBmpList, __uuidof(IPropertyBmpList));
_COM_SMARTPTR_TYPEDEF(IPropertyLibExplorer, __uuidof(IPropertyLibExplorer));
_COM_SMARTPTR_TYPEDEF(IPropertyStyleList, __uuidof(IPropertyStyleList));
_COM_SMARTPTR_TYPEDEF(IPropertyGroupBegin, __uuidof(IPropertyGroupBegin));
_COM_SMARTPTR_TYPEDEF(IPropertyGroupEnd, __uuidof(IPropertyGroupEnd));
_COM_SMARTPTR_TYPEDEF(IPropertyTwinSwitcher, __uuidof(IPropertyTwinSwitcher));
_COM_SMARTPTR_TYPEDEF(IPropertyPoint3D, __uuidof(IPropertyPoint3D));
_COM_SMARTPTR_TYPEDEF(IPropertyPreviewText, __uuidof(IPropertyPreviewText));
_COM_SMARTPTR_TYPEDEF(IPropertyAggregateControl, __uuidof(IPropertyAggregateControl));
_COM_SMARTPTR_TYPEDEF(IProcessContextPanel, __uuidof(IProcessContextPanel));
_COM_SMARTPTR_TYPEDEF(IPropertyBasePoint, __uuidof(IPropertyBasePoint));
_COM_SMARTPTR_TYPEDEF(IPropertyMarking, __uuidof(IPropertyMarking));
_COM_SMARTPTR_TYPEDEF(IProcess, __uuidof(IProcess));
_COM_SMARTPTR_TYPEDEF(IMouseEnterLeaveParameters7, __uuidof(IMouseEnterLeaveParameters7));
_COM_SMARTPTR_TYPEDEF(IPropertyReplaceList, __uuidof(IPropertyReplaceList));
_COM_SMARTPTR_TYPEDEF(IViewDesignation, __uuidof(IViewDesignation));
_COM_SMARTPTR_TYPEDEF(ICutViewParam, __uuidof(ICutViewParam));
_COM_SMARTPTR_TYPEDEF(ILocalCoordinateSystem2D, __uuidof(ILocalCoordinateSystem2D));
_COM_SMARTPTR_TYPEDEF(ILocalCoordinateSystems2D, __uuidof(ILocalCoordinateSystems2D));
_COM_SMARTPTR_TYPEDEF(IView1, __uuidof(IView1));
_COM_SMARTPTR_TYPEDEF(IAutoNumerationManager, __uuidof(IAutoNumerationManager));
_COM_SMARTPTR_TYPEDEF(IDocument2DSettings, __uuidof(IDocument2DSettings));
_COM_SMARTPTR_TYPEDEF(IDocument3DSettings, __uuidof(IDocument3DSettings));
_COM_SMARTPTR_TYPEDEF(IThreadDialogParam, __uuidof(IThreadDialogParam));
_COM_SMARTPTR_TYPEDEF(IContentDialogParam, __uuidof(IContentDialogParam));
_COM_SMARTPTR_TYPEDEF(IApplicationDialogs, __uuidof(IApplicationDialogs));
_COM_SMARTPTR_TYPEDEF(IFormatLabelRules, __uuidof(IFormatLabelRules));
_COM_SMARTPTR_TYPEDEF(IDocumentSettings1, __uuidof(IDocumentSettings1));
_COM_SMARTPTR_TYPEDEF(IHypertextReferenceParam, __uuidof(IHypertextReferenceParam));
_COM_SMARTPTR_TYPEDEF(ITableCell, __uuidof(ITableCell));
_COM_SMARTPTR_TYPEDEF(ITable, __uuidof(ITable));
_COM_SMARTPTR_TYPEDEF(IKompasDocument3DNotifyResult, __uuidof(IKompasDocument3DNotifyResult));
_COM_SMARTPTR_TYPEDEF(IPoints3D, __uuidof(IPoints3D));
_COM_SMARTPTR_TYPEDEF(IFeaturePattern, __uuidof(IFeaturePattern));
_COM_SMARTPTR_TYPEDEF(IFeaturePatterns, __uuidof(IFeaturePatterns));
_COM_SMARTPTR_TYPEDEF(ISurfaceThickening, __uuidof(ISurfaceThickening));
_COM_SMARTPTR_TYPEDEF(ISurfaceThickenings, __uuidof(ISurfaceThickenings));
_COM_SMARTPTR_TYPEDEF(IRotated, __uuidof(IRotated));
_COM_SMARTPTR_TYPEDEF(IRotateds, __uuidof(IRotateds));
_COM_SMARTPTR_TYPEDEF(IScaling3D, __uuidof(IScaling3D));
_COM_SMARTPTR_TYPEDEF(IScalings3D, __uuidof(IScalings3D));
_COM_SMARTPTR_TYPEDEF(IBilletObsolete, __uuidof(IBilletObsolete));
_COM_SMARTPTR_TYPEDEF(IBilletsObsoletes, __uuidof(IBilletsObsoletes));
_COM_SMARTPTR_TYPEDEF(ICollectionGeometry, __uuidof(ICollectionGeometry));
_COM_SMARTPTR_TYPEDEF(ICollectionsGeometry, __uuidof(ICollectionsGeometry));
_COM_SMARTPTR_TYPEDEF(IUserObject3D, __uuidof(IUserObject3D));
_COM_SMARTPTR_TYPEDEF(IUserObjects3D, __uuidof(IUserObjects3D));
_COM_SMARTPTR_TYPEDEF(IThread, __uuidof(IThread));
_COM_SMARTPTR_TYPEDEF(IHole3D, __uuidof(IHole3D));
_COM_SMARTPTR_TYPEDEF(IHoles3D, __uuidof(IHoles3D));
_COM_SMARTPTR_TYPEDEF(IChamfer, __uuidof(IChamfer));
_COM_SMARTPTR_TYPEDEF(IChamfers, __uuidof(IChamfers));
_COM_SMARTPTR_TYPEDEF(IFillet, __uuidof(IFillet));
_COM_SMARTPTR_TYPEDEF(IFillets, __uuidof(IFillets));
_COM_SMARTPTR_TYPEDEF(IIncline, __uuidof(IIncline));
_COM_SMARTPTR_TYPEDEF(IInclines, __uuidof(IInclines));
_COM_SMARTPTR_TYPEDEF(IShell, __uuidof(IShell));
_COM_SMARTPTR_TYPEDEF(IShells, __uuidof(IShells));
_COM_SMARTPTR_TYPEDEF(IBoolean, __uuidof(IBoolean));
_COM_SMARTPTR_TYPEDEF(IBooleans, __uuidof(IBooleans));
_COM_SMARTPTR_TYPEDEF(ICut, __uuidof(ICut));
_COM_SMARTPTR_TYPEDEF(ICuts, __uuidof(ICuts));
_COM_SMARTPTR_TYPEDEF(ICoupling, __uuidof(ICoupling));
_COM_SMARTPTR_TYPEDEF(ILoft, __uuidof(ILoft));
_COM_SMARTPTR_TYPEDEF(ILofts, __uuidof(ILofts));
_COM_SMARTPTR_TYPEDEF(IEvolution, __uuidof(IEvolution));
_COM_SMARTPTR_TYPEDEF(IEvolutions, __uuidof(IEvolutions));
_COM_SMARTPTR_TYPEDEF(IUnionComponents, __uuidof(IUnionComponents));
_COM_SMARTPTR_TYPEDEF(IUnionsComponents, __uuidof(IUnionsComponents));
_COM_SMARTPTR_TYPEDEF(IMoldCavity, __uuidof(IMoldCavity));
_COM_SMARTPTR_TYPEDEF(IMoldCavities, __uuidof(IMoldCavities));
_COM_SMARTPTR_TYPEDEF(IMacroObject3D, __uuidof(IMacroObject3D));
_COM_SMARTPTR_TYPEDEF(IMacroObjects3D, __uuidof(IMacroObjects3D));
_COM_SMARTPTR_TYPEDEF(IBodyReposition, __uuidof(IBodyReposition));
_COM_SMARTPTR_TYPEDEF(IBodyRepositions, __uuidof(IBodyRepositions));
_COM_SMARTPTR_TYPEDEF(IFullFillet, __uuidof(IFullFillet));
_COM_SMARTPTR_TYPEDEF(IFullFillets, __uuidof(IFullFillets));
_COM_SMARTPTR_TYPEDEF(IWireFrame3D, __uuidof(IWireFrame3D));
_COM_SMARTPTR_TYPEDEF(IWireFrames3D, __uuidof(IWireFrames3D));
_COM_SMARTPTR_TYPEDEF(ISplitSolid, __uuidof(ISplitSolid));
_COM_SMARTPTR_TYPEDEF(ISplitSolids, __uuidof(ISplitSolids));
_COM_SMARTPTR_TYPEDEF(IExtrusion1, __uuidof(IExtrusion1));
_COM_SMARTPTR_TYPEDEF(ISheetMetalBend, __uuidof(ISheetMetalBend));
_COM_SMARTPTR_TYPEDEF(ISheetMetalBends, __uuidof(ISheetMetalBends));
_COM_SMARTPTR_TYPEDEF(ISheetMetalLineBend, __uuidof(ISheetMetalLineBend));
_COM_SMARTPTR_TYPEDEF(ISheetMetalLineBends, __uuidof(ISheetMetalLineBends));
_COM_SMARTPTR_TYPEDEF(ISheetMetalSketchBend, __uuidof(ISheetMetalSketchBend));
_COM_SMARTPTR_TYPEDEF(ISheetMetalSketchBends, __uuidof(ISheetMetalSketchBends));
_COM_SMARTPTR_TYPEDEF(ISheetMetalClosedCorner, __uuidof(ISheetMetalClosedCorner));
_COM_SMARTPTR_TYPEDEF(ISheetMetalClosedCorners, __uuidof(ISheetMetalClosedCorners));
_COM_SMARTPTR_TYPEDEF(ISheetMetalPlate, __uuidof(ISheetMetalPlate));
_COM_SMARTPTR_TYPEDEF(ISheetMetalPlates, __uuidof(ISheetMetalPlates));
_COM_SMARTPTR_TYPEDEF(ISheetMetalBendedStraighten, __uuidof(ISheetMetalBendedStraighten));
_COM_SMARTPTR_TYPEDEF(ISheetMetalBendedStraightens, __uuidof(ISheetMetalBendedStraightens));
_COM_SMARTPTR_TYPEDEF(ISheetMetalBendUnfoldParameters, __uuidof(ISheetMetalBendUnfoldParameters));
_COM_SMARTPTR_TYPEDEF(ISheetMetalPressForming, __uuidof(ISheetMetalPressForming));
_COM_SMARTPTR_TYPEDEF(ISheetMetalPressFormings, __uuidof(ISheetMetalPressFormings));
_COM_SMARTPTR_TYPEDEF(ISheetMetalShoulder, __uuidof(ISheetMetalShoulder));
_COM_SMARTPTR_TYPEDEF(ISheetMetalShoulders, __uuidof(ISheetMetalShoulders));
_COM_SMARTPTR_TYPEDEF(ISheetMetalJalousie, __uuidof(ISheetMetalJalousie));
_COM_SMARTPTR_TYPEDEF(ISheetMetalJalousies, __uuidof(ISheetMetalJalousies));
_COM_SMARTPTR_TYPEDEF(ISheetMetalRib, __uuidof(ISheetMetalRib));
_COM_SMARTPTR_TYPEDEF(ISheetMetalRibs, __uuidof(ISheetMetalRibs));
_COM_SMARTPTR_TYPEDEF(ISheetMetalPunch, __uuidof(ISheetMetalPunch));
_COM_SMARTPTR_TYPEDEF(ISheetMetalPunchs, __uuidof(ISheetMetalPunchs));
_COM_SMARTPTR_TYPEDEF(IPoint3DParamDisplace, __uuidof(IPoint3DParamDisplace));
_COM_SMARTPTR_TYPEDEF(IPoint3DParamIntersect, __uuidof(IPoint3DParamIntersect));
_COM_SMARTPTR_TYPEDEF(IPoint3DParamCenter, __uuidof(IPoint3DParamCenter));
_COM_SMARTPTR_TYPEDEF(IPoint3DParamCurve, __uuidof(IPoint3DParamCurve));
_COM_SMARTPTR_TYPEDEF(IPoint3DParamSurface, __uuidof(IPoint3DParamSurface));
_COM_SMARTPTR_TYPEDEF(IPoint3DParamProjection, __uuidof(IPoint3DParamProjection));
_COM_SMARTPTR_TYPEDEF(IBaseLineDimension3D, __uuidof(IBaseLineDimension3D));
_COM_SMARTPTR_TYPEDEF(ILineDimensions3D, __uuidof(ILineDimensions3D));
_COM_SMARTPTR_TYPEDEF(IRadialDimension3D, __uuidof(IRadialDimension3D));
_COM_SMARTPTR_TYPEDEF(IRadialDimensions3D, __uuidof(IRadialDimensions3D));
_COM_SMARTPTR_TYPEDEF(IDiametralDimension3D, __uuidof(IDiametralDimension3D));
_COM_SMARTPTR_TYPEDEF(IDiametralDimensions3D, __uuidof(IDiametralDimensions3D));
_COM_SMARTPTR_TYPEDEF(IAngleDimension3D, __uuidof(IAngleDimension3D));
_COM_SMARTPTR_TYPEDEF(IAngleDimensions3D, __uuidof(IAngleDimensions3D));
_COM_SMARTPTR_TYPEDEF(IBaseLeader3D, __uuidof(IBaseLeader3D));
_COM_SMARTPTR_TYPEDEF(ILeaders3D, __uuidof(ILeaders3D));
_COM_SMARTPTR_TYPEDEF(IRough3D, __uuidof(IRough3D));
_COM_SMARTPTR_TYPEDEF(IRoughs3D, __uuidof(IRoughs3D));
_COM_SMARTPTR_TYPEDEF(IBase3D, __uuidof(IBase3D));
_COM_SMARTPTR_TYPEDEF(IBases3D, __uuidof(IBases3D));
_COM_SMARTPTR_TYPEDEF(ITolerance3D, __uuidof(ITolerance3D));
_COM_SMARTPTR_TYPEDEF(ITolerances3D, __uuidof(ITolerances3D));
_COM_SMARTPTR_TYPEDEF(IThreads, __uuidof(IThreads));
_COM_SMARTPTR_TYPEDEF(IArcDimension3D, __uuidof(IArcDimension3D));
_COM_SMARTPTR_TYPEDEF(IArcDimensions3D, __uuidof(IArcDimensions3D));
_COM_SMARTPTR_TYPEDEF(IModelText, __uuidof(IModelText));
_COM_SMARTPTR_TYPEDEF(IModelTexts, __uuidof(IModelTexts));
_COM_SMARTPTR_TYPEDEF(IModelTable, __uuidof(IModelTable));
_COM_SMARTPTR_TYPEDEF(IModelTables, __uuidof(IModelTables));
_COM_SMARTPTR_TYPEDEF(ISymbols3DContainer, __uuidof(ISymbols3DContainer));
_COM_SMARTPTR_TYPEDEF(ILineDimension3D, __uuidof(ILineDimension3D));
_COM_SMARTPTR_TYPEDEF(ICurveVertexParam, __uuidof(ICurveVertexParam));
_COM_SMARTPTR_TYPEDEF(ISpline3D, __uuidof(ISpline3D));
_COM_SMARTPTR_TYPEDEF(ISplines3D, __uuidof(ISplines3D));
_COM_SMARTPTR_TYPEDEF(ILocalCoordinateSystems, __uuidof(ILocalCoordinateSystems));
_COM_SMARTPTR_TYPEDEF(IPolyLine, __uuidof(IPolyLine));
_COM_SMARTPTR_TYPEDEF(IPolyLines, __uuidof(IPolyLines));
_COM_SMARTPTR_TYPEDEF(IControlPoint, __uuidof(IControlPoint));
_COM_SMARTPTR_TYPEDEF(IControlPoints, __uuidof(IControlPoints));
_COM_SMARTPTR_TYPEDEF(IConjunctivePoint, __uuidof(IConjunctivePoint));
_COM_SMARTPTR_TYPEDEF(IConjunctivePoints, __uuidof(IConjunctivePoints));
_COM_SMARTPTR_TYPEDEF(ISurfacesIntersectionCurve, __uuidof(ISurfacesIntersectionCurve));
_COM_SMARTPTR_TYPEDEF(ISurfacesIntersectionCurves, __uuidof(ISurfacesIntersectionCurves));
_COM_SMARTPTR_TYPEDEF(IEquidistant3D, __uuidof(IEquidistant3D));
_COM_SMARTPTR_TYPEDEF(IEquidistants3D, __uuidof(IEquidistants3D));
_COM_SMARTPTR_TYPEDEF(ITrimmedCurve, __uuidof(ITrimmedCurve));
_COM_SMARTPTR_TYPEDEF(ITrimmedCurves, __uuidof(ITrimmedCurves));
_COM_SMARTPTR_TYPEDEF(IConnectCurve, __uuidof(IConnectCurve));
_COM_SMARTPTR_TYPEDEF(IConnectCurves, __uuidof(IConnectCurves));
_COM_SMARTPTR_TYPEDEF(IFilletCurve, __uuidof(IFilletCurve));
_COM_SMARTPTR_TYPEDEF(IFilletCurves, __uuidof(IFilletCurves));
_COM_SMARTPTR_TYPEDEF(IArc3D, __uuidof(IArc3D));
_COM_SMARTPTR_TYPEDEF(IArcs3D, __uuidof(IArcs3D));
_COM_SMARTPTR_TYPEDEF(ICurveOutLine, __uuidof(ICurveOutLine));
_COM_SMARTPTR_TYPEDEF(ICurveOutLines, __uuidof(ICurveOutLines));
_COM_SMARTPTR_TYPEDEF(ICurveByLaw, __uuidof(ICurveByLaw));
_COM_SMARTPTR_TYPEDEF(ICurveByLaws, __uuidof(ICurveByLaws));
_COM_SMARTPTR_TYPEDEF(IIsoparametricCurve, __uuidof(IIsoparametricCurve));
_COM_SMARTPTR_TYPEDEF(IIsoparametricCurves, __uuidof(IIsoparametricCurves));
_COM_SMARTPTR_TYPEDEF(IIsoparametricCurvesSet, __uuidof(IIsoparametricCurvesSet));
_COM_SMARTPTR_TYPEDEF(IIsoparametricCurvesSets, __uuidof(IIsoparametricCurvesSets));
_COM_SMARTPTR_TYPEDEF(ISplineOnSurface, __uuidof(ISplineOnSurface));
_COM_SMARTPTR_TYPEDEF(ISplinesOnSurfaces, __uuidof(ISplinesOnSurfaces));
_COM_SMARTPTR_TYPEDEF(IProjectionCurve, __uuidof(IProjectionCurve));
_COM_SMARTPTR_TYPEDEF(IProjectionCurves, __uuidof(IProjectionCurves));
_COM_SMARTPTR_TYPEDEF(ICurveBy2Projections, __uuidof(ICurveBy2Projections));
_COM_SMARTPTR_TYPEDEF(ICurvesBy2Projectionses, __uuidof(ICurvesBy2Projectionses));
_COM_SMARTPTR_TYPEDEF(IContour3D, __uuidof(IContour3D));
_COM_SMARTPTR_TYPEDEF(IContours3D, __uuidof(IContours3D));
_COM_SMARTPTR_TYPEDEF(ILineSegment3D, __uuidof(ILineSegment3D));
_COM_SMARTPTR_TYPEDEF(ILineSegments3D, __uuidof(ILineSegments3D));
_COM_SMARTPTR_TYPEDEF(IUnhistoredCurve3D, __uuidof(IUnhistoredCurve3D));
_COM_SMARTPTR_TYPEDEF(IUnhistoredCurves3D, __uuidof(IUnhistoredCurves3D));
_COM_SMARTPTR_TYPEDEF(IPointsArrOnCurve, __uuidof(IPointsArrOnCurve));
_COM_SMARTPTR_TYPEDEF(IPointsArrsOnCurves, __uuidof(IPointsArrsOnCurves));
_COM_SMARTPTR_TYPEDEF(IPointsArrOnSurface, __uuidof(IPointsArrOnSurface));
_COM_SMARTPTR_TYPEDEF(IPointsArrsOnSurfaces, __uuidof(IPointsArrsOnSurfaces));
_COM_SMARTPTR_TYPEDEF(IPointsArrFromFile, __uuidof(IPointsArrFromFile));
_COM_SMARTPTR_TYPEDEF(IPointsArrsFromFiles, __uuidof(IPointsArrsFromFiles));
_COM_SMARTPTR_TYPEDEF(IMathCurve3D, __uuidof(IMathCurve3D));
_COM_SMARTPTR_TYPEDEF(IAxis3D, __uuidof(IAxis3D));
_COM_SMARTPTR_TYPEDEF(IAxes3D, __uuidof(IAxes3D));
_COM_SMARTPTR_TYPEDEF(IMathSurface3D, __uuidof(IMathSurface3D));
_COM_SMARTPTR_TYPEDEF(IPlane3D, __uuidof(IPlane3D));
_COM_SMARTPTR_TYPEDEF(IPlanes3D, __uuidof(IPlanes3D));
_COM_SMARTPTR_TYPEDEF(ILocalCSAxesDirectionParam, __uuidof(ILocalCSAxesDirectionParam));
_COM_SMARTPTR_TYPEDEF(ILocalCSEulerParam, __uuidof(ILocalCSEulerParam));
_COM_SMARTPTR_TYPEDEF(IRoughParams, __uuidof(IRoughParams));
_COM_SMARTPTR_TYPEDEF(IBranchs3D, __uuidof(IBranchs3D));
_COM_SMARTPTR_TYPEDEF(ILocalCSOrientByObjectParam, __uuidof(ILocalCSOrientByObjectParam));
_COM_SMARTPTR_TYPEDEF(ILocalCSObject, __uuidof(ILocalCSObject));
_COM_SMARTPTR_TYPEDEF(ISurfacePatch, __uuidof(ISurfacePatch));
_COM_SMARTPTR_TYPEDEF(ISurfacePatches, __uuidof(ISurfacePatches));
_COM_SMARTPTR_TYPEDEF(IFaceRemover, __uuidof(IFaceRemover));
_COM_SMARTPTR_TYPEDEF(IFaceRemovers, __uuidof(IFaceRemovers));
_COM_SMARTPTR_TYPEDEF(ISurfaceSewer, __uuidof(ISurfaceSewer));
_COM_SMARTPTR_TYPEDEF(ISurfaceSewers, __uuidof(ISurfaceSewers));
_COM_SMARTPTR_TYPEDEF(INurbsSurface, __uuidof(INurbsSurface));
_COM_SMARTPTR_TYPEDEF(INurbsSurfaces, __uuidof(INurbsSurfaces));
_COM_SMARTPTR_TYPEDEF(IRuledSurface, __uuidof(IRuledSurface));
_COM_SMARTPTR_TYPEDEF(IRuledSurfaces, __uuidof(IRuledSurfaces));
_COM_SMARTPTR_TYPEDEF(IEquidistantSurface, __uuidof(IEquidistantSurface));
_COM_SMARTPTR_TYPEDEF(IEquidistantSurfaces, __uuidof(IEquidistantSurfaces));
_COM_SMARTPTR_TYPEDEF(ITrimmedSurface, __uuidof(ITrimmedSurface));
_COM_SMARTPTR_TYPEDEF(ITrimmedSurfaces, __uuidof(ITrimmedSurfaces));
_COM_SMARTPTR_TYPEDEF(IExtensionSurface, __uuidof(IExtensionSurface));
_COM_SMARTPTR_TYPEDEF(IExtensionSurfaces, __uuidof(IExtensionSurfaces));
_COM_SMARTPTR_TYPEDEF(IMeshPointsSurface, __uuidof(IMeshPointsSurface));
_COM_SMARTPTR_TYPEDEF(IMeshPointsSurfaces, __uuidof(IMeshPointsSurfaces));
_COM_SMARTPTR_TYPEDEF(ICloudPointsSurface, __uuidof(ICloudPointsSurface));
_COM_SMARTPTR_TYPEDEF(ICloudPointsSurfaces, __uuidof(ICloudPointsSurfaces));
_COM_SMARTPTR_TYPEDEF(IImportedSurface, __uuidof(IImportedSurface));
_COM_SMARTPTR_TYPEDEF(IImportedSurfaces, __uuidof(IImportedSurfaces));
_COM_SMARTPTR_TYPEDEF(INurbsSurfaceByCurvesMesh, __uuidof(INurbsSurfaceByCurvesMesh));
_COM_SMARTPTR_TYPEDEF(INurbsSurfacesByCurvesMeshs, __uuidof(INurbsSurfacesByCurvesMeshs));
_COM_SMARTPTR_TYPEDEF(IJointSurface, __uuidof(IJointSurface));
_COM_SMARTPTR_TYPEDEF(IJointSurfaces, __uuidof(IJointSurfaces));
_COM_SMARTPTR_TYPEDEF(IRestoredSurface, __uuidof(IRestoredSurface));
_COM_SMARTPTR_TYPEDEF(IRestoredSurfaces, __uuidof(IRestoredSurfaces));
_COM_SMARTPTR_TYPEDEF(IFaceMover, __uuidof(IFaceMover));
_COM_SMARTPTR_TYPEDEF(IFaceMovers, __uuidof(IFaceMovers));
_COM_SMARTPTR_TYPEDEF(ILinearPattern, __uuidof(ILinearPattern));
_COM_SMARTPTR_TYPEDEF(IPointDrivenPattern, __uuidof(IPointDrivenPattern));
_COM_SMARTPTR_TYPEDEF(ICircularPattern, __uuidof(ICircularPattern));
_COM_SMARTPTR_TYPEDEF(IPathPattern, __uuidof(IPathPattern));
_COM_SMARTPTR_TYPEDEF(IDerivedPattern, __uuidof(IDerivedPattern));
_COM_SMARTPTR_TYPEDEF(IVector3DBy2VertexesParameters, __uuidof(IVector3DBy2VertexesParameters));
_COM_SMARTPTR_TYPEDEF(IMirrorPattern, __uuidof(IMirrorPattern));
_COM_SMARTPTR_TYPEDEF(IVector3DByCoefficientsParameters, __uuidof(IVector3DByCoefficientsParameters));
_COM_SMARTPTR_TYPEDEF(IVector3DBy2AnglesParameters, __uuidof(IVector3DBy2AnglesParameters));
_COM_SMARTPTR_TYPEDEF(IVector3DByLocalCSParameters, __uuidof(IVector3DByLocalCSParameters));
_COM_SMARTPTR_TYPEDEF(IVector3DByObjectParameters, __uuidof(IVector3DByObjectParameters));
_COM_SMARTPTR_TYPEDEF(IVector3DAlongSurfaceNormalParameters, __uuidof(IVector3DAlongSurfaceNormalParameters));
_COM_SMARTPTR_TYPEDEF(IVector3DByCurveParameters, __uuidof(IVector3DByCurveParameters));
_COM_SMARTPTR_TYPEDEF(IVector3DByScreenNormalParameters, __uuidof(IVector3DByScreenNormalParameters));
_COM_SMARTPTR_TYPEDEF(ICutRotated, __uuidof(ICutRotated));
_COM_SMARTPTR_TYPEDEF(IRotatedSurface, __uuidof(IRotatedSurface));
_COM_SMARTPTR_TYPEDEF(IPoint3DParamBySphere, __uuidof(IPoint3DParamBySphere));
_COM_SMARTPTR_TYPEDEF(IPoint3DParamByCylinder, __uuidof(IPoint3DParamByCylinder));
_COM_SMARTPTR_TYPEDEF(IMeshAroundPointParam, __uuidof(IMeshAroundPointParam));
_COM_SMARTPTR_TYPEDEF(IAxis3DBy2Points, __uuidof(IAxis3DBy2Points));
_COM_SMARTPTR_TYPEDEF(IAxis3DBy2Planes, __uuidof(IAxis3DBy2Planes));
_COM_SMARTPTR_TYPEDEF(IAxis3DByConeface, __uuidof(IAxis3DByConeface));
_COM_SMARTPTR_TYPEDEF(IAxis3DByEdge, __uuidof(IAxis3DByEdge));
_COM_SMARTPTR_TYPEDEF(IAxis3DByPointAndObject, __uuidof(IAxis3DByPointAndObject));
_COM_SMARTPTR_TYPEDEF(IAxis3DByOperation, __uuidof(IAxis3DByOperation));
_COM_SMARTPTR_TYPEDEF(IPlane3DByPlaneCurve, __uuidof(IPlane3DByPlaneCurve));
_COM_SMARTPTR_TYPEDEF(IPlane3DTangentToFaceInPoint, __uuidof(IPlane3DTangentToFaceInPoint));
_COM_SMARTPTR_TYPEDEF(IPlane3DByOffset, __uuidof(IPlane3DByOffset));
_COM_SMARTPTR_TYPEDEF(IPlane3DBy3Points, __uuidof(IPlane3DBy3Points));
_COM_SMARTPTR_TYPEDEF(IPlane3DByAngle, __uuidof(IPlane3DByAngle));
_COM_SMARTPTR_TYPEDEF(IPlane3DByEdgeAndPoint, __uuidof(IPlane3DByEdgeAndPoint));
_COM_SMARTPTR_TYPEDEF(IPlane3DParallelByPoint, __uuidof(IPlane3DParallelByPoint));
_COM_SMARTPTR_TYPEDEF(IPlane3DPerpendicularByEdge, __uuidof(IPlane3DPerpendicularByEdge));
_COM_SMARTPTR_TYPEDEF(IPlane3DNormalToSurface, __uuidof(IPlane3DNormalToSurface));
_COM_SMARTPTR_TYPEDEF(IPlane3DMiddle, __uuidof(IPlane3DMiddle));
_COM_SMARTPTR_TYPEDEF(IPlane3DByEdgeAndPlane, __uuidof(IPlane3DByEdgeAndPlane));
_COM_SMARTPTR_TYPEDEF(IPlane3DBy2Edge, __uuidof(IPlane3DBy2Edge));
_COM_SMARTPTR_TYPEDEF(IPlane3DTangentToFace, __uuidof(IPlane3DTangentToFace));
_COM_SMARTPTR_TYPEDEF(IToleranceRecalc, __uuidof(IToleranceRecalc));
_COM_SMARTPTR_TYPEDEF(IToleranceRecalcsManager, __uuidof(IToleranceRecalcsManager));
_COM_SMARTPTR_TYPEDEF(IMate3DByAngle, __uuidof(IMate3DByAngle));
_COM_SMARTPTR_TYPEDEF(IMate3DByTangent, __uuidof(IMate3DByTangent));
_COM_SMARTPTR_TYPEDEF(IMate3DSymmetry, __uuidof(IMate3DSymmetry));
_COM_SMARTPTR_TYPEDEF(IMate3DTransmission, __uuidof(IMate3DTransmission));
_COM_SMARTPTR_TYPEDEF(IMate3DCamGear, __uuidof(IMate3DCamGear));
_COM_SMARTPTR_TYPEDEF(ICountersinkHoleParameters, __uuidof(ICountersinkHoleParameters));
_COM_SMARTPTR_TYPEDEF(ISpotfacingHoleParameters, __uuidof(ISpotfacingHoleParameters));
_COM_SMARTPTR_TYPEDEF(ICountersinkSpotfacingHoleParameters, __uuidof(ICountersinkSpotfacingHoleParameters));
_COM_SMARTPTR_TYPEDEF(IConicHoleParameters, __uuidof(IConicHoleParameters));
_COM_SMARTPTR_TYPEDEF(IHoleDisposal, __uuidof(IHoleDisposal));
_COM_SMARTPTR_TYPEDEF(IVertex, __uuidof(IVertex));
_COM_SMARTPTR_TYPEDEF(IFace, __uuidof(IFace));
_COM_SMARTPTR_TYPEDEF(IEdge, __uuidof(IEdge));
_COM_SMARTPTR_TYPEDEF(ILoop7, __uuidof(ILoop7));
_COM_SMARTPTR_TYPEDEF(IOrientedEdge7, __uuidof(IOrientedEdge7));
_COM_SMARTPTR_TYPEDEF(IDistanceAngleMeasurement3D, __uuidof(IDistanceAngleMeasurement3D));
_COM_SMARTPTR_TYPEDEF(IDistanceAngleMeasurements3D, __uuidof(IDistanceAngleMeasurements3D));
_COM_SMARTPTR_TYPEDEF(IEdgeLengthMeasurement3D, __uuidof(IEdgeLengthMeasurement3D));
_COM_SMARTPTR_TYPEDEF(IEdgeLengthMeasurements3D, __uuidof(IEdgeLengthMeasurements3D));
_COM_SMARTPTR_TYPEDEF(IAreaMeasurement3D, __uuidof(IAreaMeasurement3D));
_COM_SMARTPTR_TYPEDEF(IAreaMeasurements3D, __uuidof(IAreaMeasurements3D));
_COM_SMARTPTR_TYPEDEF(IMeasurementContainer, __uuidof(IMeasurementContainer));
_COM_SMARTPTR_TYPEDEF(IUserDesignationCompObj, __uuidof(IUserDesignationCompObj));
_COM_SMARTPTR_TYPEDEF(ILibraryHoleParameters, __uuidof(ILibraryHoleParameters));
_COM_SMARTPTR_TYPEDEF(IZoneParametersByObjects, __uuidof(IZoneParametersByObjects));
_COM_SMARTPTR_TYPEDEF(IZoneDivisionParametersRegular, __uuidof(IZoneDivisionParametersRegular));
_COM_SMARTPTR_TYPEDEF(IZoneDivisionParametersByPlanes, __uuidof(IZoneDivisionParametersByPlanes));
_COM_SMARTPTR_TYPEDEF(IDynamicCrossSectionStep, __uuidof(IDynamicCrossSectionStep));
_COM_SMARTPTR_TYPEDEF(IDynamicCrossSection, __uuidof(IDynamicCrossSection));
_COM_SMARTPTR_TYPEDEF(IDynamicCrossSectionsManager, __uuidof(IDynamicCrossSectionsManager));
_COM_SMARTPTR_TYPEDEF(IDynamicCrossSectionStepParametersByFreePlane, __uuidof(IDynamicCrossSectionStepParametersByFreePlane));
_COM_SMARTPTR_TYPEDEF(IDynamicCrossSectionStepParametersByOffsetPlane, __uuidof(IDynamicCrossSectionStepParametersByOffsetPlane));
_COM_SMARTPTR_TYPEDEF(IDynamicCrossSectionStepParametersByRotatedPlane, __uuidof(IDynamicCrossSectionStepParametersByRotatedPlane));
_COM_SMARTPTR_TYPEDEF(IDynamicCrossSectionStepParametersByZone, __uuidof(IDynamicCrossSectionStepParametersByZone));
_COM_SMARTPTR_TYPEDEF(IAxisLine3D, __uuidof(IAxisLine3D));
_COM_SMARTPTR_TYPEDEF(IDismantleStep, __uuidof(IDismantleStep));
_COM_SMARTPTR_TYPEDEF(IDismantleParameters, __uuidof(IDismantleParameters));
_COM_SMARTPTR_TYPEDEF(IDrawingText, __uuidof(IDrawingText));
_COM_SMARTPTR_TYPEDEF(IDrawingTexts, __uuidof(IDrawingTexts));
_COM_SMARTPTR_TYPEDEF(ILineSegment, __uuidof(ILineSegment));
_COM_SMARTPTR_TYPEDEF(ILineSegments, __uuidof(ILineSegments));
_COM_SMARTPTR_TYPEDEF(IArc, __uuidof(IArc));
_COM_SMARTPTR_TYPEDEF(IArcs, __uuidof(IArcs));
_COM_SMARTPTR_TYPEDEF(IContour, __uuidof(IContour));
_COM_SMARTPTR_TYPEDEF(IMultiline, __uuidof(IMultiline));
_COM_SMARTPTR_TYPEDEF(IMultilines, __uuidof(IMultilines));
_COM_SMARTPTR_TYPEDEF(IDrawingContour, __uuidof(IDrawingContour));
_COM_SMARTPTR_TYPEDEF(IDrawingContours, __uuidof(IDrawingContours));
_COM_SMARTPTR_TYPEDEF(ICircle, __uuidof(ICircle));
_COM_SMARTPTR_TYPEDEF(ICircles, __uuidof(ICircles));
_COM_SMARTPTR_TYPEDEF(IPoint, __uuidof(IPoint));
_COM_SMARTPTR_TYPEDEF(IPoints, __uuidof(IPoints));
_COM_SMARTPTR_TYPEDEF(IBezier, __uuidof(IBezier));
_COM_SMARTPTR_TYPEDEF(IBeziers, __uuidof(IBeziers));
_COM_SMARTPTR_TYPEDEF(IMacroObjects, __uuidof(IMacroObjects));
_COM_SMARTPTR_TYPEDEF(ILine, __uuidof(ILine));
_COM_SMARTPTR_TYPEDEF(ILines, __uuidof(ILines));
_COM_SMARTPTR_TYPEDEF(IPolyLine2D, __uuidof(IPolyLine2D));
_COM_SMARTPTR_TYPEDEF(IPolyLines2D, __uuidof(IPolyLines2D));
_COM_SMARTPTR_TYPEDEF(INurbs, __uuidof(INurbs));
_COM_SMARTPTR_TYPEDEF(INurbses, __uuidof(INurbses));
_COM_SMARTPTR_TYPEDEF(IRaster, __uuidof(IRaster));
_COM_SMARTPTR_TYPEDEF(IRasters, __uuidof(IRasters));
_COM_SMARTPTR_TYPEDEF(IOleDrawingObject, __uuidof(IOleDrawingObject));
_COM_SMARTPTR_TYPEDEF(IOleDrawingObjects, __uuidof(IOleDrawingObjects));
_COM_SMARTPTR_TYPEDEF(IEllipse, __uuidof(IEllipse));
_COM_SMARTPTR_TYPEDEF(IEllipses, __uuidof(IEllipses));
_COM_SMARTPTR_TYPEDEF(IEllipseArc, __uuidof(IEllipseArc));
_COM_SMARTPTR_TYPEDEF(IEllipseArcs, __uuidof(IEllipseArcs));
_COM_SMARTPTR_TYPEDEF(IRectangle, __uuidof(IRectangle));
_COM_SMARTPTR_TYPEDEF(IRectangles, __uuidof(IRectangles));
_COM_SMARTPTR_TYPEDEF(IRegularPolygon, __uuidof(IRegularPolygon));
_COM_SMARTPTR_TYPEDEF(IRegularPolygons, __uuidof(IRegularPolygons));
_COM_SMARTPTR_TYPEDEF(IEquidistant, __uuidof(IEquidistant));
_COM_SMARTPTR_TYPEDEF(IEquidistants, __uuidof(IEquidistants));
_COM_SMARTPTR_TYPEDEF(IHatch, __uuidof(IHatch));
_COM_SMARTPTR_TYPEDEF(IHatches, __uuidof(IHatches));
_COM_SMARTPTR_TYPEDEF(IColouring, __uuidof(IColouring));
_COM_SMARTPTR_TYPEDEF(IColourings, __uuidof(IColourings));
_COM_SMARTPTR_TYPEDEF(IConicCurve, __uuidof(IConicCurve));
_COM_SMARTPTR_TYPEDEF(IConicCurves, __uuidof(IConicCurves));
_COM_SMARTPTR_TYPEDEF(IMark, __uuidof(IMark));
_COM_SMARTPTR_TYPEDEF(IMarks, __uuidof(IMarks));
_COM_SMARTPTR_TYPEDEF(IMarkInsideForm, __uuidof(IMarkInsideForm));
_COM_SMARTPTR_TYPEDEF(IMarkOnLine, __uuidof(IMarkOnLine));
_COM_SMARTPTR_TYPEDEF(IMarkOnLeader, __uuidof(IMarkOnLeader));
_COM_SMARTPTR_TYPEDEF(IAxisJut, __uuidof(IAxisJut));
_COM_SMARTPTR_TYPEDEF(ICutUnitMarking, __uuidof(ICutUnitMarking));
_COM_SMARTPTR_TYPEDEF(ICutUnitMarkings, __uuidof(ICutUnitMarkings));
_COM_SMARTPTR_TYPEDEF(IUnitMarking, __uuidof(IUnitMarking));
_COM_SMARTPTR_TYPEDEF(IUnitMarkings, __uuidof(IUnitMarkings));
_COM_SMARTPTR_TYPEDEF(IMultiTextLeader, __uuidof(IMultiTextLeader));
_COM_SMARTPTR_TYPEDEF(IMultiTextLeaders, __uuidof(IMultiTextLeaders));
_COM_SMARTPTR_TYPEDEF(IUnitNumber, __uuidof(IUnitNumber));
_COM_SMARTPTR_TYPEDEF(IUnitNumbers, __uuidof(IUnitNumbers));
_COM_SMARTPTR_TYPEDEF(IBrace, __uuidof(IBrace));
_COM_SMARTPTR_TYPEDEF(IBraces, __uuidof(IBraces));
_COM_SMARTPTR_TYPEDEF(ICutLine, __uuidof(ICutLine));
_COM_SMARTPTR_TYPEDEF(ICutLines, __uuidof(ICutLines));
_COM_SMARTPTR_TYPEDEF(ILineDimension, __uuidof(ILineDimension));
_COM_SMARTPTR_TYPEDEF(ILineDimensions, __uuidof(ILineDimensions));
_COM_SMARTPTR_TYPEDEF(IRadialDimension, __uuidof(IRadialDimension));
_COM_SMARTPTR_TYPEDEF(IRadialDimensions, __uuidof(IRadialDimensions));
_COM_SMARTPTR_TYPEDEF(IDiametralDimension, __uuidof(IDiametralDimension));
_COM_SMARTPTR_TYPEDEF(IDiametralDimensions, __uuidof(IDiametralDimensions));
_COM_SMARTPTR_TYPEDEF(IAngleDimension, __uuidof(IAngleDimension));
_COM_SMARTPTR_TYPEDEF(IAngleDimensions, __uuidof(IAngleDimensions));
_COM_SMARTPTR_TYPEDEF(IBreakLineDimension, __uuidof(IBreakLineDimension));
_COM_SMARTPTR_TYPEDEF(IBreakLineDimensions, __uuidof(IBreakLineDimensions));
_COM_SMARTPTR_TYPEDEF(IHeightDimension, __uuidof(IHeightDimension));
_COM_SMARTPTR_TYPEDEF(IHeightDimensions, __uuidof(IHeightDimensions));
_COM_SMARTPTR_TYPEDEF(IArcDimension, __uuidof(IArcDimension));
_COM_SMARTPTR_TYPEDEF(IArcDimensions, __uuidof(IArcDimensions));
_COM_SMARTPTR_TYPEDEF(IBreakRadialDimension, __uuidof(IBreakRadialDimension));
_COM_SMARTPTR_TYPEDEF(IBreakRadialDimensions, __uuidof(IBreakRadialDimensions));
_COM_SMARTPTR_TYPEDEF(IRough, __uuidof(IRough));
_COM_SMARTPTR_TYPEDEF(IRoughs, __uuidof(IRoughs));
_COM_SMARTPTR_TYPEDEF(IBase, __uuidof(IBase));
_COM_SMARTPTR_TYPEDEF(IBases, __uuidof(IBases));
_COM_SMARTPTR_TYPEDEF(ITolerance, __uuidof(ITolerance));
_COM_SMARTPTR_TYPEDEF(ITolerances, __uuidof(ITolerances));
_COM_SMARTPTR_TYPEDEF(IDrawingTable, __uuidof(IDrawingTable));
_COM_SMARTPTR_TYPEDEF(IDrawingTables, __uuidof(IDrawingTables));
_COM_SMARTPTR_TYPEDEF(IViewPointer, __uuidof(IViewPointer));
_COM_SMARTPTR_TYPEDEF(IViewPointers, __uuidof(IViewPointers));
_COM_SMARTPTR_TYPEDEF(ICentreMarker, __uuidof(ICentreMarker));
_COM_SMARTPTR_TYPEDEF(ICentreMarkers, __uuidof(ICentreMarkers));
_COM_SMARTPTR_TYPEDEF(IRemoteElement, __uuidof(IRemoteElement));
_COM_SMARTPTR_TYPEDEF(IRemoteElements, __uuidof(IRemoteElements));
_COM_SMARTPTR_TYPEDEF(IAxisLine, __uuidof(IAxisLine));
_COM_SMARTPTR_TYPEDEF(IAxisLines, __uuidof(IAxisLines));
_COM_SMARTPTR_TYPEDEF(IWaveLine, __uuidof(IWaveLine));
_COM_SMARTPTR_TYPEDEF(IWaveLines, __uuidof(IWaveLines));
_COM_SMARTPTR_TYPEDEF(IBrokenLine, __uuidof(IBrokenLine));
_COM_SMARTPTR_TYPEDEF(IBrokenLines, __uuidof(IBrokenLines));
_COM_SMARTPTR_TYPEDEF(ICircularCentres, __uuidof(ICircularCentres));
_COM_SMARTPTR_TYPEDEF(ICircularsCentries, __uuidof(ICircularsCentries));
_COM_SMARTPTR_TYPEDEF(ILinearCentres, __uuidof(ILinearCentres));
_COM_SMARTPTR_TYPEDEF(ILinearsCentries, __uuidof(ILinearsCentries));
_COM_SMARTPTR_TYPEDEF(IConditionIntersect, __uuidof(IConditionIntersect));
_COM_SMARTPTR_TYPEDEF(IConditionIntersects, __uuidof(IConditionIntersects));
_COM_SMARTPTR_TYPEDEF(IBreakAngleDimension, __uuidof(IBreakAngleDimension));
_COM_SMARTPTR_TYPEDEF(ILeader, __uuidof(ILeader));
_COM_SMARTPTR_TYPEDEF(IMarkLeader, __uuidof(IMarkLeader));
_COM_SMARTPTR_TYPEDEF(IPositionLeader, __uuidof(IPositionLeader));
_COM_SMARTPTR_TYPEDEF(IChangeLeader, __uuidof(IChangeLeader));
_COM_SMARTPTR_TYPEDEF(IBrandLeader, __uuidof(IBrandLeader));
_COM_SMARTPTR_TYPEDEF(IToleranceParam, __uuidof(IToleranceParam));
_COM_SMARTPTR_TYPEDEF(IContourSegment, __uuidof(IContourSegment));
_COM_SMARTPTR_TYPEDEF(IContourLineSegment, __uuidof(IContourLineSegment));
_COM_SMARTPTR_TYPEDEF(IContourArc, __uuidof(IContourArc));
_COM_SMARTPTR_TYPEDEF(IAnnotativeContainer, __uuidof(IAnnotativeContainer));
_COM_SMARTPTR_TYPEDEF(ICurveCopyObjectParam, __uuidof(ICurveCopyObjectParam));
_COM_SMARTPTR_TYPEDEF(ICircleCopyObjectParam, __uuidof(ICircleCopyObjectParam));
_COM_SMARTPTR_TYPEDEF(INurbsByPoints, __uuidof(INurbsByPoints));
_COM_SMARTPTR_TYPEDEF(ITextDocumentSection, __uuidof(ITextDocumentSection));
_COM_SMARTPTR_TYPEDEF(ITextDocumentSectionsManager, __uuidof(ITextDocumentSectionsManager));
_COM_SMARTPTR_TYPEDEF(IExternalTessellationObject, __uuidof(IExternalTessellationObject));
_COM_SMARTPTR_TYPEDEF(IExternalGDIObject, __uuidof(IExternalGDIObject));
_COM_SMARTPTR_TYPEDEF(IExternalTessellationManager, __uuidof(IExternalTessellationManager));
_COM_SMARTPTR_TYPEDEF(ICircularCopyObjectParam, __uuidof(ICircularCopyObjectParam));
_COM_SMARTPTR_TYPEDEF(IMeshCopyObjectParam, __uuidof(IMeshCopyObjectParam));
_COM_SMARTPTR_TYPEDEF(IPropertyOpticalProps, __uuidof(IPropertyOpticalProps));
_COM_SMARTPTR_TYPEDEF(ITablePattern, __uuidof(ITablePattern));
_COM_SMARTPTR_TYPEDEF(IModelObject1, __uuidof(IModelObject1));
_COM_SMARTPTR_TYPEDEF(IPropertyLinkButton, __uuidof(IPropertyLinkButton));
_COM_SMARTPTR_TYPEDEF(IProductDataManager, __uuidof(IProductDataManager));
_COM_SMARTPTR_TYPEDEF(IMeshObject3D, __uuidof(IMeshObject3D));
_COM_SMARTPTR_TYPEDEF(IZoneParametersByBorderPoints, __uuidof(IZoneParametersByBorderPoints));
_COM_SMARTPTR_TYPEDEF(IDynamicCrossSectionStepParametersByBorderPoints, __uuidof(IDynamicCrossSectionStepParametersByBorderPoints));
_COM_SMARTPTR_TYPEDEF(IProcessWithVariables, __uuidof(IProcessWithVariables));
_COM_SMARTPTR_TYPEDEF(ILineSegmentAndPointDimension, __uuidof(ILineSegmentAndPointDimension));
_COM_SMARTPTR_TYPEDEF(IAdditionConvertParameters, __uuidof(IAdditionConvertParameters));
_COM_SMARTPTR_TYPEDEF(IApplication, __uuidof(IApplication));
_COM_SMARTPTR_TYPEDEF(IDocuments, __uuidof(IDocuments));
_COM_SMARTPTR_TYPEDEF(IKompasDocument, __uuidof(IKompasDocument));
_COM_SMARTPTR_TYPEDEF(IInsert, __uuidof(IInsert));
_COM_SMARTPTR_TYPEDEF(IInserts, __uuidof(IInserts));
_COM_SMARTPTR_TYPEDEF(IInsertsLibrary, __uuidof(IInsertsLibrary));
_COM_SMARTPTR_TYPEDEF(IInsertsLibraries, __uuidof(IInsertsLibraries));
_COM_SMARTPTR_TYPEDEF(ILibraryManager, __uuidof(ILibraryManager));
_COM_SMARTPTR_TYPEDEF(ISpecificationDocument, __uuidof(ISpecificationDocument));
_COM_SMARTPTR_TYPEDEF(ITextDocument, __uuidof(ITextDocument));
_COM_SMARTPTR_TYPEDEF(IReport, __uuidof(IReport));
_COM_SMARTPTR_TYPEDEF(IPropertyMng, __uuidof(IPropertyMng));
_COM_SMARTPTR_TYPEDEF(IAssociationTable, __uuidof(IAssociationTable));
_COM_SMARTPTR_TYPEDEF(IAssociationTables, __uuidof(IAssociationTables));
_COM_SMARTPTR_TYPEDEF(ISymbols2DContainer, __uuidof(ISymbols2DContainer));
_COM_SMARTPTR_TYPEDEF(IApplicationServises, __uuidof(IApplicationServises));
_COM_SMARTPTR_TYPEDEF(ISpecificationDescriptions, __uuidof(ISpecificationDescriptions));
_COM_SMARTPTR_TYPEDEF(ISpecificationDescription, __uuidof(ISpecificationDescription));
_COM_SMARTPTR_TYPEDEF(ISpecificationBaseObjects, __uuidof(ISpecificationBaseObjects));
_COM_SMARTPTR_TYPEDEF(ISpecificationBaseObject, __uuidof(ISpecificationBaseObject));
_COM_SMARTPTR_TYPEDEF(ISpecificationCommentObject, __uuidof(ISpecificationCommentObject));
_COM_SMARTPTR_TYPEDEF(ISpecificationCommentObjects, __uuidof(ISpecificationCommentObjects));
_COM_SMARTPTR_TYPEDEF(IKompasDocument2D, __uuidof(IKompasDocument2D));
_COM_SMARTPTR_TYPEDEF(IDrawingDocument, __uuidof(IDrawingDocument));
_COM_SMARTPTR_TYPEDEF(IFragmentDocument, __uuidof(IFragmentDocument));
_COM_SMARTPTR_TYPEDEF(IInsertionDefinition, __uuidof(IInsertionDefinition));
_COM_SMARTPTR_TYPEDEF(IInsertionParameters, __uuidof(IInsertionParameters));
_COM_SMARTPTR_TYPEDEF(ISketch, __uuidof(ISketch));
_COM_SMARTPTR_TYPEDEF(ISketchs, __uuidof(ISketchs));
_COM_SMARTPTR_TYPEDEF(IExtrusion, __uuidof(IExtrusion));
_COM_SMARTPTR_TYPEDEF(IExtrusions, __uuidof(IExtrusions));
_COM_SMARTPTR_TYPEDEF(IRib, __uuidof(IRib));
_COM_SMARTPTR_TYPEDEF(IRibs, __uuidof(IRibs));
_COM_SMARTPTR_TYPEDEF(ICutExtrusion, __uuidof(ICutExtrusion));
_COM_SMARTPTR_TYPEDEF(ISheetMetalBody, __uuidof(ISheetMetalBody));
_COM_SMARTPTR_TYPEDEF(ISheetMetalBodies, __uuidof(ISheetMetalBodies));
_COM_SMARTPTR_TYPEDEF(ISheetMetalHole, __uuidof(ISheetMetalHole));
_COM_SMARTPTR_TYPEDEF(ISheetMetalHoles, __uuidof(ISheetMetalHoles));
_COM_SMARTPTR_TYPEDEF(ISheetMetalCut, __uuidof(ISheetMetalCut));
_COM_SMARTPTR_TYPEDEF(ISheetMetalCuts, __uuidof(ISheetMetalCuts));
_COM_SMARTPTR_TYPEDEF(ISheetMetalContainer, __uuidof(ISheetMetalContainer));
_COM_SMARTPTR_TYPEDEF(ISplitLine, __uuidof(ISplitLine));
_COM_SMARTPTR_TYPEDEF(ISplitLines, __uuidof(ISplitLines));
_COM_SMARTPTR_TYPEDEF(ISpiral3D, __uuidof(ISpiral3D));
_COM_SMARTPTR_TYPEDEF(ISpirals3D, __uuidof(ISpirals3D));
_COM_SMARTPTR_TYPEDEF(IAuxiliaryGeomContainer, __uuidof(IAuxiliaryGeomContainer));
_COM_SMARTPTR_TYPEDEF(ISurfaceContainer, __uuidof(ISurfaceContainer));
_COM_SMARTPTR_TYPEDEF(IExtrusionSurface, __uuidof(IExtrusionSurface));
_COM_SMARTPTR_TYPEDEF(IConicSpiral3D, __uuidof(IConicSpiral3D));
_COM_SMARTPTR_TYPEDEF(ICylindricSpiral3D, __uuidof(ICylindricSpiral3D));
_COM_SMARTPTR_TYPEDEF(IInsertionObject, __uuidof(IInsertionObject));
_COM_SMARTPTR_TYPEDEF(IInsertionObjects, __uuidof(IInsertionObjects));
_COM_SMARTPTR_TYPEDEF(IDrawingContainer, __uuidof(IDrawingContainer));
_COM_SMARTPTR_TYPEDEF(IInsertionFragment, __uuidof(IInsertionFragment));
_COM_SMARTPTR_TYPEDEF(IInsertionView, __uuidof(IInsertionView));
_COM_SMARTPTR_TYPEDEF(IInsertionsManager, __uuidof(IInsertionsManager));
_COM_SMARTPTR_TYPEDEF(ISheetMetalLinearRuledShell, __uuidof(ISheetMetalLinearRuledShell));
_COM_SMARTPTR_TYPEDEF(IViewsAndLayersManager, __uuidof(IViewsAndLayersManager));
_COM_SMARTPTR_TYPEDEF(ILayerGroups, __uuidof(ILayerGroups));
_COM_SMARTPTR_TYPEDEF(ILayerGroup, __uuidof(ILayerGroup));
_COM_SMARTPTR_TYPEDEF(IKompasDocument3D, __uuidof(IKompasDocument3D));
_COM_SMARTPTR_TYPEDEF(IPartDocument, __uuidof(IPartDocument));
_COM_SMARTPTR_TYPEDEF(IAssemblyDocument, __uuidof(IAssemblyDocument));
_COM_SMARTPTR_TYPEDEF(IAssociationView, __uuidof(IAssociationView));
_COM_SMARTPTR_TYPEDEF(ICopyGeometry, __uuidof(ICopyGeometry));
_COM_SMARTPTR_TYPEDEF(ICopiesGeometry, __uuidof(ICopiesGeometry));
_COM_SMARTPTR_TYPEDEF(IModelContainer, __uuidof(IModelContainer));
_COM_SMARTPTR_TYPEDEF(IPart7, __uuidof(IPart7));
_COM_SMARTPTR_TYPEDEF(IParts7, __uuidof(IParts7));
_COM_SMARTPTR_TYPEDEF(IEmbodiment, __uuidof(IEmbodiment));
_COM_SMARTPTR_TYPEDEF(IEmbodimentsManager, __uuidof(IEmbodimentsManager));
_COM_SMARTPTR_TYPEDEF(IMate3DDependentPosition, __uuidof(IMate3DDependentPosition));
_COM_SMARTPTR_TYPEDEF(IKompasDocument3D1, __uuidof(IKompasDocument3D1));
_COM_SMARTPTR_TYPEDEF(IDocument3DManager, __uuidof(IDocument3DManager));
_COM_SMARTPTR_TYPEDEF(ILayerGroups3D, __uuidof(ILayerGroups3D));
_COM_SMARTPTR_TYPEDEF(ILayerGroup3D, __uuidof(ILayerGroup3D));
_COM_SMARTPTR_TYPEDEF(IBuildingAxis, __uuidof(IBuildingAxis));
_COM_SMARTPTR_TYPEDEF(IBuildingAxes, __uuidof(IBuildingAxes));
_COM_SMARTPTR_TYPEDEF(IBuildingContainer, __uuidof(IBuildingContainer));
_COM_SMARTPTR_TYPEDEF(IMarkNode, __uuidof(IMarkNode));
_COM_SMARTPTR_TYPEDEF(IMarkNodes, __uuidof(IMarkNodes));
_COM_SMARTPTR_TYPEDEF(IStraightAxis, __uuidof(IStraightAxis));
_COM_SMARTPTR_TYPEDEF(IArcAxis, __uuidof(IArcAxis));
_COM_SMARTPTR_TYPEDEF(ICircleAxis, __uuidof(ICircleAxis));

//
// Type library items
//

struct __declspec(uuid("f65db4ac-06b4-4c93-bd34-7b4fd65e9421"))
ISaveAsDetailParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarking,put=PutMarking))
    _bstr_t Marking;
    __declspec(property(get=GetLocal,put=PutLocal))
    VARIANT_BOOL Local;
    __declspec(property(get=GetLayoutGeometry,put=PutLayoutGeometry))
    VARIANT_BOOL LayoutGeometry;
    __declspec(property(get=GetUnhistored,put=PutUnhistored))
    VARIANT_BOOL Unhistored;
    __declspec(property(get=GetMirror,put=PutMirror))
    VARIANT_BOOL Mirror;
    __declspec(property(get=GetSaveInitialObjects,put=PutSaveInitialObjects))
    VARIANT_BOOL SaveInitialObjects;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t Result );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Result );
    _bstr_t GetMarking ( );
    void PutMarking (
        _bstr_t Result );
    void PutLocal (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetLocal ( );
    VARIANT_BOOL GetLayoutGeometry ( );
    void PutLayoutGeometry (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUnhistored ( );
    void PutUnhistored (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMirror ( );
    void PutMirror (
        VARIANT_BOOL PVal );
    void PutSaveInitialObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveInitialObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_Marking (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_Marking (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall put_Local (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Local (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_LayoutGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_LayoutGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Unhistored (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Unhistored (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Mirror (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Mirror (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall put_SaveInitialObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveInitialObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("437d6587-7649-4a0c-80bb-7a6e89661839"))
IHatchParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetHatchColor,put=PutHatchColor))
    long HatchColor;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetHatchAngle,put=PutHatchAngle))
    double HatchAngle;
    __declspec(property(get=GetHatchType,put=PutHatchType))
    VARIANT_BOOL HatchType;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetIsSheetAngle,put=PutIsSheetAngle))
    VARIANT_BOOL IsSheetAngle;
    __declspec(property(get=GetHatchFileName))
    _bstr_t HatchFileName;
    __declspec(property(get=GetLibraryStyleNumber))
    double LibraryStyleNumber;

    //
    // Wrapper methods for error-handling
    //

    long GetStyle ( );
    void PutStyle (
        long Result );
    long GetHatchColor ( );
    void PutHatchColor (
        long Result );
    double GetStep ( );
    void PutStep (
        double Result );
    double GetHatchAngle ( );
    void PutHatchAngle (
        double Result );
    VARIANT_BOOL GetHatchType ( );
    void PutHatchType (
        VARIANT_BOOL Result );
    double GetWidth ( );
    void PutWidth (
        double Result );
    VARIANT_BOOL GetIsSheetAngle ( );
    void PutIsSheetAngle (
        VARIANT_BOOL Result );
    _bstr_t GetHatchFileName ( );
    double GetLibraryStyleNumber ( );
    VARIANT_BOOL AddStyleFromLibrary (
        _bstr_t FileName,
        double StyleNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_HatchColor (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_HatchColor (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_HatchAngle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_HatchAngle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_HatchType (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_HatchType (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_IsSheetAngle (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_IsSheetAngle (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_HatchFileName (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall get_LibraryStyleNumber (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_AddStyleFromLibrary (
        /*[in]*/ BSTR FileName,
        /*[in]*/ double StyleNumber,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("534518cc-6577-4273-887a-6b833fde6ed7"))
IDimensionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRemoteLine1,put=PutRemoteLine1))
    VARIANT_BOOL RemoteLine1;
    __declspec(property(get=GetRemoteLine2,put=PutRemoteLine2))
    VARIANT_BOOL RemoteLine2;
    __declspec(property(get=GetArrowType1,put=PutArrowType1))
    enum ksArrowEnum ArrowType1;
    __declspec(property(get=GetArrowType2,put=PutArrowType2))
    enum ksArrowEnum ArrowType2;
    __declspec(property(get=GetArrowPos,put=PutArrowPos))
    enum ksDimensionArrowPosEnum ArrowPos;
    __declspec(property(get=GetTextPos,put=PutTextPos))
    long TextPos;
    __declspec(property(get=GetTextType,put=PutTextType))
    enum ksDimensionTextTypeEnum TextType;
    __declspec(property(get=GetTextOnLine,put=PutTextOnLine))
    enum ksDimensionTextPosEnum TextOnLine;
    __declspec(property(get=GetTextBase,put=PutTextBase))
    enum ksDimensionBaseEnum TextBase;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetShelfAngle,put=PutShelfAngle))
    double ShelfAngle;
    __declspec(property(get=GetShelfLength,put=PutShelfLength))
    double ShelfLength;
    __declspec(property(get=GetGap,put=PutGap))
    VARIANT_BOOL Gap;
    __declspec(property(get=GetGapValue,put=PutGapValue))
    long GapValue;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetRemoteLine1 ( );
    void PutRemoteLine1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRemoteLine2 ( );
    void PutRemoteLine2 (
        VARIANT_BOOL PVal );
    enum ksArrowEnum GetArrowType1 ( );
    void PutArrowType1 (
        enum ksArrowEnum PVal );
    enum ksArrowEnum GetArrowType2 ( );
    void PutArrowType2 (
        enum ksArrowEnum PVal );
    enum ksDimensionArrowPosEnum GetArrowPos ( );
    void PutArrowPos (
        enum ksDimensionArrowPosEnum PVal );
    long GetTextPos ( );
    void PutTextPos (
        long PVal );
    enum ksDimensionTextTypeEnum GetTextType ( );
    void PutTextType (
        enum ksDimensionTextTypeEnum PVal );
    enum ksDimensionTextPosEnum GetTextOnLine ( );
    void PutTextOnLine (
        enum ksDimensionTextPosEnum PVal );
    enum ksDimensionBaseEnum GetTextBase ( );
    void PutTextBase (
        enum ksDimensionBaseEnum PVal );
    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum PVal );
    double GetShelfAngle ( );
    void PutShelfAngle (
        double PVal );
    double GetShelfLength ( );
    void PutShelfLength (
        double PVal );
    VARIANT_BOOL GetGap ( );
    void PutGap (
        VARIANT_BOOL PVal );
    long GetGapValue ( );
    void PutGapValue (
        long PVal );
    VARIANT_BOOL InitDefaultValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RemoteLine1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RemoteLine1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RemoteLine2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RemoteLine2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ArrowType1 (
        /*[out,retval]*/ enum ksArrowEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType1 (
        /*[in]*/ enum ksArrowEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ArrowType2 (
        /*[out,retval]*/ enum ksArrowEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType2 (
        /*[in]*/ enum ksArrowEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ArrowPos (
        /*[out,retval]*/ enum ksDimensionArrowPosEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ArrowPos (
        /*[in]*/ enum ksDimensionArrowPosEnum PVal ) = 0;
      virtual HRESULT __stdcall get_TextPos (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_TextPos (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_TextType (
        /*[out,retval]*/ enum ksDimensionTextTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_TextType (
        /*[in]*/ enum ksDimensionTextTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_TextOnLine (
        /*[out,retval]*/ enum ksDimensionTextPosEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_TextOnLine (
        /*[in]*/ enum ksDimensionTextPosEnum PVal ) = 0;
      virtual HRESULT __stdcall get_TextBase (
        /*[out,retval]*/ enum ksDimensionBaseEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_TextBase (
        /*[in]*/ enum ksDimensionBaseEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_GapValue (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_GapValue (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall raw_InitDefaultValues (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e7f1fd16-b641-4264-859c-d47217da8b04"))
ILoadCombination : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCompletelyLoaded))
    VARIANT_BOOL CompletelyLoaded;
    __declspec(property(get=GetLoadCombinations))
    _variant_t LoadCombinations;
    __declspec(property(get=GetCurrentIndex,put=PutCurrentIndex))
    long CurrentIndex;
    __declspec(property(get=GetProtectedFlags))
    _variant_t ProtectedFlags;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCompletelyLoaded ( );
    _variant_t GetLoadCombinations ( );
    long GetCurrentIndex ( );
    long Create (
        _bstr_t CombinationName );
    VARIANT_BOOL Delete (
        const _variant_t & LoadCombinationIndex );
    VARIANT_BOOL Apply (
        const _variant_t & LoadCombinationIndex );
    VARIANT_BOOL DeleteEx (
        const _variant_t & LoadCombinationIndex,
        _bstr_t Password,
        VARIANT_BOOL DeleteDependant );
    VARIANT_BOOL ApplyEx (
        const _variant_t & LoadCombinationIndex,
        _bstr_t Password );
    VARIANT_BOOL SetPassword (
        const _variant_t & LoadCombinationIndex,
        _bstr_t OldPassword,
        _bstr_t Password,
        VARIANT_BOOL UnprotectUsers );
    VARIANT_BOOL UpdateByModel (
        const _variant_t & LoadCombinationIndex,
        _bstr_t Password );
    VARIANT_BOOL SetLoadCombinationComment (
        const _variant_t & LoadCombinationIndex,
        _bstr_t NewVal,
        _bstr_t Password );
    _bstr_t GetLoadCombinationComment (
        const _variant_t & LoadCombinationIndex );
    VARIANT_BOOL SetLoadCombinationName (
        const _variant_t & LoadCombinationIndex,
        _bstr_t NewVal,
        _bstr_t Password );
    _bstr_t GetLoadCombinationName (
        const _variant_t & LoadCombinationIndex );
    _variant_t GetProtectedFlags ( );
    void PutCurrentIndex (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CompletelyLoaded (
        /*[out,retval]*/ VARIANT_BOOL * Type ) = 0;
      virtual HRESULT __stdcall get_LoadCombinations (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_CurrentIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR CombinationName,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_Apply (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_DeleteEx (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT_BOOL DeleteDependant,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ApplyEx (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[in]*/ BSTR Password,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[in]*/ BSTR OldPassword,
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT_BOOL UnprotectUsers,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_UpdateByModel (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[in]*/ BSTR Password,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetLoadCombinationComment (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[in]*/ BSTR NewVal,
        /*[in]*/ BSTR Password,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetLoadCombinationComment (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_SetLoadCombinationName (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[in]*/ BSTR NewVal,
        /*[in]*/ BSTR Password,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetLoadCombinationName (
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall get_ProtectedFlags (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentIndex (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b9019350-ff1d-4161-b41b-cd1b020ecf36"))
IFrameTreesManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveTab,put=PutActiveTab))
    IDispatchPtr ActiveTab;
    __declspec(property(get=GetTabsVisible,put=PutTabsVisible))
    VARIANT_BOOL TabsVisible;
    __declspec(property(get=GetTreeCaption,put=PutTreeCaption))
    _bstr_t TreeCaption[];
    __declspec(property(get=GetTabVisible,put=PutTabVisible))
    VARIANT_BOOL TabVisible[];

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr AddTab (
        _bstr_t TabCaption,
        _bstr_t OcxClassID );
    VARIANT_BOOL RemoveTab (
        IDispatch * Ocx );
    IDispatchPtr GetActiveTab ( );
    void PutActiveTab (
        IDispatch * Ocx );
    VARIANT_BOOL GetTabsVisible ( );
    void PutTabsVisible (
        VARIANT_BOOL PVal );
    _bstr_t GetTreeCaption (
        IDispatch * Ocx );
    void PutTreeCaption (
        IDispatch * Ocx,
        _bstr_t PVal );
    IDispatchPtr AddTabEx (
        _bstr_t TabCaption,
        _bstr_t TreeCaption,
        _bstr_t OcxClassID,
        VARIANT_BOOL Active,
        enum PropertyManagerLayout Layout );
    VARIANT_BOOL GetTabVisible (
        IDispatch * Ocx );
    void PutTabVisible (
        IDispatch * Ocx,
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddTab (
        /*[in]*/ BSTR TabCaption,
        /*[in]*/ BSTR OcxClassID,
        /*[out,retval]*/ IDispatch * * PVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveTab (
        /*[in]*/ IDispatch * Ocx,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ActiveTab (
        /*[out,retval]*/ IDispatch * * Ocx ) = 0;
      virtual HRESULT __stdcall put_ActiveTab (
        /*[in]*/ IDispatch * Ocx ) = 0;
      virtual HRESULT __stdcall get_TabsVisible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TabsVisible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TreeCaption (
        /*[in]*/ IDispatch * Ocx,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_TreeCaption (
        /*[in]*/ IDispatch * Ocx,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_AddTabEx (
        /*[in]*/ BSTR TabCaption,
        /*[in]*/ BSTR TreeCaption,
        /*[in]*/ BSTR OcxClassID,
        /*[in]*/ VARIANT_BOOL Active,
        /*[in]*/ enum PropertyManagerLayout Layout,
        /*[out,retval]*/ IDispatch * * PVal ) = 0;
      virtual HRESULT __stdcall get_TabVisible (
        /*[in]*/ IDispatch * Ocx,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TabVisible (
        /*[in]*/ IDispatch * Ocx,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("cb083231-ee0d-4596-b04d-e6a020926557"))
IPrintJob_OutputParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfCopies,put=PutNumberOfCopies))
    long NumberOfCopies;
    __declspec(property(get=GetCollateCopies,put=PutCollateCopies))
    VARIANT_BOOL CollateCopies;
    __declspec(property(get=GetPlotToFile,put=PutPlotToFile))
    VARIANT_BOOL PlotToFile;
    __declspec(property(get=GetColor,put=PutColor))
    enum ksOutputColorTypeEnum Color;
    __declspec(property(get=GetOnlyThinLines,put=PutOnlyThinLines))
    VARIANT_BOOL OnlyThinLines;
    __declspec(property(get=GetAlternativeFillingOutput,put=PutAlternativeFillingOutput))
    VARIANT_BOOL AlternativeFillingOutput;
    __declspec(property(get=GetAccuracyModelOutput,put=PutAccuracyModelOutput))
    long AccuracyModelOutput;
    __declspec(property(get=GetPageOutputOrder,put=PutPageOutputOrder))
    long PageOutputOrder;
    __declspec(property(get=GetDefaultScale,put=PutDefaultScale))
    double DefaultScale;
    __declspec(property(get=GetAutoScale,put=PutAutoScale))
    VARIANT_BOOL AutoScale;
    __declspec(property(get=GetUseCatchSpacing,put=PutUseCatchSpacing))
    VARIANT_BOOL UseCatchSpacing;
    __declspec(property(get=GetCatchSpacing,put=PutCatchSpacing))
    long CatchSpacing;
    __declspec(property(get=GetUseHooking,put=PutUseHooking))
    VARIANT_BOOL UseHooking;
    __declspec(property(get=GetHooking,put=PutHooking))
    long Hooking;

    //
    // Wrapper methods for error-handling
    //

    void PutNumberOfCopies (
        long PVal );
    long GetNumberOfCopies ( );
    void PutCollateCopies (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCollateCopies ( );
    void PutPlotToFile (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPlotToFile ( );
    void PutColor (
        enum ksOutputColorTypeEnum PVal );
    enum ksOutputColorTypeEnum GetColor ( );
    void PutOnlyThinLines (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOnlyThinLines ( );
    void PutAlternativeFillingOutput (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAlternativeFillingOutput ( );
    void PutAccuracyModelOutput (
        long PVal );
    long GetAccuracyModelOutput ( );
    void PutPageOutputOrder (
        long PVal );
    long GetPageOutputOrder ( );
    void PutDefaultScale (
        double PVal );
    double GetDefaultScale ( );
    void PutAutoScale (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoScale ( );
    void PutUseCatchSpacing (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUseCatchSpacing ( );
    void PutCatchSpacing (
        long PVal );
    long GetCatchSpacing ( );
    void PutUseHooking (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUseHooking ( );
    void PutHooking (
        long PVal );
    long GetHooking ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_NumberOfCopies (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCopies (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_CollateCopies (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CollateCopies (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PlotToFile (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PlotToFile (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ enum ksOutputColorTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ enum ksOutputColorTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_OnlyThinLines (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_OnlyThinLines (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AlternativeFillingOutput (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AlternativeFillingOutput (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AccuracyModelOutput (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_AccuracyModelOutput (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PageOutputOrder (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PageOutputOrder (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_DefaultScale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DefaultScale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoScale (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoScale (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UseCatchSpacing (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UseCatchSpacing (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CatchSpacing (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_CatchSpacing (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_UseHooking (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UseHooking (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Hooking (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Hooking (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("095ce8c1-b2e7-4417-ab3d-cce01480c08e"))
IPrintJob_PrinterSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPaperSource,put=PutPaperSource))
    long PaperSource;
    __declspec(property(get=GetPaperLength,put=PutPaperLength))
    long PaperLength;
    __declspec(property(get=GetPaperWidth,put=PutPaperWidth))
    long PaperWidth;
    __declspec(property(get=GetPrinterType,put=PutPrinterType))
    enum ksPrinterTypeEnum PrinterType;
    __declspec(property(get=GetDeviceName))
    _bstr_t DeviceName;
    __declspec(property(get=GetPort))
    _bstr_t Port;
    __declspec(property(get=GetIsPortraitPage,put=PutIsPortraitPage))
    VARIANT_BOOL IsPortraitPage;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    long PaperSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL InitPrinterSettings (
        _bstr_t DeviceName,
        VARIANT_BOOL IsPortraitPage,
        long PaperSize,
        long PaperLength,
        long PaperWidth,
        long PaperSource );
    _bstr_t GetDeviceName ( );
    _bstr_t GetPort ( );
    VARIANT_BOOL LoadPrinterConfig (
        _bstr_t FileName );
    VARIANT_BOOL SavePrinterConfig (
        _bstr_t FileName );
    void PutIsPortraitPage (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIsPortraitPage ( );
    void PutPaperSize (
        long PVal );
    long GetPaperSize ( );
    void PutPaperSource (
        long PVal );
    long GetPaperSource ( );
    void PutPaperLength (
        long PVal );
    long GetPaperLength ( );
    void PutPaperWidth (
        long PVal );
    long GetPaperWidth ( );
    enum ksPrinterTypeEnum GetPrinterType ( );
    void PutPrinterType (
        enum ksPrinterTypeEnum PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitPrinterSettings (
        /*[in]*/ BSTR DeviceName,
        /*[in]*/ VARIANT_BOOL IsPortraitPage,
        /*[in]*/ long PaperSize,
        /*[in]*/ long PaperLength,
        /*[in]*/ long PaperWidth,
        /*[in]*/ long PaperSource,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_DeviceName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_LoadPrinterConfig (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SavePrinterConfig (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_IsPortraitPage (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IsPortraitPage (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PaperSize (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PaperSize (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PaperSource (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PaperSource (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PaperLength (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PaperLength (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PaperWidth (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PaperWidth (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_PrinterType (
        /*[out,retval]*/ enum ksPrinterTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_PrinterType (
        /*[in]*/ enum ksPrinterTypeEnum PVal ) = 0;
};

struct __declspec(uuid("ab64a064-53e7-4adc-bf40-3bfc04d93963"))
ISaveToPreviusParam7 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddWarning (
        _bstr_t UniqueId,
        _bstr_t OptionName,
        _bstr_t Text );
    VARIANT_BOOL AddOption (
        _bstr_t UniqueId,
        _bstr_t OptionName,
        const _variant_t & Options,
        _bstr_t DefaultValue );
    _bstr_t GetCurrentOptionValue (
        _bstr_t UniqueId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddWarning (
        /*[in]*/ BSTR UniqueId,
        /*[in]*/ BSTR OptionName,
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddOption (
        /*[in]*/ BSTR UniqueId,
        /*[in]*/ BSTR OptionName,
        /*[in]*/ VARIANT Options,
        /*[in]*/ BSTR DefaultValue,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentOptionValue (
        /*[in]*/ BSTR UniqueId,
        /*[out,retval]*/ BSTR * Result ) = 0;
};

struct __declspec(uuid("dc982411-cf10-4c00-946b-b5338448568a"))
IUserMetadataManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStorageInfo,put=PutStorageInfo))
    _bstr_t StorageInfo[][];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL CreateStorage (
        _bstr_t ApplicationIID,
        _bstr_t ApplicationDescription,
        _bstr_t Version );
    VARIANT_BOOL ExistStorage (
        _bstr_t ApplicationIID );
    VARIANT_BOOL DeleteStorage (
        _bstr_t ApplicationIID );
    _variant_t GetAllFilenames (
        _bstr_t ApplicationIID );
    _bstr_t GetStorageInfo (
        _bstr_t ApplicationIID,
        _bstr_t ParameterName );
    void PutStorageInfo (
        _bstr_t ApplicationIID,
        _bstr_t ParameterName,
        _bstr_t Result );
    VARIANT_BOOL DeleteFile (
        _bstr_t ApplicationIID,
        _bstr_t StorageFileName );
    VARIANT_BOOL IsExistFile (
        _bstr_t ApplicationIID,
        _bstr_t StorageFileName );
    VARIANT_BOOL AddFile (
        _bstr_t ApplicationIID,
        _bstr_t SrcFileName,
        _bstr_t DestFileName,
        VARIANT_BOOL AllowReplacement,
        VARIANT_BOOL Compress );
    VARIANT_BOOL ExtractFile (
        _bstr_t ApplicationIID,
        _bstr_t SrcFileName,
        _bstr_t DestFileName,
        VARIANT_BOOL AllowReplacement );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateStorage (
        /*[in]*/ BSTR ApplicationIID,
        /*[in]*/ BSTR ApplicationDescription,
        /*[in]*/ BSTR Version,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ExistStorage (
        /*[in]*/ BSTR ApplicationIID,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteStorage (
        /*[in]*/ BSTR ApplicationIID,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetAllFilenames (
        /*[in]*/ BSTR ApplicationIID,
        /*[out,retval]*/ VARIANT * FileNames ) = 0;
      virtual HRESULT __stdcall get_StorageInfo (
        /*[in]*/ BSTR ApplicationIID,
        /*[in]*/ BSTR ParameterName,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_StorageInfo (
        /*[in]*/ BSTR ApplicationIID,
        /*[in]*/ BSTR ParameterName,
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteFile (
        /*[in]*/ BSTR ApplicationIID,
        /*[in]*/ BSTR StorageFileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsExistFile (
        /*[in]*/ BSTR ApplicationIID,
        /*[in]*/ BSTR StorageFileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddFile (
        /*[in]*/ BSTR ApplicationIID,
        /*[in]*/ BSTR SrcFileName,
        /*[in]*/ BSTR DestFileName,
        /*[in]*/ VARIANT_BOOL AllowReplacement,
        /*[in]*/ VARIANT_BOOL Compress,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ExtractFile (
        /*[in]*/ BSTR ApplicationIID,
        /*[in]*/ BSTR SrcFileName,
        /*[in]*/ BSTR DestFileName,
        /*[in]*/ VARIANT_BOOL AllowReplacement,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("9f627059-04f9-4b14-9c9d-ebdf7fb83e48"))
IIntervalVariable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstValue,put=PutFirstValue))
    double FirstValue;
    __declspec(property(get=GetSecondValue,put=PutSecondValue))
    double SecondValue;

    //
    // Wrapper methods for error-handling
    //

    double GetFirstValue ( );
    void PutFirstValue (
        double Result );
    double GetSecondValue ( );
    void PutSecondValue (
        double Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstValue (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_FirstValue (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_SecondValue (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_SecondValue (
        /*[in]*/ double Result ) = 0;
};

struct __declspec(uuid("9d111c31-1629-4a0b-89e5-8461cdfa2157"))
IReportFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConditionCount))
    long ConditionCount;

    //
    // Wrapper methods for error-handling
    //

    long GetConditionCount ( );
    VARIANT_BOOL GetCondition (
        long Index,
        VARIANT * UniqId,
        enum ksReportFiltersTypeEnum * Type,
        VARIANT * Val );
    VARIANT_BOOL SetCondition (
        long Index,
        const _variant_t & UniqId,
        enum ksReportFiltersTypeEnum Type,
        const _variant_t & Val );
    VARIANT_BOOL RemoveCondition (
        long Index );
    VARIANT_BOOL Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConditionCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetCondition (
        /*[in]*/ long Index,
        /*[out]*/ VARIANT * UniqId,
        /*[out]*/ enum ksReportFiltersTypeEnum * Type,
        /*[out]*/ VARIANT * Val,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCondition (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT UniqId,
        /*[in]*/ enum ksReportFiltersTypeEnum Type,
        /*[in]*/ VARIANT Val,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_RemoveCondition (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("88803908-b243-47b0-a388-9e059cfa8e54"))
IReportObjectsFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelObjects,put=PutModelObjects))
    VARIANT_BOOL ModelObjects;
    __declspec(property(get=GetInsertionViews,put=PutInsertionViews))
    VARIANT_BOOL InsertionViews;
    __declspec(property(get=GetInsertionFragments,put=PutInsertionFragments))
    VARIANT_BOOL InsertionFragments;
    __declspec(property(get=GetMacroObjects2D,put=PutMacroObjects2D))
    VARIANT_BOOL MacroObjects2D;
    __declspec(property(get=GetParts,put=PutParts))
    VARIANT_BOOL Parts;
    __declspec(property(get=GetLocalParts,put=PutLocalParts))
    VARIANT_BOOL LocalParts;
    __declspec(property(get=GetBodies,put=PutBodies))
    VARIANT_BOOL Bodies;
    __declspec(property(get=GetViews,put=PutViews))
    VARIANT_BOOL Views;
    __declspec(property(get=GetSpecialInfoObjects,put=PutSpecialInfoObjects))
    VARIANT_BOOL SpecialInfoObjects;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetModelObjects ( );
    void PutModelObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInsertionViews ( );
    void PutInsertionViews (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInsertionFragments ( );
    void PutInsertionFragments (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMacroObjects2D ( );
    void PutMacroObjects2D (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetParts ( );
    void PutParts (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetLocalParts ( );
    void PutLocalParts (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBodies ( );
    void PutBodies (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetViews ( );
    void PutViews (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSpecialInfoObjects ( );
    void PutSpecialInfoObjects (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionViews (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_InsertionViews (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionFragments (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_InsertionFragments (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MacroObjects2D (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MacroObjects2D (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Parts (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Parts (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LocalParts (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_LocalParts (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Bodies (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Bodies (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Views (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Views (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SpecialInfoObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SpecialInfoObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("a1af048d-93c0-4c21-9064-d437a71d7d53"))
IReportParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksReportBuildingTypeEnum BuildingType;
    __declspec(property(get=GetLevelsCount,put=PutLevelsCount))
    long LevelsCount;
    __declspec(property(get=GetPageLayoutType,put=PutPageLayoutType))
    enum ksPageLayoutTypeEnum PageLayoutType;
    __declspec(property(get=GetPagesRowsCount,put=PutPagesRowsCount))
    long PagesRowsCount;
    __declspec(property(get=GetPagesColumnsCount,put=PutPagesColumnsCount))
    long PagesColumnsCount;
    __declspec(property(get=GetPagesSpace,put=PutPagesSpace))
    double PagesSpace;
    __declspec(property(get=GetUseHyperText,put=PutUseHyperText))
    VARIANT_BOOL UseHyperText;

    //
    // Wrapper methods for error-handling
    //

    enum ksReportBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksReportBuildingTypeEnum PVal );
    long GetLevelsCount ( );
    void PutLevelsCount (
        long PVal );
    enum ksPageLayoutTypeEnum GetPageLayoutType ( );
    void PutPageLayoutType (
        enum ksPageLayoutTypeEnum PVal );
    long GetPagesRowsCount ( );
    void PutPagesRowsCount (
        long PVal );
    long GetPagesColumnsCount ( );
    void PutPagesColumnsCount (
        long PVal );
    double GetPagesSpace ( );
    void PutPagesSpace (
        double PVal );
    VARIANT_BOOL GetUseHyperText ( );
    void PutUseHyperText (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksReportBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksReportBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LevelsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_LevelsCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PageLayoutType (
        /*[out,retval]*/ enum ksPageLayoutTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_PageLayoutType (
        /*[in]*/ enum ksPageLayoutTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PagesRowsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PagesRowsCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PagesColumnsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PagesColumnsCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PagesSpace (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_PagesSpace (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_UseHyperText (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UseHyperText (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("7d2a79ff-ec54-4480-b9f3-46f75293b558"))
IPropertyControl1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPredefineNumber,put=PutPredefineNumber))
    long PredefineNumber;
    __declspec(property(get=GetUserMenu,put=PutUserMenu))
    OLE_HANDLE UserMenu;
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetImage,put=PutImage))
    _variant_t Image;
    __declspec(property(get=GetAdditionButtonVisible,put=PutAdditionButtonVisible))
    VARIANT_BOOL AdditionButtonVisible[];
    __declspec(property(get=GetAdditionButtonChecked,put=PutAdditionButtonChecked))
    VARIANT_BOOL AdditionButtonChecked[];
    __declspec(property(get=GetAdditionButtonEnable,put=PutAdditionButtonEnable))
    VARIANT_BOOL AdditionButtonEnable[];
    __declspec(property(get=GetHyperLinkNameStyle,put=PutHyperLinkNameStyle))
    VARIANT_BOOL HyperLinkNameStyle;
    __declspec(property(get=GetNeedMouseEnterLeaveMessages,put=PutNeedMouseEnterLeaveMessages))
    VARIANT_BOOL NeedMouseEnterLeaveMessages;
    __declspec(property(get=GetAdditionButtonNeedMouseEnterLeaveMessages,put=PutAdditionButtonNeedMouseEnterLeaveMessages))
    VARIANT_BOOL AdditionButtonNeedMouseEnterLeaveMessages[];

    //
    // Wrapper methods for error-handling
    //

    void PutPredefineNumber (
        long PVal );
    long GetPredefineNumber ( );
    void PutUserMenu (
        OLE_HANDLE PVal );
    OLE_HANDLE GetUserMenu ( );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutImage (
        const _variant_t & Bmp );
    _variant_t GetImage ( );
    OLE_HANDLE GetHWND ( );
    VARIANT_BOOL AddAdditionButton (
        long BtnID,
        const _variant_t & Bmp,
        _bstr_t Tips,
        _bstr_t IconFont );
    VARIANT_BOOL AddAdditionCheckButton (
        long BtnID,
        const _variant_t & BmpChecked,
        const _variant_t & BmpUnChecked,
        const _variant_t & BmpUndefine,
        _bstr_t Tips,
        _bstr_t IconFont );
    void PutAdditionButtonVisible (
        long BtnID,
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetAdditionButtonVisible (
        long BtnID );
    void PutAdditionButtonChecked (
        long BtnID,
        VARIANT_BOOL Checked );
    VARIANT_BOOL GetAdditionButtonChecked (
        long BtnID );
    void PutAdditionButtonEnable (
        long BtnID,
        VARIANT_BOOL Enable );
    VARIANT_BOOL GetAdditionButtonEnable (
        long BtnID );
    void PutHyperLinkNameStyle (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetHyperLinkNameStyle ( );
    void PutNeedMouseEnterLeaveMessages (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNeedMouseEnterLeaveMessages ( );
    void PutAdditionButtonNeedMouseEnterLeaveMessages (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAdditionButtonNeedMouseEnterLeaveMessages (
        long BtnID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PredefineNumber (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PredefineNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_UserMenu (
        /*[in]*/ OLE_HANDLE PVal ) = 0;
      virtual HRESULT __stdcall get_UserMenu (
        /*[out,retval]*/ OLE_HANDLE * PVal ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_Image (
        /*[in]*/ VARIANT Bmp ) = 0;
      virtual HRESULT __stdcall get_Image (
        /*[out,retval]*/ VARIANT * Bmp ) = 0;
      virtual HRESULT __stdcall raw_GetHWND (
        /*[out,retval]*/ OLE_HANDLE * HWnd ) = 0;
      virtual HRESULT __stdcall raw_AddAdditionButton (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT Bmp,
        /*[in]*/ BSTR Tips,
        /*[in]*/ BSTR IconFont,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddAdditionCheckButton (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT BmpChecked,
        /*[in]*/ VARIANT BmpUnChecked,
        /*[in]*/ VARIANT BmpUndefine,
        /*[in]*/ BSTR Tips,
        /*[in]*/ BSTR IconFont,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AdditionButtonVisible (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_AdditionButtonVisible (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_AdditionButtonChecked (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL Checked ) = 0;
      virtual HRESULT __stdcall get_AdditionButtonChecked (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * Checked ) = 0;
      virtual HRESULT __stdcall put_AdditionButtonEnable (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL Enable ) = 0;
      virtual HRESULT __stdcall get_AdditionButtonEnable (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * Enable ) = 0;
      virtual HRESULT __stdcall put_HyperLinkNameStyle (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_HyperLinkNameStyle (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_NeedMouseEnterLeaveMessages (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NeedMouseEnterLeaveMessages (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AdditionButtonNeedMouseEnterLeaveMessages (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionButtonNeedMouseEnterLeaveMessages (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("c2523b7e-eb4b-45db-8e3b-9d6cced99333"))
IPropertyToolBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetButtonIconFont,put=PutButtonIconFont))
    _bstr_t ButtonIconFont[];
    __declspec(property(get=GetButtonChecked,put=PutButtonChecked))
    VARIANT_BOOL ButtonChecked[];
    __declspec(property(get=GetButtonEnable,put=PutButtonEnable))
    VARIANT_BOOL ButtonEnable[];
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetButtonTips,put=PutButtonTips))
    _bstr_t ButtonTips[];
    __declspec(property(get=GetButtonHint,put=PutButtonHint))
    _bstr_t ButtonHint[];
    __declspec(property(get=GetButtonType,put=PutButtonType))
    enum ButtonTypeEnum ButtonType[];
    __declspec(property(get=GetButtonVisible,put=PutButtonVisible))
    VARIANT_BOOL ButtonVisible[];

    //
    // Wrapper methods for error-handling
    //

    void PutButtonChecked (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonChecked (
        long BtnID );
    void PutButtonEnable (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonEnable (
        long BtnID );
    HRESULT AddButton (
        long BtnID,
        const _variant_t & Bmp,
        long InsertAt );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutButtonTips (
        long BtnID,
        _bstr_t PVal );
    _bstr_t GetButtonTips (
        long BtnID );
    void PutButtonHint (
        long BtnID,
        _bstr_t PVal );
    _bstr_t GetButtonHint (
        long BtnID );
    void PutButtonType (
        long BtnID,
        enum ButtonTypeEnum PVal );
    enum ButtonTypeEnum GetButtonType (
        long BtnID );
    void PutButtonVisible (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonVisible (
        long BtnID );
    void PutButtonIconFont (
        long BtnID,
        _bstr_t PVal );
    _bstr_t GetButtonIconFont (
        long BtnID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ButtonChecked (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonChecked (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonEnable (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonEnable (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddButton (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT Bmp,
        /*[in]*/ long InsertAt ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_ButtonTips (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonTips (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonHint (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonHint (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonType (
        /*[in]*/ long BtnID,
        /*[in]*/ enum ButtonTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonType (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ enum ButtonTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonVisible (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonVisible (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonIconFont (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonIconFont (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("06f93fbf-c65a-49b1-83db-c736ba33f0a5"))
IProcessInfoWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCreateWindow,put=PutCreateWindow))
    VARIANT_BOOL CreateWindow;
    __declspec(property(get=GetWindowCaption,put=PutWindowCaption))
    _bstr_t WindowCaption;
    __declspec(property(get=GetCloseProcess,put=PutCloseProcess))
    VARIANT_BOOL CloseProcess;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetHelpId,put=PutHelpId))
    long HelpId;

    //
    // Wrapper methods for error-handling
    //

    void PutCreateWindow (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateWindow ( );
    void PutWindowCaption (
        _bstr_t PVal );
    _bstr_t GetWindowCaption ( );
    void PutCloseProcess (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCloseProcess ( );
    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutText (
        _bstr_t PVal );
    _bstr_t GetText ( );
    void PutHelpId (
        long PVal );
    long GetHelpId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CreateWindow (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateWindow (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_WindowCaption (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_WindowCaption (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_CloseProcess (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CloseProcess (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_HelpId (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_HelpId (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("3f23fd10-1526-414d-93bc-ab273794f654"))
IProcessContextIconMenu : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddMenuCommand (
        long Id,
        _bstr_t Title,
        long Icon,
        _bstr_t IconFont );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddMenuCommand (
        /*[in]*/ long Id,
        /*[in]*/ BSTR Title,
        /*[in]*/ long Icon,
        /*[in]*/ BSTR IconFont,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("89d98e20-a4f4-4f49-8fdf-fe4dc28f208f"))
IEditDoubleManipulator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEditValue,put=PutEditValue))
    double EditValue;
    __declspec(property(get=GetIsEditCreated))
    VARIANT_BOOL IsEditCreated;

    //
    // Wrapper methods for error-handling
    //

    void PutEditValue (
        double PVal );
    double GetEditValue ( );
    VARIANT_BOOL SetValueRange (
        double MinVal,
        double MaxVal );
    VARIANT_BOOL GetIsEditCreated ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_EditValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_EditValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetValueRange (
        /*[in]*/ double MinVal,
        /*[in]*/ double MaxVal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsEditCreated (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("e4e42871-e799-4273-8edb-e5ef83cc66c2"))
IAssociationViewElements : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProjectPositions,put=PutProjectPositions))
    VARIANT_BOOL ProjectPositions;
    __declspec(property(get=GetProjectLeaders,put=PutProjectLeaders))
    VARIANT_BOOL ProjectLeaders;
    __declspec(property(get=GetProjectMarkLeaders,put=PutProjectMarkLeaders))
    VARIANT_BOOL ProjectMarkLeaders;
    __declspec(property(get=GetProjectBrandLeaders,put=PutProjectBrandLeaders))
    VARIANT_BOOL ProjectBrandLeaders;
    __declspec(property(get=GetProjectHiddenComponents,put=PutProjectHiddenComponents))
    VARIANT_BOOL ProjectHiddenComponents;
    __declspec(property(get=GetProjectStandartElements,put=PutProjectStandartElements))
    VARIANT_BOOL ProjectStandartElements;
    __declspec(property(get=GetProjectCurves,put=PutProjectCurves))
    VARIANT_BOOL ProjectCurves;
    __declspec(property(get=GetProjectPoints,put=PutProjectPoints))
    VARIANT_BOOL ProjectPoints;
    __declspec(property(get=GetProjectAllObjects,put=PutProjectAllObjects))
    VARIANT_BOOL ProjectAllObjects;
    __declspec(property(get=GetProjectAllDesignations,put=PutProjectAllDesignations))
    VARIANT_BOOL ProjectAllDesignations;
    __declspec(property(get=GetProjectSpecRough,put=PutProjectSpecRough))
    VARIANT_BOOL ProjectSpecRough;
    __declspec(property(get=GetProjectLayers,put=PutProjectLayers))
    VARIANT_BOOL ProjectLayers;
    __declspec(property(get=GetProjectSketches,put=PutProjectSketches))
    VARIANT_BOOL ProjectSketches;
    __declspec(property(get=GetProjectAxis,put=PutProjectAxis))
    VARIANT_BOOL ProjectAxis;
    __declspec(property(get=GetCreateAxis,put=PutCreateAxis))
    VARIANT_BOOL CreateAxis;
    __declspec(property(get=GetCreateCircularCentres,put=PutCreateCircularCentres))
    VARIANT_BOOL CreateCircularCentres;
    __declspec(property(get=GetCreateLinearCentres,put=PutCreateLinearCentres))
    VARIANT_BOOL CreateLinearCentres;
    __declspec(property(get=GetCreateCentresMarkers,put=PutCreateCentresMarkers))
    VARIANT_BOOL CreateCentresMarkers;
    __declspec(property(get=GetProjectDesTexts,put=PutProjectDesTexts))
    VARIANT_BOOL ProjectDesTexts;
    __declspec(property(get=GetProjectDesTables,put=PutProjectDesTables))
    VARIANT_BOOL ProjectDesTables;
    __declspec(property(get=GetProjectBodies,put=PutProjectBodies))
    VARIANT_BOOL ProjectBodies;
    __declspec(property(get=GetProjectSurfaces,put=PutProjectSurfaces))
    VARIANT_BOOL ProjectSurfaces;
    __declspec(property(get=GetHiddenObjectsVisible,put=PutHiddenObjectsVisible))
    VARIANT_BOOL HiddenObjectsVisible;
    __declspec(property(get=GetProjectThreads,put=PutProjectThreads))
    VARIANT_BOOL ProjectThreads;
    __declspec(property(get=GetProjectDimensions,put=PutProjectDimensions))
    VARIANT_BOOL ProjectDimensions;
    __declspec(property(get=GetProjectRoughs,put=PutProjectRoughs))
    VARIANT_BOOL ProjectRoughs;
    __declspec(property(get=GetProjectBases,put=PutProjectBases))
    VARIANT_BOOL ProjectBases;
    __declspec(property(get=GetProjectTolerances,put=PutProjectTolerances))
    VARIANT_BOOL ProjectTolerances;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetProjectBodies ( );
    void PutProjectBodies (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectSurfaces ( );
    void PutProjectSurfaces (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetHiddenObjectsVisible ( );
    void PutHiddenObjectsVisible (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectThreads ( );
    void PutProjectThreads (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectDimensions ( );
    void PutProjectDimensions (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectRoughs ( );
    void PutProjectRoughs (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectBases ( );
    void PutProjectBases (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectTolerances ( );
    void PutProjectTolerances (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectPositions ( );
    void PutProjectPositions (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectLeaders ( );
    void PutProjectLeaders (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectMarkLeaders ( );
    void PutProjectMarkLeaders (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectBrandLeaders ( );
    void PutProjectBrandLeaders (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectHiddenComponents ( );
    void PutProjectHiddenComponents (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectStandartElements ( );
    void PutProjectStandartElements (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectCurves ( );
    void PutProjectCurves (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectPoints ( );
    void PutProjectPoints (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectAllObjects ( );
    void PutProjectAllObjects (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectAllDesignations ( );
    void PutProjectAllDesignations (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectSpecRough ( );
    void PutProjectSpecRough (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectLayers ( );
    void PutProjectLayers (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectSketches ( );
    void PutProjectSketches (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectAxis ( );
    void PutProjectAxis (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetCreateAxis ( );
    void PutCreateAxis (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetCreateCircularCentres ( );
    void PutCreateCircularCentres (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetCreateLinearCentres ( );
    void PutCreateLinearCentres (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetCreateCentresMarkers ( );
    void PutCreateCentresMarkers (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectDesTexts ( );
    void PutProjectDesTexts (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetProjectDesTables ( );
    void PutProjectDesTables (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProjectBodies (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectBodies (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectSurfaces (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectSurfaces (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_HiddenObjectsVisible (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_HiddenObjectsVisible (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectThreads (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectThreads (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectDimensions (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectDimensions (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectRoughs (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectRoughs (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectBases (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectBases (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectTolerances (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectTolerances (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectPositions (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectPositions (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectLeaders (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectLeaders (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectMarkLeaders (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectMarkLeaders (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectBrandLeaders (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectBrandLeaders (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectHiddenComponents (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectHiddenComponents (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectStandartElements (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectStandartElements (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectCurves (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectCurves (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectPoints (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectPoints (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectAllObjects (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectAllObjects (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectAllDesignations (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectAllDesignations (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectSpecRough (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectSpecRough (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectLayers (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectLayers (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectSketches (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectSketches (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectAxis (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectAxis (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_CreateAxis (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_CreateAxis (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_CreateCircularCentres (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_CreateCircularCentres (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_CreateLinearCentres (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_CreateLinearCentres (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_CreateCentresMarkers (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_CreateCentresMarkers (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectDesTexts (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectDesTexts (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectDesTables (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectDesTables (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("1b94c65d-3473-4ff2-b185-0b1c2c98fcae"))
IBreakViewParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBreaksCount))
    long BreaksCount;
    __declspec(property(get=GetBreaksVisible,put=PutBreaksVisible))
    VARIANT_BOOL BreaksVisible;

    //
    // Wrapper methods for error-handling
    //

    long AddBreakLine (
        double X1,
        double Y1,
        double X2,
        double Y2,
        double Angle );
    VARIANT_BOOL DeleteBreakLine (
        long Index );
    VARIANT_BOOL DeleteAllBreakLines ( );
    VARIANT_BOOL SetBreakLinePosition (
        long Index,
        double X1,
        double Y1,
        double X2,
        double Y2 );
    VARIANT_BOOL GetBreakLinePosition (
        long Index,
        double * X1,
        double * Y1,
        double * X2,
        double * Y2 );
    VARIANT_BOOL SetBreakLineParams (
        long Index,
        double Angle,
        double Clearance,
        enum ksBreakLineTypeEnum BreakLineType,
        double Amplitude,
        double MaxAmplitude );
    VARIANT_BOOL GetBreakLineParams (
        long Index,
        double * Angle,
        double * Clearance,
        enum ksBreakLineTypeEnum * BreakLineType,
        double * Amplitude,
        double * MaxAmplitude );
    long GetBreaksCount ( );
    VARIANT_BOOL GetBreaksVisible ( );
    void PutBreaksVisible (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddBreakLine (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[in]*/ double Angle,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_DeleteBreakLine (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllBreakLines (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBreakLinePosition (
        /*[in]*/ long Index,
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBreakLinePosition (
        /*[in]*/ long Index,
        /*[out]*/ double * X1,
        /*[out]*/ double * Y1,
        /*[out]*/ double * X2,
        /*[out]*/ double * Y2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBreakLineParams (
        /*[in]*/ long Index,
        /*[in]*/ double Angle,
        /*[in]*/ double Clearance,
        /*[in]*/ enum ksBreakLineTypeEnum BreakLineType,
        /*[in]*/ double Amplitude,
        /*[in]*/ double MaxAmplitude,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBreakLineParams (
        /*[in]*/ long Index,
        /*[out]*/ double * Angle,
        /*[out]*/ double * Clearance,
        /*[out]*/ enum ksBreakLineTypeEnum * BreakLineType,
        /*[out]*/ double * Amplitude,
        /*[out]*/ double * MaxAmplitude,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BreaksCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_BreaksVisible (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_BreaksVisible (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("6eda87c9-26c9-4040-ae48-33ad3ea9244f"))
ITexturesParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextureFileName,put=PutTextureFileName))
    _bstr_t TextureFileName[];
    __declspec(property(get=GetTextureHeight,put=PutTextureHeight))
    double TextureHeight[];
    __declspec(property(get=GetTextureWidth,put=PutTextureWidth))
    double TextureWidth[];
    __declspec(property(get=GetTextureDx,put=PutTextureDx))
    double TextureDx[];
    __declspec(property(get=GetTextureDy,put=PutTextureDy))
    double TextureDy[];
    __declspec(property(get=GetTextureAngle,put=PutTextureAngle))
    double TextureAngle[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextureFileName (
        enum ksTextureTypeEnum Type );
    void PutTextureFileName (
        enum ksTextureTypeEnum Type,
        _bstr_t PVal );
    double GetTextureHeight (
        enum ksTextureTypeEnum Type );
    void PutTextureHeight (
        enum ksTextureTypeEnum Type,
        double PVal );
    double GetTextureWidth (
        enum ksTextureTypeEnum Type );
    void PutTextureWidth (
        enum ksTextureTypeEnum Type,
        double PVal );
    double GetTextureDx (
        enum ksTextureTypeEnum Type );
    void PutTextureDx (
        enum ksTextureTypeEnum Type,
        double PVal );
    double GetTextureDy (
        enum ksTextureTypeEnum Type );
    void PutTextureDy (
        enum ksTextureTypeEnum Type,
        double PVal );
    double GetTextureAngle (
        enum ksTextureTypeEnum Type );
    void PutTextureAngle (
        enum ksTextureTypeEnum Type,
        double PVal );
    VARIANT_BOOL Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextureFileName (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_TextureFileName (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_TextureHeight (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TextureHeight (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TextureWidth (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TextureWidth (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TextureDx (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TextureDx (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TextureDy (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TextureDy (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TextureAngle (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TextureAngle (
        /*[in]*/ enum ksTextureTypeEnum Type,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("bec74a2d-02e9-46be-9de4-fc09120ca010"))
IAutoSortObjectsParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoNumerationSymbols,put=PutAutoNumerationSymbols))
    _bstr_t AutoNumerationSymbols;
    __declspec(property(get=GetAutoNumerationEnable,put=PutAutoNumerationEnable))
    VARIANT_BOOL AutoNumerationEnable[];
    __declspec(property(get=GetAutoNumerationObjects,put=PutAutoNumerationObjects))
    _variant_t AutoNumerationObjects;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAutoNumerationSymbols ( );
    void PutAutoNumerationSymbols (
        _bstr_t Result );
    VARIANT_BOOL GetAutoNumerationEnable (
        long ObjectType );
    void PutAutoNumerationEnable (
        long ObjectType,
        VARIANT_BOOL Result );
    _variant_t GetAutoNumerationObjects ( );
    void PutAutoNumerationObjects (
        const _variant_t & Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AutoNumerationSymbols (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_AutoNumerationSymbols (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_AutoNumerationEnable (
        /*[in]*/ long ObjectType,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoNumerationEnable (
        /*[in]*/ long ObjectType,
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AutoNumerationObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_AutoNumerationObjects (
        /*[in]*/ VARIANT Result ) = 0;
};

struct __declspec(uuid("0dc39fc2-4fb1-489e-a76e-e47413199fa3"))
IDrawingDocumentSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetAutoNumber,put=PutSheetAutoNumber))
    VARIANT_BOOL SheetAutoNumber;
    __declspec(property(get=GetSheetFirstNumber,put=PutSheetFirstNumber))
    long SheetFirstNumber;
    __declspec(property(get=GetSheetAutoCount,put=PutSheetAutoCount))
    VARIANT_BOOL SheetAutoCount;
    __declspec(property(get=GetSheetsCount,put=PutSheetsCount))
    long SheetsCount;
    __declspec(property(get=GetTechnicalDemandSynchronize,put=PutTechnicalDemandSynchronize))
    VARIANT_BOOL TechnicalDemandSynchronize;
    __declspec(property(get=GetSheetStampMassUnit,put=PutSheetStampMassUnit))
    enum ksMassUnitsEnum SheetStampMassUnit;
    __declspec(property(get=GetSheetStampMassDesignation,put=PutSheetStampMassDesignation))
    _bstr_t SheetStampMassDesignation[];
    __declspec(property(get=GetSheetStampMassDigitsCount,put=PutSheetStampMassDigitsCount))
    long SheetStampMassDigitsCount;
    __declspec(property(get=GetEmbodimentsTableCreateLinkInStamp,put=PutEmbodimentsTableCreateLinkInStamp))
    VARIANT_BOOL EmbodimentsTableCreateLinkInStamp;
    __declspec(property(get=GetEmbodimentsTableAddNumberInStamp,put=PutEmbodimentsTableAddNumberInStamp))
    VARIANT_BOOL EmbodimentsTableAddNumberInStamp;
    __declspec(property(get=GetEmbodimentsTableAutoFontParamInStamp,put=PutEmbodimentsTableAutoFontParamInStamp))
    VARIANT_BOOL EmbodimentsTableAutoFontParamInStamp;
    __declspec(property(get=GetEmbodimentsTableTextInStamp,put=PutEmbodimentsTableTextInStamp))
    _bstr_t EmbodimentsTableTextInStamp;

    //
    // Wrapper methods for error-handling
    //

    void PutSheetAutoNumber (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSheetAutoNumber ( );
    void PutSheetFirstNumber (
        long PVal );
    long GetSheetFirstNumber ( );
    void PutSheetAutoCount (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSheetAutoCount ( );
    void PutSheetsCount (
        long PVal );
    long GetSheetsCount ( );
    VARIANT_BOOL GetTechnicalDemandSynchronize ( );
    void PutTechnicalDemandSynchronize (
        VARIANT_BOOL Result );
    void PutSheetStampMassUnit (
        enum ksMassUnitsEnum PVal );
    enum ksMassUnitsEnum GetSheetStampMassUnit ( );
    void PutSheetStampMassDesignation (
        enum ksMassUnitsEnum MassUnit,
        _bstr_t Designation );
    _bstr_t GetSheetStampMassDesignation (
        enum ksMassUnitsEnum MassUnit );
    void PutSheetStampMassDigitsCount (
        long PVal );
    long GetSheetStampMassDigitsCount ( );
    void PutEmbodimentsTableCreateLinkInStamp (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEmbodimentsTableCreateLinkInStamp ( );
    void PutEmbodimentsTableAddNumberInStamp (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEmbodimentsTableAddNumberInStamp ( );
    void PutEmbodimentsTableAutoFontParamInStamp (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEmbodimentsTableAutoFontParamInStamp ( );
    void PutEmbodimentsTableTextInStamp (
        _bstr_t PVal );
    _bstr_t GetEmbodimentsTableTextInStamp ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_SheetAutoNumber (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SheetAutoNumber (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SheetFirstNumber (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_SheetFirstNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_SheetAutoCount (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SheetAutoCount (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SheetsCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_SheetsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_TechnicalDemandSynchronize (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_TechnicalDemandSynchronize (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall put_SheetStampMassUnit (
        /*[in]*/ enum ksMassUnitsEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SheetStampMassUnit (
        /*[out,retval]*/ enum ksMassUnitsEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_SheetStampMassDesignation (
        /*[in]*/ enum ksMassUnitsEnum MassUnit,
        /*[in]*/ BSTR Designation ) = 0;
      virtual HRESULT __stdcall get_SheetStampMassDesignation (
        /*[in]*/ enum ksMassUnitsEnum MassUnit,
        /*[out,retval]*/ BSTR * Designation ) = 0;
      virtual HRESULT __stdcall put_SheetStampMassDigitsCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_SheetStampMassDigitsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_EmbodimentsTableCreateLinkInStamp (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EmbodimentsTableCreateLinkInStamp (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EmbodimentsTableAddNumberInStamp (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EmbodimentsTableAddNumberInStamp (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EmbodimentsTableAutoFontParamInStamp (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EmbodimentsTableAutoFontParamInStamp (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EmbodimentsTableTextInStamp (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_EmbodimentsTableTextInStamp (
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("a33d05cf-efff-4bbe-9be0-15d283425828"))
IFragmentDocumentSettings : IDispatch
{};

struct __declspec(uuid("c474582a-2ad4-4ed5-a86a-a169c4da5d54"))
ILibItemSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItemCount))
    long ItemCount;

    //
    // Wrapper methods for error-handling
    //

    long GetItemCount ( );
    double GetItem (
        const _variant_t & Index,
        VARIANT_BOOL * Use );
    VARIANT_BOOL SetItem (
        const _variant_t & Index,
        VARIANT_BOOL Use );
    VARIANT_BOOL GetItems (
        VARIANT * UniqIds,
        VARIANT * Uses );
    VARIANT_BOOL GetItemsEx (
        VARIANT * UniqIds,
        VARIANT * Uses,
        VARIANT * ItemNames,
        VARIANT * FileNames );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ItemCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetItem (
        /*[in]*/ VARIANT Index,
        /*[out]*/ VARIANT_BOOL * Use,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_SetItem (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT_BOOL Use,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetItems (
        /*[out]*/ VARIANT * UniqIds,
        /*[out]*/ VARIANT * Uses,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetItemsEx (
        /*[out]*/ VARIANT * UniqIds,
        /*[out]*/ VARIANT * Uses,
        /*[out]*/ VARIANT * ItemNames,
        /*[out]*/ VARIANT * FileNames,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("be6a80ee-38fe-4432-8331-bf864830761c"))
IColorParam7 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseColor,put=PutUseColor))
    ksUseColorEnum UseColor;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetAmbient,put=PutAmbient))
    double Ambient;
    __declspec(property(get=GetDiffuse,put=PutDiffuse))
    double Diffuse;
    __declspec(property(get=GetSpecularity,put=PutSpecularity))
    double Specularity;
    __declspec(property(get=GetShininess,put=PutShininess))
    double Shininess;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    double Transparency;
    __declspec(property(get=GetEmission,put=PutEmission))
    double Emission;

    //
    // Wrapper methods for error-handling
    //

    ksUseColorEnum GetUseColor ( );
    void PutUseColor (
        ksUseColorEnum PVal );
    long GetColor ( );
    void PutColor (
        long PVal );
    double GetAmbient ( );
    void PutAmbient (
        double PVal );
    double GetDiffuse ( );
    void PutDiffuse (
        double PVal );
    double GetSpecularity ( );
    void PutSpecularity (
        double PVal );
    double GetShininess ( );
    void PutShininess (
        double PVal );
    double GetTransparency ( );
    void PutTransparency (
        double PVal );
    double GetEmission ( );
    void PutEmission (
        double PVal );
    VARIANT_BOOL GetAdvancedColor (
        long * Color,
        double * Ambient,
        double * Diffuse,
        double * Specularity,
        double * Shininess,
        double * Transparency,
        double * Emission );
    VARIANT_BOOL SetAdvancedColor (
        long Color,
        double Ambient,
        double Diffuse,
        double Specularity,
        double Shininess,
        double Transparency,
        double Emission );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseColor (
        /*[out,retval]*/ ksUseColorEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_UseColor (
        /*[in]*/ ksUseColorEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Ambient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Ambient (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Diffuse (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Diffuse (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Specularity (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Specularity (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Shininess (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Shininess (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Emission (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Emission (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_GetAdvancedColor (
        /*[out]*/ long * Color,
        /*[out]*/ double * Ambient,
        /*[out]*/ double * Diffuse,
        /*[out]*/ double * Specularity,
        /*[out]*/ double * Shininess,
        /*[out]*/ double * Transparency,
        /*[out]*/ double * Emission,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetAdvancedColor (
        /*[in]*/ long Color,
        /*[in]*/ double Ambient,
        /*[in]*/ double Diffuse,
        /*[in]*/ double Specularity,
        /*[in]*/ double Shininess,
        /*[in]*/ double Transparency,
        /*[in]*/ double Emission,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("16777c2b-829d-4405-b5c7-71eafca17bfa"))
INewDocument3DSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorParam))
    IColorParam7Ptr ColorParam;

    //
    // Wrapper methods for error-handling
    //

    IColorParam7Ptr GetColorParam ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColorParam (
        /*[out,retval]*/ struct IColorParam7 * * Result ) = 0;
};

struct __declspec(uuid("040c027e-d385-4a7a-96bd-296df0b9e70e"))
ISerializer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXML,put=PutXML))
    _bstr_t XML;

    //
    // Wrapper methods for error-handling
    //

    void PutXML (
        _bstr_t Result );
    _bstr_t GetXML ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_XML (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_XML (
        /*[out,retval]*/ BSTR * Result ) = 0;
};

struct __declspec(uuid("9f2f27e7-8fb2-4c6c-a54d-35db240060d8"))
ICellFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    long TextStyle;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetOneLine,put=PutOneLine))
    VARIANT_BOOL OneLine;
    __declspec(property(get=GetLeftEdge,put=PutLeftEdge))
    double LeftEdge;
    __declspec(property(get=GetRightEdge,put=PutRightEdge))
    double RightEdge;
    __declspec(property(get=GetSpaceBefore,put=PutSpaceBefore))
    double SpaceBefore;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    double SpaceAfter;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHFormat,put=PutHFormat))
    enum ksTextHorizontalFormatEnum HFormat;
    __declspec(property(get=GetVFormat,put=PutVFormat))
    VARIANT_BOOL VFormat;

    //
    // Wrapper methods for error-handling
    //

    long GetTextStyle ( );
    void PutTextStyle (
        long Result );
    VARIANT_BOOL GetReadOnly ( );
    void PutReadOnly (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetOneLine ( );
    void PutOneLine (
        VARIANT_BOOL Result );
    double GetLeftEdge ( );
    void PutLeftEdge (
        double Result );
    double GetRightEdge ( );
    void PutRightEdge (
        double Result );
    double GetSpaceBefore ( );
    void PutSpaceBefore (
        double Result );
    double GetSpaceAfter ( );
    void PutSpaceAfter (
        double Result );
    double GetWidth ( );
    void PutWidth (
        double Result );
    double GetHeight ( );
    void PutHeight (
        double Result );
    enum ksTextHorizontalFormatEnum GetHFormat ( );
    void PutHFormat (
        enum ksTextHorizontalFormatEnum Result );
    VARIANT_BOOL GetVFormat ( );
    void PutVFormat (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_OneLine (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_OneLine (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_LeftEdge (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LeftEdge (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_RightEdge (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_RightEdge (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_SpaceBefore (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_SpaceBefore (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_SpaceAfter (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_SpaceAfter (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_HFormat (
        /*[out,retval]*/ enum ksTextHorizontalFormatEnum * Result ) = 0;
      virtual HRESULT __stdcall put_HFormat (
        /*[in]*/ enum ksTextHorizontalFormatEnum Result ) = 0;
      virtual HRESULT __stdcall get_VFormat (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_VFormat (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("1e29e849-1d1e-4791-bd31-8ef00ed5d118"))
ICellBoundaries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    enum ksCurveStyleEnum LineStyle[];
    __declspec(property(get=GetLineVisible,put=PutLineVisible))
    VARIANT_BOOL LineVisible[];

    //
    // Wrapper methods for error-handling
    //

    enum ksCurveStyleEnum GetLineStyle (
        enum ksCellBoundariesEnum Index );
    void PutLineStyle (
        enum ksCellBoundariesEnum Index,
        enum ksCurveStyleEnum Result );
    VARIANT_BOOL GetLineVisible (
        enum ksCellBoundariesEnum Index );
    void PutLineVisible (
        enum ksCellBoundariesEnum Index,
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineStyle (
        /*[in]*/ enum ksCellBoundariesEnum Index,
        /*[out,retval]*/ enum ksCurveStyleEnum * Result ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum ksCellBoundariesEnum Index,
        /*[in]*/ enum ksCurveStyleEnum Result ) = 0;
      virtual HRESULT __stdcall get_LineVisible (
        /*[in]*/ enum ksCellBoundariesEnum Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_LineVisible (
        /*[in]*/ enum ksCellBoundariesEnum Index,
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("d78e47dc-172b-4824-a519-9bc2c0387b5c"))
ITableRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCells))
    _variant_t Cells;
    __declspec(property(get=GetCellsFormat))
    ICellFormatPtr CellsFormat;
    __declspec(property(get=GetCellsBoundaries))
    ICellBoundariesPtr CellsBoundaries;
    __declspec(property(get=GetTexts,put=PutTexts))
    _variant_t Texts;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL CombineCells ( );
    VARIANT_BOOL DivideCells (
        long ColumnCount,
        long RowCount,
        VARIANT_BOOL PrepareCombine );
    VARIANT_BOOL ClearCells ( );
    _variant_t GetCells ( );
    ICellFormatPtr GetCellsFormat ( );
    ICellBoundariesPtr GetCellsBoundaries ( );
    _variant_t GetTexts ( );
    void PutTexts (
        const _variant_t & PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CombineCells (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall raw_DivideCells (
        /*[in]*/ long ColumnCount,
        /*[in]*/ long RowCount,
        VARIANT_BOOL PrepareCombine,
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall raw_ClearCells (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_CellsFormat (
        /*[out,retval]*/ struct ICellFormat * * Val ) = 0;
      virtual HRESULT __stdcall get_CellsBoundaries (
        /*[out,retval]*/ struct ICellBoundaries * * Val ) = 0;
      virtual HRESULT __stdcall get_Texts (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Texts (
        /*[in]*/ VARIANT PVal ) = 0;
};

struct __declspec(uuid("5a89c538-e0dd-4c21-b3d1-3bf65eeb8c3e"))
ksPropertyManagerNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL ButtonClick (
        long ButtonID );
    VARIANT_BOOL ChangeControlValue (
        struct IPropertyControl * Control );
    VARIANT_BOOL ControlCommand (
        struct IPropertyControl * Control,
        long ButtonID );
    VARIANT_BOOL ButtonUpdate (
        long ButtonID,
        long * Check,
        VARIANT_BOOL * Enable );
    VARIANT_BOOL ProcessActivate ( );
    VARIANT_BOOL ProcessDeactivate ( );
    VARIANT_BOOL CommandHelp (
        long Id );
    VARIANT_BOOL SelectItem (
        struct IPropertyControl * Control,
        long Index,
        VARIANT_BOOL Select );
    VARIANT_BOOL CheckItem (
        struct IPropertyControl * Control,
        long Index,
        VARIANT_BOOL Check );
    VARIANT_BOOL ChangeActiveTab (
        long TabIndex );
    VARIANT_BOOL EditFocus (
        struct IPropertyControl * Control,
        VARIANT_BOOL Set );
    VARIANT_BOOL UserMenuCommand (
        struct IPropertyControl * Control,
        long MenuID );
    VARIANT_BOOL LayoutChanged ( );
    VARIANT_BOOL GetContextMenuType (
        long LX,
        long LY,
        long * ContextMenuType );
    VARIANT_BOOL FillContextPanel (
        struct IProcessContextPanel * ContextPanel );
    VARIANT_BOOL FillContextIconMenu (
        struct IProcessContextIconMenu * ContextMenu );
    VARIANT_BOOL EndEditItem (
        struct IPropertyControl * Control,
        long Index );
    VARIANT_BOOL ChangeTabExpanded (
        long TabIndex );
    VARIANT_BOOL DoubleClickItem (
        struct IPropertyControl * Control,
        long Index );
};

struct __declspec(uuid("5a31bb02-026c-4419-a0ff-a93cf58dca99"))
ksPropertyUserControlNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL CreateOCX (
        IDispatch * IOcx );
    VARIANT_BOOL DestroyOCX ( );
};

struct __declspec(uuid("6ecbb531-5609-4364-ac92-7a6a21d23313"))
ksDocumentFrameNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginPaint (
        struct IPaintObject * PaintObj );
    VARIANT_BOOL ClosePaint (
        struct IPaintObject * PaintObj );
    VARIANT_BOOL MouseDown (
        short NButton,
        short NShiftState,
        long X,
        long Y );
    VARIANT_BOOL MouseUp (
        short NButton,
        short NShiftState,
        long X,
        long Y );
    VARIANT_BOOL MouseDblClick (
        short NButton,
        short NShiftState,
        long X,
        long Y );
    VARIANT_BOOL BeginPaintGL (
        struct ksGLObject * GlObj,
        long DrawMode );
    VARIANT_BOOL ClosePaintGL (
        struct ksGLObject * GlObj,
        long DrawMode );
    VARIANT_BOOL AddGabarit (
        struct IGabaritObject * GabObj );
    VARIANT_BOOL Activate ( );
    VARIANT_BOOL Deactivate ( );
    VARIANT_BOOL CloseFrame ( );
    VARIANT_BOOL MouseMove (
        short NShiftState,
        long X,
        long Y );
    VARIANT_BOOL ShowOcxTree (
        IDispatch * Ocx,
        VARIANT_BOOL Show );
    VARIANT_BOOL BeginPaintTmpObjects ( );
    VARIANT_BOOL ClosePaintTmpObjects ( );
};

struct __declspec(uuid("4d14726d-0ec2-49ce-b02c-fedaa6d65bbd"))
IPaintObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    OLE_HANDLE GetHWND ( );
    HRESULT GetTransformMatrix (
        double * A11,
        double * A12,
        double * A13,
        double * A14,
        double * A21,
        double * A22,
        double * A23,
        double * A24 );
    _bstr_t GetDIBForOutput ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetHWND (
        /*[out,retval]*/ OLE_HANDLE * HWnd ) = 0;
      virtual HRESULT __stdcall raw_GetTransformMatrix (
        /*[out]*/ double * A11,
        /*[out]*/ double * A12,
        /*[out]*/ double * A13,
        /*[out]*/ double * A14,
        /*[out]*/ double * A21,
        /*[out]*/ double * A22,
        /*[out]*/ double * A23,
        /*[out]*/ double * A24 ) = 0;
      virtual HRESULT __stdcall raw_GetDIBForOutput (
        /*[out,retval]*/ BSTR * MapFileName ) = 0;
};

struct __declspec(uuid("b1c65023-b908-4cad-9238-c5026520e62c"))
ksGLObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL glBegin (
        long Mode );
    VARIANT_BOOL glEnd ( );
    VARIANT_BOOL glEnable (
        long Cap );
    VARIANT_BOOL glDisable (
        long Cap );
    VARIANT_BOOL glColor3d (
        double R,
        double G,
        double B );
    VARIANT_BOOL glLineWidth (
        double W );
    VARIANT_BOOL glLineStipple (
        long Factor,
        short Pattern );
    VARIANT_BOOL glPointSize (
        double W );
    VARIANT_BOOL glPolygonMode (
        long Face,
        long Mode );
    VARIANT_BOOL glVertex2d (
        double X,
        double Y );
    VARIANT_BOOL glVertex2dv (
        double * PData,
        long CountDouble );
    VARIANT_BOOL glVertex3d (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL glVertex3dv (
        double * PData,
        long CountDouble );
    VARIANT_BOOL glVertex4d (
        double X,
        double Y,
        double Z,
        double W );
    VARIANT_BOOL glVertex4dv (
        double * PData,
        long CountDouble );
};

struct __declspec(uuid("b6674824-cd9d-4220-b2cb-9f939a9c35c8"))
IGabaritObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCurrentGabarit (
        long NPage,
        double * P1X,
        double * P1Y,
        double * P1Z,
        double * P2X,
        double * P2Y,
        double * P2Z );
    VARIANT_BOOL AddGabarit (
        double X1,
        double Y1,
        double Z1,
        double X2,
        double Y2,
        double Z2 );
    VARIANT_BOOL GetGabaritModifying ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetCurrentGabarit (
        /*[in]*/ long NPage,
        /*[out]*/ double * P1X,
        /*[out]*/ double * P1Y,
        /*[out]*/ double * P1Z,
        /*[out]*/ double * P2X,
        /*[out]*/ double * P2Y,
        /*[out]*/ double * P2Z,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddGabarit (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double Z1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[in]*/ double Z2,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetGabaritModifying (
        /*[out,retval]*/ VARIANT_BOOL * DocGabaritModify ) = 0;
};

struct __declspec(uuid("e335a73f-df27-4d33-8cbd-e928f797fb94"))
ksDrawingObjectNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL ChangeActive (
        const _variant_t & Obj );
    VARIANT_BOOL BeginDelete (
        const _variant_t & Objects );
    VARIANT_BOOL Delete (
        const _variant_t & Objects );
    VARIANT_BOOL BeginMove (
        const _variant_t & Objects );
    VARIANT_BOOL Move (
        const _variant_t & Objects );
    VARIANT_BOOL BeginRotate (
        const _variant_t & Objects );
    VARIANT_BOOL Rotate (
        const _variant_t & Objects );
    VARIANT_BOOL BeginScale (
        const _variant_t & Objects );
    VARIANT_BOOL Scale (
        const _variant_t & Objects );
    VARIANT_BOOL BeginTransform (
        const _variant_t & Objects );
    VARIANT_BOOL Transform (
        const _variant_t & Objects );
    VARIANT_BOOL BeginCopy (
        const _variant_t & Objects );
    VARIANT_BOOL Copy (
        const _variant_t & Objects );
    VARIANT_BOOL BeginSymmetry (
        const _variant_t & Objects );
    VARIANT_BOOL Symmetry (
        const _variant_t & Objects );
    VARIANT_BOOL BeginProcess (
        long PType,
        const _variant_t & ObjRef );
    VARIANT_BOOL EndProcess (
        long PType );
    VARIANT_BOOL CreateObject (
        const _variant_t & Objects );
    VARIANT_BOOL UpdateObject (
        const _variant_t & Objects );
    VARIANT_BOOL BeginDestroyObject (
        const _variant_t & Objects );
    VARIANT_BOOL DestroyObject (
        const _variant_t & Objects );
    VARIANT_BOOL BeginPropertyChanged (
        const _variant_t & Objects );
    VARIANT_BOOL PropertyChanged (
        const _variant_t & Objects );
};

struct __declspec(uuid("fc04c62e-ab0f-4614-b3d9-0ea8671ceb08"))
ksViewsAndLayersManagerNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginEdit ( );
    VARIANT_BOOL EndEdit (
        VARIANT_BOOL IsOk );
};

struct __declspec(uuid("9b9cc387-e217-4eed-bce9-9e1d645b49ee"))
ksLibraryManagerNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginAttach (
        struct ILibrary * PLibrary );
    VARIANT_BOOL Attach (
        struct ILibrary * PLibrary );
    VARIANT_BOOL BeginDetach (
        struct ILibrary * PLibrary );
    VARIANT_BOOL Detach (
        struct ILibrary * PLibrary );
    VARIANT_BOOL BeginExecute (
        struct ILibrary * PLibrary );
    VARIANT_BOOL EndExecute (
        struct ILibrary * PLibrary );
    VARIANT_BOOL SystemControlStop (
        struct ILibrary * PLibrary );
    VARIANT_BOOL SystemControlStart (
        struct ILibrary * PLibrary );
    VARIANT_BOOL AddLibraryDescription (
        struct ILibrary * PLibrary );
    VARIANT_BOOL DeleteLibraryDescription (
        struct ILibrary * PLibrary );
    VARIANT_BOOL AddInsert (
        struct IInsert * PInsert,
        VARIANT_BOOL Create );
    VARIANT_BOOL DeleteInsert (
        struct IInsert * PInsert );
    VARIANT_BOOL EditInsert (
        struct ILibrary * PLibrary,
        struct IKompasDocument * PDoc,
        VARIANT_BOOL NewFrw );
    VARIANT_BOOL TryExecute (
        struct ILibrary * PLibrary,
        long CommandID );
    VARIANT_BOOL BeginInsertDocument (
        struct ILibrary * PLibrary,
        long InsertionType,
        _bstr_t Insertion );
};

struct __declspec(uuid("a0da14e6-4f92-4d18-8cd1-2bbab695ce13"))
ksSpecificationDescriptionNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL TuningSpcStyleBeginChange (
        struct ISpecificationDescription * Descr );
    VARIANT_BOOL TuningSpcStyleChange (
        struct ISpecificationDescription * Descr,
        VARIANT_BOOL IsOk );
    VARIANT_BOOL ChangeCurrentSpcDescription (
        struct ISpecificationDescription * Descr );
    VARIANT_BOOL SpcDescriptionAdd (
        struct ISpecificationDescription * Descr );
    VARIANT_BOOL SpcDescriptionRemove (
        struct ISpecificationDescription * Descr );
    VARIANT_BOOL SpcDescriptionBeginEdit (
        struct ISpecificationDescription * Descr );
    VARIANT_BOOL SpcDescriptionEdit (
        struct ISpecificationDescription * Descr,
        VARIANT_BOOL IsOk );
    VARIANT_BOOL SynchronizationBegin ( );
    VARIANT_BOOL Synchronization ( );
    VARIANT_BOOL BeginCalcPositions ( );
    VARIANT_BOOL CalcPositions ( );
    VARIANT_BOOL BeginCreateObject (
        long TypeObj );
};

struct __declspec(uuid("1c4dec41-a8ea-40ee-9ac8-f807232db874"))
ksSpecificationObjectNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginDelete (
        struct ISpecificationObject * Obj );
    VARIANT_BOOL Delete (
        struct ISpecificationObject * Obj );
    VARIANT_BOOL CellDblClick (
        struct ISpecificationObject * Obj,
        long Number );
    VARIANT_BOOL CellBeginEdit (
        struct ISpecificationObject * Obj,
        long Number );
    VARIANT_BOOL ChangeCurrent (
        struct ISpecificationObject * Obj );
    VARIANT_BOOL DocumentBeginAdd (
        struct ISpecificationObject * Obj );
    VARIANT_BOOL DocumentAdd (
        struct ISpecificationObject * Obj,
        _bstr_t DocName );
    VARIANT_BOOL DocumentRemove (
        struct ISpecificationObject * Obj,
        _bstr_t DocName );
    VARIANT_BOOL BeginGeomChange (
        struct ISpecificationObject * Obj );
    VARIANT_BOOL GeomChange (
        struct ISpecificationObject * Obj );
    VARIANT_BOOL BeginProcess (
        long PType,
        struct ISpecificationObject * Obj );
    VARIANT_BOOL EndProcess (
        long PType );
    VARIANT_BOOL CreateObject (
        struct ISpecificationObject * Obj );
    VARIANT_BOOL UpdateObject (
        struct ISpecificationObject * Obj );
};

struct __declspec(uuid("58e30500-6073-4337-bfc1-32a74ea17de8"))
ksLayoutSheetsNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Add (
        struct ILayoutSheet * PSheet );
    VARIANT_BOOL Delete (
        struct ILayoutSheet * PSheet );
    VARIANT_BOOL Update (
        struct ILayoutSheet * PSheet );
};

struct __declspec(uuid("7b8e86e1-4304-449d-9cec-1b14f74a16fb"))
ksModelObjectNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginDelete (
        const _variant_t & Obj );
    VARIANT_BOOL Delete (
        const _variant_t & Obj );
    VARIANT_BOOL Excluded (
        const _variant_t & Obj,
        VARIANT_BOOL Excluded );
    VARIANT_BOOL Hidden (
        const _variant_t & Obj,
        VARIANT_BOOL _Hidden );
    VARIANT_BOOL BeginPropertyChanged (
        const _variant_t & Obj );
    VARIANT_BOOL PropertyChanged (
        const _variant_t & Obj );
    VARIANT_BOOL BeginPlacementChanged (
        const _variant_t & Obj );
    VARIANT_BOOL PlacementChanged (
        const _variant_t & Obj );
    VARIANT_BOOL BeginProcess (
        long PType,
        const _variant_t & PObj );
    VARIANT_BOOL EndProcess (
        long PType );
    VARIANT_BOOL CreateObject (
        const _variant_t & Obj );
    VARIANT_BOOL UpdateObject (
        const _variant_t & Obj );
    VARIANT_BOOL BeginLoadStateChange (
        const _variant_t & Obj,
        long LoadState );
    VARIANT_BOOL LoadStateChange (
        const _variant_t & Obj,
        long LoadState );
};

struct __declspec(uuid("c784d45b-8c68-4189-8f27-a3b0d6cfaeb2"))
ksDocument3DNotify7 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginRebuild ( );
    VARIANT_BOOL Rebuild ( );
    VARIANT_BOOL BeginChoiceMaterial ( );
    VARIANT_BOOL ChoiceMaterial (
        _bstr_t Material,
        double Density );
    VARIANT_BOOL BeginChoiceMarking ( );
    VARIANT_BOOL ChoiceMarking (
        _bstr_t Marking );
    VARIANT_BOOL BeginSetPartFromFile ( );
    VARIANT_BOOL BeginCreatePartFromFile (
        VARIANT_BOOL TypeDoc,
        struct IModelObject * Plane );
    VARIANT_BOOL CreateEmbodiment (
        _bstr_t Marking );
    VARIANT_BOOL DeleteEmbodiment (
        _bstr_t Marking );
    VARIANT_BOOL ChangeCurrentEmbodiment (
        _bstr_t Marking );
    VARIANT_BOOL BeginChoiceProperty (
        IDispatch * Obj,
        double propID );
    VARIANT_BOOL ChoiceProperty (
        IDispatch * Obj,
        double propID );
    VARIANT_BOOL BeginRollbackFeatures ( );
    VARIANT_BOOL RollbackFeatures ( );
    VARIANT_BOOL BedinLoadCombinationChange (
        long Index );
    VARIANT_BOOL LoadCombinationChange (
        long Index );
};

struct __declspec(uuid("7278f9ec-ac53-4861-9e9e-199b59f82a9a"))
ksProcess2DNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL PlacementChange (
        double X,
        double Y,
        double Angle,
        VARIANT_BOOL Dynamic );
    VARIANT_BOOL ExecuteCommand (
        long Command );
    VARIANT_BOOL Run ( );
    VARIANT_BOOL Stop ( );
    VARIANT_BOOL Activate ( );
    VARIANT_BOOL Deactivate ( );
    VARIANT_BOOL EndProcess ( );
    VARIANT_BOOL GetMouseEnterLeavePoint (
        IDispatch * Control,
        long BtnID,
        long PointIndex,
        IDispatch * Parameters );
    VARIANT_BOOL AbortProcess ( );
};

struct __declspec(uuid("e896df8d-6be9-473a-b7b4-38050cdef537"))
ksProcess3DNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL PlacementChange (
        IDispatch * Object );
    VARIANT_BOOL ExecuteCommand (
        long Command );
    VARIANT_BOOL Run ( );
    VARIANT_BOOL Stop ( );
    VARIANT_BOOL Activate ( );
    VARIANT_BOOL Deactivate ( );
    VARIANT_BOOL FilterObject (
        IDispatch * Object );
    VARIANT_BOOL CreateTakeObject (
        IDispatch * Object );
    VARIANT_BOOL EndProcess ( );
    VARIANT_BOOL ProcessingGroupObjects (
        const _variant_t & Objects,
        long selectionType );
    VARIANT_BOOL AbortProcess ( );
};

struct __declspec(uuid("73653933-51b5-49d6-9ef2-6667639283cc"))
IModelObjectNotifyResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNotifyType))
    enum ksObject3DNotifyEnum NotifyType;
    __declspec(property(get=GetNotifyObjects))
    _variant_t NotifyObjects;
    __declspec(property(get=GetProcessType))
    enum ProcessTypeEnum ProcessType;
    __declspec(property(get=GetIsUndoMode))
    VARIANT_BOOL IsUndoMode;
    __declspec(property(get=GetIsRedoMode))
    VARIANT_BOOL IsRedoMode;

    //
    // Wrapper methods for error-handling
    //

    enum ksObject3DNotifyEnum GetNotifyType ( );
    _variant_t GetNotifyObjects ( );
    enum ProcessTypeEnum GetProcessType ( );
    VARIANT_BOOL GetIsUndoMode ( );
    VARIANT_BOOL GetIsRedoMode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NotifyType (
        /*[out,retval]*/ enum ksObject3DNotifyEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_NotifyObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_ProcessType (
        /*[out,retval]*/ enum ProcessTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_IsUndoMode (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_IsRedoMode (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("7be2f563-98ad-4f96-891e-c568c0ccd61b"))
ksContentDialogNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL CreateContentCallback (
        OLE_HANDLE ParentHwnd,
        OLE_HANDLE * NewContentHwnd );
    VARIANT_BOOL DestroyContent ( );
    VARIANT_BOOL ExecuteCommand (
        long ButtonID );
    VARIANT_BOOL ButtonUpdate (
        long ButtonID,
        long * Check,
        VARIANT_BOOL * Enable );
};

struct __declspec(uuid("45b82b5c-d0b7-4ac5-965c-26b09612cbf6"))
ksProcess3DManipulatorsNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL RotateManipulator (
        long ManipulatorId,
        double X0,
        double Y0,
        double Z0,
        double AxisZX,
        double AxisZXY,
        double AxisZZ,
        double Angle,
        VARIANT_BOOL FromEdit );
    VARIANT_BOOL MoveManipulator (
        long ManipulatorId,
        double VX,
        double VY,
        double VZ,
        double Delta,
        VARIANT_BOOL FromEdit );
    VARIANT_BOOL ClickManipulatorPrimitive (
        long ManipulatorId,
        enum ksManipulatorPrimitiveEnum PrimitiveType,
        VARIANT_BOOL DoubleClick );
    VARIANT_BOOL BeginDragManipulator (
        long ManipulatorId,
        enum ksManipulatorPrimitiveEnum PrimitiveType );
    VARIANT_BOOL EndDragManipulator (
        long ManipulatorId,
        enum ksManipulatorPrimitiveEnum PrimitiveType );
    VARIANT_BOOL CreateManipulatorEdit (
        long ManipulatorId,
        enum ksManipulatorPrimitiveEnum PrimitiveType );
    VARIANT_BOOL DestroyManipulatorEdit (
        long ManipulatorId );
    VARIANT_BOOL ChangeManipulatorValue (
        long ManipulatorId,
        enum ksManipulatorPrimitiveEnum PrimitiveType,
        double newValue );
};

struct __declspec(uuid("b6db286d-a060-4107-a693-19d135c47751"))
ksPLMObjectNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL PLMStatusChanged (
        IDispatch * Object,
        long newValue );
    VARIANT_BOOL PLMChangeChanged (
        IDispatch * Object,
        long newValue );
};

struct __declspec(uuid("f7694c56-6108-4b75-bac6-87fb246831f9"))
ksFindObject3DParametersNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL FilterObject (
        IDispatch * Object );
};

struct __declspec(uuid("666c987f-2700-4c35-b8ce-db8bfb5aaf02"))
IMassInertiaParam7 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetZc,put=PutZc))
    double Zc;
    __declspec(property(get=GetManualMassCentre,put=PutManualMassCentre))
    VARIANT_BOOL ManualMassCentre;
    __declspec(property(get=GetLengthUnits,put=PutLengthUnits))
    enum ksLengthUnitsEnum LengthUnits;
    __declspec(property(get=GetMassUnits,put=PutMassUnits))
    enum ksMassUnitsEnum MassUnits;
    __declspec(property(put=PutManualMass))
    double ManualMass;
    __declspec(property(get=GetCalculateMass))
    double CalculateMass;
    __declspec(property(get=GetMassSettingMode,put=PutMassSettingMode))
    enum ksMassSettingModeEnum MassSettingMode;
    __declspec(property(put=PutManualDensity))
    double ManualDensity;
    __declspec(property(get=GetHandBookDensity))
    double HandBookDensity;
    __declspec(property(get=GetDensityMode,put=PutDensityMode))
    VARIANT_BOOL DensityMode;
    __declspec(property(get=GetVolume))
    double Volume;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    VARIANT_BOOL SourceData;
    __declspec(property(get=GetActual))
    VARIANT_BOOL Actual;
    __declspec(property(get=GetLX))
    double LX;
    __declspec(property(get=GetLY))
    double LY;
    __declspec(property(get=GetLz))
    double Lz;
    __declspec(property(get=GetLxy))
    double Lxy;
    __declspec(property(get=GetLxz))
    double Lxz;
    __declspec(property(get=GetLyz))
    double Lyz;
    __declspec(property(get=GetJx))
    double Jx;
    __declspec(property(get=GetJy))
    double Jy;
    __declspec(property(get=GetJz))
    double Jz;
    __declspec(property(get=GetJxy))
    double Jxy;
    __declspec(property(get=GetJxz))
    double Jxz;
    __declspec(property(get=GetJyz))
    double Jyz;
    __declspec(property(get=GetJx0))
    double Jx0;
    __declspec(property(get=GetJy0))
    double Jy0;
    __declspec(property(get=GetJz0))
    double Jz0;
    __declspec(property(get=GetMass))
    double Mass;
    __declspec(property(get=GetDensity))
    double Density;
    __declspec(property(get=GetMaterial))
    _bstr_t Material;
    __declspec(property(get=GetMaterialLocation,put=PutMaterialLocation))
    _bstr_t MaterialLocation;
    __declspec(property(get=GetCopySourceData,put=PutCopySourceData))
    VARIANT_BOOL CopySourceData;

    //
    // Wrapper methods for error-handling
    //

    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutZc (
        double PVal );
    double GetZc ( );
    void PutManualMassCentre (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetManualMassCentre ( );
    void PutLengthUnits (
        enum ksLengthUnitsEnum PVal );
    enum ksLengthUnitsEnum GetLengthUnits ( );
    void PutMassUnits (
        enum ksMassUnitsEnum PVal );
    enum ksMassUnitsEnum GetMassUnits ( );
    void PutManualMass (
        double _arg1 );
    double GetCalculateMass ( );
    void PutMassSettingMode (
        enum ksMassSettingModeEnum PVal );
    enum ksMassSettingModeEnum GetMassSettingMode ( );
    void PutManualDensity (
        double _arg1 );
    double GetHandBookDensity ( );
    void PutDensityMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDensityMode ( );
    double GetVolume ( );
    double GetArea ( );
    void PutSourceData (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSourceData ( );
    VARIANT_BOOL GetActual ( );
    VARIANT_BOOL Calculate ( );
    double GetLX ( );
    double GetLY ( );
    double GetLz ( );
    double GetLxy ( );
    double GetLxz ( );
    double GetLyz ( );
    double GetJx ( );
    double GetJy ( );
    double GetJz ( );
    double GetJxy ( );
    double GetJxz ( );
    double GetJyz ( );
    double GetJx0 ( );
    double GetJy0 ( );
    double GetJz0 ( );
    VARIANT_BOOL GetAxisX (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetAxisY (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetAxisZ (
        double * X,
        double * Y,
        double * Z );
    double GetMass ( );
    double GetDensity ( );
    _bstr_t GetMaterial ( );
    VARIANT_BOOL SetMaterial (
        _bstr_t Name,
        double Density );
    void PutMaterialLocation (
        _bstr_t PVal );
    _bstr_t GetMaterialLocation ( );
    void PutCopySourceData (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCopySourceData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Zc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Zc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ManualMassCentre (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ManualMassCentre (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthUnits (
        /*[in]*/ enum ksLengthUnitsEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LengthUnits (
        /*[out,retval]*/ enum ksLengthUnitsEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_MassUnits (
        /*[in]*/ enum ksMassUnitsEnum PVal ) = 0;
      virtual HRESULT __stdcall get_MassUnits (
        /*[out,retval]*/ enum ksMassUnitsEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ManualMass (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall get_CalculateMass (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MassSettingMode (
        /*[in]*/ enum ksMassSettingModeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_MassSettingMode (
        /*[out,retval]*/ enum ksMassSettingModeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ManualDensity (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall get_HandBookDensity (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DensityMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DensityMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SourceData (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SourceData (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Actual (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_LX (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_LY (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Lz (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Lxy (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Lxz (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Lyz (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jx (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jy (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jz (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jxy (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jxz (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jyz (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jx0 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jy0 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jz0 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetAxisX (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_GetAxisY (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_GetAxisZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_Mass (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaterial (
        /*[in]*/ BSTR Name,
        /*[in]*/ double Density,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MaterialLocation (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_MaterialLocation (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_CopySourceData (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CopySourceData (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("b90d597d-4213-4a59-98d4-0b67e719551b"))
IThinParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetThin,put=PutThin))
    VARIANT_BOOL Thin;
    __declspec(property(get=GetThinType,put=PutThinType))
    ksDirectionTypeEnum ThinType;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness[];

    //
    // Wrapper methods for error-handling
    //

    void PutThin (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetThin ( );
    void PutThinType (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetThinType ( );
    void PutThickness (
        VARIANT_BOOL Normal,
        double PVal );
    double GetThickness (
        VARIANT_BOOL Normal );
    VARIANT_BOOL GetThinParameters (
        VARIANT_BOOL * Thin,
        ksDirectionTypeEnum * ThinType,
        double * ThicknessNormal,
        double * ThicknessReverse );
    VARIANT_BOOL SetThinParameters (
        VARIANT_BOOL Thin,
        ksDirectionTypeEnum ThinType,
        double ThicknessNormal,
        double ThicknessReverse );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Thin (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Thin (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ThinType (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ThinType (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetThinParameters (
        /*[out]*/ VARIANT_BOOL * Thin,
        /*[out]*/ ksDirectionTypeEnum * ThinType,
        /*[out]*/ double * ThicknessNormal,
        /*[out]*/ double * ThicknessReverse,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetThinParameters (
        /*[in]*/ VARIANT_BOOL Thin,
        /*[in]*/ ksDirectionTypeEnum ThinType,
        /*[in]*/ double ThicknessNormal,
        /*[in]*/ double ThicknessReverse,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("7bf80daa-25f8-4aff-afea-cad390d4275d"))
IChooseBodies7 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChooseBodiesType,put=PutChooseBodiesType))
    enum ksChooseBodiesType ChooseBodiesType;
    __declspec(property(get=GetBodies,put=PutBodies))
    _variant_t Bodies;

    //
    // Wrapper methods for error-handling
    //

    void PutChooseBodiesType (
        enum ksChooseBodiesType Type );
    enum ksChooseBodiesType GetChooseBodiesType ( );
    void PutBodies (
        const _variant_t & Result );
    _variant_t GetBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ChooseBodiesType (
        /*[in]*/ enum ksChooseBodiesType Type ) = 0;
      virtual HRESULT __stdcall get_ChooseBodiesType (
        /*[out,retval]*/ enum ksChooseBodiesType * Type ) = 0;
      virtual HRESULT __stdcall put_Bodies (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Bodies (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("6d2ee9a7-4c9f-4606-91a5-9941c20701e5"))
IChooseObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChooseParts,put=PutChooseParts))
    _variant_t ChooseParts;
    __declspec(property(get=GetChooseType,put=PutChooseType))
    enum ksChooseType ChooseType;
    __declspec(property(get=GetChoosePartsType,put=PutChoosePartsType))
    enum ksChoosePartsType ChoosePartsType;
    __declspec(property(get=GetChooseBodies,put=PutChooseBodies))
    _variant_t ChooseBodies;

    //
    // Wrapper methods for error-handling
    //

    void PutChooseType (
        enum ksChooseType CurrentValue );
    enum ksChooseType GetChooseType ( );
    void PutChoosePartsType (
        enum ksChoosePartsType Type );
    enum ksChoosePartsType GetChoosePartsType ( );
    void PutChooseBodies (
        const _variant_t & Result );
    _variant_t GetChooseBodies ( );
    void PutChooseParts (
        const _variant_t & Result );
    _variant_t GetChooseParts ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ChooseType (
        /*[in]*/ enum ksChooseType CurrentValue ) = 0;
      virtual HRESULT __stdcall get_ChooseType (
        /*[out,retval]*/ enum ksChooseType * CurrentValue ) = 0;
      virtual HRESULT __stdcall put_ChoosePartsType (
        /*[in]*/ enum ksChoosePartsType Type ) = 0;
      virtual HRESULT __stdcall get_ChoosePartsType (
        /*[out,retval]*/ enum ksChoosePartsType * Type ) = 0;
      virtual HRESULT __stdcall put_ChooseBodies (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_ChooseBodies (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_ChooseParts (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_ChooseParts (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("c9e03a9b-0a54-49ac-9397-8de4465a8d1d"))
ISourcePart7Params : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetSourceMarking,put=PutSourceMarking))
    _bstr_t SourceMarking;
    __declspec(property(get=GetDocumentAuthor,put=PutDocumentAuthor))
    _bstr_t DocumentAuthor;
    __declspec(property(get=GetDocumentComment,put=PutDocumentComment))
    _variant_t DocumentComment;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t PVal );
    _bstr_t GetSourceMarking ( );
    void PutSourceMarking (
        _bstr_t PVal );
    _bstr_t GetDocumentAuthor ( );
    void PutDocumentAuthor (
        _bstr_t PVal );
    _variant_t GetDocumentComment ( );
    void PutDocumentComment (
        const _variant_t & PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_SourceName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_SourceMarking (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_SourceMarking (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_DocumentAuthor (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_DocumentAuthor (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_DocumentComment (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_DocumentComment (
        /*[in]*/ VARIANT PVal ) = 0;
};

struct __declspec(uuid("eb4ab3a9-8e01-4952-9119-f8d09d9572d5"))
IModelCurve3D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVertexVisible,put=PutVertexVisible))
    VARIANT_BOOL VertexVisible;
    __declspec(property(get=GetVertexStyle,put=PutVertexStyle))
    enum ksAnnotationSymbolEnum VertexStyle;
    __declspec(property(get=GetEdgesStyle,put=PutEdgesStyle))
    enum ksCurveStyleEnum EdgesStyle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVertexVisible ( );
    void PutVertexVisible (
        VARIANT_BOOL Value );
    enum ksAnnotationSymbolEnum GetVertexStyle ( );
    void PutVertexStyle (
        enum ksAnnotationSymbolEnum Style );
    enum ksCurveStyleEnum GetEdgesStyle ( );
    void PutEdgesStyle (
        enum ksCurveStyleEnum Style );
    _variant_t GetVerticesParams ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VertexVisible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_VertexVisible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_VertexStyle (
        /*[out,retval]*/ enum ksAnnotationSymbolEnum * Style ) = 0;
      virtual HRESULT __stdcall put_VertexStyle (
        /*[in]*/ enum ksAnnotationSymbolEnum Style ) = 0;
      virtual HRESULT __stdcall get_EdgesStyle (
        /*[out,retval]*/ enum ksCurveStyleEnum * Style ) = 0;
      virtual HRESULT __stdcall put_EdgesStyle (
        /*[in]*/ enum ksCurveStyleEnum Style ) = 0;
      virtual HRESULT __stdcall raw_GetVerticesParams (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("094d83c7-70c3-45ea-aa20-14e55efa52b8"))
IRotated1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOperationResult,put=PutOperationResult))
    enum ksOperationResultEnum OperationResult;

    //
    // Wrapper methods for error-handling
    //

    void PutOperationResult (
        enum ksOperationResultEnum Result );
    enum ksOperationResultEnum GetOperationResult ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_OperationResult (
        /*[in]*/ enum ksOperationResultEnum Result ) = 0;
      virtual HRESULT __stdcall get_OperationResult (
        /*[out,retval]*/ enum ksOperationResultEnum * Result ) = 0;
};

struct __declspec(uuid("2b32e33d-f898-4249-90e6-3770fe3bc906"))
IUserParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLibraryFileName,put=PutLibraryFileName))
    _bstr_t LibraryFileName;
    __declspec(property(get=GetLibraryName,put=PutLibraryName))
    _bstr_t LibraryName;
    __declspec(property(get=GetCommand,put=PutCommand))
    long Command;
    __declspec(property(get=GetObjectID,put=PutObjectID))
    _bstr_t ObjectID;
    __declspec(property(get=GetUserParams,put=PutUserParams))
    _variant_t UserParams;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLibraryFileName ( );
    void PutLibraryFileName (
        _bstr_t PVal );
    _bstr_t GetLibraryName ( );
    void PutLibraryName (
        _bstr_t PVal );
    long GetCommand ( );
    void PutCommand (
        long PVal );
    void PutObjectID (
        _bstr_t PVal );
    _bstr_t GetObjectID ( );
    void PutUserParams (
        const _variant_t & PVal );
    _variant_t GetUserParams ( );
    VARIANT_BOOL ClearUserParameters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LibraryFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_LibraryFileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_LibraryName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Command (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Command (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall put_ObjectID (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectID (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_UserParams (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_UserParams (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearUserParameters (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("6dbf5262-75a5-4bb9-8ef6-159f204b49d8"))
IThreadsParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetPitch,put=PutPitch))
    double Pitch;
    __declspec(property(get=GetThreadStandardFileName))
    _bstr_t ThreadStandardFileName;
    __declspec(property(get=GetInternalDiameterCoefficient))
    double InternalDiameterCoefficient;
    __declspec(property(get=GetConicalThreadAngle))
    double ConicalThreadAngle;
    __declspec(property(get=GetInternal))
    VARIANT_BOOL Internal;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Init (
        _bstr_t StandardFileName,
        double Diameter,
        double Pitch );
    double GetDiameter ( );
    void PutDiameter (
        double PVal );
    double GetPitch ( );
    void PutPitch (
        double PVal );
    _bstr_t GetThreadStandardFileName ( );
    double GetInternalDiameterCoefficient ( );
    double GetConicalThreadAngle ( );
    VARIANT_BOOL GetInternal ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ BSTR StandardFileName,
        /*[in]*/ double Diameter,
        /*[in]*/ double Pitch,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ThreadStandardFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_InternalDiameterCoefficient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ConicalThreadAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Internal (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("6da1f459-7aae-4a07-9a7d-ff19f8997ad5"))
IShellSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetClosedShell,put=PutClosedShell))
    VARIANT_BOOL ClosedShell;

    //
    // Wrapper methods for error-handling
    //

    void PutClosedShell (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosedShell ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ClosedShell (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ClosedShell (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("ca597ae6-2ece-4483-a997-1afd5abf9d3a"))
ITessellation7 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFacetSize,put=PutFacetSize))
    double FacetSize;
    __declspec(property(get=GetFacetSag,put=PutFacetSag))
    double FacetSag;
    __declspec(property(get=GetFacetAngle,put=PutFacetAngle))
    double FacetAngle;
    __declspec(property(get=GetNeedParams,put=PutNeedParams))
    VARIANT_BOOL NeedParams;

    //
    // Wrapper methods for error-handling
    //

    double GetFacetSize ( );
    void PutFacetSize (
        double PVal );
    double GetFacetSag ( );
    void PutFacetSag (
        double PVal );
    double GetFacetAngle ( );
    void PutFacetAngle (
        double PVal );
    VARIANT_BOOL GetNeedParams ( );
    void PutNeedParams (
        VARIANT_BOOL PVal );
    VARIANT_BOOL RebuildTessellation ( );
    VARIANT_BOOL GetFacetPoints (
        VARIANT * Points,
        VARIANT * Indexes,
        VARIANT * Normals );
    _variant_t GetFacetParams ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FacetSize (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FacetSize (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_FacetSag (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FacetSag (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_FacetAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FacetAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_NeedParams (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NeedParams (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_RebuildTessellation (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetFacetPoints (
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Indexes,
        /*[out]*/ VARIANT * Normals,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetFacetParams (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("2cb2f820-a083-46e3-83f6-5ac4b27078a3"))
ISheetMetalUndercut : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDistanceType,put=PutDistanceType))
    enum ksUndercutDistanceTypeEnum DistanceType;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetWithAddMaterial,put=PutWithAddMaterial))
    VARIANT_BOOL WithAddMaterial;

    //
    // Wrapper methods for error-handling
    //

    void PutDistanceType (
        enum ksUndercutDistanceTypeEnum PVal );
    enum ksUndercutDistanceTypeEnum GetDistanceType ( );
    void PutDistance (
        double PVal );
    double GetDistance ( );
    void PutWithAddMaterial (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithAddMaterial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DistanceType (
        /*[in]*/ enum ksUndercutDistanceTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DistanceType (
        /*[out,retval]*/ enum ksUndercutDistanceTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WithAddMaterial (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithAddMaterial (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("c8a55ab3-d6dd-49b8-95f0-716475855c10"))
IBranchs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX0,put=PutX0))
    double X0;
    __declspec(property(get=GetY0,put=PutY0))
    double Y0;
    __declspec(property(get=GetBranchCount))
    long BranchCount;
    __declspec(property(get=GetBranchPoints,put=PutBranchPoints))
    _variant_t BranchPoints[];
    __declspec(property(get=GetBranchPointsCount))
    long BranchPointsCount[];
    __declspec(property(get=GetBranchX,put=PutBranchX))
    double BranchX[];
    __declspec(property(get=GetBranchY,put=PutBranchY))
    double BranchY[];

    //
    // Wrapper methods for error-handling
    //

    double GetX0 ( );
    void PutX0 (
        double Result );
    double GetY0 ( );
    void PutY0 (
        double Result );
    long GetBranchCount ( );
    void PutBranchPoints (
        long Index,
        const _variant_t & PVal );
    _variant_t GetBranchPoints (
        long Index );
    long GetBranchPointsCount (
        long Index );
    void PutBranchX (
        long Index,
        double PVal );
    double GetBranchX (
        long Index );
    void PutBranchY (
        long Index,
        double PVal );
    double GetBranchY (
        long Index );
    VARIANT_BOOL AddBranch (
        long Index,
        const _variant_t & Points );
    VARIANT_BOOL AddBranchByPoint (
        long Index,
        double X,
        double Y );
    VARIANT_BOOL DeleteBranch (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X0 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X0 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y0 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y0 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_BranchCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_BranchPoints (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_BranchPoints (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_BranchPointsCount (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_BranchX (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BranchX (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BranchY (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BranchY (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddBranch (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddBranchByPoint (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteBranch (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("620cc8eb-a5c0-4978-bd98-38344dc6adc0"))
IAxisLineParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoDetectedDash,put=PutAutoDetectedDash))
    VARIANT_BOOL AutoDetectedDash;
    __declspec(property(get=GetDashMaxLength,put=PutDashMaxLength))
    double DashMaxLength;
    __declspec(property(get=GetJutLengthModify,put=PutJutLengthModify))
    VARIANT_BOOL JutLengthModify;
    __declspec(property(get=GetDottedLengthModify,put=PutDottedLengthModify))
    VARIANT_BOOL DottedLengthModify;
    __declspec(property(get=GetIntervalModify,put=PutIntervalModify))
    VARIANT_BOOL IntervalModify;
    __declspec(property(get=GetAutoDetectedDashModify,put=PutAutoDetectedDashModify))
    VARIANT_BOOL AutoDetectedDashModify;
    __declspec(property(get=GetDashMaxLengthModify,put=PutDashMaxLengthModify))
    VARIANT_BOOL DashMaxLengthModify;
    __declspec(property(get=GetJutLength1,put=PutJutLength1))
    double JutLength1;
    __declspec(property(get=GetJutLength2,put=PutJutLength2))
    double JutLength2;
    __declspec(property(get=GetJutLength,put=PutJutLength))
    double JutLength;
    __declspec(property(get=GetDottedLength,put=PutDottedLength))
    double DottedLength;
    __declspec(property(get=GetInterval,put=PutInterval))
    double Interval;

    //
    // Wrapper methods for error-handling
    //

    void PutJutLength (
        double PVal );
    double GetJutLength ( );
    void PutDottedLength (
        double PVal );
    double GetDottedLength ( );
    void PutInterval (
        double PVal );
    double GetInterval ( );
    void PutAutoDetectedDash (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoDetectedDash ( );
    void PutDashMaxLength (
        double PVal );
    double GetDashMaxLength ( );
    void PutJutLengthModify (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetJutLengthModify ( );
    void PutDottedLengthModify (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDottedLengthModify ( );
    void PutIntervalModify (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIntervalModify ( );
    void PutAutoDetectedDashModify (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoDetectedDashModify ( );
    void PutDashMaxLengthModify (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDashMaxLengthModify ( );
    void PutJutLength1 (
        double PVal );
    double GetJutLength1 ( );
    void PutJutLength2 (
        double PVal );
    double GetJutLength2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_JutLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_JutLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DottedLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DottedLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Interval (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Interval (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoDetectedDash (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoDetectedDash (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DashMaxLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DashMaxLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_JutLengthModify (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_JutLengthModify (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DottedLengthModify (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DottedLengthModify (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IntervalModify (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IntervalModify (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoDetectedDashModify (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoDetectedDashModify (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DashMaxLengthModify (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DashMaxLengthModify (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_JutLength1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_JutLength1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_JutLength2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_JutLength2 (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("7198c93a-7655-4347-9954-ba9aa28d0608"))
IBoundariesObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBoundaries))
    _variant_t Boundaries;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBoundaries ( );
    VARIANT_BOOL AddBoundaries (
        const _variant_t & Objects,
        VARIANT_BOOL DeleteSource );
    VARIANT_BOOL Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Boundaries (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddBoundaries (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("0dbd7bcd-f78e-4bda-bcad-3004c60b6d06"))
IAnnotativeObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSign1,put=PutSign1))
    enum ksAnnotativeTerminatorSignEnum Sign1;
    __declspec(property(get=GetSign2,put=PutSign2))
    enum ksAnnotativeTerminatorSignEnum Sign2;

    //
    // Wrapper methods for error-handling
    //

    enum ksAnnotativeTerminatorSignEnum GetSign1 ( );
    void PutSign1 (
        enum ksAnnotativeTerminatorSignEnum Result );
    enum ksAnnotativeTerminatorSignEnum GetSign2 ( );
    void PutSign2 (
        enum ksAnnotativeTerminatorSignEnum Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sign1 (
        /*[out,retval]*/ enum ksAnnotativeTerminatorSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Sign1 (
        /*[in]*/ enum ksAnnotativeTerminatorSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_Sign2 (
        /*[out,retval]*/ enum ksAnnotativeTerminatorSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Sign2 (
        /*[in]*/ enum ksAnnotativeTerminatorSignEnum Result ) = 0;
};

struct __declspec(uuid("dbbb268e-19d3-40de-b77c-987ca15fe711"))
KompasDocument;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IKompasDocument
    // [ default, source ] dispinterface ksDocumentFileNotify

struct __declspec(uuid("8c3719b5-0df2-4c12-9ca8-3af4827a3bbb"))
_Application;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IApplication
    // [ default, source ] dispinterface ksKompasObjectNotify

struct __declspec(uuid("1a4c2a9b-3b2a-49d1-b75f-3810dd4a2086"))
KompasInvisible7;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IApplication
    // [ default, source ] dispinterface ksKompasObjectNotify

struct __declspec(uuid("385647bd-89b1-4f2d-a06e-4dd829ee096b"))
Documents;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IDocuments

struct __declspec(uuid("8bffc9b4-5fe7-4ec5-8ba5-0ff8520d5ff6"))
DocumentFrame;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDocumentFrame
    // [ default, source ] dispinterface ksDocumentFrameNotify

struct __declspec(uuid("cc89942a-6fe5-4808-8dc8-ff46d546a8eb"))
DocumentFrames;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IDocumentFrames

struct __declspec(uuid("4c33de6e-feac-4c28-9ee0-32c37f8e7a48"))
ProcessParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IProcessParam
    // [ default, source ] dispinterface ksPropertyManagerNotify

struct __declspec(uuid("74d54fdd-62d0-4544-89c9-999612ef6def"))
PropertyControls;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IPropertyControls

struct __declspec(uuid("1c2a5766-b80a-4752-8509-217574965bf3"))
PropertyTab;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPropertyTab

struct __declspec(uuid("52110f5f-7bf2-4079-b3ae-a7b716a7eb1e"))
PropertyTabs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IPropertyTabs

struct __declspec(uuid("e4afcb78-574f-4960-9d92-b23888d700cd"))
PropertyEdit;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyEdit

struct __declspec(uuid("59da09ed-130f-43af-86b8-eac8e0c7d0a2"))
PropertySeparator;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertySeparator

struct __declspec(uuid("404cf845-9bf6-4aad-97a1-b9a173acf96d"))
PropertyList;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyList

struct __declspec(uuid("8cf06399-b7eb-46eb-8b08-5603c589fe0f"))
PropertyCheckBox;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyCheckBox

struct __declspec(uuid("b734ca6e-ca21-4ccd-aee8-94bc8f9d4986"))
PropertyMultiButton;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyMultiButton

struct __declspec(uuid("9988ac8d-657b-4b2a-8338-ec315cbba70e"))
PropertySlideBox;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertySlideBox

struct __declspec(uuid("725a98dc-9987-4a79-bda2-f5024e2d0ff3"))
PropertyUserControl;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyUserControl
    // [ default, source ] dispinterface ksPropertyUserControlNotify

struct __declspec(uuid("f0f9573f-be07-4251-86e5-2aa24aa3d43a"))
PropertyGrid;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyGrid

struct __declspec(uuid("1b9cbab1-99da-433e-8d4e-6761d1ab9b8a"))
PropertyManager;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPropertyManager
    // [ default, source ] dispinterface ksPropertyManagerNotify

struct __declspec(uuid("9237aafe-992b-4521-bf68-3a0c6d7f7769"))
KompasDocument3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasDocument
    // [ default ] interface IKompasDocument3D
    // [ default, source ] dispinterface ksDocument3DNotify7

struct __declspec(uuid("5414b05f-a731-4369-bbd2-419b5cd9d2a2"))
DrawingDocument;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasDocument
    // interface IKompasDocument2D
    // [ default ] interface IDrawingDocument

struct __declspec(uuid("86ca15da-a197-4993-ab98-8921d156114e"))
FragmentDocument;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasDocument
    // interface IKompasDocument2D
    // [ default ] interface IFragmentDocument

struct __declspec(uuid("2d43b764-4f8a-47a6-aaab-52b59ce5a08d"))
SpecificationDocument;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasDocument
    // [ default ] interface ISpecificationDocument

struct __declspec(uuid("f5cf81cf-f6c3-4d9c-b393-6df532bfb45d"))
TextDocument;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasDocument
    // [ default ] interface ITextDocument

struct __declspec(uuid("427d2e6b-8d4e-4f9f-99ac-f9e0fb22d25c"))
PartDocument;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasDocument
    // interface IKompasDocument3D
    // [ default ] interface IPartDocument

struct __declspec(uuid("705b37c7-ca52-4588-980e-1105c919e20c"))
AssemblyDocument;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasDocument
    // interface IKompasDocument3D
    // [ default ] interface IAssemblyDocument

struct __declspec(uuid("d4f68e4e-2092-436a-b6fb-b8a335a671fd"))
PropertyTextButton;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyTextButton

struct __declspec(uuid("f4710743-a53b-4256-a450-16d0d40c87aa"))
PropertySpinEdit;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertySpinEdit

struct __declspec(uuid("2e3092b1-3b1a-4060-b202-b0c6f4177973"))
ViewsAndLayersManager;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IViewsAndLayersManager
    // [ default, source ] dispinterface ksViewsAndLayersManagerNotify

struct __declspec(uuid("3310ac4a-dc93-4ab5-b2cd-5391e6cb370a"))
DrawingObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDrawingObject
    // [ default, source ] dispinterface ksDrawingObjectNotify

struct __declspec(uuid("5f90a46e-ea28-4294-b34f-145c80141517"))
DrawingObjects;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IDrawingObjects
    // [ default, source ] dispinterface ksDrawingObjectNotify

struct __declspec(uuid("675cdfc9-4ed8-4689-8a15-be9cc85cfbdc"))
Views;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IViews

struct __declspec(uuid("adbf03af-24d4-4ca8-bf0e-7f6e403d4e55"))
View;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IView

struct __declspec(uuid("9f144f3a-a296-46c6-99c2-1877b83b0e63"))
AssociationView;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IView
    // [ default ] interface IAssociationView

struct __declspec(uuid("e53ffd4e-619d-4b9b-9c34-9c23668e6f4a"))
LayerGroups;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ILayerGroups

struct __declspec(uuid("5543c50a-b56d-48af-87c3-09c1b48cbc5a"))
LayerGroup;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ILayerGroup

struct __declspec(uuid("c0402ed4-d1ab-4567-be4f-afd88af848ec"))
Layers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ILayers

struct __declspec(uuid("392916b8-171e-4229-9e75-1d514c75fb17"))
Layer;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ILayer

struct __declspec(uuid("21d31870-5ebc-42ce-8858-a308e7e4b8a4"))
LayerFilterCondition;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILayerFilterCondition

struct __declspec(uuid("9f90da69-2ca3-4c2e-ab59-6bb9b0e7dfb8"))
LayerFilterConditions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ILayerFilterConditions

struct __declspec(uuid("64964b4c-5a02-41d8-b6ec-f7cf627564e6"))
DocumentSettings;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDocumentSettings

struct __declspec(uuid("ebb0ee6b-305c-4448-9674-3f5072606d47"))
Document2DSettings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDocumentSettings
    // [ default ] interface IDocument2DSettings

struct __declspec(uuid("aacb5896-8918-43cb-a5b4-f3eaf45bcef7"))
LibraryManager;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILibraryManager
    // [ default, source ] dispinterface ksLibraryManagerNotify

struct __declspec(uuid("e865b51e-8276-4f7e-a20b-509dc25679b1"))
ProceduresLibrary;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface ILibrary
    // [ default ] interface IProceduresLibrary

struct __declspec(uuid("0ea0000e-9328-488d-b611-9f72eeccd92d"))
Procedures;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IProcedures

struct __declspec(uuid("5d9929f6-3d65-4daf-b146-a85fa98f2356"))
Procedure;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IProcedure

struct __declspec(uuid("9a06d2a1-bcde-4c43-88a1-5a491469be11"))
InsertsLibrary;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface ILibrary
    // [ default ] interface IInsertsLibrary

struct __declspec(uuid("f8527798-eb6e-43c6-ae05-6fa964cfd96b"))
Inserts;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IInserts

struct __declspec(uuid("5d1bd639-051f-48c5-bca7-7698b4d070b4"))
Insert;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IInsert

struct __declspec(uuid("6c64bd39-1613-4ad4-b5ba-b6f38d32e82c"))
InsertsLibraries;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IInsertsLibraries

struct __declspec(uuid("dbc3ac55-2823-4661-9740-54843ba72b12"))
ProceduresLibraries;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IProceduresLibraries

struct __declspec(uuid("77168b66-5a17-4694-addf-848e314ee0d1"))
SpecificationDescriptions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationDescriptions
    // [ default, source ] dispinterface ksSpecificationDescriptionNotify

struct __declspec(uuid("ad076943-bf97-4802-9d4f-d28c6c41e966"))
SpecificationDescription;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationDescription
    // [ default, source ] dispinterface ksSpecificationDescriptionNotify

struct __declspec(uuid("7e9787dc-72ed-452d-8ef5-fd3d21259712"))
SpecificationStyle;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationStyle

struct __declspec(uuid("ec3f7c56-6a3b-45ac-bf81-614b7b045baa"))
SpecificationColumnStyles;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationColumnStyles

struct __declspec(uuid("ff5e4685-8914-4382-97c9-c73ffed73449"))
SpecificationColumnStyle;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationColumnStyle

struct __declspec(uuid("25b2edd7-fb95-4fe6-ba9c-b296531ea6c7"))
SpecificationSectionStyles;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationSectionStyles

struct __declspec(uuid("a862b550-caed-48fd-889d-c1507a30d241"))
SpecificationSectionStyle;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationSectionStyle

struct __declspec(uuid("2a248d5e-8b8f-4f43-91ec-10c7f02e2064"))
AdditionalBlockStyles;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IAdditionalBlockStyles

struct __declspec(uuid("704bc0bd-189c-4b8b-a97a-ab5f0c6897ef"))
AdditionalBlockStyle;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IAdditionalBlockStyle

struct __declspec(uuid("b872a3a8-c21f-487b-a44d-b168398e014a"))
SheetFormat;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISheetFormat

struct __declspec(uuid("c6410109-2800-476b-82ee-202c766b515d"))
SpecificationTuning;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationTuning

struct __declspec(uuid("b64e5fbc-99d3-4cbf-989f-0f832f3c7b5f"))
SpecificationTuningSections;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationTuningSections

struct __declspec(uuid("03d146c9-35d2-4fbf-b051-053711fca51b"))
SpecificationTuningSection;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationTuningSection

struct __declspec(uuid("79130306-1fb8-49fd-85d2-a6c235b91638"))
SpecificationSubsections;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationSubsections

struct __declspec(uuid("c82a6a36-cf62-43ce-a180-fa1268ae0116"))
SpecificationSubsection;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationSubsection

struct __declspec(uuid("b6cc6f97-b1f1-42cf-adc7-7875b06a7089"))
AdditionalBlockTunings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IAdditionalBlockTunings

struct __declspec(uuid("d62780c1-edd6-49b6-b619-04e22189d288"))
AdditionalBlockTuning;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IAdditionalBlockTuning

struct __declspec(uuid("821a5929-98f3-4c67-bc2c-d3a8a1442086"))
AdditionalBlockSectionTunings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IAdditionalBlockSectionTunings

struct __declspec(uuid("39bde053-03aa-4b95-8e25-5b8041c7be12"))
AdditionalBlockSectionTuning;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IAdditionalBlockSectionTuning

struct __declspec(uuid("7f52ddde-fd30-40df-97e9-b606a005fd14"))
TextFont;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITextFont

struct __declspec(uuid("92523524-1e11-4193-ad5f-e2381555dcc6"))
TextStyle;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITextStyle

struct __declspec(uuid("c0d50c82-511e-4554-8296-edff2ae66c4c"))
Tabulators;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ITabulators

struct __declspec(uuid("d65e21e0-4b98-401d-86b5-712e0aa56cec"))
Tabulator;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITabulator

struct __declspec(uuid("a5b4db5f-0554-4d75-915b-3f838f18c809"))
KompasError;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IKompasError

struct __declspec(uuid("e2fd0c57-3e8a-4ec2-a1e9-7beb75e3ab7c"))
SpecificationBaseObjects;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationBaseObjects
    // [ default, source ] dispinterface ksSpecificationObjectNotify

struct __declspec(uuid("77cfdebf-2df0-4b67-8825-78df712a0497"))
SpecificationCommentObjects;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationCommentObjects
    // [ default, source ] dispinterface ksSpecificationObjectNotify

struct __declspec(uuid("77a64147-06a5-4843-8c6f-f0e35f0ed951"))
SpecificationObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationObject
    // [ default, source ] dispinterface ksSpecificationObjectNotify

struct __declspec(uuid("41fcdd59-6012-4e46-84dc-04934683b098"))
SpecificationBaseObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface ISpecificationObject
    // [ default ] interface ISpecificationBaseObject

struct __declspec(uuid("6f0354e0-9ab0-47ac-80e8-10fb48c59340"))
SpecificationCommentObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface ISpecificationObject
    // [ default ] interface ISpecificationCommentObject

struct __declspec(uuid("a641e019-073f-49f5-97bc-a9d5ffb063d8"))
SpecificationColumns;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationColumns

struct __declspec(uuid("b5216b74-0577-41d5-9b62-c71674ec9330"))
SpecificationColumn;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationColumn

struct __declspec(uuid("86172cf0-0bed-46e0-b2e1-dd43abf09290"))
SpecificationColumnItems;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ISpecificationColumnItems

struct __declspec(uuid("d1a46669-af0c-43ee-acb6-e765d06bed4a"))
SpecificationColumnItem;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationColumnItem

struct __declspec(uuid("7e97523d-c412-4da4-9fec-e4769e88b340"))
AttachedDocuments;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IAttachedDocuments

struct __declspec(uuid("30251a40-34ea-4da6-a0b0-66e7a556a813"))
AttachedDocument;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IAttachedDocument

struct __declspec(uuid("bbb62ba6-ac05-4d05-bff2-bc8579a2c5fc"))
PropertyFileName;
    // interface IDispatch
    // [ default ] interface IPropertyFileName

struct __declspec(uuid("77e6e019-a5a1-4318-b98e-cd970d248ea0"))
PropertyColor;
    // interface IDispatch
    // [ default ] interface IPropertyColor

struct __declspec(uuid("1ef17e36-3c4d-4c86-ad1b-17e744075df8"))
LayoutSheets;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ILayoutSheets
    // [ default, source ] dispinterface ksLayoutSheetsNotify

struct __declspec(uuid("5331e747-7833-4988-92ca-90283160ddf6"))
LayoutSheet;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILayoutSheet

struct __declspec(uuid("a496a838-57f7-4bec-99ff-51d4782c60ae"))
Converter;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IConverter

struct __declspec(uuid("d3154740-6bf5-47f6-9a02-486f78190791"))
CheckSum;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ICheckSum

struct __declspec(uuid("db0070f0-c367-4db5-b722-9cfe69895657"))
ModelObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IModelObject
    // [ default, source ] dispinterface ksModelObjectNotify

struct __declspec(uuid("b0223eed-4659-4eac-bda2-20b0fdd4e7b7"))
ModelObjects;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IModelObjects
    // [ default, source ] dispinterface ksModelObjectNotify

struct __declspec(uuid("cb826c3d-9968-4546-bcd7-ba65f6b84902"))
Parts7;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IParts7

struct __declspec(uuid("314057d1-5efd-4980-8ab8-4e0cc3f7e756"))
Part7;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IPart7

struct __declspec(uuid("6f94d909-e9c7-4496-8f5b-01f0b03ff409"))
Sketchs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISketchs

struct __declspec(uuid("2b4c99e4-fb5d-4d7d-a44d-5b898e1f5e9e"))
Extrusions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IExtrusions

struct __declspec(uuid("b49fd0e4-26ac-48de-ad0e-7dfa902df2b7"))
VariableTable;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVariableTable

struct __declspec(uuid("9361276c-70a0-4000-82d2-90fb546c98d4"))
ProgressBarIndicator;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IProgressBarIndicator

struct __declspec(uuid("393ab030-f683-470c-8f4e-aa93bf3162cc"))
Text;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IText

struct __declspec(uuid("fdfd93bc-11c4-42a9-9c8f-a4fb206274b6"))
TextLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITextLine

struct __declspec(uuid("58ced17b-2aa8-4df8-b215-811dde72df3c"))
TextItem;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITextItem

struct __declspec(uuid("2e194b4e-f08d-4d62-a9b8-849004d8d923"))
DrawingText;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IDrawingText

struct __declspec(uuid("5f4c3aa0-4b59-4eee-ab00-53cea8909f66"))
DrawingTexts;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IDrawingTexts

struct __declspec(uuid("c0dea6bf-0ad5-4c55-ad3d-a3f145943e47"))
Marks;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IMarks

struct __declspec(uuid("cdabb418-649a-4ab9-8a92-c51789075912"))
MarkInsideForm;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IMark
    // [ default ] interface IMarkInsideForm

struct __declspec(uuid("84caa3bb-3e7a-4185-82bc-85d4102d5def"))
MarkOnLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IMark
    // [ default ] interface IMarkOnLine

struct __declspec(uuid("cf195c37-a915-48ca-9f6b-6b3845fed05b"))
MarkOnLeader;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IMark
    // [ default ] interface IMarkOnLeader

struct __declspec(uuid("13bcc1c9-c582-4616-89ee-4cd250595cc4"))
UserDataStoragesMng;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IUserDataStoragesMng

struct __declspec(uuid("1b57d1cf-cbea-4dbc-9452-50e367784958"))
UserDataStorages;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IUserDataStorages

struct __declspec(uuid("4c7c5a7e-ad2c-4b1f-82b9-73476837e020"))
UserDataStorage;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IUserDataStorage

struct __declspec(uuid("b879c6f6-5ab0-4bee-8872-fe87c621f15b"))
BuildingAxes;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IBuildingAxes

struct __declspec(uuid("04728d73-a533-4c98-b0bf-92a8a02e6f4c"))
StraightAxis;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IBuildingAxis
    // [ default ] interface IStraightAxis

struct __declspec(uuid("ae2c24d6-17e4-4e5f-ba2b-ed62ac2323ec"))
ArcAxis;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IBuildingAxis
    // [ default ] interface IArcAxis

struct __declspec(uuid("8a706e75-73ff-4fbf-8d3f-61a13513c7eb"))
CircleAxis;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IBuildingAxis
    // [ default ] interface ICircleAxis

struct __declspec(uuid("97559604-8ccc-44e4-b332-7e16c34522d5"))
AxisJut;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IAxisJut

struct __declspec(uuid("6681105e-35e0-4e76-9e64-0ab8b50e6149"))
MarkNodes;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IMarkNodes

struct __declspec(uuid("b98ea663-66bc-46c0-a86c-1fe40af8a3d8"))
MarkNode;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IMarkNode

struct __declspec(uuid("b7b673af-5e78-45aa-8c78-894d1f4f77ac"))
LineSegments;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ILineSegments

struct __declspec(uuid("ee1993ad-cac2-421c-b9b1-131ba16466cf"))
LineSegment;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ILineSegment

struct __declspec(uuid("31c4845e-508f-43f0-a57f-e7602a0e45e6"))
SystemSettings;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISystemSettings

struct __declspec(uuid("be66b386-7d76-4afc-ac47-521b6648cb8f"))
CutUnitMarking;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ICutUnitMarking

struct __declspec(uuid("ddeff219-e3bc-457f-87ff-3c3adcfa720e"))
CutUnitMarkings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ICutUnitMarkings

struct __declspec(uuid("82be653c-832a-4611-941f-d27be733530b"))
UnitMarking;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IUnitMarking

struct __declspec(uuid("2156b173-a854-4714-be90-6f9ade48e2af"))
UnitMarkings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IUnitMarkings

struct __declspec(uuid("307690ef-0e80-4cd1-93e1-49288c5697a7"))
Arcs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IArcs

struct __declspec(uuid("6ba18a3d-28a8-47c3-a97c-e324282f93fd"))
_Arc;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IArc

struct __declspec(uuid("123d60bb-0331-4726-9707-777615e9d354"))
MultiTextLeader;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IMultiTextLeader

struct __declspec(uuid("af30b851-0ae8-4f62-b7db-1df52d9316f2"))
MultiTextLeaders;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IMultiTextLeaders

struct __declspec(uuid("2df7a8f9-cb3b-499e-867f-81ba5b41ed57"))
Brace;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IBrace

struct __declspec(uuid("82cd752f-bc4f-45a2-9fe9-8ab01fdaf6c9"))
Braces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObjects
    // [ default ] interface IBraces

struct __declspec(uuid("515c7a0d-0120-4cc4-a5f0-67473d7d95d3"))
UnitNumber;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IUnitNumber

struct __declspec(uuid("624e4c7c-156c-4fd9-8da8-ceb9750860d1"))
UnitNumbers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IUnitNumbers

struct __declspec(uuid("fc43ea04-aded-4d42-883a-11073e2e68ec"))
Sketch;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISketch

struct __declspec(uuid("9d3caf4c-4d9d-40ec-be5a-12a3ac595007"))
Extrusion;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IExtrusion

struct __declspec(uuid("7536f0bf-2857-4a01-acfa-5ddf1c9840a8"))
ParametriticConstraint;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IParametriticConstraint

struct __declspec(uuid("b60b0f24-9069-4ab4-b0e4-dc558a6bf4a3"))
CutExtrusion;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IExtrusion
    // [ default ] interface ICutExtrusion

struct __declspec(uuid("29e7e8d5-7988-408f-a02b-7c0871221c9c"))
Body7;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IBody7

struct __declspec(uuid("dc4c565f-935d-4f7a-97a5-db4d252f6b91"))
SheetMetalBodies;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalBodies

struct __declspec(uuid("1301dc0f-cdf1-4eb1-90b4-d06ea2610f0b"))
SheetMetalBody;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalBody

struct __declspec(uuid("2b0c2912-59d7-4976-9e57-20d83cda9038"))
Points3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IPoints3D

struct __declspec(uuid("a4ca403f-b960-4e41-a350-c07d15115dc2"))
Point3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IPoint3D

struct __declspec(uuid("7e00821a-e79b-412b-9a51-adb9664c23a0"))
Point3DParamDisplace;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPoint3DParamDisplace

struct __declspec(uuid("de8a8774-6705-4971-ba1f-f889e7e3752c"))
Point3DParamIntersect;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPoint3DParamIntersect

struct __declspec(uuid("02da512f-097f-4911-8e27-8c546ed4b22a"))
Point3DParamCenter;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPoint3DParamCenter

struct __declspec(uuid("aac9ee7f-c69f-48dd-9a38-8e38c38bab28"))
Point3DParamCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPoint3DParamCurve

struct __declspec(uuid("e5490b1d-49e8-4042-beaa-c666952d3b1b"))
Point3DParamSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPoint3DParamSurface

struct __declspec(uuid("bd60e7d5-0e9e-4e00-a27b-08c11cfd41bd"))
Point3DParamProjection;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPoint3DParamProjection

struct __declspec(uuid("e82b9381-1ba1-4cd8-8f0a-0f7aab0777ce"))
SheetMetalBends;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalBends

struct __declspec(uuid("c84c5989-2ae1-4e61-9c29-88028c8873a2"))
SheetMetalBend;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalBend

struct __declspec(uuid("c7df1afe-a3ef-427a-b732-70defddb351d"))
SheetMetalLineBends;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalLineBends

struct __declspec(uuid("dca09f8b-187b-400b-affa-d1ec84251ec2"))
SheetMetalLineBend;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalLineBend

struct __declspec(uuid("6d725058-9a30-49b2-8ba6-466f2807e232"))
SheetMetalHole;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalHole

struct __declspec(uuid("d11bbacb-3a8a-4b3f-9dec-c17cc9989083"))
SheetMetalHoles;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalHoles

struct __declspec(uuid("17cdfc21-a515-4011-bcc6-a3420219e19d"))
SheetMetalCut;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalCut

struct __declspec(uuid("a0c32567-9107-4695-a9b0-4d991b58689e"))
SheetMetalCuts;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalCuts

struct __declspec(uuid("f6910669-b8fc-4f05-872e-ba10de0964a4"))
RadialDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IRadialDimension

struct __declspec(uuid("bd3d6d8c-c5d8-42f0-926d-fd995ee6d232"))
RadialDimensions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IRadialDimensions

struct __declspec(uuid("60adba37-9540-40e9-8f52-03e80e3f423e"))
BreakRadialDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IBreakRadialDimension

struct __declspec(uuid("2782662c-d266-46d6-9bf5-6e4612d32d9f"))
RadialBreakDimensions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IBreakRadialDimensions

struct __declspec(uuid("117e5ab9-3d8c-4f14-bb4b-14ff43082ea7"))
DiametralDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IDiametralDimension

struct __declspec(uuid("2195ac03-677a-4236-9bea-fbde74cee7f3"))
DiametralDimensions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IDiametralDimensions

struct __declspec(uuid("bc66c415-362a-4246-850f-a7d39bde6c1b"))
LineDimensions3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ILineDimensions3D

struct __declspec(uuid("f8e92c35-23b4-4058-85e5-324b46fb551f"))
BaseLineDimension3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IBaseLineDimension3D

struct __declspec(uuid("0fd2290e-6ff6-48c4-9b10-e1c6d0608c74"))
LineDimension3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IBaseLineDimension3D
    // [ default ] interface ILineDimension3D

struct __declspec(uuid("a7b94e84-cb49-4021-8ac2-27adc8036b4d"))
LineDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ILineDimension

struct __declspec(uuid("d44491ce-cdd2-4435-afab-7aec8e58d912"))
LineDimensions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ILineDimensions

struct __declspec(uuid("1072b7e5-9c4b-44f2-a8f0-1a60c59d4909"))
RadialDimension3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IRadialDimension3D

struct __declspec(uuid("fc1fc235-02c5-41d5-871b-d754926b593e"))
DiametralDimension3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IDiametralDimension3D

struct __declspec(uuid("7245f71f-e655-4102-8c2c-b4e6d2fa26d8"))
RadialDimensions3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IRadialDimensions3D

struct __declspec(uuid("f3f0ede3-3e00-48e8-922f-121ca571be26"))
DiametralDimensions3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IDiametralDimensions3D

struct __declspec(uuid("9f6632a5-aaa8-4bf3-94aa-adf2838bec74"))
BreakLineDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IBreakLineDimension

struct __declspec(uuid("865edbb6-f511-45ef-aa82-c19ad126f9b9"))
BreakLineDimensions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IBreakLineDimensions

struct __declspec(uuid("ca99c371-8e76-4fe0-a176-a33fc6d2fdfc"))
HeightDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IHeightDimension

struct __declspec(uuid("2a942576-e76d-4375-a1d9-0ccc4b382786"))
HeightDimensions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IHeightDimensions

struct __declspec(uuid("beabbb41-f220-43ab-9922-39bf76207e2a"))
AngleDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IAngleDimension

struct __declspec(uuid("82ddc7df-d7c3-41a6-9913-deb4ce349203"))
AngleDimensions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IAngleDimensions

struct __declspec(uuid("d33d3bfc-bedc-4e91-a78c-d03461379e15"))
BreakAngleDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IAngleDimension
    // [ default ] interface IBreakAngleDimension

struct __declspec(uuid("37f30e53-7355-436d-8eef-3b1de7e9efce"))
ArcDimension;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IArcDimension

struct __declspec(uuid("d18dfb31-8a26-4281-bf18-c462cedbe714"))
ArcDimensions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IArcDimensions

struct __declspec(uuid("9d769f23-62b6-46fb-9bc9-a74a28e98501"))
AngleDimension3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IAngleDimension3D

struct __declspec(uuid("154cbd57-2124-4667-beca-61a6d8ab380a"))
AngleDimensions3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IAngleDimensions3D

struct __declspec(uuid("114075c2-6d73-4198-a29a-f05d772fc75d"))
CurveVertexParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ICurveVertexParam

struct __declspec(uuid("a7899fac-ecf5-40ac-9267-97b98b849570"))
Splines3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISplines3D

struct __declspec(uuid("cf10fb1d-fe72-48a2-a36b-19b63594d674"))
Spline3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISpline3D

struct __declspec(uuid("e39cae1d-9b07-4171-8a97-90d9e7e475d4"))
LocalCoordinateSystem;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPoint3D
    // [ default ] interface ILocalCoordinateSystem

struct __declspec(uuid("c2eb441c-8053-4ecb-961f-d0607769b508"))
LocalCoordinateSystems;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ILocalCoordinateSystems

struct __declspec(uuid("d9b8494f-9693-488d-ac64-1eee767737e9"))
LocalCSAxesDirectionParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILocalCSAxesDirectionParam

struct __declspec(uuid("d49278a6-1476-48fb-9374-cd066742b0ac"))
LocalCSEulerParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILocalCSEulerParam

struct __declspec(uuid("1f490d96-2098-40e6-bb73-52dd0a71111a"))
PolyLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IPolyLine

struct __declspec(uuid("1dc144a1-0f9f-4d93-98ec-53bfccf795fe"))
PolyLines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IPolyLines

struct __declspec(uuid("7a899963-5137-459a-ab0a-48653074bcd0"))
BaseLeader;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IBaseLeader

struct __declspec(uuid("90e9d9e8-1451-4ba1-97a6-4be6d1508649"))
Leaders;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ILeaders

struct __declspec(uuid("55912a9b-6387-4946-80b9-c30d1dd30d07"))
Roughs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IRoughs

struct __declspec(uuid("1237c011-5d75-4ebf-b53a-744aa16d7ec7"))
Rough;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IRough

struct __declspec(uuid("31dc80a4-bcc8-45c1-8ce1-6c43e24fd96c"))
BaseLeader3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IBaseLeader3D

struct __declspec(uuid("9b18cb77-9edd-440c-b154-969f1b5c7b98"))
Leaders3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ILeaders3D

struct __declspec(uuid("48398fc6-d508-4f69-a292-840ac4c7db69"))
Rough3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IRough3D

struct __declspec(uuid("d2ed0beb-1705-4d5f-b8c4-f0d88b49ab2d"))
Roughs3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IRoughs3D

struct __declspec(uuid("700819a4-82b8-4e32-b516-db0ed48d1d05"))
_Base;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IBase

struct __declspec(uuid("2d2bc5f4-2d44-4c4e-a20e-1f8d8095df73"))
Bases;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IBases

struct __declspec(uuid("7c3ad6f0-625e-4756-8c64-a04783653a72"))
TableCell;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITableCell

struct __declspec(uuid("020b47a5-6b61-48b2-80f6-3a607e0e0a94"))
DrawingTable;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IDrawingTable

struct __declspec(uuid("e0c24704-8d4e-45ba-9175-972d58e37c7f"))
DrawingTables;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IDrawingTables

struct __declspec(uuid("6e4f37e5-2f92-4a22-97ef-f5aec374343a"))
Tolerances;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ITolerances

struct __declspec(uuid("bd78c015-15e7-45f6-ad21-d737007ed7c1"))
_Tolerance;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ITolerance

struct __declspec(uuid("dbf9fa07-8fe1-46de-b236-9931388ff543"))
Bases3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IBases3D

struct __declspec(uuid("daae59df-e97c-4434-9166-8a52bea0ff31"))
Base3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IBase3D

struct __declspec(uuid("ee1cf4a7-cb7e-42c2-854d-32eb10e28c78"))
Tolerances3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ITolerances3D

struct __declspec(uuid("68c4a672-8029-40e8-9203-e50046072bcf"))
Tolerance3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ITolerance3D

struct __declspec(uuid("9018b030-43b0-4a67-ae2b-11f14ab2716d"))
LocalCSOrientByObjectParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILocalCSOrientByObjectParam

struct __declspec(uuid("de089315-444a-46a1-a551-4f0264ef11d2"))
CutLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ICutLine

struct __declspec(uuid("afde9b99-603d-4b29-b2e5-3f7399b72619"))
CutLines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ICutLines

struct __declspec(uuid("c51785d4-4665-4521-885e-1d0633ae445c"))
ExternalTessellationObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IExternalTessellationObject

struct __declspec(uuid("f8b4a9ea-09fe-41c4-8e66-b2a015ca51c8"))
ControlPoints;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IControlPoints

struct __declspec(uuid("816922d4-1fba-4672-95ae-e27bec782e47"))
ControlPoint;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPoint3D
    // [ default ] interface IControlPoint

struct __declspec(uuid("c5ddaf9b-32b7-4552-adad-f31d8706ed6b"))
ConjunctivePoints;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IConjunctivePoints

struct __declspec(uuid("4a7a9fc8-85d7-4b62-99bb-7a303f1d6e98"))
ConjunctivePoint;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPoint3D
    // [ default ] interface IConjunctivePoint

struct __declspec(uuid("76a04b67-394f-4b63-bc9c-67c52a36f98a"))
PropertyBmpList;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyBmpList

struct __declspec(uuid("e437188e-6071-4c50-9e43-fb53e63d9ee9"))
ViewPointer;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IViewPointer

struct __declspec(uuid("a3035980-e806-4458-bf4e-4bd8bc54d592"))
ViewPointers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IViewPointers

struct __declspec(uuid("44a427dc-4604-43ca-9af8-026c494cec57"))
Multiline;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IMultiline

struct __declspec(uuid("20023299-3104-4af3-ac55-6d2b368896bb"))
Multilines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IMultilines

struct __declspec(uuid("12fabdf2-caa4-4c8f-a3e6-a56dd90552b5"))
Contour;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IContour

struct __declspec(uuid("33dedd79-0855-4c92-a1b9-0d45bd3b8dab"))
ContourSegment;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IContourSegment

struct __declspec(uuid("1d09cc46-fbcc-4b09-8d0a-e20b22fae3ef"))
ContourLineSegment;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IContourSegment
    // [ default ] interface IContourLineSegment

struct __declspec(uuid("31450942-a67c-4459-b7eb-f1b900b100fd"))
ContourArc;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IContourSegment
    // [ default ] interface IContourArc

struct __declspec(uuid("93f02582-585f-4319-90b5-3974a70999d8"))
Curve2D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ICurve2D

struct __declspec(uuid("b3badeea-2f85-4a72-8546-dfea96e3e736"))
DrawingContours;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IDrawingContours

struct __declspec(uuid("63502bd9-2ec0-4908-8e45-de433e7b9db7"))
DrawingContour;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IDrawingContour

struct __declspec(uuid("452f7cd4-5c9c-48f5-956f-e07e0b1cc30d"))
SplitLines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISplitLines

struct __declspec(uuid("606ad1d9-fe0c-44ef-ab97-ee65ef26bc08"))
SplitLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISplitLine

struct __declspec(uuid("f77e276e-6f68-4a23-af68-eef29603b1ad"))
SurfacePatches;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISurfacePatches

struct __declspec(uuid("e61f549b-2e9e-45b6-a647-71730e3eea49"))
SurfacePatch;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISurfacePatch

struct __declspec(uuid("8b491e62-1de7-4c17-9629-f77df0e8e45c"))
FaceRemovers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IFaceRemovers

struct __declspec(uuid("5b433bc2-c5db-4cf7-8c99-ebcd1421d43e"))
FaceRemover;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IFaceRemover

struct __declspec(uuid("98702e0a-c12c-49f3-a188-fbc453b4b88c"))
SurfaceSewers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISurfaceSewers

struct __declspec(uuid("9541e720-ded1-4a04-a6f0-f11c2512c932"))
SurfaceSewer;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISurfaceSewer

struct __declspec(uuid("fdcf85ba-4bb2-4a83-af0d-73d967485bed"))
NurbsSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface INurbsSurfaces

struct __declspec(uuid("d2d5bc88-7991-4245-9968-6222f3993f45"))
NurbsSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface INurbsSurface

struct __declspec(uuid("f89065e8-d547-452f-8723-24db2304bc29"))
PropertyLibExplorer;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyLibExplorer

struct __declspec(uuid("d7a43da7-65ae-4006-ab72-b579cee9a99c"))
ExternalGDIObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IExternalGDIObject

struct __declspec(uuid("e91c61e1-5c35-4eb3-972e-213cc012426f"))
Circles;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ICircles

struct __declspec(uuid("9f1d8d78-c0cd-446d-877f-79330b01b8fa"))
_Circle;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ICircle

struct __declspec(uuid("2b471c1a-e44f-44ad-99ea-4ac126b80965"))
MacroObjects;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IMacroObjects

struct __declspec(uuid("a9880f8d-2166-4690-aca5-4479dbe4251b"))
MacroObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IMacroObject

struct __declspec(uuid("f0270b21-879a-4b96-ba43-95b402754fc0"))
Ellipses;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IEllipses

struct __declspec(uuid("209a2979-6f0c-4d27-b157-cfc74ba53f14"))
_Ellipse;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IEllipse

struct __declspec(uuid("a1471f9b-32be-4e66-bf1c-f83255c7ec6d"))
EllipseArcs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IEllipseArcs

struct __declspec(uuid("d79add45-a3fd-4376-a5e4-bd6e31c193c4"))
_EllipseArc;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IEllipseArc

struct __declspec(uuid("af3188c2-cd4d-45f6-bcb2-5f44f30200d1"))
_Point;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IPoint

struct __declspec(uuid("4b8726c5-e743-48a5-9c5f-506f5d57db7f"))
Points;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IPoints

struct __declspec(uuid("bca8bbb8-ccaa-4865-918f-7d035bd9e0d4"))
_Line;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ILine

struct __declspec(uuid("431c0844-4c3e-4110-8e16-2b952aa0521d"))
Lines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ILines

struct __declspec(uuid("bc4a8e55-c5c4-405c-9b78-aa36ca5b1156"))
_Bezier;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IBezier

struct __declspec(uuid("d744d5ee-e926-45b3-b622-f7b543a2d066"))
Beziers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IBeziers

struct __declspec(uuid("fb692157-2a44-4313-be9b-5c7ad70db633"))
Rectangles;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IRectangles

struct __declspec(uuid("28c7998f-bb9d-4edc-90ef-d810f40481b7"))
_Rectangle;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IRectangle

struct __declspec(uuid("c9204fdb-09b4-443e-9029-fe617cee9106"))
RegularPolygons;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IRegularPolygons

struct __declspec(uuid("11d9782e-11e1-471b-82d1-8635b0861339"))
RegularPolygon;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IRegularPolygon

struct __declspec(uuid("8095a5e3-86cb-4b66-aa45-e71e1e8883a9"))
InsertionObjects;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IInsertionObjects

struct __declspec(uuid("a4e92dc4-9804-4381-9b54-8e2030c50e6d"))
InsertionView;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IInsertionObject
    // [ default ] interface IInsertionView

struct __declspec(uuid("30d92d83-d913-4898-85a4-a6dcef2007ca"))
InsertionDefinition;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IInsertionDefinition

struct __declspec(uuid("ffc3a04a-c9bd-44c2-9485-41f4a655653c"))
PolyLine2D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IPolyLine2D

struct __declspec(uuid("6a3b4fb6-fb8d-40d2-b3ca-2dfe4ff725b5"))
PolyLines2D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IPolyLines2D

struct __declspec(uuid("487511e6-e3f4-4f7c-9217-c485b1463a61"))
Equidistants;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IEquidistants

struct __declspec(uuid("5eb10e2c-0d66-4ac2-9619-93b437cbece7"))
_Equidistant;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IEquidistant

struct __declspec(uuid("a71c349d-bafc-498c-ac18-b372cb2fd4b1"))
_Nurbs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface INurbs

struct __declspec(uuid("51e9ef87-e12d-48af-9e0f-35a279878831"))
Nurbses;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface INurbses

struct __declspec(uuid("80178c38-d3be-4e6b-9d22-aa43d8da2c46"))
CentreMarkers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ICentreMarkers

struct __declspec(uuid("f6e745a9-db3a-40f8-9318-d8a53d04df16"))
CentreMarker;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ICentreMarker

struct __declspec(uuid("79a4caf1-f75c-47d5-a3af-65d8b95ad17a"))
RemoteElement;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // interface IUnitMarking
    // [ default ] interface IRemoteElement

struct __declspec(uuid("8b0949ed-637a-49be-96d4-95cd37a80fcc"))
RemoteElements;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IRemoteElements

struct __declspec(uuid("aec9ca96-a058-49df-b566-195c82fe3576"))
_Attribute;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IAttribute

struct __declspec(uuid("a92d056b-1d1f-4c2b-97e9-77a5f837a68a"))
_ColumnInfo;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IColumnInfo

struct __declspec(uuid("949bd5dd-a728-4009-8176-222dfec7b7fc"))
_AttributeType;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IAttributeType

struct __declspec(uuid("325c006c-c993-4656-bc1a-de65d8401527"))
AxisLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IAxisLine

struct __declspec(uuid("78f95449-3a99-4b3e-86b5-c7bc9dddf074"))
AxisLines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IAxisLines

struct __declspec(uuid("df582f9b-e350-4ef8-a6ea-5d8d32d43ca1"))
Variable7;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVariable7

struct __declspec(uuid("863d0e6d-c8e0-4e49-88b7-dab423cda1c3"))
InsertionParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IInsertionParameters

struct __declspec(uuid("c0a36437-0d32-4d41-9c3f-0a70d66a4c03"))
DrawingGroup;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDrawingGroup

struct __declspec(uuid("abbc0387-2e69-4575-bad1-a97b02b418b2"))
DrawingGroups;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IDrawingGroups

struct __declspec(uuid("7627e43f-0b5a-410f-9456-81e7c130ac5b"))
_Hatch;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IHatch

struct __declspec(uuid("e51e0641-4f58-48a1-83d8-f77355db4e5e"))
_Colouring;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IColouring

struct __declspec(uuid("1044adc3-e779-4c48-a4dd-a00bef9341d6"))
Hatches;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IHatches

struct __declspec(uuid("caa76116-56ad-4466-9951-c16c10d43ce0"))
Colourings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IColourings

struct __declspec(uuid("11ba32bc-d5a2-474b-ba91-e38ee0a2c567"))
_SpecRough;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecRough

struct __declspec(uuid("281276eb-c88d-4f54-9c13-e6ddb8c2530d"))
TechnicalDemand;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITechnicalDemand

struct __declspec(uuid("acab7aba-ec2f-4e2b-a742-19bb5bc4441a"))
_Raster;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IRaster

struct __declspec(uuid("f90677d1-9ed2-4bdf-8c68-6b241b2a09f2"))
Rasters;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IRasters

struct __declspec(uuid("c5d9da68-4574-40d5-b92a-838c235f1903"))
OleDrawingObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IOleDrawingObject

struct __declspec(uuid("41e89e17-2fb8-4e08-a01a-cf9bb524a6a2"))
OleDrawingObjects;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IOleDrawingObjects

struct __declspec(uuid("45615dbb-7842-436c-9b84-063a13c061e8"))
SelectionManager;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISelectionManager
    // [ default, source ] dispinterface ksSelectionMngNotify

struct __declspec(uuid("495c89bd-48c4-40b3-9829-4e982f191ba2"))
ChooseManager;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IChooseManager

struct __declspec(uuid("ce94c01b-ed23-43fc-98bb-d7bd85ee0d47"))
SurfacesIntersectionCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISurfacesIntersectionCurve

struct __declspec(uuid("bdd167c1-8439-412e-8a41-4a01576cbc79"))
SurfacesIntersectionCurves;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISurfacesIntersectionCurves

struct __declspec(uuid("79cb82d9-6ea1-49d2-8479-c7005d87ec77"))
_Stamp;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IStamp
    // [ default, source ] dispinterface ksStampNotify

struct __declspec(uuid("1d709f94-c02d-4dad-8e74-b9e7434a8e62"))
WaveLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IWaveLine

struct __declspec(uuid("a5b25423-ba42-47b3-b0bd-af8cc911b767"))
WaveLines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IWaveLines

struct __declspec(uuid("1c337edb-f786-4d56-8bd2-06d927176c32"))
BrokenLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IBrokenLine

struct __declspec(uuid("31314843-3608-4b45-8f0a-ddbc308226c6"))
BrokenLines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IBrokenLines

struct __declspec(uuid("c2792bee-4f86-4610-908e-8e4b31b603fc"))
PropertyStyleList;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyStyleList

struct __declspec(uuid("6de8a8f7-28c6-42c7-a579-c24bdfa6b73f"))
_CopyObjectParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ICopyObjectParam

struct __declspec(uuid("07bd4468-d478-447c-8f20-1c6e2abbd9c2"))
CurveCopyObjectParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface ICopyObjectParam
    // [ default ] interface ICurveCopyObjectParam

struct __declspec(uuid("6f7f48fc-1da4-4689-9ae3-69804b842d1b"))
CircleCopyObjectParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface ICopyObjectParam
    // [ default ] interface ICircleCopyObjectParam

struct __declspec(uuid("fecbf8c1-d8b4-437f-8aa3-dc6362c2e51e"))
CircularCopyObjectParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface ICopyObjectParam
    // [ default ] interface ICircularCopyObjectParam

struct __declspec(uuid("ff54be1b-3b35-4b01-985d-8d696086f7e7"))
MeshCopyObjectParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface ICopyObjectParam
    // [ default ] interface IMeshCopyObjectParam

struct __declspec(uuid("87dab0e6-b749-47fc-8e02-76dac0439c81"))
PrintJob;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPrintJob

struct __declspec(uuid("f035e79b-1f65-42c6-ab49-498c65cc2e1f"))
PrintJob_Sheet;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPrintJob_Sheet

struct __declspec(uuid("9699d02a-6ff3-4c25-8974-5eb527024315"))
_Property;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IProperty

struct __declspec(uuid("19144a91-0d9f-4906-afd0-befb5625662d"))
LibArraySettings;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILibArraySettings

struct __declspec(uuid("2a2f00ce-536e-462d-b554-5809cde31095"))
ReportProcess;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IReportProcess

struct __declspec(uuid("d5abff52-a8a7-45cb-bdcd-103fdfef3e3e"))
Equidistants3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IEquidistants3D

struct __declspec(uuid("948eb787-026e-4990-8a92-b6b3f25d4d7c"))
Equidistant3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IEquidistant3D

struct __declspec(uuid("46dcf819-a2e0-4d7c-bfcd-f0181f6358ef"))
TrimmedCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ITrimmedCurve

struct __declspec(uuid("ffc3be29-a93a-47aa-9733-362c120e87d6"))
TrimmedCurves;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ITrimmedCurves

struct __declspec(uuid("7c809f8b-4bf4-42af-b1ce-7cbefa653730"))
TrimmedSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ITrimmedSurfaces

struct __declspec(uuid("5b3a39a9-82eb-4997-8279-6641009e9c9e"))
TrimmedSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ITrimmedSurface

struct __declspec(uuid("33289d92-16e7-4e98-b126-de9fce328b5e"))
FeaturePatterns;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IFeaturePatterns

struct __declspec(uuid("9a4b0a4c-961b-465e-ac12-99a604a503cb"))
LinearPattern;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IFeaturePattern
    // [ default ] interface ILinearPattern

struct __declspec(uuid("76921b78-7b2a-4e77-8647-6c4b26a1ce4c"))
RuledSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IRuledSurface

struct __declspec(uuid("f74e75c2-f5f9-482f-a30e-9b0dbfc7f426"))
RuledSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IRuledSurfaces

struct __declspec(uuid("f47c641c-e59b-4b44-9168-a156b15fef69"))
Vector3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3D

struct __declspec(uuid("a6cd01c2-fd04-4b95-93f4-4d0648349c3f"))
ExtensionSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IExtensionSurface

struct __declspec(uuid("e117eb74-5e7d-4eda-9f32-9c7cefa29311"))
ExtensionSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IExtensionSurfaces

struct __declspec(uuid("d575bf4a-81a5-4e01-a22b-cf944c3e9bdc"))
EquidistantSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IEquidistantSurface

struct __declspec(uuid("939b3deb-7bfd-47ea-af42-233b3b683571"))
EquidistantSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IEquidistantSurfaces

struct __declspec(uuid("ec056028-53ea-48c2-9de2-77cef64f4c1c"))
PointDrivenPattern;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IFeaturePattern
    // [ default ] interface IPointDrivenPattern

struct __declspec(uuid("ffc0a8bb-fb7c-4981-8e07-f5d3feb4dc5b"))
CircularPattern;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IFeaturePattern
    // [ default ] interface ICircularPattern

struct __declspec(uuid("6a4f281e-23ab-49c0-a0a3-b34695aa8a3d"))
PathPattern;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IFeaturePattern
    // [ default ] interface IPathPattern

struct __declspec(uuid("4dc7a9c1-c7a0-421b-8481-62147127994b"))
Vector3DBy2VertexesParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3DBy2VertexesParameters

struct __declspec(uuid("26383273-9991-4d0d-908b-2627f225d625"))
MirrorPattern;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IFeaturePattern
    // [ default ] interface IMirrorPattern

struct __declspec(uuid("2347bfd1-f8fb-4af3-a3de-1769ac24e158"))
Vector3DByCoefficientsParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3DByCoefficientsParameters

struct __declspec(uuid("65ca2b10-06a5-4684-ac5f-eb51aa0bcf28"))
Vector3DBy2AnglesParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3DBy2AnglesParameters

struct __declspec(uuid("5c0be8e4-a07b-4315-9ebf-933172ed1540"))
Vector3DByLocalCSParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3DByLocalCSParameters

struct __declspec(uuid("9f24fa16-76be-4f5e-9dee-dbd86fa9903e"))
Vector3DByObjectParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3DByObjectParameters

struct __declspec(uuid("aefae454-a1d8-4e22-bea9-af2d79df6be9"))
Vector3DAlongSurfaceNormalParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3DAlongSurfaceNormalParameters

struct __declspec(uuid("01ded71c-8500-47a1-9879-e7d1e955152c"))
Vector3DByCurveParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3DByCurveParameters

struct __declspec(uuid("431c567c-fa69-4dee-b6ee-c46156a0f2b3"))
Vector3DByScreenNormalParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IVector3DByScreenNormalParameters

struct __declspec(uuid("9b988e67-1efb-4441-bb37-f33a50a5c209"))
DerivedPattern;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IFeaturePattern
    // [ default ] interface IDerivedPattern

struct __declspec(uuid("cefd648e-547c-4d66-94e9-336e6e89bcfe"))
LocalCoordinateSystems2D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ILocalCoordinateSystems2D

struct __declspec(uuid("bcb037a2-d246-44af-92ef-fdc54624ffa2"))
LocalCoordinateSystem2D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILocalCoordinateSystem2D

struct __declspec(uuid("dc434f74-5bc2-4ae7-93e1-e9fc5670e028"))
ConnectCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IConnectCurve

struct __declspec(uuid("cdc3416d-e4fd-4c16-9abc-3db233feee76"))
ConnectCurves;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IConnectCurves

struct __declspec(uuid("ddc4358e-877e-469f-a465-26901265c51e"))
FilletCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IFilletCurve

struct __declspec(uuid("52cf9d27-73d6-4cc7-980e-26a4bec840bf"))
FilletCurves;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IFilletCurves

struct __declspec(uuid("63974ee5-cb94-44b2-8fa0-a13f4264baf5"))
SurfaceThickening;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISurfaceThickening

struct __declspec(uuid("b9101beb-76d3-44f9-8224-0005ff0e5593"))
SurfaceThickenings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISurfaceThickenings

struct __declspec(uuid("d26baed3-e5c6-422f-a6e9-c5fab91c39db"))
_Arc3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IArc3D

struct __declspec(uuid("0b792ea8-e117-4b5c-8775-c466a1108422"))
Arcs3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IArcs3D

struct __declspec(uuid("83ed9022-af06-4e7c-a77b-e95b325dbc43"))
PropertyOpticalProps;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyOpticalProps

struct __declspec(uuid("3fbf29aa-5691-4e7b-be08-2025f29f018e"))
IPropertyEditCheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCheckButton,put=PutCheckButton))
    VARIANT_BOOL CheckButton;
    __declspec(property(get=GetEnableCheckButton,put=PutEnableCheckButton))
    VARIANT_BOOL EnableCheckButton;
    __declspec(property(get=GetDefaultValue,put=PutDefaultValue))
    _bstr_t DefaultValue;
    __declspec(property(get=GetMissing,put=PutMissing))
    VARIANT_BOOL Missing;
    __declspec(property(get=GetEnableDeleteValue,put=PutEnableDeleteValue))
    VARIANT_BOOL EnableDeleteValue;
    __declspec(property(get=GetIsLinkValue,put=PutIsLinkValue))
    VARIANT_BOOL IsLinkValue;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCheckButton ( );
    void PutCheckButton (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableCheckButton ( );
    void PutEnableCheckButton (
        VARIANT_BOOL PVal );
    HRESULT SetCustomBitmaps (
        const _variant_t & IdUnchecked,
        const _variant_t & IdChecked,
        const _variant_t & IdIndeterminate,
        const _variant_t & HInstance );
    _bstr_t GetDefaultValue ( );
    void PutDefaultValue (
        _bstr_t PVal );
    VARIANT_BOOL GetMissing ( );
    void PutMissing (
        VARIANT_BOOL PVal );
    void PutEnableDeleteValue (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableDeleteValue ( );
    void PutIsLinkValue (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIsLinkValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CheckButton (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckButton (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableCheckButton (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableCheckButton (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_SetCustomBitmaps (
        /*[in]*/ VARIANT IdUnchecked,
        /*[in]*/ VARIANT IdChecked,
        /*[in]*/ VARIANT IdIndeterminate,
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_DefaultValue (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Missing (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Missing (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall put_EnableDeleteValue (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableDeleteValue (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IsLinkValue (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IsLinkValue (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("345103dc-4694-4a5e-ab0e-9652b62646cd"))
TablePattern;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IFeaturePattern
    // [ default ] interface ITablePattern

struct __declspec(uuid("5298a662-3440-4253-b15b-2580cee7c618"))
Rotateds;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IRotateds

struct __declspec(uuid("300c9f03-56ef-482f-a685-b7950a6d3457"))
Rotated;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IRotated

struct __declspec(uuid("d96a0574-fb91-4d49-af19-ebcc78335723"))
CutRotated;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IRotated
    // [ default ] interface ICutRotated

struct __declspec(uuid("9f594d5a-30b5-415a-ace6-d568f186d144"))
RotatedSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IRotated
    // [ default ] interface IRotatedSurface

struct __declspec(uuid("e25efef5-d5c7-49e6-9149-9ea6e36ce9ae"))
ExtrusionSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IExtrusion
    // [ default ] interface IExtrusionSurface

struct __declspec(uuid("cd7da97a-87f8-4b2e-b5d4-750d6150291e"))
Point3DParamBySphere;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPoint3DParamBySphere

struct __declspec(uuid("ec22584a-6fa6-4a66-b8de-21605ed1d12b"))
Point3DParamByCylinder;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPoint3DParamByCylinder

struct __declspec(uuid("1a73d002-0bd3-4a73-801e-ca6a322ce562"))
MeshPointsSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IMeshPointsSurface

struct __declspec(uuid("372e58ee-c5ac-48b5-a535-bb490598d931"))
MeshPointsSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IMeshPointsSurfaces

struct __declspec(uuid("43f3ca73-2015-4fb4-82c1-b25a9fa92310"))
CloudPointsSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICloudPointsSurface

struct __declspec(uuid("9860a4f8-58dc-4285-b1b0-5eb539d2a6ca"))
CloudPointsSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ICloudPointsSurfaces

struct __declspec(uuid("f5dd3012-45bd-42ea-a448-1cf7e646487a"))
ImportedSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IImportedSurface

struct __declspec(uuid("2df37218-0f1d-4e7e-b1e4-954b8aa790d2"))
ImportedSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IImportedSurfaces

struct __declspec(uuid("65989bdb-ab09-4cc5-a1dc-6dfb5e5c6496"))
ICopyObjectParam1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStoragesCopy,put=PutStoragesCopy))
    VARIANT_BOOL StoragesCopy;
    __declspec(property(get=GetHyperLinksCopy,put=PutHyperLinksCopy))
    VARIANT_BOOL HyperLinksCopy;

    //
    // Wrapper methods for error-handling
    //

    void PutStoragesCopy (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStoragesCopy ( );
    void PutHyperLinksCopy (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHyperLinksCopy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_StoragesCopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StoragesCopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HyperLinksCopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HyperLinksCopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("3d5b953b-4efd-4c55-9433-7205028f38d6"))
Scaling3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IScaling3D

struct __declspec(uuid("0b02fd29-1fb4-4c7b-9c0b-b63f6415c960"))
Scalings3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IScalings3D

struct __declspec(uuid("1b3eb690-1f97-4a36-9a0c-b251cc76a205"))
CurveOutLine;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICurveOutLine

struct __declspec(uuid("b1cddfb5-1b50-4e4f-aecf-51f975a7d6ef"))
CurveOutLines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ICurveOutLines

struct __declspec(uuid("5f39d09d-2c8f-4732-9635-528ff64d8a1b"))
CurveByLaw;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICurveByLaw

struct __declspec(uuid("7fdf9c11-fc8f-401c-9620-3e13c3254de0"))
CurveByLaws;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ICurveByLaws

struct __declspec(uuid("94aa20bc-33cf-40f0-b0ee-8dad194f49d4"))
TextTable;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITextTable

struct __declspec(uuid("0801d00a-7f0a-4045-bcd7-e148083953d2"))
LoadCombinationsParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILoadCombinationsParam

struct __declspec(uuid("ffbb62a8-cb09-4201-a85e-d22856d8bb8c"))
OpenDocumentParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IOpenDocumentParam

struct __declspec(uuid("e05cd072-eac4-4439-84c9-f1084d178d8c"))
IsoparametricCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IIsoparametricCurve

struct __declspec(uuid("6f579902-6cb6-4902-8020-4f2f71f9c3aa"))
IsoparametricCurves;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IIsoparametricCurves

struct __declspec(uuid("74f538e8-b3fa-40ab-8eec-5b3071e98c44"))
IsoparametricCurvesSet;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IIsoparametricCurvesSet

struct __declspec(uuid("6d1aeff5-1f8e-4bf1-986c-2d4332b3d5f8"))
IsoparametricCurvesSets;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IIsoparametricCurvesSets

struct __declspec(uuid("fe7d22f2-17ed-4446-a031-67d67ac47f29"))
SplineOnSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISplineOnSurface

struct __declspec(uuid("83ae651b-838c-4292-9b82-20918f192841"))
SplinesOnSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISplinesOnSurfaces

struct __declspec(uuid("97f94c42-4891-4c13-848a-529d3b1f8458"))
CurveBy2Projections;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICurveBy2Projections

struct __declspec(uuid("ab57fa3c-10b0-44bd-96ef-ea9f2af0d4da"))
CurvesBy2Projectionses;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ICurvesBy2Projectionses

struct __declspec(uuid("1c5024e9-8f3f-49d5-9b66-42e26a03614b"))
ProjectionCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IProjectionCurve

struct __declspec(uuid("31d3eace-36e4-4c17-9e47-20555b0b7f07"))
ProjectionCurves;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IProjectionCurves

struct __declspec(uuid("375fd000-6094-4351-8e03-e2a2631dfbe0"))
Contour3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IContour3D

struct __declspec(uuid("0ed8dfdc-5ef8-4a9f-940f-9104775417d7"))
Contours3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IContours3D

struct __declspec(uuid("874a7dfc-944e-49de-80de-eb78894c48d1"))
LineSegment3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ILineSegment3D

struct __declspec(uuid("9d634adf-e8bd-48a3-aa20-4fe654605d3e"))
LineSegments3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ILineSegments3D

struct __declspec(uuid("dfa86296-3244-47d5-a306-d115ffc45da1"))
UnhistoredCurve3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IUnhistoredCurve3D

struct __declspec(uuid("fc9e1d2c-ce09-45e7-b95b-bf060ed6b597"))
UnhistoredCurves3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IUnhistoredCurves3D

struct __declspec(uuid("848b7259-b5fe-4cf1-a5bc-6ad3704d8f2f"))
TechnicalDemand3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITechnicalDemand3D

struct __declspec(uuid("8ed8030c-87c3-41d4-bb4d-319ba74d6879"))
Embodiment;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IEmbodiment

struct __declspec(uuid("7f3eebf4-9277-4603-ad0a-c8de1624f444"))
INewPartDocumentSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;
    __declspec(property(get=GetDensity,put=PutDensity))
    double Density;
    __declspec(property(get=GetMaterialLocation,put=PutMaterialLocation))
    _bstr_t MaterialLocation;
    __declspec(property(get=GetHatchParam))
    IHatchParamPtr HatchParam;

    //
    // Wrapper methods for error-handling
    //

    void PutMaterial (
        _bstr_t PVal );
    _bstr_t GetMaterial ( );
    void PutDensity (
        double PVal );
    double GetDensity ( );
    void PutMaterialLocation (
        _bstr_t PVal );
    _bstr_t GetMaterialLocation ( );
    IHatchParamPtr GetHatchParam ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Density (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MaterialLocation (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_MaterialLocation (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_HatchParam (
        /*[out,retval]*/ struct IHatchParam * * Result ) = 0;
};

struct __declspec(uuid("c926e817-2b20-48a1-ab97-f63972fba07a"))
Spirals3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISpirals3D

struct __declspec(uuid("bd740853-3960-46d9-8dab-1c490e699b6a"))
ConicSpiral3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IConicSpiral3D

struct __declspec(uuid("cc5b7b89-dfa5-42eb-b307-113a013052d6"))
CylindricSpiral3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICylindricSpiral3D

struct __declspec(uuid("ce1a13ce-c56c-4bca-94ce-45d2c36b7eaa"))
PointsArrOnCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IPointsArrOnCurve

struct __declspec(uuid("cfa80033-a78c-43ea-9cea-b26d1a18fa80"))
PointsArrsOnCurves;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IPointsArrsOnCurves

struct __declspec(uuid("e70927b9-faa5-4149-b751-946a1e0e0efe"))
PointsArrOnSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IPointsArrOnSurface

struct __declspec(uuid("b4e7ddf0-e62a-4957-b477-b3b5797bf85a"))
PointsArrsOnSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IPointsArrsOnSurfaces

struct __declspec(uuid("02155adc-2f79-497f-9e33-9e3496050c71"))
PointsArrFromFile;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IPointsArrFromFile

struct __declspec(uuid("6dab2b49-9659-411b-abeb-5eb049aa817c"))
PointsArrsFromFiles;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IPointsArrsFromFiles

struct __declspec(uuid("0bdeef46-fcd5-4f3c-b9ae-5a073689ba91"))
MathCurve3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IMathCurve3D

struct __declspec(uuid("8be0deb4-1bd0-4997-b82b-14605574a53d"))
Axis3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IAxis3D

struct __declspec(uuid("453b98c0-91d6-415b-8c96-ce924f6e3211"))
IAxis3D1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowName,put=PutShowName))
    VARIANT_BOOL ShowName;

    //
    // Wrapper methods for error-handling
    //

    void PutShowName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ShowName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("7c3d9245-648e-49d4-a4ca-db8d3257683f"))
Axes3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IAxes3D

struct __declspec(uuid("f0d21c54-2816-4fe2-9aa0-a88821488ab3"))
Axis3DBy2Points;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IAxis3D
    // [ default ] interface IAxis3DBy2Points

struct __declspec(uuid("ef803c9d-8e47-4eb4-a1f4-fd4d3769a76d"))
Axis3DBy2Planes;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IAxis3D
    // [ default ] interface IAxis3DBy2Planes

struct __declspec(uuid("c0202ada-0962-41da-ade2-d3015a3e4533"))
Axis3DByConeface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IAxis3D
    // [ default ] interface IAxis3DByConeface

struct __declspec(uuid("59309a8d-e9b0-45c2-98e8-792ec6c93f15"))
Axis3DByEdge;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IAxis3D
    // [ default ] interface IAxis3DByEdge

struct __declspec(uuid("a3be6c5c-e339-4b42-900e-2719848cdc85"))
Axis3DByPointAndObject;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IAxis3D
    // [ default ] interface IAxis3DByPointAndObject

struct __declspec(uuid("572af961-64c8-4335-808c-17f2e8af012e"))
Axis3DByOperation;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IAxis3D
    // [ default ] interface IAxis3DByOperation

struct __declspec(uuid("d6da79a3-cf5d-432b-900f-429403741ddd"))
MathSurface3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IMathSurface3D

struct __declspec(uuid("02943f10-afc8-4be9-86b0-ace0929a2dcc"))
Planes3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IPlanes3D

struct __declspec(uuid("debc9cf4-ad07-42f6-a795-176eb0eb8c75"))
Plane3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IPlane3D

struct __declspec(uuid("de4efb36-cf27-4dbc-90cb-7128c3903654"))
IPlane3D1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleGabarit,put=PutScaleGabarit))
    VARIANT_BOOL ScaleGabarit;
    __declspec(property(get=GetShowName,put=PutShowName))
    VARIANT_BOOL ShowName;
    __declspec(property(get=GetParamUMin))
    double ParamUMin;
    __declspec(property(get=GetParamUMax))
    double ParamUMax;
    __declspec(property(get=GetParamVMin))
    double ParamVMin;
    __declspec(property(get=GetParamVMax))
    double ParamVMax;

    //
    // Wrapper methods for error-handling
    //

    void PutScaleGabarit (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetScaleGabarit ( );
    void PutShowName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowName ( );
    double GetParamUMin ( );
    double GetParamUMax ( );
    double GetParamVMin ( );
    double GetParamVMax ( );
    VARIANT_BOOL SetLimit (
        double Umin,
        double Vmin,
        double Umax,
        double Vmax );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ScaleGabarit (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ScaleGabarit (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ParamUMin (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ParamUMax (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ParamVMin (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ParamVMax (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetLimit (
        /*[in]*/ double Umin,
        /*[in]*/ double Vmin,
        /*[in]*/ double Umax,
        /*[in]*/ double Vmax,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("762d8288-0893-4b8d-a434-99e44405ade2"))
Plane3DByPlaneCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DByPlaneCurve

struct __declspec(uuid("5a341bd4-9a7f-4dc5-8721-88c544530f09"))
Plane3DTangentToFaceInPoint;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DTangentToFaceInPoint

struct __declspec(uuid("3d67d60e-a4cc-4714-8439-9ec6846e8934"))
Plane3DByOffset;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DByOffset

struct __declspec(uuid("775b6240-2ad6-432f-8f65-a54f945f93f1"))
Plane3DBy3Points;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DBy3Points

struct __declspec(uuid("d0e15cc6-5630-42b3-8706-8b205c7e7d11"))
Plane3DByAngle;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DByAngle

struct __declspec(uuid("f2373bf1-dc0f-4b94-b0ae-48265c028d19"))
Plane3DByEdgeAndPoint;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DByEdgeAndPoint

struct __declspec(uuid("451057bb-dd5e-44c5-8bc4-15f6a2d24cfc"))
Plane3DParallelByPoint;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DParallelByPoint

struct __declspec(uuid("01a5298a-1472-4d90-9441-8e0591501d9c"))
Plane3DPerpendicularByEdge;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DPerpendicularByEdge

struct __declspec(uuid("7eedfd78-29a9-40d6-87b8-abd0dca86774"))
Plane3DNormalToSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DNormalToSurface

struct __declspec(uuid("a928037a-11d4-4dd7-93af-491c9d5ad907"))
Plane3DMiddle;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DMiddle

struct __declspec(uuid("1dee85e1-d2de-4981-a605-2d0ae6393f61"))
Plane3DByEdgeAndPlane;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DByEdgeAndPlane

struct __declspec(uuid("c7ddd05c-d299-46e9-8cd6-3e167a060f21"))
Plane3DBy2Edge;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DBy2Edge

struct __declspec(uuid("a905b4f2-52d9-4e4c-b9bc-09a56035f751"))
Plane3DTangentToFace;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IPlane3D
    // [ default ] interface IPlane3DTangentToFace

struct __declspec(uuid("c3e4216d-283e-40b6-8df9-af5c81b3cf2e"))
Report;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IReport

struct __declspec(uuid("6611f953-12f2-41ef-889d-b17e643d80e2"))
ReportStyle;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IReportStyle

struct __declspec(uuid("a124f0e6-da11-45b4-8618-95b63c36c7c3"))
AssociationTables;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IAssociationTables

struct __declspec(uuid("8883dd05-f024-4c44-b9d2-e29ef361a23c"))
AssociationTable;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IAssociationTable

struct __declspec(uuid("748767b1-4a6f-4270-8eed-9810313de348"))
ReportStyleColumn;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IReportStyleColumn

struct __declspec(uuid("11b32e53-a4eb-427a-873a-5651330afc17"))
ReportParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IReportParam

struct __declspec(uuid("bd6a9cd5-210a-41a7-9aa0-d07064ed460e"))
UserFolders;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IUserFolders

struct __declspec(uuid("ff3b01c1-0693-45ae-a641-8bcaae5c99b2"))
UserFolder;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IUserFolder

struct __declspec(uuid("2a26a1b6-9b08-4f28-8828-58ca667ad6df"))
UserDesignationCompObj;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IUserDesignationCompObj

struct __declspec(uuid("de5cd3c8-0b9b-4b42-a1b7-12690b74d64e"))
UserObject3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IUserObject3D

struct __declspec(uuid("bf632568-4e7a-4d21-ba18-ae708775e92e"))
UserObjects3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IUserObjects3D

struct __declspec(uuid("7979b891-59d0-44bb-a643-16c340259e77"))
Serializer;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISerializer

struct __declspec(uuid("d30e2696-b263-4283-baca-04471df8311e"))
Placement3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPlacement3D

struct __declspec(uuid("91008bbd-b5be-42d8-b9d9-37127514c6f1"))
Document3DSettings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDocumentSettings
    // [ default ] interface IDocument3DSettings

struct __declspec(uuid("4f500bed-70ae-4afd-a13c-c345fbe39663"))
Layer3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILayer3D

struct __declspec(uuid("b74e958e-2583-4b60-a1ba-fe72ec8f0930"))
Layers3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ILayers3D

struct __declspec(uuid("049f66cc-b9ac-4689-b0b4-b1183b5b67b2"))
LayerGroup3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ILayerGroup3D

struct __declspec(uuid("e08fa7c6-1a29-43ae-b0d8-158159bf1d27"))
LayerGroups3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface ILayerGroups3D

struct __declspec(uuid("2edcb445-fe02-4529-bad6-ded0c9daf6a5"))
Document3DManager;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDocument3DManager

struct __declspec(uuid("b1b69577-aa04-41ac-a98e-f7ddef40afc0"))
ToleranceRecalc;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IToleranceRecalc

struct __declspec(uuid("86eb116e-6926-4376-ae57-8f26d823b306"))
SpecRough3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecRough3D

struct __declspec(uuid("62afe65c-2f2e-47fa-965a-37cca9b25352"))
BilletObsolete;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface ILocalCSObject
    // interface IEmbodimentsManager
    // [ default ] interface IBilletObsolete

struct __declspec(uuid("42c8d1f3-0daa-477b-8994-184e59dbdd7c"))
BilletsObsoletes;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IBilletsObsoletes

struct __declspec(uuid("277e8b80-ba49-4779-94d2-cfb7eef20f06"))
CopyGeometry;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICopyGeometry

struct __declspec(uuid("bb8ba111-24ff-47f6-ae7b-97023f467a1d"))
CopiesGeometry;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ICopiesGeometry

struct __declspec(uuid("01d8a252-c3a1-45ea-bc92-0e2b6258edf5"))
CollectionGeometry;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICollectionGeometry

struct __declspec(uuid("55556ea2-4975-4c27-97bb-a78c08d98e2c"))
CollectionsGeometry;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ICollectionsGeometry

struct __declspec(uuid("606263b5-e920-46fb-930e-4107cc0fba1b"))
Thread;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IThreadsParameters
    // [ default ] interface IThread

struct __declspec(uuid("aba1bf7e-8138-4dc3-8efb-a240e2b8b36e"))
Threads;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IThreads

struct __declspec(uuid("4591067e-c29a-4548-96b6-b455af7006dc"))
PropertyGroupBegin;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyGroupBegin

struct __declspec(uuid("7b10bc9a-6a9a-4d5e-b896-294134fb680f"))
PropertyGroupEnd;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyGroupEnd

struct __declspec(uuid("a54a786d-fbba-45f6-bafb-18e6d2ce96ff"))
Process2D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IProcess
    // [ default ] interface IProcess2D
    // [ default, source ] dispinterface ksProcess2DNotify

struct __declspec(uuid("c08b3775-2631-4d34-83e0-f18daf855848"))
Phantom2D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IPhantom2D

struct __declspec(uuid("172114b0-f8b7-4bed-a38b-62bfc490a3af"))
Process3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IProcess
    // [ default ] interface IProcess3D
    // [ default, source ] dispinterface ksProcess3DNotify

struct __declspec(uuid("a795dec9-d9bd-4275-b553-44855bb59d71"))
ThreadPattern;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IThreadPattern

struct __declspec(uuid("67d6f78e-4f92-4809-9894-6fa7da814efa"))
PropertyTwinSwitcher;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyTwinSwitcher

struct __declspec(uuid("7ad229f8-cc73-4ff2-a611-02782b6ddc75"))
ThreadDialogParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IThreadDialogParam

struct __declspec(uuid("e32a2d46-75f5-4da8-a40e-03ec806f20d1"))
PropertyPoint3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyPoint3D

struct __declspec(uuid("67dbf7c5-ffb1-4e47-a8e5-901a63ee130a"))
MateConstraint3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IMateConstraint3D

struct __declspec(uuid("2d4f2072-ebd6-4cb6-b1c2-535bbf097f40"))
Mate3DByAngle;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IMateConstraint3D
    // [ default ] interface IMate3DByAngle

struct __declspec(uuid("fbbd6a6c-65f3-492e-9095-15d6111a5ea1"))
Mate3DByTangent;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IMateConstraint3D
    // [ default ] interface IMate3DByTangent

struct __declspec(uuid("80bc4fce-18ba-42a7-8e62-563843274250"))
Mate3DSymmetry;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IMateConstraint3D
    // [ default ] interface IMate3DSymmetry

struct __declspec(uuid("fa6ee09a-e2c8-45b7-a4ec-b53f45b84652"))
Mate3DTransmission;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IMateConstraint3D
    // [ default ] interface IMate3DTransmission

struct __declspec(uuid("a7301502-52ca-4886-94fc-5b8002880ff4"))
Mate3DCamGear;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IMateConstraint3D
    // [ default ] interface IMate3DCamGear

struct __declspec(uuid("8e8b8453-1695-477d-9a39-c957ffad84fe"))
Mate3DDependentPosition;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IMateConstraint3D
    // [ default ] interface IMate3DDependentPosition

struct __declspec(uuid("7f6a75b2-8c3d-46b1-8125-07beb64b6bbb"))
PropertyPreviewText;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyPreviewText

struct __declspec(uuid("e3643e08-6371-413b-8e4a-99c56bd41d47"))
PropertyAggregateControl;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyAggregateControl

struct __declspec(uuid("9f4504bc-739e-42c6-a946-7875f3d43589"))
Hole3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IHole3D

struct __declspec(uuid("12851dca-a72c-4f44-9cf0-282476f65052"))
Holes3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IHoles3D

struct __declspec(uuid("0912865e-0deb-4c6a-8aa0-70a512603e9e"))
PropertyBasePoint;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyBasePoint

struct __declspec(uuid("24d51cca-a3f0-4055-86a5-32077679da60"))
PropertyLinkButton;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyLinkButton

struct __declspec(uuid("22d3bacb-1077-417d-a138-bbf0754a73b6"))
CountersinkHole3DParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ICountersinkHoleParameters

struct __declspec(uuid("e588e23f-6ac1-4770-b184-309b13180e18"))
SpotfacingHoleParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpotfacingHoleParameters

struct __declspec(uuid("2d9b843d-99bb-4322-aae7-b1d0c3e82f83"))
CountersinkSpotfacingHoleParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ICountersinkSpotfacingHoleParameters

struct __declspec(uuid("d3ca313f-8817-48b7-892d-6d7dfe1e407b"))
ConicHoleParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IConicHoleParameters

struct __declspec(uuid("e4a732a0-3da8-40e3-9e05-e65f22f080da"))
PropertyMarking;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IPropertyControl
    // [ default ] interface IPropertyMarking

struct __declspec(uuid("5e6970d9-b721-4b7c-b29d-7aa4b25cbcc8"))
Chamfer;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IChamfer

struct __declspec(uuid("2ac5e1b7-c86e-476b-9015-f102a303b0ce"))
Chamfers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IChamfers

struct __declspec(uuid("754d6a63-a68d-4574-aa01-f8c252873a1c"))
Fillet;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IFillet

struct __declspec(uuid("bc5254e9-8a80-49ba-9812-689f597e0908"))
Fillets;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IFillets

struct __declspec(uuid("1e0dc81a-179b-45da-a285-06a40015c953"))
Incline;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IIncline

struct __declspec(uuid("6dcec4a9-cfa6-410b-b7a1-1fd60dcd2baf"))
Inclines;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IInclines

struct __declspec(uuid("474ff0ba-e909-468c-bd6c-9a455b420350"))
Rib;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IRib

struct __declspec(uuid("7e0d8d58-3bf2-4437-bc0d-236261c706cc"))
Ribs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IRibs

struct __declspec(uuid("0290ba8f-2f72-4cbb-b7ad-d0437f6bb15c"))
_Shell;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IShell

struct __declspec(uuid("6cffe821-37ca-476c-9a65-6e011459752a"))
Shells;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IShells

struct __declspec(uuid("340a4b80-c3ea-4c3d-9da2-50bb2b4adfee"))
_Boolean;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IBoolean

struct __declspec(uuid("86ba33c6-0381-4ceb-a6fd-84c39645d7d2"))
Booleans;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IBooleans

struct __declspec(uuid("2757f3a6-617f-4b75-8abc-459e30561316"))
Cut;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICut

struct __declspec(uuid("3803d968-e469-45c2-8c3b-0d5b0e00c034"))
Cuts;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ICuts

struct __declspec(uuid("f4fa0ee2-9988-4fe9-af69-d9f84368af09"))
Loft;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ILoft

struct __declspec(uuid("73f8984c-5a44-455c-973d-98e9589db57a"))
Lofts;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ILofts

struct __declspec(uuid("c2b10eda-fafa-4485-a7ef-0a61fd26536c"))
Coupling;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ICoupling

struct __declspec(uuid("b8beec82-bec3-406f-93c5-4464149c3275"))
Evolution;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IEvolution

struct __declspec(uuid("c21b92bd-b9d0-44c7-b52f-4afe57f7899e"))
Evolutions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IEvolutions

struct __declspec(uuid("d3e2c967-ab5a-4732-a7c1-d185df7a0ed6"))
Vertex;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IVertex

struct __declspec(uuid("98f55f56-45a6-4210-955a-e831907fd36f"))
Edge;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IEdge

struct __declspec(uuid("b92823bb-3d0f-4994-8bb4-7bfc4b6f4cce"))
Face;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IFace

struct __declspec(uuid("6198541b-92b1-40b1-8484-f6e18302f75e"))
Loop7;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILoop7

struct __declspec(uuid("83abcacd-f2cf-489c-bbe6-116069591839"))
OrientedEdge7;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IOrientedEdge7

struct __declspec(uuid("d8af682b-5f03-4cce-9e77-787a76d2b55f"))
UnionComponents;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IUnionComponents

struct __declspec(uuid("801b8cc1-1735-4448-be29-a16e578d9851"))
UnionsComponents;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IUnionsComponents

struct __declspec(uuid("cfdd8bf4-0d38-49e7-a859-ca3bffcdb799"))
MoldCavity;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IMoldCavity

struct __declspec(uuid("c334e4dd-61dc-402e-bb85-0dc7c89b9bc2"))
MoldCavities;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IMoldCavities

struct __declspec(uuid("6b9c4409-d991-4e0e-a8de-afdd3a582ae8"))
MacroObject3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IMacroObject3D

struct __declspec(uuid("a7238b7e-7e31-46c0-a814-ecb90b5414a5"))
MacroObjects3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IMacroObjects3D

struct __declspec(uuid("53212e12-f293-4574-bb38-62967871a216"))
NurbsSurfaceByCurvesMesh;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface INurbsSurfaceByCurvesMesh

struct __declspec(uuid("0bb4e6a3-0ba0-4839-9f06-53179930918e"))
NurbsSurfacesByCurvesMeshs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface INurbsSurfacesByCurvesMeshs

struct __declspec(uuid("b82a24f7-c580-4577-9f18-09e817d9cc90"))
JointSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IJointSurface

struct __declspec(uuid("0fd2565c-9396-4df6-936a-dbbc3378bc21"))
JointSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IJointSurfaces

struct __declspec(uuid("5924e1df-1dba-4076-88ee-55bfa2d4088d"))
BodyReposition;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IBodyReposition

struct __declspec(uuid("b0280081-56aa-48b8-a675-30f6a4ae6445"))
BodyRepositions;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IBodyRepositions

struct __declspec(uuid("2a128198-f2cf-4f33-85bf-7e4814254308"))
DistanceAngleMeasurement3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IDistanceAngleMeasurement3D

struct __declspec(uuid("cfa1be63-daec-4b9b-ae59-a200323fdab1"))
DistanceAngleMeasurements3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IDistanceAngleMeasurements3D

struct __declspec(uuid("8064eace-0aae-4ae9-96a1-c7a31310ddd6"))
EdgeLengthMeasurement3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IEdgeLengthMeasurement3D

struct __declspec(uuid("18b1fabc-67db-4847-a0e8-95cfc542d109"))
EdgeLengthMeasurements3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IEdgeLengthMeasurements3D

struct __declspec(uuid("a0d30170-dd32-466a-9cdb-ac91b0795995"))
AreaMeasurement3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IAreaMeasurement3D

struct __declspec(uuid("d1b34114-0946-4074-9e57-a84a8325845a"))
AreaMeasurements3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IAreaMeasurements3D

struct __declspec(uuid("4a2700f2-2a3f-443b-9140-e631aee572da"))
SheetMetalSketchBend;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalSketchBend

struct __declspec(uuid("e7bd79cf-f9ec-4eef-8431-d0b61b54e8b6"))
SheetMetalSketchBends;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalSketchBends

struct __declspec(uuid("d3fa6c9c-dac5-4e55-a1b0-5a47ad9f5b40"))
SheetMetalClosedCorner;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalClosedCorner

struct __declspec(uuid("2371bfb4-d216-4bab-8da8-f050bdac0554"))
SheetMetalClosedCorners;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalClosedCorners

struct __declspec(uuid("0d764bea-4ba1-440b-8930-62e675dfbb84"))
SheetMetalPlate;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalPlate

struct __declspec(uuid("76d215ce-f548-488c-abd0-fdfe794f505f"))
SheetMetalPlates;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalPlates

struct __declspec(uuid("81abf9fe-165d-4975-aaea-59ae4989885b"))
SheetMetalBendedStraighten;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalBendedStraighten

struct __declspec(uuid("2a0b422f-d150-4a4b-be25-2ae2f97068ef"))
SheetMetalBendedStraightens;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalBendedStraightens

struct __declspec(uuid("5f2dc19a-c995-40dc-a6c5-bf5ca453e1eb"))
SheetMetalShoulder;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalShoulder

struct __declspec(uuid("fabb909b-c4bc-4632-8566-b7f358fd3fe0"))
SheetMetalShoulders;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalShoulders

struct __declspec(uuid("0f80305a-f369-4406-9519-8ec17aaa8fd6"))
SheetMetalJalousie;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalJalousie

struct __declspec(uuid("64eda2cf-1a52-4766-aabf-dd451ef185cb"))
SheetMetalJalousies;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalJalousies

struct __declspec(uuid("4757f80e-8981-4ed5-adf9-bcf14e592b6f"))
SheetMetalPressForming;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalPressForming

struct __declspec(uuid("c974e025-46fb-4eed-9456-78876ddcc4fb"))
SheetMetalPressFormings;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalPressFormings

struct __declspec(uuid("6774dd56-8666-4b40-b22f-74b43299342d"))
MeshObject3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IMeshObject3D

struct __declspec(uuid("6ab4afcd-efd7-49fb-9fa2-0cbbac094de9"))
ContentDialogParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IContentDialogParam
    // [ default, source ] dispinterface ksContentDialogNotify

struct __declspec(uuid("9dc3e672-5b83-459b-aa24-052e1c8f138a"))
SheetMetalRib;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalRib

struct __declspec(uuid("e7c8ca4e-0110-45ef-b5cf-3a3d85abcfe3"))
SheetMetalRibs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalRibs

struct __declspec(uuid("d92a7102-79cb-46d8-b18a-1804d71f5416"))
ISheetMetalRuledShell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDraftValue,put=PutDraftValue))
    double DraftValue[];
    __declspec(property(get=GetDraftOutward,put=PutDraftOutward))
    VARIANT_BOOL DraftOutward[];
    __declspec(property(get=GetKeepRadius,put=PutKeepRadius))
    VARIANT_BOOL KeepRadius;
    __declspec(property(get=GetRuledBorder,put=PutRuledBorder))
    enum ksRuledBorderEnum RuledBorder;
    __declspec(property(get=GetRuledJoint,put=PutRuledJoint))
    enum ksRuledJointEnum RuledJoint;
    __declspec(property(get=GetGapValue,put=PutGapValue))
    double GapValue;
    __declspec(property(get=GetOffsetGapType,put=PutOffsetGapType))
    enum ksOffsetGapType OffsetGapType;
    __declspec(property(get=GetGapOffsetU,put=PutGapOffsetU))
    double GapOffsetU;
    __declspec(property(get=GetGapOffsetLength,put=PutGapOffsetLength))
    double GapOffsetLength;
    __declspec(property(get=GetGapDraftPosition,put=PutGapDraftPosition))
    double GapDraftPosition;
    __declspec(property(get=GetUseSegmentation,put=PutUseSegmentation))
    VARIANT_BOOL UseSegmentation;
    __declspec(property(get=GetSegmentationMethod,put=PutSegmentationMethod))
    enum ksSegmentationMethodEnum SegmentationMethod;
    __declspec(property(get=GetSegmentationSplitValue,put=PutSegmentationSplitValue))
    double SegmentationSplitValue;

    //
    // Wrapper methods for error-handling
    //

    void PutDraftValue (
        VARIANT_BOOL Normal,
        double PVal );
    double GetDraftValue (
        VARIANT_BOOL Normal );
    void PutDraftOutward (
        VARIANT_BOOL Normal,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDraftOutward (
        VARIANT_BOOL Normal );
    void PutKeepRadius (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetKeepRadius ( );
    void PutRuledBorder (
        enum ksRuledBorderEnum PVal );
    enum ksRuledBorderEnum GetRuledBorder ( );
    void PutRuledJoint (
        enum ksRuledJointEnum PVal );
    enum ksRuledJointEnum GetRuledJoint ( );
    double GetGapValue ( );
    void PutGapValue (
        double PVal );
    void PutOffsetGapType (
        enum ksOffsetGapType PVal );
    enum ksOffsetGapType GetOffsetGapType ( );
    void PutGapOffsetU (
        double PVal );
    double GetGapOffsetU ( );
    void PutGapOffsetLength (
        double PVal );
    double GetGapOffsetLength ( );
    void PutGapDraftPosition (
        double PVal );
    double GetGapDraftPosition ( );
    void PutUseSegmentation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUseSegmentation ( );
    void PutSegmentationMethod (
        enum ksSegmentationMethodEnum PVal );
    enum ksSegmentationMethodEnum GetSegmentationMethod ( );
    void PutSegmentationSplitValue (
        double PVal );
    double GetSegmentationSplitValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DraftValue (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DraftValue (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DraftOutward (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DraftOutward (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_KeepRadius (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_KeepRadius (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RuledBorder (
        /*[in]*/ enum ksRuledBorderEnum PVal ) = 0;
      virtual HRESULT __stdcall get_RuledBorder (
        /*[out,retval]*/ enum ksRuledBorderEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_RuledJoint (
        /*[in]*/ enum ksRuledJointEnum PVal ) = 0;
      virtual HRESULT __stdcall get_RuledJoint (
        /*[out,retval]*/ enum ksRuledJointEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_GapValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_GapValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetGapType (
        /*[in]*/ enum ksOffsetGapType PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetGapType (
        /*[out,retval]*/ enum ksOffsetGapType * PVal ) = 0;
      virtual HRESULT __stdcall put_GapOffsetU (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_GapOffsetU (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_GapOffsetLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_GapOffsetLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_GapDraftPosition (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_GapDraftPosition (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_UseSegmentation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UseSegmentation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SegmentationMethod (
        /*[in]*/ enum ksSegmentationMethodEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SegmentationMethod (
        /*[out,retval]*/ enum ksSegmentationMethodEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_SegmentationSplitValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SegmentationSplitValue (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("da8608dc-9b21-418e-8813-aa33b50a4dad"))
LibraryHoleParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ILibraryHoleParameters

struct __declspec(uuid("98cf3e5e-0548-4616-8bb9-28c1a1092955"))
ConicCurve;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IConicCurve

struct __declspec(uuid("4c5033ff-6870-45b1-a995-733578c23553"))
ConicCurves;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IConicCurves

struct __declspec(uuid("46bf1402-7436-42cd-9084-da35c498326a"))
CircularCentres;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ICircularCentres

struct __declspec(uuid("412f4305-e302-4870-863d-99015f6f0896"))
CircularsCentries;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ICircularsCentries

struct __declspec(uuid("b7c0077b-faef-4183-b3be-0b07529d3342"))
LinearCentres;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface ILinearCentres

struct __declspec(uuid("eafbf8c9-ea01-4550-8c56-391d57ecce3a"))
LinearsCentries;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface ILinearsCentries

struct __declspec(uuid("39bc03af-5e8d-4466-b69a-7e5c2fe8e79c"))
FullFillet;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IFullFillet

struct __declspec(uuid("c2c76bbb-c57c-4263-8250-6289df04ee8e"))
FullFillets;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IFullFillets

struct __declspec(uuid("a81f2abb-4f55-4c82-bdc8-78d10baa8c15"))
Zone;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IZone

struct __declspec(uuid("39e54d0f-3d65-43cd-bca5-b8d46fe19077"))
ZoneDivision;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IZoneDivision

struct __declspec(uuid("d45c07b1-e8fe-43f8-8396-5bdb05937155"))
ZonesManager;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IZonesManager

struct __declspec(uuid("cb8a3b37-b26d-400c-ae24-1395176fdc87"))
ZoneParametersByBorderPoints;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IZoneParametersByBorderPoints

struct __declspec(uuid("c41922e4-e46f-48c2-8ef3-3a52598aff26"))
ZoneParametersByObjects;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IZoneParametersByObjects

struct __declspec(uuid("00f35e8b-f196-4447-9546-ca9d21ecd3b7"))
ZoneDivisionParametersRegular;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IZoneDivisionParametersRegular

struct __declspec(uuid("2d21b406-9933-4038-9196-5111472c5099"))
ZoneDivisionParametersByPlanes;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IZoneDivisionParametersByPlanes

struct __declspec(uuid("5ca6f5da-81a0-4b99-93b4-c4d68dd8f42d"))
DynamicCrossSectionStep;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDynamicCrossSectionStep

struct __declspec(uuid("2180f44d-3125-45f6-8466-62793172a940"))
DynamicCrossSection;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IDynamicCrossSection

struct __declspec(uuid("0cefc601-d4aa-4493-8905-636f87167515"))
DynamicCrossSectionStepParametersByFreePlane;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDynamicCrossSectionStepParametersByFreePlane

struct __declspec(uuid("543a8daf-a009-4d20-83ee-1ecffab1cd24"))
DynamicCrossSectionStepParametersByOffsetPlane;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDynamicCrossSectionStepParametersByOffsetPlane

struct __declspec(uuid("d6f7640a-ce45-4792-b301-b9f9be8ff483"))
DynamicCrossSectionStepParametersByRotatedPlane;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDynamicCrossSectionStepParametersByRotatedPlane

struct __declspec(uuid("017a292e-8bfe-4a2c-a3f5-ac6b8d015d49"))
DynamicCrossSectionStepParametersByZone;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDynamicCrossSectionStepParametersByZone

struct __declspec(uuid("e785bb44-ea2d-4704-a645-2400a19aebbc"))
DynamicCrossSectionStepParametersByBorderPoints;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDynamicCrossSectionStepParametersByBorderPoints

struct __declspec(uuid("11f1cf98-3563-4dfa-b6ac-e3bcd6197085"))
AxisLine3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // interface IAxis3D
    // [ default ] interface IAxisLine3D

struct __declspec(uuid("d4ed8463-0728-42bd-9413-83144e174241"))
FindObjectParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IFindObjectParameters

struct __declspec(uuid("e0c4d376-8503-4fc1-8442-794ec7f26364"))
ksFindObjectParametersNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL FilterObject (
        IDispatch * Object );
};

struct __declspec(uuid("7cdb34a1-2b31-4ffd-baf7-c06b588fe0cb"))
Manipulators;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IManipulators

struct __declspec(uuid("46597352-925c-4d1b-89e3-6868d54fafe6"))
IPlacement3DManipulator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrimitiveVisible,put=PutPrimitiveVisible))
    VARIANT_BOOL PrimitiveVisible[];
    __declspec(property(get=GetPrimitiveDisabled,put=PutPrimitiveDisabled))
    VARIANT_BOOL PrimitiveDisabled[];
    __declspec(property(get=GetPrimitiveSelected,put=PutPrimitiveSelected))
    enum ksManipulatorPrimitiveEnum PrimitiveSelected;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetRotateStep,put=PutRotateStep))
    double RotateStep;
    __declspec(property(get=GetShiftStep,put=PutShiftStep))
    double ShiftStep;
    __declspec(property(get=GetEditValue,put=PutEditValue))
    double EditValue;
    __declspec(property(get=GetIsEditCreated))
    VARIANT_BOOL IsEditCreated;

    //
    // Wrapper methods for error-handling
    //

    void PutPrimitiveVisible (
        enum ksManipulatorPrimitiveEnum Primitive,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPrimitiveVisible (
        enum ksManipulatorPrimitiveEnum Primitive );
    void PutPrimitiveDisabled (
        enum ksManipulatorPrimitiveEnum Primitive,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPrimitiveDisabled (
        enum ksManipulatorPrimitiveEnum Primitive );
    void PutPrimitiveSelected (
        enum ksManipulatorPrimitiveEnum PVal );
    enum ksManipulatorPrimitiveEnum GetPrimitiveSelected ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutMode (
        long PVal );
    long GetMode ( );
    VARIANT_BOOL SetRotateRange (
        double Min,
        double Max );
    VARIANT_BOOL SetShiftRange (
        double Min,
        double Max );
    void PutRotateStep (
        double PVal );
    double GetRotateStep ( );
    void PutShiftStep (
        double PVal );
    double GetShiftStep ( );
    void PutEditValue (
        double PVal );
    double GetEditValue ( );
    VARIANT_BOOL GetIsEditCreated ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PrimitiveVisible (
        /*[in]*/ enum ksManipulatorPrimitiveEnum Primitive,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PrimitiveVisible (
        /*[in]*/ enum ksManipulatorPrimitiveEnum Primitive,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PrimitiveDisabled (
        /*[in]*/ enum ksManipulatorPrimitiveEnum Primitive,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PrimitiveDisabled (
        /*[in]*/ enum ksManipulatorPrimitiveEnum Primitive,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PrimitiveSelected (
        /*[in]*/ enum ksManipulatorPrimitiveEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PrimitiveSelected (
        /*[out,retval]*/ enum ksManipulatorPrimitiveEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetRotateRange (
        /*[in]*/ double Min,
        double Max,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetShiftRange (
        /*[in]*/ double Min,
        double Max,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_RotateStep (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_RotateStep (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShiftStep (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShiftStep (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_EditValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_EditValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_IsEditCreated (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("575c0551-83d0-475c-b6a9-49e788a8eb41"))
Placement3DManipulator;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IBaseManipulator
    // [ default ] interface IPlacement3DManipulator

struct __declspec(uuid("f942d621-874a-4a51-a651-a435ce0c6304"))
EditDoubleManipulator;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IBaseManipulator
    // [ default ] interface IEditDoubleManipulator

struct __declspec(uuid("b05df16e-5d90-4931-9197-815a2d1e365d"))
MouseEnterLeaveParameters7;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IMouseEnterLeaveParameters7

struct __declspec(uuid("f2c7d9b1-c665-4c44-aea8-bd2c6938e5a6"))
RestoredSurface;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IRestoredSurface

struct __declspec(uuid("f1603067-e7c1-43c2-9f8f-b83238d66454"))
RestoredSurfaces;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IRestoredSurfaces

struct __declspec(uuid("937a14c5-7fb0-4675-80d5-ae99a73d5254"))
Styles;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // [ default ] interface IStyles

struct __declspec(uuid("b357540f-da46-471c-90f9-2018cb2dc70e"))
CurveStyle;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IStyle
    // [ default ] interface ICurveStyle

struct __declspec(uuid("f280e407-a09f-4a98-93a4-451260a3e4c0"))
HatchStyle;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IStyle
    // [ default ] interface IHatchStyle

struct __declspec(uuid("742aa7cc-8019-4854-a8ff-9ee1ffbd0460"))
IApplicationLicenseManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKompasVariant))
    long KompasVariant;
    __declspec(property(get=GetKompasModuleActive,put=PutKompasModuleActive))
    VARIANT_BOOL KompasModuleActive[];
    __declspec(property(get=GetLibraryActive,put=PutLibraryActive))
    VARIANT_BOOL LibraryActive[];
    __declspec(property(get=GetLibraryStatus))
    enum ksProtectProductStatusEnum LibraryStatus[];
    __declspec(property(get=GetLibraryTrialStatus))
    VARIANT_BOOL LibraryTrialStatus[];
    __declspec(property(get=GetLibraryLocalStatus))
    VARIANT_BOOL LibraryLocalStatus[];
    __declspec(property(get=GetLibraryProductName))
    _bstr_t LibraryProductName[];
    __declspec(property(get=GetLibraryProductKeyInfo))
    _bstr_t LibraryProductKeyInfo[];

    //
    // Wrapper methods for error-handling
    //

    long GetKompasVariant ( );
    void PutKompasModuleActive (
        enum ksKompasModuleEnum Module,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetKompasModuleActive (
        enum ksKompasModuleEnum Module );
    VARIANT_BOOL EnableKompasInvisible (
        _bstr_t Key,
        _bstr_t Signature );
    VARIANT_BOOL GetLibraryActive (
        long ProductNumber );
    void PutLibraryActive (
        long ProductNumber,
        VARIANT_BOOL PVal );
    enum ksProtectProductStatusEnum GetLibraryStatus (
        long ProductNumber );
    VARIANT_BOOL GetLibraryTrialStatus (
        long ProductNumber );
    VARIANT_BOOL GetLibraryLocalStatus (
        long ProductNumber );
    _bstr_t GetLibraryProductName (
        long ProductNumber );
    _bstr_t GetLibraryProductKeyInfo (
        long ProductNumber );
    long RegisterLibraryNumber (
        long ProductNumber );
    VARIANT_BOOL UnRegisterLibraryNumber (
        long ProductNumbUnicueId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_KompasVariant (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_KompasModuleActive (
        /*[in]*/ enum ksKompasModuleEnum Module,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_KompasModuleActive (
        /*[in]*/ enum ksKompasModuleEnum Module,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_EnableKompasInvisible (
        /*[in]*/ BSTR Key,
        /*[in]*/ BSTR Signature,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryActive (
        /*[in]*/ long ProductNumber,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_LibraryActive (
        /*[in]*/ long ProductNumber,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryStatus (
        /*[in]*/ long ProductNumber,
        /*[out,retval]*/ enum ksProtectProductStatusEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryTrialStatus (
        /*[in]*/ long ProductNumber,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_LibraryLocalStatus (
        /*[in]*/ long ProductNumber,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_LibraryProductName (
        /*[in]*/ long ProductNumber,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall get_LibraryProductKeyInfo (
        /*[in]*/ long ProductNumber,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_RegisterLibraryNumber (
        /*[in]*/ long ProductNumber,
        /*[out,retval]*/ long * ProductNumbUnicueId ) = 0;
      virtual HRESULT __stdcall raw_UnRegisterLibraryNumber (
        /*[in]*/ long ProductNumbUnicueId,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("be4ba098-99b4-4c27-912b-3ad83a04e543"))
IPLMObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPLMStatus,put=PutPLMStatus))
    enum ksPLMStatusEnum PLMStatus;
    __declspec(property(get=GetPLMChange,put=PutPLMChange))
    enum ksPLMChangesEnum PLMChange;
    __declspec(property(get=GetPLMPropertyValue,put=PutPLMPropertyValue))
    _variant_t PLMPropertyValue[];

    //
    // Wrapper methods for error-handling
    //

    void PutPLMStatus (
        enum ksPLMStatusEnum PVal );
    enum ksPLMStatusEnum GetPLMStatus ( );
    void PutPLMChange (
        enum ksPLMChangesEnum PVal );
    enum ksPLMChangesEnum GetPLMChange ( );
    void PutPLMPropertyValue (
        enum ksPLMPropertyEnum Property,
        const _variant_t & PVal );
    _variant_t GetPLMPropertyValue (
        enum ksPLMPropertyEnum Property );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PLMStatus (
        /*[in]*/ enum ksPLMStatusEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PLMStatus (
        /*[out,retval]*/ enum ksPLMStatusEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_PLMChange (
        /*[in]*/ enum ksPLMChangesEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PLMChange (
        /*[out,retval]*/ enum ksPLMChangesEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_PLMPropertyValue (
        /*[in]*/ enum ksPLMPropertyEnum Property,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_PLMPropertyValue (
        /*[in]*/ enum ksPLMPropertyEnum Property,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
};

struct __declspec(uuid("95615543-48e9-4738-9b01-d8abc2c9001b"))
IPLMObjectsManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPLMStatus,put=PutPLMStatus))
    enum ksPLMStatusEnum PLMStatus[];
    __declspec(property(get=GetPLMChange,put=PutPLMChange))
    enum ksPLMChangesEnum PLMChange[];
    __declspec(property(get=GetPLMPropertyValue,put=PutPLMPropertyValue))
    _variant_t PLMPropertyValue[][];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetPLMChangesAttrAvailability (
        VARIANT_BOOL Available,
        VARIANT_BOOL Enabled );
    VARIANT_BOOL SetPLMStatusAttrAvailability (
        VARIANT_BOOL Available,
        VARIANT_BOOL Enabled );
    void PutPLMStatus (
        _bstr_t FileName,
        enum ksPLMStatusEnum PVal );
    enum ksPLMStatusEnum GetPLMStatus (
        _bstr_t FileName );
    void PutPLMChange (
        _bstr_t FileName,
        enum ksPLMChangesEnum PVal );
    enum ksPLMChangesEnum GetPLMChange (
        _bstr_t FileName );
    VARIANT_BOOL SetPLMPropertyAvailability (
        enum ksPLMPropertyEnum Property,
        VARIANT_BOOL Available,
        VARIANT_BOOL Enabled,
        const _variant_t & ValueList );
    void PutPLMPropertyValue (
        enum ksPLMPropertyEnum Property,
        _bstr_t FileName,
        const _variant_t & PVal );
    _variant_t GetPLMPropertyValue (
        enum ksPLMPropertyEnum Property,
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPLMChangesAttrAvailability (
        /*[in]*/ VARIANT_BOOL Available,
        /*[in]*/ VARIANT_BOOL Enabled,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPLMStatusAttrAvailability (
        /*[in]*/ VARIANT_BOOL Available,
        /*[in]*/ VARIANT_BOOL Enabled,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_PLMStatus (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum ksPLMStatusEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PLMStatus (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ enum ksPLMStatusEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_PLMChange (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum ksPLMChangesEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PLMChange (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ enum ksPLMChangesEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetPLMPropertyAvailability (
        /*[in]*/ enum ksPLMPropertyEnum Property,
        /*[in]*/ VARIANT_BOOL Available,
        /*[in]*/ VARIANT_BOOL Enabled,
        /*[in]*/ VARIANT ValueList,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_PLMPropertyValue (
        /*[in]*/ enum ksPLMPropertyEnum Property,
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_PLMPropertyValue (
        /*[in]*/ enum ksPLMPropertyEnum Property,
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
};

struct __declspec(uuid("4fb26621-6a86-43ff-bb61-af1b04afd22b"))
IMultiThicknessGroupsManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiThick,put=PutMultiThick))
    VARIANT_BOOL MultiThick;
    __declspec(property(get=GetMultiThicknessGroupsCount))
    long MultiThicknessGroupsCount[];
    __declspec(property(get=GetMultiThicknessGroupsObjects,put=PutMultiThicknessGroupsObjects))
    _variant_t MultiThicknessGroupsObjects[][];
    __declspec(property(get=GetMultiThicknessGroupsThickness,put=PutMultiThicknessGroupsThickness))
    double MultiThicknessGroupsThickness[][];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMultiThick ( );
    void PutMultiThick (
        VARIANT_BOOL PVal );
    VARIANT_BOOL AddMultiThicknessGroup (
        enum ksMultiThicknessGroupTypeEnum Type,
        const _variant_t & Objects,
        double Thickness );
    long GetMultiThicknessGroupsCount (
        enum ksMultiThicknessGroupTypeEnum Type );
    _variant_t GetMultiThicknessGroupsObjects (
        enum ksMultiThicknessGroupTypeEnum Type,
        long Index );
    void PutMultiThicknessGroupsObjects (
        enum ksMultiThicknessGroupTypeEnum Type,
        long Index,
        const _variant_t & Result );
    double GetMultiThicknessGroupsThickness (
        enum ksMultiThicknessGroupTypeEnum Type,
        long Index );
    void PutMultiThicknessGroupsThickness (
        enum ksMultiThicknessGroupTypeEnum Type,
        long Index,
        double Result );
    VARIANT_BOOL DeleteMultiThicknessGroup (
        enum ksMultiThicknessGroupTypeEnum Type,
        long Index );
    VARIANT_BOOL DestroyMultiThicknessGroup (
        enum ksMultiThicknessGroupTypeEnum Type,
        long Index );
    VARIANT_BOOL ExcludeMultiThicknessGroupObjects (
        const _variant_t & Objects );
    VARIANT_BOOL ClearMultiThicknessGroups ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiThick (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MultiThick (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_AddMultiThicknessGroup (
        /*[in]*/ enum ksMultiThicknessGroupTypeEnum Type,
        /*[in]*/ VARIANT Objects,
        /*[in]*/ double Thickness,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_MultiThicknessGroupsCount (
        /*[in]*/ enum ksMultiThicknessGroupTypeEnum Type,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_MultiThicknessGroupsObjects (
        /*[in]*/ enum ksMultiThicknessGroupTypeEnum Type,
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_MultiThicknessGroupsObjects (
        /*[in]*/ enum ksMultiThicknessGroupTypeEnum Type,
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_MultiThicknessGroupsThickness (
        /*[in]*/ enum ksMultiThicknessGroupTypeEnum Type,
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_MultiThicknessGroupsThickness (
        /*[in]*/ enum ksMultiThicknessGroupTypeEnum Type,
        /*[in]*/ long Index,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteMultiThicknessGroup (
        /*[in]*/ enum ksMultiThicknessGroupTypeEnum Type,
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DestroyMultiThicknessGroup (
        /*[in]*/ enum ksMultiThicknessGroupTypeEnum Type,
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ExcludeMultiThicknessGroupObjects (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearMultiThicknessGroups (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("f7458066-14b5-4945-accc-1199f98aafda"))
ConditionIntersect;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IDrawingObject
    // [ default ] interface IConditionIntersect

struct __declspec(uuid("0031bfff-6a43-44b4-8e0b-0da3984cb9ed"))
ConditionIntersects;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IDrawingObjects
    // [ default ] interface IConditionIntersects

struct __declspec(uuid("87749a4b-353e-4a5a-862a-f025b49609b5"))
TextDocumentSectionsManager;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITextDocumentSectionsManager

struct __declspec(uuid("40a3f4a8-e1fe-4a31-8922-b47c8097f14f"))
TextDocumentSection;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITextDocumentSection

struct __declspec(uuid("b0aa22ba-3f8b-4dc7-97ff-688ae467179d"))
TexturesParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ITexturesParam

struct __declspec(uuid("50a8b5e3-be42-49f4-b0a3-c41ca11e2b89"))
WireFrame3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IWireFrame3D

struct __declspec(uuid("86f9862f-f772-45a9-80f5-950aea60b475"))
WireFrames3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IWireFrames3D

struct __declspec(uuid("5081d446-4a8e-47fd-a658-c601a63ec82b"))
DismantleStep;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDismantleStep

struct __declspec(uuid("26911eb9-82ba-4d2a-86ae-79c852562b16"))
SaveAsDetailParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISaveAsDetailParam

struct __declspec(uuid("480a9539-f347-4b46-bdfb-7323aea5bb37"))
IContextPanel : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Fill (
        _bstr_t ContextPanelID );
    VARIANT_BOOL FillComboBoxImage (
        _bstr_t ComboBoxID,
        _bstr_t CommandsGroupID,
        const _variant_t & FilterCommands,
        long CurrentCommand );
    VARIANT_BOOL FillComboBoxStyle (
        _bstr_t ComboBoxID,
        enum ControlTypeEnum StyleType,
        const _variant_t & Styles,
        long CurrentStyleId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Fill (
        /*[in]*/ BSTR ContextPanelID,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_FillComboBoxImage (
        /*[in]*/ BSTR ComboBoxID,
        /*[in]*/ BSTR CommandsGroupID,
        /*[in]*/ VARIANT FilterCommands,
        /*[in]*/ long CurrentCommand,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_FillComboBoxStyle (
        /*[in]*/ BSTR ComboBoxID,
        /*[in]*/ enum ControlTypeEnum StyleType,
        /*[in]*/ VARIANT Styles,
        /*[in]*/ long CurrentStyleId,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("7f197d3f-b08e-4072-8b85-483c02a9b644"))
SpecificationObjectCreateParam;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface ISpecificationObjectCreateParam

struct __declspec(uuid("92b07ad7-89a8-4d65-987a-0e31d82bc075"))
IDimension3D : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetTextPosition (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetTextPosition (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetDimensionPoint (
        enum ksDimensionPointEnum DimensionPoint,
        long PointIndex,
        double * X,
        double * Y,
        double * Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetTextPosition (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetTextPosition (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDimensionPoint (
        /*[in]*/ enum ksDimensionPointEnum DimensionPoint,
        /*[in]*/ long PointIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("6bd3e1ad-7bc1-4ba3-9df6-39015e7027eb"))
FindObject3DParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IFindObject3DParameters
    // [ default, source ] dispinterface ksFindObject3DParametersNotify

struct __declspec(uuid("fdeef43a-f78f-4cde-bd0c-b2c5e47fbae9"))
NumericGroup;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface INumericGroup

struct __declspec(uuid("7b0de800-4b2b-4272-b579-4a29517de0c4"))
ArcDimension3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IArcDimension3D

struct __declspec(uuid("5eb98807-951d-48cc-815c-07a4b909b901"))
ArcDimensions3D;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IArcDimensions3D

struct __declspec(uuid("854f862d-96da-4039-8e5b-d3a2110a6037"))
SheetMetalPunch;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISheetMetalPunch

struct __declspec(uuid("0634aa3b-d8a3-450d-81f8-4801c707cd8e"))
SheetMetalPunchs;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISheetMetalPunchs

struct __declspec(uuid("4051b163-9495-47e8-9bad-30d771cd4f81"))
FaceMovers;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IFaceMovers

struct __declspec(uuid("13816df7-cf10-4a87-a76f-cee143bf5570"))
FaceMover;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IFaceMover

struct __declspec(uuid("c83d78f6-b8f8-412b-ac40-3a95ea7abd2c"))
DocumentSettings1;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IDocumentSettings1

struct __declspec(uuid("56aac385-274b-4823-b840-ddd7fd7b7d58"))
_FormatLabelRules;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IFormatLabelRules

struct __declspec(uuid("13fb65b5-8ecd-49c8-b93d-9479b8b5f657"))
SplitSolid;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface ISplitSolid

struct __declspec(uuid("b629e0de-2092-46c7-8d7e-98c7e6cac89c"))
SplitSolids;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface ISplitSolids

struct __declspec(uuid("d025b2c1-1b75-4266-9f73-8bcfa17ca552"))
IDimension2D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSorted,put=PutAutoSorted))
    VARIANT_BOOL AutoSorted;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetTextPosition (
        double * X,
        double * Y );
    VARIANT_BOOL SetTextPosition (
        double X,
        double Y );
    VARIANT_BOOL GetAutoSorted ( );
    void PutAutoSorted (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetDimensionPoint (
        enum ksDimensionPointEnum DimensionPoint,
        long PointIndex,
        double * X,
        double * Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetTextPosition (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetTextPosition (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_AutoSorted (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSorted (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall raw_GetDimensionPoint (
        /*[in]*/ enum ksDimensionPointEnum DimensionPoint,
        /*[in]*/ long PointIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("b6c0160a-54b2-404e-9667-c7bd278972ed"))
IDesignation3D : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDesignationPoint (
        enum ksDesignationPointEnum DimensionPoint,
        long PointIndex,
        double * X,
        double * Y,
        double * Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDesignationPoint (
        /*[in]*/ enum ksDesignationPointEnum DimensionPoint,
        /*[in]*/ long PointIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("2843869b-82a0-4cac-91df-abf553ea8a89"))
IDesignation2D : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDesignationPoint (
        enum ksDesignationPointEnum DimensionPoint,
        long PointIndex,
        double * X,
        double * Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDesignationPoint (
        /*[in]*/ enum ksDesignationPointEnum DimensionPoint,
        /*[in]*/ long PointIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("78afbd9d-1a2d-434f-86b9-86a88bd3b0a1"))
RasterConvertParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IRasterConvertParameters

struct __declspec(uuid("860b59d0-0921-4e65-a377-21e7ffb090fa"))
AdditionConvertParameters;
    // interface IDispatch
    // interface IKompasAPIObject
    // [ default ] interface IAdditionConvertParameters

struct __declspec(uuid("409ce413-1ffa-4e20-b79a-62bfd87efad4"))
ISystemTemplatesSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTemplatePath,put=PutTemplatePath))
    _bstr_t TemplatePath[][];
    __declspec(property(get=GetAddGroupSpecificationTemplate,put=PutAddGroupSpecificationTemplate))
    VARIANT_BOOL AddGroupSpecificationTemplate;
    __declspec(property(get=GetGroupSpecificationEmbodimentCount,put=PutGroupSpecificationEmbodimentCount))
    long GroupSpecificationEmbodimentCount;
    __declspec(property(get=GetSpecificationTemplatePath,put=PutSpecificationTemplatePath))
    _bstr_t SpecificationTemplatePath[];

    //
    // Wrapper methods for error-handling
    //

    void PutTemplatePath (
        enum DocumentTypeEnum DocumentType,
        _bstr_t DocumentTypeId,
        _bstr_t Result );
    _bstr_t GetTemplatePath (
        enum DocumentTypeEnum DocumentType,
        _bstr_t DocumentTypeId );
    VARIANT_BOOL GetAddGroupSpecificationTemplate ( );
    void PutAddGroupSpecificationTemplate (
        VARIANT_BOOL PVal );
    long GetGroupSpecificationEmbodimentCount ( );
    void PutGroupSpecificationEmbodimentCount (
        long PVal );
    void PutSpecificationTemplatePath (
        enum ksSpecificationVariantEnum SpcType,
        _bstr_t Result );
    _bstr_t GetSpecificationTemplatePath (
        enum ksSpecificationVariantEnum SpcType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_TemplatePath (
        /*[in]*/ enum DocumentTypeEnum DocumentType,
        /*[in]*/ BSTR DocumentTypeId,
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_TemplatePath (
        /*[in]*/ enum DocumentTypeEnum DocumentType,
        /*[in]*/ BSTR DocumentTypeId,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall get_AddGroupSpecificationTemplate (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AddGroupSpecificationTemplate (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_GroupSpecificationEmbodimentCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_GroupSpecificationEmbodimentCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall put_SpecificationTemplatePath (
        /*[in]*/ enum ksSpecificationVariantEnum SpcType,
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_SpecificationTemplatePath (
        /*[in]*/ enum ksSpecificationVariantEnum SpcType,
        /*[out,retval]*/ BSTR * Result ) = 0;
};

struct __declspec(uuid("7ee6c36f-c8fd-4902-8e08-84f8980f329d"))
ModelText;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IModelText

struct __declspec(uuid("f2308f47-3778-400a-b39e-b8e0e0fcea3b"))
ModelTexts;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IModelTexts

struct __declspec(uuid("10f2efa2-bfa1-40da-82df-73fe5a225c12"))
ModelTable;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IModelObject
    // [ default ] interface IModelTable

struct __declspec(uuid("53e1a473-ac75-4571-a9ea-bde97ae5a95f"))
ModelTables;
    // interface IDispatch
    // interface IKompasAPIObject
    // interface IKompasCollection
    // interface IModelObjects
    // [ default ] interface IModelTables

struct __declspec(uuid("5c799a83-c0a4-4312-beb0-21cbd7ff4c13"))
IKompasAPIObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IKompasAPIObjectPtr Parent;
    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetType))
    enum KompasAPIObjectTypeEnum Type;
    __declspec(property(get=GetReference))
    long Reference;

    //
    // Wrapper methods for error-handling
    //

    IKompasAPIObjectPtr GetParent ( );
    IApplicationPtr GetApplication ( );
    enum KompasAPIObjectTypeEnum GetType ( );
    long GetReference ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * PVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum KompasAPIObjectTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("901f85de-fa5a-4314-bd75-066a79af20a8"))
IKompasCollection : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * PObject ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("4437faba-990f-45e2-b1a2-7754fb326b76"))
IDocumentFrame : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetRegime,put=PutRegime))
    enum FrameRegimeEnum Regime;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetRoundModeOn))
    VARIANT_BOOL RoundModeOn;
    __declspec(property(get=GetCurrentCursorStep))
    double CurrentCursorStep;

    //
    // Wrapper methods for error-handling
    //

    void PutRegime (
        enum FrameRegimeEnum PVal );
    enum FrameRegimeEnum GetRegime ( );
    void PutActive (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetActive ( );
    _bstr_t GetCaption ( );
    HRESULT Zoom (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    HRESULT ZoomPrevNextOrAll (
        enum ZoomTypeEnum Type );
    HRESULT ZoomScale (
        double X,
        double Y,
        double Scale );
    HRESULT GetZoomScale (
        double * X,
        double * Y,
        double * Scale );
    OLE_HANDLE GetHWND ( );
    HRESULT SetGabaritModifying ( );
    HRESULT RefreshWindow ( );
    VARIANT_BOOL ConvertCoordinates (
        enum ConvertCoordTypeEnum Type,
        long LX,
        long LY,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL ExecuteKompasCommand (
        long CommandID,
        VARIANT_BOOL PostMessage );
    VARIANT_BOOL IsKompasCommandEnable (
        long CommandID );
    long IsKompasCommandCheck (
        long CommandID );
    _variant_t GetFPSData ( );
    VARIANT_BOOL GetPickRay (
        long wx,
        long wy,
        double * X,
        double * Y,
        double * Z,
        double * zx,
        double * zy,
        double * zz );
    VARIANT_BOOL GetRoundModeOn ( );
    double GetCurrentCursorStep ( );
    VARIANT_BOOL GetWorkAreaRect (
        long * Left,
        long * Top,
        long * Right,
        long * Bottom );
    VARIANT_BOOL UnConvertCoordinates (
        enum ConvertCoordTypeEnum Type,
        double X,
        double Y,
        double Z,
        long * LX,
        long * LY );
    VARIANT_BOOL SetZoomScale (
        double X,
        double Y,
        double Scale,
        VARIANT_BOOL ViewParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Regime (
        /*[in]*/ enum FrameRegimeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Regime (
        /*[out,retval]*/ enum FrameRegimeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_Zoom (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2 ) = 0;
      virtual HRESULT __stdcall raw_ZoomPrevNextOrAll (
        /*[in]*/ enum ZoomTypeEnum Type ) = 0;
      virtual HRESULT __stdcall raw_ZoomScale (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Scale ) = 0;
      virtual HRESULT __stdcall raw_GetZoomScale (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Scale ) = 0;
      virtual HRESULT __stdcall raw_GetHWND (
        /*[out,retval]*/ OLE_HANDLE * HWnd ) = 0;
      virtual HRESULT __stdcall raw_SetGabaritModifying ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshWindow ( ) = 0;
      virtual HRESULT __stdcall raw_ConvertCoordinates (
        /*[in]*/ enum ConvertCoordTypeEnum Type,
        /*[in]*/ long LX,
        /*[in]*/ long LY,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ExecuteKompasCommand (
        /*[in]*/ long CommandID,
        /*[in]*/ VARIANT_BOOL PostMessage,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_IsKompasCommandEnable (
        /*[in]*/ long CommandID,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_IsKompasCommandCheck (
        /*[in]*/ long CommandID,
        /*[out,retval]*/ long * PRes ) = 0;
      virtual HRESULT __stdcall raw_GetFPSData (
        /*[out,retval]*/ VARIANT * PRes ) = 0;
      virtual HRESULT __stdcall raw_GetPickRay (
        /*[in]*/ long wx,
        /*[in]*/ long wy,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * zx,
        /*[out]*/ double * zy,
        /*[out]*/ double * zz,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_RoundModeOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentCursorStep (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetWorkAreaRect (
        /*[out]*/ long * Left,
        /*[out]*/ long * Top,
        /*[out]*/ long * Right,
        /*[out]*/ long * Bottom,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_UnConvertCoordinates (
        /*[in]*/ enum ConvertCoordTypeEnum Type,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out]*/ long * LX,
        /*[out]*/ long * LY,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetZoomScale (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Scale,
        /*[in]*/ VARIANT_BOOL ViewParam,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("1d18c466-c085-4d68-a465-a85d0c8e3a0e"))
IDocumentFrames : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDocumentFramePtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IDocumentFramePtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDocumentFrame * * Result ) = 0;
};

struct __declspec(uuid("b35ff50e-2991-4630-8ab8-dc3153e7971a"))
IDocumentSettings : IKompasAPIObject
{};

struct __declspec(uuid("a6ad008d-58d1-48b5-bd29-e6795289fe4b"))
ITextFont : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidthFactor,put=PutWidthFactor))
    double WidthFactor;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetTextLineStep,put=PutTextLineStep))
    double TextLineStep;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t PVal );
    double GetHeight ( );
    void PutHeight (
        double PVal );
    double GetWidthFactor ( );
    void PutWidthFactor (
        double PVal );
    long GetColor ( );
    void PutColor (
        long PVal );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUnderline ( );
    void PutUnderline (
        VARIANT_BOOL PVal );
    double GetTextLineStep ( );
    void PutTextLineStep (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_WidthFactor (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WidthFactor (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TextLineStep (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TextLineStep (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("2dd73b92-f8c8-49aa-aecd-b75713427fc1"))
ITabulator : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetAlign,put=PutAlign))
    enum ksAlignEnum Align;
    __declspec(property(get=GetFilling,put=PutFilling))
    enum ksTabulatorFillingEnum Filling;

    //
    // Wrapper methods for error-handling
    //

    long GetPosition ( );
    void PutPosition (
        long PVal );
    enum ksAlignEnum GetAlign ( );
    void PutAlign (
        enum ksAlignEnum PVal );
    enum ksTabulatorFillingEnum GetFilling ( );
    void PutFilling (
        enum ksTabulatorFillingEnum PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ enum ksAlignEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ enum ksAlignEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Filling (
        /*[out,retval]*/ enum ksTabulatorFillingEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Filling (
        /*[in]*/ enum ksTabulatorFillingEnum PVal ) = 0;
};

struct __declspec(uuid("bb66e097-95c7-49b1-b6fd-3506c7758d09"))
ITabulators : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ITabulatorPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ITabulatorPtr GetItem (
        const _variant_t & Index );
    ITabulatorPtr Add (
        long Position );
    VARIANT_BOOL Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ITabulator * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long Position,
        /*[out,retval]*/ struct ITabulator * * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("7ea65ca0-420d-4e1d-8c19-998495c4da2f"))
ITextStyle : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNumber,put=PutNumber))
    long Number;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetAlign,put=PutAlign))
    enum ksAlignEnum Align;
    __declspec(property(get=GetIndentedLine,put=PutIndentedLine))
    double IndentedLine;
    __declspec(property(get=GetStepBeforeParagraph,put=PutStepBeforeParagraph))
    double StepBeforeParagraph;
    __declspec(property(get=GetStepAfterParagraph,put=PutStepAfterParagraph))
    double StepAfterParagraph;
    __declspec(property(get=GetLeftEdge,put=PutLeftEdge))
    double LeftEdge;
    __declspec(property(get=GetRightEdge,put=PutRightEdge))
    double RightEdge;
    __declspec(property(get=GetExtended,put=PutExtended))
    VARIANT_BOOL Extended;
    __declspec(property(get=GetLinesCount,put=PutLinesCount))
    long LinesCount;
    __declspec(property(get=GetEnableLine1,put=PutEnableLine1))
    VARIANT_BOOL EnableLine1;
    __declspec(property(get=GetHeight1,put=PutHeight1))
    double Height1;
    __declspec(property(get=GetWidthFactor1,put=PutWidthFactor1))
    double WidthFactor1;
    __declspec(property(get=GetStep1,put=PutStep1))
    double Step1;
    __declspec(property(get=GetEnableLine2,put=PutEnableLine2))
    VARIANT_BOOL EnableLine2;
    __declspec(property(get=GetHeight2,put=PutHeight2))
    double Height2;
    __declspec(property(get=GetWidthFactor2,put=PutWidthFactor2))
    double WidthFactor2;
    __declspec(property(get=GetStep2,put=PutStep2))
    double Step2;
    __declspec(property(get=GetEnableLine3,put=PutEnableLine3))
    VARIANT_BOOL EnableLine3;
    __declspec(property(get=GetHeight3,put=PutHeight3))
    double Height3;
    __declspec(property(get=GetWidthFactor3,put=PutWidthFactor3))
    double WidthFactor3;
    __declspec(property(get=GetStep3,put=PutStep3))
    double Step3;
    __declspec(property(get=GetFont))
    ITextFontPtr Font;
    __declspec(property(get=GetTabulators))
    ITabulatorsPtr Tabulators;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t PVal );
    long GetNumber ( );
    void PutNumber (
        long PVal );
    double GetStep ( );
    void PutStep (
        double PVal );
    enum ksAlignEnum GetAlign ( );
    void PutAlign (
        enum ksAlignEnum PVal );
    double GetIndentedLine ( );
    void PutIndentedLine (
        double PVal );
    double GetStepBeforeParagraph ( );
    void PutStepBeforeParagraph (
        double PVal );
    double GetStepAfterParagraph ( );
    void PutStepAfterParagraph (
        double PVal );
    double GetLeftEdge ( );
    void PutLeftEdge (
        double PVal );
    double GetRightEdge ( );
    void PutRightEdge (
        double PVal );
    VARIANT_BOOL GetExtended ( );
    void PutExtended (
        VARIANT_BOOL PVal );
    long GetLinesCount ( );
    void PutLinesCount (
        long PVal );
    VARIANT_BOOL GetEnableLine1 ( );
    void PutEnableLine1 (
        VARIANT_BOOL PVal );
    double GetHeight1 ( );
    void PutHeight1 (
        double PVal );
    double GetWidthFactor1 ( );
    void PutWidthFactor1 (
        double PVal );
    double GetStep1 ( );
    void PutStep1 (
        double PVal );
    VARIANT_BOOL GetEnableLine2 ( );
    void PutEnableLine2 (
        VARIANT_BOOL PVal );
    double GetHeight2 ( );
    void PutHeight2 (
        double PVal );
    double GetWidthFactor2 ( );
    void PutWidthFactor2 (
        double PVal );
    double GetStep2 ( );
    void PutStep2 (
        double PVal );
    VARIANT_BOOL GetEnableLine3 ( );
    void PutEnableLine3 (
        VARIANT_BOOL PVal );
    double GetHeight3 ( );
    void PutHeight3 (
        double PVal );
    double GetWidthFactor3 ( );
    void PutWidthFactor3 (
        double PVal );
    double GetStep3 ( );
    void PutStep3 (
        double PVal );
    ITextFontPtr GetFont ( );
    ITabulatorsPtr GetTabulators ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Number (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ enum ksAlignEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ enum ksAlignEnum PVal ) = 0;
      virtual HRESULT __stdcall get_IndentedLine (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_IndentedLine (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StepBeforeParagraph (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepBeforeParagraph (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StepAfterParagraph (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepAfterParagraph (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_LeftEdge (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftEdge (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_RightEdge (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RightEdge (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Extended (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Extended (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LinesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_LinesCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_EnableLine1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableLine1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Height1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_WidthFactor1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WidthFactor1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_EnableLine2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableLine2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Height2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_WidthFactor2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WidthFactor2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_EnableLine3 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableLine3 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Height3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_WidthFactor3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WidthFactor3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITextFont * * PVal ) = 0;
      virtual HRESULT __stdcall get_Tabulators (
        /*[out,retval]*/ struct ITabulators * * PVal ) = 0;
};

struct __declspec(uuid("7f0e5f63-815c-46e5-b99e-c24244566c00"))
ISpecificationSubsection : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNumber))
    short Number;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    short GetNumber ( );
    VARIANT_BOOL Change (
        _bstr_t Name,
        short Number );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ short * PVal ) = 0;
      virtual HRESULT __stdcall raw_Change (
        /*[in]*/ BSTR Name,
        /*[in]*/ short Number,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("56532cb4-bd3f-442c-afa4-0e6beb677e61"))
ISpecificationSubsections : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationSubsectionPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ISpecificationSubsectionPtr GetItem (
        const _variant_t & Index );
    ISpecificationSubsectionPtr Add (
        _bstr_t Name,
        short Number );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationSubsection * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ short Number,
        /*[out,retval]*/ struct ISpecificationSubsection * * Result ) = 0;
};

struct __declspec(uuid("e04b8464-c8d6-4bac-99b5-ae79ebbdb205"))
IAdditionalBlockSectionTuning : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;

    //
    // Wrapper methods for error-handling
    //

    long GetNumber ( );
    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("43efa203-f956-43d6-b603-87807ddefd0a"))
IAdditionalBlockSectionTunings : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAdditionalBlockSectionTuningPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IAdditionalBlockSectionTuningPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAdditionalBlockSectionTuning * * Result ) = 0;
};

struct __declspec(uuid("9cd5b016-9ce9-4e0a-8902-196d11360536"))
IAdditionalBlockTuning : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetDocumentName,put=PutDocumentName))
    _bstr_t DocumentName;
    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetFirstOnSheet,put=PutFirstOnSheet))
    VARIANT_BOOL FirstOnSheet;
    __declspec(property(get=GetSections))
    IAdditionalBlockSectionTuningsPtr Sections;
    __declspec(property(get=GetIndependentPosition,put=PutIndependentPosition))
    VARIANT_BOOL IndependentPosition;
    __declspec(property(get=GetMarkOn,put=PutMarkOn))
    VARIANT_BOOL MarkOn;
    __declspec(property(get=GetMark,put=PutMark))
    _bstr_t Mark;

    //
    // Wrapper methods for error-handling
    //

    long GetNumber ( );
    _bstr_t GetDocumentName ( );
    void PutDocumentName (
        _bstr_t PVal );
    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFirstOnSheet ( );
    void PutFirstOnSheet (
        VARIANT_BOOL PVal );
    IAdditionalBlockSectionTuningsPtr GetSections ( );
    VARIANT_BOOL GetIndependentPosition ( );
    void PutIndependentPosition (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMarkOn ( );
    void PutMarkOn (
        VARIANT_BOOL PVal );
    _bstr_t GetMark ( );
    void PutMark (
        _bstr_t PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_DocumentName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_DocumentName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FirstOnSheet (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FirstOnSheet (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Sections (
        /*[out,retval]*/ struct IAdditionalBlockSectionTunings * * PVal ) = 0;
      virtual HRESULT __stdcall get_IndependentPosition (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IndependentPosition (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MarkOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MarkOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Mark (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Mark (
        /*[in]*/ BSTR PVal ) = 0;
};

struct __declspec(uuid("8910cc92-ac76-4837-ab7a-5fd3c7b74728"))
IAdditionalBlockTunings : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAdditionalBlockTuningPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IAdditionalBlockTuningPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAdditionalBlockTuning * * Result ) = 0;
};

struct __declspec(uuid("e68aa413-cc35-450d-bf35-0f294f59b08c"))
ISpecificationTuningSection : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetSubsectionOn,put=PutSubsectionOn))
    VARIANT_BOOL SubsectionOn;
    __declspec(property(get=GetAttachGeometry,put=PutAttachGeometry))
    VARIANT_BOOL AttachGeometry;
    __declspec(property(get=GetPutPosition,put=PutPutPosition))
    VARIANT_BOOL PutPosition;
    __declspec(property(get=GetSortObjects,put=PutSortObjects))
    VARIANT_BOOL SortObjects;
    __declspec(property(get=GetFirstOnSheet,put=PutFirstOnSheet))
    VARIANT_BOOL FirstOnSheet;
    __declspec(property(get=GetReserveStringCount,put=PutReserveStringCount))
    short ReserveStringCount;
    __declspec(property(get=GetSubsections))
    ISpecificationSubsectionsPtr Subsections;
    __declspec(property(get=GetUseAdditionalBlocks,put=PutUseAdditionalBlocks))
    VARIANT_BOOL UseAdditionalBlocks;
    __declspec(property(get=GetAdditionalBlocks))
    IAdditionalBlockTuningsPtr AdditionalBlocks;
    __declspec(property(get=GetShowDocumentCode,put=PutShowDocumentCode))
    VARIANT_BOOL ShowDocumentCode;
    __declspec(property(get=GetIndependentPosition,put=PutIndependentPosition))
    VARIANT_BOOL IndependentPosition;
    __declspec(property(get=GetMarkOn,put=PutMarkOn))
    VARIANT_BOOL MarkOn;
    __declspec(property(get=GetMark,put=PutMark))
    _bstr_t Mark;

    //
    // Wrapper methods for error-handling
    //

    long GetNumber ( );
    VARIANT_BOOL GetSubsectionOn ( );
    void PutSubsectionOn (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAttachGeometry ( );
    void PutAttachGeometry (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPutPosition ( );
    void PutPutPosition (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSortObjects ( );
    void PutSortObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFirstOnSheet ( );
    void PutFirstOnSheet (
        VARIANT_BOOL PVal );
    short GetReserveStringCount ( );
    void PutReserveStringCount (
        short PVal );
    ISpecificationSubsectionsPtr GetSubsections ( );
    VARIANT_BOOL GetUseAdditionalBlocks ( );
    void PutUseAdditionalBlocks (
        VARIANT_BOOL PVal );
    IAdditionalBlockTuningsPtr GetAdditionalBlocks ( );
    VARIANT_BOOL GetShowDocumentCode ( );
    void PutShowDocumentCode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIndependentPosition ( );
    void PutIndependentPosition (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMarkOn ( );
    void PutMarkOn (
        VARIANT_BOOL PVal );
    _bstr_t GetMark ( );
    void PutMark (
        _bstr_t PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_SubsectionOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SubsectionOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AttachGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AttachGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PutPosition (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PutPosition (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SortObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SortObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FirstOnSheet (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FirstOnSheet (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReserveStringCount (
        /*[out,retval]*/ short * PVal ) = 0;
      virtual HRESULT __stdcall put_ReserveStringCount (
        /*[in]*/ short PVal ) = 0;
      virtual HRESULT __stdcall get_Subsections (
        /*[out,retval]*/ struct ISpecificationSubsections * * PVal ) = 0;
      virtual HRESULT __stdcall get_UseAdditionalBlocks (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UseAdditionalBlocks (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalBlocks (
        /*[out,retval]*/ struct IAdditionalBlockTunings * * PVal ) = 0;
      virtual HRESULT __stdcall get_ShowDocumentCode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowDocumentCode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IndependentPosition (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IndependentPosition (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MarkOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MarkOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Mark (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Mark (
        /*[in]*/ BSTR PVal ) = 0;
};

struct __declspec(uuid("01b1bf6f-b9e3-4e94-99a0-81394fb99b16"))
ISpecificationTuningSections : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationTuningSectionPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ISpecificationTuningSectionPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationTuningSection * * Result ) = 0;
};

struct __declspec(uuid("bb719d42-e44c-445b-969a-0e2f63e97fc8"))
ISpecificationTuning : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLinkType,put=PutLinkType))
    enum ksSpecificationLinkTypeEnum LinkType;
    __declspec(property(get=GetCalculateZone,put=PutCalculateZone))
    VARIANT_BOOL CalculateZone;
    __declspec(property(get=GetCalculatePosition,put=PutCalculatePosition))
    VARIANT_BOOL CalculatePosition;
    __declspec(property(get=GetShowSectionName,put=PutShowSectionName))
    VARIANT_BOOL ShowSectionName;
    __declspec(property(get=GetDeleteGeometry,put=PutDeleteGeometry))
    VARIANT_BOOL DeleteGeometry;
    __declspec(property(get=GetDisableEmptyString,put=PutDisableEmptyString))
    VARIANT_BOOL DisableEmptyString;
    __declspec(property(get=GetDisableEmptyBlockString,put=PutDisableEmptyBlockString))
    VARIANT_BOOL DisableEmptyBlockString;
    __declspec(property(get=GetInsertNull,put=PutInsertNull))
    VARIANT_BOOL InsertNull;
    __declspec(property(get=GetInsertDash,put=PutInsertDash))
    VARIANT_BOOL InsertDash;
    __declspec(property(get=GetShowInfoByObjects,put=PutShowInfoByObjects))
    VARIANT_BOOL ShowInfoByObjects;
    __declspec(property(get=GetSupportPerformance,put=PutSupportPerformance))
    VARIANT_BOOL SupportPerformance;
    __declspec(property(get=GetShowPerformanceFull,put=PutShowPerformanceFull))
    VARIANT_BOOL ShowPerformanceFull;
    __declspec(property(get=GetBlockOnNewPage,put=PutBlockOnNewPage))
    VARIANT_BOOL BlockOnNewPage;
    __declspec(property(get=GetPositionUp,put=PutPositionUp))
    VARIANT_BOOL PositionUp;
    __declspec(property(get=GetDrawBottomUp,put=PutDrawBottomUp))
    VARIANT_BOOL DrawBottomUp;
    __declspec(property(get=GetUserTextStyle,put=PutUserTextStyle))
    VARIANT_BOOL UserTextStyle;
    __declspec(property(get=GetPerformanceCount,put=PutPerformanceCount))
    long PerformanceCount;
    __declspec(property(get=GetBlockCount))
    long BlockCount;
    __declspec(property(get=GetInitialPosition,put=PutInitialPosition))
    long InitialPosition;
    __declspec(property(get=GetPredefinedTextFileName,put=PutPredefinedTextFileName))
    _bstr_t PredefinedTextFileName;
    __declspec(property(get=GetSectionTextStyleFirst))
    ITextStylePtr SectionTextStyleFirst;
    __declspec(property(get=GetSectionTextStyleNext))
    ITextStylePtr SectionTextStyleNext;
    __declspec(property(get=GetObjectTextStyle))
    ITextStylePtr ObjectTextStyle;
    __declspec(property(get=GetSections))
    ISpecificationTuningSectionsPtr Sections;
    __declspec(property(get=GetUseAdditionalBlocks,put=PutUseAdditionalBlocks))
    VARIANT_BOOL UseAdditionalBlocks;
    __declspec(property(get=GetAdditionalBlocks))
    IAdditionalBlockTuningsPtr AdditionalBlocks;
    __declspec(property(get=GetShowAdditionalBlockName,put=PutShowAdditionalBlockName))
    VARIANT_BOOL ShowAdditionalBlockName;
    __declspec(property(get=GetShowNestingBlockName,put=PutShowNestingBlockName))
    VARIANT_BOOL ShowNestingBlockName;
    __declspec(property(get=GetShowPerformanceBlockName,put=PutShowPerformanceBlockName))
    VARIANT_BOOL ShowPerformanceBlockName;
    __declspec(property(get=GetPerformanceBlockTextStyleFirst))
    ITextStylePtr PerformanceBlockTextStyleFirst;
    __declspec(property(get=GetPerformanceBlockTextStyleNext))
    ITextStylePtr PerformanceBlockTextStyleNext;
    __declspec(property(get=GetAdditionalBlockTextStyleFirst))
    ITextStylePtr AdditionalBlockTextStyleFirst;
    __declspec(property(get=GetAdditionalBlockTextStyleNext))
    ITextStylePtr AdditionalBlockTextStyleNext;
    __declspec(property(get=GetNestingBlockTextStyleFirst))
    ITextStylePtr NestingBlockTextStyleFirst;
    __declspec(property(get=GetNestingBlockTextStyleNext))
    ITextStylePtr NestingBlockTextStyleNext;
    __declspec(property(get=GetDisableNestingBlockEmptyStrings,put=PutDisableNestingBlockEmptyStrings))
    VARIANT_BOOL DisableNestingBlockEmptyStrings;
    __declspec(property(get=GetDisableAdditionalBlockEmptyStrings,put=PutDisableAdditionalBlockEmptyStrings))
    VARIANT_BOOL DisableAdditionalBlockEmptyStrings;
    __declspec(property(get=GetDeleteSpcObjectOnDeleteGeometry,put=PutDeleteSpcObjectOnDeleteGeometry))
    VARIANT_BOOL DeleteSpcObjectOnDeleteGeometry;
    __declspec(property(get=GetCopySpcObjectOnCopyGeometry,put=PutCopySpcObjectOnCopyGeometry))
    VARIANT_BOOL CopySpcObjectOnCopyGeometry;
    __declspec(property(get=GetShowEmbodimentWithoutVariables,put=PutShowEmbodimentWithoutVariables))
    VARIANT_BOOL ShowEmbodimentWithoutVariables;
    __declspec(property(get=GetPerformanceCountInBlock))
    long PerformanceCountInBlock;
    __declspec(property(get=GetShowListCountIsSameFormat,put=PutShowListCountIsSameFormat))
    VARIANT_BOOL ShowListCountIsSameFormat;

    //
    // Wrapper methods for error-handling
    //

    enum ksSpecificationLinkTypeEnum GetLinkType ( );
    void PutLinkType (
        enum ksSpecificationLinkTypeEnum PVal );
    VARIANT_BOOL GetCalculateZone ( );
    void PutCalculateZone (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCalculatePosition ( );
    void PutCalculatePosition (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowSectionName ( );
    void PutShowSectionName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDeleteGeometry ( );
    void PutDeleteGeometry (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDisableEmptyString ( );
    void PutDisableEmptyString (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDisableEmptyBlockString ( );
    void PutDisableEmptyBlockString (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInsertNull ( );
    void PutInsertNull (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInsertDash ( );
    void PutInsertDash (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowInfoByObjects ( );
    void PutShowInfoByObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSupportPerformance ( );
    void PutSupportPerformance (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowPerformanceFull ( );
    void PutShowPerformanceFull (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBlockOnNewPage ( );
    void PutBlockOnNewPage (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPositionUp ( );
    void PutPositionUp (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDrawBottomUp ( );
    void PutDrawBottomUp (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUserTextStyle ( );
    void PutUserTextStyle (
        VARIANT_BOOL PVal );
    long GetPerformanceCount ( );
    void PutPerformanceCount (
        long PVal );
    long GetBlockCount ( );
    long GetInitialPosition ( );
    void PutInitialPosition (
        long PVal );
    _bstr_t GetPredefinedTextFileName ( );
    void PutPredefinedTextFileName (
        _bstr_t PVal );
    ITextStylePtr GetSectionTextStyleFirst ( );
    ITextStylePtr GetSectionTextStyleNext ( );
    ITextStylePtr GetObjectTextStyle ( );
    ISpecificationTuningSectionsPtr GetSections ( );
    VARIANT_BOOL GetUseAdditionalBlocks ( );
    void PutUseAdditionalBlocks (
        VARIANT_BOOL PVal );
    IAdditionalBlockTuningsPtr GetAdditionalBlocks ( );
    VARIANT_BOOL GetShowAdditionalBlockName ( );
    void PutShowAdditionalBlockName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowNestingBlockName ( );
    void PutShowNestingBlockName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowPerformanceBlockName ( );
    void PutShowPerformanceBlockName (
        VARIANT_BOOL PVal );
    ITextStylePtr GetPerformanceBlockTextStyleFirst ( );
    ITextStylePtr GetPerformanceBlockTextStyleNext ( );
    ITextStylePtr GetAdditionalBlockTextStyleFirst ( );
    ITextStylePtr GetAdditionalBlockTextStyleNext ( );
    ITextStylePtr GetNestingBlockTextStyleFirst ( );
    ITextStylePtr GetNestingBlockTextStyleNext ( );
    VARIANT_BOOL GetDisableNestingBlockEmptyStrings ( );
    void PutDisableNestingBlockEmptyStrings (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDisableAdditionalBlockEmptyStrings ( );
    void PutDisableAdditionalBlockEmptyStrings (
        VARIANT_BOOL PVal );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL GetDeleteSpcObjectOnDeleteGeometry ( );
    void PutDeleteSpcObjectOnDeleteGeometry (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCopySpcObjectOnCopyGeometry ( );
    void PutCopySpcObjectOnCopyGeometry (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowEmbodimentWithoutVariables ( );
    void PutShowEmbodimentWithoutVariables (
        VARIANT_BOOL PVal );
    long GetPerformanceCountInBlock ( );
    VARIANT_BOOL GetShowListCountIsSameFormat ( );
    void PutShowListCountIsSameFormat (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinkType (
        /*[out,retval]*/ enum ksSpecificationLinkTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_LinkType (
        /*[in]*/ enum ksSpecificationLinkTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CalculateZone (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CalculateZone (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CalculatePosition (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CalculatePosition (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowSectionName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowSectionName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DeleteGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DeleteGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DisableEmptyString (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DisableEmptyString (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DisableEmptyBlockString (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DisableEmptyBlockString (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InsertNull (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_InsertNull (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InsertDash (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_InsertDash (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowInfoByObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowInfoByObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SupportPerformance (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SupportPerformance (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowPerformanceFull (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowPerformanceFull (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BlockOnNewPage (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BlockOnNewPage (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PositionUp (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PositionUp (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DrawBottomUp (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DrawBottomUp (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UserTextStyle (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UserTextStyle (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PerformanceCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PerformanceCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_BlockCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_InitialPosition (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_InitialPosition (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PredefinedTextFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_PredefinedTextFileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_SectionTextStyleFirst (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_SectionTextStyleNext (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectTextStyle (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_Sections (
        /*[out,retval]*/ struct ISpecificationTuningSections * * PVal ) = 0;
      virtual HRESULT __stdcall get_UseAdditionalBlocks (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UseAdditionalBlocks (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalBlocks (
        /*[out,retval]*/ struct IAdditionalBlockTunings * * PVal ) = 0;
      virtual HRESULT __stdcall get_ShowAdditionalBlockName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowAdditionalBlockName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowNestingBlockName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowNestingBlockName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowPerformanceBlockName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowPerformanceBlockName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PerformanceBlockTextStyleFirst (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_PerformanceBlockTextStyleNext (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalBlockTextStyleFirst (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalBlockTextStyleNext (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_NestingBlockTextStyleFirst (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_NestingBlockTextStyleNext (
        /*[out,retval]*/ struct ITextStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_DisableNestingBlockEmptyStrings (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DisableNestingBlockEmptyStrings (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DisableAdditionalBlockEmptyStrings (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DisableAdditionalBlockEmptyStrings (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_DeleteSpcObjectOnDeleteGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DeleteSpcObjectOnDeleteGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CopySpcObjectOnCopyGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CopySpcObjectOnCopyGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowEmbodimentWithoutVariables (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowEmbodimentWithoutVariables (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PerformanceCountInBlock (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_ShowListCountIsSameFormat (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowListCountIsSameFormat (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("b9cde694-4c33-4375-a6f6-ae94dc759510"))
ISheetFormat : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat,put=PutFormat))
    enum ksDocumentFormatEnum Format;
    __declspec(property(get=GetFormatMultiplicity,put=PutFormatMultiplicity))
    long FormatMultiplicity;
    __declspec(property(get=GetVerticalOrientation,put=PutVerticalOrientation))
    VARIANT_BOOL VerticalOrientation;
    __declspec(property(get=GetFormatWidth,put=PutFormatWidth))
    double FormatWidth;
    __declspec(property(get=GetFormatHeight,put=PutFormatHeight))
    double FormatHeight;

    //
    // Wrapper methods for error-handling
    //

    enum ksDocumentFormatEnum GetFormat ( );
    void PutFormat (
        enum ksDocumentFormatEnum PVal );
    long GetFormatMultiplicity ( );
    void PutFormatMultiplicity (
        long PVal );
    VARIANT_BOOL GetVerticalOrientation ( );
    void PutVerticalOrientation (
        VARIANT_BOOL PVal );
    double GetFormatWidth ( );
    void PutFormatWidth (
        double PVal );
    double GetFormatHeight ( );
    void PutFormatHeight (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum ksDocumentFormatEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ enum ksDocumentFormatEnum PVal ) = 0;
      virtual HRESULT __stdcall get_FormatMultiplicity (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_FormatMultiplicity (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_VerticalOrientation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_VerticalOrientation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FormatWidth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FormatWidth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_FormatHeight (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FormatHeight (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("16839caa-3afb-49a4-a19a-c61963967649"))
ISpecificationColumnStyle : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetColumnType))
    enum ksSpecificationColumnTypeEnum ColumnType;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetEdit))
    VARIANT_BOOL Edit;
    __declspec(property(get=GetCalculateSum))
    VARIANT_BOOL CalculateSum;
    __declspec(property(get=GetMultiplyToCount))
    VARIANT_BOOL MultiplyToCount;
    __declspec(property(get=GetUseForSectionTitle))
    VARIANT_BOOL UseForSectionTitle;
    __declspec(property(get=GetTextDown))
    VARIANT_BOOL TextDown;
    __declspec(property(get=GetStampLinkID))
    long StampLinkID;
    __declspec(property(get=GetValueType))
    enum ksValueTypeEnum ValueType;
    __declspec(property(get=GetAttributeLibraryName))
    _bstr_t AttributeLibraryName;
    __declspec(property(get=GetAttributeKey1))
    long AttributeKey1;
    __declspec(property(get=GetAttributeKey2))
    long AttributeKey2;
    __declspec(property(get=GetAttributeKey3))
    long AttributeKey3;
    __declspec(property(get=GetAttributeKey4))
    long AttributeKey4;
    __declspec(property(get=GetMinValue))
    double MinValue;
    __declspec(property(get=GetMaxValue))
    double MaxValue;
    __declspec(property(get=GetUseIn3D))
    VARIANT_BOOL UseIn3D;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum ksSpecificationColumnTypeEnum GetColumnType ( );
    long GetNumber ( );
    VARIANT_BOOL GetEdit ( );
    VARIANT_BOOL GetCalculateSum ( );
    VARIANT_BOOL GetMultiplyToCount ( );
    VARIANT_BOOL GetUseForSectionTitle ( );
    VARIANT_BOOL GetTextDown ( );
    long GetStampLinkID ( );
    enum ksValueTypeEnum GetValueType ( );
    _bstr_t GetAttributeLibraryName ( );
    long GetAttributeKey1 ( );
    long GetAttributeKey2 ( );
    long GetAttributeKey3 ( );
    long GetAttributeKey4 ( );
    double GetMinValue ( );
    double GetMaxValue ( );
    VARIANT_BOOL GetUseIn3D ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnType (
        /*[out,retval]*/ enum ksSpecificationColumnTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Edit (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_CalculateSum (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_MultiplyToCount (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_UseForSectionTitle (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_StampLinkID (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_ValueType (
        /*[out,retval]*/ enum ksValueTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeLibraryName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeKey1 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeKey2 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeKey3 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeKey4 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_UseIn3D (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("41529a95-51f0-44b0-9d55-5753bceb23bc"))
ISpecificationColumnStyles : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationColumnStylePtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ISpecificationColumnStylePtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationColumnStyle * * Result ) = 0;
};

struct __declspec(uuid("b2a43fa6-9bce-4468-9662-811a6255e220"))
IAdditionalBlockStyle : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNumber))
    long Number;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetNumber ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("90e2fbec-a56f-423c-b89f-479673edd895"))
IAdditionalBlockStyles : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAdditionalBlockStylePtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IAdditionalBlockStylePtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAdditionalBlockStyle * * Result ) = 0;
};

struct __declspec(uuid("4b61fc7f-4826-4b58-8ccb-7d459ad0be7b"))
ISpecificationSectionStyle : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetSortColumnType))
    enum ksSpecificationColumnTypeEnum SortColumnType;
    __declspec(property(get=GetSortColumnNumber))
    long SortColumnNumber;
    __declspec(property(get=GetFillDataFromStamp))
    VARIANT_BOOL FillDataFromStamp;
    __declspec(property(get=GetSortType))
    enum ksSortTypeEnum SortType;
    __declspec(property(get=GetColumns))
    ISpecificationColumnStylesPtr Columns;
    __declspec(property(get=GetAdditionalColumns))
    ISpecificationColumnStylesPtr AdditionalColumns;
    __declspec(property(get=GetAdditionalBlocks))
    IAdditionalBlockStylesPtr AdditionalBlocks;
    __declspec(property(get=GetSortLevelsCount))
    long SortLevelsCount;
    __declspec(property(get=GetSortColumnTypeEx))
    enum ksSpecificationColumnTypeEnum SortColumnTypeEx[];
    __declspec(property(get=GetSortColumnNumberEx))
    long SortColumnNumberEx[];
    __declspec(property(get=GetSortTypeEx))
    enum ksSortTypeEnum SortTypeEx[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetNumber ( );
    enum ksSpecificationColumnTypeEnum GetSortColumnType ( );
    long GetSortColumnNumber ( );
    VARIANT_BOOL GetFillDataFromStamp ( );
    enum ksSortTypeEnum GetSortType ( );
    ISpecificationColumnStylesPtr GetColumns ( );
    ISpecificationColumnStylesPtr GetAdditionalColumns ( );
    IAdditionalBlockStylesPtr GetAdditionalBlocks ( );
    long GetSortLevelsCount ( );
    enum ksSpecificationColumnTypeEnum GetSortColumnTypeEx (
        long Index );
    long GetSortColumnNumberEx (
        long Index );
    enum ksSortTypeEnum GetSortTypeEx (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_SortColumnType (
        /*[out,retval]*/ enum ksSpecificationColumnTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_SortColumnNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_FillDataFromStamp (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_SortType (
        /*[out,retval]*/ enum ksSortTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct ISpecificationColumnStyles * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalColumns (
        /*[out,retval]*/ struct ISpecificationColumnStyles * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalBlocks (
        /*[out,retval]*/ struct IAdditionalBlockStyles * * PVal ) = 0;
      virtual HRESULT __stdcall get_SortLevelsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_SortColumnTypeEx (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksSpecificationColumnTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_SortColumnNumberEx (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_SortTypeEx (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksSortTypeEnum * PVal ) = 0;
};

struct __declspec(uuid("24ae8484-f4f4-4059-afc7-9492a64c88e8"))
ISpecificationSectionStyles : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationSectionStylePtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ISpecificationSectionStylePtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationSectionStyle * * Result ) = 0;
};

struct __declspec(uuid("f237d2b3-dfee-4702-b71f-e5f6923f03e6"))
ISpecificationStyle : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutName1))
    _bstr_t LayoutName1;
    __declspec(property(get=GetStyleID1))
    long StyleID1;
    __declspec(property(get=GetLayoutName2))
    _bstr_t LayoutName2;
    __declspec(property(get=GetStyleID2))
    long StyleID2;
    __declspec(property(get=GetVariant))
    enum ksSpecificationVariantEnum Variant;
    __declspec(property(get=GetSectionOn))
    VARIANT_BOOL SectionOn;
    __declspec(property(get=GetSpecificationTuning))
    ISpecificationTuningPtr SpecificationTuning;
    __declspec(property(get=GetFormat))
    ISheetFormatPtr Format;
    __declspec(property(get=GetColumns))
    ISpecificationColumnStylesPtr Columns;
    __declspec(property(get=GetAdditionalColumns))
    ISpecificationColumnStylesPtr AdditionalColumns;
    __declspec(property(get=GetSections))
    ISpecificationSectionStylesPtr Sections;
    __declspec(property(get=GetAdditionalBlocks))
    IAdditionalBlockStylesPtr AdditionalBlocks;
    __declspec(property(get=GetSortSectionDown))
    VARIANT_BOOL SortSectionDown;
    __declspec(property(get=GetPerformanceCountInBlock))
    long PerformanceCountInBlock;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLayoutName1 ( );
    long GetStyleID1 ( );
    _bstr_t GetLayoutName2 ( );
    long GetStyleID2 ( );
    enum ksSpecificationVariantEnum GetVariant ( );
    VARIANT_BOOL GetSectionOn ( );
    ISpecificationTuningPtr GetSpecificationTuning ( );
    ISheetFormatPtr GetFormat ( );
    ISpecificationColumnStylesPtr GetColumns ( );
    ISpecificationColumnStylesPtr GetAdditionalColumns ( );
    ISpecificationSectionStylesPtr GetSections ( );
    IAdditionalBlockStylesPtr GetAdditionalBlocks ( );
    VARIANT_BOOL GetSortSectionDown ( );
    long GetPerformanceCountInBlock ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutName1 (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_StyleID1 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_LayoutName2 (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_StyleID2 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Variant (
        /*[out,retval]*/ enum ksSpecificationVariantEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_SectionOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_SpecificationTuning (
        /*[out,retval]*/ struct ISpecificationTuning * * PVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ISheetFormat * * PVal ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct ISpecificationColumnStyles * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalColumns (
        /*[out,retval]*/ struct ISpecificationColumnStyles * * PVal ) = 0;
      virtual HRESULT __stdcall get_Sections (
        /*[out,retval]*/ struct ISpecificationSectionStyles * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalBlocks (
        /*[out,retval]*/ struct IAdditionalBlockStyles * * PVal ) = 0;
      virtual HRESULT __stdcall get_SortSectionDown (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_PerformanceCountInBlock (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("2babdd01-eaca-4137-9749-25b8c5e230ee"))
ISpecificationColumnItem : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetValueType))
    enum ksValueTypeEnum ValueType;
    __declspec(property(get=GetKey,put=PutKey))
    short Key;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;

    //
    // Wrapper methods for error-handling
    //

    enum ksValueTypeEnum GetValueType ( );
    short GetKey ( );
    void PutKey (
        short PVal );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL PVal );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ValueType (
        /*[out,retval]*/ enum ksValueTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ short * PVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ short PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT PVal ) = 0;
};

struct __declspec(uuid("f4bab79a-8a35-44d5-be44-c566e444f342"))
ISpecificationColumnItems : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationColumnItemPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ISpecificationColumnItemPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationColumnItem * * Result ) = 0;
};

struct __declspec(uuid("1de74afb-5026-4b85-861f-f0cfdbd443e6"))
ITextItem : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetItemType,put=PutItemType))
    enum ksTextItemEnum ItemType;
    __declspec(property(get=GetStr,put=PutStr))
    _bstr_t Str;
    __declspec(property(get=GetSymbolFontName,put=PutSymbolFontName))
    _bstr_t SymbolFontName;
    __declspec(property(get=GetNumber,put=PutNumber))
    long Number;
    __declspec(property(get=GetSizeFactor,put=PutSizeFactor))
    enum ksTextSizeEnum SizeFactor;
    __declspec(property(get=GetNewLine,put=PutNewLine))
    VARIANT_BOOL NewLine;

    //
    // Wrapper methods for error-handling
    //

    enum ksTextItemEnum GetItemType ( );
    void PutItemType (
        enum ksTextItemEnum PVal );
    _bstr_t GetStr ( );
    void PutStr (
        _bstr_t Result );
    _bstr_t GetSymbolFontName ( );
    void PutSymbolFontName (
        _bstr_t PVal );
    long GetNumber ( );
    void PutNumber (
        long Result );
    enum ksTextSizeEnum GetSizeFactor ( );
    void PutSizeFactor (
        enum ksTextSizeEnum PVal );
    VARIANT_BOOL GetNewLine ( );
    void PutNewLine (
        VARIANT_BOOL Result );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ItemType (
        /*[out,retval]*/ enum ksTextItemEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ItemType (
        /*[in]*/ enum ksTextItemEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Str (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_Str (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_SymbolFontName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_SymbolFontName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Number (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_SizeFactor (
        /*[out,retval]*/ enum ksTextSizeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_SizeFactor (
        /*[in]*/ enum ksTextSizeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_NewLine (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_NewLine (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
};

struct __declspec(uuid("aab72fe2-dea3-4fb6-b0dd-b926249ef67c"))
ITextLine : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetTextItems))
    _variant_t TextItems;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTextItem))
    ITextItemPtr TextItem[];
    __declspec(property(get=GetStr,put=PutStr))
    _bstr_t Str;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetAlign,put=PutAlign))
    enum ksAlignEnum Align;
    __declspec(property(get=GetIndentedLine,put=PutIndentedLine))
    double IndentedLine;
    __declspec(property(get=GetStepBeforeParagraph,put=PutStepBeforeParagraph))
    double StepBeforeParagraph;
    __declspec(property(get=GetStepAfterParagraph,put=PutStepAfterParagraph))
    double StepAfterParagraph;
    __declspec(property(get=GetLeftEdge,put=PutLeftEdge))
    double LeftEdge;
    __declspec(property(get=GetRightEdge,put=PutRightEdge))
    double RightEdge;
    __declspec(property(get=GetTabulators))
    ITabulatorsPtr Tabulators;
    __declspec(property(get=GetLevel,put=PutLevel))
    long Level;
    __declspec(property(get=GetNumbering,put=PutNumbering))
    enum ksTextNumberingEnum Numbering;
    __declspec(property(get=GetTextLineType))
    enum ksTextLineType TextLineType;
    __declspec(property(get=GetTextLineData))
    IKompasAPIObjectPtr TextLineData;
    __declspec(property(get=GetNewPage,put=PutNewPage))
    VARIANT_BOOL NewPage;
    __declspec(property(get=GetNewSection,put=PutNewSection))
    VARIANT_BOOL NewSection;
    __declspec(property(get=GetBlockIndex))
    long BlockIndex;
    __declspec(property(get=GetSectionBlockIndex))
    long SectionBlockIndex;

    //
    // Wrapper methods for error-handling
    //

    long GetStyle ( );
    void PutStyle (
        long Result );
    _variant_t GetTextItems ( );
    long GetCount ( );
    ITextItemPtr GetTextItem (
        long Index );
    ITextItemPtr Add ( );
    ITextItemPtr AddBefore (
        long Index );
    _bstr_t GetStr ( );
    void PutStr (
        _bstr_t PVal );
    VARIANT_BOOL Clear ( );
    double GetStep ( );
    void PutStep (
        double PVal );
    enum ksAlignEnum GetAlign ( );
    void PutAlign (
        enum ksAlignEnum PVal );
    double GetIndentedLine ( );
    void PutIndentedLine (
        double PVal );
    double GetStepBeforeParagraph ( );
    void PutStepBeforeParagraph (
        double PVal );
    double GetStepAfterParagraph ( );
    void PutStepAfterParagraph (
        double PVal );
    double GetLeftEdge ( );
    void PutLeftEdge (
        double PVal );
    double GetRightEdge ( );
    void PutRightEdge (
        double PVal );
    ITabulatorsPtr GetTabulators ( );
    long GetLevel ( );
    void PutLevel (
        long Result );
    enum ksTextNumberingEnum GetNumbering ( );
    void PutNumbering (
        enum ksTextNumberingEnum Result );
    VARIANT_BOOL Delete ( );
    enum ksTextLineType GetTextLineType ( );
    IKompasAPIObjectPtr GetTextLineData ( );
    VARIANT_BOOL GetNewPage ( );
    void PutNewPage (
        VARIANT_BOOL Result );
    VARIANT_BOOL Assign (
        struct ITextLine * Other );
    ITextItemPtr InsertHypertextReference (
        long TextItemIndex,
        struct IKompasAPIObject * Object,
        enum ksHypertextTypeEnum Type,
        VARIANT_BOOL Brackets,
        long TextLineIndex,
        long Precision,
        double PropertyId );
    VARIANT_BOOL Edit (
        OLE_HANDLE HWnd );
    VARIANT_BOOL GetNewSection ( );
    void PutNewSection (
        VARIANT_BOOL Result );
    long GetBlockIndex ( );
    long GetSectionBlockIndex ( );
    VARIANT_BOOL ReplaceStr (
        __int64 StartPosition,
        _bstr_t SrcText,
        _bstr_t NewText,
        VARIANT_BOOL Case,
        VARIANT_BOOL WordOnly,
        VARIANT_BOOL ReplaceAll );
    __int64 Find (
        __int64 StartPosition,
        _bstr_t SrcText,
        VARIANT_BOOL Case,
        VARIANT_BOOL WordOnly );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_TextItems (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_TextItem (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITextItem * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ITextItem * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddBefore (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITextItem * * Value ) = 0;
      virtual HRESULT __stdcall get_Str (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Str (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ enum ksAlignEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ enum ksAlignEnum PVal ) = 0;
      virtual HRESULT __stdcall get_IndentedLine (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_IndentedLine (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StepBeforeParagraph (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepBeforeParagraph (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StepAfterParagraph (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepAfterParagraph (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_LeftEdge (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftEdge (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_RightEdge (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RightEdge (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Tabulators (
        /*[out,retval]*/ struct ITabulators * * PVal ) = 0;
      virtual HRESULT __stdcall get_Level (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Level (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_Numbering (
        /*[out,retval]*/ enum ksTextNumberingEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Numbering (
        /*[in]*/ enum ksTextNumberingEnum Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_TextLineType (
        /*[out,retval]*/ enum ksTextLineType * Result ) = 0;
      virtual HRESULT __stdcall get_TextLineData (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_NewPage (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_NewPage (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct ITextLine * Other,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_InsertHypertextReference (
        /*[in]*/ long TextItemIndex,
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[in]*/ enum ksHypertextTypeEnum Type,
        /*[in]*/ VARIANT_BOOL Brackets,
        /*[in]*/ long TextLineIndex,
        /*[in]*/ long Precision,
        /*[in]*/ double PropertyId,
        /*[out,retval]*/ struct ITextItem * * Item ) = 0;
      virtual HRESULT __stdcall raw_Edit (
        /*[in]*/ OLE_HANDLE HWnd,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_NewSection (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_NewSection (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_BlockIndex (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_SectionBlockIndex (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_ReplaceStr (
        /*[in]*/ __int64 StartPosition,
        /*[in]*/ BSTR SrcText,
        /*[in]*/ BSTR NewText,
        /*[in]*/ VARIANT_BOOL Case,
        /*[in]*/ VARIANT_BOOL WordOnly,
        /*[in]*/ VARIANT_BOOL ReplaceAll,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ __int64 StartPosition,
        /*[in]*/ BSTR SrcText,
        /*[in]*/ VARIANT_BOOL Case,
        /*[in]*/ VARIANT_BOOL WordOnly,
        /*[out,retval]*/ __int64 * Result ) = 0;
};

struct __declspec(uuid("9ae6c0a0-72eb-4a51-b54c-a0e57cc5f6dc"))
ITextTable : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFixedCellsSize,put=PutFixedCellsSize))
    VARIANT_BOOL FixedCellsSize;
    __declspec(property(get=GetFixedRowCount,put=PutFixedRowCount))
    VARIANT_BOOL FixedRowCount;
    __declspec(property(get=GetFixedColumnCount,put=PutFixedColumnCount))
    VARIANT_BOOL FixedColumnCount;

    //
    // Wrapper methods for error-handling
    //

    void PutFixedCellsSize (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedCellsSize ( );
    void PutFixedRowCount (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedRowCount ( );
    void PutFixedColumnCount (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedColumnCount ( );
    VARIANT_BOOL Save (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_FixedCellsSize (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedCellsSize (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedRowCount (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedRowCount (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedColumnCount (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedColumnCount (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("99b840fc-0150-4dad-bc0e-ad481baab8c2"))
IText : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetTextLines))
    _variant_t TextLines;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTextLine))
    ITextLinePtr TextLine[];
    __declspec(property(get=GetStr,put=PutStr))
    _bstr_t Str;

    //
    // Wrapper methods for error-handling
    //

    long GetStyle ( );
    void PutStyle (
        long Result );
    _variant_t GetTextLines ( );
    long GetCount ( );
    ITextLinePtr GetTextLine (
        long Index );
    ITextLinePtr Add ( );
    ITextLinePtr AddBefore (
        long Index );
    _bstr_t GetStr ( );
    void PutStr (
        _bstr_t PVal );
    VARIANT_BOOL Clear ( );
    ITextLinePtr AddTextLine (
        enum ksTextLineType Type,
        _bstr_t FileName );
    ITextLinePtr AddTextLineBefore (
        enum ksTextLineType Type,
        long Index,
        _bstr_t FileName );
    VARIANT_BOOL Replace (
        _bstr_t SrcText,
        _bstr_t NewText,
        VARIANT_BOOL Case,
        VARIANT_BOOL WordOnly,
        VARIANT_BOOL ReplaceAll );
    VARIANT_BOOL Assign (
        struct IText * Other );
    ITextTablePtr AddTable (
        long IndexAt,
        long RowsCount,
        long ColumnsCount,
        double RowHeigh,
        double ColumnsWidth,
        enum ksTableTileLayoutEnum TitlePos );
    VARIANT_BOOL Edit (
        OLE_HANDLE HWnd );
    __int64 Find (
        __int64 StartPosition,
        _bstr_t SrcText,
        VARIANT_BOOL Case,
        VARIANT_BOOL WordOnly );
    VARIANT_BOOL ReplaceStr (
        __int64 StartPosition,
        _bstr_t SrcText,
        _bstr_t NewText,
        VARIANT_BOOL Case,
        VARIANT_BOOL WordOnly,
        VARIANT_BOOL ReplaceAll );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_TextLines (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_TextLine (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITextLine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ITextLine * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddBefore (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITextLine * * Value ) = 0;
      virtual HRESULT __stdcall get_Str (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Str (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_AddTextLine (
        /*[in]*/ enum ksTextLineType Type,
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct ITextLine * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddTextLineBefore (
        /*[in]*/ enum ksTextLineType Type,
        /*[in]*/ long Index,
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct ITextLine * * Value ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR SrcText,
        /*[in]*/ BSTR NewText,
        /*[in]*/ VARIANT_BOOL Case,
        /*[in]*/ VARIANT_BOOL WordOnly,
        /*[in]*/ VARIANT_BOOL ReplaceAll,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IText * Other,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_AddTable (
        /*[in]*/ long IndexAt,
        /*[in]*/ long RowsCount,
        /*[in]*/ long ColumnsCount,
        /*[in]*/ double RowHeigh,
        /*[in]*/ double ColumnsWidth,
        /*[in]*/ enum ksTableTileLayoutEnum TitlePos,
        /*[out,retval]*/ struct ITextTable * * Value ) = 0;
      virtual HRESULT __stdcall raw_Edit (
        /*[in]*/ OLE_HANDLE HWnd,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ __int64 StartPosition,
        /*[in]*/ BSTR SrcText,
        /*[in]*/ VARIANT_BOOL Case,
        /*[in]*/ VARIANT_BOOL WordOnly,
        /*[out,retval]*/ __int64 * Result ) = 0;
      virtual HRESULT __stdcall raw_ReplaceStr (
        /*[in]*/ __int64 StartPosition,
        /*[in]*/ BSTR SrcText,
        /*[in]*/ BSTR NewText,
        /*[in]*/ VARIANT_BOOL Case,
        /*[in]*/ VARIANT_BOOL WordOnly,
        /*[in]*/ VARIANT_BOOL ReplaceAll,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("3ecfb777-2645-42b5-a6ed-111688433b26"))
ISpecificationColumn : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetColumnType))
    enum ksSpecificationColumnTypeEnum ColumnType;
    __declspec(property(get=GetColumnTypeNumber))
    long ColumnTypeNumber;
    __declspec(property(get=GetBlockNumber))
    long BlockNumber;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetValueType))
    enum ksValueTypeEnum ValueType;
    __declspec(property(get=GetColumnItems))
    ISpecificationColumnItemsPtr ColumnItems;
    __declspec(property(get=GetAttributeNumber,put=PutAttributeNumber))
    double AttributeNumber;
    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetColumnName))
    _bstr_t ColumnName;
    __declspec(property(get=GetCountUniteCells,put=PutCountUniteCells))
    long CountUniteCells;

    //
    // Wrapper methods for error-handling
    //

    enum ksSpecificationColumnTypeEnum GetColumnType ( );
    long GetColumnTypeNumber ( );
    long GetBlockNumber ( );
    long GetNumber ( );
    enum ksValueTypeEnum GetValueType ( );
    ISpecificationColumnItemsPtr GetColumnItems ( );
    double GetAttributeNumber ( );
    void PutAttributeNumber (
        double PVal );
    ITextPtr GetText ( );
    _bstr_t GetColumnName ( );
    long GetCountUniteCells ( );
    void PutCountUniteCells (
        long PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColumnType (
        /*[out,retval]*/ enum ksSpecificationColumnTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnTypeNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_BlockNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_ValueType (
        /*[out,retval]*/ enum ksValueTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnItems (
        /*[out,retval]*/ struct ISpecificationColumnItems * * PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeNumber (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AttributeNumber (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_CountUniteCells (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_CountUniteCells (
        /*[in]*/ long PVal ) = 0;
};

struct __declspec(uuid("9f44bf03-de25-4dde-ada0-92384199c100"))
ISpecificationColumns : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationColumnPtr Item[];
    __declspec(property(get=GetColumn))
    ISpecificationColumnPtr Column[][][];

    //
    // Wrapper methods for error-handling
    //

    ISpecificationColumnPtr GetItem (
        const _variant_t & Index );
    ISpecificationColumnPtr GetColumn (
        enum ksSpecificationColumnTypeEnum ColumnType,
        long ColumnNumber,
        long BlockNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationColumn * * Result ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[in]*/ enum ksSpecificationColumnTypeEnum ColumnType,
        /*[in]*/ long ColumnNumber,
        /*[in]*/ long BlockNumber,
        /*[out,retval]*/ struct ISpecificationColumn * * Result ) = 0;
};

struct __declspec(uuid("333e9e11-d161-49ae-9791-8bedb58b4c78"))
IAttachedDocument : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetTransmit,put=PutTransmit))
    VARIANT_BOOL Transmit;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetFormatTransmit,put=PutFormatTransmit))
    VARIANT_BOOL FormatTransmit;
    __declspec(property(get=GetFormat))
    _bstr_t Format;
    __declspec(property(get=GetMarking))
    _bstr_t Marking;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    VARIANT_BOOL GetTransmit ( );
    void PutTransmit (
        VARIANT_BOOL PVal );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t PVal );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL GetFormatTransmit ( );
    void PutFormatTransmit (
        VARIANT_BOOL PVal );
    _bstr_t GetFormat ( );
    _bstr_t GetMarking ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Transmit (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Transmit (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_FormatTransmit (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FormatTransmit (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Marking (
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("81fab1c5-f566-4d06-8d3d-17ff01d3566f"))
IAttachedDocuments : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAttachedDocumentPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IAttachedDocumentPtr GetItem (
        const _variant_t & Index );
    IAttachedDocumentPtr Add (
        _bstr_t Name,
        VARIANT_BOOL Transmit );
    IAttachedDocumentPtr AddDocument (
        _bstr_t Name,
        VARIANT_BOOL Transmit,
        VARIANT_BOOL FillText,
        _bstr_t EmbodimentMarking );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAttachedDocument * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL Transmit,
        /*[out,retval]*/ struct IAttachedDocument * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddDocument (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL Transmit,
        /*[in]*/ VARIANT_BOOL FillText,
        /*[in]*/ BSTR EmbodimentMarking,
        /*[out,retval]*/ struct IAttachedDocument * * Result ) = 0;
};

struct __declspec(uuid("72eb4e8e-7952-4b36-852b-4816b7b5afee"))
ISpecificationObject : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectType))
    enum ksSpecificationObjectTypeEnum ObjectType;
    __declspec(property(get=GetSection))
    long Section;
    __declspec(property(get=GetSubsection,put=PutSubsection))
    long Subsection;
    __declspec(property(get=GetAdditionalSection,put=PutAdditionalSection))
    long AdditionalSection;
    __declspec(property(get=GetAdditionalBlock,put=PutAdditionalBlock))
    long AdditionalBlock;
    __declspec(property(get=GetNestedSection,put=PutNestedSection))
    long NestedSection;
    __declspec(property(get=GetNestedBlock,put=PutNestedBlock))
    long NestedBlock;
    __declspec(property(get=GetBlockNumberByIndex))
    long BlockNumberByIndex[];
    __declspec(property(get=GetUniqueNumber))
    double UniqueNumber;
    __declspec(property(get=GetState))
    enum ksSpecificationObjectStateEnum State;
    __declspec(property(get=GetFirstOnSheet,put=PutFirstOnSheet))
    VARIANT_BOOL FirstOnSheet;
    __declspec(property(get=GetIncrementPosition,put=PutIncrementPosition))
    VARIANT_BOOL IncrementPosition;
    __declspec(property(get=GetColumns))
    ISpecificationColumnsPtr Columns;
    __declspec(property(get=GetAdditionalColumns))
    ISpecificationColumnsPtr AdditionalColumns;
    __declspec(property(get=GetAttachedDocuments))
    IAttachedDocumentsPtr AttachedDocuments;

    //
    // Wrapper methods for error-handling
    //

    enum ksSpecificationObjectTypeEnum GetObjectType ( );
    long GetSection ( );
    long GetSubsection ( );
    void PutSubsection (
        long PVal );
    long GetAdditionalSection ( );
    void PutAdditionalSection (
        long PVal );
    long GetAdditionalBlock ( );
    void PutAdditionalBlock (
        long PVal );
    long GetNestedSection ( );
    void PutNestedSection (
        long PVal );
    long GetNestedBlock ( );
    void PutNestedBlock (
        long PVal );
    long GetBlockNumberByIndex (
        long Val );
    double GetUniqueNumber ( );
    enum ksSpecificationObjectStateEnum GetState ( );
    VARIANT_BOOL GetFirstOnSheet ( );
    void PutFirstOnSheet (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIncrementPosition ( );
    void PutIncrementPosition (
        VARIANT_BOOL PVal );
    ISpecificationColumnsPtr GetColumns ( );
    ISpecificationColumnsPtr GetAdditionalColumns ( );
    IAttachedDocumentsPtr GetAttachedDocuments ( );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL Edit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ObjectType (
        /*[out,retval]*/ enum ksSpecificationObjectTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Section (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Subsection (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Subsection (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalSection (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_AdditionalSection (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalBlock (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_AdditionalBlock (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_NestedSection (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_NestedSection (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_NestedBlock (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_NestedBlock (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_BlockNumberByIndex (
        /*[in]*/ long Val,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_UniqueNumber (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum ksSpecificationObjectStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_FirstOnSheet (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FirstOnSheet (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IncrementPosition (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IncrementPosition (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct ISpecificationColumns * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalColumns (
        /*[out,retval]*/ struct ISpecificationColumns * * PVal ) = 0;
      virtual HRESULT __stdcall get_AttachedDocuments (
        /*[out,retval]*/ struct IAttachedDocuments * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Edit (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
};

struct __declspec(uuid("827c4f8f-9ec6-41cc-aa7a-f6a6522458fc"))
ISpecificationObjectCreateParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSection,put=PutSection))
    long Section;
    __declspec(property(get=GetSubsection,put=PutSubsection))
    long Subsection;
    __declspec(property(get=GetAdditionalSection,put=PutAdditionalSection))
    long AdditionalSection;
    __declspec(property(get=GetAdditionalBlock,put=PutAdditionalBlock))
    long AdditionalBlock;
    __declspec(property(get=GetNestedSection,put=PutNestedSection))
    long NestedSection;
    __declspec(property(get=GetNestedBlock,put=PutNestedBlock))
    long NestedBlock;
    __declspec(property(get=GetAttributeNumber,put=PutAttributeNumber))
    double AttributeNumber;
    __declspec(property(get=GetFillNameByMaterial,put=PutFillNameByMaterial))
    VARIANT_BOOL FillNameByMaterial;

    //
    // Wrapper methods for error-handling
    //

    long GetSection ( );
    void PutSection (
        long PVal );
    long GetSubsection ( );
    void PutSubsection (
        long PVal );
    long GetAdditionalSection ( );
    void PutAdditionalSection (
        long PVal );
    long GetAdditionalBlock ( );
    void PutAdditionalBlock (
        long PVal );
    long GetNestedSection ( );
    void PutNestedSection (
        long PVal );
    long GetNestedBlock ( );
    void PutNestedBlock (
        long PVal );
    double GetAttributeNumber ( );
    void PutAttributeNumber (
        double PVal );
    VARIANT_BOOL GetFillNameByMaterial ( );
    void PutFillNameByMaterial (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Section (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Section (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Subsection (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Subsection (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalSection (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_AdditionalSection (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalBlock (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_AdditionalBlock (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_NestedSection (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_NestedSection (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_NestedBlock (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_NestedBlock (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeNumber (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AttributeNumber (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_FillNameByMaterial (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FillNameByMaterial (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("c389f80d-228d-4fb1-b183-959aea0b5906"))
IProperty : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    double Id;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum ksPropertyTypeEnum DataType;
    __declspec(property(get=GetMinValue))
    _variant_t MinValue;
    __declspec(property(get=GetMaxValue))
    _variant_t MaxValue;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetSignificantDigitsCount,put=PutSignificantDigitsCount))
    long SignificantDigitsCount;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetPropertyTypeId,put=PutPropertyTypeId))
    _bstr_t PropertyTypeId;
    __declspec(property(get=GetUnitId,put=PutUnitId))
    _bstr_t UnitId;
    __declspec(property(get=GetUseListVal,put=PutUseListVal))
    VARIANT_BOOL UseListVal;
    __declspec(property(get=GetListVal,put=PutListVal))
    _variant_t ListVal;
    __declspec(property(get=GetIsVariable))
    VARIANT_BOOL IsVariable;
    __declspec(property(get=GetIsAngular))
    VARIANT_BOOL IsAngular;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    double GetId ( );
    void PutDataType (
        enum ksPropertyTypeEnum PVal );
    enum ksPropertyTypeEnum GetDataType ( );
    _variant_t GetMinValue ( );
    _variant_t GetMaxValue ( );
    VARIANT_BOOL SetValueRange (
        const _variant_t & MinVal,
        const _variant_t & MaxVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    long GetSignificantDigitsCount ( );
    void PutSignificantDigitsCount (
        long Result );
    _bstr_t GetSourceName ( );
    void PutComment (
        _bstr_t PVal );
    _bstr_t GetComment ( );
    void PutPropertyTypeId (
        _bstr_t PVal );
    _bstr_t GetPropertyTypeId ( );
    void PutUnitId (
        _bstr_t PVal );
    _bstr_t GetUnitId ( );
    VARIANT_BOOL ViewEdit (
        OLE_HANDLE Parent,
        VARIANT_BOOL ReadOnly );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL GetUseListVal ( );
    void PutUseListVal (
        VARIANT_BOOL PVal );
    _variant_t GetListVal ( );
    void PutListVal (
        const _variant_t & PVal );
    VARIANT_BOOL GetIsVariable ( );
    VARIANT_BOOL GetIsAngular ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ enum ksPropertyTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum ksPropertyTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetValueRange (
        /*[in]*/ VARIANT MinVal,
        /*[in]*/ VARIANT MaxVal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SignificantDigitsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_SignificantDigitsCount (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_PropertyTypeId (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyTypeId (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_UnitId (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_UnitId (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_ViewEdit (
        /*[in]*/ OLE_HANDLE Parent,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_UseListVal (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UseListVal (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ListVal (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_ListVal (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_IsVariable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsAngular (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("dd2af5c4-d5b9-420d-b658-f935f80a8586"))
IUserDataStorage : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name[];
    __declspec(property(get=GetVersion,put=PutVersion))
    long Version[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName (
        _bstr_t Pass );
    void PutName (
        _bstr_t Pass,
        _bstr_t PVal );
    VARIANT_BOOL SetPassword (
        _bstr_t OldPass,
        _bstr_t NewPass );
    long GetVersion (
        _bstr_t Pass );
    void PutVersion (
        _bstr_t Pass,
        long PVal );
    _bstr_t GetObject (
        const _variant_t & Index,
        VARIANT * Object,
        long * Numb );
    long SetObject (
        _bstr_t Pass,
        const _variant_t & Index,
        const _variant_t & Object,
        _bstr_t Comment );
    long AddObject (
        _bstr_t Pass,
        const _variant_t & Object,
        _bstr_t Comment );
    VARIANT_BOOL Delete (
        _bstr_t Pass,
        const _variant_t & Index );
    VARIANT_BOOL Clear (
        _bstr_t Pass );
    VARIANT_BOOL AddObjects (
        _bstr_t Pass,
        const _variant_t & Objects,
        const _variant_t & Comments );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[in]*/ BSTR Pass,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Pass,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR OldPass,
        /*[in]*/ BSTR NewPass,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[in]*/ BSTR Pass,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Version (
        /*[in]*/ BSTR Pass,
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall raw_GetObject (
        /*[in]*/ VARIANT Index,
        /*[out]*/ VARIANT * Object,
        /*[out]*/ long * Numb,
        /*[out,retval]*/ BSTR * Comment ) = 0;
      virtual HRESULT __stdcall raw_SetObject (
        /*[in]*/ BSTR Pass,
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT Object,
        /*[in]*/ BSTR Comment,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddObject (
        /*[in]*/ BSTR Pass,
        /*[in]*/ VARIANT Object,
        /*[in]*/ BSTR Comment,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Pass,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[in]*/ BSTR Pass,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddObjects (
        /*[in]*/ BSTR Pass,
        /*[in]*/ VARIANT Objects,
        /*[in]*/ VARIANT Comments,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("9dbfb4eb-be9f-46ef-88ff-bb603a9e786b"))
IUserDataStorages : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IUserDataStoragePtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IUserDataStoragePtr GetItem (
        const _variant_t & Index );
    IUserDataStoragePtr Add (
        _bstr_t StorageName );
    VARIANT_BOOL Delete (
        _bstr_t Password,
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IUserDataStorage * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR StorageName,
        /*[out,retval]*/ struct IUserDataStorage * * Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("77a6d4ca-6418-4dee-b59c-400bfd052375"))
IUserDataStoragesMng : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IUserDataStoragesPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IUserDataStoragesPtr GetItem (
        const _variant_t & Index );
    IUserDataStoragesPtr Add (
        struct IKompasAPIObject * Object );
    VARIANT_BOOL Delete (
        const _variant_t & Index );
    VARIANT_BOOL Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IUserDataStorages * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ struct IUserDataStorages * * Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("ae7377cb-28c6-468e-b667-73117bcdc300"))
IPropertyKeeper : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties,put=PutProperties))
    _bstr_t Properties;
    __declspec(property(get=GetUniqueMetaObjectKey))
    _bstr_t UniqueMetaObjectKey;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPropertyValue (
        struct IProperty * Property,
        VARIANT * Value,
        VARIANT_BOOL BaseUnit,
        VARIANT_BOOL * FromSource );
    VARIANT_BOOL SetPropertyValue (
        struct IProperty * Property,
        const _variant_t & Value,
        VARIANT_BOOL BaseUnit );
    IUserDataStoragePtr GetPropertyAdditionalStorage (
        struct IProperty * Property,
        VARIANT_BOOL Create,
        VARIANT_BOOL * FromSource );
    IUserDataStoragesMngPtr GetUserDataStoragesManager (
        VARIANT_BOOL FromSource );
    VARIANT_BOOL InsertHypertextReference (
        struct IProperty * Property,
        struct IKompasAPIObject * Object,
        enum ksHypertextTypeEnum Type,
        VARIANT_BOOL Brackets,
        long TextLineIndex,
        long Precision,
        double PropertyId );
    _bstr_t GetProperties ( );
    void PutProperties (
        _bstr_t PVal );
    _bstr_t GetUniqueMetaObjectKey ( );
    VARIANT_BOOL IsComplexPropertyValue (
        struct IProperty * Property );
    _bstr_t GetComplexPropertyValue (
        struct IProperty * Property,
        VARIANT_BOOL * FromSource );
    VARIANT_BOOL SetComplexPropertyValue (
        struct IProperty * Property,
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPropertyValue (
        /*[in]*/ struct IProperty * Property,
        /*[out]*/ VARIANT * Value,
        /*[in]*/ VARIANT_BOOL BaseUnit,
        /*[out]*/ VARIANT_BOOL * FromSource,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPropertyValue (
        /*[in]*/ struct IProperty * Property,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT_BOOL BaseUnit,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPropertyAdditionalStorage (
        /*[in]*/ struct IProperty * Property,
        /*[in]*/ VARIANT_BOOL Create,
        /*[out]*/ VARIANT_BOOL * FromSource,
        /*[out,retval]*/ struct IUserDataStorage * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetUserDataStoragesManager (
        /*[in]*/ VARIANT_BOOL FromSource,
        /*[out,retval]*/ struct IUserDataStoragesMng * * PVal ) = 0;
      virtual HRESULT __stdcall raw_InsertHypertextReference (
        /*[in]*/ struct IProperty * Property,
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[in]*/ enum ksHypertextTypeEnum Type,
        /*[in]*/ VARIANT_BOOL Brackets,
        /*[in]*/ long TextLineIndex,
        /*[in]*/ long Precision,
        /*[in]*/ double PropertyId,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Properties (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_UniqueMetaObjectKey (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_IsComplexPropertyValue (
        /*[in]*/ struct IProperty * Property,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetComplexPropertyValue (
        /*[in]*/ struct IProperty * Property,
        /*[out]*/ VARIANT_BOOL * FromSource,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_SetComplexPropertyValue (
        /*[in]*/ struct IProperty * Property,
        /*[in]*/ BSTR Value,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("250ce350-7c21-47fd-8ff2-c44a9ff177df"))
IStamp : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetText))
    ITextPtr Text[];
    __declspec(property(get=GetCrossed))
    VARIANT_BOOL Crossed;

    //
    // Wrapper methods for error-handling
    //

    ITextPtr GetText (
        long Id );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Clear (
        long Id );
    long GetNextColumnId (
        long Id );
    VARIANT_BOOL GetCrossed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[in]*/ long Id,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_GetNextColumnId (
        /*[in]*/ long Id,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Crossed (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
};

struct __declspec(uuid("d87b5a80-cf52-4510-add9-d1344ffffc07"))
ILayoutSheet : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat))
    ISheetFormatPtr Format;
    __declspec(property(get=GetLayoutLibraryFileName,put=PutLayoutLibraryFileName))
    _bstr_t LayoutLibraryFileName;
    __declspec(property(get=GetLayoutStyleNumber,put=PutLayoutStyleNumber))
    double LayoutStyleNumber;
    __declspec(property(get=GetStamp))
    IStampPtr Stamp;
    __declspec(property(get=GetSheetType,put=PutSheetType))
    enum ksSheetTypeEnum SheetType;

    //
    // Wrapper methods for error-handling
    //

    ISheetFormatPtr GetFormat ( );
    _bstr_t GetLayoutLibraryFileName ( );
    void PutLayoutLibraryFileName (
        _bstr_t PVal );
    double GetLayoutStyleNumber ( );
    void PutLayoutStyleNumber (
        double PVal );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );
    IStampPtr GetStamp ( );
    enum ksSheetTypeEnum GetSheetType ( );
    void PutSheetType (
        enum ksSheetTypeEnum PVal );
    VARIANT_BOOL GetPlaceInsideFrames (
        double * Left,
        double * Top,
        double * Right,
        double * Bottom );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ISheetFormat * * PVal ) = 0;
      virtual HRESULT __stdcall get_LayoutLibraryFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_LayoutLibraryFileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_LayoutStyleNumber (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_LayoutStyleNumber (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Stamp (
        /*[out,retval]*/ struct IStamp * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetType (
        /*[out,retval]*/ enum ksSheetTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_SheetType (
        /*[in]*/ enum ksSheetTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPlaceInsideFrames (
        /*[out]*/ double * Left,
        /*[out]*/ double * Top,
        /*[out]*/ double * Right,
        /*[out]*/ double * Bottom,
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
};

struct __declspec(uuid("7ab54196-0b76-4b01-b769-7f47637173c4"))
ILayoutSheets : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ILayoutSheetPtr Item[];
    __declspec(property(get=GetItemByNumber))
    ILayoutSheetPtr ItemByNumber[];

    //
    // Wrapper methods for error-handling
    //

    ILayoutSheetPtr GetItem (
        const _variant_t & Index );
    ILayoutSheetPtr GetItemByNumber (
        long Number );
    ILayoutSheetPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILayoutSheet * * Result ) = 0;
      virtual HRESULT __stdcall get_ItemByNumber (
        /*[in]*/ long Number,
        /*[out,retval]*/ struct ILayoutSheet * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILayoutSheet * * Result ) = 0;
};

struct __declspec(uuid("a70bf191-e1e1-4a92-8ca9-e6d3fead2d9a"))
ILoadCombinationsParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLoadCombinations))
    _variant_t LoadCombinations;
    __declspec(property(get=GetProtectedFlags))
    _variant_t ProtectedFlags;
    __declspec(property(get=GetApplyingIndex))
    long ApplyingIndex;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLoadCombinations ( );
    _variant_t GetProtectedFlags ( );
    long GetApplyingIndex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LoadCombinations (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_ProtectedFlags (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_ApplyingIndex (
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("fadca157-95b1-4e3f-97aa-622e34da3238"))
IOpenDocumentParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetApplyingIndex,put=PutApplyingIndex))
    long ApplyingIndex;
    __declspec(property(put=PutPassword))
    _bstr_t Password;

    //
    // Wrapper methods for error-handling
    //

    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutApplyingIndex (
        long Result );
    long GetApplyingIndex ( );
    void PutPassword (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ApplyingIndex (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_ApplyingIndex (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("e35f8ff8-03c6-460c-a2f1-294a3a29a029"))
IPropertyControl : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetControlType))
    enum ControlTypeEnum ControlType;
    __declspec(property(get=GetId,put=PutId))
    long Id;
    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetNameVisibility,put=PutNameVisibility))
    enum PropertyControlNameVisibility NameVisibility;
    __declspec(property(get=GetHint,put=PutHint))
    _bstr_t Hint;
    __declspec(property(get=GetTips,put=PutTips))
    _bstr_t Tips;

    //
    // Wrapper methods for error-handling
    //

    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    enum ControlTypeEnum GetControlType ( );
    void PutId (
        long PVal );
    long GetId ( );
    void PutEnable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnable ( );
    void PutValue (
        const _variant_t & PVal );
    _variant_t GetValue ( );
    void PutNameVisibility (
        enum PropertyControlNameVisibility PVal );
    enum PropertyControlNameVisibility GetNameVisibility ( );
    void PutHint (
        _bstr_t PVal );
    _bstr_t GetHint ( );
    void PutTips (
        _bstr_t PVal );
    _bstr_t GetTips ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_ControlType (
        /*[out,retval]*/ enum ControlTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_NameVisibility (
        /*[in]*/ enum PropertyControlNameVisibility PVal ) = 0;
      virtual HRESULT __stdcall get_NameVisibility (
        /*[out,retval]*/ enum PropertyControlNameVisibility * PVal ) = 0;
      virtual HRESULT __stdcall put_Hint (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Hint (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Tips (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Tips (
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("548241ba-fda8-4633-981e-94552be38d6b"))
IPropertyControls : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPropertyControlPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IPropertyControlPtr GetItem (
        const _variant_t & Index );
    IPropertyControlPtr Add (
        enum ControlTypeEnum Type );
    VARIANT_BOOL Delete (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPropertyControl * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum ControlTypeEnum Type,
        /*[out,retval]*/ struct IPropertyControl * * PControl ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("45de8e5b-bc2b-4584-8ba7-d3014d3a2397"))
IPropertyTab : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetPropertyControls))
    IPropertyControlsPtr PropertyControls;
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetImage,put=PutImage))
    _variant_t Image;
    __declspec(property(get=GetExpanded,put=PutExpanded))
    VARIANT_BOOL Expanded;

    //
    // Wrapper methods for error-handling
    //

    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutCaption (
        _bstr_t PVal );
    _bstr_t GetCaption ( );
    void PutActive (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetActive ( );
    IPropertyControlsPtr GetPropertyControls ( );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutImage (
        const _variant_t & Bmp );
    _variant_t GetImage ( );
    void PutExpanded (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetExpanded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyControls (
        /*[out,retval]*/ struct IPropertyControls * * PControls ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_Image (
        /*[in]*/ VARIANT Bmp ) = 0;
      virtual HRESULT __stdcall get_Image (
        /*[out,retval]*/ VARIANT * Bmp ) = 0;
      virtual HRESULT __stdcall put_Expanded (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Expanded (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("5ba6324e-e555-490f-a0e2-68d3c6c88d92"))
IPropertyTabs : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPropertyTabPtr Item[];
    __declspec(property(get=GetActive))
    IPropertyTabPtr Active;
    __declspec(property(get=GetSystemTab))
    IPropertyTabPtr SystemTab;

    //
    // Wrapper methods for error-handling
    //

    IPropertyTabPtr GetItem (
        const _variant_t & Index );
    IPropertyTabPtr Add (
        _bstr_t Caption );
    VARIANT_BOOL Delete (
        const _variant_t & Index );
    IPropertyTabPtr GetActive ( );
    IPropertyTabPtr GetSystemTab ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPropertyTab * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Caption,
        /*[out,retval]*/ struct IPropertyTab * * PTab ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ struct IPropertyTab * * PDoc ) = 0;
      virtual HRESULT __stdcall get_SystemTab (
        /*[out,retval]*/ struct IPropertyTab * * PDoc ) = 0;
};

struct __declspec(uuid("cb5fdbc8-4dae-4c4b-87d5-6fd1f2705c38"))
IProcessParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetPropertyTabs))
    IPropertyTabsPtr PropertyTabs;
    __declspec(property(get=GetSpecToolbar,put=PutSpecToolbar))
    enum SpecPropertyToolBarEnum SpecToolbar;
    __declspec(property(get=GetAutoReduce,put=PutAutoReduce))
    VARIANT_BOOL AutoReduce;
    __declspec(property(get=GetDefaultControlFix,put=PutDefaultControlFix))
    enum DefaultFixTypeEnum DefaultControlFix;
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetSpecToolbarEx,put=PutSpecToolbarEx))
    long SpecToolbarEx;
    __declspec(property(get=GetBmpBeginId,put=PutBmpBeginId))
    long BmpBeginId[];
    __declspec(property(get=GetLayout))
    enum PropertyManagerLayout Layout;
    __declspec(property(get=GetShowContextMenuOfSnap,put=PutShowContextMenuOfSnap))
    VARIANT_BOOL ShowContextMenuOfSnap;
    __declspec(property(get=GetShowContextMenuOfGeomCalculator,put=PutShowContextMenuOfGeomCalculator))
    VARIANT_BOOL ShowContextMenuOfGeomCalculator;
    __declspec(property(get=GetShowCommandWindow,put=PutShowCommandWindow))
    VARIANT_BOOL ShowCommandWindow;
    __declspec(property(get=GetEnableUndoRedo,put=PutEnableUndoRedo))
    VARIANT_BOOL EnableUndoRedo;
    __declspec(property(get=GetEnterButtonIconType,put=PutEnterButtonIconType))
    enum ksEnterButtonIconTypeEnum EnterButtonIconType;

    //
    // Wrapper methods for error-handling
    //

    void PutCaption (
        _bstr_t PVal );
    _bstr_t GetCaption ( );
    IPropertyTabsPtr GetPropertyTabs ( );
    void PutSpecToolbar (
        enum SpecPropertyToolBarEnum PVal );
    enum SpecPropertyToolBarEnum GetSpecToolbar ( );
    void PutAutoReduce (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoReduce ( );
    void PutDefaultControlFix (
        enum DefaultFixTypeEnum PVal );
    enum DefaultFixTypeEnum GetDefaultControlFix ( );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutSpecToolbarEx (
        long PVal );
    long GetSpecToolbarEx ( );
    void PutBmpBeginId (
        enum ksBmpSizeEnum Size,
        long PVal );
    long GetBmpBeginId (
        enum ksBmpSizeEnum Size );
    enum PropertyManagerLayout GetLayout ( );
    HRESULT GetGabaritRect (
        long * Left,
        long * Top,
        long * Right,
        long * Bottom );
    void PutShowContextMenuOfSnap (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowContextMenuOfSnap ( );
    void PutShowContextMenuOfGeomCalculator (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowContextMenuOfGeomCalculator ( );
    void PutShowCommandWindow (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowCommandWindow ( );
    VARIANT_BOOL AddSpecToolbarButton (
        long BtnID,
        const _variant_t & Bmp,
        _bstr_t Tips,
        _bstr_t IconFont );
    VARIANT_BOOL PushProcessName (
        _bstr_t Name );
    VARIANT_BOOL PopProcessName ( );
    void PutEnableUndoRedo (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableUndoRedo ( );
    VARIANT_BOOL AddSetupMenuCommand (
        _bstr_t Title,
        long Command,
        VARIANT_BOOL Checable );
    VARIANT_BOOL SetSetupMenuCommandState (
        long Command,
        VARIANT_BOOL Visible,
        VARIANT_BOOL Enable,
        VARIANT_BOOL Checked );
    void PutEnterButtonIconType (
        enum ksEnterButtonIconTypeEnum PVal );
    enum ksEnterButtonIconTypeEnum GetEnterButtonIconType ( );
    VARIANT_BOOL ClearSpecToolbar ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyTabs (
        /*[out,retval]*/ struct IPropertyTabs * * Tabs ) = 0;
      virtual HRESULT __stdcall put_SpecToolbar (
        /*[in]*/ enum SpecPropertyToolBarEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SpecToolbar (
        /*[out,retval]*/ enum SpecPropertyToolBarEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoReduce (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoReduce (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DefaultControlFix (
        /*[in]*/ enum DefaultFixTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DefaultControlFix (
        /*[out,retval]*/ enum DefaultFixTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_SpecToolbarEx (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_SpecToolbarEx (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_BmpBeginId (
        /*[in]*/ enum ksBmpSizeEnum Size,
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_BmpBeginId (
        /*[in]*/ enum ksBmpSizeEnum Size,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PropertyManagerLayout * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetGabaritRect (
        /*[out]*/ long * Left,
        /*[out]*/ long * Top,
        /*[out]*/ long * Right,
        /*[out]*/ long * Bottom ) = 0;
      virtual HRESULT __stdcall put_ShowContextMenuOfSnap (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowContextMenuOfSnap (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowContextMenuOfGeomCalculator (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowContextMenuOfGeomCalculator (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowCommandWindow (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowCommandWindow (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddSpecToolbarButton (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT Bmp,
        /*[in]*/ BSTR Tips,
        /*[in]*/ BSTR IconFont,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_PushProcessName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_PopProcessName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableUndoRedo (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableUndoRedo (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddSetupMenuCommand (
        /*[in]*/ BSTR Title,
        /*[in]*/ long Command,
        /*[in]*/ VARIANT_BOOL Checable,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetSetupMenuCommandState (
        /*[in]*/ long Command,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ VARIANT_BOOL Checked,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnterButtonIconType (
        /*[in]*/ enum ksEnterButtonIconTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_EnterButtonIconType (
        /*[out,retval]*/ enum ksEnterButtonIconTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearSpecToolbar (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("34196ec3-58b2-436c-a353-427703740874"))
IPropertyManager : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum PropertyManagerLayout Layout;
    __declspec(property(get=GetPropertyTabs))
    IPropertyTabsPtr PropertyTabs;
    __declspec(property(get=GetSpecToolbar,put=PutSpecToolbar))
    enum SpecPropertyToolBarEnum SpecToolbar;
    __declspec(property(get=GetAutoHideMode,put=PutAutoHideMode))
    VARIANT_BOOL AutoHideMode;
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetSpecToolbarEx,put=PutSpecToolbarEx))
    long SpecToolbarEx;
    __declspec(property(get=GetEnterButtonIconType,put=PutEnterButtonIconType))
    enum ksEnterButtonIconTypeEnum EnterButtonIconType;
    __declspec(property(get=GetStatusMessage,put=PutStatusMessage))
    _bstr_t StatusMessage;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;

    //
    // Wrapper methods for error-handling
    //

    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutCaption (
        _bstr_t PVal );
    _bstr_t GetCaption ( );
    void PutLayout (
        enum PropertyManagerLayout PVal );
    enum PropertyManagerLayout GetLayout ( );
    IPropertyTabsPtr GetPropertyTabs ( );
    HRESULT SetGabaritRect (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT GetGabaritRect (
        long * Left,
        long * Top,
        long * Right,
        long * Bottom );
    VARIANT_BOOL ShowTabs ( );
    VARIANT_BOOL UpdateTabs ( );
    VARIANT_BOOL HideTabs ( );
    void PutSpecToolbar (
        enum SpecPropertyToolBarEnum PVal );
    enum SpecPropertyToolBarEnum GetSpecToolbar ( );
    VARIANT_BOOL RepeatCommand ( );
    void PutAutoHideMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoHideMode ( );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutSpecToolbarEx (
        long PVal );
    long GetSpecToolbarEx ( );
    VARIANT_BOOL AddSpecToolbarButton (
        long BtnID,
        const _variant_t & Bmp,
        _bstr_t Tips,
        _bstr_t IconFont );
    VARIANT_BOOL AddSetupMenuCommand (
        _bstr_t Title,
        long Command,
        VARIANT_BOOL Checable );
    VARIANT_BOOL SetSetupMenuCommandState (
        long Command,
        VARIANT_BOOL Visible,
        VARIANT_BOOL Enable,
        VARIANT_BOOL Checked );
    void PutEnterButtonIconType (
        enum ksEnterButtonIconTypeEnum PVal );
    enum ksEnterButtonIconTypeEnum GetEnterButtonIconType ( );
    void PutStatusMessage (
        _bstr_t PVal );
    _bstr_t GetStatusMessage ( );
    void PutLabel (
        _bstr_t PVal );
    _bstr_t GetLabel ( );
    VARIANT_BOOL ClearSpecToolbar ( );
    VARIANT_BOOL SetIcon (
        long Icon,
        _bstr_t IconFont );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum PropertyManagerLayout PVal ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PropertyManagerLayout * PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyTabs (
        /*[out,retval]*/ struct IPropertyTabs * * Tabs ) = 0;
      virtual HRESULT __stdcall raw_SetGabaritRect (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_GetGabaritRect (
        /*[out]*/ long * Left,
        /*[out]*/ long * Top,
        /*[out]*/ long * Right,
        /*[out]*/ long * Bottom ) = 0;
      virtual HRESULT __stdcall raw_ShowTabs (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateTabs (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_HideTabs (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SpecToolbar (
        /*[in]*/ enum SpecPropertyToolBarEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SpecToolbar (
        /*[out,retval]*/ enum SpecPropertyToolBarEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_RepeatCommand (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoHideMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoHideMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_SpecToolbarEx (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_SpecToolbarEx (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddSpecToolbarButton (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT Bmp,
        /*[in]*/ BSTR Tips,
        /*[in]*/ BSTR IconFont,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddSetupMenuCommand (
        /*[in]*/ BSTR Title,
        /*[in]*/ long Command,
        /*[in]*/ VARIANT_BOOL Checable,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetSetupMenuCommandState (
        /*[in]*/ long Command,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ VARIANT_BOOL Checked,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnterButtonIconType (
        /*[in]*/ enum ksEnterButtonIconTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_EnterButtonIconType (
        /*[out,retval]*/ enum ksEnterButtonIconTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_StatusMessage (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_StatusMessage (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearSpecToolbar (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetIcon (
        /*[in]*/ long Icon,
        /*[in]*/ BSTR IconFont,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("9d6e9ae1-7ddf-4354-b8d0-e12023b186fa"))
ILibrary : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLibraryManagerFolder))
    _bstr_t LibraryManagerFolder;
    __declspec(property(get=GetAttach,put=PutAttach))
    VARIANT_BOOL Attach;
    __declspec(property(get=GetLibraryType))
    enum ksLibraryTypeEnum LibraryType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPathName))
    _bstr_t PathName;
    __declspec(property(get=GetEnable))
    VARIANT_BOOL Enable;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLibraryManagerFolder ( );
    VARIANT_BOOL GetAttach ( );
    void PutAttach (
        VARIANT_BOOL PVal );
    enum ksLibraryTypeEnum GetLibraryType ( );
    _bstr_t GetName ( );
    _bstr_t GetPathName ( );
    VARIANT_BOOL GetEnable ( );
    VARIANT_BOOL Execute (
        long Command,
        IDispatch * External,
        VARIANT_BOOL Post );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LibraryManagerFolder (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Attach (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Attach (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryType (
        /*[out,retval]*/ enum ksLibraryTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_PathName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ long Command,
        /*[in]*/ IDispatch * External,
        /*[in]*/ VARIANT_BOOL Post,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("7bf9df08-d14d-4da9-abc2-fb458e7122d0"))
IProcedure : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetLibraryFolder))
    _bstr_t LibraryFolder;
    __declspec(property(get=GetId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetLibraryFolder ( );
    long GetId ( );
    VARIANT_BOOL Execute (
        IDispatch * External,
        VARIANT_BOOL Post );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryFolder (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ IDispatch * External,
        /*[in]*/ VARIANT_BOOL Post,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("1a77f076-2295-40f9-b1aa-2838c4ca0887"))
IProcedures : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IProcedurePtr Item[];
    __declspec(property(get=GetItemByID))
    IProcedurePtr ItemByID[];

    //
    // Wrapper methods for error-handling
    //

    IProcedurePtr GetItem (
        const _variant_t & Index );
    IProcedurePtr GetItemByID (
        long Id );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IProcedure * * Result ) = 0;
      virtual HRESULT __stdcall get_ItemByID (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IProcedure * * Result ) = 0;
};

struct __declspec(uuid("1aece59e-de4c-4fb9-b62b-7967573ad3b1"))
IProceduresLibrary : ILibrary
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    enum ksLibraryStyleEnum Style;
    __declspec(property(get=GetProcedures))
    IProceduresPtr Procedures;
    __declspec(property(get=GetCurrentCommand))
    long CurrentCommand;
    __declspec(property(get=GetUniqueId))
    long UniqueId;
    __declspec(property(get=GetExecutable))
    VARIANT_BOOL Executable;
    __declspec(property(get=GetAddIns))
    VARIANT_BOOL AddIns;
    __declspec(property(get=GetExternalInterface))
    IDispatchPtr ExternalInterface;
    __declspec(property(get=GetLibraryName))
    _bstr_t LibraryName;
    __declspec(property(get=GetIconsFont))
    _bstr_t IconsFont;

    //
    // Wrapper methods for error-handling
    //

    enum ksLibraryStyleEnum GetStyle ( );
    void PutStyle (
        enum ksLibraryStyleEnum PVal );
    IProceduresPtr GetProcedures ( );
    long GetCurrentCommand ( );
    VARIANT_BOOL SystemControlStop ( );
    enum ksSystemControlStartEnum SystemControlStart (
        _bstr_t menuCommand );
    long GetUniqueId ( );
    VARIANT_BOOL GetExecutable ( );
    VARIANT_BOOL GetAddIns ( );
    IDispatchPtr GetExternalInterface ( );
    _bstr_t GetLibraryName ( );
    _bstr_t GetIconsFont ( );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ksLibraryStyleEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ksLibraryStyleEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Procedures (
        /*[out,retval]*/ struct IProcedures * * PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentCommand (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_SystemControlStop (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SystemControlStart (
        /*[in]*/ BSTR menuCommand,
        /*[out,retval]*/ enum ksSystemControlStartEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_UniqueId (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Executable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ExternalInterface (
        /*[out,retval]*/ IDispatch * * PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_IconsFont (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("80f95b5b-db8a-46b7-8c22-605a0aecd597"))
IProceduresLibraries : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IProceduresLibraryPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IProceduresLibraryPtr GetItem (
        const _variant_t & Index );
    IProceduresLibraryPtr Add (
        _bstr_t PathName,
        _bstr_t LibManagerFolder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IProceduresLibrary * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR PathName,
        /*[in]*/ BSTR LibManagerFolder,
        /*[out,retval]*/ struct IProceduresLibrary * * Result ) = 0;
};

struct __declspec(uuid("0a8b4cd1-7158-4ce6-96e0-885376f5de1b"))
IKompasError : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCode))
    long Code;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetError3D))
    VARIANT_BOOL Error3D;

    //
    // Wrapper methods for error-handling
    //

    long GetCode ( );
    _bstr_t GetDescription ( );
    VARIANT_BOOL GetError3D ( );
    HRESULT Report ( );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Code (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Error3D (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Report ( ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("642d03ab-4798-48a5-b075-3cd9afa18554"))
IConverter : IKompasAPIObject
{
    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr ConverterParameters (
        long Command );
    _bstr_t GetFilter (
        long DocType,
        VARIANT_BOOL SaveAs,
        long * Command );
    long Convert (
        _bstr_t InputFile,
        _bstr_t Outfile,
        long Command,
        VARIANT_BOOL ShowParam );
    VARIANT_BOOL VisualEditConvertParam (
        OLE_HANDLE ParentHwnd,
        long Command );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConverterParameters (
        /*[in]*/ long Command,
        /*[out,retval]*/ IUnknown * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetFilter (
        /*[in]*/ long DocType,
        /*[in]*/ VARIANT_BOOL SaveAs,
        /*[out]*/ long * Command,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ BSTR InputFile,
        /*[in]*/ BSTR Outfile,
        /*[in]*/ long Command,
        /*[in]*/ VARIANT_BOOL ShowParam,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_VisualEditConvertParam (
        /*[in]*/ OLE_HANDLE ParentHwnd,
        /*[in]*/ long Command,
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
};

struct __declspec(uuid("2aa9f713-2328-4e8f-b996-9dfdabc67dc9"))
ICheckSum : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetResult))
    _variant_t Result;
    __declspec(property(get=GetStrResult))
    _bstr_t StrResult;
    __declspec(property(get=GetVersion,put=PutVersion))
    long Version;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Add (
        const _variant_t & Value,
        VARIANT_BOOL Com );
    _variant_t GetResult ( );
    _bstr_t GetStrResult ( );
    VARIANT_BOOL AddInterface (
        IUnknown * Object,
        VARIANT_BOOL Com );
    VARIANT_BOOL AddReference (
        long Object,
        long Doc,
        VARIANT_BOOL Com );
    HRESULT Clear ( );
    long GetVersion ( );
    void PutVersion (
        long PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT_BOOL Com ) = 0;
      virtual HRESULT __stdcall get_Result (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_StrResult (
        /*[out,retval]*/ BSTR * StrVal ) = 0;
      virtual HRESULT __stdcall raw_AddInterface (
        /*[in]*/ IUnknown * Object,
        /*[in]*/ VARIANT_BOOL Com,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_AddReference (
        /*[in]*/ long Object,
        /*[in]*/ long Doc,
        /*[in]*/ VARIANT_BOOL Com,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Version (
        /*[in]*/ long PVal ) = 0;
};

struct __declspec(uuid("be125aba-eab2-4a22-99d7-108c84b6dcc5"))
IProgressBarIndicator : IKompasAPIObject
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Start (
        long MinVal,
        long MaxVal,
        _bstr_t TextVal,
        VARIANT_BOOL ResetVal );
    HRESULT SetProgress (
        long CurrentVal,
        _bstr_t TextVal,
        VARIANT_BOOL ResetVal );
    HRESULT SetText (
        _bstr_t TextVal );
    HRESULT Stop (
        _bstr_t TextVal,
        VARIANT_BOOL ResetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Start (
        /*[in]*/ long MinVal,
        /*[in]*/ long MaxVal,
        /*[in]*/ BSTR TextVal,
        /*[in]*/ VARIANT_BOOL ResetVal ) = 0;
      virtual HRESULT __stdcall raw_SetProgress (
        /*[in]*/ long CurrentVal,
        /*[in]*/ BSTR TextVal,
        /*[in]*/ VARIANT_BOOL ResetVal ) = 0;
      virtual HRESULT __stdcall raw_SetText (
        /*[in]*/ BSTR TextVal ) = 0;
      virtual HRESULT __stdcall raw_Stop (
        /*[in]*/ BSTR TextVal,
        /*[in]*/ VARIANT_BOOL ResetVal ) = 0;
};

struct __declspec(uuid("76d9033d-5f87-41cc-a3e8-55efee94b677"))
ILibArraySettings : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLibraryCount))
    long LibraryCount;

    //
    // Wrapper methods for error-handling
    //

    long GetLibraryCount ( );
    _bstr_t GetLibrary (
        long Index,
        VARIANT_BOOL * Use );
    VARIANT_BOOL SetLibraryUse (
        const _variant_t & Index,
        VARIANT_BOOL Use );
    VARIANT_BOOL GetLibrarys (
        VARIANT * FileNames,
        VARIANT * Uses );
    VARIANT_BOOL AddLibrary (
        _bstr_t FileName,
        VARIANT_BOOL Use );
    VARIANT_BOOL RemoveLibrary (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LibraryCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetLibrary (
        /*[in]*/ long Index,
        /*[out]*/ VARIANT_BOOL * Use,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_SetLibraryUse (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT_BOOL Use,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetLibrarys (
        /*[out]*/ VARIANT * FileNames,
        /*[out]*/ VARIANT * Uses,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddLibrary (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Use,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_RemoveLibrary (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("246741cf-bc91-4e69-aeee-cf905b9c05f7"))
IThreadPattern : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetTableName))
    _bstr_t TableName;
    __declspec(property(get=GetStandart))
    _bstr_t Standart;
    __declspec(property(get=GetConeAngle))
    double ConeAngle;
    __declspec(property(get=GetHoleKoeff))
    double HoleKoeff;
    __declspec(property(get=GetPatternsCount))
    long PatternsCount;
    __declspec(property(get=GetNominalDiameter))
    double NominalDiameter[];
    __declspec(property(get=GetP))
    double P[];
    __declspec(property(get=GetConeL1))
    double ConeL1[];
    __declspec(property(get=GetConeL2))
    double ConeL2[];
    __declspec(property(get=GetLenght))
    double Lenght[];
    __declspec(property(get=GetDesignation))
    _bstr_t Designation[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTableName ( );
    _bstr_t GetStandart ( );
    double GetConeAngle ( );
    double GetHoleKoeff ( );
    long GetPatternsCount ( );
    double GetNominalDiameter (
        long Index );
    double GetP (
        long Index );
    double GetConeL1 (
        long Index );
    double GetConeL2 (
        long Index );
    double GetLenght (
        long Index );
    _bstr_t GetDesignation (
        long Index );
    _variant_t SelectDiameters ( );
    _variant_t SelectP (
        double NominalDiameter );
    _bstr_t GetParameters (
        long Index,
        double * NominalDiameter,
        double * P,
        double * L,
        double * L1,
        double * L2 );
    _bstr_t SelectParameters (
        double NominalDiameter,
        double P,
        double * L,
        double * L1,
        double * L2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TableName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Standart (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_ConeAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_HoleKoeff (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_PatternsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_NominalDiameter (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_P (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ConeL1 (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ConeL2 (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Lenght (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Designation (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_SelectDiameters (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_SelectP (
        /*[in]*/ double NominalDiameter,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_GetParameters (
        /*[in]*/ long Index,
        /*[out]*/ double * NominalDiameter,
        /*[out]*/ double * P,
        /*[out]*/ double * L,
        /*[out]*/ double * L1,
        /*[out]*/ double * L2,
        /*[out,retval]*/ BSTR * Designation ) = 0;
      virtual HRESULT __stdcall raw_SelectParameters (
        /*[in]*/ double NominalDiameter,
        /*[in]*/ double P,
        /*[out]*/ double * L,
        /*[out]*/ double * L1,
        /*[out]*/ double * L2,
        /*[out,retval]*/ BSTR * Designation ) = 0;
};

struct __declspec(uuid("ffb66332-17ff-47eb-ac43-32084f8f6077"))
ISystemSettings : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFilesAutoSaveSwitchOn,put=PutFilesAutoSaveSwitchOn))
    VARIANT_BOOL FilesAutoSaveSwitchOn;
    __declspec(property(get=GetFilesBackupPrevCopySwitchOn,put=PutFilesBackupPrevCopySwitchOn))
    VARIANT_BOOL FilesBackupPrevCopySwitchOn;
    __declspec(property(get=GetModelLocalCSCreateInAbsoluteCS,put=PutModelLocalCSCreateInAbsoluteCS))
    VARIANT_BOOL ModelLocalCSCreateInAbsoluteCS;
    __declspec(property(get=GetModelLocalCSSetActive,put=PutModelLocalCSSetActive))
    VARIANT_BOOL ModelLocalCSSetActive;
    __declspec(property(get=GetModelSmoothMotion,put=PutModelSmoothMotion))
    VARIANT_BOOL ModelSmoothMotion;
    __declspec(property(get=GetReportStyleListSettings))
    ILibArraySettingsPtr ReportStyleListSettings;
    __declspec(property(get=GetObjectsFilter3D,put=PutObjectsFilter3D))
    VARIANT_BOOL ObjectsFilter3D[];
    __declspec(property(get=GetNewDocumentSettings))
    IKompasAPIObjectPtr NewDocumentSettings[];
    __declspec(property(get=GetEnablesAddSystemDelimersInMarking,put=PutEnablesAddSystemDelimersInMarking))
    VARIANT_BOOL EnablesAddSystemDelimersInMarking;
    __declspec(property(get=GetStandardsThreadsListSettings))
    ILibArraySettingsPtr StandardsThreadsListSettings;
    __declspec(property(get=GetModelEditColor,put=PutModelEditColor))
    long ModelEditColor[];
    __declspec(property(get=GetModelFillChooseFace,put=PutModelFillChooseFace))
    VARIANT_BOOL ModelFillChooseFace;
    __declspec(property(get=GetModelInverseInDynamicSelect,put=PutModelInverseInDynamicSelect))
    VARIANT_BOOL ModelInverseInDynamicSelect;
    __declspec(property(get=GetModelUsePartColorForEdit,put=PutModelUsePartColorForEdit))
    VARIANT_BOOL ModelUsePartColorForEdit;
    __declspec(property(get=GetModelUseOpenGLSearch,put=PutModelUseOpenGLSearch))
    VARIANT_BOOL ModelUseOpenGLSearch;
    __declspec(property(get=GetThreadPattern))
    IThreadPatternPtr ThreadPattern[];
    __declspec(property(get=GetLanguage))
    _bstr_t Language;
    __declspec(property(get=GetAssociationViewRebuildParallel,put=PutAssociationViewRebuildParallel))
    VARIANT_BOOL AssociationViewRebuildParallel;
    __declspec(property(get=GetAssociationViewRebuildParallelLowPriority,put=PutAssociationViewRebuildParallelLowPriority))
    VARIANT_BOOL AssociationViewRebuildParallelLowPriority;
    __declspec(property(get=GetAssociationViewAutoSaveBeforeRebuild,put=PutAssociationViewAutoSaveBeforeRebuild))
    VARIANT_BOOL AssociationViewAutoSaveBeforeRebuild;
    __declspec(property(get=GetTheme))
    enum ksThemeEnum Theme;
    __declspec(property(get=GetUseHardwareAcceleration))
    VARIANT_BOOL UseHardwareAcceleration;
    __declspec(property(get=GetModelRenderType,put=PutModelRenderType))
    enum ksModelRenderTypeEnum ModelRenderType;
    __declspec(property(get=GetModelStepMoveDetail,put=PutModelStepMoveDetail))
    double ModelStepMoveDetail;
    __declspec(property(get=GetModelStepRotateDetail,put=PutModelStepRotateDetail))
    double ModelStepRotateDetail;
    __declspec(property(get=GetModelScaleFactor,put=PutModelScaleFactor))
    double ModelScaleFactor;
    __declspec(property(get=GetModelPerformanceLevel,put=PutModelPerformanceLevel))
    enum ksModelPerformanceLevelEnum ModelPerformanceLevel;
    __declspec(property(get=GetModelTransparencyType,put=PutModelTransparencyType))
    enum ksModelTransparencyTypeEnum ModelTransparencyType;
    __declspec(property(get=GetEnableAddFilesToRecentList,put=PutEnableAddFilesToRecentList))
    VARIANT_BOOL EnableAddFilesToRecentList;
    __declspec(property(get=GetJtAutoSaveSwitchOn,put=PutJtAutoSaveSwitchOn))
    VARIANT_BOOL JtAutoSaveSwitchOn;

    //
    // Wrapper methods for error-handling
    //

    void PutFilesAutoSaveSwitchOn (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFilesAutoSaveSwitchOn ( );
    void PutFilesBackupPrevCopySwitchOn (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFilesBackupPrevCopySwitchOn ( );
    void PutModelLocalCSCreateInAbsoluteCS (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetModelLocalCSCreateInAbsoluteCS ( );
    void PutModelLocalCSSetActive (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetModelLocalCSSetActive ( );
    void PutModelSmoothMotion (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetModelSmoothMotion ( );
    ILibArraySettingsPtr GetReportStyleListSettings ( );
    void PutObjectsFilter3D (
        enum ksObjectsFilter3DEnum Type,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetObjectsFilter3D (
        enum ksObjectsFilter3DEnum Type );
    IKompasAPIObjectPtr GetNewDocumentSettings (
        enum ksNewDocumentSettingsTypeEnum SettingsType );
    void PutEnablesAddSystemDelimersInMarking (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnablesAddSystemDelimersInMarking ( );
    ILibArraySettingsPtr GetStandardsThreadsListSettings ( );
    void PutModelEditColor (
        enum ksEditColorTypeEnum ColorType,
        long PVal );
    long GetModelEditColor (
        enum ksEditColorTypeEnum ColorType );
    void PutModelFillChooseFace (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetModelFillChooseFace ( );
    void PutModelInverseInDynamicSelect (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetModelInverseInDynamicSelect ( );
    void PutModelUsePartColorForEdit (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetModelUsePartColorForEdit ( );
    void PutModelUseOpenGLSearch (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetModelUseOpenGLSearch ( );
    IThreadPatternPtr GetThreadPattern (
        _bstr_t ThreadTableName );
    _bstr_t GetLanguage ( );
    void PutAssociationViewRebuildParallel (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAssociationViewRebuildParallel ( );
    void PutAssociationViewRebuildParallelLowPriority (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAssociationViewRebuildParallelLowPriority ( );
    void PutAssociationViewAutoSaveBeforeRebuild (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAssociationViewAutoSaveBeforeRebuild ( );
    enum ksThemeEnum GetTheme ( );
    VARIANT_BOOL GetUseHardwareAcceleration ( );
    enum ksModelRenderTypeEnum GetModelRenderType ( );
    void PutModelRenderType (
        enum ksModelRenderTypeEnum PVal );
    double GetModelStepMoveDetail ( );
    void PutModelStepMoveDetail (
        double PVal );
    double GetModelStepRotateDetail ( );
    void PutModelStepRotateDetail (
        double PVal );
    double GetModelScaleFactor ( );
    void PutModelScaleFactor (
        double PVal );
    enum ksModelPerformanceLevelEnum GetModelPerformanceLevel ( );
    void PutModelPerformanceLevel (
        enum ksModelPerformanceLevelEnum PVal );
    enum ksModelTransparencyTypeEnum GetModelTransparencyType ( );
    void PutModelTransparencyType (
        enum ksModelTransparencyTypeEnum PVal );
    void PutEnableAddFilesToRecentList (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableAddFilesToRecentList ( );
    void PutJtAutoSaveSwitchOn (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetJtAutoSaveSwitchOn ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_FilesAutoSaveSwitchOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FilesAutoSaveSwitchOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FilesBackupPrevCopySwitchOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FilesBackupPrevCopySwitchOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelLocalCSCreateInAbsoluteCS (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ModelLocalCSCreateInAbsoluteCS (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelLocalCSSetActive (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ModelLocalCSSetActive (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelSmoothMotion (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ModelSmoothMotion (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ReportStyleListSettings (
        /*[out,retval]*/ struct ILibArraySettings * * PVal ) = 0;
      virtual HRESULT __stdcall put_ObjectsFilter3D (
        /*[in]*/ enum ksObjectsFilter3DEnum Type,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectsFilter3D (
        /*[in]*/ enum ksObjectsFilter3DEnum Type,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_NewDocumentSettings (
        /*[in]*/ enum ksNewDocumentSettingsTypeEnum SettingsType,
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_EnablesAddSystemDelimersInMarking (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnablesAddSystemDelimersInMarking (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_StandardsThreadsListSettings (
        /*[out,retval]*/ struct ILibArraySettings * * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelEditColor (
        /*[in]*/ enum ksEditColorTypeEnum ColorType,
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_ModelEditColor (
        /*[in]*/ enum ksEditColorTypeEnum ColorType,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelFillChooseFace (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ModelFillChooseFace (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelInverseInDynamicSelect (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ModelInverseInDynamicSelect (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelUsePartColorForEdit (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ModelUsePartColorForEdit (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelUseOpenGLSearch (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ModelUseOpenGLSearch (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ThreadPattern (
        /*[in]*/ BSTR ThreadTableName,
        /*[out,retval]*/ struct IThreadPattern * * Param ) = 0;
      virtual HRESULT __stdcall get_Language (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationViewRebuildParallel (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationViewRebuildParallel (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationViewRebuildParallelLowPriority (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationViewRebuildParallelLowPriority (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationViewAutoSaveBeforeRebuild (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationViewAutoSaveBeforeRebuild (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Theme (
        /*[out,retval]*/ enum ksThemeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_UseHardwareAcceleration (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ModelRenderType (
        /*[out,retval]*/ enum ksModelRenderTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelRenderType (
        /*[in]*/ enum ksModelRenderTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ModelStepMoveDetail (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelStepMoveDetail (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ModelStepRotateDetail (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelStepRotateDetail (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ModelScaleFactor (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelScaleFactor (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ModelPerformanceLevel (
        /*[out,retval]*/ enum ksModelPerformanceLevelEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelPerformanceLevel (
        /*[in]*/ enum ksModelPerformanceLevelEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ModelTransparencyType (
        /*[out,retval]*/ enum ksModelTransparencyTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ModelTransparencyType (
        /*[in]*/ enum ksModelTransparencyTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall put_EnableAddFilesToRecentList (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableAddFilesToRecentList (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_JtAutoSaveSwitchOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_JtAutoSaveSwitchOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("65c82884-c41b-47a1-8c07-e8820d6718ea"))
ICurve2D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetParamMin))
    double ParamMin;
    __declspec(property(get=GetParamMax))
    double ParamMax;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;
    __declspec(property(get=GetIsSelfIntersect))
    VARIANT_BOOL IsSelfIntersect;

    //
    // Wrapper methods for error-handling
    //

    _variant_t Intersect (
        struct ICurve2D * Curve2 );
    VARIANT_BOOL Tangent (
        struct ICurve2D * Curve2,
        VARIANT * Curve1Points,
        VARIANT * Curve2Points );
    _variant_t TangentLinePoint (
        double X,
        double Y );
    _variant_t CouplingCurvCurv (
        struct ICurve2D * Curve2,
        double Radius );
    VARIANT_BOOL PointProjection (
        double X,
        double Y,
        double * Kx,
        double * Ky,
        double * T,
        double * Angle );
    _variant_t CalculatePolygonByStep (
        double Step );
    VARIANT_BOOL MovePoint (
        double * X,
        double * Y,
        double Lenght,
        VARIANT_BOOL Direction );
    double GetLength ( );
    double GetDistancePointPoint (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    double GetDistanceToPoint (
        double X,
        double Y );
    VARIANT_BOOL PointOn (
        double T,
        double * X,
        double * Y );
    double GetMetricLength (
        double T1,
        double T2 );
    double GetParamMin ( );
    double GetParamMax ( );
    VARIANT_BOOL GetIsClosed ( );
    VARIANT_BOOL GetNurbsParams (
        VARIANT_BOOL Closed,
        VARIANT * Points,
        VARIANT * Weights,
        VARIANT * Knots,
        double * TMin,
        double * TMax );
    VARIANT_BOOL GetIsSelfIntersect ( );
    enum ksPointLocationTypeEnum GetPointLocation (
        double X,
        double Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct ICurve2D * Curve2,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_Tangent (
        /*[in]*/ struct ICurve2D * Curve2,
        /*[out]*/ VARIANT * Curve1Points,
        /*[out]*/ VARIANT * Curve2Points,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_TangentLinePoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_CouplingCurvCurv (
        /*[in]*/ struct ICurve2D * Curve2,
        /*[in]*/ double Radius,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_PointProjection (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out]*/ double * Kx,
        /*[out]*/ double * Ky,
        /*[out]*/ double * T,
        /*[out]*/ double * Angle,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_CalculatePolygonByStep (
        /*[in]*/ double Step,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_MovePoint (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[in]*/ double Lenght,
        /*[in]*/ VARIANT_BOOL Direction,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDistancePointPoint (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDistanceToPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_PointOn (
        /*[in]*/ double T,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetMetricLength (
        /*[in]*/ double T1,
        /*[in]*/ double T2,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_ParamMin (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_ParamMax (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_IsClosed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetNurbsParams (
        /*[in]*/ VARIANT_BOOL Closed,
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Weights,
        /*[out]*/ VARIANT * Knots,
        /*[out]*/ double * TMin,
        /*[out]*/ double * TMax,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_IsSelfIntersect (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPointLocation (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ enum ksPointLocationTypeEnum * Result ) = 0;
};

struct __declspec(uuid("0409ec8f-88f7-4242-81e7-965abeae932c"))
IMath2D : IKompasAPIObject
{
    //
    // Wrapper methods for error-handling
    //

    ICurve2DPtr Line (
        double X,
        double Y,
        double Angle );
    ICurve2DPtr LineSeg (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    ICurve2DPtr Arc (
        double Xc,
        double Yc,
        double Radius,
        double Angle1,
        double Angle2,
        VARIANT_BOOL Direction );
    ICurve2DPtr Circle (
        double Xc,
        double Yc,
        double Radius );
    ICurve2DPtr PolyLine (
        const _variant_t & Points,
        VARIANT_BOOL Closed );
    ICurve2DPtr Ellipse (
        double Xc,
        double Yc,
        double A,
        double B,
        double Angle );
    ICurve2DPtr EllipseArc (
        double Xc,
        double Yc,
        double A,
        double B,
        double Angle,
        double Angle1,
        double Angle2,
        VARIANT_BOOL Direction );
    ICurve2DPtr Bezier (
        VARIANT_BOOL Closed,
        VARIANT_BOOL AllPoints,
        const _variant_t & Points );
    ICurve2DPtr Nurbs (
        VARIANT_BOOL Closed,
        long Degree,
        const _variant_t & Points,
        const _variant_t & Weights,
        const _variant_t & Knots );
    VARIANT_BOOL Symmetry (
        double * X,
        double * Y,
        struct ICurve2D * Curve );
    VARIANT_BOOL Rotate (
        double * X,
        double * Y,
        double Xc,
        double Yc,
        double Angle );
    VARIANT_BOOL MovePoint (
        double * X,
        double * Y,
        double Angle,
        double Len );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Line (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Angle,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_LineSeg (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_Arc (
        /*[in]*/ double Xc,
        /*[in]*/ double Yc,
        /*[in]*/ double Radius,
        /*[in]*/ double Angle1,
        /*[in]*/ double Angle2,
        /*[in]*/ VARIANT_BOOL Direction,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_Circle (
        /*[in]*/ double Xc,
        /*[in]*/ double Yc,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_PolyLine (
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_Ellipse (
        /*[in]*/ double Xc,
        /*[in]*/ double Yc,
        /*[in]*/ double A,
        /*[in]*/ double B,
        /*[in]*/ double Angle,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_EllipseArc (
        /*[in]*/ double Xc,
        /*[in]*/ double Yc,
        /*[in]*/ double A,
        /*[in]*/ double B,
        /*[in]*/ double Angle,
        /*[in]*/ double Angle1,
        /*[in]*/ double Angle2,
        /*[in]*/ VARIANT_BOOL Direction,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_Bezier (
        /*[in]*/ VARIANT_BOOL Closed,
        /*[in]*/ VARIANT_BOOL AllPoints,
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_Nurbs (
        /*[in]*/ VARIANT_BOOL Closed,
        /*[in]*/ long Degree,
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Weights,
        /*[in]*/ VARIANT Knots,
        /*[out,retval]*/ struct ICurve2D * * PRes ) = 0;
      virtual HRESULT __stdcall raw_Symmetry (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[in]*/ struct ICurve2D * Curve,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[in]*/ double Xc,
        /*[in]*/ double Yc,
        /*[in]*/ double Angle,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_MovePoint (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[in]*/ double Angle,
        /*[in]*/ double Len,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("0ec985bc-81fc-498e-bf15-03ddc870aa33"))
IPrintJob_Sheet : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDocumentName))
    _bstr_t DocumentName;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum ksAngleEnum Orientation;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetClipFlag,put=PutClipFlag))
    VARIANT_BOOL ClipFlag;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDocumentName ( );
    long GetNumber ( );
    VARIANT_BOOL GetGabarites (
        double * Width,
        double * Height );
    enum ksAngleEnum GetOrientation ( );
    void PutOrientation (
        enum ksAngleEnum Value );
    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutScale (
        double PVal );
    double GetScale ( );
    VARIANT_BOOL GetClipFlag ( );
    void PutClipFlag (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetClipFrameGabarites (
        double * Left,
        double * Bottom,
        double * Right,
        double * Top );
    VARIANT_BOOL SetClipFrameGabarites (
        double Left,
        double Bottom,
        double Right,
        double Top );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DocumentName (
        /*[out,retval]*/ BSTR * DocumentName ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * Number ) = 0;
      virtual HRESULT __stdcall raw_GetGabarites (
        /*[out]*/ double * Width,
        /*[out]*/ double * Height,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum ksAngleEnum * Value ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum ksAngleEnum Value ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ClipFlag (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_ClipFlag (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall raw_GetClipFrameGabarites (
        /*[out]*/ double * Left,
        /*[out]*/ double * Bottom,
        /*[out]*/ double * Right,
        /*[out]*/ double * Top,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetClipFrameGabarites (
        /*[in]*/ double Left,
        /*[in]*/ double Bottom,
        /*[in]*/ double Right,
        /*[in]*/ double Top,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("9d86880b-c004-475d-8221-b786fd5a228b"))
IPrintJob : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetsCount))
    long SheetsCount;
    __declspec(property(get=GetSheet))
    IPrintJob_SheetPtr Sheet[];
    __declspec(property(get=GetPagesCount))
    long PagesCount;
    __declspec(property(get=GetPagePrintableFlag,put=PutPagePrintableFlag))
    VARIANT_BOOL PagePrintableFlag[][];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Clear ( );
    VARIANT_BOOL ShowPreviewWindow ( );
    VARIANT_BOOL Load (
        _bstr_t FileName,
        VARIANT * Errors );
    VARIANT_BOOL Save (
        _bstr_t FileName );
    VARIANT_BOOL Execute (
        _bstr_t OutputFileName );
    VARIANT_BOOL AddSheets (
        _bstr_t FileName,
        const _variant_t & Sheets,
        enum ksSheetsRangeEnum Range );
    long GetSheetsCount ( );
    IPrintJob_SheetPtr GetSheet (
        long Index );
    VARIANT_BOOL RemoveSheets (
        const _variant_t & Index );
    long GetPagesCount ( );
    VARIANT_BOOL GetPageGabarites (
        double * Width,
        double * Height );
    VARIANT_BOOL GetPagesMapGabarites (
        long * WPageCount,
        long * HPageCount );
    VARIANT_BOOL GetPagePrintableFlag (
        long WPage,
        long HPage );
    void PutPagePrintableFlag (
        long WPage,
        long HPage,
        VARIANT_BOOL Result );
    VARIANT_BOOL SpecialExecute (
        _bstr_t OutputFileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ShowPreviewWindow (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out]*/ VARIANT * Errors,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ BSTR OutputFileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddSheets (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT Sheets,
        /*[in]*/ enum ksSheetsRangeEnum Range,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SheetsCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Sheet (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IPrintJob_Sheet * * Sheet ) = 0;
      virtual HRESULT __stdcall raw_RemoveSheets (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_PagesCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetPageGabarites (
        /*[out]*/ double * Width,
        /*[out]*/ double * Height,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPagesMapGabarites (
        /*[out]*/ long * WPageCount,
        /*[out]*/ long * HPageCount,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_PagePrintableFlag (
        /*[in]*/ long WPage,
        /*[in]*/ long HPage,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_PagePrintableFlag (
        /*[in]*/ long WPage,
        /*[in]*/ long HPage,
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall raw_SpecialExecute (
        /*[in]*/ BSTR OutputFileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("8dfd15e0-345e-4b1c-86a1-bd65f87128b5"))
IStyle : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApiStyleId))
    long ApiStyleId;
    __declspec(property(get=GetDisplayStyleId,put=PutDisplayStyleId))
    long DisplayStyleId;
    __declspec(property(get=GetIsExternalStyle))
    VARIANT_BOOL IsExternalStyle;
    __declspec(property(get=GetLibraryPath))
    _bstr_t LibraryPath;
    __declspec(property(get=GetLibraryStyleId))
    long LibraryStyleId;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    long GetApiStyleId ( );
    long GetDisplayStyleId ( );
    void PutDisplayStyleId (
        long PVal );
    VARIANT_BOOL GetIsExternalStyle ( );
    _bstr_t GetLibraryPath ( );
    long GetLibraryStyleId ( );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_ApiStyleId (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStyleId (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_DisplayStyleId (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_IsExternalStyle (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryPath (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryStyleId (
        /*[out,retval]*/ long * NewVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e821ae61-fa05-4b39-8908-bd37d6d044a4"))
IStyles : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IStylePtr Item[];
    __declspec(property(get=GetStyleByApiId))
    IStylePtr StyleByApiId[];

    //
    // Wrapper methods for error-handling
    //

    IStylePtr GetItem (
        const _variant_t & Index );
    IStylePtr GetStyleByApiId (
        long Id );
    IStylePtr Add ( );
    IStylePtr Copy (
        struct IStyle * Style );
    IStylePtr AddStyleFromLibrary (
        _bstr_t LibraryPath,
        long Id,
        VARIANT_BOOL External );
    IStylePtr FindStyleFromLibrary (
        _bstr_t LibraryPath,
        long LibraryStyleId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IStyle * * Result ) = 0;
      virtual HRESULT __stdcall get_StyleByApiId (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IStyle * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IStyle * * Result ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IStyle * Style,
        /*[out,retval]*/ struct IStyle * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddStyleFromLibrary (
        /*[in]*/ BSTR LibraryPath,
        /*[in]*/ long Id,
        /*[in]*/ VARIANT_BOOL External,
        /*[out,retval]*/ struct IStyle * * Result ) = 0;
      virtual HRESULT __stdcall raw_FindStyleFromLibrary (
        /*[in]*/ BSTR LibraryPath,
        /*[in]*/ long LibraryStyleId,
        /*[out,retval]*/ struct IStyle * * Result ) = 0;
};

struct __declspec(uuid("07ef021f-11c1-4015-8d87-4dc94a2a71b0"))
IDrawingObject : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawingObjectType))
    enum DrawingObjectTypeEnum DrawingObjectType;
    __declspec(property(get=GetLayerNumber,put=PutLayerNumber))
    long LayerNumber;
    __declspec(property(get=GetTemp))
    VARIANT_BOOL Temp;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetDrawingObjectParamType,put=PutDrawingObjectParamType))
    enum ksDrawingObjectParamTypeEnum DrawingObjectParamType;

    //
    // Wrapper methods for error-handling
    //

    enum DrawingObjectTypeEnum GetDrawingObjectType ( );
    long GetLayerNumber ( );
    void PutLayerNumber (
        long PVal );
    VARIANT_BOOL GetTemp ( );
    VARIANT_BOOL GetValid ( );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );
    enum ksDrawingObjectParamTypeEnum GetDrawingObjectParamType ( );
    void PutDrawingObjectParamType (
        enum ksDrawingObjectParamTypeEnum PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawingObjectType (
        /*[out,retval]*/ enum DrawingObjectTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall get_LayerNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_LayerNumber (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Temp (
        /*[out,retval]*/ VARIANT_BOOL * Type ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Type ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_DrawingObjectParamType (
        /*[out,retval]*/ enum ksDrawingObjectParamTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DrawingObjectParamType (
        /*[in]*/ enum ksDrawingObjectParamTypeEnum PVal ) = 0;
};

struct __declspec(uuid("3dd7f97b-59cb-4297-a1ba-04e5a7fff448"))
IDrawingObjects : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDrawingObjectPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IDrawingObjectPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
};

struct __declspec(uuid("9ad76c38-cc48-4901-aee5-27b48f51563c"))
ILayer : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBackground,put=PutBackground))
    VARIANT_BOOL Background;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCurrent,put=PutCurrent))
    VARIANT_BOOL Current;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetObjectCount))
    long ObjectCount;
    __declspec(property(get=GetPrintable,put=PutPrintable))
    VARIANT_BOOL Printable;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    void PutBackground (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBackground ( );
    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutCurrent (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCurrent ( );
    void PutColor (
        long PVal );
    long GetColor ( );
    void PutComment (
        _bstr_t PVal );
    _bstr_t GetComment ( );
    long GetObjectCount ( );
    void PutPrintable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPrintable ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Background (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Printable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Printable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("f6dc2898-d596-4418-a21a-d15ae07b9a40"))
ILayers : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLayer))
    ILayerPtr Layer[];
    __declspec(property(get=GetLayerByNumber))
    ILayerPtr LayerByNumber[];

    //
    // Wrapper methods for error-handling
    //

    ILayerPtr GetLayer (
        const _variant_t & Index );
    ILayerPtr GetLayerByNumber (
        long Number );
    ILayerPtr Add ( );
    VARIANT_BOOL Attach (
        struct ILayer * PVal );
    VARIANT_BOOL Detach (
        struct ILayer * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Layer (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILayer * * Result ) = 0;
      virtual HRESULT __stdcall get_LayerByNumber (
        /*[in]*/ long Number,
        /*[out,retval]*/ struct ILayer * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILayer * * Result ) = 0;
      virtual HRESULT __stdcall raw_Attach (
        /*[in]*/ struct ILayer * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Detach (
        /*[in]*/ struct ILayer * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("8bab52d9-8ef6-43a6-a1b8-af42d5961a94"))
IVariable7 : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNote,put=PutNote))
    _bstr_t Note;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetExternal,put=PutExternal))
    VARIANT_BOOL External;
    __declspec(property(get=GetInformation,put=PutInformation))
    VARIANT_BOOL Information;
    __declspec(property(get=GetExpression,put=PutExpression))
    _bstr_t Expression;
    __declspec(property(get=GetParameterNote))
    _bstr_t ParameterNote;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetLinkVariableName))
    _bstr_t LinkVariableName;
    __declspec(property(get=GetLinkDocumentName))
    _bstr_t LinkDocumentName;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetTolerance,put=PutTolerance))
    _bstr_t Tolerance;
    __declspec(property(get=GetHighDeviation,put=PutHighDeviation))
    double HighDeviation;
    __declspec(property(get=GetLowDeviation,put=PutLowDeviation))
    double LowDeviation;
    __declspec(property(get=GetHasTolerance,put=PutHasTolerance))
    VARIANT_BOOL HasTolerance;
    __declspec(property(get=GetRectangle,put=PutRectangle))
    VARIANT_BOOL Rectangle;
    __declspec(property(get=GetProperty))
    IPropertyPtr Property;
    __declspec(property(get=GetToleranceOn,put=PutToleranceOn))
    VARIANT_BOOL ToleranceOn;
    __declspec(property(get=GetDeviationOn,put=PutDeviationOn))
    VARIANT_BOOL DeviationOn;
    __declspec(property(get=GetDeviationType,put=PutDeviationType))
    enum ksDimensionDeviationEnum DeviationType;
    __declspec(property(get=GetIsCreatedDeviationVariables))
    VARIANT_BOOL IsCreatedDeviationVariables;
    __declspec(property(get=GetDeviationExpression,put=PutDeviationExpression))
    _bstr_t DeviationExpression[];
    __declspec(property(get=GetLinkEmbodimentIndex))
    long LinkEmbodimentIndex;
    __declspec(property(get=GetVariableID))
    long VariableID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutNote (
        _bstr_t PVal );
    _bstr_t GetNote ( );
    void PutValue (
        double PVal );
    double GetValue ( );
    void PutExternal (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetExternal ( );
    void PutInformation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInformation ( );
    void PutExpression (
        _bstr_t PVal );
    _bstr_t GetExpression ( );
    _bstr_t GetParameterNote ( );
    _bstr_t GetDisplayName ( );
    _bstr_t GetLinkVariableName ( );
    _bstr_t GetLinkDocumentName ( );
    VARIANT_BOOL SetLink (
        _bstr_t DocumentName,
        _bstr_t VariableName );
    VARIANT_BOOL Delete ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    _bstr_t GetTolerance ( );
    void PutTolerance (
        _bstr_t PVal );
    double GetHighDeviation ( );
    void PutHighDeviation (
        double PVal );
    double GetLowDeviation ( );
    void PutLowDeviation (
        double PVal );
    VARIANT_BOOL GetHasTolerance ( );
    void PutHasTolerance (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetRectangle ( );
    void PutRectangle (
        VARIANT_BOOL Result );
    IPropertyPtr GetProperty ( );
    IPropertyPtr AddProperty ( );
    VARIANT_BOOL GetToleranceOn ( );
    void PutToleranceOn (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetDeviationOn ( );
    void PutDeviationOn (
        VARIANT_BOOL Result );
    enum ksDimensionDeviationEnum GetDeviationType ( );
    void PutDeviationType (
        enum ksDimensionDeviationEnum Result );
    VARIANT_BOOL GetIsCreatedDeviationVariables ( );
    VARIANT_BOOL CreateDeviationVariables ( );
    _bstr_t GetDeviationExpression (
        VARIANT_BOOL HighDeviation );
    void PutDeviationExpression (
        VARIANT_BOOL HighDeviation,
        _bstr_t Result );
    VARIANT_BOOL SetLinkEmbodiment (
        _bstr_t DocumentName,
        _bstr_t VariableName,
        const _variant_t & Index );
    long GetLinkEmbodimentIndex ( );
    _bstr_t GetLinkEmbodimentMarking (
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL AddSystemDelimer );
    long GetVariableID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Note (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Note (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_External (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_External (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Information (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Information (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_ParameterNote (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_LinkVariableName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_LinkDocumentName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetLink (
        /*[in]*/ BSTR DocumentName,
        /*[in]*/ BSTR VariableName,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Tolerance (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Tolerance (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_HighDeviation (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_HighDeviation (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_LowDeviation (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_LowDeviation (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_HasTolerance (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_HasTolerance (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Rectangle (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Rectangle (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Property (
        /*[out,retval]*/ struct IProperty * * Property ) = 0;
      virtual HRESULT __stdcall raw_AddProperty (
        /*[out,retval]*/ struct IProperty * * Property ) = 0;
      virtual HRESULT __stdcall get_ToleranceOn (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ToleranceOn (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_DeviationOn (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_DeviationOn (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_DeviationType (
        /*[out,retval]*/ enum ksDimensionDeviationEnum * Result ) = 0;
      virtual HRESULT __stdcall put_DeviationType (
        /*[in]*/ enum ksDimensionDeviationEnum Result ) = 0;
      virtual HRESULT __stdcall get_IsCreatedDeviationVariables (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_CreateDeviationVariables (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_DeviationExpression (
        /*[in]*/ VARIANT_BOOL HighDeviation,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_DeviationExpression (
        /*[in]*/ VARIANT_BOOL HighDeviation,
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall raw_SetLinkEmbodiment (
        /*[in]*/ BSTR DocumentName,
        /*[in]*/ BSTR VariableName,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_LinkEmbodimentIndex (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_GetLinkEmbodimentMarking (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL AddSystemDelimer,
        /*[out,retval]*/ BSTR * Marking ) = 0;
      virtual HRESULT __stdcall get_VariableID (
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("21a7ba87-1c8b-41b4-8247-cdd593546f37"))
IView : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetNumber,put=PutNumber))
    long Number;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBackground,put=PutBackground))
    VARIANT_BOOL Background;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCurrent,put=PutCurrent))
    VARIANT_BOOL Current;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetObjectCount))
    long ObjectCount;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetViewType))
    enum LtViewType ViewType;
    __declspec(property(get=GetLayers))
    ILayersPtr Layers;
    __declspec(property(get=GetVariables))
    _variant_t Variables;
    __declspec(property(get=GetVariable))
    IVariable7Ptr Variable[];
    __declspec(property(get=GetVariablesCount))
    long VariablesCount;

    //
    // Wrapper methods for error-handling
    //

    void PutNumber (
        long PVal );
    long GetNumber ( );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    void PutBackground (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBackground ( );
    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutCurrent (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCurrent ( );
    void PutColor (
        long PVal );
    long GetColor ( );
    void PutComment (
        _bstr_t PVal );
    _bstr_t GetComment ( );
    long GetObjectCount ( );
    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutScale (
        double PVal );
    double GetScale ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    enum LtViewType GetViewType ( );
    ILayersPtr GetLayers ( );
    _variant_t GetVariables ( );
    IVariable7Ptr GetVariable (
        const _variant_t & Index );
    long GetVariablesCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Number (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Background (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ enum LtViewType * PVal ) = 0;
      virtual HRESULT __stdcall get_Layers (
        /*[out,retval]*/ struct ILayers * * PVal ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Variable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_VariablesCount (
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("9cd1b5e6-c1a2-4910-8d0c-97080b14aa3d"))
IViews : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetView))
    IViewPtr View[];
    __declspec(property(get=GetViewByNumber))
    IViewPtr ViewByNumber[];
    __declspec(property(get=GetActiveView))
    IViewPtr ActiveView;

    //
    // Wrapper methods for error-handling
    //

    IViewPtr GetView (
        const _variant_t & Index );
    IViewPtr GetViewByNumber (
        long Numb );
    IViewPtr Add (
        enum LtViewType ViewType );
    IViewPtr GetActiveView ( );
    VARIANT_BOOL AddStandartViews (
        _bstr_t FileName,
        _bstr_t ProjectionName,
        const _variant_t & ProjectionsTypes,
        double X,
        double Y,
        double Scale,
        double DX,
        double DY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_View (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IView * * Result ) = 0;
      virtual HRESULT __stdcall get_ViewByNumber (
        /*[in]*/ long Numb,
        /*[out,retval]*/ struct IView * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum LtViewType ViewType,
        /*[out,retval]*/ struct IView * * Result ) = 0;
      virtual HRESULT __stdcall get_ActiveView (
        /*[out,retval]*/ struct IView * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddStandartViews (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR ProjectionName,
        /*[in]*/ VARIANT ProjectionsTypes,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Scale,
        /*[in]*/ double DX,
        /*[in]*/ double DY,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("d743bc12-82a9-4e8f-85b2-7154a356acc0"))
ILayerFilterCondition : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetNumber,put=PutNumber))
    _bstr_t Number;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBackground,put=PutBackground))
    enum FilterConditionStateEnum Background;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum FilterConditionStateEnum Visible;
    __declspec(property(get=GetHaveObjects,put=PutHaveObjects))
    enum FilterConditionStateEnum HaveObjects;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetProjected,put=PutProjected))
    enum FilterConditionStateEnum Projected;

    //
    // Wrapper methods for error-handling
    //

    void PutNumber (
        _bstr_t PVal );
    _bstr_t GetNumber ( );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    void PutBackground (
        enum FilterConditionStateEnum PVal );
    enum FilterConditionStateEnum GetBackground ( );
    void PutVisible (
        enum FilterConditionStateEnum PVal );
    enum FilterConditionStateEnum GetVisible ( );
    void PutHaveObjects (
        enum FilterConditionStateEnum PVal );
    enum FilterConditionStateEnum GetHaveObjects ( );
    void PutColor (
        long PVal );
    long GetColor ( );
    void PutComment (
        _bstr_t PVal );
    _bstr_t GetComment ( );
    void PutProjected (
        enum FilterConditionStateEnum PVal );
    enum FilterConditionStateEnum GetProjected ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Number (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Background (
        /*[in]*/ enum FilterConditionStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ enum FilterConditionStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum FilterConditionStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum FilterConditionStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_HaveObjects (
        /*[in]*/ enum FilterConditionStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HaveObjects (
        /*[out,retval]*/ enum FilterConditionStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Projected (
        /*[in]*/ enum FilterConditionStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Projected (
        /*[out,retval]*/ enum FilterConditionStateEnum * PVal ) = 0;
};

struct __declspec(uuid("bca22e27-ab60-4ba6-87ee-92158aa6d366"))
ILayerFilterConditions : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ILayerFilterConditionPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ILayerFilterConditionPtr GetItem (
        const _variant_t & Index );
    ILayerFilterConditionPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILayerFilterCondition * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILayerFilterCondition * * Result ) = 0;
};

struct __declspec(uuid("ef4343fa-985d-4fe9-ad5f-439bc8f92958"))
IFeature7 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLabel))
    _bstr_t Label;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetUpdateStamp))
    long UpdateStamp;
    __declspec(property(get=GetOwnerFeature))
    IFeature7Ptr OwnerFeature;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetExcluded,put=PutExcluded))
    VARIANT_BOOL Excluded;
    __declspec(property(get=GetModelObjects))
    _variant_t ModelObjects[];
    __declspec(property(get=GetFeatureType))
    ksObj3dTypeEnum FeatureType;
    __declspec(property(get=GetSubFeatures))
    _variant_t SubFeatures[][][];
    __declspec(property(get=GetResultBodies))
    _variant_t ResultBodies;
    __declspec(property(get=GetVariables))
    _variant_t Variables[][];
    __declspec(property(get=GetVariable))
    IVariable7Ptr Variable[][][];
    __declspec(property(get=GetVariablesCount))
    long VariablesCount[][];
    __declspec(property(get=GetObjectError))
    long ObjectError;
    __declspec(property(get=GetState))
    long State;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetUpdateStamp ( );
    IFeature7Ptr GetOwnerFeature ( );
    VARIANT_BOOL GetValid ( );
    void PutExcluded (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetExcluded ( );
    _variant_t GetModelObjects (
        const _variant_t & ObjType );
    ksObj3dTypeEnum GetFeatureType ( );
    VARIANT_BOOL Delete ( );
    _variant_t GetSubFeatures (
        enum ksTreeTypeEnum TreeType,
        VARIANT_BOOL Through,
        VARIANT_BOOL LibObject );
    _variant_t GetResultBodies ( );
    _variant_t GetVariables (
        VARIANT_BOOL ExternalOnly,
        VARIANT_BOOL InSource );
    IVariable7Ptr GetVariable (
        VARIANT_BOOL External,
        VARIANT_BOOL InSource,
        const _variant_t & Index );
    long GetVariablesCount (
        VARIANT_BOOL External,
        VARIANT_BOOL InSource );
    long GetObjectError ( );
    long GetState ( );
    _bstr_t GetLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_UpdateStamp (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_OwnerFeature (
        /*[out,retval]*/ struct IFeature7 * * Result ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Excluded (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Excluded (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ModelObjects (
        /*[in]*/ VARIANT ObjType,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_FeatureType (
        /*[out,retval]*/ ksObj3dTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_SubFeatures (
        /*[in]*/ enum ksTreeTypeEnum TreeType,
        /*[in]*/ VARIANT_BOOL Through,
        /*[in]*/ VARIANT_BOOL LibObject,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_ResultBodies (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[in]*/ VARIANT_BOOL ExternalOnly,
        /*[in]*/ VARIANT_BOOL InSource,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Variable (
        /*[in]*/ VARIANT_BOOL External,
        /*[in]*/ VARIANT_BOOL InSource,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_VariablesCount (
        /*[in]*/ VARIANT_BOOL External,
        /*[in]*/ VARIANT_BOOL InSource,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_ObjectError (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("e37256d4-9021-47ac-8faf-3713fb2a50c3"))
IModelObject : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetPart))
    IPart7Ptr Part;
    __declspec(property(get=GetModelObjectType))
    ksObj3dTypeEnum ModelObjectType;
    __declspec(property(get=GetOwner))
    IFeature7Ptr Owner;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t PVal );
    void PutHidden (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHidden ( );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL GetValid ( );
    IPart7Ptr GetPart ( );
    ksObj3dTypeEnum GetModelObjectType ( );
    IFeature7Ptr GetOwner ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall get_ModelObjectType (
        /*[out,retval]*/ ksObj3dTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall get_Owner (
        /*[out,retval]*/ struct IFeature7 * * PVal ) = 0;
};

struct __declspec(uuid("125cb096-639e-479f-98de-f27fab23838a"))
IModelObjects : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IModelObjectPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("2b8b154e-ed76-4ff0-b3e4-fee691d014a4"))
IVariableTable : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVisualTable))
    long VisualTable[][];
    __declspec(property(get=GetRowsCount))
    long RowsCount;
    __declspec(property(get=GetColumnsCount))
    long ColumnsCount;
    __declspec(property(get=GetVarName,put=PutVarName))
    _bstr_t VarName[];
    __declspec(property(get=GetVarNames,put=PutVarNames))
    _variant_t VarNames;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment[];
    __declspec(property(get=GetTableRow,put=PutTableRow))
    _variant_t TableRow[];
    __declspec(property(get=GetCell,put=PutCell))
    double Cell[][];

    //
    // Wrapper methods for error-handling
    //

    long GetRowsCount ( );
    long GetColumnsCount ( );
    _bstr_t GetVarName (
        long Column );
    void PutVarName (
        long Column,
        _bstr_t Val );
    _variant_t GetVarNames ( );
    void PutVarNames (
        const _variant_t & Val );
    _bstr_t GetComment (
        long Val );
    void PutComment (
        long Val,
        _bstr_t BstrVal );
    _variant_t GetTableRow (
        const _variant_t & Index );
    void PutTableRow (
        const _variant_t & Index,
        const _variant_t & Val );
    double GetCell (
        long RowIndexVal,
        long ColIndex );
    void PutCell (
        long RowIndexVal,
        long ColIndex,
        double Val );
    VARIANT_BOOL ApplyVars (
        const _variant_t & Index );
    long GetVisualTable (
        OLE_HANDLE WinVal,
        VARIANT_BOOL Select );
    long AddColumn (
        _bstr_t Val );
    VARIANT_BOOL DeleteColumn (
        const _variant_t & ColVal );
    long AddRow (
        _bstr_t Val );
    VARIANT_BOOL DeleteRow (
        const _variant_t & RowVal );
    VARIANT_BOOL Clear ( );
    long FindColumnIndex (
        _bstr_t Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RowsCount (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_ColumnsCount (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_VarName (
        /*[in]*/ long Column,
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_VarName (
        /*[in]*/ long Column,
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_VarNames (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall put_VarNames (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[in]*/ long Val,
        /*[out,retval]*/ BSTR * BstrVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ long Val,
        /*[in]*/ BSTR BstrVal ) = 0;
      virtual HRESULT __stdcall get_TableRow (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall put_TableRow (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall get_Cell (
        /*[in]*/ long RowIndexVal,
        /*[in]*/ long ColIndex,
        /*[out,retval]*/ double * Val ) = 0;
      virtual HRESULT __stdcall put_Cell (
        /*[in]*/ long RowIndexVal,
        /*[in]*/ long ColIndex,
        /*[in]*/ double Val ) = 0;
      virtual HRESULT __stdcall raw_ApplyVars (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_VisualTable (
        /*[in]*/ OLE_HANDLE WinVal,
        /*[in]*/ VARIANT_BOOL Select,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddColumn (
        /*[in]*/ BSTR Val,
        /*[out,retval]*/ long * ColVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteColumn (
        /*[in]*/ VARIANT ColVal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddRow (
        /*[in]*/ BSTR Val,
        /*[out,retval]*/ long * RowVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteRow (
        /*[in]*/ VARIANT RowVal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_FindColumnIndex (
        /*[in]*/ BSTR Val,
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("d71aedbe-01d4-4c7d-96dc-94981f2a1c37"))
IPoint3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetAssociationObject))
    IModelObjectPtr AssociationObject;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    enum ksAnnotationSymbolEnum Symbol;
    __declspec(property(get=GetParameterType,put=PutParameterType))
    enum ksPoint3DTypeEnum ParameterType;
    __declspec(property(get=GetParameters))
    IKompasAPIObjectPtr Parameters;

    //
    // Wrapper methods for error-handling
    //

    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutZ (
        double PVal );
    double GetZ ( );
    VARIANT_BOOL SetAssociationObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetAssociationObject ( );
    void PutSymbol (
        enum ksAnnotationSymbolEnum PVal );
    enum ksAnnotationSymbolEnum GetSymbol ( );
    void PutParameterType (
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetParameterType ( );
    IKompasAPIObjectPtr GetParameters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetAssociationObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ enum ksAnnotationSymbolEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ enum ksAnnotationSymbolEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ParameterType (
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ParameterType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
};

struct __declspec(uuid("d51a4dcf-627d-44f5-89ba-46ef2449a212"))
IVector3D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetParametersType,put=PutParametersType))
    enum ksVector3DParametersTypeEnum ParametersType;
    __declspec(property(get=GetParameters))
    IKompasAPIObjectPtr Parameters;

    //
    // Wrapper methods for error-handling
    //

    void PutParametersType (
        enum ksVector3DParametersTypeEnum PVal );
    enum ksVector3DParametersTypeEnum GetParametersType ( );
    IKompasAPIObjectPtr GetParameters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ParametersType (
        /*[in]*/ enum ksVector3DParametersTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ParametersType (
        /*[out,retval]*/ enum ksVector3DParametersTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
};

struct __declspec(uuid("ba6395f5-3506-4483-8864-4eec220af316"))
ILocalCoordinateSystem : IPoint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrent,put=PutCurrent))
    VARIANT_BOOL Current;
    __declspec(property(get=GetDefaultObject))
    IModelObjectPtr DefaultObject[];
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D[];
    __declspec(property(get=GetShowName,put=PutShowName))
    VARIANT_BOOL ShowName;
    __declspec(property(get=GetOrientationType,put=PutOrientationType))
    enum ksOrientationTypeEnum OrientationType;
    __declspec(property(get=GetLocalCSParameters))
    IKompasAPIObjectPtr LocalCSParameters;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetDisplacementByAxis (
        ksObj3dTypeEnum Axis,
        double NewVal );
    void PutOrientationType (
        enum ksOrientationTypeEnum Result );
    enum ksOrientationTypeEnum GetOrientationType ( );
    VARIANT_BOOL ReadFromFile (
        _bstr_t FileName );
    VARIANT_BOOL WriteToFile (
        _bstr_t FileName );
    VARIANT_BOOL SetStartingOrientation ( );
    VARIANT_BOOL GetVector (
        ksObj3dTypeEnum Axis,
        double * X,
        double * Y,
        double * Z );
    IKompasAPIObjectPtr GetLocalCSParameters ( );
    void PutCurrent (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetCurrent ( );
    IModelObjectPtr GetDefaultObject (
        ksObj3dTypeEnum Val );
    VARIANT_BOOL InitByMatrix3D (
        const _variant_t & mtr );
    IVector3DPtr GetVector3D (
        ksObj3dTypeEnum Axis );
    void PutShowName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetDisplacementByAxis (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[in]*/ double NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_OrientationType (
        /*[in]*/ enum ksOrientationTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum ksOrientationTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall raw_ReadFromFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_WriteToFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetStartingOrientation (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_LocalCSParameters (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_DefaultObject (
        /*[in]*/ ksObj3dTypeEnum Val,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_InitByMatrix3D (
        /*[in]*/ VARIANT mtr,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
      virtual HRESULT __stdcall put_ShowName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("9c66de49-529c-4678-9af1-12710cb77804"))
IPlacement3D : IKompasAPIObject
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetOrigin (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetOrigin (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetVector (
        ksObj3dTypeEnum Axis,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetVector (
        ksObj3dTypeEnum Axis,
        double X,
        double Y,
        double Z );
    VARIANT_BOOL InitByMatrix3D (
        const _variant_t & mtr );
    _variant_t GetMatrix3D ( );
    VARIANT_BOOL GetPointProjectionToXY (
        double XIn,
        double YIn,
        double ZIn,
        double * XOut,
        double * YOut );
    VARIANT_BOOL GetPoint3D (
        double XIn,
        double YIn,
        double * XOut,
        double * YOut,
        double * ZOut );
    VARIANT_BOOL Rotate (
        double X0,
        double Y0,
        double Z0,
        double AxisZX,
        double AxisZXY,
        double AxisZZ,
        double Angle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetVector (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_InitByMatrix3D (
        /*[in]*/ VARIANT mtr,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetMatrix3D (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPointProjectionToXY (
        /*[in]*/ double XIn,
        /*[in]*/ double YIn,
        /*[in]*/ double ZIn,
        /*[out]*/ double * XOut,
        /*[out]*/ double * YOut,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPoint3D (
        /*[in]*/ double XIn,
        /*[in]*/ double YIn,
        /*[out]*/ double * XOut,
        /*[out]*/ double * YOut,
        /*[out]*/ double * ZOut,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double X0,
        /*[in]*/ double Y0,
        /*[in]*/ double Z0,
        /*[in]*/ double AxisZX,
        /*[in]*/ double AxisZXY,
        /*[in]*/ double AxisZZ,
        /*[in]*/ double Angle,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("aed8f9fc-e493-4cbd-9341-9d9e39e14fdc"))
ISpecRough3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSignType,put=PutSignType))
    enum ksRoughSignEnum SignType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAddSign,put=PutAddSign))
    VARIANT_BOOL AddSign;
    __declspec(property(get=GetIsCreated))
    VARIANT_BOOL IsCreated;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum ksSpecRoughPlacementEnum Placement;

    //
    // Wrapper methods for error-handling
    //

    enum ksRoughSignEnum GetSignType ( );
    void PutSignType (
        enum ksRoughSignEnum Result );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t PVal );
    VARIANT_BOOL GetAddSign ( );
    void PutAddSign (
        VARIANT_BOOL PRes );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL GetIsCreated ( );
    enum ksSpecRoughPlacementEnum GetPlacement ( );
    void PutPlacement (
        enum ksSpecRoughPlacementEnum Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SignType (
        /*[out,retval]*/ enum ksRoughSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_SignType (
        /*[in]*/ enum ksRoughSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_AddSign (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall put_AddSign (
        /*[in]*/ VARIANT_BOOL PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_IsCreated (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum ksSpecRoughPlacementEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum ksSpecRoughPlacementEnum Result ) = 0;
};

struct __declspec(uuid("9e37e1f5-f770-473a-b996-a6753eda73a5"))
IMateConstraint3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraintType))
    enum MateConstraintType ConstraintType;
    __declspec(property(get=GetBaseObject1,put=PutBaseObject1))
    IModelObjectPtr BaseObject1;
    __declspec(property(get=GetBaseObject2,put=PutBaseObject2))
    IModelObjectPtr BaseObject2;
    __declspec(property(get=GetFixed,put=PutFixed))
    enum ksMateFixedTypeEnum Fixed;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum ksMateConstraintAlignmentEnum Alignment;
    __declspec(property(get=GetParamValue,put=PutParamValue))
    double ParamValue;

    //
    // Wrapper methods for error-handling
    //

    enum MateConstraintType GetConstraintType ( );
    void PutBaseObject1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetBaseObject1 ( );
    void PutBaseObject2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetBaseObject2 ( );
    void PutFixed (
        enum ksMateFixedTypeEnum PVal );
    enum ksMateFixedTypeEnum GetFixed ( );
    void PutAlignment (
        enum ksMateConstraintAlignmentEnum PVal );
    enum ksMateConstraintAlignmentEnum GetAlignment ( );
    void PutParamValue (
        double PVal );
    double GetParamValue ( );
    enum ksMateType GetMateParams (
        long Index,
        VARIANT * Params );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum MateConstraintType * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObject1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObject2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Fixed (
        /*[in]*/ enum ksMateFixedTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ enum ksMateFixedTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum ksMateConstraintAlignmentEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum ksMateConstraintAlignmentEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ParamValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ParamValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetMateParams (
        /*[in]*/ long Index,
        /*[out]*/ VARIANT * Params,
        /*[out,retval]*/ enum ksMateType * Type ) = 0;
};

struct __declspec(uuid("95f316e1-0a18-4f42-8b70-1423250f244d"))
IMateConstraints3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetMateConstraint3D))
    IMateConstraint3DPtr MateConstraint3D[];
    __declspec(property(get=GetObjectConstraints))
    _variant_t ObjectConstraints[];
    __declspec(property(get=GetMatesMultiCreatedMode,put=PutMatesMultiCreatedMode))
    VARIANT_BOOL MatesMultiCreatedMode;

    //
    // Wrapper methods for error-handling
    //

    IMateConstraint3DPtr GetMateConstraint3D (
        const _variant_t & Index );
    IMateConstraint3DPtr Add (
        enum MateConstraintType Type );
    _variant_t GetObjectConstraints (
        struct IModelObject * Object );
    IMateConstraint3DPtr AddUserMate (
        enum MateConstraintType Type );
    void PutMatesMultiCreatedMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMatesMultiCreatedMode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MateConstraint3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMateConstraint3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum MateConstraintType Type,
        /*[out,retval]*/ struct IMateConstraint3D * * Result ) = 0;
      virtual HRESULT __stdcall get_ObjectConstraints (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_AddUserMate (
        /*[in]*/ enum MateConstraintType Type,
        /*[out,retval]*/ struct IMateConstraint3D * * Result ) = 0;
      virtual HRESULT __stdcall put_MatesMultiCreatedMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MatesMultiCreatedMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("4f122e22-0aa6-46e1-841f-a2504b145995"))
IBody7 : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetMarking,put=PutMarking))
    _bstr_t Marking;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetHatchParam))
    IHatchParamPtr HatchParam;
    __declspec(property(get=GetLayerNumber,put=PutLayerNumber))
    long LayerNumber;
    __declspec(property(get=GetProjected,put=PutProjected))
    enum ksProjectionOptionEnum Projected;
    __declspec(property(get=GetHiddenEx,put=PutHiddenEx))
    enum ksVisibleStateEnum HiddenEx;
    __declspec(property(get=GetEditable,put=PutEditable))
    enum ksEditableStateEnum Editable;
    __declspec(property(get=GetUserParameters))
    IUnknownPtr UserParameters[];
    __declspec(property(get=GetBodyId))
    long BodyId;
    __declspec(property(get=GetCreateSpcObjects,put=PutCreateSpcObjects))
    VARIANT_BOOL CreateSpcObjects;
    __declspec(property(get=GetBeginBodyId))
    long BeginBodyId;
    __declspec(property(get=GetFinalBodyId))
    long FinalBodyId;
    __declspec(property(get=GetOwnerBodyId))
    long OwnerBodyId;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetGabarit (
        double * X1,
        double * Y1,
        double * Z1,
        double * X2,
        double * Y2,
        double * Z2 );
    _bstr_t GetMarking ( );
    void PutMarking (
        _bstr_t PVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t PVal );
    VARIANT_BOOL Update ( );
    void PutHidden (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHidden ( );
    IHatchParamPtr GetHatchParam ( );
    long GetLayerNumber ( );
    void PutLayerNumber (
        long PVal );
    void PutProjected (
        enum ksProjectionOptionEnum PVal );
    enum ksProjectionOptionEnum GetProjected ( );
    void PutHiddenEx (
        enum ksVisibleStateEnum PVal );
    enum ksVisibleStateEnum GetHiddenEx ( );
    void PutEditable (
        enum ksEditableStateEnum PVal );
    enum ksEditableStateEnum GetEditable ( );
    IUnknownPtr GetUserParameters (
        _bstr_t Val );
    long GetBodyId ( );
    void PutCreateSpcObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateSpcObjects ( );
    long GetBeginBodyId ( );
    long GetFinalBodyId ( );
    long GetOwnerBodyId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetGabarit (
        /*[out]*/ double * X1,
        /*[out]*/ double * Y1,
        /*[out]*/ double * Z1,
        /*[out]*/ double * X2,
        /*[out]*/ double * Y2,
        /*[out]*/ double * Z2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Marking (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Marking (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_HatchParam (
        /*[out,retval]*/ struct IHatchParam * * Result ) = 0;
      virtual HRESULT __stdcall get_LayerNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_LayerNumber (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall put_Projected (
        /*[in]*/ enum ksProjectionOptionEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Projected (
        /*[out,retval]*/ enum ksProjectionOptionEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_HiddenEx (
        /*[in]*/ enum ksVisibleStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HiddenEx (
        /*[out,retval]*/ enum ksVisibleStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ enum ksEditableStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ enum ksEditableStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_UserParameters (
        /*[in]*/ BSTR Val,
        /*[out,retval]*/ IUnknown * * iParam ) = 0;
      virtual HRESULT __stdcall get_BodyId (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_CreateSpcObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateSpcObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_BeginBodyId (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_FinalBodyId (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_OwnerBodyId (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("67671c8a-3587-41eb-9291-39e9f94e4ea5"))
IUserFolder : IModelObject
{
    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr Add (
        ksObj3dTypeEnum Type );
    _variant_t GetObjects ( );
    VARIANT_BOOL SetObjects (
        const _variant_t & Objects );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum Type,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetObjects (
        /*[out,retval]*/ VARIANT * ObjectsArray ) = 0;
      virtual HRESULT __stdcall raw_SetObjects (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("0155ae59-92f4-4cee-9633-8ada943388cb"))
IUserFolders : IModelObjects
{
    //
    // Wrapper methods for error-handling
    //

    IUserFolderPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IUserFolder * * Result ) = 0;
};

struct __declspec(uuid("05c71c4b-f8bc-42e9-89d5-b9bc0145ed36"))
IZone : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetZoneType,put=PutZoneType))
    enum ksZoneTypeEnum ZoneType;
    __declspec(property(get=GetParameters))
    IKompasAPIObjectPtr Parameters;
    __declspec(property(get=GetSelectObjects))
    _variant_t SelectObjects[];
    __declspec(property(get=GetSelectParts))
    _variant_t SelectParts[];

    //
    // Wrapper methods for error-handling
    //

    enum ksZoneTypeEnum GetZoneType ( );
    void PutZoneType (
        enum ksZoneTypeEnum PVal );
    IKompasAPIObjectPtr GetParameters ( );
    VARIANT_BOOL GetGabarit (
        double * X1,
        double * Y1,
        double * Z1,
        double * X2,
        double * Y2,
        double * Z2 );
    _variant_t GetSelectObjects (
        enum ksRegionTypeEnum SelectType );
    _variant_t GetSelectParts (
        enum ksRegionTypeEnum SelectType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ZoneType (
        /*[out,retval]*/ enum ksZoneTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ZoneType (
        /*[in]*/ enum ksZoneTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetGabarit (
        /*[out]*/ double * X1,
        /*[out]*/ double * Y1,
        /*[out]*/ double * Z1,
        /*[out]*/ double * X2,
        /*[out]*/ double * Y2,
        /*[out]*/ double * Z2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SelectObjects (
        /*[in]*/ enum ksRegionTypeEnum SelectType,
        /*[out,retval]*/ VARIANT * Objects ) = 0;
      virtual HRESULT __stdcall get_SelectParts (
        /*[in]*/ enum ksRegionTypeEnum SelectType,
        /*[out,retval]*/ VARIANT * Objects ) = 0;
};

struct __declspec(uuid("d67aa2b3-2e8a-4882-b11a-3828d106ca0a"))
IZoneDivision : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetZoneDivisionType,put=PutZoneDivisionType))
    enum ksZoneDivisionTypeEnum ZoneDivisionType;
    __declspec(property(get=GetZone,put=PutZone))
    IZonePtr Zone;
    __declspec(property(get=GetParameters))
    IKompasAPIObjectPtr Parameters;

    //
    // Wrapper methods for error-handling
    //

    enum ksZoneDivisionTypeEnum GetZoneDivisionType ( );
    void PutZoneDivisionType (
        enum ksZoneDivisionTypeEnum PVal );
    IZonePtr GetZone ( );
    void PutZone (
        struct IZone * Result );
    IKompasAPIObjectPtr GetParameters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ZoneDivisionType (
        /*[out,retval]*/ enum ksZoneDivisionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ZoneDivisionType (
        /*[in]*/ enum ksZoneDivisionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Zone (
        /*[out,retval]*/ struct IZone * * Result ) = 0;
      virtual HRESULT __stdcall put_Zone (
        /*[in]*/ struct IZone * Result ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
};

struct __declspec(uuid("0b93d860-69ec-4d03-8a1d-eb0c936b1d45"))
IZonesManager : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetZonesCount))
    long ZonesCount;
    __declspec(property(get=GetZone))
    IZonePtr Zone[];
    __declspec(property(get=GetZonesDivisionCount))
    long ZonesDivisionCount;
    __declspec(property(get=GetZoneDivision))
    IZoneDivisionPtr ZoneDivision[];
    __declspec(property(get=GetCurrentZone,put=PutCurrentZone))
    IZonePtr CurrentZone;
    __declspec(property(get=GetZonesVisible,put=PutZonesVisible))
    VARIANT_BOOL ZonesVisible;
    __declspec(property(get=GetCreateZonesInGlobalCS,put=PutCreateZonesInGlobalCS))
    VARIANT_BOOL CreateZonesInGlobalCS;
    __declspec(property(get=GetZonesTree))
    IFeature7Ptr ZonesTree;

    //
    // Wrapper methods for error-handling
    //

    long GetZonesCount ( );
    IZonePtr GetZone (
        const _variant_t & Index );
    IZonePtr AddZone (
        enum ksZoneTypeEnum ZoneType );
    long GetZonesDivisionCount ( );
    IZoneDivisionPtr GetZoneDivision (
        const _variant_t & Index );
    IZoneDivisionPtr AddZoneDivision (
        enum ksZoneDivisionTypeEnum ZoneType );
    IZonePtr GetCurrentZone ( );
    void PutCurrentZone (
        struct IZone * Result );
    VARIANT_BOOL GetZonesVisible ( );
    void PutZonesVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateZonesInGlobalCS ( );
    void PutCreateZonesInGlobalCS (
        VARIANT_BOOL PVal );
    IFeature7Ptr GetZonesTree ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ZonesCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Zone (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IZone * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddZone (
        /*[in]*/ enum ksZoneTypeEnum ZoneType,
        /*[out,retval]*/ struct IZone * * Result ) = 0;
      virtual HRESULT __stdcall get_ZonesDivisionCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_ZoneDivision (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IZoneDivision * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddZoneDivision (
        /*[in]*/ enum ksZoneDivisionTypeEnum ZoneType,
        /*[out,retval]*/ struct IZoneDivision * * Result ) = 0;
      virtual HRESULT __stdcall get_CurrentZone (
        /*[out,retval]*/ struct IZone * * Result ) = 0;
      virtual HRESULT __stdcall put_CurrentZone (
        /*[in]*/ struct IZone * Result ) = 0;
      virtual HRESULT __stdcall get_ZonesVisible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ZonesVisible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateZonesInGlobalCS (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CreateZonesInGlobalCS (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ZonesTree (
        /*[out,retval]*/ struct IFeature7 * * Result ) = 0;
};

struct __declspec(uuid("e6df688c-5b23-436b-a027-a96bfd5484cc"))
ISelectionManager : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedObjects))
    _variant_t SelectedObjects;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Select (
        const _variant_t & Objects );
    VARIANT_BOOL Unselect (
        const _variant_t & Objects );
    VARIANT_BOOL UnselectAll ( );
    VARIANT_BOOL IsSelected (
        struct IKompasAPIObject * Object );
    _variant_t GetSelectedObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Unselect (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_UnselectAll (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsSelected (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SelectedObjects (
        /*[out,retval]*/ VARIANT * Objects ) = 0;
};

struct __declspec(uuid("e2d9eaa6-f88c-4adb-ac32-854e32e9fee1"))
IChooseManager : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetChoosenObjects))
    _variant_t ChoosenObjects;
    __declspec(property(get=GetCurrentManagerType,put=PutCurrentManagerType))
    enum ksChooseManagerTypeEnum CurrentManagerType;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Choose (
        const _variant_t & Objects );
    VARIANT_BOOL Unchoose (
        const _variant_t & Objects );
    VARIANT_BOOL UnchooseAll ( );
    VARIANT_BOOL IsChoosen (
        struct IKompasAPIObject * Object );
    _variant_t GetChoosenObjects ( );
    enum ksChooseManagerTypeEnum GetCurrentManagerType ( );
    void PutCurrentManagerType (
        enum ksChooseManagerTypeEnum PVal );
    enum ksChooseManagerTypeEnum GetManagerIndex (
        struct IKompasAPIObject * Object );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Choose (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Unchoose (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_UnchooseAll (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsChoosen (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ChoosenObjects (
        /*[out,retval]*/ VARIANT * Objects ) = 0;
      virtual HRESULT __stdcall get_CurrentManagerType (
        /*[out,retval]*/ enum ksChooseManagerTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CurrentManagerType (
        /*[in]*/ enum ksChooseManagerTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall raw_GetManagerIndex (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ enum ksChooseManagerTypeEnum * PVal ) = 0;
};

struct __declspec(uuid("3fde0f44-4459-49f3-a012-e64f9bfa454d"))
IColumnInfo : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetColType,put=PutColType))
    enum ksValueTypeEnum ColType;
    __declspec(property(get=GetKey,put=PutKey))
    long Key;
    __declspec(property(get=GetDefValue,put=PutDefValue))
    _variant_t DefValue;
    __declspec(property(get=GetListValue,put=PutListValue))
    VARIANT_BOOL ListValue;
    __declspec(property(get=GetSortListValue,put=PutSortListValue))
    VARIANT_BOOL SortListValue;
    __declspec(property(get=GetRange,put=PutRange))
    _variant_t Range;
    __declspec(property(get=GetRecordColumnInfo))
    IColumnInfoPtr RecordColumnInfo[];
    __declspec(property(get=GetRecordColumnsCount))
    long RecordColumnsCount;

    //
    // Wrapper methods for error-handling
    //

    void PutCaption (
        _bstr_t PVal );
    _bstr_t GetCaption ( );
    void PutColType (
        enum ksValueTypeEnum PVal );
    enum ksValueTypeEnum GetColType ( );
    void PutKey (
        long PVal );
    long GetKey ( );
    void PutDefValue (
        const _variant_t & PVal );
    _variant_t GetDefValue ( );
    void PutListValue (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetListValue ( );
    void PutSortListValue (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSortListValue ( );
    void PutRange (
        const _variant_t & PVal );
    _variant_t GetRange ( );
    IColumnInfoPtr GetRecordColumnInfo (
        const _variant_t & Index );
    IColumnInfoPtr AddRecordColumn (
        long Index,
        enum ksValueTypeEnum Type,
        _bstr_t Name );
    VARIANT_BOOL Delete ( );
    long GetRecordColumnsCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ColType (
        /*[in]*/ enum ksValueTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ColType (
        /*[out,retval]*/ enum ksValueTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_DefValue (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_DefValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_ListValue (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ListValue (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SortListValue (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SortListValue (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Range (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_RecordColumnInfo (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IColumnInfo * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddRecordColumn (
        /*[in]*/ long Index,
        /*[in]*/ enum ksValueTypeEnum Type,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IColumnInfo * * Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_RecordColumnsCount (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("414cf83e-4fa3-42ab-bc26-6c6bbf91bb0f"))
IAttributeType : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeName,put=PutTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetAttrType,put=PutAttrType))
    enum ksAttributeTypeEnum AttrType;
    __declspec(property(get=GetUniqueNumb))
    double UniqueNumb;
    __declspec(property(get=GetColumnInfo))
    IColumnInfoPtr ColumnInfo[];
    __declspec(property(get=GetRowsCount,put=PutRowsCount))
    long RowsCount;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetColumnsCount))
    long ColumnsCount;

    //
    // Wrapper methods for error-handling
    //

    void PutTypeName (
        _bstr_t PVal );
    _bstr_t GetTypeName ( );
    void PutAttrType (
        enum ksAttributeTypeEnum PVal );
    enum ksAttributeTypeEnum GetAttrType ( );
    VARIANT_BOOL GetKeysInfo (
        long * Key1,
        long * Key2,
        long * Key3,
        long * Key4 );
    VARIANT_BOOL SetKeysInfo (
        long Key1,
        long Key2,
        long Key3,
        long Key4 );
    double GetUniqueNumb ( );
    VARIANT_BOOL SetPassword (
        _bstr_t OldPassword,
        _bstr_t NewPassword );
    IColumnInfoPtr GetColumnInfo (
        const _variant_t & Index );
    IColumnInfoPtr AddColumn (
        long Index,
        enum ksValueTypeEnum Type,
        _bstr_t Name );
    VARIANT_BOOL Update (
        _bstr_t Password );
    VARIANT_BOOL Delete (
        _bstr_t Password );
    VARIANT_BOOL ViewEdit (
        OLE_HANDLE Parent,
        _bstr_t Password,
        VARIANT_BOOL ReadOnly );
    void PutRowsCount (
        long Count );
    long GetRowsCount ( );
    _bstr_t GetFileName ( );
    long GetColumnsCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_TypeName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_AttrType (
        /*[in]*/ enum ksAttributeTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_AttrType (
        /*[out,retval]*/ enum ksAttributeTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetKeysInfo (
        /*[out]*/ long * Key1,
        /*[out]*/ long * Key2,
        /*[out]*/ long * Key3,
        /*[out]*/ long * Key4,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetKeysInfo (
        /*[in]*/ long Key1,
        /*[in]*/ long Key2,
        /*[in]*/ long Key3,
        /*[in]*/ long Key4,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_UniqueNumb (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR OldPassword,
        /*[in]*/ BSTR NewPassword,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ColumnInfo (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IColumnInfo * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddColumn (
        /*[in]*/ long Index,
        /*[in]*/ enum ksValueTypeEnum Type,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IColumnInfo * * Result ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ BSTR Password,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Password,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_ViewEdit (
        /*[in]*/ OLE_HANDLE Parent,
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall put_RowsCount (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall get_RowsCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnsCount (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("94f965b0-5abb-4994-98c7-b08fa8515452"))
IAttribute : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObjects,put=PutObjects))
    _variant_t Objects;
    __declspec(property(get=GetValue))
    _variant_t Value[][];
    __declspec(property(get=GetValues))
    _variant_t Values;
    __declspec(property(get=GetFlagVisible))
    _variant_t FlagVisible;
    __declspec(property(get=GetColumnKey))
    _variant_t ColumnKey;
    __declspec(property(get=GetAttributeType))
    IAttributeTypePtr AttributeType;
    __declspec(property(get=GetRowsCount))
    long RowsCount;
    __declspec(property(get=GetColumnsCount))
    long ColumnsCount;
    __declspec(property(get=GetRecordFlagVisible))
    _variant_t RecordFlagVisible[];

    //
    // Wrapper methods for error-handling
    //

    void PutObjects (
        const _variant_t & Result );
    _variant_t GetObjects ( );
    _variant_t GetValue (
        long RowNumb,
        long ColumnNumb );
    VARIANT_BOOL SetValue (
        _bstr_t Password,
        long RowNumb,
        long ColumnNumb,
        const _variant_t & Value );
    _variant_t GetValues ( );
    VARIANT_BOOL SetValues (
        _bstr_t Password,
        const _variant_t & Values );
    _variant_t GetFlagVisible ( );
    VARIANT_BOOL SetFlagVisible (
        _bstr_t Password,
        const _variant_t & Values );
    _variant_t GetColumnKey ( );
    VARIANT_BOOL SetColumnKey (
        _bstr_t Password,
        const _variant_t & Keys );
    VARIANT_BOOL SetPassword (
        _bstr_t OldPassword,
        _bstr_t NewPassword );
    VARIANT_BOOL AddRow (
        _bstr_t Password,
        long RowNumb );
    VARIANT_BOOL DeleteRow (
        _bstr_t Password,
        long RowNumb );
    VARIANT_BOOL GetKeysInfo (
        long * Key1,
        long * Key2,
        long * Key3,
        long * Key4,
        double * Numb );
    VARIANT_BOOL SetKeysInfo (
        _bstr_t Password,
        long Key1,
        long Key2,
        long Key3,
        long Key4 );
    IAttributeTypePtr GetAttributeType ( );
    long GetRowsCount ( );
    long GetColumnsCount ( );
    VARIANT_BOOL Delete (
        _bstr_t Password,
        const _variant_t & Objects );
    VARIANT_BOOL ViewEdit (
        OLE_HANDLE Parent,
        _bstr_t Password,
        VARIANT_BOOL ReadOnly );
    _variant_t GetRecordFlagVisible (
        long ColumnNumb );
    VARIANT_BOOL SetRecordFlagVisible (
        _bstr_t Password,
        long ColumnNumb,
        const _variant_t & Values );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Objects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long RowNumb,
        /*[in]*/ long ColumnNumb,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ BSTR Password,
        /*[in]*/ long RowNumb,
        /*[in]*/ long ColumnNumb,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT Values,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_FlagVisible (
        /*[out,retval]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall raw_SetFlagVisible (
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT Values,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_ColumnKey (
        /*[out,retval]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall raw_SetColumnKey (
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT Keys,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR OldPassword,
        /*[in]*/ BSTR NewPassword,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddRow (
        /*[in]*/ BSTR Password,
        /*[in]*/ long RowNumb,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteRow (
        /*[in]*/ BSTR Password,
        /*[in]*/ long RowNumb,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetKeysInfo (
        /*[out]*/ long * Key1,
        /*[out]*/ long * Key2,
        /*[out]*/ long * Key3,
        /*[out]*/ long * Key4,
        /*[out]*/ double * Numb,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetKeysInfo (
        /*[in]*/ BSTR Password,
        /*[in]*/ long Key1,
        /*[in]*/ long Key2,
        /*[in]*/ long Key3,
        /*[in]*/ long Key4,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_AttributeType (
        /*[out,retval]*/ struct IAttributeType * * Result ) = 0;
      virtual HRESULT __stdcall get_RowsCount (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_ColumnsCount (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_ViewEdit (
        /*[in]*/ OLE_HANDLE Parent,
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_RecordFlagVisible (
        /*[in]*/ long ColumnNumb,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_SetRecordFlagVisible (
        /*[in]*/ BSTR Password,
        /*[in]*/ long ColumnNumb,
        /*[in]*/ VARIANT Values,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
};

struct __declspec(uuid("cd435b3d-175c-4e18-baa0-81fdd7eb6a86"))
ITechnicalDemand3D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetIsCreated))
    VARIANT_BOOL IsCreated;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetEditable,put=PutEditable))
    enum ksEditableStateEnum Editable;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum ksTechnicalDemand3DPlacementEnum Placement;

    //
    // Wrapper methods for error-handling
    //

    ITextPtr GetText ( );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL GetIsCreated ( );
    VARIANT_BOOL Delete ( );
    void PutHidden (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHidden ( );
    void PutEditable (
        enum ksEditableStateEnum PVal );
    enum ksEditableStateEnum GetEditable ( );
    enum ksTechnicalDemand3DPlacementEnum GetPlacement ( );
    void PutPlacement (
        enum ksTechnicalDemand3DPlacementEnum Result );
    VARIANT_BOOL GetGabarit (
        long * Left,
        long * Top,
        long * Right,
        long * Bottom );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_IsCreated (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ enum ksEditableStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ enum ksEditableStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum ksTechnicalDemand3DPlacementEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum ksTechnicalDemand3DPlacementEnum Result ) = 0;
      virtual HRESULT __stdcall raw_GetGabarit (
        /*[out]*/ long * Left,
        /*[out]*/ long * Top,
        /*[out]*/ long * Right,
        /*[out]*/ long * Bottom,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("131069f4-a4e2-4db4-a559-85eaccc74ce4"))
IParametriticConstraint : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraintType,put=PutConstraintType))
    enum ksConstraintTypeEnum ConstraintType;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetPartner,put=PutPartner))
    _variant_t Partner;
    __declspec(property(get=GetPartnerIndex,put=PutPartnerIndex))
    long PartnerIndex;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetExpression,put=PutExpression))
    _bstr_t Expression;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetVariable,put=PutVariable))
    _bstr_t Variable;
    __declspec(property(get=GetDegrees,put=PutDegrees))
    long Degrees;
    __declspec(property(get=GetMinutes,put=PutMinutes))
    long Minutes;
    __declspec(property(get=GetSeconds,put=PutSeconds))
    double Seconds;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDrawingObjectPtr Axis;
    __declspec(property(get=GetBisectorVariant,put=PutBisectorVariant))
    enum ksBisectorVariant BisectorVariant;
    __declspec(property(get=GetSegmentIndex,put=PutSegmentIndex))
    long SegmentIndex;
    __declspec(property(get=GetPartnerSegmentIndex,put=PutPartnerSegmentIndex))
    long PartnerSegmentIndex;
    __declspec(property(get=GetAxisSegmentIndex,put=PutAxisSegmentIndex))
    long AxisSegmentIndex;

    //
    // Wrapper methods for error-handling
    //

    void PutConstraintType (
        enum ksConstraintTypeEnum PVal );
    enum ksConstraintTypeEnum GetConstraintType ( );
    void PutIndex (
        long PVal );
    long GetIndex ( );
    void PutPartner (
        const _variant_t & PVal );
    _variant_t GetPartner ( );
    void PutPartnerIndex (
        long PVal );
    long GetPartnerIndex ( );
    void PutValue (
        double PVal );
    double GetValue ( );
    void PutExpression (
        _bstr_t PVal );
    _bstr_t GetExpression ( );
    void PutComment (
        _bstr_t PVal );
    _bstr_t GetComment ( );
    void PutVariable (
        _bstr_t PVal );
    _bstr_t GetVariable ( );
    void PutDegrees (
        long PVal );
    long GetDegrees ( );
    void PutMinutes (
        long PVal );
    long GetMinutes ( );
    void PutSeconds (
        double PVal );
    double GetSeconds ( );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL Create ( );
    VARIANT_BOOL GetValid ( );
    IDrawingObjectPtr GetAxis ( );
    void PutAxis (
        struct IDrawingObject * PVal );
    void PutBisectorVariant (
        enum ksBisectorVariant PVal );
    enum ksBisectorVariant GetBisectorVariant ( );
    void PutSegmentIndex (
        long PVal );
    long GetSegmentIndex ( );
    void PutPartnerSegmentIndex (
        long PVal );
    long GetPartnerSegmentIndex ( );
    void PutAxisSegmentIndex (
        long PVal );
    long GetAxisSegmentIndex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ConstraintType (
        /*[in]*/ enum ksConstraintTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum ksConstraintTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Partner (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Partner (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_PartnerIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PartnerIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Variable (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Variable (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Degrees (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Degrees (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Minutes (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Minutes (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Seconds (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Seconds (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IDrawingObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ struct IDrawingObject * PVal ) = 0;
      virtual HRESULT __stdcall put_BisectorVariant (
        /*[in]*/ enum ksBisectorVariant PVal ) = 0;
      virtual HRESULT __stdcall get_BisectorVariant (
        /*[out,retval]*/ enum ksBisectorVariant * PVal ) = 0;
      virtual HRESULT __stdcall put_SegmentIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_SegmentIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PartnerSegmentIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PartnerSegmentIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_AxisSegmentIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_AxisSegmentIndex (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("649f0eb2-ebc0-449b-8b61-dc3cf1953bf9"))
IDrawingObject1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraints))
    _variant_t Constraints;
    __declspec(property(get=GetTransparentBackground,put=PutTransparentBackground))
    VARIANT_BOOL TransparentBackground;
    __declspec(property(get=GetAutoTransparentBackground,put=PutAutoTransparentBackground))
    VARIANT_BOOL AutoTransparentBackground;
    __declspec(property(get=GetIsGeometryObject))
    VARIANT_BOOL IsGeometryObject;
    __declspec(property(get=GetIsAnnotativeObject))
    VARIANT_BOOL IsAnnotativeObject;
    __declspec(property(get=GetIsCurve))
    VARIANT_BOOL IsCurve;
    __declspec(property(get=GetId))
    __int64 Id;
    __declspec(property(get=GetIsInAssociationView))
    VARIANT_BOOL IsInAssociationView;
    __declspec(property(get=GetIsVisibleInAssociationView))
    VARIANT_BOOL IsVisibleInAssociationView;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetConstraints ( );
    IParametriticConstraintPtr NewConstraint ( );
    VARIANT_BOOL Associate ( );
    VARIANT_BOOL DeleteConstraints ( );
    VARIANT_BOOL GetTransparentBackground ( );
    void PutTransparentBackground (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAutoTransparentBackground ( );
    void PutAutoTransparentBackground (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIsGeometryObject ( );
    VARIANT_BOOL GetIsAnnotativeObject ( );
    VARIANT_BOOL GetIsCurve ( );
    _bstr_t GetHyperLinkParam (
        enum ksHyperLinkTypeEnum * Type,
        struct IDrawingObject * * LinkObject,
        long * Level );
    VARIANT_BOOL DeleteHyperLink ( );
    ICurve2DPtr GetCurve2D ( );
    __int64 GetId ( );
    VARIANT_BOOL GetIsInAssociationView ( );
    VARIANT_BOOL GetIsVisibleInAssociationView ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_NewConstraint (
        /*[out,retval]*/ struct IParametriticConstraint * * Result ) = 0;
      virtual HRESULT __stdcall raw_Associate (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteConstraints (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_TransparentBackground (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_TransparentBackground (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AutoTransparentBackground (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoTransparentBackground (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IsGeometryObject (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_IsAnnotativeObject (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_IsCurve (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetHyperLinkParam (
        /*[out]*/ enum ksHyperLinkTypeEnum * Type,
        /*[out]*/ struct IDrawingObject * * LinkObject,
        /*[out]*/ long * Level,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteHyperLink (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCurve2D (
        /*[out,retval]*/ struct ICurve2D * * Result ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ __int64 * Result ) = 0;
      virtual HRESULT __stdcall get_IsInAssociationView (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_IsVisibleInAssociationView (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("ebf0cb2e-31bf-4baf-a668-ab9a9bde8422"))
IRasterConvertParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetRasterFormat,put=PutRasterFormat))
    enum ksRasterFormatEnum RasterFormat;
    __declspec(property(get=GetColorBPP,put=PutColorBPP))
    enum ksColorBPPEnum ColorBPP;
    __declspec(property(get=GetGreyScale,put=PutGreyScale))
    VARIANT_BOOL GreyScale;
    __declspec(property(get=GetResolution,put=PutResolution))
    long Resolution;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetColorType,put=PutColorType))
    enum ksObjectColorTypeEnum ColorType;
    __declspec(property(get=GetOnlyThinLine,put=PutOnlyThinLine))
    VARIANT_BOOL OnlyThinLine;
    __declspec(property(get=GetSheetsRange,put=PutSheetsRange))
    enum ksSheetsRangeEnum SheetsRange;
    __declspec(property(get=GetSheets,put=PutSheets))
    _variant_t Sheets;
    __declspec(property(get=GetSaveWorkArea,put=PutSaveWorkArea))
    VARIANT_BOOL SaveWorkArea;
    __declspec(property(get=GetMultiPageOutput,put=PutMultiPageOutput))
    enum ksMultiPageOutputEnum MultiPageOutput;
    __declspec(property(get=GetUncompressed,put=PutUncompressed))
    VARIANT_BOOL Uncompressed;
    __declspec(property(get=GetReturnResultAsArrayBytes,put=PutReturnResultAsArrayBytes))
    VARIANT_BOOL ReturnResultAsArrayBytes;
    __declspec(property(get=GetResultArrayBytes,put=PutResultArrayBytes))
    _variant_t ResultArrayBytes;

    //
    // Wrapper methods for error-handling
    //

    void PutRasterFormat (
        enum ksRasterFormatEnum PVal );
    enum ksRasterFormatEnum GetRasterFormat ( );
    void PutColorBPP (
        enum ksColorBPPEnum PVal );
    enum ksColorBPPEnum GetColorBPP ( );
    void PutGreyScale (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetGreyScale ( );
    void PutResolution (
        long Result );
    long GetResolution ( );
    void PutScale (
        double Result );
    double GetScale ( );
    void PutColorType (
        enum ksObjectColorTypeEnum PVal );
    enum ksObjectColorTypeEnum GetColorType ( );
    void PutOnlyThinLine (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOnlyThinLine ( );
    void PutSheetsRange (
        enum ksSheetsRangeEnum PVal );
    enum ksSheetsRangeEnum GetSheetsRange ( );
    void PutSheets (
        const _variant_t & PVal );
    _variant_t GetSheets ( );
    void PutSaveWorkArea (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveWorkArea ( );
    void PutMultiPageOutput (
        enum ksMultiPageOutputEnum PVal );
    enum ksMultiPageOutputEnum GetMultiPageOutput ( );
    void PutUncompressed (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUncompressed ( );
    void PutReturnResultAsArrayBytes (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReturnResultAsArrayBytes ( );
    void PutResultArrayBytes (
        const _variant_t & PVal );
    _variant_t GetResultArrayBytes ( );
    VARIANT_BOOL Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_RasterFormat (
        /*[in]*/ enum ksRasterFormatEnum PVal ) = 0;
      virtual HRESULT __stdcall get_RasterFormat (
        /*[out,retval]*/ enum ksRasterFormatEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ColorBPP (
        /*[in]*/ enum ksColorBPPEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ColorBPP (
        /*[out,retval]*/ enum ksColorBPPEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_GreyScale (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_GreyScale (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Resolution (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum ksObjectColorTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum ksObjectColorTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_OnlyThinLine (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_OnlyThinLine (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SheetsRange (
        /*[in]*/ enum ksSheetsRangeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SheetsRange (
        /*[out,retval]*/ enum ksSheetsRangeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Sheets (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveWorkArea (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveWorkArea (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MultiPageOutput (
        /*[in]*/ enum ksMultiPageOutputEnum PVal ) = 0;
      virtual HRESULT __stdcall get_MultiPageOutput (
        /*[out,retval]*/ enum ksMultiPageOutputEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Uncompressed (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Uncompressed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReturnResultAsArrayBytes (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReturnResultAsArrayBytes (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ResultArrayBytes (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_ResultArrayBytes (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("58890fe8-e671-4561-994a-600dd29032e4"))
IKompasDocument1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetDocumentTypeId,put=PutDocumentTypeId))
    _bstr_t DocumentTypeId;
    __declspec(property(get=GetOpenVersion))
    long OpenVersion;
    __declspec(property(get=GetAttributes))
    _variant_t Attributes[][][][][][];
    __declspec(property(get=GetObjectsByAttr))
    _variant_t ObjectsByAttr[][][][][][];
    __declspec(property(get=GetExternalFilesNames))
    _variant_t ExternalFilesNames[];
    __declspec(property(get=GetCreationDate))
    double CreationDate;
    __declspec(property(get=GetLastChangeDate))
    double LastChangeDate;
    __declspec(property(get=GetOrganization,put=PutOrganization))
    _bstr_t Organization;
    __declspec(property(get=GetMetadata,put=PutMetadata))
    _bstr_t Metadata;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Delete (
        const _variant_t & Objects );
    _variant_t GetAttributes (
        long Key1,
        long Key2,
        long Key3,
        long Key4,
        double Numb,
        const _variant_t & Objects );
    _variant_t GetObjectsByAttr (
        long Key1,
        long Key2,
        long Key3,
        long Key4,
        double Numb,
        const _variant_t & ObjectType );
    IAttributePtr CreateAttr (
        double AttrID,
        _bstr_t Libname,
        const _variant_t & Objects );
    VARIANT_BOOL ViewEditAttr (
        OLE_HANDLE HWnd,
        const _variant_t & Objects );
    IKompasAPIObjectPtr GetInterface (
        enum KompasAPIObjectTypeEnum Type );
    _variant_t GetExternalFilesNames (
        VARIANT_BOOL allFiles );
    VARIANT_BOOL SaveAsEx (
        _bstr_t PathName,
        long saveMode );
    double GetCreationDate ( );
    double GetLastChangeDate ( );
    VARIANT_BOOL GetExternalFilesNamesEx (
        VARIANT_BOOL allFiles,
        VARIANT * Files,
        VARIANT * FilesTypes );
    _bstr_t GetOrganization ( );
    void PutOrganization (
        _bstr_t PVal );
    VARIANT_BOOL ReportPropertiesMultieditMode (
        VARIANT_BOOL On,
        VARIANT_BOOL UpdateProps );
    _bstr_t GetMetadata ( );
    void PutMetadata (
        _bstr_t PVal );
    VARIANT_BOOL WriteMetadataToFile (
        _bstr_t FileName );
    VARIANT_BOOL ApplyMetadataFromFile (
        _bstr_t FileName );
    VARIANT_BOOL ActivateToolbarSet (
        _bstr_t TolbrSetId );
    VARIANT_BOOL RedrawDocument (
        enum ksRedrawDocumentModeEnum Mode );
    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t PVal );
    void PutComment (
        _bstr_t PVal );
    _bstr_t GetComment ( );
    void PutDocumentTypeId (
        _bstr_t PVal );
    _bstr_t GetDocumentTypeId ( );
    long GetOpenVersion ( );
    VARIANT_BOOL ReplaceExternalFilesNames (
        VARIANT_BOOL allFiles,
        _bstr_t OldFileName,
        _bstr_t NewFileName );
    VARIANT_BOOL SetChanged (
        VARIANT_BOOL Changed );
    _bstr_t GetObjectId (
        struct IKompasAPIObject * Object,
        struct IKompasAPIObject * Parent );
    IKompasAPIObjectPtr FindObjectById (
        _bstr_t Id,
        struct IKompasAPIObject * Parent );
    VARIANT_BOOL SaveAsToRasterFormat (
        _bstr_t FileName,
        struct IRasterConvertParameters * Param );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[in]*/ long Key1,
        /*[in]*/ long Key2,
        /*[in]*/ long Key3,
        /*[in]*/ long Key4,
        /*[in]*/ double Numb,
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_ObjectsByAttr (
        /*[in]*/ long Key1,
        /*[in]*/ long Key2,
        /*[in]*/ long Key3,
        /*[in]*/ long Key4,
        /*[in]*/ double Numb,
        /*[in]*/ VARIANT ObjectType,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_CreateAttr (
        /*[in]*/ double AttrID,
        /*[in]*/ BSTR Libname,
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ struct IAttribute * * Result ) = 0;
      virtual HRESULT __stdcall raw_ViewEditAttr (
        /*[in]*/ OLE_HANDLE HWnd,
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetInterface (
        /*[in]*/ enum KompasAPIObjectTypeEnum Type,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_ExternalFilesNames (
        /*[in]*/ VARIANT_BOOL allFiles,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_SaveAsEx (
        /*[in]*/ BSTR PathName,
        /*[in]*/ long saveMode,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_CreationDate (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_LastChangeDate (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_GetExternalFilesNamesEx (
        /*[in]*/ VARIANT_BOOL allFiles,
        /*[out]*/ VARIANT * Files,
        /*[out]*/ VARIANT * FilesTypes,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Organization (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Organization (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_ReportPropertiesMultieditMode (
        /*[in]*/ VARIANT_BOOL On,
        /*[in]*/ VARIANT_BOOL UpdateProps,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Metadata (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Metadata (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_WriteMetadataToFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ApplyMetadataFromFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ActivateToolbarSet (
        /*[in]*/ BSTR TolbrSetId,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_RedrawDocument (
        /*[in]*/ enum ksRedrawDocumentModeEnum Mode,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_DocumentTypeId (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_DocumentTypeId (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_OpenVersion (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_ReplaceExternalFilesNames (
        /*[in]*/ VARIANT_BOOL allFiles,
        /*[in]*/ BSTR OldFileName,
        /*[in]*/ BSTR NewFileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetChanged (
        /*[in]*/ VARIANT_BOOL Changed,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetObjectId (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[in]*/ struct IKompasAPIObject * Parent,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_FindObjectById (
        /*[in]*/ BSTR Id,
        /*[in]*/ struct IKompasAPIObject * Parent,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_SaveAsToRasterFormat (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IRasterConvertParameters * Param,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("1af590a9-c339-477a-9f22-799c04d20bb4"))
IBaseLeader : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum ksArrowEnum ArrowType;

    //
    // Wrapper methods for error-handling
    //

    enum ksArrowEnum GetArrowType ( );
    void PutArrowType (
        enum ksArrowEnum Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum ksArrowEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum ksArrowEnum Result ) = 0;
};

struct __declspec(uuid("ba2d820c-0db9-47c6-a32d-34c7d8ba1b2f"))
ILeaders : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLeader))
    IBaseLeaderPtr Leader[];

    //
    // Wrapper methods for error-handling
    //

    IBaseLeaderPtr GetLeader (
        const _variant_t & Index );
    IBaseLeaderPtr Add (
        enum DrawingObjectTypeEnum DimType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Leader (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBaseLeader * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum DrawingObjectTypeEnum DimType,
        /*[out,retval]*/ struct IBaseLeader * * Value ) = 0;
};

struct __declspec(uuid("8f1a7123-bd4a-4a49-8e22-1502d59b1fe6"))
IFindObjectParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFindObjectsType,put=PutFindObjectsType))
    enum ksFindObjectsTypeEnum FindObjectsType;
    __declspec(property(get=GetDrawingObjectType,put=PutDrawingObjectType))
    enum DrawingObjectTypeEnum DrawingObjectType;
    __declspec(property(get=GetFindInBackgroundViewsAndLayers,put=PutFindInBackgroundViewsAndLayers))
    VARIANT_BOOL FindInBackgroundViewsAndLayers;
    __declspec(property(get=GetGeometryOnly,put=PutGeometryOnly))
    VARIANT_BOOL GeometryOnly;
    __declspec(property(get=GetDisabledObjects,put=PutDisabledObjects))
    _variant_t DisabledObjects;
    __declspec(property(get=GetDisabledViews,put=PutDisabledViews))
    _variant_t DisabledViews;

    //
    // Wrapper methods for error-handling
    //

    void PutFindObjectsType (
        enum ksFindObjectsTypeEnum PVal );
    enum ksFindObjectsTypeEnum GetFindObjectsType ( );
    void PutDrawingObjectType (
        enum DrawingObjectTypeEnum Type );
    enum DrawingObjectTypeEnum GetDrawingObjectType ( );
    void PutFindInBackgroundViewsAndLayers (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFindInBackgroundViewsAndLayers ( );
    void PutGeometryOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetGeometryOnly ( );
    void PutDisabledObjects (
        const _variant_t & PVal );
    _variant_t GetDisabledObjects ( );
    void PutDisabledViews (
        const _variant_t & PVal );
    _variant_t GetDisabledViews ( );
    VARIANT_BOOL Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_FindObjectsType (
        /*[in]*/ enum ksFindObjectsTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_FindObjectsType (
        /*[out,retval]*/ enum ksFindObjectsTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DrawingObjectType (
        /*[in]*/ enum DrawingObjectTypeEnum Type ) = 0;
      virtual HRESULT __stdcall get_DrawingObjectType (
        /*[out,retval]*/ enum DrawingObjectTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall put_FindInBackgroundViewsAndLayers (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FindInBackgroundViewsAndLayers (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_GeometryOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_GeometryOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DisabledObjects (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_DisabledObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_DisabledViews (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_DisabledViews (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("b21c70c9-53ec-4bb7-a9db-bce852ca6716"))
IMacroObject : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLibraryFileName,put=PutLibraryFileName))
    _bstr_t LibraryFileName;
    __declspec(property(get=GetLibraryName,put=PutLibraryName))
    _bstr_t LibraryName;
    __declspec(property(get=GetCommand,put=PutCommand))
    long Command;
    __declspec(property(get=GetDoubleClickEditable,put=PutDoubleClickEditable))
    VARIANT_BOOL DoubleClickEditable;
    __declspec(property(get=GetHotPointsEditable,put=PutHotPointsEditable))
    VARIANT_BOOL HotPointsEditable;
    __declspec(property(get=GetExternalEditable,put=PutExternalEditable))
    VARIANT_BOOL ExternalEditable;
    __declspec(property(get=GetUserParams,put=PutUserParams))
    _variant_t UserParams;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAttachedLeaders))
    ILeadersPtr AttachedLeaders;
    __declspec(property(get=GetPropertyObjectEditable,put=PutPropertyObjectEditable))
    VARIANT_BOOL PropertyObjectEditable;
    __declspec(property(get=GetCreateSpcObjects,put=PutCreateSpcObjects))
    VARIANT_BOOL CreateSpcObjects;
    __declspec(property(get=GetBreakObjectsEnabled,put=PutBreakObjectsEnabled))
    VARIANT_BOOL BreakObjectsEnabled;
    __declspec(property(get=GetLabel))
    _bstr_t Label;

    //
    // Wrapper methods for error-handling
    //

    void PutLibraryFileName (
        _bstr_t PVal );
    _bstr_t GetLibraryFileName ( );
    void PutLibraryName (
        _bstr_t PVal );
    _bstr_t GetLibraryName ( );
    void PutCommand (
        long PVal );
    long GetCommand ( );
    void PutDoubleClickEditable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDoubleClickEditable ( );
    void PutHotPointsEditable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHotPointsEditable ( );
    void PutExternalEditable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetExternalEditable ( );
    void PutUserParams (
        const _variant_t & PVal );
    _variant_t GetUserParams ( );
    VARIANT_BOOL AddObjects (
        const _variant_t & Objects );
    VARIANT_BOOL GetPlacement (
        double * X,
        double * Y,
        double * Angle,
        VARIANT_BOOL * MirrorSymmetry );
    VARIANT_BOOL SetPlacement (
        double X,
        double Y,
        double Angle,
        VARIANT_BOOL * MirrorSymmetry,
        VARIANT_BOOL Relative );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    ILeadersPtr GetAttachedLeaders ( );
    VARIANT_BOOL DeleteAttachedLeaders ( );
    VARIANT_BOOL AddDefaultHotPoint (
        double X,
        double Y );
    VARIANT_BOOL DeleteDefaultHotPoint ( );
    void PutPropertyObjectEditable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPropertyObjectEditable ( );
    void PutCreateSpcObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateSpcObjects ( );
    void PutBreakObjectsEnabled (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBreakObjectsEnabled ( );
    IDrawingObjectPtr FindObject (
        double X,
        double Y,
        double Limit,
        struct IFindObjectParameters * Param );
    _bstr_t GetLabel ( );
    VARIANT_BOOL TransformPointToView (
        double * X,
        double * Y );
    VARIANT_BOOL TransformPointFromView (
        double * X,
        double * Y );
    VARIANT_BOOL TransformAngleToView (
        double * Angle );
    VARIANT_BOOL TransformAngleFromView (
        double * Angle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LibraryFileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_LibraryName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Command (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Command (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_DoubleClickEditable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DoubleClickEditable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HotPointsEditable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HotPointsEditable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ExternalEditable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ExternalEditable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UserParams (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_UserParams (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddObjects (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPlacement (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Angle,
        /*[out]*/ VARIANT_BOOL * MirrorSymmetry,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPlacement (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Angle,
        /*[in]*/ VARIANT_BOOL * MirrorSymmetry,
        /*[in]*/ VARIANT_BOOL Relative,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_AttachedLeaders (
        /*[out,retval]*/ struct ILeaders * * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteAttachedLeaders (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddDefaultHotPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteDefaultHotPoint (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_PropertyObjectEditable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyObjectEditable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CreateSpcObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateSpcObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakObjectsEnabled (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BreakObjectsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_FindObject (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Limit,
        /*[in]*/ struct IFindObjectParameters * Param,
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_TransformPointToView (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_TransformPointFromView (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_TransformAngleToView (
        /*[in,out]*/ double * Angle,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_TransformAngleFromView (
        /*[in,out]*/ double * Angle,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("2c96acb2-4877-45d9-b62d-78bbad704458"))
IDrawingGroup : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetObjects))
    _variant_t Objects[];
    __declspec(property(get=GetObjectsCount))
    long ObjectsCount;
    __declspec(property(get=GetCurrent))
    VARIANT_BOOL Current;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    _variant_t GetObjects (
        const _variant_t & Type );
    VARIANT_BOOL AddObjects (
        const _variant_t & Objects );
    VARIANT_BOOL DetachObjects (
        const _variant_t & Objects,
        VARIANT_BOOL DeleteTmp );
    VARIANT_BOOL Clear (
        VARIANT_BOOL DeleteTmp );
    VARIANT_BOOL Store ( );
    long GetObjectsCount ( );
    VARIANT_BOOL ExistObject (
        struct IDrawingObject * Object );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL AddRegion (
        enum ksRegionTypeEnum RegionType,
        double XMin,
        double YMin,
        double XMax,
        double YMax );
    VARIANT_BOOL ReadFragment (
        _bstr_t FileName,
        VARIANT_BOOL CurentLayer,
        double XBase,
        double YBase,
        double Scale,
        double Angle,
        VARIANT_BOOL ScaleProjLinesSize );
    VARIANT_BOOL WriteFragment (
        _bstr_t FileName,
        _bstr_t Comment,
        double XBase,
        double YBase );
    VARIANT_BOOL WriteToClip (
        VARIANT_BOOL AttrCopy,
        VARIANT_BOOL SpcObjCopy );
    VARIANT_BOOL ReadFromClip (
        VARIANT_BOOL AttrCopy,
        VARIANT_BOOL SpcObjCopy );
    VARIANT_BOOL Draw (
        OLE_HANDLE HWnd );
    VARIANT_BOOL Open ( );
    VARIANT_BOOL Close ( );
    VARIANT_BOOL GetCurrent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Objects (
        /*[in]*/ VARIANT Type,
        /*[out,retval]*/ VARIANT * Objects ) = 0;
      virtual HRESULT __stdcall raw_AddObjects (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DetachObjects (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ VARIANT_BOOL DeleteTmp,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[in]*/ VARIANT_BOOL DeleteTmp,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Store (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ObjectsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_ExistObject (
        /*[in]*/ struct IDrawingObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddRegion (
        /*[in]*/ enum ksRegionTypeEnum RegionType,
        /*[in]*/ double XMin,
        /*[in]*/ double YMin,
        /*[in]*/ double XMax,
        /*[in]*/ double YMax,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ReadFragment (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL CurentLayer,
        /*[in]*/ double XBase,
        /*[in]*/ double YBase,
        /*[in]*/ double Scale,
        /*[in]*/ double Angle,
        /*[in]*/ VARIANT_BOOL ScaleProjLinesSize,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_WriteFragment (
        /*[in]*/ BSTR FileName,
        BSTR Comment,
        /*[in]*/ double XBase,
        /*[in]*/ double YBase,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_WriteToClip (
        /*[in]*/ VARIANT_BOOL AttrCopy,
        /*[in]*/ VARIANT_BOOL SpcObjCopy,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ReadFromClip (
        /*[in]*/ VARIANT_BOOL AttrCopy,
        /*[in]*/ VARIANT_BOOL SpcObjCopy,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Draw (
        /*[in]*/ OLE_HANDLE HWnd,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("0ed06421-907c-4ef0-89f7-aefc81bef1df"))
IDrawingGroups : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDrawingGroupPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IDrawingGroupPtr GetItem (
        const _variant_t & Index );
    IDrawingGroupPtr Add (
        VARIANT_BOOL Temp,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDrawingGroup * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT_BOOL Temp,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IDrawingGroup * * Result ) = 0;
};

struct __declspec(uuid("58e1baca-32d5-4eab-87e9-d14816dac29f"))
ICopyObjectParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXOld,put=PutXOld))
    double XOld;
    __declspec(property(get=GetYOld,put=PutYOld))
    double YOld;
    __declspec(property(get=GetXNew,put=PutXNew))
    double XNew;
    __declspec(property(get=GetYNew,put=PutYNew))
    double YNew;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetAttributeCopy,put=PutAttributeCopy))
    VARIANT_BOOL AttributeCopy;
    __declspec(property(get=GetDimensionLineScale,put=PutDimensionLineScale))
    VARIANT_BOOL DimensionLineScale;
    __declspec(property(get=GetSpecificationObjectCopy,put=PutSpecificationObjectCopy))
    VARIANT_BOOL SpecificationObjectCopy;

    //
    // Wrapper methods for error-handling
    //

    void PutXOld (
        double PVal );
    double GetXOld ( );
    void PutYOld (
        double PVal );
    double GetYOld ( );
    void PutXNew (
        double PVal );
    double GetXNew ( );
    void PutYNew (
        double PVal );
    double GetYNew ( );
    void PutScale (
        double PVal );
    double GetScale ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutAttributeCopy (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAttributeCopy ( );
    void PutDimensionLineScale (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDimensionLineScale ( );
    void PutSpecificationObjectCopy (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSpecificationObjectCopy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_XOld (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_XOld (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_YOld (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_YOld (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_XNew (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_XNew (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_YNew (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_YNew (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AttributeCopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeCopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionLineScale (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLineScale (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SpecificationObjectCopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SpecificationObjectCopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("a6e4f3b6-0554-4a67-a700-428090a6739a"))
IPhantom2D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPhantomType,put=PutPhantomType))
    enum ksPhantomTypeEnum PhantomType;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetPhantomGroup,put=PutPhantomGroup))
    IDrawingGroupPtr PhantomGroup;
    __declspec(property(get=GetHorizontal,put=PutHorizontal))
    VARIANT_BOOL Horizontal;

    //
    // Wrapper methods for error-handling
    //

    void PutPhantomType (
        enum ksPhantomTypeEnum PVal );
    enum ksPhantomTypeEnum GetPhantomType ( );
    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutScale (
        double PVal );
    double GetScale ( );
    void PutPhantomGroup (
        struct IDrawingGroup * PVal );
    IDrawingGroupPtr GetPhantomGroup ( );
    void PutHorizontal (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHorizontal ( );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Show ( );
    VARIANT_BOOL Hide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PhantomType (
        /*[in]*/ enum ksPhantomTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PhantomType (
        /*[out,retval]*/ enum ksPhantomTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_PhantomGroup (
        /*[in]*/ struct IDrawingGroup * PVal ) = 0;
      virtual HRESULT __stdcall get_PhantomGroup (
        /*[out,retval]*/ struct IDrawingGroup * * PVal ) = 0;
      virtual HRESULT __stdcall put_Horizontal (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Horizontal (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Hide (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("c74d7419-0970-4904-907c-dcc5407c59b0"))
IProcess2D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetPhantom2D))
    IPhantom2DPtr Phantom2D;

    //
    // Wrapper methods for error-handling
    //

    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    IPhantom2DPtr GetPhantom2D ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Phantom2D (
        /*[out,retval]*/ struct IPhantom2D * * PVal ) = 0;
};

struct __declspec(uuid("fb57f1c4-44fe-4c73-9b15-87241e8735b5"))
IKompasDocument2D1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVariables))
    _variant_t Variables[];
    __declspec(property(get=GetVariable))
    IVariable7Ptr Variable[][];
    __declspec(property(get=GetVariablesCount))
    long VariablesCount[];
    __declspec(property(get=GetVariableTable))
    IVariableTablePtr VariableTable;
    __declspec(property(get=GetEditMacroVisibleRegime))
    VARIANT_BOOL EditMacroVisibleRegime;
    __declspec(property(get=GetLibProcess))
    IProcess2DPtr LibProcess[];
    __declspec(property(get=GetIntervalVariables))
    _variant_t IntervalVariables;
    __declspec(property(get=GetIntervalVariable))
    IVariable7Ptr IntervalVariable[];
    __declspec(property(get=GetUserFuncVariables))
    _variant_t UserFuncVariables;
    __declspec(property(get=GetUserFuncVariable))
    IVariable7Ptr UserFuncVariable[];
    __declspec(property(get=GetEnableUndo,put=PutEnableUndo))
    VARIANT_BOOL EnableUndo;
    __declspec(property(get=GetEditMacroObject))
    IMacroObjectPtr EditMacroObject;
    __declspec(property(get=GetDrawingGroups))
    IDrawingGroupsPtr DrawingGroups;
    __declspec(property(get=GetNamedGroups))
    IDrawingGroupsPtr NamedGroups;
    __declspec(property(get=GetCurrentGroup))
    IDrawingGroupPtr CurrentGroup;
    __declspec(property(get=GetSelectionManager))
    ISelectionManagerPtr SelectionManager;
    __declspec(property(get=GetChooseManager))
    IChooseManagerPtr ChooseManager;
    __declspec(property(get=GetUndoContainer,put=PutUndoContainer))
    VARIANT_BOOL UndoContainer;

    //
    // Wrapper methods for error-handling
    //

    IMacroObjectPtr GetEditMacroObject ( );
    IDrawingGroupsPtr GetDrawingGroups ( );
    IDrawingGroupsPtr GetNamedGroups ( );
    IDrawingGroupPtr GetCurrentGroup ( );
    ISelectionManagerPtr GetSelectionManager ( );
    IChooseManagerPtr GetChooseManager ( );
    _variant_t CopyObjects (
        const _variant_t & Objects,
        struct ICopyObjectParam * Params );
    _variant_t GetVariables (
        VARIANT_BOOL ExternalOnly );
    IVariable7Ptr GetVariable (
        VARIANT_BOOL External,
        const _variant_t & Index );
    long GetVariablesCount (
        VARIANT_BOOL External );
    VARIANT_BOOL UpdateVariables ( );
    IVariableTablePtr GetVariableTable ( );
    VARIANT_BOOL IsVariableNameValid (
        _bstr_t Name );
    IVariable7Ptr AddVariable (
        _bstr_t Name,
        double Value,
        _bstr_t Note );
    VARIANT_BOOL RebuildDocument ( );
    VARIANT_BOOL CreateHyperLink (
        const _variant_t & Objects,
        enum ksHyperLinkTypeEnum Type,
        _bstr_t Text,
        struct IDrawingObject * LinkObject,
        long Level );
    _variant_t GetHyperLinkObjects (
        enum ksHyperLinkTypeEnum Type,
        struct IDrawingObject * LinkObject,
        long Level,
        _bstr_t Text );
    VARIANT_BOOL DeleteHyperLinks (
        const _variant_t & Objects );
    VARIANT_BOOL GetEditMacroVisibleRegime ( );
    IDrawingObjectPtr GetObjectById (
        __int64 Id );
    IProcess2DPtr GetLibProcess (
        enum ksProcess2DTypeEnum ProcessType );
    IDrawingObjectPtr FindObject (
        double X,
        double Y,
        double Limit,
        struct IFindObjectParameters * Param );
    _variant_t FindObjects (
        double X,
        double Y,
        double Limit,
        struct IFindObjectParameters * Param );
    _variant_t SelectObjects (
        enum ksRegionTypeEnum RegionType,
        double XMin,
        double YMin,
        double XMax,
        double YMax );
    _variant_t GetIntervalVariables ( );
    IVariable7Ptr AddIntervalVariable (
        _bstr_t Name,
        double FirstValue,
        double SecondValue );
    IVariable7Ptr GetIntervalVariable (
        const _variant_t & Index );
    _variant_t GetUserFuncVariables ( );
    IVariable7Ptr AddUserFuncVariable (
        _bstr_t Name,
        _bstr_t Expression );
    IVariable7Ptr GetUserFuncVariable (
        const _variant_t & Index );
    VARIANT_BOOL ClearUndo ( );
    void PutEnableUndo (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableUndo ( );
    void PutUndoContainer (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUndoContainer ( );
    VARIANT_BOOL CompleteRebuildDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EditMacroObject (
        /*[out,retval]*/ struct IMacroObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_DrawingGroups (
        /*[out,retval]*/ struct IDrawingGroups * * PVal ) = 0;
      virtual HRESULT __stdcall get_NamedGroups (
        /*[out,retval]*/ struct IDrawingGroups * * PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentGroup (
        /*[out,retval]*/ struct IDrawingGroup * * PVal ) = 0;
      virtual HRESULT __stdcall get_SelectionManager (
        /*[out,retval]*/ struct ISelectionManager * * PVal ) = 0;
      virtual HRESULT __stdcall get_ChooseManager (
        /*[out,retval]*/ struct IChooseManager * * PVal ) = 0;
      virtual HRESULT __stdcall raw_CopyObjects (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ struct ICopyObjectParam * Params,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[in]*/ VARIANT_BOOL ExternalOnly,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Variable (
        /*[in]*/ VARIANT_BOOL External,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_VariablesCount (
        /*[in]*/ VARIANT_BOOL External,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_UpdateVariables (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_VariableTable (
        /*[out,retval]*/ struct IVariableTable * * Result ) = 0;
      virtual HRESULT __stdcall raw_IsVariableNameValid (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddVariable (
        /*[in]*/ BSTR Name,
        /*[in]*/ double Value,
        /*[in]*/ BSTR Note,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_RebuildDocument (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_CreateHyperLink (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ enum ksHyperLinkTypeEnum Type,
        /*[in]*/ BSTR Text,
        /*[in]*/ struct IDrawingObject * LinkObject,
        /*[in]*/ long Level,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetHyperLinkObjects (
        /*[in]*/ enum ksHyperLinkTypeEnum Type,
        /*[in]*/ struct IDrawingObject * LinkObject,
        /*[in]*/ long Level,
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteHyperLinks (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EditMacroVisibleRegime (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetObjectById (
        /*[in]*/ __int64 Id,
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall get_LibProcess (
        /*[in]*/ enum ksProcess2DTypeEnum ProcessType,
        /*[out,retval]*/ struct IProcess2D * * Result ) = 0;
      virtual HRESULT __stdcall raw_FindObject (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Limit,
        /*[in]*/ struct IFindObjectParameters * Param,
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_FindObjects (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Limit,
        /*[in]*/ struct IFindObjectParameters * Param,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_SelectObjects (
        /*[in]*/ enum ksRegionTypeEnum RegionType,
        /*[in]*/ double XMin,
        /*[in]*/ double YMin,
        /*[in]*/ double XMax,
        /*[in]*/ double YMax,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_IntervalVariables (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_AddIntervalVariable (
        /*[in]*/ BSTR Name,
        /*[in]*/ double FirstValue,
        /*[in]*/ double SecondValue,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_IntervalVariable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_UserFuncVariables (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_AddUserFuncVariable (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Expression,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_UserFuncVariable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearUndo (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_EnableUndo (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableUndo (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UndoContainer (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UndoContainer (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_CompleteRebuildDocument (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("d8adf279-1cac-4a2a-911b-9a44378407a0"))
ILayer3D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNumber,put=PutNumber))
    long Number;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCurrent,put=PutCurrent))
    VARIANT_BOOL Current;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetEditable,put=PutEditable))
    VARIANT_BOOL Editable;
    __declspec(property(get=GetProjected,put=PutProjected))
    VARIANT_BOOL Projected;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    long GetNumber ( );
    void PutNumber (
        long PVal );
    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutCurrent (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCurrent ( );
    void PutColor (
        long PVal );
    long GetColor ( );
    void PutComment (
        _bstr_t PVal );
    _bstr_t GetComment ( );
    void PutEditable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEditable ( );
    void PutProjected (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetProjected ( );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Number (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Projected (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Projected (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("d637078b-6498-40b6-9f41-83ed1ea40d1f"))
ILayers3D : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetLayer3D))
    ILayer3DPtr Layer3D[];
    __declspec(property(get=GetLayer3DByNumber))
    ILayer3DPtr Layer3DByNumber[];

    //
    // Wrapper methods for error-handling
    //

    ILayer3DPtr GetLayer3D (
        const _variant_t & Index );
    ILayer3DPtr GetLayer3DByNumber (
        long Number );
    ILayer3DPtr Add ( );
    VARIANT_BOOL Attach (
        struct ILayer3D * PVal );
    VARIANT_BOOL Detach (
        struct ILayer3D * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Layer3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILayer3D * * Result ) = 0;
      virtual HRESULT __stdcall get_Layer3DByNumber (
        /*[in]*/ long Number,
        /*[out,retval]*/ struct ILayer3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILayer3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Attach (
        /*[in]*/ struct ILayer3D * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Detach (
        /*[in]*/ struct ILayer3D * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("606fd023-3944-4215-a426-1e4eb82a8e32"))
IBaseManipulator : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetManipulatorType))
    enum ksManipulatorTypeEnum ManipulatorType;
    __declspec(property(get=GetId,put=PutId))
    long Id;
    __declspec(property(get=GetPlacement))
    IPlacement3DPtr Placement;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;

    //
    // Wrapper methods for error-handling
    //

    enum ksManipulatorTypeEnum GetManipulatorType ( );
    long GetId ( );
    void PutId (
        long PVal );
    IPlacement3DPtr GetPlacement ( );
    VARIANT_BOOL UpdatePlacement (
        VARIANT_BOOL Redraw );
    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    void PutActive (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetActive ( );
    VARIANT_BOOL Create ( );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ManipulatorType (
        /*[out,retval]*/ enum ksManipulatorTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ struct IPlacement3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_UpdatePlacement (
        /*[in]*/ VARIANT_BOOL Redraw,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
};

struct __declspec(uuid("5fbb9528-b629-46de-8ba6-13c5872bdd15"))
IManipulators : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IBaseManipulatorPtr Item[];
    __declspec(property(get=GetManipulator))
    IBaseManipulatorPtr Manipulator[];

    //
    // Wrapper methods for error-handling
    //

    IBaseManipulatorPtr GetItem (
        const _variant_t & Index );
    IBaseManipulatorPtr GetManipulator (
        long Id );
    IBaseManipulatorPtr Add (
        enum ksManipulatorTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBaseManipulator * * Result ) = 0;
      virtual HRESULT __stdcall get_Manipulator (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IBaseManipulator * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum ksManipulatorTypeEnum Type,
        /*[out,retval]*/ struct IBaseManipulator * * PControl ) = 0;
};

struct __declspec(uuid("77730022-3179-4674-ae49-604fabc0b6b1"))
IProcess3D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement))
    IPlacement3DPtr Placement;
    __declspec(property(get=GetPhantomObject,put=PutPhantomObject))
    IModelObjectPtr PhantomObject;
    __declspec(property(get=GetMateConstraintsObjects,put=PutMateConstraintsObjects))
    _variant_t MateConstraintsObjects;
    __declspec(property(get=GetMateConstraints))
    IMateConstraints3DPtr MateConstraints;
    __declspec(property(get=GetTakeProcessObject,put=PutTakeProcessObject))
    IModelObjectPtr TakeProcessObject;
    __declspec(property(get=GetManipulators))
    IManipulatorsPtr Manipulators;
    __declspec(property(get=GetSelectionBandMode,put=PutSelectionBandMode))
    enum ksSelectionBandMode SelectionBandMode;
    __declspec(property(get=GetObjectsFilter3D,put=PutObjectsFilter3D))
    VARIANT_BOOL ObjectsFilter3D[];
    __declspec(property(get=GetClearProcessUndo,put=PutClearProcessUndo))
    VARIANT_BOOL ClearProcessUndo;

    //
    // Wrapper methods for error-handling
    //

    IPlacement3DPtr GetPlacement ( );
    IModelObjectPtr GetPhantomObject ( );
    void PutPhantomObject (
        struct IModelObject * PVal );
    _variant_t GetMateConstraintsObjects ( );
    void PutMateConstraintsObjects (
        const _variant_t & PVal );
    IMateConstraints3DPtr GetMateConstraints ( );
    VARIANT_BOOL RunTakeCreateObjectProcess (
        enum ProcessTypeEnum ProcessType,
        struct IModelObject * TakeObject,
        VARIANT_BOOL NeedCreateTakeObj,
        VARIANT_BOOL LostTakeObj );
    IModelObjectPtr GetTakeProcessObject ( );
    void PutTakeProcessObject (
        struct IModelObject * PVal );
    IManipulatorsPtr GetManipulators ( );
    void PutSelectionBandMode (
        enum ksSelectionBandMode PVal );
    enum ksSelectionBandMode GetSelectionBandMode ( );
    void PutObjectsFilter3D (
        enum ksProcessObjectsFilter3DEnum Type,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetObjectsFilter3D (
        enum ksProcessObjectsFilter3DEnum Type );
    VARIANT_BOOL GetClearProcessUndo ( );
    void PutClearProcessUndo (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ struct IPlacement3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_PhantomObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_PhantomObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_MateConstraintsObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_MateConstraintsObjects (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_MateConstraints (
        /*[out,retval]*/ struct IMateConstraints3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_RunTakeCreateObjectProcess (
        /*[in]*/ enum ProcessTypeEnum ProcessType,
        /*[in]*/ struct IModelObject * TakeObject,
        /*[in]*/ VARIANT_BOOL NeedCreateTakeObj,
        /*[in]*/ VARIANT_BOOL LostTakeObj,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_TakeProcessObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_TakeProcessObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Manipulators (
        /*[out,retval]*/ struct IManipulators * * Result ) = 0;
      virtual HRESULT __stdcall put_SelectionBandMode (
        /*[in]*/ enum ksSelectionBandMode PVal ) = 0;
      virtual HRESULT __stdcall get_SelectionBandMode (
        /*[out,retval]*/ enum ksSelectionBandMode * PVal ) = 0;
      virtual HRESULT __stdcall put_ObjectsFilter3D (
        /*[in]*/ enum ksProcessObjectsFilter3DEnum Type,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectsFilter3D (
        /*[in]*/ enum ksProcessObjectsFilter3DEnum Type,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ClearProcessUndo (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ClearProcessUndo (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("02e973e5-5f36-4bb9-93b7-ce9b21d95324"))
IFindObject3DParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetModelObjectType,put=PutModelObjectType))
    ksObj3dTypeEnum ModelObjectType;

    //
    // Wrapper methods for error-handling
    //

    void PutModelObjectType (
        ksObj3dTypeEnum Type );
    ksObj3dTypeEnum GetModelObjectType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ModelObjectType (
        /*[in]*/ ksObj3dTypeEnum Type ) = 0;
      virtual HRESULT __stdcall get_ModelObjectType (
        /*[out,retval]*/ ksObj3dTypeEnum * Type ) = 0;
};

struct __declspec(uuid("d723aac1-0315-4aed-99bf-88a7e55b6e6d"))
ISpecRough : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAutoPlacement,put=PutAutoPlacement))
    VARIANT_BOOL AutoPlacement;
    __declspec(property(get=GetSignType,put=PutSignType))
    enum ksRoughSignEnum SignType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetAddSign,put=PutAddSign))
    VARIANT_BOOL AddSign;
    __declspec(property(get=GetIsCreated))
    VARIANT_BOOL IsCreated;
    __declspec(property(get=GetCrossed))
    VARIANT_BOOL Crossed;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Result );
    double GetY ( );
    void PutY (
        double Result );
    void PutAutoPlacement (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoPlacement ( );
    enum ksRoughSignEnum GetSignType ( );
    void PutSignType (
        enum ksRoughSignEnum Result );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t PVal );
    double GetDistance ( );
    void PutDistance (
        double PVal );
    VARIANT_BOOL GetAddSign ( );
    void PutAddSign (
        VARIANT_BOOL PRes );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL GetIsCreated ( );
    VARIANT_BOOL GetCrossed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall put_AutoPlacement (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoPlacement (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_SignType (
        /*[out,retval]*/ enum ksRoughSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_SignType (
        /*[in]*/ enum ksRoughSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_AddSign (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall put_AddSign (
        /*[in]*/ VARIANT_BOOL PRes ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_IsCreated (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Crossed (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
};

struct __declspec(uuid("18c80ae5-bf92-482a-9c56-3d1638f5e5f5"))
ITechnicalDemand : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetBlocksGabarits,put=PutBlocksGabarits))
    _variant_t BlocksGabarits;
    __declspec(property(get=GetAutoPlacement,put=PutAutoPlacement))
    VARIANT_BOOL AutoPlacement;
    __declspec(property(get=GetIsCreated))
    VARIANT_BOOL IsCreated;
    __declspec(property(get=GetBlocksStartLineNumbers))
    _variant_t BlocksStartLineNumbers;

    //
    // Wrapper methods for error-handling
    //

    ITextPtr GetText ( );
    _variant_t GetBlocksGabarits ( );
    void PutBlocksGabarits (
        const _variant_t & PVal );
    void PutAutoPlacement (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoPlacement ( );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL GetIsCreated ( );
    _variant_t GetBlocksStartLineNumbers ( );
    VARIANT_BOOL Synchronize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_BlocksGabarits (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_BlocksGabarits (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall put_AutoPlacement (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoPlacement (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_IsCreated (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BlocksStartLineNumbers (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_Synchronize (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
};

struct __declspec(uuid("e0197ba7-c3fb-44a3-9c13-49115a150ed2"))
IDimensionText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHighDeviation))
    ITextLinePtr HighDeviation;
    __declspec(property(get=GetLowDeviation))
    ITextLinePtr LowDeviation;
    __declspec(property(get=GetUnit))
    ITextLinePtr Unit;
    __declspec(property(get=GetSuffix))
    ITextLinePtr Suffix;
    __declspec(property(get=GetTextUnder))
    ITextPtr TextUnder;
    __declspec(property(get=GetTextFormat,put=PutTextFormat))
    enum ksDimTextFormatEnum TextFormat;
    __declspec(property(get=GetHasTolerance,put=PutHasTolerance))
    VARIANT_BOOL HasTolerance;
    __declspec(property(get=GetHighDeviationValue))
    double HighDeviationValue;
    __declspec(property(get=GetLowDeviationValue))
    double LowDeviationValue;
    __declspec(property(get=GetAccuracy,put=PutAccuracy))
    enum ksAccuracyEnum Accuracy;
    __declspec(property(get=GetAccuracyDecimalsCount))
    long AccuracyDecimalsCount;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetSign,put=PutSign))
    long Sign;
    __declspec(property(get=GetSignFont,put=PutSignFont))
    _bstr_t SignFont;
    __declspec(property(get=GetNominalValue,put=PutNominalValue))
    double NominalValue;
    __declspec(property(get=GetAutoNominalValue,put=PutAutoNominalValue))
    VARIANT_BOOL AutoNominalValue;
    __declspec(property(get=GetToleranceOn,put=PutToleranceOn))
    VARIANT_BOOL ToleranceOn;
    __declspec(property(get=GetDeviationOn,put=PutDeviationOn))
    VARIANT_BOOL DeviationOn;
    __declspec(property(get=GetDeviationType,put=PutDeviationType))
    enum ksDimensionDeviationEnum DeviationType;
    __declspec(property(get=GetRectangle,put=PutRectangle))
    VARIANT_BOOL Rectangle;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetBrackets,put=PutBrackets))
    enum ksDimensionTextBracketsEnum Brackets;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum ksDimensionTextAlignEnum TextAlign;
    __declspec(property(get=GetPrefix))
    ITextLinePtr Prefix;
    __declspec(property(get=GetNominalText))
    ITextLinePtr NominalText;
    __declspec(property(get=GetTolerance,put=PutTolerance))
    _bstr_t Tolerance;

    //
    // Wrapper methods for error-handling
    //

    long GetStyle ( );
    void PutStyle (
        long Result );
    long GetSign ( );
    void PutSign (
        long Result );
    _bstr_t GetSignFont ( );
    void PutSignFont (
        _bstr_t Result );
    double GetNominalValue ( );
    void PutNominalValue (
        double Result );
    VARIANT_BOOL GetAutoNominalValue ( );
    void PutAutoNominalValue (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetToleranceOn ( );
    void PutToleranceOn (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetDeviationOn ( );
    void PutDeviationOn (
        VARIANT_BOOL Result );
    enum ksDimensionDeviationEnum GetDeviationType ( );
    void PutDeviationType (
        enum ksDimensionDeviationEnum Result );
    VARIANT_BOOL GetRectangle ( );
    void PutRectangle (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetUnderline ( );
    void PutUnderline (
        VARIANT_BOOL Result );
    enum ksDimensionTextBracketsEnum GetBrackets ( );
    void PutBrackets (
        enum ksDimensionTextBracketsEnum Result );
    enum ksDimensionTextAlignEnum GetTextAlign ( );
    void PutTextAlign (
        enum ksDimensionTextAlignEnum Result );
    ITextLinePtr GetPrefix ( );
    ITextLinePtr GetNominalText ( );
    _bstr_t GetTolerance ( );
    void PutTolerance (
        _bstr_t PVal );
    ITextLinePtr GetHighDeviation ( );
    ITextLinePtr GetLowDeviation ( );
    ITextLinePtr GetUnit ( );
    ITextLinePtr GetSuffix ( );
    ITextPtr GetTextUnder ( );
    enum ksDimTextFormatEnum GetTextFormat ( );
    void PutTextFormat (
        enum ksDimTextFormatEnum PVal );
    VARIANT_BOOL GetHasTolerance ( );
    void PutHasTolerance (
        VARIANT_BOOL Result );
    double GetHighDeviationValue ( );
    double GetLowDeviationValue ( );
    VARIANT_BOOL InitDeviations (
        double HighDeviationValue,
        double LowDeviationValue );
    enum ksAccuracyEnum GetAccuracy ( );
    void PutAccuracy (
        enum ksAccuracyEnum Result );
    long GetAccuracyDecimalsCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_Sign (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Sign (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_SignFont (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_SignFont (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_NominalValue (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_NominalValue (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_AutoNominalValue (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoNominalValue (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ToleranceOn (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ToleranceOn (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_DeviationOn (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_DeviationOn (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_DeviationType (
        /*[out,retval]*/ enum ksDimensionDeviationEnum * Result ) = 0;
      virtual HRESULT __stdcall put_DeviationType (
        /*[in]*/ enum ksDimensionDeviationEnum Result ) = 0;
      virtual HRESULT __stdcall get_Rectangle (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Rectangle (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Brackets (
        /*[out,retval]*/ enum ksDimensionTextBracketsEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Brackets (
        /*[in]*/ enum ksDimensionTextBracketsEnum Result ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum ksDimensionTextAlignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum ksDimensionTextAlignEnum Result ) = 0;
      virtual HRESULT __stdcall get_Prefix (
        /*[out,retval]*/ struct ITextLine * * PVal ) = 0;
      virtual HRESULT __stdcall get_NominalText (
        /*[out,retval]*/ struct ITextLine * * PVal ) = 0;
      virtual HRESULT __stdcall get_Tolerance (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Tolerance (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_HighDeviation (
        /*[out,retval]*/ struct ITextLine * * PVal ) = 0;
      virtual HRESULT __stdcall get_LowDeviation (
        /*[out,retval]*/ struct ITextLine * * PVal ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ struct ITextLine * * PVal ) = 0;
      virtual HRESULT __stdcall get_Suffix (
        /*[out,retval]*/ struct ITextLine * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextUnder (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextFormat (
        /*[out,retval]*/ enum ksDimTextFormatEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_TextFormat (
        /*[in]*/ enum ksDimTextFormatEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HasTolerance (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_HasTolerance (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_HighDeviationValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_LowDeviationValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_InitDeviations (
        /*[in]*/ double HighDeviationValue,
        /*[in]*/ double LowDeviationValue,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Accuracy (
        /*[out,retval]*/ enum ksAccuracyEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Accuracy (
        /*[in]*/ enum ksAccuracyEnum Result ) = 0;
      virtual HRESULT __stdcall get_AccuracyDecimalsCount (
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("5378690e-a57d-473f-84dc-ca508b34fad7"))
IAttrTypeMng : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAttributeTypePtr CreateAttrType (
        const _variant_t & Libname );
    IAttributeTypePtr GetAttrType (
        double AttrID,
        const _variant_t & Libname );
    IAttributeTypePtr ChoiceAttrTypes (
        OLE_HANDLE HWnd,
        const _variant_t & Libname );
    _variant_t GetAttrTypes (
        const _variant_t & Libname );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateAttrType (
        /*[in]*/ VARIANT Libname,
        /*[out,retval]*/ struct IAttributeType * * Res ) = 0;
      virtual HRESULT __stdcall raw_GetAttrType (
        /*[in]*/ double AttrID,
        /*[in]*/ VARIANT Libname,
        /*[out,retval]*/ struct IAttributeType * * Res ) = 0;
      virtual HRESULT __stdcall raw_ChoiceAttrTypes (
        /*[in]*/ OLE_HANDLE HWnd,
        /*[in]*/ VARIANT Libname,
        /*[out,retval]*/ struct IAttributeType * * Res ) = 0;
      virtual HRESULT __stdcall raw_GetAttrTypes (
        /*[in]*/ VARIANT Libname,
        /*[out,retval]*/ VARIANT * Res ) = 0;
};

struct __declspec(uuid("4f13bb1b-44aa-42e6-bd50-30e21e434d1b"))
IStylesManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurvesStyles))
    IStylesPtr CurvesStyles;
    __declspec(property(get=GetTextsStyles))
    IStylesPtr TextsStyles;
    __declspec(property(get=GetHatchsStyles))
    IStylesPtr HatchsStyles;

    //
    // Wrapper methods for error-handling
    //

    IStylesPtr GetCurvesStyles ( );
    IStylesPtr GetTextsStyles ( );
    IStylesPtr GetHatchsStyles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurvesStyles (
        /*[out,retval]*/ struct IStyles * * Result ) = 0;
      virtual HRESULT __stdcall get_TextsStyles (
        /*[out,retval]*/ struct IStyles * * Result ) = 0;
      virtual HRESULT __stdcall get_HatchsStyles (
        /*[out,retval]*/ struct IStyles * * Result ) = 0;
};

struct __declspec(uuid("5046bf60-687a-4e5d-bbef-3cb5d95f7a41"))
ICurveStyle : IStyle
{
    //
    // Property data
    //

    __declspec(property(get=GetCurveStyleType,put=PutCurveStyleType))
    enum ksCurveStyleTypeEnum CurveStyleType;
    __declspec(property(get=GetCurvePenType,put=PutCurvePenType))
    enum ksCurvePenTypeEnum CurvePenType;
    __declspec(property(get=GetForHatch,put=PutForHatch))
    VARIANT_BOOL ForHatch;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetPaperWidth,put=PutPaperWidth))
    double PaperWidth;
    __declspec(property(get=GetScreenWidth,put=PutScreenWidth))
    long ScreenWidth;
    __declspec(property(get=GetSmartParts,put=PutSmartParts))
    VARIANT_BOOL SmartParts;
    __declspec(property(get=GetIgnoreFragmentStyle,put=PutIgnoreFragmentStyle))
    VARIANT_BOOL IgnoreFragmentStyle;
    __declspec(property(get=GetPatternsCount))
    long PatternsCount;
    __declspec(property(get=GetPatternVisibleSegmentLenght,put=PutPatternVisibleSegmentLenght))
    double PatternVisibleSegmentLenght[];
    __declspec(property(get=GetPatternInvisibleSegmentLenght,put=PutPatternInvisibleSegmentLenght))
    double PatternInvisibleSegmentLenght[];
    __declspec(property(get=GetPatternFragmentDx,put=PutPatternFragmentDx))
    double PatternFragmentDx[];
    __declspec(property(get=GetPatternFragmentDy,put=PutPatternFragmentDy))
    double PatternFragmentDy[];
    __declspec(property(get=GetPatternFragmentPoligonsCount))
    long PatternFragmentPoligonsCount[];
    __declspec(property(get=GetPatternFragmentPoligon,put=PutPatternFragmentPoligon))
    _variant_t PatternFragmentPoligon[][];
    __declspec(property(get=GetPatternFragmentFilletsPoligonsCount))
    long PatternFragmentFilletsPoligonsCount[];
    __declspec(property(get=GetPatternFragmentFilletsPoligon,put=PutPatternFragmentFilletsPoligon))
    _variant_t PatternFragmentFilletsPoligon[][];

    //
    // Wrapper methods for error-handling
    //

    void PutCurveStyleType (
        enum ksCurveStyleTypeEnum PVal );
    enum ksCurveStyleTypeEnum GetCurveStyleType ( );
    void PutCurvePenType (
        enum ksCurvePenTypeEnum PVal );
    enum ksCurvePenTypeEnum GetCurvePenType ( );
    VARIANT_BOOL GetForHatch ( );
    void PutForHatch (
        VARIANT_BOOL PVal );
    void PutColor (
        long PVal );
    long GetColor ( );
    void PutPaperWidth (
        double PVal );
    double GetPaperWidth ( );
    void PutScreenWidth (
        long PVal );
    long GetScreenWidth ( );
    VARIANT_BOOL GetSmartParts ( );
    void PutSmartParts (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIgnoreFragmentStyle ( );
    void PutIgnoreFragmentStyle (
        VARIANT_BOOL PVal );
    long GetPatternsCount ( );
    VARIANT_BOOL AddPattern (
        double VisibleSegmentLenght,
        double invisibleSegmentLenght );
    VARIANT_BOOL DeletePattern (
        long PatternIndex );
    VARIANT_BOOL ClearPatterns ( );
    double GetPatternVisibleSegmentLenght (
        long PatternIndex );
    void PutPatternVisibleSegmentLenght (
        long PatternIndex,
        double Result );
    double GetPatternInvisibleSegmentLenght (
        long PatternIndex );
    void PutPatternInvisibleSegmentLenght (
        long PatternIndex,
        double Result );
    double GetPatternFragmentDx (
        long PatternIndex );
    void PutPatternFragmentDx (
        long PatternIndex,
        double Result );
    double GetPatternFragmentDy (
        long PatternIndex );
    void PutPatternFragmentDy (
        long PatternIndex,
        double Result );
    long GetPatternFragmentPoligonsCount (
        long PatternIndex );
    void PutPatternFragmentPoligon (
        long PatternIndex,
        long PoligonIndex,
        const _variant_t & PVal );
    _variant_t GetPatternFragmentPoligon (
        long PatternIndex,
        long PoligonIndex );
    VARIANT_BOOL AddPatternFragmentPoligon (
        long PatternIndex,
        const _variant_t & Points );
    VARIANT_BOOL DeletePatternFragmentPoligon (
        long PatternIndex,
        long PoligonIndex );
    VARIANT_BOOL ClearPatternFragmentPoligons (
        long PatternIndex );
    long GetPatternFragmentFilletsPoligonsCount (
        long PatternIndex );
    void PutPatternFragmentFilletsPoligon (
        long PatternIndex,
        long PoligonIndex,
        const _variant_t & PVal );
    _variant_t GetPatternFragmentFilletsPoligon (
        long PatternIndex,
        long PoligonIndex );
    VARIANT_BOOL AddPatternFragmentFilletsPoligon (
        long PatternIndex,
        const _variant_t & Points );
    VARIANT_BOOL DeletePatternFragmentFilletsPoligon (
        long PatternIndex,
        long PoligonIndex );
    VARIANT_BOOL ClearPatternFragmentFilletsPoligons (
        long PatternIndex );
    VARIANT_BOOL LoadPatternFragment (
        long PatternIndex,
        _bstr_t FileName );
    VARIANT_BOOL SetPatternFragment (
        long PatternIndex,
        const _variant_t & Geom );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CurveStyleType (
        /*[in]*/ enum ksCurveStyleTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CurveStyleType (
        /*[out,retval]*/ enum ksCurveStyleTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CurvePenType (
        /*[in]*/ enum ksCurvePenTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CurvePenType (
        /*[out,retval]*/ enum ksCurvePenTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_ForHatch (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ForHatch (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PaperWidth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_PaperWidth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ScreenWidth (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_ScreenWidth (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_SmartParts (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SmartParts (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreFragmentStyle (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreFragmentStyle (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PatternsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddPattern (
        /*[in]*/ double VisibleSegmentLenght,
        /*[in]*/ double invisibleSegmentLenght,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeletePattern (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearPatterns (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_PatternVisibleSegmentLenght (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_PatternVisibleSegmentLenght (
        /*[in]*/ long PatternIndex,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_PatternInvisibleSegmentLenght (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_PatternInvisibleSegmentLenght (
        /*[in]*/ long PatternIndex,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_PatternFragmentDx (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_PatternFragmentDx (
        /*[in]*/ long PatternIndex,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_PatternFragmentDy (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_PatternFragmentDy (
        /*[in]*/ long PatternIndex,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_PatternFragmentPoligonsCount (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_PatternFragmentPoligon (
        /*[in]*/ long PatternIndex,
        /*[in]*/ long PoligonIndex,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_PatternFragmentPoligon (
        /*[in]*/ long PatternIndex,
        /*[in]*/ long PoligonIndex,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddPatternFragmentPoligon (
        /*[in]*/ long PatternIndex,
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeletePatternFragmentPoligon (
        /*[in]*/ long PatternIndex,
        /*[in]*/ long PoligonIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearPatternFragmentPoligons (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_PatternFragmentFilletsPoligonsCount (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_PatternFragmentFilletsPoligon (
        /*[in]*/ long PatternIndex,
        /*[in]*/ long PoligonIndex,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_PatternFragmentFilletsPoligon (
        /*[in]*/ long PatternIndex,
        /*[in]*/ long PoligonIndex,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddPatternFragmentFilletsPoligon (
        /*[in]*/ long PatternIndex,
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeletePatternFragmentFilletsPoligon (
        /*[in]*/ long PatternIndex,
        /*[in]*/ long PoligonIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearPatternFragmentFilletsPoligons (
        /*[in]*/ long PatternIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_LoadPatternFragment (
        /*[in]*/ long PatternIndex,
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPatternFragment (
        /*[in]*/ long PatternIndex,
        /*[in]*/ VARIANT Geom,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("9315d8a2-95b7-4e7f-b861-b88fa490ee2b"))
IHatchStyle : IStyle
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetKeepAngle,put=PutKeepAngle))
    VARIANT_BOOL KeepAngle;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetKeepScale,put=PutKeepScale))
    VARIANT_BOOL KeepScale;
    __declspec(property(get=GetHatchType,put=PutHatchType))
    VARIANT_BOOL HatchType;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCurvesStyles))
    IStylesPtr CurvesStyles;
    __declspec(property(get=GetLinesCount))
    long LinesCount;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    ICurveStylePtr LineStyle[];
    __declspec(property(get=GetLineBeginX,put=PutLineBeginX))
    double LineBeginX[];
    __declspec(property(get=GetLineBeginY,put=PutLineBeginY))
    double LineBeginY[];
    __declspec(property(get=GetLineAngle,put=PutLineAngle))
    double LineAngle[];
    __declspec(property(get=GetLineDx,put=PutLineDx))
    double LineDx[];
    __declspec(property(get=GetLineDy,put=PutLineDy))
    double LineDy[];

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double Result );
    VARIANT_BOOL GetKeepAngle ( );
    void PutKeepAngle (
        VARIANT_BOOL Result );
    double GetScale ( );
    void PutScale (
        double Result );
    VARIANT_BOOL GetKeepScale ( );
    void PutKeepScale (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetHatchType ( );
    void PutHatchType (
        VARIANT_BOOL Result );
    double GetWidth ( );
    void PutWidth (
        double Result );
    IStylesPtr GetCurvesStyles ( );
    long GetLinesCount ( );
    VARIANT_BOOL AddLine (
        struct ICurveStyle * Style,
        double X,
        double Y,
        double Angle,
        double DX,
        double DY );
    VARIANT_BOOL DeleteLine (
        long Index );
    VARIANT_BOOL ClearLines ( );
    ICurveStylePtr GetLineStyle (
        long Index );
    void PutLineStyle (
        long Index,
        struct ICurveStyle * Result );
    double GetLineBeginX (
        long Index );
    void PutLineBeginX (
        long Index,
        double Result );
    double GetLineBeginY (
        long Index );
    void PutLineBeginY (
        long Index,
        double Result );
    double GetLineAngle (
        long Index );
    void PutLineAngle (
        long Index,
        double Result );
    double GetLineDx (
        long Index );
    void PutLineDx (
        long Index,
        double Result );
    double GetLineDy (
        long Index );
    void PutLineDy (
        long Index,
        double Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_KeepAngle (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_KeepAngle (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_KeepScale (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_KeepScale (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_HatchType (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_HatchType (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_CurvesStyles (
        /*[out,retval]*/ struct IStyles * * Result ) = 0;
      virtual HRESULT __stdcall get_LinesCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ struct ICurveStyle * Style,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Angle,
        /*[in]*/ double DX,
        /*[in]*/ double DY,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteLine (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearLines (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICurveStyle * * Result ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ long Index,
        /*[in]*/ struct ICurveStyle * Result ) = 0;
      virtual HRESULT __stdcall get_LineBeginX (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LineBeginX (
        /*[in]*/ long Index,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_LineBeginY (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LineBeginY (
        /*[in]*/ long Index,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_LineAngle (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LineAngle (
        /*[in]*/ long Index,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_LineDx (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LineDx (
        /*[in]*/ long Index,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_LineDy (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LineDy (
        /*[in]*/ long Index,
        /*[in]*/ double Result ) = 0;
};

struct __declspec(uuid("dd114fc3-eb24-4fbd-b9e9-b01a893aa3b0"))
IReportStyleColumn : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetHeader,put=PutHeader))
    _bstr_t Header;
    __declspec(property(get=GetId))
    double Id;
    __declspec(property(get=GetUserColumn))
    VARIANT_BOOL UserColumn;
    __declspec(property(get=GetProperty,put=PutProperty))
    IPropertyPtr Property;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetGroupeType,put=PutGroupeType))
    enum ksGroupeTypeEnum GroupeType;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum ksAlignEnum TextAlign;
    __declspec(property(get=GetCombineCells,put=PutCombineCells))
    VARIANT_BOOL CombineCells;
    __declspec(property(get=GetValueFormat,put=PutValueFormat))
    enum ksValueFormatEnum ValueFormat;
    __declspec(property(get=GetPropertyLevel,put=PutPropertyLevel))
    _variant_t PropertyLevel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeader ( );
    void PutHeader (
        _bstr_t PVal );
    double GetId ( );
    VARIANT_BOOL GetUserColumn ( );
    IPropertyPtr GetProperty ( );
    void PutProperty (
        struct IProperty * PVal );
    double GetWidth ( );
    void PutWidth (
        double PVal );
    enum ksGroupeTypeEnum GetGroupeType ( );
    void PutGroupeType (
        enum ksGroupeTypeEnum PVal );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWordWrap ( );
    void PutWordWrap (
        VARIANT_BOOL PVal );
    enum ksAlignEnum GetTextAlign ( );
    void PutTextAlign (
        enum ksAlignEnum PVal );
    VARIANT_BOOL GetCombineCells ( );
    void PutCombineCells (
        VARIANT_BOOL PVal );
    enum ksValueFormatEnum GetValueFormat ( );
    void PutValueFormat (
        enum ksValueFormatEnum PVal );
    _variant_t GetPropertyLevel ( );
    void PutPropertyLevel (
        const _variant_t & PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Header (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_UserColumn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Property (
        /*[out,retval]*/ struct IProperty * * PVal ) = 0;
      virtual HRESULT __stdcall put_Property (
        /*[in]*/ struct IProperty * PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_GroupeType (
        /*[out,retval]*/ enum ksGroupeTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_GroupeType (
        /*[in]*/ enum ksGroupeTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum ksAlignEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum ksAlignEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CombineCells (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CombineCells (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ValueFormat (
        /*[out,retval]*/ enum ksValueFormatEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ValueFormat (
        /*[in]*/ enum ksValueFormatEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyLevel (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_PropertyLevel (
        /*[in]*/ VARIANT PVal ) = 0;
};

struct __declspec(uuid("5c65f11d-75c8-4130-951c-5ebe0aba4f44"))
IReportStyle : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetColumnsCount))
    long ColumnsCount;
    __declspec(property(get=GetColumn))
    IReportStyleColumnPtr Column[];
    __declspec(property(get=GetRowsCount,put=PutRowsCount))
    long RowsCount;
    __declspec(property(get=GetDivideIntoPage,put=PutDivideIntoPage))
    VARIANT_BOOL DivideIntoPage;
    __declspec(property(get=GetTitleHeight,put=PutTitleHeight))
    long TitleHeight;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    long RowHeight;
    __declspec(property(get=GetShowEmptyRows,put=PutShowEmptyRows))
    VARIANT_BOOL ShowEmptyRows;
    __declspec(property(get=GetShowTitle,put=PutShowTitle))
    VARIANT_BOOL ShowTitle;
    __declspec(property(get=GetRowsNumberingType,put=PutRowsNumberingType))
    enum ksRowsNumberingTypeEnum RowsNumberingType;
    __declspec(property(get=GetColumnNumberingType,put=PutColumnNumberingType))
    enum ksNumberingTypeEnum ColumnNumberingType;
    __declspec(property(get=GetColumnNumberingInitVal,put=PutColumnNumberingInitVal))
    long ColumnNumberingInitVal;
    __declspec(property(get=GetDrawBottom,put=PutDrawBottom))
    VARIANT_BOOL DrawBottom;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    double Id;

    //
    // Wrapper methods for error-handling
    //

    long GetColumnsCount ( );
    IReportStyleColumnPtr GetColumn (
        const _variant_t & Index );
    IReportStyleColumnPtr AddColumn (
        long IndexAt,
        _bstr_t Name,
        struct IProperty * Property );
    VARIANT_BOOL SwapColumn (
        long Index1,
        long Index2 );
    VARIANT_BOOL DeleteColumn (
        const _variant_t & Index );
    VARIANT_BOOL Clear ( );
    long GetRowsCount ( );
    void PutRowsCount (
        long PVal );
    VARIANT_BOOL GetDivideIntoPage ( );
    void PutDivideIntoPage (
        VARIANT_BOOL PVal );
    long GetTitleHeight ( );
    void PutTitleHeight (
        long PVal );
    long GetRowHeight ( );
    void PutRowHeight (
        long PVal );
    VARIANT_BOOL GetShowEmptyRows ( );
    void PutShowEmptyRows (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowTitle ( );
    void PutShowTitle (
        VARIANT_BOOL PVal );
    enum ksRowsNumberingTypeEnum GetRowsNumberingType ( );
    void PutRowsNumberingType (
        enum ksRowsNumberingTypeEnum PVal );
    enum ksNumberingTypeEnum GetColumnNumberingType ( );
    void PutColumnNumberingType (
        enum ksNumberingTypeEnum PVal );
    long GetColumnNumberingInitVal ( );
    void PutColumnNumberingInitVal (
        long PVal );
    VARIANT_BOOL GetDrawBottom ( );
    void PutDrawBottom (
        VARIANT_BOOL PVal );
    VARIANT_BOOL Init (
        enum ksReportStyleInitEnum Type );
    VARIANT_BOOL GetSortParameters (
        long Level,
        long * ColumnNumber,
        enum ksSortTypeEnum * SortType );
    VARIANT_BOOL SetSortParameters (
        long Level,
        long ColumnNumber,
        enum ksSortTypeEnum SortType );
    VARIANT_BOOL ClearSortParameters ( );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    double GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColumnsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IReportStyleColumn * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddColumn (
        /*[in]*/ long IndexAt,
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IProperty * Property,
        /*[out,retval]*/ struct IReportStyleColumn * * PVal ) = 0;
      virtual HRESULT __stdcall raw_SwapColumn (
        /*[in]*/ long Index1,
        /*[in]*/ long Index2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteColumn (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_RowsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_RowsCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_DivideIntoPage (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DivideIntoPage (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TitleHeight (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_TitleHeight (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_ShowEmptyRows (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowEmptyRows (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowTitle (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowTitle (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RowsNumberingType (
        /*[out,retval]*/ enum ksRowsNumberingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_RowsNumberingType (
        /*[in]*/ enum ksRowsNumberingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnNumberingType (
        /*[out,retval]*/ enum ksNumberingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ColumnNumberingType (
        /*[in]*/ enum ksNumberingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnNumberingInitVal (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_ColumnNumberingInitVal (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_DrawBottom (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DrawBottom (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ enum ksReportStyleInitEnum Type,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetSortParameters (
        /*[in]*/ long Level,
        /*[out]*/ long * ColumnNumber,
        /*[out]*/ enum ksSortTypeEnum * SortType,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetSortParameters (
        /*[in]*/ long Level,
        /*[in]*/ long ColumnNumber,
        /*[in]*/ enum ksSortTypeEnum SortType,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearSortParameters (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("29bbf2b8-a2e2-4e7d-bf04-0bb79c89ef35"))
IReportProcess : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetStylesCount))
    long StylesCount;
    __declspec(property(get=GetActiveStyleIndex,put=PutActiveStyleIndex))
    _variant_t ActiveStyleIndex;
    __declspec(property(get=GetReportFilter))
    IReportFilterPtr ReportFilter;
    __declspec(property(get=GetReportFilterUse,put=PutReportFilterUse))
    VARIANT_BOOL ReportFilterUse;

    //
    // Wrapper methods for error-handling
    //

    long GetStylesCount ( );
    void PutActiveStyleIndex (
        const _variant_t & Index );
    _variant_t GetActiveStyleIndex ( );
    IReportFilterPtr GetReportFilter ( );
    void PutReportFilterUse (
        VARIANT_BOOL Index );
    VARIANT_BOOL GetReportFilterUse ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StylesCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_ActiveStyleIndex (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall get_ActiveStyleIndex (
        /*[out,retval]*/ VARIANT * Index ) = 0;
      virtual HRESULT __stdcall get_ReportFilter (
        /*[out,retval]*/ struct IReportFilter * * Filters ) = 0;
      virtual HRESULT __stdcall put_ReportFilterUse (
        /*[in]*/ VARIANT_BOOL Index ) = 0;
      virtual HRESULT __stdcall get_ReportFilterUse (
        /*[out,retval]*/ VARIANT_BOOL * Index ) = 0;
};

struct __declspec(uuid("d9c09d24-cb85-4ea2-b5ff-85d59e5d339a"))
INumericGroup : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNumericGroupType,put=PutNumericGroupType))
    enum ksNumericGroupTypeEnum NumericGroupType;
    __declspec(property(get=GetIsSystem))
    VARIANT_BOOL IsSystem;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IKompasAPIObjectPtr Item[];
    __declspec(property(get=GetObjects,put=PutObjects))
    _variant_t Objects;
    __declspec(property(get=GetMinCharsCount,put=PutMinCharsCount))
    long MinCharsCount;
    __declspec(property(get=GetAutoNumerationSymbols,put=PutAutoNumerationSymbols))
    _bstr_t AutoNumerationSymbols;
    __declspec(property(get=GetTextBefore,put=PutTextBefore))
    _bstr_t TextBefore;
    __declspec(property(get=GetTextAfter,put=PutTextAfter))
    _bstr_t TextAfter;
    __declspec(property(get=GetStartIndex,put=PutStartIndex))
    long StartIndex;
    __declspec(property(get=GetAutoNumerationEnable,put=PutAutoNumerationEnable))
    VARIANT_BOOL AutoNumerationEnable;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t PVal );
    enum ksNumericGroupTypeEnum GetNumericGroupType ( );
    void PutNumericGroupType (
        enum ksNumericGroupTypeEnum PVal );
    VARIANT_BOOL GetIsSystem ( );
    long GetCount ( );
    IKompasAPIObjectPtr GetItem (
        const _variant_t & Index );
    _variant_t GetObjects ( );
    void PutObjects (
        const _variant_t & Result );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL Attach (
        struct IKompasAPIObject * Object );
    VARIANT_BOOL Dettach (
        struct IKompasAPIObject * Object );
    VARIANT_BOOL IsExist (
        struct IKompasAPIObject * Object );
    VARIANT_BOOL IsEnableAdd (
        struct IKompasAPIObject * Object );
    _bstr_t GetObjectNumber (
        struct IKompasAPIObject * Object,
        VARIANT_BOOL FullName );
    _bstr_t GetNextName (
        struct IKompasAPIObject * Object );
    long GetMinCharsCount ( );
    void PutMinCharsCount (
        long Result );
    _bstr_t GetAutoNumerationSymbols ( );
    void PutAutoNumerationSymbols (
        _bstr_t Result );
    _bstr_t GetTextBefore ( );
    void PutTextBefore (
        _bstr_t Result );
    _bstr_t GetTextAfter ( );
    void PutTextAfter (
        _bstr_t Result );
    long GetStartIndex ( );
    void PutStartIndex (
        long Result );
    VARIANT_BOOL GetAutoNumerationEnable ( );
    void PutAutoNumerationEnable (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_NumericGroupType (
        /*[out,retval]*/ enum ksNumericGroupTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_NumericGroupType (
        /*[in]*/ enum ksNumericGroupTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_IsSystem (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_Objects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Attach (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Dettach (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsExist (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsEnableAdd (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetObjectNumber (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[in]*/ VARIANT_BOOL FullName,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_GetNextName (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall get_MinCharsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_MinCharsCount (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_AutoNumerationSymbols (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_AutoNumerationSymbols (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_TextBefore (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_TextBefore (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_TextAfter (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_TextAfter (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_StartIndex (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_StartIndex (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_AutoNumerationEnable (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoNumerationEnable (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("f7e44485-b4eb-4897-a263-be3bc1a08789"))
IReportTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayMode,put=PutDisplayMode))
    VARIANT_BOOL DisplayMode;
    __declspec(property(get=GetRowsCount))
    long RowsCount;
    __declspec(property(get=GetColumnsCount))
    long ColumnsCount;
    __declspec(property(get=GetCellValue,put=PutCellValue))
    _variant_t CellValue[][];
    __declspec(property(get=GetFormatCellValue))
    _bstr_t FormatCellValue[][];
    __declspec(property(get=GetText))
    ITextPtr Text[][];
    __declspec(property(get=GetStyleColumn))
    IReportStyleColumnPtr StyleColumn[];
    __declspec(property(get=GetPropertyKeeper))
    IPropertyKeeperPtr PropertyKeeper[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDisplayMode ( );
    void PutDisplayMode (
        VARIANT_BOOL PVal );
    long GetRowsCount ( );
    long GetColumnsCount ( );
    _variant_t GetCellValue (
        long NRow,
        long NCol );
    void PutCellValue (
        long NRow,
        long NCol,
        const _variant_t & PVal );
    _bstr_t GetFormatCellValue (
        long NRow,
        long NCol );
    ITextPtr GetText (
        long NRow,
        long NCol );
    IReportStyleColumnPtr GetStyleColumn (
        long NCol );
    IPropertyKeeperPtr GetPropertyKeeper (
        long RowIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RowsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_CellValue (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_CellValue (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_FormatCellValue (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_StyleColumn (
        /*[in]*/ long NCol,
        /*[out,retval]*/ struct IReportStyleColumn * * PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyKeeper (
        /*[in]*/ long RowIndex,
        /*[out,retval]*/ struct IPropertyKeeper * * PVal ) = 0;
};

struct __declspec(uuid("1d238c4c-aad7-4374-b372-013cf7fcedb4"))
IPropertyEdit : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetMinValue))
    _variant_t MinValue;
    __declspec(property(get=GetMaxValue))
    _variant_t MaxValue;
    __declspec(property(get=GetWithCheck,put=PutWithCheck))
    VARIANT_BOOL WithCheck;
    __declspec(property(get=GetCheckState,put=PutCheckState))
    enum CheckStateEnum CheckState;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinValue ( );
    _variant_t GetMaxValue ( );
    VARIANT_BOOL SetValueRange (
        const _variant_t & MinVal,
        const _variant_t & MaxVal );
    void PutWithCheck (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithCheck ( );
    void PutCheckState (
        enum CheckStateEnum PVal );
    enum CheckStateEnum GetCheckState ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutWidth (
        long PVal );
    long GetWidth ( );
    void PutStep (
        double PVal );
    double GetStep ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetValueRange (
        /*[in]*/ VARIANT MinVal,
        /*[in]*/ VARIANT MaxVal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_WithCheck (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithCheck (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckState (
        /*[in]*/ enum CheckStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CheckState (
        /*[out,retval]*/ enum CheckStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("4504efa0-d059-4fd4-b725-fa264d190869"))
IPropertySeparator : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetSeparatorType,put=PutSeparatorType))
    enum SeparatorTypeEnum SeparatorType;

    //
    // Wrapper methods for error-handling
    //

    void PutSeparatorType (
        enum SeparatorTypeEnum PVal );
    enum SeparatorTypeEnum GetSeparatorType ( );
    VARIANT_BOOL SetImage (
        const _variant_t & IdBmp,
        const _variant_t & HInstance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_SeparatorType (
        /*[in]*/ enum SeparatorTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SeparatorType (
        /*[out,retval]*/ enum SeparatorTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetImage (
        /*[in]*/ VARIANT IdBmp,
        /*[in]*/ VARIANT HInstance,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("8f53e9d5-07ad-412e-8c2a-509bc633c4ff"))
IPropertyList : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetMinValue))
    _variant_t MinValue;
    __declspec(property(get=GetMaxValue))
    _variant_t MaxValue;
    __declspec(property(get=GetWithCheck,put=PutWithCheck))
    VARIANT_BOOL WithCheck;
    __declspec(property(get=GetCheckState,put=PutCheckState))
    enum CheckStateEnum CheckState;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetSort,put=PutSort))
    VARIANT_BOOL Sort;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    double Precision;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinValue ( );
    _variant_t GetMaxValue ( );
    VARIANT_BOOL SetValueRange (
        const _variant_t & MinVal,
        const _variant_t & MaxVal );
    void PutWithCheck (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithCheck ( );
    void PutCheckState (
        enum CheckStateEnum PVal );
    enum CheckStateEnum GetCheckState ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutWidth (
        long PVal );
    long GetWidth ( );
    HRESULT ClearList ( );
    HRESULT Add (
        const _variant_t & NewVal );
    void PutSort (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSort ( );
    long Find (
        const _variant_t & Val );
    VARIANT_BOOL SetCurrentByIndex (
        long Val );
    void PutPrecision (
        double PVal );
    double GetPrecision ( );
    long GetCount ( );
    void PutStep (
        double PVal );
    double GetStep ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetValueRange (
        /*[in]*/ VARIANT MinVal,
        /*[in]*/ VARIANT MaxVal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_WithCheck (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithCheck (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckState (
        /*[in]*/ enum CheckStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CheckState (
        /*[out,retval]*/ enum CheckStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearList ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT NewVal ) = 0;
      virtual HRESULT __stdcall put_Sort (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Sort (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ VARIANT Val,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentByIndex (
        /*[in]*/ long Val,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("9205277d-b480-4af7-b660-ccdc653f6453"))
IPropertyCheckBox : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetVisualStyle,put=PutVisualStyle))
    enum ksCheckBoxVisualStyleEnum VisualStyle;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetCustomBitmaps (
        const _variant_t & IdUnchecked,
        const _variant_t & IdChecked,
        const _variant_t & IdIndeterminate,
        const _variant_t & HInstance );
    void PutVisualStyle (
        enum ksCheckBoxVisualStyleEnum PVal );
    enum ksCheckBoxVisualStyleEnum GetVisualStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetCustomBitmaps (
        /*[in]*/ VARIANT IdUnchecked,
        /*[in]*/ VARIANT IdChecked,
        /*[in]*/ VARIANT IdIndeterminate,
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall put_VisualStyle (
        /*[in]*/ enum ksCheckBoxVisualStyleEnum PVal ) = 0;
      virtual HRESULT __stdcall get_VisualStyle (
        /*[out,retval]*/ enum ksCheckBoxVisualStyleEnum * PVal ) = 0;
};

struct __declspec(uuid("3920a0be-0628-47d5-b0f1-1dfeb77964bc"))
IPropertyMultiButton : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetButtonsType,put=PutButtonsType))
    enum ButtonTypeEnum ButtonsType;
    __declspec(property(get=GetButtonChecked,put=PutButtonChecked))
    VARIANT_BOOL ButtonChecked[];
    __declspec(property(get=GetButtonEnable,put=PutButtonEnable))
    VARIANT_BOOL ButtonEnable[];
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetButtonTips,put=PutButtonTips))
    _bstr_t ButtonTips[];
    __declspec(property(get=GetButtonHint,put=PutButtonHint))
    _bstr_t ButtonHint[];
    __declspec(property(get=GetNextCommand,put=PutNextCommand))
    VARIANT_BOOL NextCommand;
    __declspec(property(get=GetButtonVisible,put=PutButtonVisible))
    VARIANT_BOOL ButtonVisible[];
    __declspec(property(get=GetButtonIconFont,put=PutButtonIconFont))
    _bstr_t ButtonIconFont[];

    //
    // Wrapper methods for error-handling
    //

    void PutButtonsType (
        enum ButtonTypeEnum PVal );
    enum ButtonTypeEnum GetButtonsType ( );
    void PutButtonChecked (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonChecked (
        long BtnID );
    void PutButtonEnable (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonEnable (
        long BtnID );
    HRESULT AddButton (
        long BtnID,
        const _variant_t & Bmp,
        long InsertAt );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutButtonTips (
        long BtnID,
        _bstr_t PVal );
    _bstr_t GetButtonTips (
        long BtnID );
    void PutButtonHint (
        long BtnID,
        _bstr_t PVal );
    _bstr_t GetButtonHint (
        long BtnID );
    void PutNextCommand (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNextCommand ( );
    void PutButtonVisible (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonVisible (
        long BtnID );
    void PutButtonIconFont (
        long BtnID,
        _bstr_t PVal );
    _bstr_t GetButtonIconFont (
        long BtnID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ButtonsType (
        /*[in]*/ enum ButtonTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonsType (
        /*[out,retval]*/ enum ButtonTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonChecked (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonChecked (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonEnable (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonEnable (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddButton (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT Bmp,
        /*[in]*/ long InsertAt ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_ButtonTips (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonTips (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonHint (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonHint (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_NextCommand (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NextCommand (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonVisible (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonVisible (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonIconFont (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonIconFont (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("e1db38cd-a6d5-44b8-9ad0-0056b87924dd"))
IPropertySlideBox : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetSlideType,put=PutSlideType))
    enum SlideTypeEnum SlideType;
    __declspec(property(get=GetDrawingSlide,put=PutDrawingSlide))
    _variant_t DrawingSlide;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetCheckBoxVisibility,put=PutCheckBoxVisibility))
    VARIANT_BOOL CheckBoxVisibility;

    //
    // Wrapper methods for error-handling
    //

    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutSlideType (
        enum SlideTypeEnum Type );
    enum SlideTypeEnum GetSlideType ( );
    void PutDrawingSlide (
        const _variant_t & Slide );
    _variant_t GetDrawingSlide ( );
    void PutWidth (
        long Width );
    long GetWidth ( );
    void PutHeight (
        long Height );
    long GetHeight ( );
    void PutCheckBoxVisibility (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCheckBoxVisibility ( );
    HRESULT UpdateParam ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_SlideType (
        /*[in]*/ enum SlideTypeEnum Type ) = 0;
      virtual HRESULT __stdcall get_SlideType (
        /*[out,retval]*/ enum SlideTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall put_DrawingSlide (
        /*[in]*/ VARIANT Slide ) = 0;
      virtual HRESULT __stdcall get_DrawingSlide (
        /*[out,retval]*/ VARIANT * Slide ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_CheckBoxVisibility (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CheckBoxVisibility (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateParam ( ) = 0;
};

struct __declspec(uuid("5a902c6c-a030-4f37-a089-91505baee466"))
IPropertyUserControl : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetFixHeight,put=PutFixHeight))
    VARIANT_BOOL FixHeight;
    __declspec(property(get=GetFixWidth,put=PutFixWidth))
    VARIANT_BOOL FixWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;

    //
    // Wrapper methods for error-handling
    //

    void PutWidth (
        long Width );
    long GetWidth ( );
    void PutHeight (
        long Height );
    long GetHeight ( );
    HRESULT SetOCXControl (
        _bstr_t ProgID );
    void PutFixHeight (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixHeight ( );
    void PutFixWidth (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixWidth ( );
    void PutAutoSize (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoSize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall raw_SetOCXControl (
        /*[in]*/ BSTR ProgID ) = 0;
      virtual HRESULT __stdcall put_FixHeight (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixHeight (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FixWidth (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixWidth (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("6682b70f-59db-4bf0-ab01-45b65b1bded1"))
IPropertyGrid : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetColumnCount,put=PutColumnCount))
    long ColumnCount;
    __declspec(property(get=GetRowCount,put=PutRowCount))
    long RowCount;
    __declspec(property(get=GetFixedColumnCount,put=PutFixedColumnCount))
    long FixedColumnCount;
    __declspec(property(get=GetFixedRowCount,put=PutFixedRowCount))
    long FixedRowCount;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    long ColumnWidth[];
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    long RowHeight[];
    __declspec(property(get=GetEnableEdit,put=PutEnableEdit))
    VARIANT_BOOL EnableEdit[][];
    __declspec(property(get=GetCellText,put=PutCellText))
    _bstr_t CellText[][];
    __declspec(property(get=GetCellFormat,put=PutCellFormat))
    long CellFormat[][];
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetAutoSizeColumns,put=PutAutoSizeColumns))
    VARIANT_BOOL AutoSizeColumns;
    __declspec(property(get=GetCurrentColumn,put=PutCurrentColumn))
    long CurrentColumn;
    __declspec(property(get=GetCurrentRow,put=PutCurrentRow))
    long CurrentRow;
    __declspec(property(get=GetEnableDeleteRows,put=PutEnableDeleteRows))
    VARIANT_BOOL EnableDeleteRows;
    __declspec(property(get=GetColumnVisible,put=PutColumnVisible))
    VARIANT_BOOL ColumnVisible[];

    //
    // Wrapper methods for error-handling
    //

    void PutColumnCount (
        long Count );
    long GetColumnCount ( );
    void PutRowCount (
        long Count );
    long GetRowCount ( );
    void PutFixedColumnCount (
        long Count );
    long GetFixedColumnCount ( );
    void PutFixedRowCount (
        long Count );
    long GetFixedRowCount ( );
    void PutColumnWidth (
        long Index,
        long Width );
    long GetColumnWidth (
        long Index );
    void PutRowHeight (
        long Index,
        long Height );
    long GetRowHeight (
        long Index );
    void PutEnableEdit (
        long NRow,
        long NCol,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableEdit (
        long NRow,
        long NCol );
    void PutCellText (
        long NRow,
        long NCol,
        _bstr_t Text );
    _bstr_t GetCellText (
        long NRow,
        long NCol );
    void PutCellFormat (
        long NRow,
        long NCol,
        long Format );
    long GetCellFormat (
        long NRow,
        long NCol );
    void PutWidth (
        long Width );
    long GetWidth ( );
    void PutHeight (
        long Height );
    long GetHeight ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutAutoSizeColumns (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoSizeColumns ( );
    HRESULT UpdateParam ( );
    void PutCurrentColumn (
        long Column );
    long GetCurrentColumn ( );
    void PutCurrentRow (
        long Row );
    long GetCurrentRow ( );
    void PutEnableDeleteRows (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableDeleteRows ( );
    void PutColumnVisible (
        long Index,
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetColumnVisible (
        long Index );
    HRESULT BringIntoView (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ColumnCount (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_RowCount (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall get_RowCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_FixedColumnCount (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall get_FixedColumnCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_FixedRowCount (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall get_FixedRowCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_ColumnWidth (
        /*[in]*/ long Index,
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_ColumnWidth (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ long Index,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_EnableEdit (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableEdit (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CellText (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_CellText (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_CellFormat (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[in]*/ long Format ) = 0;
      virtual HRESULT __stdcall get_CellFormat (
        /*[in]*/ long NRow,
        /*[in]*/ long NCol,
        /*[out,retval]*/ long * Format ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoSizeColumns (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSizeColumns (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateParam ( ) = 0;
      virtual HRESULT __stdcall put_CurrentColumn (
        /*[in]*/ long Column ) = 0;
      virtual HRESULT __stdcall get_CurrentColumn (
        /*[out,retval]*/ long * Column ) = 0;
      virtual HRESULT __stdcall put_CurrentRow (
        /*[in]*/ long Row ) = 0;
      virtual HRESULT __stdcall get_CurrentRow (
        /*[out,retval]*/ long * Row ) = 0;
      virtual HRESULT __stdcall put_EnableDeleteRows (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableDeleteRows (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ColumnVisible (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_ColumnVisible (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall raw_BringIntoView (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("3cdfe85f-643d-4008-ae32-379c0eb3fb7f"))
IPropertyTextButton : IPropertyControl
{};

struct __declspec(uuid("f214a46d-2ba9-40ad-a32d-e696ef9c895a"))
IPropertySpinEdit : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetMinValue))
    _variant_t MinValue;
    __declspec(property(get=GetMaxValue))
    _variant_t MaxValue;
    __declspec(property(get=GetWithCheck,put=PutWithCheck))
    VARIANT_BOOL WithCheck;
    __declspec(property(get=GetCheckState,put=PutCheckState))
    enum CheckStateEnum CheckState;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinValue ( );
    _variant_t GetMaxValue ( );
    VARIANT_BOOL SetValueRange (
        const _variant_t & MinVal,
        const _variant_t & MaxVal );
    void PutWithCheck (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithCheck ( );
    void PutCheckState (
        enum CheckStateEnum PVal );
    enum CheckStateEnum GetCheckState ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutWidth (
        long PVal );
    long GetWidth ( );
    void PutStep (
        double PVal );
    double GetStep ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetValueRange (
        /*[in]*/ VARIANT MinVal,
        /*[in]*/ VARIANT MaxVal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_WithCheck (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithCheck (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckState (
        /*[in]*/ enum CheckStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CheckState (
        /*[out,retval]*/ enum CheckStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("db1f3224-837e-437f-8944-6fb9703f528b"))
IPropertyFileName : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCreateOpenButton,put=PutCreateOpenButton))
    VARIANT_BOOL CreateOpenButton;
    __declspec(property(put=PutBitmap))
    _variant_t Bitmap;
    __declspec(property(get=GetExtension,put=PutExtension))
    _bstr_t Extension;
    __declspec(property(get=GetFilter,put=PutFilter))
    _bstr_t Filter;
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetPreview,put=PutPreview))
    VARIANT_BOOL Preview;
    __declspec(property(get=GetDefaultValue,put=PutDefaultValue))
    _bstr_t DefaultValue;

    //
    // Wrapper methods for error-handling
    //

    void PutCreateOpenButton (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateOpenButton ( );
    void PutBitmap (
        const _variant_t & _arg1 );
    void PutExtension (
        _bstr_t PVal );
    _bstr_t GetExtension ( );
    void PutFilter (
        _bstr_t PVal );
    _bstr_t GetFilter ( );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutWidth (
        long PVal );
    long GetWidth ( );
    void PutPreview (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPreview ( );
    _bstr_t GetDefaultValue ( );
    void PutDefaultValue (
        _bstr_t PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CreateOpenButton (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateOpenButton (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Bitmap (
        /*[in]*/ VARIANT _arg1 ) = 0;
      virtual HRESULT __stdcall put_Extension (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Preview (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Preview (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_DefaultValue (
        /*[in]*/ BSTR PVal ) = 0;
};

struct __declspec(uuid("fc5cdcfb-3f67-43a1-8fc4-1278b901ce0e"))
IPropertyColor : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetEnableDefaultButton,put=PutEnableDefaultButton))
    VARIANT_BOOL EnableDefaultButton;
    __declspec(property(get=GetDefaultColor,put=PutDefaultColor))
    long DefaultColor;
    __declspec(property(get=GetDefaultButtonName,put=PutDefaultButtonName))
    _bstr_t DefaultButtonName;

    //
    // Wrapper methods for error-handling
    //

    void PutWidth (
        long PVal );
    long GetWidth ( );
    void PutEnableDefaultButton (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableDefaultButton ( );
    void PutDefaultColor (
        long PVal );
    long GetDefaultColor ( );
    void PutDefaultButtonName (
        _bstr_t PVal );
    _bstr_t GetDefaultButtonName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableDefaultButton (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableDefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DefaultColor (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_DefaultColor (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_DefaultButtonName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_DefaultButtonName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("fdb82760-7ea3-408e-8699-a8392acfd810"))
IPropertyEditList : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetListType,put=PutListType))
    enum ksEditListTypeEnum ListType;
    __declspec(property(get=GetItemChecked,put=PutItemChecked))
    VARIANT_BOOL ItemChecked[];
    __declspec(property(get=GetMultySelect,put=PutMultySelect))
    VARIANT_BOOL MultySelect;
    __declspec(property(get=GetItemSelected,put=PutItemSelected))
    VARIANT_BOOL ItemSelected[];
    __declspec(property(get=GetSort,put=PutSort))
    VARIANT_BOOL Sort;
    __declspec(property(get=GetItemsCount))
    long ItemsCount;
    __declspec(property(get=GetItemValue,put=PutItemValue))
    _bstr_t ItemValue[];
    __declspec(property(get=GetDefaultValue,put=PutDefaultValue))
    _bstr_t DefaultValue;
    __declspec(property(get=GetItemMissing,put=PutItemMissing))
    VARIANT_BOOL ItemMissing[];
    __declspec(property(get=GetCheckState,put=PutCheckState))
    enum CheckStateEnum CheckState;
    __declspec(property(get=GetAllowDelete,put=PutAllowDelete))
    VARIANT_BOOL AllowDelete;
    __declspec(property(get=GetComputeUniqueNames,put=PutComputeUniqueNames))
    VARIANT_BOOL ComputeUniqueNames;

    //
    // Wrapper methods for error-handling
    //

    enum ksEditListTypeEnum GetListType ( );
    void PutListType (
        enum ksEditListTypeEnum PVal );
    VARIANT_BOOL GetItemChecked (
        long Index );
    void PutItemChecked (
        long Index,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMultySelect ( );
    void PutMultySelect (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetItemSelected (
        long Index );
    void PutItemSelected (
        long Index,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSort ( );
    void PutSort (
        VARIANT_BOOL PVal );
    HRESULT ClearList ( );
    HRESULT Add (
        _bstr_t NewVal );
    HRESULT Delete (
        const _variant_t & Index );
    long GetItemsCount ( );
    void PutItemValue (
        const _variant_t & Index,
        _bstr_t PVal );
    _bstr_t GetItemValue (
        const _variant_t & Index );
    long Find (
        const _variant_t & Val );
    _bstr_t GetDefaultValue ( );
    void PutDefaultValue (
        _bstr_t PVal );
    VARIANT_BOOL GetItemMissing (
        long Index );
    void PutItemMissing (
        long Index,
        VARIANT_BOOL PVal );
    VARIANT_BOOL BeginEditItem (
        long Index );
    void PutCheckState (
        enum CheckStateEnum PVal );
    enum CheckStateEnum GetCheckState ( );
    VARIANT_BOOL GetAllowDelete ( );
    void PutAllowDelete (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetComputeUniqueNames ( );
    void PutComputeUniqueNames (
        VARIANT_BOOL PVal );
    HRESULT BringIntoView (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ListType (
        /*[out,retval]*/ enum ksEditListTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ListType (
        /*[in]*/ enum ksEditListTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ItemChecked (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ItemChecked (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MultySelect (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MultySelect (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ItemSelected (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ItemSelected (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Sort (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Sort (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearList ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR NewVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall get_ItemsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_ItemValue (
        /*[in]*/ VARIANT Index,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ItemValue (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ VARIANT Val,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_DefaultValue (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ItemMissing (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ItemMissing (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_BeginEditItem (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckState (
        /*[in]*/ enum CheckStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CheckState (
        /*[out,retval]*/ enum CheckStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_AllowDelete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AllowDelete (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ComputeUniqueNames (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ComputeUniqueNames (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_BringIntoView (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("d18d34f5-0028-4853-998c-25a48d141b43"))
IPropertyBmpList : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCurrentIndex,put=PutCurrentIndex))
    long CurrentIndex;
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetIconFont,put=PutIconFont))
    _bstr_t IconFont[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT Add (
        _bstr_t NewStr,
        const _variant_t & NewBmp );
    long GetCount ( );
    HRESULT ClearList ( );
    long Find (
        _bstr_t Val );
    void PutCurrentIndex (
        long PVal );
    long GetCurrentIndex ( );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutIconFont (
        long Index,
        _bstr_t PVal );
    _bstr_t GetIconFont (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR NewStr,
        /*[in]*/ VARIANT NewBmp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_ClearList ( ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR Val,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_CurrentIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_IconFont (
        /*[in]*/ long Index,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_IconFont (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("2a214701-0bcb-406c-b57f-6dfadd799a64"))
IPropertyLibExplorer : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetRootName,put=PutRootName))
    _bstr_t RootName;
    __declspec(property(get=GetFileValue))
    VARIANT_BOOL FileValue;

    //
    // Wrapper methods for error-handling
    //

    void PutFileName (
        _bstr_t PVal );
    _bstr_t GetFileName ( );
    void PutRootName (
        _bstr_t PVal );
    _bstr_t GetRootName ( );
    VARIANT_BOOL GetFileValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_RootName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_RootName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_FileValue (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("b2431c46-9a35-494b-a958-d9098f82c3fa"))
IPropertyStyleList : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCurrentIndex,put=PutCurrentIndex))
    long CurrentIndex;
    __declspec(property(get=GetAnotherStyleBtnEnable,put=PutAnotherStyleBtnEnable))
    VARIANT_BOOL AnotherStyleBtnEnable;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Add (
        const _variant_t & Styles );
    long GetCount ( );
    VARIANT_BOOL ClearList ( );
    long Find (
        long Val );
    void PutCurrentIndex (
        long PVal );
    long GetCurrentIndex ( );
    void PutAnotherStyleBtnEnable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAnotherStyleBtnEnable ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Styles,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_ClearList (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ long Val,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_CurrentIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_AnotherStyleBtnEnable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AnotherStyleBtnEnable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("5a247709-ea70-443c-968e-bfecc951e14f"))
IPropertyGroupBegin : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetExpanding,put=PutExpanding))
    VARIANT_BOOL Expanding;
    __declspec(property(get=GetExpanded,put=PutExpanded))
    VARIANT_BOOL Expanded;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetExpanding ( );
    void PutExpanding (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetExpanded ( );
    void PutExpanded (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Expanding (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Expanding (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Expanded (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Expanded (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("6afddac7-eb89-440c-8ad0-866aeeeab7cc"))
IPropertyGroupEnd : IPropertyControl
{};

struct __declspec(uuid("74191892-71fc-4820-b8a4-cb264a9e9e8e"))
IPropertyTwinSwitcher : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetLabel2,put=PutLabel2))
    _bstr_t Label2;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLabel2 ( );
    void PutLabel2 (
        _bstr_t PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Label2 (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Label2 (
        /*[in]*/ BSTR PVal ) = 0;
};

struct __declspec(uuid("64725d44-155c-412c-b0f5-f5203f5f75fd"))
IPropertyPoint3D : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint3DType,put=PutPoint3DType))
    enum ksPoint3DTypeEnum Point3DType;
    __declspec(property(get=GetCoordinateValue,put=PutCoordinateValue))
    double CoordinateValue[];
    __declspec(property(get=GetCoordinateState,put=PutCoordinateState))
    enum CheckStateEnum CoordinateState[];
    __declspec(property(get=GetCoordinate))
    IPropertyEditPtr Coordinate[];

    //
    // Wrapper methods for error-handling
    //

    void PutPoint3DType (
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPoint3DType ( );
    void PutCoordinateValue (
        long Index,
        double PVal );
    double GetCoordinateValue (
        long Index );
    void PutCoordinateState (
        long Index,
        enum CheckStateEnum PVal );
    enum CheckStateEnum GetCoordinateState (
        long Index );
    IPropertyEditPtr GetCoordinate (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Point3DType (
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Point3DType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateValue (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateValue (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateState (
        /*[in]*/ long Index,
        /*[in]*/ enum CheckStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateState (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum CheckStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Coordinate (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IPropertyEdit * * Result ) = 0;
};

struct __declspec(uuid("8576d0c2-3147-4cff-aa39-fa9ef9b799e3"))
IPropertyPreviewText : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetPreviewText))
    ITextPtr PreviewText;
    __declspec(property(get=GetDoubleSize,put=PutDoubleSize))
    VARIANT_BOOL DoubleSize;

    //
    // Wrapper methods for error-handling
    //

    ITextPtr GetPreviewText ( );
    VARIANT_BOOL UpdateParam ( );
    void PutDoubleSize (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDoubleSize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PreviewText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateParam (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DoubleSize (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DoubleSize (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("8b2a259e-6819-4ddb-8ea3-c408f9f04054"))
IPropertyAggregateControl : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetPropertyControl))
    IPropertyControlPtr PropertyControl[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Add (
        struct IPropertyControl * Control );
    IPropertyControlPtr GetPropertyControl (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IPropertyControl * Control,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyControl (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IPropertyControl * * Control ) = 0;
};

struct __declspec(uuid("c97e7403-b375-4544-87dd-4d3ef36388e5"))
IProcessContextPanel : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddControl (
        struct IPropertyControl * PVal );
    VARIANT_BOOL AddAdditionalButtonsFromControl (
        struct IPropertyControl * PVal,
        _bstr_t Title );
    VARIANT_BOOL AddLinkContentButton (
        struct IPropertyControl * PVal,
        _bstr_t Title );
    VARIANT_BOOL AddGeomCalculatorCommands (
        struct IPropertyControl * PVal );
    VARIANT_BOOL AddSeparator ( );
    VARIANT_BOOL AddNewSearchButton ( );
    VARIANT_BOOL AddSnapCommands ( );
    VARIANT_BOOL AddGroupBegin (
        _bstr_t Title );
    VARIANT_BOOL AddGroupEnd ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddControl (
        /*[in]*/ struct IPropertyControl * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddAdditionalButtonsFromControl (
        /*[in]*/ struct IPropertyControl * PVal,
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddLinkContentButton (
        /*[in]*/ struct IPropertyControl * PVal,
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddGeomCalculatorCommands (
        /*[in]*/ struct IPropertyControl * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddSeparator (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddNewSearchButton (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddSnapCommands (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddGroupBegin (
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddGroupEnd (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("75e9d1c7-b766-4d53-be99-a3088c249266"))
IPropertyBasePoint : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCenterPointVisible,put=PutCenterPointVisible))
    VARIANT_BOOL CenterPointVisible;

    //
    // Wrapper methods for error-handling
    //

    void PutCenterPointVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCenterPointVisible ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CenterPointVisible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CenterPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("2f69f0e3-89da-4b0c-8abe-a6e996f39ad1"))
IPropertyMarking : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetMarkingVisible,put=PutMarkingVisible))
    VARIANT_BOOL MarkingVisible[];
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetMarking (
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL AddSystemDelimer );
    VARIANT_BOOL SetMarking (
        enum ksVariantMarkingTypeEnum MarkingType,
        _bstr_t Marking );
    void PutMarkingVisible (
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMarkingVisible (
        enum ksVariantMarkingTypeEnum MarkingType );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetMarking (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL AddSystemDelimer,
        /*[out,retval]*/ BSTR * Marking ) = 0;
      virtual HRESULT __stdcall raw_SetMarking (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ BSTR Marking,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_MarkingVisible (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MarkingVisible (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("3a7c6a0c-53db-4043-9a77-6d3989175741"))
IProcess : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetProcessParam,put=PutProcessParam))
    IProcessParamPtr ProcessParam;
    __declspec(property(get=GetCursorId,put=PutCursorId))
    _variant_t CursorId;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetPrompt,put=PutPrompt))
    _bstr_t Prompt;
    __declspec(property(get=GetMenu,put=PutMenu))
    _variant_t Menu;
    __declspec(property(get=GetResModule,put=PutResModule))
    _variant_t ResModule;
    __declspec(property(get=GetDynamic,put=PutDynamic))
    VARIANT_BOOL Dynamic;
    __declspec(property(get=GetCritical,put=PutCritical))
    VARIANT_BOOL Critical;

    //
    // Wrapper methods for error-handling
    //

    void PutProcessParam (
        struct IProcessParam * Param );
    IProcessParamPtr GetProcessParam ( );
    void PutCursorId (
        const _variant_t & PVal );
    _variant_t GetCursorId ( );
    void PutCaption (
        _bstr_t PVal );
    _bstr_t GetCaption ( );
    void PutPrompt (
        _bstr_t PVal );
    _bstr_t GetPrompt ( );
    void PutMenu (
        const _variant_t & PVal );
    _variant_t GetMenu ( );
    void PutResModule (
        const _variant_t & HInstance );
    _variant_t GetResModule ( );
    void PutDynamic (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDynamic ( );
    VARIANT_BOOL Run (
        VARIANT_BOOL Modal,
        VARIANT_BOOL PostMessage );
    VARIANT_BOOL Stop ( );
    VARIANT_BOOL SetCursorText (
        _bstr_t PVal );
    VARIANT_BOOL Update ( );
    void PutCritical (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCritical ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ProcessParam (
        /*[in]*/ struct IProcessParam * Param ) = 0;
      virtual HRESULT __stdcall get_ProcessParam (
        /*[out,retval]*/ struct IProcessParam * * Param ) = 0;
      virtual HRESULT __stdcall put_CursorId (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_CursorId (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Prompt (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Prompt (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Menu (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Menu (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_ResModule (
        /*[in]*/ VARIANT HInstance ) = 0;
      virtual HRESULT __stdcall get_ResModule (
        /*[out,retval]*/ VARIANT * HInstance ) = 0;
      virtual HRESULT __stdcall put_Dynamic (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Dynamic (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT_BOOL Modal,
        /*[in]*/ VARIANT_BOOL PostMessage,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Stop (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_SetCursorText (
        /*[in]*/ BSTR PVal,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall put_Critical (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Critical (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("05b6026a-4b53-4015-a7cb-94298073f86c"))
IMouseEnterLeaveParameters7 : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetOffsetAngle,put=PutOffsetAngle))
    double OffsetAngle;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    long Symbol;
    __declspec(property(get=GetSymbolFont,put=PutSymbolFont))
    _bstr_t SymbolFont;
    __declspec(property(get=GetSymbolColor,put=PutSymbolColor))
    long SymbolColor;
    __declspec(property(get=GetSymbolScale,put=PutSymbolScale))
    double SymbolScale;

    //
    // Wrapper methods for error-handling
    //

    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutOffset (
        double PVal );
    double GetOffset ( );
    void PutOffsetAngle (
        double PVal );
    double GetOffsetAngle ( );
    void PutSymbol (
        long PVal );
    long GetSymbol ( );
    void PutSymbolFont (
        _bstr_t PVal );
    _bstr_t GetSymbolFont ( );
    void PutSymbolColor (
        long PVal );
    long GetSymbolColor ( );
    void PutSymbolScale (
        double PVal );
    double GetSymbolScale ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_SymbolFont (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_SymbolFont (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_SymbolColor (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_SymbolColor (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_SymbolScale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SymbolScale (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("18cf34d8-95e8-4130-a3b2-79d0bcb1055c"))
IPropertyReplaceList : IPropertyControl
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddItem (
        struct IDocumentFrame * Document,
        _bstr_t Text,
        _bstr_t FindText,
        long StartIndex,
        VARIANT_BOOL ReadOnly );
    HRESULT Clear ( );
    _variant_t GetSelection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ struct IDocumentFrame * Document,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FindText,
        /*[in]*/ long StartIndex,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_GetSelection (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("5f9580da-915c-4c28-991d-5dffe3bf3b3c"))
IViewDesignation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowName,put=PutShowName))
    VARIANT_BOOL ShowName;
    __declspec(property(get=GetShowUnfold,put=PutShowUnfold))
    VARIANT_BOOL ShowUnfold;
    __declspec(property(get=GetShowScale,put=PutShowScale))
    VARIANT_BOOL ShowScale;
    __declspec(property(get=GetShowTurn,put=PutShowTurn))
    VARIANT_BOOL ShowTurn;
    __declspec(property(get=GetShowAngle,put=PutShowAngle))
    VARIANT_BOOL ShowAngle;
    __declspec(property(get=GetShowPage,put=PutShowPage))
    VARIANT_BOOL ShowPage;
    __declspec(property(get=GetShowZone,put=PutShowZone))
    VARIANT_BOOL ShowZone;
    __declspec(property(get=GetDesignation))
    _bstr_t Designation;
    __declspec(property(get=GetRefObject,put=PutRefObject))
    _variant_t RefObject;
    __declspec(property(get=GetDrawingText))
    IDrawingObjectPtr DrawingText;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetShowName ( );
    void PutShowName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowUnfold ( );
    void PutShowUnfold (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowScale ( );
    void PutShowScale (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowTurn ( );
    void PutShowTurn (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowAngle ( );
    void PutShowAngle (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowPage ( );
    void PutShowPage (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowZone ( );
    void PutShowZone (
        VARIANT_BOOL PVal );
    _bstr_t GetDesignation ( );
    _variant_t GetRefObject ( );
    void PutRefObject (
        const _variant_t & PVal );
    IDrawingObjectPtr GetDrawingText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShowName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowUnfold (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowUnfold (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowScale (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowScale (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowTurn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowTurn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowAngle (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowAngle (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowPage (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowPage (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowZone (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowZone (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Designation (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_RefObject (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_RefObject (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_DrawingText (
        /*[out,retval]*/ struct IDrawingObject * * PVal ) = 0;
};

struct __declspec(uuid("d4c8b5af-b2a1-4e07-9cd0-a1fc5b0bc1e1"))
ICutViewParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCutsCount))
    long CutsCount;
    __declspec(property(get=GetLocalCut,put=PutLocalCut))
    VARIANT_BOOL LocalCut[];
    __declspec(property(get=GetHatchParam))
    IHatchParamPtr HatchParam[];

    //
    // Wrapper methods for error-handling
    //

    long AddCut (
        _bstr_t Name,
        long Number,
        double X,
        double Y,
        VARIANT_BOOL ModelCut,
        struct IDrawingObject * Contour,
        struct IView * View );
    VARIANT_BOOL DeleteCut (
        long Index );
    VARIANT_BOOL DeleteAllCuts ( );
    VARIANT_BOOL SetCutPlanePosition (
        long Index,
        double X,
        double Y );
    VARIANT_BOOL GetCutPlanePosition (
        long Index,
        double * X,
        double * Y );
    VARIANT_BOOL SetCutParams (
        long Index,
        _bstr_t Name,
        long Number,
        VARIANT_BOOL ModelCut );
    IDrawingObjectPtr GetCutParams (
        long Index,
        BSTR * Name,
        long * Number,
        VARIANT_BOOL * ModelCut );
    long GetCutsCount ( );
    VARIANT_BOOL GetLocalCut (
        long Index );
    void PutLocalCut (
        long Index,
        VARIANT_BOOL Result );
    IHatchParamPtr GetHatchParam (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddCut (
        /*[in]*/ BSTR Name,
        /*[in]*/ long Number,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ VARIANT_BOOL ModelCut,
        /*[in]*/ struct IDrawingObject * Contour,
        /*[in]*/ struct IView * View,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_DeleteCut (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllCuts (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCutPlanePosition (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCutPlanePosition (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCutParams (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Name,
        /*[in]*/ long Number,
        /*[in]*/ VARIANT_BOOL ModelCut,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCutParams (
        /*[in]*/ long Index,
        /*[out]*/ BSTR * Name,
        /*[out]*/ long * Number,
        /*[out]*/ VARIANT_BOOL * ModelCut,
        /*[out,retval]*/ struct IDrawingObject * * Contour ) = 0;
      virtual HRESULT __stdcall get_CutsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_LocalCut (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_LocalCut (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_HatchParam (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IHatchParam * * Result ) = 0;
};

struct __declspec(uuid("85efccc7-1667-48b7-a915-bb8149915ef8"))
ILocalCoordinateSystem2D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetAxisXLabel,put=PutAxisXLabel))
    _bstr_t AxisXLabel;
    __declspec(property(get=GetAxisYLabel,put=PutAxisYLabel))
    _bstr_t AxisYLabel;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutX (
        double X );
    double GetX ( );
    void PutY (
        double Y );
    double GetY ( );
    void PutAngle (
        double A );
    double GetAngle ( );
    void PutAxisXLabel (
        _bstr_t Name );
    _bstr_t GetAxisXLabel ( );
    void PutAxisYLabel (
        _bstr_t Name );
    _bstr_t GetAxisYLabel ( );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double X ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * X ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Y ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Y ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double A ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * A ) = 0;
      virtual HRESULT __stdcall put_AxisXLabel (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AxisXLabel (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_AxisYLabel (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AxisYLabel (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e6a6a1c8-a6f9-470e-af64-d6ab7741d684"))
ILocalCoordinateSystems2D : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ILocalCoordinateSystem2DPtr Item[];
    __declspec(property(get=GetCurrent,put=PutCurrent))
    ILocalCoordinateSystem2DPtr Current;

    //
    // Wrapper methods for error-handling
    //

    ILocalCoordinateSystem2DPtr GetItem (
        const _variant_t & Index );
    ILocalCoordinateSystem2DPtr Add ( );
    void PutCurrent (
        struct ILocalCoordinateSystem2D * Result );
    ILocalCoordinateSystem2DPtr GetCurrent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILocalCoordinateSystem2D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILocalCoordinateSystem2D * * Result ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ struct ILocalCoordinateSystem2D * Result ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ struct ILocalCoordinateSystem2D * * Result ) = 0;
};

struct __declspec(uuid("93233f05-b389-4076-bca2-ccdb87bdb7b7"))
IView1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalCoordinateSystems2D))
    ILocalCoordinateSystems2DPtr LocalCoordinateSystems2D;
    __declspec(property(get=GetEditMacroVisibleRegime))
    VARIANT_BOOL EditMacroVisibleRegime;
    __declspec(property(get=GetNumerator,put=PutNumerator))
    double Numerator;
    __declspec(property(get=GetPrintable,put=PutPrintable))
    VARIANT_BOOL Printable;
    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetCrossed))
    VARIANT_BOOL Crossed;
    __declspec(property(get=GetCrossedTitle))
    VARIANT_BOOL CrossedTitle;

    //
    // Wrapper methods for error-handling
    //

    ILocalCoordinateSystems2DPtr GetLocalCoordinateSystems2D ( );
    VARIANT_BOOL GetEditMacroVisibleRegime ( );
    void PutNumerator (
        double N );
    double GetNumerator ( );
    void PutPrintable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPrintable ( );
    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Result );
    VARIANT_BOOL GetCrossed ( );
    VARIANT_BOOL GetCrossedTitle ( );
    IDrawingObjectPtr FindObject (
        double X,
        double Y,
        double Limit,
        struct IFindObjectParameters * Param );
    _variant_t FindObjects (
        double X,
        double Y,
        double Limit,
        struct IFindObjectParameters * Param );
    _variant_t SelectObjects (
        enum ksRegionTypeEnum RegionType,
        double XMin,
        double YMin,
        double XMax,
        double YMax );
    VARIANT_BOOL TransformPointToSheet (
        double * X,
        double * Y );
    VARIANT_BOOL TransformPointFromSheet (
        double * X,
        double * Y );
    VARIANT_BOOL TransformAngleToSheet (
        double * Angle );
    VARIANT_BOOL TransformAngleFromSheet (
        double * Angle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocalCoordinateSystems2D (
        /*[out,retval]*/ struct ILocalCoordinateSystems2D * * Result ) = 0;
      virtual HRESULT __stdcall get_EditMacroVisibleRegime (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Numerator (
        /*[in]*/ double N ) = 0;
      virtual HRESULT __stdcall get_Numerator (
        /*[out,retval]*/ double * N ) = 0;
      virtual HRESULT __stdcall put_Printable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Printable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Result ) = 0;
      virtual HRESULT __stdcall get_Crossed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_CrossedTitle (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_FindObject (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Limit,
        /*[in]*/ struct IFindObjectParameters * Param,
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_FindObjects (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Limit,
        /*[in]*/ struct IFindObjectParameters * Param,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_SelectObjects (
        /*[in]*/ enum ksRegionTypeEnum RegionType,
        /*[in]*/ double XMin,
        /*[in]*/ double YMin,
        /*[in]*/ double XMax,
        /*[in]*/ double YMax,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_TransformPointToSheet (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_TransformPointFromSheet (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_TransformAngleToSheet (
        /*[in,out]*/ double * Angle,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_TransformAngleFromSheet (
        /*[in,out]*/ double * Angle,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("557c20d0-5e6c-485e-b8d6-736180bd4261"))
IAutoNumerationManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumericGroupsCount))
    long NumericGroupsCount;
    __declspec(property(get=GetNumericGroup))
    INumericGroupPtr NumericGroup[];
    __declspec(property(get=GetCurrentNumericGroup,put=PutCurrentNumericGroup))
    INumericGroupPtr CurrentNumericGroup;

    //
    // Wrapper methods for error-handling
    //

    long GetNumericGroupsCount ( );
    INumericGroupPtr GetNumericGroup (
        const _variant_t & Index );
    INumericGroupPtr GetCurrentNumericGroup ( );
    void PutCurrentNumericGroup (
        struct INumericGroup * Result );
    INumericGroupPtr AddNumericGroup (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumericGroupsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_NumericGroup (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct INumericGroup * * Result ) = 0;
      virtual HRESULT __stdcall get_CurrentNumericGroup (
        /*[out,retval]*/ struct INumericGroup * * Result ) = 0;
      virtual HRESULT __stdcall put_CurrentNumericGroup (
        /*[in]*/ struct INumericGroup * Result ) = 0;
      virtual HRESULT __stdcall raw_AddNumericGroup (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct INumericGroup * * Result ) = 0;
};

struct __declspec(uuid("b09a64bf-7aa6-4bf6-b8e8-aa8e8ee6e9d6"))
IDocument2DSettings : IDocumentSettings
{
    //
    // Property data
    //

    __declspec(property(get=GetLayersGroupWay,put=PutLayersGroupWay))
    enum LayersGroupWayEnum LayersGroupWay;
    __declspec(property(get=GetCompositionInherit,put=PutCompositionInherit))
    VARIANT_BOOL CompositionInherit;
    __declspec(property(get=GetAutoSortObjectsParameters))
    IAutoSortObjectsParametersPtr AutoSortObjectsParameters;
    __declspec(property(get=GetRoughModification,put=PutRoughModification))
    enum ksRoughModificationEnum RoughModification;

    //
    // Wrapper methods for error-handling
    //

    void PutLayersGroupWay (
        enum LayersGroupWayEnum PVal );
    enum LayersGroupWayEnum GetLayersGroupWay ( );
    void PutCompositionInherit (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCompositionInherit ( );
    IAutoSortObjectsParametersPtr GetAutoSortObjectsParameters ( );
    void PutRoughModification (
        enum ksRoughModificationEnum PVal );
    enum ksRoughModificationEnum GetRoughModification ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LayersGroupWay (
        /*[in]*/ enum LayersGroupWayEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LayersGroupWay (
        /*[out,retval]*/ enum LayersGroupWayEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CompositionInherit (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CompositionInherit (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSortObjectsParameters (
        /*[out,retval]*/ struct IAutoSortObjectsParameters * * PVal ) = 0;
      virtual HRESULT __stdcall put_RoughModification (
        /*[in]*/ enum ksRoughModificationEnum PVal ) = 0;
      virtual HRESULT __stdcall get_RoughModification (
        /*[out,retval]*/ enum ksRoughModificationEnum * PVal ) = 0;
};

struct __declspec(uuid("6ffaf1bc-98c1-4562-a7a7-1d263996b1d4"))
IDocument3DSettings : IDocumentSettings
{
    //
    // Property data
    //

    __declspec(property(get=GetAccuracyModelDisplaying,put=PutAccuracyModelDisplaying))
    double AccuracyModelDisplaying;
    __declspec(property(get=GetAccuracyMassProperties,put=PutAccuracyMassProperties))
    double AccuracyMassProperties;
    __declspec(property(get=GetRoughModification,put=PutRoughModification))
    enum ksRoughModificationEnum RoughModification;

    //
    // Wrapper methods for error-handling
    //

    void PutAccuracyModelDisplaying (
        double PVal );
    double GetAccuracyModelDisplaying ( );
    void PutAccuracyMassProperties (
        double PVal );
    double GetAccuracyMassProperties ( );
    void PutRoughModification (
        enum ksRoughModificationEnum PVal );
    enum ksRoughModificationEnum GetRoughModification ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AccuracyModelDisplaying (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_AccuracyModelDisplaying (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AccuracyMassProperties (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_AccuracyMassProperties (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RoughModification (
        /*[in]*/ enum ksRoughModificationEnum PVal ) = 0;
      virtual HRESULT __stdcall get_RoughModification (
        /*[out,retval]*/ enum ksRoughModificationEnum * PVal ) = 0;
};

struct __declspec(uuid("28c513ee-057a-4094-8c18-d3fd733d2c81"))
IThreadDialogParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetStandart,put=PutStandart))
    _bstr_t Standart;
    __declspec(property(get=GetIsConic,put=PutIsConic))
    VARIANT_BOOL IsConic;
    __declspec(property(get=GetNominalDiameter,put=PutNominalDiameter))
    double NominalDiameter;
    __declspec(property(get=GetP,put=PutP))
    double P;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStandart ( );
    void PutStandart (
        _bstr_t PVal );
    VARIANT_BOOL GetIsConic ( );
    void PutIsConic (
        VARIANT_BOOL PVal );
    double GetNominalDiameter ( );
    void PutNominalDiameter (
        double PVal );
    double GetP ( );
    void PutP (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Standart (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Standart (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_IsConic (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IsConic (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NominalDiameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_NominalDiameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_P (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_P (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("b9362883-c8ec-4603-a6aa-7f4703aaa9d9"))
IContentDialogParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetUpperCaseTitle,put=PutUpperCaseTitle))
    VARIANT_BOOL UpperCaseTitle;
    __declspec(property(get=GetResizable,put=PutResizable))
    VARIANT_BOOL Resizable;
    __declspec(property(get=GetPositiveButton,put=PutPositiveButton))
    _bstr_t PositiveButton;
    __declspec(property(get=GetNegativeButton,put=PutNegativeButton))
    _bstr_t NegativeButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    _bstr_t CancelButton;
    __declspec(property(get=GetAdditionalButton,put=PutAdditionalButton))
    _bstr_t AdditionalButton;
    __declspec(property(get=GetHelpId,put=PutHelpId))
    long HelpId;
    __declspec(property(get=GetHelpFileName,put=PutHelpFileName))
    _bstr_t HelpFileName;
    __declspec(property(get=GetCheckBoxTitle,put=PutCheckBoxTitle))
    _bstr_t CheckBoxTitle;
    __declspec(property(get=GetCheckBoxChecked,put=PutCheckBoxChecked))
    VARIANT_BOOL CheckBoxChecked;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetMinWidth,put=PutMinWidth))
    double MinWidth;
    __declspec(property(get=GetMinHeight,put=PutMinHeight))
    double MinHeight;
    __declspec(property(get=GetMaxWidth,put=PutMaxWidth))
    double MaxWidth;
    __declspec(property(get=GetMaxHeight,put=PutMaxHeight))
    double MaxHeight;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t PVal );
    VARIANT_BOOL GetUpperCaseTitle ( );
    void PutUpperCaseTitle (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetResizable ( );
    void PutResizable (
        VARIANT_BOOL PVal );
    _bstr_t GetPositiveButton ( );
    void PutPositiveButton (
        _bstr_t PVal );
    _bstr_t GetNegativeButton ( );
    void PutNegativeButton (
        _bstr_t PVal );
    _bstr_t GetCancelButton ( );
    void PutCancelButton (
        _bstr_t PVal );
    _bstr_t GetAdditionalButton ( );
    void PutAdditionalButton (
        _bstr_t PVal );
    long GetHelpId ( );
    void PutHelpId (
        long PVal );
    _bstr_t GetHelpFileName ( );
    void PutHelpFileName (
        _bstr_t PVal );
    _bstr_t GetCheckBoxTitle ( );
    void PutCheckBoxTitle (
        _bstr_t PVal );
    VARIANT_BOOL GetCheckBoxChecked ( );
    void PutCheckBoxChecked (
        VARIANT_BOOL PVal );
    double GetWidth ( );
    void PutWidth (
        double PVal );
    double GetHeight ( );
    void PutHeight (
        double PVal );
    double GetMinWidth ( );
    void PutMinWidth (
        double PVal );
    double GetMinHeight ( );
    void PutMinHeight (
        double PVal );
    double GetMaxWidth ( );
    void PutMaxWidth (
        double PVal );
    double GetMaxHeight ( );
    void PutMaxHeight (
        double PVal );
    VARIANT_BOOL AddLeftToolButton (
        _bstr_t Header,
        VARIANT_BOOL HeaderVisible,
        long CommandID,
        long IconId,
        _bstr_t IconFont,
        enum ButtonTypeEnum ButtonType );
    VARIANT_BOOL AddRightToolButton (
        _bstr_t Header,
        VARIANT_BOOL HeaderVisible,
        long CommandID,
        long IconId,
        _bstr_t IconFont,
        enum ButtonTypeEnum ButtonType );
    VARIANT_BOOL AddLeftSeparator ( );
    VARIANT_BOOL AddRightSeparator ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_UpperCaseTitle (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UpperCaseTitle (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Resizable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Resizable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PositiveButton (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_PositiveButton (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_NegativeButton (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_NegativeButton (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalButton (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_AdditionalButton (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_HelpId (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_HelpId (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_HelpFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_HelpFileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_CheckBoxTitle (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckBoxTitle (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_CheckBoxChecked (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckBoxChecked (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_MinWidth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MinWidth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_MinHeight (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MinHeight (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_MaxWidth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MaxWidth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_MaxHeight (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MaxHeight (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_AddLeftToolButton (
        /*[in]*/ BSTR Header,
        /*[in]*/ VARIANT_BOOL HeaderVisible,
        /*[in]*/ long CommandID,
        /*[in]*/ long IconId,
        /*[in]*/ BSTR IconFont,
        /*[in]*/ enum ButtonTypeEnum ButtonType,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddRightToolButton (
        /*[in]*/ BSTR Header,
        /*[in]*/ VARIANT_BOOL HeaderVisible,
        /*[in]*/ long CommandID,
        /*[in]*/ long IconId,
        /*[in]*/ BSTR IconFont,
        /*[in]*/ enum ButtonTypeEnum ButtonType,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddLeftSeparator (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddRightSeparator (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("c825c801-d6d3-4456-bd37-d48ed799e033"))
IApplicationDialogs : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IKompasAPIObjectPtr GetDialogParam (
        enum KompasAPIObjectTypeEnum ParamType );
    VARIANT_BOOL SelectThread (
        OLE_HANDLE ParentHwnd,
        struct IThreadDialogParam * DialogParam );
    long ShowContentDialog (
        OLE_HANDLE ParentHwnd,
        struct IContentDialogParam * DialogParam );
    long WhatsWrongDlg (
        const _variant_t & Objs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDialogParam (
        /*[in]*/ enum KompasAPIObjectTypeEnum ParamType,
        /*[out,retval]*/ struct IKompasAPIObject * * Param ) = 0;
      virtual HRESULT __stdcall raw_SelectThread (
        /*[in]*/ OLE_HANDLE ParentHwnd,
        /*[in]*/ struct IThreadDialogParam * DialogParam,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ShowContentDialog (
        /*[in]*/ OLE_HANDLE ParentHwnd,
        /*[in]*/ struct IContentDialogParam * DialogParam,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_WhatsWrongDlg (
        /*[in]*/ VARIANT Objs,
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("0a351402-abad-4347-b6ec-b5eb1121dbfb"))
IFormatLabelRules : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPropertiesCount))
    long PropertiesCount;
    __declspec(property(get=GetProperty,put=PutProperty))
    IPropertyPtr Property[];
    __declspec(property(get=GetPropertyId,put=PutPropertyId))
    double PropertyId[];
    __declspec(property(get=GetPropertyUse,put=PutPropertyUse))
    VARIANT_BOOL PropertyUse[];
    __declspec(property(get=GetPropertyPrefix,put=PutPropertyPrefix))
    _bstr_t PropertyPrefix[];

    //
    // Wrapper methods for error-handling
    //

    long GetPropertiesCount ( );
    IPropertyPtr GetProperty (
        long Index );
    void PutProperty (
        long Index,
        struct IProperty * Result );
    double GetPropertyId (
        long Index );
    void PutPropertyId (
        long Index,
        double Result );
    VARIANT_BOOL GetPropertyUse (
        long Index );
    void PutPropertyUse (
        long Index,
        VARIANT_BOOL Result );
    _bstr_t GetPropertyPrefix (
        long Index );
    void PutPropertyPrefix (
        long Index,
        _bstr_t Result );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL AddProperty (
        long IndexAt,
        struct IProperty * Property,
        VARIANT_BOOL Use,
        _bstr_t Prefix );
    VARIANT_BOOL AddPropertyById (
        long IndexAt,
        double PropertyId,
        VARIANT_BOOL Use,
        _bstr_t Prefix );
    VARIANT_BOOL AddPropertyFromLibrary (
        long IndexAt,
        _bstr_t FileName,
        double PropertyId,
        VARIANT_BOOL Use,
        _bstr_t Prefix );
    VARIANT_BOOL DeleteProperty (
        long Index );
    VARIANT_BOOL SwapProperties (
        long Index1,
        long Index2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PropertiesCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Property (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IProperty * * Result ) = 0;
      virtual HRESULT __stdcall put_Property (
        /*[in]*/ long Index,
        /*[in]*/ struct IProperty * Result ) = 0;
      virtual HRESULT __stdcall get_PropertyId (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_PropertyId (
        /*[in]*/ long Index,
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_PropertyUse (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_PropertyUse (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_PropertyPrefix (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_PropertyPrefix (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddProperty (
        /*[in]*/ long IndexAt,
        /*[in]*/ struct IProperty * Property,
        /*[in]*/ VARIANT_BOOL Use,
        /*[in]*/ BSTR Prefix,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPropertyById (
        /*[in]*/ long IndexAt,
        /*[in]*/ double PropertyId,
        /*[in]*/ VARIANT_BOOL Use,
        /*[in]*/ BSTR Prefix,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPropertyFromLibrary (
        /*[in]*/ long IndexAt,
        /*[in]*/ BSTR FileName,
        /*[in]*/ double PropertyId,
        /*[in]*/ VARIANT_BOOL Use,
        /*[in]*/ BSTR Prefix,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteProperty (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SwapProperties (
        /*[in]*/ long Index1,
        /*[in]*/ long Index2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("48496b1a-c41f-4411-8955-e759330a4f83"))
IDocumentSettings1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFormatLabelRules))
    IFormatLabelRulesPtr FormatLabelRules;

    //
    // Wrapper methods for error-handling
    //

    IFormatLabelRulesPtr GetFormatLabelRules ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FormatLabelRules (
        /*[out,retval]*/ struct IFormatLabelRules * * Result ) = 0;
};

struct __declspec(uuid("b416c2ca-ca76-4cbe-8d3a-458967f8e0ce"))
IHypertextReferenceParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinkObject,put=PutLinkObject))
    IKompasAPIObjectPtr LinkObject;
    __declspec(property(get=GetHypertextType,put=PutHypertextType))
    enum ksHypertextTypeEnum HypertextType;
    __declspec(property(get=GetTextLineIndex,put=PutTextLineIndex))
    long TextLineIndex;
    __declspec(property(get=GetBrackets,put=PutBrackets))
    VARIANT_BOOL Brackets;
    __declspec(property(get=GetPrecission,put=PutPrecission))
    long Precission;
    __declspec(property(get=GetPropertyId,put=PutPropertyId))
    double PropertyId;

    //
    // Wrapper methods for error-handling
    //

    void PutLinkObject (
        struct IKompasAPIObject * PVal );
    IKompasAPIObjectPtr GetLinkObject ( );
    void PutHypertextType (
        enum ksHypertextTypeEnum PVal );
    enum ksHypertextTypeEnum GetHypertextType ( );
    void PutTextLineIndex (
        long PVal );
    long GetTextLineIndex ( );
    void PutBrackets (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBrackets ( );
    void PutPrecission (
        long PVal );
    long GetPrecission ( );
    VARIANT_BOOL Destroy ( );
    void PutPropertyId (
        double PVal );
    double GetPropertyId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LinkObject (
        /*[in]*/ struct IKompasAPIObject * PVal ) = 0;
      virtual HRESULT __stdcall get_LinkObject (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_HypertextType (
        /*[in]*/ enum ksHypertextTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HypertextType (
        /*[out,retval]*/ enum ksHypertextTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_TextLineIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_TextLineIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Brackets (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Brackets (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Precission (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Precission (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_Destroy (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_PropertyId (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyId (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("cf9150ba-0e3a-46de-8973-332a00361474"))
ITableCell : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetText))
    IKompasAPIObjectPtr Text;
    __declspec(property(get=GetCellID))
    long CellID;
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetColumn))
    long Column;

    //
    // Wrapper methods for error-handling
    //

    IKompasAPIObjectPtr GetText ( );
    long GetCellID ( );
    long GetRow ( );
    long GetColumn ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_CellID (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("d3715420-645e-435b-bb25-8e35ac570718"))
ITable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRowsCount))
    long RowsCount;
    __declspec(property(get=GetColumnsCount))
    long ColumnsCount;
    __declspec(property(get=GetCell))
    ITableCellPtr Cell[][];
    __declspec(property(get=GetCellById))
    ITableCellPtr CellById[];
    __declspec(property(get=GetRange))
    ITableRangePtr Range[][][][];

    //
    // Wrapper methods for error-handling
    //

    long GetRowsCount ( );
    long GetColumnsCount ( );
    ITableCellPtr GetCell (
        long RowN,
        long ColN );
    ITableCellPtr GetCellById (
        long CellID );
    VARIANT_BOOL AddColumn (
        long ColN,
        VARIANT_BOOL Right );
    VARIANT_BOOL DeleteColumn (
        long ColN );
    VARIANT_BOOL AddRow (
        long RowN,
        VARIANT_BOOL Down );
    VARIANT_BOOL DeleteRow (
        long RowN );
    VARIANT_BOOL Clear ( );
    ITableRangePtr GetRange (
        long BeginRow,
        long BeginColumn,
        long EndRow,
        long EndColumn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RowsCount (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_ColumnsCount (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_Cell (
        /*[in]*/ long RowN,
        /*[in]*/ long ColN,
        /*[out,retval]*/ struct ITableCell * * Val ) = 0;
      virtual HRESULT __stdcall get_CellById (
        /*[in]*/ long CellID,
        /*[out,retval]*/ struct ITableCell * * Val ) = 0;
      virtual HRESULT __stdcall raw_AddColumn (
        /*[in]*/ long ColN,
        /*[in]*/ VARIANT_BOOL Right,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteColumn (
        /*[in]*/ long ColN,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddRow (
        /*[in]*/ long RowN,
        /*[in]*/ VARIANT_BOOL Down,
        /*[out,retval]*/ VARIANT_BOOL * PVa ) = 0;
      virtual HRESULT __stdcall raw_DeleteRow (
        /*[in]*/ long RowN,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ long BeginRow,
        /*[in]*/ long BeginColumn,
        /*[in]*/ long EndRow,
        /*[in]*/ long EndColumn,
        /*[out,retval]*/ struct ITableRange * * PVal ) = 0;
};

struct __declspec(uuid("354ea69a-3191-4da4-b980-821be9b7683c"))
IKompasDocument3DNotifyResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNotifyType))
    enum ksDocument3DNotifyEnum NotifyType;
    __declspec(property(get=GetNotifyObjectType))
    ksObj3dTypeEnum NotifyObjectType;
    __declspec(property(get=GetNotifyObject))
    IKompasAPIObjectPtr NotifyObject;
    __declspec(property(get=GetRequestFilesType))
    enum ksRequestFilesTypeEnum RequestFilesType;

    //
    // Wrapper methods for error-handling
    //

    enum ksDocument3DNotifyEnum GetNotifyType ( );
    ksObj3dTypeEnum GetNotifyObjectType ( );
    IKompasAPIObjectPtr GetNotifyObject ( );
    enum ksRequestFilesTypeEnum GetRequestFilesType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NotifyType (
        /*[out,retval]*/ enum ksDocument3DNotifyEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_NotifyObjectType (
        /*[out,retval]*/ ksObj3dTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_NotifyObject (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_RequestFilesType (
        /*[out,retval]*/ enum ksRequestFilesTypeEnum * PVal ) = 0;
};

struct __declspec(uuid("81ebb128-3963-4759-9d4e-2829c3078b0f"))
IPoints3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint3D))
    IPoint3DPtr Point3D[];

    //
    // Wrapper methods for error-handling
    //

    IPoint3DPtr GetPoint3D (
        const _variant_t & Index );
    IPoint3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Point3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPoint3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IPoint3D * * Result ) = 0;
};

struct __declspec(uuid("c020e994-fb7f-449a-a3d9-2181135f4200"))
IFeaturePattern : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetInitialObjects,put=PutInitialObjects))
    _variant_t InitialObjects;
    __declspec(property(get=GetInstanceDeletedIndexes,put=PutInstanceDeletedIndexes))
    _variant_t InstanceDeletedIndexes;
    __declspec(property(get=GetGeometryPattern,put=PutGeometryPattern))
    VARIANT_BOOL GeometryPattern;
    __declspec(property(get=GetBasePointType,put=PutBasePointType))
    enum ksPatternBasePointTypeEnum BasePointType;
    __declspec(property(get=GetBasePoint,put=PutBasePoint))
    IModelObjectPtr BasePoint;
    __declspec(property(get=GetExemplar))
    IModelObjectPtr Exemplar[][];

    //
    // Wrapper methods for error-handling
    //

    void PutInitialObjects (
        const _variant_t & Objects );
    _variant_t GetInitialObjects ( );
    void PutInstanceDeletedIndexes (
        const _variant_t & PVal );
    _variant_t GetInstanceDeletedIndexes ( );
    VARIANT_BOOL Destroy ( );
    VARIANT_BOOL IsInitialObject (
        struct IModelObject * Object );
    VARIANT_BOOL AddInitialObjects (
        const _variant_t & Objects );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL IsSuitableObject (
        struct IModelObject * Object );
    void PutGeometryPattern (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetGeometryPattern ( );
    void PutBasePointType (
        enum ksPatternBasePointTypeEnum PVal );
    enum ksPatternBasePointTypeEnum GetBasePointType ( );
    void PutBasePoint (
        struct IModelObject * PVal );
    IModelObjectPtr GetBasePoint ( );
    IModelObjectPtr GetExemplar (
        long Index1,
        long Index2 );
    VARIANT_BOOL GetExemplarsCounts (
        long * Count1,
        long * Count2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_InitialObjects (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall get_InitialObjects (
        /*[out,retval]*/ VARIANT * Objects ) = 0;
      virtual HRESULT __stdcall put_InstanceDeletedIndexes (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_InstanceDeletedIndexes (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_Destroy (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsInitialObject (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddInitialObjects (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsSuitableObject (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_GeometryPattern (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_GeometryPattern (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BasePointType (
        /*[in]*/ enum ksPatternBasePointTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BasePointType (
        /*[out,retval]*/ enum ksPatternBasePointTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BasePoint (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_BasePoint (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Exemplar (
        /*[in]*/ long Index1,
        /*[in]*/ long Index2,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetExemplarsCounts (
        /*[out]*/ long * Count1,
        /*[out]*/ long * Count2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("5cd7ac22-d8c2-42c4-96e5-5d64e44046f7"))
IFeaturePatterns : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetFeaturePattern))
    IFeaturePatternPtr FeaturePattern[];

    //
    // Wrapper methods for error-handling
    //

    IFeaturePatternPtr GetFeaturePattern (
        const _variant_t & Index );
    IFeaturePatternPtr Add (
        ksObj3dTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FeaturePattern (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IFeaturePattern * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum Type,
        /*[out,retval]*/ struct IFeaturePattern * * Result ) = 0;
};

struct __declspec(uuid("984f7dd6-a7fb-4693-862f-459cc8630b11"))
ISurfaceThickening : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFaces,put=PutFaces))
    _variant_t Faces;

    //
    // Wrapper methods for error-handling
    //

    void PutFaces (
        const _variant_t & Faces );
    _variant_t GetFaces ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT Faces ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * Faces ) = 0;
};

struct __declspec(uuid("7a9b6fcc-2156-48c8-bc95-597242ee1b9e"))
ISurfaceThickenings : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSurfaceThickening))
    ISurfaceThickeningPtr SurfaceThickening[];

    //
    // Wrapper methods for error-handling
    //

    ISurfaceThickeningPtr GetSurfaceThickening (
        const _variant_t & Index );
    ISurfaceThickeningPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SurfaceThickening (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISurfaceThickening * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISurfaceThickening * * Result ) = 0;
};

struct __declspec(uuid("7bb28ad1-ccae-449c-9086-a97470543089"))
IRotated : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetProfile,put=PutProfile))
    IModelObjectPtr Profile;
    __declspec(property(get=GetAxis,put=PutAxis))
    IModelObjectPtr Axis;
    __declspec(property(get=GetDirection,put=PutDirection))
    ksDirectionTypeEnum Direction;
    __declspec(property(get=GetToroidShapeType,put=PutToroidShapeType))
    VARIANT_BOOL ToroidShapeType;
    __declspec(property(get=GetRotatedType,put=PutRotatedType))
    enum ksRotatedTypeEnum RotatedType[];
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle[];
    __declspec(property(get=GetAngleObject,put=PutAngleObject))
    IModelObjectPtr AngleObject[];
    __declspec(property(get=GetCutOffByPoint,put=PutCutOffByPoint))
    VARIANT_BOOL CutOffByPoint[];

    //
    // Wrapper methods for error-handling
    //

    void PutProfile (
        struct IModelObject * Result );
    IModelObjectPtr GetProfile ( );
    void PutAxis (
        struct IModelObject * Result );
    IModelObjectPtr GetAxis ( );
    void PutDirection (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetDirection ( );
    void PutToroidShapeType (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetToroidShapeType ( );
    void PutRotatedType (
        VARIANT_BOOL Normal,
        enum ksRotatedTypeEnum PVal );
    enum ksRotatedTypeEnum GetRotatedType (
        VARIANT_BOOL Normal );
    void PutAngle (
        VARIANT_BOOL Normal,
        double PVal );
    double GetAngle (
        VARIANT_BOOL Normal );
    void PutAngleObject (
        VARIANT_BOOL Normal,
        struct IModelObject * PVal );
    IModelObjectPtr GetAngleObject (
        VARIANT_BOOL Normal );
    void PutCutOffByPoint (
        VARIANT_BOOL Normal,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCutOffByPoint (
        VARIANT_BOOL Normal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Profile (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Profile (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ToroidShapeType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ToroidShapeType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RotatedType (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ enum ksRotatedTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_RotatedType (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ enum ksRotatedTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AngleObject (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AngleObject (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_CutOffByPoint (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CutOffByPoint (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("a9b14309-92b3-46ba-8841-233293a60310"))
IRotateds : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRotated))
    IRotatedPtr Rotated[];

    //
    // Wrapper methods for error-handling
    //

    IRotatedPtr GetRotated (
        const _variant_t & Index );
    IRotatedPtr Add (
        ksObj3dTypeEnum RotatedType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rotated (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRotated * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum RotatedType,
        /*[out,retval]*/ struct IRotated * * Result ) = 0;
};

struct __declspec(uuid("a37ee5f1-c852-467b-b72a-00c05310174d"))
IScaling3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetShell,put=PutShell))
    IKompasAPIObjectPtr Shell;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetBasePoint,put=PutBasePoint))
    IModelObjectPtr BasePoint;
    __declspec(property(get=GetScalingType,put=PutScalingType))
    enum ksScalingTypeEnum ScalingType;
    __declspec(property(get=GetScaleX,put=PutScaleX))
    double ScaleX;
    __declspec(property(get=GetScaleY,put=PutScaleY))
    double ScaleY;
    __declspec(property(get=GetScaleZ,put=PutScaleZ))
    double ScaleZ;
    __declspec(property(get=GetCopySolids,put=PutCopySolids))
    VARIANT_BOOL CopySolids;
    __declspec(property(get=GetScalingObjects,put=PutScalingObjects))
    _variant_t ScalingObjects;
    __declspec(property(get=GetCentrePointBuildingType,put=PutCentrePointBuildingType))
    enum ksPoint3DTypeEnum CentrePointBuildingType;
    __declspec(property(get=GetCentrePointParameters))
    IKompasAPIObjectPtr CentrePointParameters;

    //
    // Wrapper methods for error-handling
    //

    void PutShell (
        struct IKompasAPIObject * PVal );
    IKompasAPIObjectPtr GetShell ( );
    void PutScale (
        double Result );
    double GetScale ( );
    void PutBasePoint (
        struct IModelObject * PVal );
    IModelObjectPtr GetBasePoint ( );
    void PutScalingType (
        enum ksScalingTypeEnum Result );
    enum ksScalingTypeEnum GetScalingType ( );
    void PutScaleX (
        double Result );
    double GetScaleX ( );
    void PutScaleY (
        double Result );
    double GetScaleY ( );
    void PutScaleZ (
        double Result );
    double GetScaleZ ( );
    void PutCopySolids (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetCopySolids ( );
    void PutScalingObjects (
        const _variant_t & Result );
    _variant_t GetScalingObjects ( );
    VARIANT_BOOL GetCentrePoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetCentrePoint (
        double X,
        double Y,
        double Z );
    void PutCentrePointBuildingType (
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetCentrePointBuildingType ( );
    IKompasAPIObjectPtr GetCentrePointParameters ( );
    VARIANT_BOOL HideCurves ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Shell (
        /*[in]*/ struct IKompasAPIObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Shell (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_BasePoint (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_BasePoint (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ScalingType (
        /*[in]*/ enum ksScalingTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_ScalingType (
        /*[out,retval]*/ enum ksScalingTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ScaleX (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ScaleX (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ScaleY (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ScaleY (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ScaleZ (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ScaleZ (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_CopySolids (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_CopySolids (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ScalingObjects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_ScalingObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCentrePoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCentrePoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_CentrePointBuildingType (
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CentrePointBuildingType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_CentrePointParameters (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_HideCurves (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("b180fe26-abee-4f37-932f-24aaacf227a4"))
IScalings3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetScaling3D))
    IScaling3DPtr Scaling3D[];

    //
    // Wrapper methods for error-handling
    //

    IScaling3DPtr GetScaling3D (
        const _variant_t & Index );
    IScaling3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scaling3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IScaling3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IScaling3D * * Result ) = 0;
};

struct __declspec(uuid("5f754ba9-1fb7-4aae-a3f2-f36d7cf938bf"))
IBilletObsolete : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;

    //
    // Wrapper methods for error-handling
    //

    void PutFileName (
        _bstr_t PVal );
    _bstr_t GetFileName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("140de7b8-8291-4220-b7fb-9f3c4fdfb649"))
IBilletsObsoletes : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBilletObsolete))
    IBilletObsoletePtr BilletObsolete[];

    //
    // Wrapper methods for error-handling
    //

    IBilletObsoletePtr GetBilletObsolete (
        const _variant_t & Index );
    IBilletObsoletePtr Add (
        _bstr_t FileName,
        VARIANT_BOOL Mirror );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BilletObsolete (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBilletObsolete * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Mirror,
        /*[out,retval]*/ struct IBilletObsolete * * Result ) = 0;
};

struct __declspec(uuid("cc78f834-4a97-4f69-9207-215308f0abb0"))
ICollectionGeometry : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetGeometry,put=PutGeometry))
    _variant_t Geometry;

    //
    // Wrapper methods for error-handling
    //

    void PutGeometry (
        const _variant_t & Objects );
    _variant_t GetGeometry ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Geometry (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ VARIANT * Objects ) = 0;
};

struct __declspec(uuid("f1b04dda-faac-4d51-9567-304cfe3ec094"))
ICollectionsGeometry : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCollectionGeometry))
    ICollectionGeometryPtr CollectionGeometry[];

    //
    // Wrapper methods for error-handling
    //

    ICollectionGeometryPtr GetCollectionGeometry (
        const _variant_t & Index );
    ICollectionGeometryPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CollectionGeometry (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICollectionGeometry * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICollectionGeometry * * Result ) = 0;
};

struct __declspec(uuid("1c1886bc-98dd-4aa9-b038-6849c7bcc86c"))
IUserObject3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetUserParameters))
    IUnknownPtr UserParameters;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject[];
    __declspec(property(get=GetAssociationObjectCount))
    long AssociationObjectCount;
    __declspec(property(get=GetPropertyObjectEditable,put=PutPropertyObjectEditable))
    VARIANT_BOOL PropertyObjectEditable;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr GetUserParameters ( );
    void PutAssociationObject (
        long Index,
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject (
        long Index );
    long GetAssociationObjectCount ( );
    VARIANT_BOOL ClearAssociationObject ( );
    void PutPropertyObjectEditable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPropertyObjectEditable ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserParameters (
        /*[out,retval]*/ IUnknown * * iParam ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ long Index,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObjectCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearAssociationObject (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_PropertyObjectEditable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyObjectEditable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("1753e6be-c57c-415e-931d-37ead991d629"))
IUserObjects3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetUserObject3D))
    IUserObject3DPtr UserObject3D[];

    //
    // Wrapper methods for error-handling
    //

    IUserObject3DPtr GetUserObject3D (
        const _variant_t & Index );
    IUserObject3DPtr Add (
        ksObj3dTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserObject3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IUserObject3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum Type,
        /*[out,retval]*/ struct IUserObject3D * * Result ) = 0;
};

struct __declspec(uuid("bc710e4d-a679-40fc-b5ae-16302abbfeb8"))
IThread : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IModelObjectPtr BaseObject;
    __declspec(property(get=GetInitialBorder,put=PutInitialBorder))
    IModelObjectPtr InitialBorder;
    __declspec(property(get=GetFinalBorder,put=PutFinalBorder))
    IModelObjectPtr FinalBorder;
    __declspec(property(get=GetAutoLenght,put=PutAutoLenght))
    VARIANT_BOOL AutoLenght;
    __declspec(property(get=GetLenght,put=PutLenght))
    double Lenght;
    __declspec(property(get=GetAutoDiameter,put=PutAutoDiameter))
    VARIANT_BOOL AutoDiameter;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetBaseObjectAdjustment,put=PutBaseObjectAdjustment))
    VARIANT_BOOL BaseObjectAdjustment;
    __declspec(property(get=GetBaseObjectAdjustmentOffset1,put=PutBaseObjectAdjustmentOffset1))
    VARIANT_BOOL BaseObjectAdjustmentOffset1;
    __declspec(property(get=GetBaseObjectAdjustmentOffset2,put=PutBaseObjectAdjustmentOffset2))
    VARIANT_BOOL BaseObjectAdjustmentOffset2;
    __declspec(property(get=GetLeftThread,put=PutLeftThread))
    VARIANT_BOOL LeftThread;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetInitialBorder ( );
    void PutInitialBorder (
        struct IModelObject * PVal );
    IModelObjectPtr GetFinalBorder ( );
    void PutFinalBorder (
        struct IModelObject * PVal );
    VARIANT_BOOL GetAutoLenght ( );
    void PutAutoLenght (
        VARIANT_BOOL PVal );
    double GetLenght ( );
    void PutLenght (
        double PVal );
    void PutAutoDiameter (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoDiameter ( );
    VARIANT_BOOL GetDirection ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBaseObjectAdjustment ( );
    void PutBaseObjectAdjustment (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBaseObjectAdjustmentOffset1 ( );
    void PutBaseObjectAdjustmentOffset1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBaseObjectAdjustmentOffset2 ( );
    void PutBaseObjectAdjustmentOffset2 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetLeftThread ( );
    void PutLeftThread (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_InitialBorder (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_InitialBorder (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_FinalBorder (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_FinalBorder (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AutoLenght (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoLenght (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Lenght (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Lenght (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall put_AutoDiameter (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoDiameter (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObjectAdjustment (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObjectAdjustment (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObjectAdjustmentOffset1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObjectAdjustmentOffset1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObjectAdjustmentOffset2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObjectAdjustmentOffset2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LeftThread (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftThread (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("4c901765-3e0d-4a5d-b2f8-fa708e3cc605"))
IHole3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth;
    __declspec(property(get=GetDepthType,put=PutDepthType))
    enum ksDepthTypeEnum DepthType;
    __declspec(property(get=GetEndFaceType,put=PutEndFaceType))
    enum ksEndFaceTypeEnum EndFaceType;
    __declspec(property(get=GetEndFaceAngle,put=PutEndFaceAngle))
    double EndFaceAngle;
    __declspec(property(get=GetHoleType,put=PutHoleType))
    enum ksHoleTypeEnum HoleType;
    __declspec(property(get=GetDepthVertex,put=PutDepthVertex))
    IModelObjectPtr DepthVertex;
    __declspec(property(get=GetDepthFace,put=PutDepthFace))
    IModelObjectPtr DepthFace;
    __declspec(property(get=GetAxis,put=PutAxis))
    VARIANT_BOOL Axis;
    __declspec(property(get=GetThread))
    IThreadPtr Thread;
    __declspec(property(get=GetHoleParameters))
    IKompasAPIObjectPtr HoleParameters;
    __declspec(property(get=GetShowThread,put=PutShowThread))
    VARIANT_BOOL ShowThread;

    //
    // Wrapper methods for error-handling
    //

    double GetDiameter ( );
    void PutDiameter (
        double PVal );
    double GetDepth ( );
    void PutDepth (
        double PVal );
    enum ksDepthTypeEnum GetDepthType ( );
    void PutDepthType (
        enum ksDepthTypeEnum PVal );
    enum ksEndFaceTypeEnum GetEndFaceType ( );
    void PutEndFaceType (
        enum ksEndFaceTypeEnum PVal );
    double GetEndFaceAngle ( );
    void PutEndFaceAngle (
        double PVal );
    enum ksHoleTypeEnum GetHoleType ( );
    void PutHoleType (
        enum ksHoleTypeEnum PVal );
    IModelObjectPtr GetDepthVertex ( );
    void PutDepthVertex (
        struct IModelObject * PVal );
    IModelObjectPtr GetDepthFace ( );
    void PutDepthFace (
        struct IModelObject * PVal );
    VARIANT_BOOL GetAxis ( );
    void PutAxis (
        VARIANT_BOOL PVal );
    IThreadPtr GetThread ( );
    IKompasAPIObjectPtr GetHoleParameters ( );
    VARIANT_BOOL GetShowThread ( );
    void PutShowThread (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DepthType (
        /*[out,retval]*/ enum ksDepthTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DepthType (
        /*[in]*/ enum ksDepthTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_EndFaceType (
        /*[out,retval]*/ enum ksEndFaceTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_EndFaceType (
        /*[in]*/ enum ksEndFaceTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_EndFaceAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_EndFaceAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_HoleType (
        /*[out,retval]*/ enum ksHoleTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_HoleType (
        /*[in]*/ enum ksHoleTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DepthVertex (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_DepthVertex (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DepthFace (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_DepthFace (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Thread (
        /*[out,retval]*/ struct IThread * * PVal ) = 0;
      virtual HRESULT __stdcall get_HoleParameters (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_ShowThread (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowThread (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("a018e8ce-26f6-4dae-801b-378ed08a6314"))
IHoles3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetHole3D))
    IHole3DPtr Hole3D[];

    //
    // Wrapper methods for error-handling
    //

    IHole3DPtr GetHole3D (
        const _variant_t & Index );
    IHole3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Hole3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IHole3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IHole3D * * Result ) = 0;
};

struct __declspec(uuid("59c6927b-fc6d-4494-9cde-648276020929"))
IChamfer : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksChamferBuildingTypeEnum BuildingType;
    __declspec(property(get=GetBaseObjects,put=PutBaseObjects))
    _variant_t BaseObjects;
    __declspec(property(get=GetDistance1,put=PutDistance1))
    double Distance1;
    __declspec(property(get=GetDistance2,put=PutDistance2))
    double Distance2;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetTangent,put=PutTangent))
    VARIANT_BOOL Tangent;

    //
    // Wrapper methods for error-handling
    //

    enum ksChamferBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksChamferBuildingTypeEnum PVal );
    _variant_t GetBaseObjects ( );
    void PutBaseObjects (
        const _variant_t & PVal );
    double GetDistance1 ( );
    void PutDistance1 (
        double PVal );
    double GetDistance2 ( );
    void PutDistance2 (
        double PVal );
    double GetAngle ( );
    void PutAngle (
        double PVal );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutTangent (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTangent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksChamferBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksChamferBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObjects (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Distance1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Distance1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Distance2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Distance2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Tangent (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Tangent (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("5e232224-2445-430f-9324-2c75bace1d0c"))
IChamfers : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetChamfer))
    IChamferPtr Chamfer[];

    //
    // Wrapper methods for error-handling
    //

    IChamferPtr GetChamfer (
        const _variant_t & Index );
    IChamferPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Chamfer (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IChamfer * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IChamfer * * Result ) = 0;
};

struct __declspec(uuid("15e3132f-4d4e-451f-b104-478a4e3e0128"))
IFillet : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksFilletBuildingTypeEnum BuildingType;
    __declspec(property(get=GetBaseObjects,put=PutBaseObjects))
    _variant_t BaseObjects;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetCoefficient,put=PutCoefficient))
    double Coefficient;
    __declspec(property(get=GetChord,put=PutChord))
    double Chord;
    __declspec(property(get=GetTangent,put=PutTangent))
    VARIANT_BOOL Tangent;
    __declspec(property(get=GetSmoothCorner,put=PutSmoothCorner))
    VARIANT_BOOL SmoothCorner;
    __declspec(property(get=GetRoundCorners,put=PutRoundCorners))
    VARIANT_BOOL RoundCorners;
    __declspec(property(get=GetAutoSaveEdge,put=PutAutoSaveEdge))
    VARIANT_BOOL AutoSaveEdge;
    __declspec(property(get=GetSaveEdge,put=PutSaveEdge))
    VARIANT_BOOL SaveEdge;
    __declspec(property(get=GetStopFilletOn,put=PutStopFilletOn))
    VARIANT_BOOL StopFilletOn[];
    __declspec(property(get=GetStopFilletOffsetMode,put=PutStopFilletOffsetMode))
    enum ksFilletOffsetModeEnum StopFilletOffsetMode[];
    __declspec(property(get=GetStopFilletOffset,put=PutStopFilletOffset))
    double StopFilletOffset[];
    __declspec(property(get=GetStopFilletCutObject,put=PutStopFilletCutObject))
    IModelObjectPtr StopFilletCutObject[];
    __declspec(property(get=GetStopFilletCutByObject,put=PutStopFilletCutByObject))
    VARIANT_BOOL StopFilletCutByObject[];
    __declspec(property(get=GetStopFilletCutPointIndex,put=PutStopFilletCutPointIndex))
    long StopFilletCutPointIndex[];
    __declspec(property(get=GetStopFilletDirection,put=PutStopFilletDirection))
    VARIANT_BOOL StopFilletDirection;
    __declspec(property(get=GetVariableRadiusOn,put=PutVariableRadiusOn))
    VARIANT_BOOL VariableRadiusOn;
    __declspec(property(get=GetVariableRadiusCount))
    long VariableRadiusCount;
    __declspec(property(get=GetVariableRadius,put=PutVariableRadius))
    double VariableRadius[];
    __declspec(property(get=GetVariableRadiusPosition,put=PutVariableRadiusPosition))
    double VariableRadiusPosition[];
    __declspec(property(get=GetVariableRadiusPositionLenght,put=PutVariableRadiusPositionLenght))
    double VariableRadiusPositionLenght[];
    __declspec(property(get=GetVariableRadiusEdge))
    IModelObjectPtr VariableRadiusEdge[];

    //
    // Wrapper methods for error-handling
    //

    enum ksFilletBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksFilletBuildingTypeEnum PVal );
    _variant_t GetBaseObjects ( );
    void PutBaseObjects (
        const _variant_t & PVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double PVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double PVal );
    double GetCoefficient ( );
    void PutCoefficient (
        double PVal );
    double GetChord ( );
    void PutChord (
        double PVal );
    void PutTangent (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTangent ( );
    VARIANT_BOOL GetSmoothCorner ( );
    void PutSmoothCorner (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRoundCorners ( );
    void PutRoundCorners (
        VARIANT_BOOL PVal );
    void PutAutoSaveEdge (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoSaveEdge ( );
    void PutSaveEdge (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveEdge ( );
    void PutStopFilletOn (
        VARIANT_BOOL First,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStopFilletOn (
        VARIANT_BOOL First );
    void PutStopFilletOffsetMode (
        VARIANT_BOOL First,
        enum ksFilletOffsetModeEnum PVal );
    enum ksFilletOffsetModeEnum GetStopFilletOffsetMode (
        VARIANT_BOOL First );
    void PutStopFilletOffset (
        VARIANT_BOOL First,
        double PVal );
    double GetStopFilletOffset (
        VARIANT_BOOL First );
    void PutStopFilletCutObject (
        VARIANT_BOOL First,
        struct IModelObject * PVal );
    IModelObjectPtr GetStopFilletCutObject (
        VARIANT_BOOL First );
    void PutStopFilletCutByObject (
        VARIANT_BOOL First,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStopFilletCutByObject (
        VARIANT_BOOL First );
    void PutStopFilletCutPointIndex (
        VARIANT_BOOL First,
        long PVal );
    long GetStopFilletCutPointIndex (
        VARIANT_BOOL First );
    void PutStopFilletDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStopFilletDirection ( );
    void PutVariableRadiusOn (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVariableRadiusOn ( );
    long GetVariableRadiusCount ( );
    VARIANT_BOOL AddVariableRadius (
        struct IModelObject * PointObject,
        double Radius,
        double Position,
        VARIANT_BOOL PositionType );
    VARIANT_BOOL VariableRadiusClear ( );
    VARIANT_BOOL VariableRadiusDelete (
        long Index );
    void PutVariableRadius (
        long Index,
        double PVal );
    double GetVariableRadius (
        long Index );
    void PutVariableRadiusPosition (
        long Index,
        double PVal );
    double GetVariableRadiusPosition (
        long Index );
    void PutVariableRadiusPositionLenght (
        long Index,
        double PVal );
    double GetVariableRadiusPositionLenght (
        long Index );
    IModelObjectPtr GetVariableRadiusEdge (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksFilletBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksFilletBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObjects (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Coefficient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Coefficient (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Chord (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Chord (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall put_Tangent (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Tangent (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_SmoothCorner (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SmoothCorner (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RoundCorners (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RoundCorners (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall put_AutoSaveEdge (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSaveEdge (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveEdge (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveEdge (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_StopFilletOn (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StopFilletOn (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_StopFilletOffsetMode (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ enum ksFilletOffsetModeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_StopFilletOffsetMode (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ enum ksFilletOffsetModeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_StopFilletOffset (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StopFilletOffset (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StopFilletCutObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_StopFilletCutObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_StopFilletCutByObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StopFilletCutByObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_StopFilletCutPointIndex (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_StopFilletCutPointIndex (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_StopFilletDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StopFilletDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_VariableRadiusOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_VariableRadiusOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_VariableRadiusCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddVariableRadius (
        /*[in]*/ struct IModelObject * PointObject,
        /*[in]*/ double Radius,
        /*[in]*/ double Position,
        /*[in]*/ VARIANT_BOOL PositionType,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_VariableRadiusClear (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_VariableRadiusDelete (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_VariableRadius (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_VariableRadius (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_VariableRadiusPosition (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_VariableRadiusPosition (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_VariableRadiusPositionLenght (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_VariableRadiusPositionLenght (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_VariableRadiusEdge (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("7a0672ef-4c38-4fd7-8d06-dadd256e1e38"))
IFillets : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetFillet))
    IFilletPtr Fillet[];

    //
    // Wrapper methods for error-handling
    //

    IFilletPtr GetFillet (
        const _variant_t & Index );
    IFilletPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fillet (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IFillet * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IFillet * * Result ) = 0;
};

struct __declspec(uuid("2db9e3ce-7603-4c88-8ff5-f8985ad26c58"))
IIncline : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFaces,put=PutFaces))
    _variant_t Faces;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetFaces ( );
    void PutFaces (
        const _variant_t & PVal );
    double GetAngle ( );
    void PutAngle (
        double PVal );
    VARIANT_BOOL GetDirection ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    IModelObjectPtr GetPlane ( );
    void PutPlane (
        struct IModelObject * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
};

struct __declspec(uuid("37e37d7d-58d1-4469-9b79-2254d2b9e112"))
IInclines : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetIncline))
    IInclinePtr Incline[];

    //
    // Wrapper methods for error-handling
    //

    IInclinePtr GetIncline (
        const _variant_t & Index );
    IInclinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Incline (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IIncline * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IIncline * * Result ) = 0;
};

struct __declspec(uuid("05a5c975-d995-4069-90a3-a81391ae8d62"))
IShell : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDeletedFaces,put=PutDeletedFaces))
    _variant_t DeletedFaces;
    __declspec(property(get=GetThinType,put=PutThinType))
    ksDirectionTypeEnum ThinType;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    void PutDeletedFaces (
        const _variant_t & PVal );
    _variant_t GetDeletedFaces ( );
    void PutThinType (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetThinType ( );
    void PutThickness (
        double PVal );
    double GetThickness ( );
    VARIANT_BOOL SetFaces (
        const _variant_t & Faces,
        VARIANT_BOOL TangentFaces );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DeletedFaces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_DeletedFaces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_ThinType (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ThinType (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetFaces (
        /*[in]*/ VARIANT Faces,
        /*[in]*/ VARIANT_BOOL TangentFaces,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("0ba80020-ad0b-4442-b4c7-7ac75aa04cac"))
IShells : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetShell))
    IShellPtr Shell[];

    //
    // Wrapper methods for error-handling
    //

    IShellPtr GetShell (
        const _variant_t & Index );
    IShellPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Shell (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IShell * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IShell * * Result ) = 0;
};

struct __declspec(uuid("1fe29bdf-0b8e-4e34-a7e5-418092c6c9c3"))
IBoolean : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBooleanType,put=PutBooleanType))
    enum ksBooleanType BooleanType;
    __declspec(property(get=GetBodies,put=PutBodies))
    _variant_t Bodies;
    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IKompasAPIObjectPtr BaseObject;
    __declspec(property(get=GetSaveCopyBaseObject,put=PutSaveCopyBaseObject))
    VARIANT_BOOL SaveCopyBaseObject;
    __declspec(property(get=GetModifyObjects,put=PutModifyObjects))
    _variant_t ModifyObjects;
    __declspec(property(get=GetSaveCopyModifyObjects,put=PutSaveCopyModifyObjects))
    VARIANT_BOOL SaveCopyModifyObjects;

    //
    // Wrapper methods for error-handling
    //

    enum ksBooleanType GetBooleanType ( );
    void PutBooleanType (
        enum ksBooleanType PVal );
    _variant_t GetBodies ( );
    void PutBodies (
        const _variant_t & PVal );
    IKompasAPIObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IKompasAPIObject * PVal );
    VARIANT_BOOL GetSaveCopyBaseObject ( );
    void PutSaveCopyBaseObject (
        VARIANT_BOOL PVal );
    _variant_t GetModifyObjects ( );
    void PutModifyObjects (
        const _variant_t & PVal );
    VARIANT_BOOL GetSaveCopyModifyObjects ( );
    void PutSaveCopyModifyObjects (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BooleanType (
        /*[out,retval]*/ enum ksBooleanType * PVal ) = 0;
      virtual HRESULT __stdcall put_BooleanType (
        /*[in]*/ enum ksBooleanType PVal ) = 0;
      virtual HRESULT __stdcall get_Bodies (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Bodies (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IKompasAPIObject * PVal ) = 0;
      virtual HRESULT __stdcall get_SaveCopyBaseObject (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveCopyBaseObject (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ModifyObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_ModifyObjects (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_SaveCopyModifyObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveCopyModifyObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("1739583b-bfda-4ad2-bfe3-14302133bb21"))
IBooleans : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBoolean))
    IBooleanPtr Boolean[];

    //
    // Wrapper methods for error-handling
    //

    IBooleanPtr GetBoolean (
        const _variant_t & Index );
    IBooleanPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Boolean (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBoolean * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBoolean * * Result ) = 0;
};

struct __declspec(uuid("d76be44a-2ab3-4b5a-b893-3c27e227df4d"))
ICut : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCutObject,put=PutCutObject))
    IModelObjectPtr CutObject;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetChooseType,put=PutChooseType))
    enum ksChooseType ChooseType;
    __declspec(property(get=GetChoosePartsType,put=PutChoosePartsType))
    enum ksChoosePartsType ChoosePartsType;
    __declspec(property(get=GetChooseBodies,put=PutChooseBodies))
    _variant_t ChooseBodies;
    __declspec(property(get=GetChooseParts,put=PutChooseParts))
    _variant_t ChooseParts;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksCutBuildingTypeEnum BuildingType;

    //
    // Wrapper methods for error-handling
    //

    void PutCutObject (
        struct IModelObject * CurrentObject );
    IModelObjectPtr GetCutObject ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutChooseType (
        enum ksChooseType CurrentValue );
    enum ksChooseType GetChooseType ( );
    void PutChoosePartsType (
        enum ksChoosePartsType CurrentValue );
    enum ksChoosePartsType GetChoosePartsType ( );
    void PutChooseBodies (
        const _variant_t & Result );
    _variant_t GetChooseBodies ( );
    void PutChooseParts (
        const _variant_t & Result );
    _variant_t GetChooseParts ( );
    void PutBuildingType (
        enum ksCutBuildingTypeEnum Value );
    enum ksCutBuildingTypeEnum GetBuildingType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CutObject (
        /*[in]*/ struct IModelObject * CurrentObject ) = 0;
      virtual HRESULT __stdcall get_CutObject (
        /*[out,retval]*/ struct IModelObject * * CurrentObject ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ChooseType (
        /*[in]*/ enum ksChooseType CurrentValue ) = 0;
      virtual HRESULT __stdcall get_ChooseType (
        /*[out,retval]*/ enum ksChooseType * CurrentValue ) = 0;
      virtual HRESULT __stdcall put_ChoosePartsType (
        /*[in]*/ enum ksChoosePartsType CurrentValue ) = 0;
      virtual HRESULT __stdcall get_ChoosePartsType (
        /*[out,retval]*/ enum ksChoosePartsType * CurrentValue ) = 0;
      virtual HRESULT __stdcall put_ChooseBodies (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_ChooseBodies (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_ChooseParts (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_ChooseParts (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksCutBuildingTypeEnum Value ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksCutBuildingTypeEnum * Value ) = 0;
};

struct __declspec(uuid("85b81047-11f3-46d3-869d-efe37a6a8588"))
ICuts : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCut))
    ICutPtr Cut[];

    //
    // Wrapper methods for error-handling
    //

    ICutPtr GetCut (
        const _variant_t & Index );
    ICutPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Cut (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICut * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICut * * Result ) = 0;
};

struct __declspec(uuid("fb39791b-2100-4f36-b352-aa4eb5fd9373"))
ICoupling : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSketch))
    IModelObjectPtr Sketch[];
    __declspec(property(get=GetPositionObject,put=PutPositionObject))
    IModelObjectPtr PositionObject[];
    __declspec(property(get=GetPosition,put=PutPosition))
    double Position[];
    __declspec(property(get=GetPositionOffset,put=PutPositionOffset))
    double PositionOffset[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IModelObjectPtr GetSketch (
        long Index );
    IModelObjectPtr GetPositionObject (
        long Index );
    void PutPositionObject (
        long Index,
        struct IModelObject * NewObject );
    void PutPosition (
        long Index,
        double PVal );
    double GetPosition (
        long Index );
    void PutPositionOffset (
        long Index,
        double PVal );
    double GetPositionOffset (
        long Index );
    VARIANT_BOOL GetPoint (
        long Index,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        long Index,
        double X,
        double Y,
        double Z );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * NewObject ) = 0;
      virtual HRESULT __stdcall get_PositionObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * NewObject ) = 0;
      virtual HRESULT __stdcall put_PositionObject (
        /*[in]*/ long Index,
        /*[in]*/ struct IModelObject * NewObject ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_PositionOffset (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_PositionOffset (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("ddb04ecf-12a9-496e-8069-405f7302e039"))
ILoft : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOperationResult,put=PutOperationResult))
    enum ksOperationResultEnum OperationResult;
    __declspec(property(get=GetSketchs,put=PutSketchs))
    _variant_t Sketchs;
    __declspec(property(get=GetAxisLine,put=PutAxisLine))
    IModelObjectPtr AxisLine;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksLoftBuildingType BuildingType[];
    __declspec(property(get=GetBuildingObject,put=PutBuildingObject))
    IModelObjectPtr BuildingObject[];
    __declspec(property(get=GetDirectionalLines,put=PutDirectionalLines))
    _variant_t DirectionalLines;
    __declspec(property(get=GetCouplingsCount))
    long CouplingsCount;
    __declspec(property(get=GetCoupling))
    ICouplingPtr Coupling[];

    //
    // Wrapper methods for error-handling
    //

    void PutOperationResult (
        enum ksOperationResultEnum Result );
    enum ksOperationResultEnum GetOperationResult ( );
    void PutSketchs (
        const _variant_t & Result );
    _variant_t GetSketchs ( );
    void PutAxisLine (
        struct IModelObject * PVal );
    IModelObjectPtr GetAxisLine ( );
    void PutClosed (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosed ( );
    void PutBuildingType (
        VARIANT_BOOL BeginSection,
        enum ksLoftBuildingType Result );
    enum ksLoftBuildingType GetBuildingType (
        VARIANT_BOOL BeginSection );
    void PutBuildingObject (
        VARIANT_BOOL BeginSection,
        struct IModelObject * Result );
    IModelObjectPtr GetBuildingObject (
        VARIANT_BOOL BeginSection );
    void PutDirectionalLines (
        const _variant_t & PVal );
    _variant_t GetDirectionalLines ( );
    ICouplingPtr AddCoupling ( );
    long GetCouplingsCount ( );
    ICouplingPtr GetCoupling (
        long Index );
    VARIANT_BOOL DeleteCoupling (
        long Index );
    VARIANT_BOOL ClearCouplings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_OperationResult (
        /*[in]*/ enum ksOperationResultEnum Result ) = 0;
      virtual HRESULT __stdcall get_OperationResult (
        /*[out,retval]*/ enum ksOperationResultEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Sketchs (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Sketchs (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_AxisLine (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AxisLine (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ VARIANT_BOOL BeginSection,
        /*[in]*/ enum ksLoftBuildingType Result ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[in]*/ VARIANT_BOOL BeginSection,
        /*[out,retval]*/ enum ksLoftBuildingType * Result ) = 0;
      virtual HRESULT __stdcall put_BuildingObject (
        /*[in]*/ VARIANT_BOOL BeginSection,
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_BuildingObject (
        /*[in]*/ VARIANT_BOOL BeginSection,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_DirectionalLines (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_DirectionalLines (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddCoupling (
        /*[out,retval]*/ struct ICoupling * * PVal ) = 0;
      virtual HRESULT __stdcall get_CouplingsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Coupling (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICoupling * * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteCoupling (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearCouplings (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("af5f922f-8c32-4949-a29a-bb5ec7a99d00"))
ILofts : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLoft))
    ILoftPtr Loft[];

    //
    // Wrapper methods for error-handling
    //

    ILoftPtr GetLoft (
        const _variant_t & Index );
    ILoftPtr Add (
        ksObj3dTypeEnum LoftType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Loft (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILoft * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum LoftType,
        /*[out,retval]*/ struct ILoft * * Result ) = 0;
};

struct __declspec(uuid("9ae8a34a-de20-4c56-a793-bfcbb9343903"))
IEvolution : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOperationResult,put=PutOperationResult))
    enum ksOperationResultEnum OperationResult;
    __declspec(property(get=GetSketch,put=PutSketch))
    IModelObjectPtr Sketch;
    __declspec(property(get=GetEdges,put=PutEdges))
    _variant_t Edges;
    __declspec(property(get=GetSketchShiftType,put=PutSketchShiftType))
    enum ksEvolutionShiftSketchTypeEnum SketchShiftType;
    __declspec(property(get=GetBySurfaceNormal,put=PutBySurfaceNormal))
    VARIANT_BOOL BySurfaceNormal;
    __declspec(property(get=GetEvolutionVersion,put=PutEvolutionVersion))
    enum ksEvolutionVersionEnum EvolutionVersion;

    //
    // Wrapper methods for error-handling
    //

    void PutOperationResult (
        enum ksOperationResultEnum Result );
    enum ksOperationResultEnum GetOperationResult ( );
    void PutSketch (
        struct IModelObject * Result );
    IModelObjectPtr GetSketch ( );
    void PutEdges (
        const _variant_t & Result );
    _variant_t GetEdges ( );
    void PutSketchShiftType (
        enum ksEvolutionShiftSketchTypeEnum Result );
    enum ksEvolutionShiftSketchTypeEnum GetSketchShiftType ( );
    double GetPathLength (
        enum ksLengthUnitsEnum Unit );
    void PutBySurfaceNormal (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBySurfaceNormal ( );
    void PutEvolutionVersion (
        enum ksEvolutionVersionEnum Result );
    enum ksEvolutionVersionEnum GetEvolutionVersion ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_OperationResult (
        /*[in]*/ enum ksOperationResultEnum Result ) = 0;
      virtual HRESULT __stdcall get_OperationResult (
        /*[out,retval]*/ enum ksOperationResultEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Edges (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_SketchShiftType (
        /*[in]*/ enum ksEvolutionShiftSketchTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_SketchShiftType (
        /*[out,retval]*/ enum ksEvolutionShiftSketchTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPathLength (
        /*[in]*/ enum ksLengthUnitsEnum Unit,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_BySurfaceNormal (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BySurfaceNormal (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EvolutionVersion (
        /*[in]*/ enum ksEvolutionVersionEnum Result ) = 0;
      virtual HRESULT __stdcall get_EvolutionVersion (
        /*[out,retval]*/ enum ksEvolutionVersionEnum * Result ) = 0;
};

struct __declspec(uuid("8d984124-c430-45b3-939a-b5264c5b1388"))
IEvolutions : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetEvolution))
    IEvolutionPtr Evolution[];

    //
    // Wrapper methods for error-handling
    //

    IEvolutionPtr GetEvolution (
        const _variant_t & Index );
    IEvolutionPtr Add (
        ksObj3dTypeEnum EvolutionType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Evolution (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IEvolution * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum EvolutionType,
        /*[out,retval]*/ struct IEvolution * * Result ) = 0;
};

struct __declspec(uuid("2dcdd394-c325-4d41-a5fd-9e8cc7b8ec5c"))
IUnionComponents : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetParts,put=PutParts))
    _variant_t Parts;

    //
    // Wrapper methods for error-handling
    //

    void PutParts (
        const _variant_t & Result );
    _variant_t GetParts ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Parts (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Parts (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("2a449ef6-1554-4c66-8a98-2734dab88e97"))
IUnionsComponents : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetUnionComponents))
    IUnionComponentsPtr UnionComponents[];

    //
    // Wrapper methods for error-handling
    //

    IUnionComponentsPtr GetUnionComponents (
        const _variant_t & Index );
    IUnionComponentsPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UnionComponents (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IUnionComponents * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IUnionComponents * * Result ) = 0;
};

struct __declspec(uuid("c4b6d128-8013-4af4-b4d5-40e25f2cdbd0"))
IMoldCavity : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetParts,put=PutParts))
    _variant_t Parts;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetScaleCentre,put=PutScaleCentre))
    IModelObjectPtr ScaleCentre;

    //
    // Wrapper methods for error-handling
    //

    void PutParts (
        const _variant_t & Result );
    _variant_t GetParts ( );
    double GetScale ( );
    void PutScale (
        double PVal );
    IModelObjectPtr GetScaleCentre ( );
    void PutScaleCentre (
        struct IModelObject * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Parts (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Parts (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ScaleCentre (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ScaleCentre (
        /*[in]*/ struct IModelObject * PVal ) = 0;
};

struct __declspec(uuid("ef2ee8a8-bcc8-49ba-8ff5-3bbf627c1432"))
IMoldCavities : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetMoldCavity))
    IMoldCavityPtr MoldCavity[];

    //
    // Wrapper methods for error-handling
    //

    IMoldCavityPtr GetMoldCavity (
        const _variant_t & Index );
    IMoldCavityPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MoldCavity (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMoldCavity * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IMoldCavity * * Result ) = 0;
};

struct __declspec(uuid("09dbaa1e-fc4c-4e16-b033-fb9b8f7995d8"))
IMacroObject3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObjects,put=PutObjects))
    _variant_t Objects;
    __declspec(property(get=GetStaffVisible,put=PutStaffVisible))
    VARIANT_BOOL StaffVisible;
    __declspec(property(get=GetDoubleClickEditable,put=PutDoubleClickEditable))
    VARIANT_BOOL DoubleClickEditable;
    __declspec(property(get=GetPropertyObjectEditable,put=PutPropertyObjectEditable))
    VARIANT_BOOL PropertyObjectEditable;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IKompasAPIObjectPtr AssociationObject[];
    __declspec(property(get=GetAssociationObjectCount))
    long AssociationObjectCount;

    //
    // Wrapper methods for error-handling
    //

    void PutObjects (
        const _variant_t & Result );
    _variant_t GetObjects ( );
    void PutStaffVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStaffVisible ( );
    void PutDoubleClickEditable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDoubleClickEditable ( );
    void PutPropertyObjectEditable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPropertyObjectEditable ( );
    void PutAssociationObject (
        long Index,
        struct IKompasAPIObject * PVal );
    IKompasAPIObjectPtr GetAssociationObject (
        long Index );
    long GetAssociationObjectCount ( );
    VARIANT_BOOL ClearAssociationObject ( );
    VARIANT_BOOL Destroy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Objects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_StaffVisible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StaffVisible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DoubleClickEditable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DoubleClickEditable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PropertyObjectEditable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PropertyObjectEditable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ long Index,
        /*[in]*/ struct IKompasAPIObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObjectCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearAssociationObject (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Destroy (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("b4c41d1d-02e2-4a05-a493-7d25ceec797c"))
IMacroObjects3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetMacroObject3D))
    IMacroObject3DPtr MacroObject3D[];

    //
    // Wrapper methods for error-handling
    //

    IMacroObject3DPtr GetMacroObject3D (
        const _variant_t & Index );
    IMacroObject3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MacroObject3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMacroObject3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IMacroObject3D * * Result ) = 0;
};

struct __declspec(uuid("621e42c8-0bf8-4cb8-8813-e45e2221694e"))
IBodyReposition : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetRepositionBody,put=PutRepositionBody))
    IKompasAPIObjectPtr RepositionBody;
    __declspec(property(get=GetRepositionCentre,put=PutRepositionCentre))
    IModelObjectPtr RepositionCentre;
    __declspec(property(get=GetCopyBoby,put=PutCopyBoby))
    VARIANT_BOOL CopyBoby;
    __declspec(property(get=GetPosition))
    ILocalCoordinateSystemPtr Position;

    //
    // Wrapper methods for error-handling
    //

    void PutRepositionBody (
        struct IKompasAPIObject * Result );
    IKompasAPIObjectPtr GetRepositionBody ( );
    IModelObjectPtr GetRepositionCentre ( );
    void PutRepositionCentre (
        struct IModelObject * PVal );
    VARIANT_BOOL GetCopyBoby ( );
    void PutCopyBoby (
        VARIANT_BOOL PVal );
    ILocalCoordinateSystemPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_RepositionBody (
        /*[in]*/ struct IKompasAPIObject * Result ) = 0;
      virtual HRESULT __stdcall get_RepositionBody (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_RepositionCentre (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_RepositionCentre (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_CopyBoby (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CopyBoby (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * PVal ) = 0;
};

struct __declspec(uuid("c42be43c-5de5-4293-9254-5aa7f3b2ec2b"))
IBodyRepositions : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBodyReposition))
    IBodyRepositionPtr BodyReposition[];

    //
    // Wrapper methods for error-handling
    //

    IBodyRepositionPtr GetBodyReposition (
        const _variant_t & Index );
    IBodyRepositionPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BodyReposition (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBodyReposition * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBodyReposition * * Result ) = 0;
};

struct __declspec(uuid("7fea11b5-b4d3-4481-ab09-b0de0a699189"))
IFullFillet : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSide1Faces,put=PutSide1Faces))
    _variant_t Side1Faces;
    __declspec(property(get=GetSide2Faces,put=PutSide2Faces))
    _variant_t Side2Faces;
    __declspec(property(get=GetCenterFaces,put=PutCenterFaces))
    _variant_t CenterFaces;
    __declspec(property(get=GetTangent,put=PutTangent))
    VARIANT_BOOL Tangent;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSide1Faces ( );
    void PutSide1Faces (
        const _variant_t & PVal );
    _variant_t GetSide2Faces ( );
    void PutSide2Faces (
        const _variant_t & PVal );
    _variant_t GetCenterFaces ( );
    void PutCenterFaces (
        const _variant_t & PVal );
    void PutTangent (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTangent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Side1Faces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Side1Faces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Side2Faces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Side2Faces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_CenterFaces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_CenterFaces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall put_Tangent (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Tangent (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("f36e8fba-f786-4e65-8782-3f6bc2f9d006"))
IFullFillets : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetFullFillet))
    IFullFilletPtr FullFillet[];

    //
    // Wrapper methods for error-handling
    //

    IFullFilletPtr GetFullFillet (
        const _variant_t & Index );
    IFullFilletPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FullFillet (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IFullFillet * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IFullFillet * * Result ) = 0;
};

struct __declspec(uuid("83bfb72d-16fe-488b-846c-7b9905824f58"))
IWireFrame3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetEdgesCount))
    long EdgesCount;
    __declspec(property(get=GetVertex))
    IModelObjectPtr Vertex[];
    __declspec(property(get=GetEdge))
    IModelObjectPtr Edge[];

    //
    // Wrapper methods for error-handling
    //

    long GetVertexCount ( );
    long GetEdgesCount ( );
    IModelObjectPtr GetVertex (
        long Index );
    IModelObjectPtr GetEdge (
        long Index );
    VARIANT_BOOL AddVertex (
        struct IKompasAPIObject * Obj );
    VARIANT_BOOL AddVertexByPoint (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL AddEdge (
        struct IKompasAPIObject * Obj );
    VARIANT_BOOL ClearVertexes ( );
    VARIANT_BOOL ClearEdges ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_EdgesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ struct IKompasAPIObject * Obj,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddVertexByPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddEdge (
        /*[in]*/ struct IKompasAPIObject * Obj,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearVertexes (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearEdges (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("d5f8b7ed-2477-4480-bdab-c2bb392f7fec"))
IWireFrames3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetWireFrame3D))
    IWireFrame3DPtr WireFrame3D[];

    //
    // Wrapper methods for error-handling
    //

    IWireFrame3DPtr GetWireFrame3D (
        const _variant_t & Index );
    IWireFrame3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WireFrame3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IWireFrame3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IWireFrame3D * * Result ) = 0;
};

struct __declspec(uuid("65851ada-9047-4ad7-91df-c50d58813851"))
ISplitSolid : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCutObjects,put=PutCutObjects))
    _variant_t CutObjects;

    //
    // Wrapper methods for error-handling
    //

    void PutCutObjects (
        const _variant_t & Result );
    _variant_t GetCutObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CutObjects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_CutObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("5334bc27-f93d-4bd6-8ce1-f48b73b2dc2a"))
ISplitSolids : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSplitSolid))
    ISplitSolidPtr SplitSolid[];

    //
    // Wrapper methods for error-handling
    //

    ISplitSolidPtr GetSplitSolid (
        const _variant_t & Index );
    ISplitSolidPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SplitSolid (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISplitSolid * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISplitSolid * * Result ) = 0;
};

struct __declspec(uuid("58b4011d-3c0b-499a-a441-7870b663e8cf"))
IExtrusion1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProfile,put=PutProfile))
    IModelObjectPtr Profile;
    __declspec(property(get=GetDirectionObject,put=PutDirectionObject))
    IModelObjectPtr DirectionObject;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;
    __declspec(property(get=GetCutOffByPoint,put=PutCutOffByPoint))
    VARIANT_BOOL CutOffByPoint[];
    __declspec(property(get=GetOperationResult,put=PutOperationResult))
    enum ksOperationResultEnum OperationResult;
    __declspec(property(get=GetProfiles,put=PutProfiles))
    _variant_t Profiles;

    //
    // Wrapper methods for error-handling
    //

    void PutProfile (
        struct IModelObject * Result );
    IModelObjectPtr GetProfile ( );
    void PutDirectionObject (
        struct IModelObject * Result );
    IModelObjectPtr GetDirectionObject ( );
    IVector3DPtr GetVector3D ( );
    void PutCutOffByPoint (
        VARIANT_BOOL Normal,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCutOffByPoint (
        VARIANT_BOOL Normal );
    void PutOperationResult (
        enum ksOperationResultEnum Result );
    enum ksOperationResultEnum GetOperationResult ( );
    void PutProfiles (
        const _variant_t & Profiles );
    _variant_t GetProfiles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Profile (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Profile (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_DirectionObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_DirectionObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
      virtual HRESULT __stdcall put_CutOffByPoint (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CutOffByPoint (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_OperationResult (
        /*[in]*/ enum ksOperationResultEnum Result ) = 0;
      virtual HRESULT __stdcall get_OperationResult (
        /*[out,retval]*/ enum ksOperationResultEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Profiles (
        /*[in]*/ VARIANT Profiles ) = 0;
      virtual HRESULT __stdcall get_Profiles (
        /*[out,retval]*/ VARIANT * Profiles ) = 0;
};

struct __declspec(uuid("b631d95f-c487-41d6-9726-c65e9f5a4505"))
ISheetMetalBend : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetDisposal,put=PutDisposal))
    enum ksBendDisposalEnum Disposal;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetLengthType,put=PutLengthType))
    enum ksBendLengthTypeEnum LengthType;
    __declspec(property(get=GetInternalLength,put=PutInternalLength))
    VARIANT_BOOL InternalLength;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetAngleType,put=PutAngleType))
    VARIANT_BOOL AngleType;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum ksBendOffsetTypeEnum OffsetType;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetStraighten,put=PutStraighten))
    VARIANT_BOOL Straighten;
    __declspec(property(get=GetLeftSideType,put=PutLeftSideType))
    enum ksBendSideTypeEnum LeftSideType;
    __declspec(property(get=GetDistanceLeftSide,put=PutDistanceLeftSide))
    double DistanceLeftSide;
    __declspec(property(get=GetLeftSideAngle,put=PutLeftSideAngle))
    double LeftSideAngle;
    __declspec(property(get=GetDeviationLeftSide,put=PutDeviationLeftSide))
    double DeviationLeftSide;
    __declspec(property(get=GetWideningLeftSide,put=PutWideningLeftSide))
    double WideningLeftSide;
    __declspec(property(get=GetRightSideType,put=PutRightSideType))
    enum ksBendSideTypeEnum RightSideType;
    __declspec(property(get=GetDistanceRightSide,put=PutDistanceRightSide))
    double DistanceRightSide;
    __declspec(property(get=GetRightSideAngle,put=PutRightSideAngle))
    double RightSideAngle;
    __declspec(property(get=GetDeviationRightSide,put=PutDeviationRightSide))
    double DeviationRightSide;
    __declspec(property(get=GetWideningRightSide,put=PutWideningRightSide))
    double WideningRightSide;
    __declspec(property(get=GetWithoutAngleRelease,put=PutWithoutAngleRelease))
    VARIANT_BOOL WithoutAngleRelease;
    __declspec(property(get=GetWithoutBendRelease,put=PutWithoutBendRelease))
    VARIANT_BOOL WithoutBendRelease;
    __declspec(property(get=GetDismissalWithWidth,put=PutDismissalWithWidth))
    VARIANT_BOOL DismissalWithWidth;
    __declspec(property(get=GetBendRelease,put=PutBendRelease))
    enum ksBendReleaseTypeEnum BendRelease;
    __declspec(property(get=GetDismissalWidth,put=PutDismissalWidth))
    double DismissalWidth;
    __declspec(property(get=GetDismissalDepth,put=PutDismissalDepth))
    double DismissalDepth;
    __declspec(property(get=GetDismissalAngleType,put=PutDismissalAngleType))
    enum ksBendAngleReleaseTypeEnum DismissalAngleType;
    __declspec(property(get=GetBendObject,put=PutBendObject))
    IModelObjectPtr BendObject;
    __declspec(property(get=GetInternalRadius,put=PutInternalRadius))
    VARIANT_BOOL InternalRadius;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetUnfoldType,put=PutUnfoldType))
    enum ksUnfoldTypeEnum UnfoldType;
    __declspec(property(get=GetBendCoefficient,put=PutBendCoefficient))
    double BendCoefficient;
    __declspec(property(get=GetBendValue,put=PutBendValue))
    double BendValue;
    __declspec(property(get=GetBendReduction,put=PutBendReduction))
    double BendReduction;
    __declspec(property(get=GetBendTablePath))
    _bstr_t BendTablePath;
    __declspec(property(get=GetLengthBy2Sides,put=PutLengthBy2Sides))
    VARIANT_BOOL LengthBy2Sides;
    __declspec(property(get=GetLength1,put=PutLength1))
    double Length1;
    __declspec(property(get=GetLength2,put=PutLength2))
    double Length2;
    __declspec(property(get=GetLengthObject1,put=PutLengthObject1))
    IModelObjectPtr LengthObject1;
    __declspec(property(get=GetOffsetFromLengthObject1,put=PutOffsetFromLengthObject1))
    double OffsetFromLengthObject1;
    __declspec(property(get=GetOffsetDirection1,put=PutOffsetDirection1))
    ksDirectionTypeEnum OffsetDirection1;
    __declspec(property(get=GetLengthBuildingType1,put=PutLengthBuildingType1))
    enum ksLengthBuildingTypeEnum LengthBuildingType1;
    __declspec(property(get=GetLengthType1,put=PutLengthType1))
    enum ksBendLengthTypeEnum LengthType1;
    __declspec(property(get=GetLengthObject2,put=PutLengthObject2))
    IModelObjectPtr LengthObject2;
    __declspec(property(get=GetOffsetFromLengthObject2,put=PutOffsetFromLengthObject2))
    double OffsetFromLengthObject2;
    __declspec(property(get=GetOffsetDirection2,put=PutOffsetDirection2))
    ksDirectionTypeEnum OffsetDirection2;
    __declspec(property(get=GetLengthBuildingType2,put=PutLengthBuildingType2))
    enum ksLengthBuildingTypeEnum LengthBuildingType2;
    __declspec(property(get=GetLengthType2,put=PutLengthType2))
    enum ksBendLengthTypeEnum LengthType2;
    __declspec(property(get=GetBendObjects,put=PutBendObjects))
    _variant_t BendObjects;

    //
    // Wrapper methods for error-handling
    //

    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutDisposal (
        enum ksBendDisposalEnum PVal );
    enum ksBendDisposalEnum GetDisposal ( );
    void PutWidth (
        double PVal );
    double GetWidth ( );
    void PutLengthType (
        enum ksBendLengthTypeEnum PVal );
    enum ksBendLengthTypeEnum GetLengthType ( );
    void PutInternalLength (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInternalLength ( );
    void PutLength (
        double PVal );
    double GetLength ( );
    void PutAngleType (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAngleType ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutOffsetType (
        enum ksBendOffsetTypeEnum PVal );
    enum ksBendOffsetTypeEnum GetOffsetType ( );
    void PutOffset (
        double PVal );
    double GetOffset ( );
    void PutStraighten (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStraighten ( );
    void PutLeftSideType (
        enum ksBendSideTypeEnum PVal );
    enum ksBendSideTypeEnum GetLeftSideType ( );
    void PutDistanceLeftSide (
        double PVal );
    double GetDistanceLeftSide ( );
    void PutLeftSideAngle (
        double PVal );
    double GetLeftSideAngle ( );
    void PutDeviationLeftSide (
        double PVal );
    double GetDeviationLeftSide ( );
    void PutWideningLeftSide (
        double PVal );
    double GetWideningLeftSide ( );
    void PutRightSideType (
        enum ksBendSideTypeEnum PVal );
    enum ksBendSideTypeEnum GetRightSideType ( );
    void PutDistanceRightSide (
        double PVal );
    double GetDistanceRightSide ( );
    void PutRightSideAngle (
        double PVal );
    double GetRightSideAngle ( );
    void PutDeviationRightSide (
        double PVal );
    double GetDeviationRightSide ( );
    void PutWideningRightSide (
        double PVal );
    double GetWideningRightSide ( );
    void PutWithoutAngleRelease (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithoutAngleRelease ( );
    void PutWithoutBendRelease (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithoutBendRelease ( );
    void PutDismissalWithWidth (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDismissalWithWidth ( );
    void PutBendRelease (
        enum ksBendReleaseTypeEnum PVal );
    enum ksBendReleaseTypeEnum GetBendRelease ( );
    void PutDismissalWidth (
        double PVal );
    double GetDismissalWidth ( );
    void PutDismissalDepth (
        double PVal );
    double GetDismissalDepth ( );
    void PutDismissalAngleType (
        enum ksBendAngleReleaseTypeEnum PVal );
    enum ksBendAngleReleaseTypeEnum GetDismissalAngleType ( );
    void PutBendObject (
        struct IModelObject * Result );
    IModelObjectPtr GetBendObject ( );
    void PutInternalRadius (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInternalRadius ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutUnfoldType (
        enum ksUnfoldTypeEnum PVal );
    enum ksUnfoldTypeEnum GetUnfoldType ( );
    void PutBendCoefficient (
        double PVal );
    double GetBendCoefficient ( );
    void PutBendValue (
        double PVal );
    double GetBendValue ( );
    void PutBendReduction (
        double PVal );
    double GetBendReduction ( );
    _bstr_t GetBendTablePath ( );
    void PutLengthBy2Sides (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetLengthBy2Sides ( );
    void PutLength1 (
        double PVal );
    double GetLength1 ( );
    void PutLength2 (
        double PVal );
    double GetLength2 ( );
    void PutLengthObject1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetLengthObject1 ( );
    void PutOffsetFromLengthObject1 (
        double PVal );
    double GetOffsetFromLengthObject1 ( );
    void PutOffsetDirection1 (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetOffsetDirection1 ( );
    void PutLengthBuildingType1 (
        enum ksLengthBuildingTypeEnum PVal );
    enum ksLengthBuildingTypeEnum GetLengthBuildingType1 ( );
    void PutLengthType1 (
        enum ksBendLengthTypeEnum PVal );
    enum ksBendLengthTypeEnum GetLengthType1 ( );
    void PutLengthObject2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetLengthObject2 ( );
    void PutOffsetFromLengthObject2 (
        double PVal );
    double GetOffsetFromLengthObject2 ( );
    void PutOffsetDirection2 (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetOffsetDirection2 ( );
    void PutLengthBuildingType2 (
        enum ksLengthBuildingTypeEnum PVal );
    enum ksLengthBuildingTypeEnum GetLengthBuildingType2 ( );
    void PutLengthType2 (
        enum ksBendLengthTypeEnum PVal );
    enum ksBendLengthTypeEnum GetLengthType2 ( );
    void PutBendObjects (
        const _variant_t & Result );
    _variant_t GetBendObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Disposal (
        /*[in]*/ enum ksBendDisposalEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Disposal (
        /*[out,retval]*/ enum ksBendDisposalEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthType (
        /*[in]*/ enum ksBendLengthTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LengthType (
        /*[out,retval]*/ enum ksBendLengthTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_InternalLength (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InternalLength (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AngleType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AngleType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetType (
        /*[in]*/ enum ksBendOffsetTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum ksBendOffsetTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Straighten (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Straighten (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftSideType (
        /*[in]*/ enum ksBendSideTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LeftSideType (
        /*[out,retval]*/ enum ksBendSideTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DistanceLeftSide (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DistanceLeftSide (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftSideAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_LeftSideAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DeviationLeftSide (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DeviationLeftSide (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WideningLeftSide (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_WideningLeftSide (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RightSideType (
        /*[in]*/ enum ksBendSideTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_RightSideType (
        /*[out,retval]*/ enum ksBendSideTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DistanceRightSide (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DistanceRightSide (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RightSideAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_RightSideAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DeviationRightSide (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DeviationRightSide (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WideningRightSide (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_WideningRightSide (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WithoutAngleRelease (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithoutAngleRelease (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_WithoutBendRelease (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithoutBendRelease (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalWithWidth (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalWithWidth (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BendRelease (
        /*[in]*/ enum ksBendReleaseTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BendRelease (
        /*[out,retval]*/ enum ksBendReleaseTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalWidth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalWidth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalDepth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalDepth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalAngleType (
        /*[in]*/ enum ksBendAngleReleaseTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalAngleType (
        /*[out,retval]*/ enum ksBendAngleReleaseTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BendObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_BendObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_InternalRadius (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InternalRadius (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_UnfoldType (
        /*[in]*/ enum ksUnfoldTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_UnfoldType (
        /*[out,retval]*/ enum ksUnfoldTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BendCoefficient (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendCoefficient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendReduction (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendReduction (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_BendTablePath (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthBy2Sides (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LengthBy2Sides (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Length1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthObject1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_LengthObject1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetFromLengthObject1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetFromLengthObject1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetDirection1 (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetDirection1 (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthBuildingType1 (
        /*[in]*/ enum ksLengthBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LengthBuildingType1 (
        /*[out,retval]*/ enum ksLengthBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthType1 (
        /*[in]*/ enum ksBendLengthTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LengthType1 (
        /*[out,retval]*/ enum ksBendLengthTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthObject2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_LengthObject2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetFromLengthObject2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetFromLengthObject2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetDirection2 (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetDirection2 (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthBuildingType2 (
        /*[in]*/ enum ksLengthBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LengthBuildingType2 (
        /*[out,retval]*/ enum ksLengthBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_LengthType2 (
        /*[in]*/ enum ksBendLengthTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_LengthType2 (
        /*[out,retval]*/ enum ksBendLengthTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BendObjects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_BendObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("6826cfd6-6a48-4eb1-8c89-7db4e36702b4"))
ISheetMetalBends : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalBend))
    ISheetMetalBendPtr SheetMetalBend[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalBendPtr GetSheetMetalBend (
        const _variant_t & Index );
    ISheetMetalBendPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalBend (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalBend * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalBend * * Result ) = 0;
};

struct __declspec(uuid("e13ef07a-b1e8-41fd-9c85-c17f01e52a03"))
ISheetMetalLineBend : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetBendLeftSideFixed,put=PutBendLeftSideFixed))
    VARIANT_BOOL BendLeftSideFixed;
    __declspec(property(get=GetAngleType,put=PutAngleType))
    VARIANT_BOOL AngleType;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetBendType,put=PutBendType))
    enum ksBendTypeEnum BendType;
    __declspec(property(get=GetStraighten,put=PutStraighten))
    VARIANT_BOOL Straighten;
    __declspec(property(get=GetDismissalAngleType,put=PutDismissalAngleType))
    enum ksBendAngleReleaseTypeEnum DismissalAngleType;
    __declspec(property(get=GetInternalRadius,put=PutInternalRadius))
    VARIANT_BOOL InternalRadius;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetUnfoldType,put=PutUnfoldType))
    enum ksUnfoldTypeEnum UnfoldType;
    __declspec(property(get=GetBendCoefficient,put=PutBendCoefficient))
    double BendCoefficient;
    __declspec(property(get=GetBendValue,put=PutBendValue))
    double BendValue;
    __declspec(property(get=GetBendReduction,put=PutBendReduction))
    double BendReduction;
    __declspec(property(get=GetBendTablePath))
    _bstr_t BendTablePath;
    __declspec(property(get=GetFaces,put=PutFaces))
    _variant_t Faces;
    __declspec(property(get=GetLine,put=PutLine))
    IModelObjectPtr Line;

    //
    // Wrapper methods for error-handling
    //

    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutBendLeftSideFixed (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBendLeftSideFixed ( );
    void PutAngleType (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAngleType ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutBendType (
        enum ksBendTypeEnum PVal );
    enum ksBendTypeEnum GetBendType ( );
    void PutStraighten (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStraighten ( );
    void PutDismissalAngleType (
        enum ksBendAngleReleaseTypeEnum PVal );
    enum ksBendAngleReleaseTypeEnum GetDismissalAngleType ( );
    void PutInternalRadius (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInternalRadius ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutUnfoldType (
        enum ksUnfoldTypeEnum PVal );
    enum ksUnfoldTypeEnum GetUnfoldType ( );
    void PutBendCoefficient (
        double PVal );
    double GetBendCoefficient ( );
    void PutBendValue (
        double PVal );
    double GetBendValue ( );
    void PutBendReduction (
        double PVal );
    double GetBendReduction ( );
    _bstr_t GetBendTablePath ( );
    void PutFaces (
        const _variant_t & Result );
    _variant_t GetFaces ( );
    void PutLine (
        struct IModelObject * Result );
    IModelObjectPtr GetLine ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BendLeftSideFixed (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BendLeftSideFixed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AngleType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AngleType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendType (
        /*[in]*/ enum ksBendTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BendType (
        /*[out,retval]*/ enum ksBendTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Straighten (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Straighten (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalAngleType (
        /*[in]*/ enum ksBendAngleReleaseTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalAngleType (
        /*[out,retval]*/ enum ksBendAngleReleaseTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_InternalRadius (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InternalRadius (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_UnfoldType (
        /*[in]*/ enum ksUnfoldTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_UnfoldType (
        /*[out,retval]*/ enum ksUnfoldTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BendCoefficient (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendCoefficient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendReduction (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendReduction (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_BendTablePath (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_Line (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("af8b8310-af82-4b02-8733-783ffafd4dbd"))
ISheetMetalLineBends : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalLineBend))
    ISheetMetalLineBendPtr SheetMetalLineBend[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalLineBendPtr GetSheetMetalLineBend (
        const _variant_t & Index );
    ISheetMetalLineBendPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalLineBend (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalLineBend * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalLineBend * * Result ) = 0;
};

struct __declspec(uuid("4e4f3cb3-5596-445b-9a18-0af559e545c5"))
ISheetMetalSketchBend : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetStraighten,put=PutStraighten))
    VARIANT_BOOL Straighten;
    __declspec(property(get=GetSketch,put=PutSketch))
    IModelObjectPtr Sketch;
    __declspec(property(get=GetEdges,put=PutEdges))
    _variant_t Edges;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksSketchBendBuildingTypeEnum BuildingType;
    __declspec(property(get=GetInternalRadius,put=PutInternalRadius))
    VARIANT_BOOL InternalRadius;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDirection,put=PutDirection))
    ksDirectionTypeEnum Direction;
    __declspec(property(get=GetWidth1,put=PutWidth1))
    double Width1;
    __declspec(property(get=GetWidth2,put=PutWidth2))
    double Width2;
    __declspec(property(get=GetUnfoldType,put=PutUnfoldType))
    enum ksUnfoldTypeEnum UnfoldType;
    __declspec(property(get=GetBendCoefficient,put=PutBendCoefficient))
    double BendCoefficient;
    __declspec(property(get=GetBendValue,put=PutBendValue))
    double BendValue;
    __declspec(property(get=GetBendReduction,put=PutBendReduction))
    double BendReduction;
    __declspec(property(get=GetBendTablePath))
    _bstr_t BendTablePath;
    __declspec(property(get=GetWithoutAngleRelease,put=PutWithoutAngleRelease))
    VARIANT_BOOL WithoutAngleRelease;
    __declspec(property(get=GetWithoutBendRelease,put=PutWithoutBendRelease))
    VARIANT_BOOL WithoutBendRelease;
    __declspec(property(get=GetDismissalWithWidth,put=PutDismissalWithWidth))
    VARIANT_BOOL DismissalWithWidth;
    __declspec(property(get=GetBendRelease,put=PutBendRelease))
    enum ksBendReleaseTypeEnum BendRelease;
    __declspec(property(get=GetDismissalWidth,put=PutDismissalWidth))
    double DismissalWidth;
    __declspec(property(get=GetDismissalDepth,put=PutDismissalDepth))
    double DismissalDepth;
    __declspec(property(get=GetDismissalAngleType,put=PutDismissalAngleType))
    enum ksBendAngleReleaseTypeEnum DismissalAngleType;
    __declspec(property(get=GetClosingEnable,put=PutClosingEnable))
    VARIANT_BOOL ClosingEnable[];
    __declspec(property(get=GetClosingClosedType,put=PutClosingClosedType))
    enum ksClosingClosedTypeEnum ClosingClosedType[];
    __declspec(property(get=GetClosingCorneringType,put=PutClosingCorneringType))
    enum ksClosingCorneringEnum ClosingCorneringType[];
    __declspec(property(get=GetClosingAngle,put=PutClosingAngle))
    double ClosingAngle[];
    __declspec(property(get=GetClosingGapValue,put=PutClosingGapValue))
    double ClosingGapValue[];
    __declspec(property(get=GetClosingHolePlacement,put=PutClosingHolePlacement))
    enum ksClosingHolePlacementEnum ClosingHolePlacement;
    __declspec(property(get=GetClosingHoleDiameter,put=PutClosingHoleDiameter))
    double ClosingHoleDiameter;
    __declspec(property(get=GetClosingHoleOffset,put=PutClosingHoleOffset))
    double ClosingHoleOffset;

    //
    // Wrapper methods for error-handling
    //

    void PutStraighten (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStraighten ( );
    void PutSketch (
        struct IModelObject * PVal );
    IModelObjectPtr GetSketch ( );
    _variant_t GetEdges ( );
    void PutEdges (
        const _variant_t & PVal );
    enum ksSketchBendBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksSketchBendBuildingTypeEnum PVal );
    void PutInternalRadius (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInternalRadius ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutDirection (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetDirection ( );
    void PutWidth1 (
        double PVal );
    double GetWidth1 ( );
    void PutWidth2 (
        double PVal );
    double GetWidth2 ( );
    void PutUnfoldType (
        enum ksUnfoldTypeEnum PVal );
    enum ksUnfoldTypeEnum GetUnfoldType ( );
    void PutBendCoefficient (
        double PVal );
    double GetBendCoefficient ( );
    void PutBendValue (
        double PVal );
    double GetBendValue ( );
    void PutBendReduction (
        double PVal );
    double GetBendReduction ( );
    _bstr_t GetBendTablePath ( );
    void PutWithoutAngleRelease (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithoutAngleRelease ( );
    void PutWithoutBendRelease (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithoutBendRelease ( );
    void PutDismissalWithWidth (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDismissalWithWidth ( );
    void PutBendRelease (
        enum ksBendReleaseTypeEnum PVal );
    enum ksBendReleaseTypeEnum GetBendRelease ( );
    void PutDismissalWidth (
        double PVal );
    double GetDismissalWidth ( );
    void PutDismissalDepth (
        double PVal );
    double GetDismissalDepth ( );
    void PutDismissalAngleType (
        enum ksBendAngleReleaseTypeEnum PVal );
    enum ksBendAngleReleaseTypeEnum GetDismissalAngleType ( );
    void PutClosingEnable (
        enum ksClosingTypeEnum Type,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosingEnable (
        enum ksClosingTypeEnum Type );
    enum ksClosingClosedTypeEnum GetClosingClosedType (
        enum ksClosingTypeEnum Type );
    void PutClosingClosedType (
        enum ksClosingTypeEnum Type,
        enum ksClosingClosedTypeEnum PVal );
    enum ksClosingCorneringEnum GetClosingCorneringType (
        enum ksClosingTypeEnum Type );
    void PutClosingCorneringType (
        enum ksClosingTypeEnum Type,
        enum ksClosingCorneringEnum PVal );
    double GetClosingAngle (
        enum ksClosingTypeEnum Type );
    void PutClosingAngle (
        enum ksClosingTypeEnum Type,
        double PVal );
    double GetClosingGapValue (
        enum ksClosingTypeEnum Type );
    void PutClosingGapValue (
        enum ksClosingTypeEnum Type,
        double PVal );
    enum ksClosingHolePlacementEnum GetClosingHolePlacement ( );
    void PutClosingHolePlacement (
        enum ksClosingHolePlacementEnum PVal );
    double GetClosingHoleDiameter ( );
    void PutClosingHoleDiameter (
        double PVal );
    double GetClosingHoleOffset ( );
    void PutClosingHoleOffset (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Straighten (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Straighten (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Edges (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksSketchBendBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksSketchBendBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall put_InternalRadius (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InternalRadius (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Width1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Width2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_UnfoldType (
        /*[in]*/ enum ksUnfoldTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_UnfoldType (
        /*[out,retval]*/ enum ksUnfoldTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BendCoefficient (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendCoefficient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendReduction (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendReduction (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_BendTablePath (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_WithoutAngleRelease (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithoutAngleRelease (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_WithoutBendRelease (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithoutBendRelease (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalWithWidth (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalWithWidth (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BendRelease (
        /*[in]*/ enum ksBendReleaseTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BendRelease (
        /*[out,retval]*/ enum ksBendReleaseTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalWidth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalWidth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalDepth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalDepth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DismissalAngleType (
        /*[in]*/ enum ksBendAngleReleaseTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DismissalAngleType (
        /*[out,retval]*/ enum ksBendAngleReleaseTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingEnable (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingEnable (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingClosedType (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[out,retval]*/ enum ksClosingClosedTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingClosedType (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[in]*/ enum ksClosingClosedTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingCorneringType (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[out,retval]*/ enum ksClosingCorneringEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingCorneringType (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[in]*/ enum ksClosingCorneringEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingAngle (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingAngle (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingGapValue (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingGapValue (
        /*[in]*/ enum ksClosingTypeEnum Type,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingHolePlacement (
        /*[out,retval]*/ enum ksClosingHolePlacementEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingHolePlacement (
        /*[in]*/ enum ksClosingHolePlacementEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingHoleDiameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingHoleDiameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingHoleOffset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingHoleOffset (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("247539a2-bb15-4d8a-9121-67bde48a989a"))
ISheetMetalSketchBends : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalSketchBend))
    ISheetMetalSketchBendPtr SheetMetalSketchBend[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalSketchBendPtr GetSheetMetalSketchBend (
        const _variant_t & Index );
    ISheetMetalSketchBendPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalSketchBend (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalSketchBend * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalSketchBend * * Result ) = 0;
};

struct __declspec(uuid("995bee65-54d2-443e-9423-88b4323308a7"))
ISheetMetalClosedCorner : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCornersObjects,put=PutCornersObjects))
    _variant_t CornersObjects;
    __declspec(property(get=GetCornersCount))
    long CornersCount;
    __declspec(property(get=GetCornerObject))
    IModelObjectPtr CornerObject[];
    __declspec(property(get=GetDefailtParametersIndex,put=PutDefailtParametersIndex))
    long DefailtParametersIndex;
    __declspec(property(get=GetClosingClosedType,put=PutClosingClosedType))
    enum ksClosingClosedTypeEnum ClosingClosedType[];
    __declspec(property(get=GetClosingCorneringType,put=PutClosingCorneringType))
    enum ksClosingCorneringEnum ClosingCorneringType[];
    __declspec(property(get=GetClosingGapValue,put=PutClosingGapValue))
    double ClosingGapValue[];
    __declspec(property(get=GetClosingHolePlacement,put=PutClosingHolePlacement))
    enum ksClosingHolePlacementEnum ClosingHolePlacement[];
    __declspec(property(get=GetClosingHoleDiameter,put=PutClosingHoleDiameter))
    double ClosingHoleDiameter[];
    __declspec(property(get=GetClosingHoleOffset,put=PutClosingHoleOffset))
    double ClosingHoleOffset[];
    __declspec(property(get=GetClosingContinue,put=PutClosingContinue))
    VARIANT_BOOL ClosingContinue[];
    __declspec(property(get=GetClosingDirection,put=PutClosingDirection))
    VARIANT_BOOL ClosingDirection[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetCornersObjects ( );
    void PutCornersObjects (
        const _variant_t & PVal );
    long GetCornersCount ( );
    IModelObjectPtr GetCornerObject (
        long Index );
    VARIANT_BOOL AddCornerObject (
        struct IModelObject * NewVal );
    VARIANT_BOOL DeleteCornerObject (
        long Index );
    VARIANT_BOOL ClearCornerObjects ( );
    long GetDefailtParametersIndex ( );
    void PutDefailtParametersIndex (
        long PVal );
    enum ksClosingClosedTypeEnum GetClosingClosedType (
        long Index );
    void PutClosingClosedType (
        long Index,
        enum ksClosingClosedTypeEnum PVal );
    enum ksClosingCorneringEnum GetClosingCorneringType (
        long Index );
    void PutClosingCorneringType (
        long Index,
        enum ksClosingCorneringEnum PVal );
    double GetClosingGapValue (
        long Index );
    void PutClosingGapValue (
        long Index,
        double PVal );
    enum ksClosingHolePlacementEnum GetClosingHolePlacement (
        long Index );
    void PutClosingHolePlacement (
        long Index,
        enum ksClosingHolePlacementEnum PVal );
    double GetClosingHoleDiameter (
        long Index );
    void PutClosingHoleDiameter (
        long Index,
        double PVal );
    double GetClosingHoleOffset (
        long Index );
    void PutClosingHoleOffset (
        long Index,
        double PVal );
    VARIANT_BOOL GetClosingContinue (
        long Index );
    void PutClosingContinue (
        long Index,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosingDirection (
        long Index );
    void PutClosingDirection (
        long Index,
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CornersObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_CornersObjects (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_CornersCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_CornerObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddCornerObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteCornerObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearCornerObjects (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_DefailtParametersIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_DefailtParametersIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingClosedType (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksClosingClosedTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingClosedType (
        /*[in]*/ long Index,
        /*[in]*/ enum ksClosingClosedTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingCorneringType (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksClosingCorneringEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingCorneringType (
        /*[in]*/ long Index,
        /*[in]*/ enum ksClosingCorneringEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingGapValue (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingGapValue (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingHolePlacement (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksClosingHolePlacementEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingHolePlacement (
        /*[in]*/ long Index,
        /*[in]*/ enum ksClosingHolePlacementEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingHoleDiameter (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingHoleDiameter (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingHoleOffset (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingHoleOffset (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingContinue (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingContinue (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ClosingDirection (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosingDirection (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("67037d06-603a-41da-8513-45088fea98a8"))
ISheetMetalClosedCorners : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalClosedCorner))
    ISheetMetalClosedCornerPtr SheetMetalClosedCorner[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalClosedCornerPtr GetSheetMetalClosedCorner (
        const _variant_t & Index );
    ISheetMetalClosedCornerPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalClosedCorner (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalClosedCorner * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalClosedCorner * * Result ) = 0;
};

struct __declspec(uuid("dc733340-dca5-4253-8ab1-045ad169e06e"))
ISheetMetalPlate : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch,put=PutSketch))
    IModelObjectPtr Sketch;
    __declspec(property(get=GetThicknessObject,put=PutThicknessObject))
    IModelObjectPtr ThicknessObject;
    __declspec(property(get=GetIsUserThickness,put=PutIsUserThickness))
    VARIANT_BOOL IsUserThickness;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    void PutSketch (
        struct IModelObject * PVal );
    IModelObjectPtr GetSketch ( );
    void PutThicknessObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetThicknessObject ( );
    void PutIsUserThickness (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIsUserThickness ( );
    void PutThickness (
        double PVal );
    double GetThickness ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ThicknessObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_IsUserThickness (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IsUserThickness (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("a1ad042d-a57f-4079-8f7a-ce4aab5d9daf"))
ISheetMetalPlates : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalPlate))
    ISheetMetalPlatePtr SheetMetalPlate[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalPlatePtr GetSheetMetalPlate (
        const _variant_t & Index );
    ISheetMetalPlatePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalPlate (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalPlate * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalPlate * * Result ) = 0;
};

struct __declspec(uuid("194f5af1-1b37-4ff7-9c7a-b939cb556f3a"))
ISheetMetalBendedStraighten : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFixedFace,put=PutFixedFace))
    IModelObjectPtr FixedFace;
    __declspec(property(get=GetBendObjects,put=PutBendObjects))
    _variant_t BendObjects;
    __declspec(property(get=GetFoldLinesEnabled,put=PutFoldLinesEnabled))
    VARIANT_BOOL FoldLinesEnabled;
    __declspec(property(get=GetFoldLinesStyle,put=PutFoldLinesStyle))
    enum ksCurveStyleEnum FoldLinesStyle;

    //
    // Wrapper methods for error-handling
    //

    void PutFixedFace (
        struct IModelObject * PVal );
    IModelObjectPtr GetFixedFace ( );
    _variant_t GetBendObjects ( );
    void PutBendObjects (
        const _variant_t & PVal );
    VARIANT_BOOL GetFoldLinesEnabled ( );
    void PutFoldLinesEnabled (
        VARIANT_BOOL PVal );
    enum ksCurveStyleEnum GetFoldLinesStyle ( );
    void PutFoldLinesStyle (
        enum ksCurveStyleEnum Style );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_FixedFace (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_FixedFace (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_BendObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_BendObjects (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_FoldLinesEnabled (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FoldLinesEnabled (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FoldLinesStyle (
        /*[out,retval]*/ enum ksCurveStyleEnum * Style ) = 0;
      virtual HRESULT __stdcall put_FoldLinesStyle (
        /*[in]*/ enum ksCurveStyleEnum Style ) = 0;
};

struct __declspec(uuid("b19d00a4-1b8e-43fa-9da7-ebe37ec67b67"))
ISheetMetalBendedStraightens : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalBendedStraighten))
    ISheetMetalBendedStraightenPtr SheetMetalBendedStraighten[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalBendedStraightenPtr GetSheetMetalBendedStraighten (
        const _variant_t & Index );
    ISheetMetalBendedStraightenPtr Add (
        ksObj3dTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalBendedStraighten (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalBendedStraighten * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum Type,
        /*[out,retval]*/ struct ISheetMetalBendedStraighten * * Result ) = 0;
};

struct __declspec(uuid("bc21145e-5520-4871-aa24-52e19ef82211"))
ISheetMetalBendUnfoldParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnfoldPlane,put=PutUnfoldPlane))
    IModelObjectPtr UnfoldPlane;
    __declspec(property(get=GetFixedFaces,put=PutFixedFaces))
    _variant_t FixedFaces;
    __declspec(property(get=GetExcludedBendObjects,put=PutExcludedBendObjects))
    _variant_t ExcludedBendObjects;
    __declspec(property(get=GetUnfold,put=PutUnfold))
    VARIANT_BOOL Unfold;
    __declspec(property(get=GetIsCreated))
    VARIANT_BOOL IsCreated;

    //
    // Wrapper methods for error-handling
    //

    void PutUnfoldPlane (
        struct IModelObject * PVal );
    IModelObjectPtr GetUnfoldPlane ( );
    void PutFixedFaces (
        const _variant_t & PVal );
    _variant_t GetFixedFaces ( );
    _variant_t GetExcludedBendObjects ( );
    void PutExcludedBendObjects (
        const _variant_t & PVal );
    void PutUnfold (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUnfold ( );
    VARIANT_BOOL GetIsCreated ( );
    VARIANT_BOOL UpdateParam ( );
    VARIANT_BOOL DeleteParam ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_UnfoldPlane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_UnfoldPlane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedFaces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_FixedFaces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_ExcludedBendObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_ExcludedBendObjects (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall put_Unfold (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Unfold (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsCreated (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateParam (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteParam (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("bdb9fb08-c8c8-4446-9821-be1ba9306602"))
ISheetMetalPressForming : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch,put=PutSketch))
    IModelObjectPtr Sketch;
    __declspec(property(get=GetHeightType,put=PutHeightType))
    enum ksPressFormingHeightTypeEnum HeightType;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetThicknessDirection,put=PutThicknessDirection))
    VARIANT_BOOL ThicknessDirection;
    __declspec(property(get=GetSide,put=PutSide))
    VARIANT_BOOL Side;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetRoundEdges,put=PutRoundEdges))
    VARIANT_BOOL RoundEdges;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetRound,put=PutRound))
    VARIANT_BOOL Round;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetRoundBottom,put=PutRoundBottom))
    VARIANT_BOOL RoundBottom;
    __declspec(property(get=GetRadius3,put=PutRadius3))
    double Radius3;

    //
    // Wrapper methods for error-handling
    //

    void PutSketch (
        struct IModelObject * PVal );
    IModelObjectPtr GetSketch ( );
    void PutHeightType (
        enum ksPressFormingHeightTypeEnum PVal );
    enum ksPressFormingHeightTypeEnum GetHeightType ( );
    void PutHeight (
        double PVal );
    double GetHeight ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutThicknessDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetThicknessDirection ( );
    void PutSide (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSide ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutRoundEdges (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRoundEdges ( );
    void PutRadius1 (
        double PVal );
    double GetRadius1 ( );
    void PutRound (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRound ( );
    void PutRadius2 (
        double PVal );
    double GetRadius2 ( );
    void PutRoundBottom (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRoundBottom ( );
    void PutRadius3 (
        double PVal );
    double GetRadius3 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_HeightType (
        /*[in]*/ enum ksPressFormingHeightTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HeightType (
        /*[out,retval]*/ enum ksPressFormingHeightTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ThicknessDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Side (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Side (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RoundEdges (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RoundEdges (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Round (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Round (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RoundBottom (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RoundBottom (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius3 (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("0541bee1-9273-4611-9f26-b3408c51580f"))
ISheetMetalPressFormings : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalPressForming))
    ISheetMetalPressFormingPtr SheetMetalPressForming[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalPressFormingPtr GetSheetMetalPressForming (
        const _variant_t & Index );
    ISheetMetalPressFormingPtr Add (
        ksObj3dTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalPressForming (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalPressForming * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum Type,
        /*[out,retval]*/ struct ISheetMetalPressForming * * Result ) = 0;
};

struct __declspec(uuid("75024bd8-6d1c-4963-9733-326efb3cb28d"))
ISheetMetalShoulder : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch,put=PutSketch))
    IModelObjectPtr Sketch;
    __declspec(property(get=GetShoulderType,put=PutShoulderType))
    enum ksShoulderTypeEnum ShoulderType;
    __declspec(property(get=GetCutingType,put=PutCutingType))
    enum ksShoulderCutingTypeEnum CutingType;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksShoulderBuildingTypeEnum BuildingType;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetWidth1,put=PutWidth1))
    double Width1;
    __declspec(property(get=GetWidth2,put=PutWidth2))
    double Width2;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetRound,put=PutRound))
    VARIANT_BOOL Round;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetGapValue,put=PutGapValue))
    double GapValue;

    //
    // Wrapper methods for error-handling
    //

    void PutSketch (
        struct IModelObject * PVal );
    IModelObjectPtr GetSketch ( );
    void PutShoulderType (
        enum ksShoulderTypeEnum PVal );
    enum ksShoulderTypeEnum GetShoulderType ( );
    void PutCutingType (
        enum ksShoulderCutingTypeEnum PVal );
    enum ksShoulderCutingTypeEnum GetCutingType ( );
    void PutBuildingType (
        enum ksShoulderBuildingTypeEnum PVal );
    enum ksShoulderBuildingTypeEnum GetBuildingType ( );
    void PutHeight (
        double PVal );
    double GetHeight ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutWidth1 (
        double PVal );
    double GetWidth1 ( );
    void PutWidth2 (
        double PVal );
    double GetWidth2 ( );
    void PutRadius1 (
        double PVal );
    double GetRadius1 ( );
    void PutRound (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRound ( );
    void PutRadius2 (
        double PVal );
    double GetRadius2 ( );
    void PutGapValue (
        double PVal );
    double GetGapValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ShoulderType (
        /*[in]*/ enum ksShoulderTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ShoulderType (
        /*[out,retval]*/ enum ksShoulderTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CutingType (
        /*[in]*/ enum ksShoulderCutingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CutingType (
        /*[out,retval]*/ enum ksShoulderCutingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksShoulderBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksShoulderBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Width1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Width2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Round (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Round (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_GapValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_GapValue (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("ac0f620e-229a-42be-8c5b-1786c54474c0"))
ISheetMetalShoulders : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalShoulder))
    ISheetMetalShoulderPtr SheetMetalShoulder[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalShoulderPtr GetSheetMetalShoulder (
        const _variant_t & Index );
    ISheetMetalShoulderPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalShoulder (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalShoulder * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalShoulder * * Result ) = 0;
};

struct __declspec(uuid("13501739-cd1f-4401-8a48-b2093e974cc1"))
ISheetMetalJalousie : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch,put=PutSketch))
    IModelObjectPtr Sketch;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksJalousieBuildingTypeEnum BuildingType;
    __declspec(property(get=GetFormEnd,put=PutFormEnd))
    enum ksJalousieFormEndEnum FormEnd;
    __declspec(property(get=GetHeightType,put=PutHeightType))
    enum ksJalousieHeightTypeEnum HeightType;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetSide,put=PutSide))
    VARIANT_BOOL Side;
    __declspec(property(get=GetRound,put=PutRound))
    VARIANT_BOOL Round;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    void PutSketch (
        struct IModelObject * PVal );
    IModelObjectPtr GetSketch ( );
    void PutBuildingType (
        enum ksJalousieBuildingTypeEnum PVal );
    enum ksJalousieBuildingTypeEnum GetBuildingType ( );
    void PutFormEnd (
        enum ksJalousieFormEndEnum PVal );
    enum ksJalousieFormEndEnum GetFormEnd ( );
    void PutHeightType (
        enum ksJalousieHeightTypeEnum PVal );
    enum ksJalousieHeightTypeEnum GetHeightType ( );
    void PutHeight (
        double PVal );
    double GetHeight ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutWidth (
        double PVal );
    double GetWidth ( );
    void PutSide (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSide ( );
    void PutRound (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRound ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksJalousieBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksJalousieBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_FormEnd (
        /*[in]*/ enum ksJalousieFormEndEnum PVal ) = 0;
      virtual HRESULT __stdcall get_FormEnd (
        /*[out,retval]*/ enum ksJalousieFormEndEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_HeightType (
        /*[in]*/ enum ksJalousieHeightTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HeightType (
        /*[out,retval]*/ enum ksJalousieHeightTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Side (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Side (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Round (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Round (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("914d5295-8831-4166-994c-d19c5df149e7"))
ISheetMetalJalousies : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalJalousie))
    ISheetMetalJalousiePtr SheetMetalJalousie[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalJalousiePtr GetSheetMetalJalousie (
        const _variant_t & Index );
    ISheetMetalJalousiePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalJalousie (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalJalousie * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalJalousie * * Result ) = 0;
};

struct __declspec(uuid("aca9c96e-5dbe-44c8-abf5-15230282ab05"))
ISheetMetalRib : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBendObject))
    IModelObjectPtr BendObject;
    __declspec(property(get=GetBendFace))
    IModelObjectPtr BendFace;
    __declspec(property(get=GetBendEdge))
    IModelObjectPtr BendEdge;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum ksPoint3DCurveParamTypeEnum OffsetType;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksSHRibBuildingTypeEnum BuildingType;
    __declspec(property(get=GetCutingType,put=PutCutingType))
    enum ksSHRibCutingTypeEnum CutingType;
    __declspec(property(get=GetLenght1,put=PutLenght1))
    double Lenght1;
    __declspec(property(get=GetLenght2,put=PutLenght2))
    double Lenght2;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetRound,put=PutRound))
    VARIANT_BOOL Round;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetArchCreate,put=PutArchCreate))
    VARIANT_BOOL ArchCreate;
    __declspec(property(get=GetArchCoefficient,put=PutArchCoefficient))
    double ArchCoefficient;
    __declspec(property(get=GetArchRadius,put=PutArchRadius))
    double ArchRadius;
    __declspec(property(get=GetArchMeasure,put=PutArchMeasure))
    enum ksArchMeasureEnum ArchMeasure;
    __declspec(property(get=GetArchLength,put=PutArchLength))
    double ArchLength;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetBendObject ( );
    IModelObjectPtr GetBendFace ( );
    IModelObjectPtr GetBendEdge ( );
    VARIANT_BOOL InitBendObjects (
        struct IModelObject * BendObject,
        struct IModelObject * BendFace,
        struct IModelObject * BendEdge );
    VARIANT_BOOL AutoInitBendObjects (
        struct IModelObject * InitObject );
    VARIANT_BOOL CalculateOptimalParams ( );
    void PutOffsetType (
        enum ksPoint3DCurveParamTypeEnum PVal );
    enum ksPoint3DCurveParamTypeEnum GetOffsetType ( );
    void PutOffset (
        double PVal );
    double GetOffset ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutBuildingType (
        enum ksSHRibBuildingTypeEnum PVal );
    enum ksSHRibBuildingTypeEnum GetBuildingType ( );
    void PutCutingType (
        enum ksSHRibCutingTypeEnum PVal );
    enum ksSHRibCutingTypeEnum GetCutingType ( );
    void PutLenght1 (
        double PVal );
    double GetLenght1 ( );
    void PutLenght2 (
        double PVal );
    double GetLenght2 ( );
    void PutAngle1 (
        double PVal );
    double GetAngle1 ( );
    void PutRadius1 (
        double PVal );
    double GetRadius1 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );
    void PutWidth (
        double PVal );
    double GetWidth ( );
    void PutRound (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRound ( );
    void PutRadius2 (
        double PVal );
    double GetRadius2 ( );
    void PutArchCreate (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetArchCreate ( );
    void PutArchCoefficient (
        double PVal );
    double GetArchCoefficient ( );
    void PutArchRadius (
        double PVal );
    double GetArchRadius ( );
    void PutArchMeasure (
        enum ksArchMeasureEnum PVal );
    enum ksArchMeasureEnum GetArchMeasure ( );
    void PutArchLength (
        double PVal );
    double GetArchLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BendObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_BendFace (
        /*[out,retval]*/ struct IModelObject * * NewVal ) = 0;
      virtual HRESULT __stdcall get_BendEdge (
        /*[out,retval]*/ struct IModelObject * * NewVal ) = 0;
      virtual HRESULT __stdcall raw_InitBendObjects (
        /*[in]*/ struct IModelObject * BendObject,
        /*[in]*/ struct IModelObject * BendFace,
        /*[in]*/ struct IModelObject * BendEdge,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AutoInitBendObjects (
        /*[in]*/ struct IModelObject * InitObject,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateOptimalParams (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetType (
        /*[in]*/ enum ksPoint3DCurveParamTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum ksPoint3DCurveParamTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksSHRibBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksSHRibBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CutingType (
        /*[in]*/ enum ksSHRibCutingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CutingType (
        /*[out,retval]*/ enum ksSHRibCutingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Lenght1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Lenght1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Lenght2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Lenght2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Round (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Round (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ArchCreate (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ArchCreate (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ArchCoefficient (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ArchCoefficient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ArchRadius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ArchRadius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ArchMeasure (
        /*[in]*/ enum ksArchMeasureEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ArchMeasure (
        /*[out,retval]*/ enum ksArchMeasureEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ArchLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ArchLength (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("b72cc78f-d630-463f-8911-ed9bd58bba1c"))
ISheetMetalRibs : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalRib))
    ISheetMetalRibPtr SheetMetalRib[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalRibPtr GetSheetMetalRib (
        const _variant_t & Index );
    ISheetMetalRibPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalRib (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalRib * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalRib * * Result ) = 0;
};

struct __declspec(uuid("67c22259-2d49-4f50-9224-adf20f6dd655"))
ISheetMetalPunch : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFace,put=PutFace))
    IModelObjectPtr Face;
    __declspec(property(get=GetBody,put=PutBody))
    IBody7Ptr Body;
    __declspec(property(get=GetBodyFaces,put=PutBodyFaces))
    _variant_t BodyFaces;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksSheetMetalPunchBuildingTypeEnum BuildingType;
    __declspec(property(get=GetDeleteBody,put=PutDeleteBody))
    VARIANT_BOOL DeleteBody;
    __declspec(property(get=GetRoundOffEdges,put=PutRoundOffEdges))
    VARIANT_BOOL RoundOffEdges;
    __declspec(property(get=GetRoundEdgesRadius,put=PutRoundEdgesRadius))
    double RoundEdgesRadius;
    __declspec(property(get=GetRound,put=PutRound))
    VARIANT_BOOL Round;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetThicknessType,put=PutThicknessType))
    enum ksSheetMetalPunchThicknessTypeEnum ThicknessType;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    void PutFace (
        struct IModelObject * PVal );
    IModelObjectPtr GetFace ( );
    void PutBody (
        struct IBody7 * PVal );
    IBody7Ptr GetBody ( );
    void PutBodyFaces (
        const _variant_t & PVal );
    _variant_t GetBodyFaces ( );
    void PutBuildingType (
        enum ksSheetMetalPunchBuildingTypeEnum PVal );
    enum ksSheetMetalPunchBuildingTypeEnum GetBuildingType ( );
    void PutDeleteBody (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDeleteBody ( );
    void PutRoundOffEdges (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRoundOffEdges ( );
    void PutRoundEdgesRadius (
        double PVal );
    double GetRoundEdgesRadius ( );
    void PutRound (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRound ( );
    void PutRadius2 (
        double PVal );
    double GetRadius2 ( );
    void PutThicknessType (
        enum ksSheetMetalPunchThicknessTypeEnum PVal );
    enum ksSheetMetalPunchThicknessTypeEnum GetThicknessType ( );
    void PutThickness (
        double PVal );
    double GetThickness ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Face (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ struct IBody7 * PVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IBody7 * * PVal ) = 0;
      virtual HRESULT __stdcall put_BodyFaces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_BodyFaces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksSheetMetalPunchBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksSheetMetalPunchBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DeleteBody (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DeleteBody (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RoundOffEdges (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RoundOffEdges (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RoundEdgesRadius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_RoundEdgesRadius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Round (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Round (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ThicknessType (
        /*[in]*/ enum ksSheetMetalPunchThicknessTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessType (
        /*[out,retval]*/ enum ksSheetMetalPunchThicknessTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("16298697-3335-435c-8f93-1cafde0ec442"))
ISheetMetalPunchs : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalPunch))
    ISheetMetalPunchPtr SheetMetalPunch[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalPunchPtr GetSheetMetalPunch (
        const _variant_t & Index );
    ISheetMetalPunchPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalPunch (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalPunch * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalPunch * * Result ) = 0;
};

struct __declspec(uuid("6d57994f-c170-4ced-968a-6ad69c1a2c7d"))
IPoint3DParamDisplace : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDX,put=PutDX))
    double DX;
    __declspec(property(get=GetDY,put=PutDY))
    double DY;
    __declspec(property(get=GetDZ,put=PutDZ))
    double DZ;
    __declspec(property(get=GetAssociationVertex))
    IModelObjectPtr AssociationVertex;
    __declspec(property(get=GetGuidingObject))
    IModelObjectPtr GuidingObject;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;

    //
    // Wrapper methods for error-handling
    //

    void PutDX (
        double PVal );
    double GetDX ( );
    void PutDY (
        double PVal );
    double GetDY ( );
    void PutDZ (
        double PVal );
    double GetDZ ( );
    VARIANT_BOOL SetAssociationVertex (
        struct IModelObject * NewVal );
    IModelObjectPtr GetAssociationVertex ( );
    VARIANT_BOOL SetGuidingObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetGuidingObject ( );
    void PutDistance (
        double PVal );
    double GetDistance ( );
    IVector3DPtr GetVector3D ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DX (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DX (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DY (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DY (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DZ (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DZ (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetAssociationVertex (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_AssociationVertex (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetGuidingObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_GuidingObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * PVal ) = 0;
};

struct __declspec(uuid("c009f9ed-ed8a-4b1e-a4ce-156f43c3f6f3"))
IPoint3DParamIntersect : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurveObject))
    IModelObjectPtr CurveObject;
    __declspec(property(get=GetSurfaceObject))
    IModelObjectPtr SurfaceObject;
    __declspec(property(get=GetCartPointArray))
    _variant_t CartPointArray;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetCurveObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetCurveObject ( );
    VARIANT_BOOL SetSurfaceObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetSurfaceObject ( );
    _variant_t GetCartPointArray ( );
    void PutIndex (
        long PVal );
    long GetIndex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetCurveObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_CurveObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetSurfaceObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SurfaceObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_CartPointArray (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("a92f2938-f1d4-475e-aab4-962faa4a4366"))
IPoint3DParamCenter : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObject))
    IModelObjectPtr Object;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("06b6bda5-1dc6-4321-8b28-ac065d87e060"))
IPoint3DParamCurve : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurveObject))
    IModelObjectPtr CurveObject;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum ksPoint3DCurveParamTypeEnum OffsetType;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetCurveObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetCurveObject ( );
    void PutOffsetType (
        enum ksPoint3DCurveParamTypeEnum PVal );
    enum ksPoint3DCurveParamTypeEnum GetOffsetType ( );
    void PutOffset (
        double PVal );
    double GetOffset ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetCurveObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_CurveObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetType (
        /*[in]*/ enum ksPoint3DCurveParamTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum ksPoint3DCurveParamTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("18ce6bbe-63fb-4c94-8998-e40bc5b5d1c6"))
IPoint3DParamSurface : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSurfaceObject))
    IModelObjectPtr SurfaceObject;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum ksPoint3DSurfaceParamTypeEnum OffsetType;
    __declspec(property(get=GetOffset1,put=PutOffset1))
    double Offset1;
    __declspec(property(get=GetOffset2,put=PutOffset2))
    double Offset2;
    __declspec(property(get=GetObject1))
    IModelObjectPtr Object1;
    __declspec(property(get=GetObject2))
    IModelObjectPtr Object2;
    __declspec(property(get=GetAllowBoundaries,put=PutAllowBoundaries))
    VARIANT_BOOL AllowBoundaries;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetSurfaceObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetSurfaceObject ( );
    void PutOffsetType (
        enum ksPoint3DSurfaceParamTypeEnum PVal );
    enum ksPoint3DSurfaceParamTypeEnum GetOffsetType ( );
    void PutOffset1 (
        double PVal );
    double GetOffset1 ( );
    void PutOffset2 (
        double PVal );
    double GetOffset2 ( );
    VARIANT_BOOL SetObject1 (
        struct IModelObject * NewVal );
    IModelObjectPtr GetObject1 ( );
    VARIANT_BOOL SetObject2 (
        struct IModelObject * NewVal );
    IModelObjectPtr GetObject2 ( );
    void PutAllowBoundaries (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAllowBoundaries ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetSurfaceObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SurfaceObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetType (
        /*[in]*/ enum ksPoint3DSurfaceParamTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum ksPoint3DSurfaceParamTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Offset1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Offset2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetObject1 (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Object1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetObject2 (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Object2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_AllowBoundaries (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AllowBoundaries (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("b5d353dd-5f26-42fd-87d3-01c97c44e1bf"))
IPoint3DParamProjection : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetAssociationVertex))
    IModelObjectPtr AssociationVertex;
    __declspec(property(get=GetSurfaceObject))
    IModelObjectPtr SurfaceObject;
    __declspec(property(get=GetGuidingObject))
    IModelObjectPtr GuidingObject;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetAssociationVertex (
        struct IModelObject * NewVal );
    IModelObjectPtr GetAssociationVertex ( );
    VARIANT_BOOL SetSurfaceObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetSurfaceObject ( );
    VARIANT_BOOL SetGuidingObject (
        struct IModelObject * NewVal );
    IModelObjectPtr GetGuidingObject ( );
    IVector3DPtr GetVector3D ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetAssociationVertex (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_AssociationVertex (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetSurfaceObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SurfaceObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetGuidingObject (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_GuidingObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * PVal ) = 0;
};

struct __declspec(uuid("3514887e-321b-4ce3-a966-3eb1a02ceef2"))
IBaseLineDimension3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetObject1,put=PutObject1))
    IModelObjectPtr Object1;
    __declspec(property(get=GetObject2,put=PutObject2))
    IModelObjectPtr Object2;

    //
    // Wrapper methods for error-handling
    //

    double GetLength ( );
    void PutLength (
        double PVal );
    IModelObjectPtr GetObject1 ( );
    void PutObject1 (
        struct IModelObject * Object1 );
    IModelObjectPtr GetObject2 ( );
    void PutObject2 (
        struct IModelObject * Object2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Object1 (
        /*[out,retval]*/ struct IModelObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_Object1 (
        /*[in]*/ struct IModelObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_Object2 (
        /*[out,retval]*/ struct IModelObject * * Object2 ) = 0;
      virtual HRESULT __stdcall put_Object2 (
        /*[in]*/ struct IModelObject * Object2 ) = 0;
};

struct __declspec(uuid("8e30c80c-4c79-497b-a74b-84d44f96ef4d"))
ILineDimensions3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLineDimension3D))
    IBaseLineDimension3DPtr LineDimension3D[];

    //
    // Wrapper methods for error-handling
    //

    IBaseLineDimension3DPtr GetLineDimension3D (
        const _variant_t & Index );
    IBaseLineDimension3DPtr Add (
        ksObj3dTypeEnum DimType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineDimension3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBaseLineDimension3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum DimType,
        /*[out,retval]*/ struct IBaseLineDimension3D * * Result ) = 0;
};

struct __declspec(uuid("5711b871-1fae-425c-898e-583442d851cd"))
IRadialDimension3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObject1,put=PutObject1))
    IModelObjectPtr Object1;
    __declspec(property(get=GetPlaneObject,put=PutPlaneObject))
    IModelObjectPtr PlaneObject;
    __declspec(property(get=GetDimensionType,put=PutDimensionType))
    VARIANT_BOOL DimensionType;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetObject1 ( );
    void PutObject1 (
        struct IModelObject * Object1 );
    IModelObjectPtr GetPlaneObject ( );
    void PutPlaneObject (
        struct IModelObject * Object );
    VARIANT_BOOL GetDimensionType ( );
    void PutDimensionType (
        VARIANT_BOOL PVal );
    double GetAngle ( );
    void PutAngle (
        double PVal );
    VARIANT_BOOL GetSurfacePoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetSurfacePoint (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetCenterPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetCenterPoint (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Object1 (
        /*[out,retval]*/ struct IModelObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_Object1 (
        /*[in]*/ struct IModelObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_PlaneObject (
        /*[out,retval]*/ struct IModelObject * * Object ) = 0;
      virtual HRESULT __stdcall put_PlaneObject (
        /*[in]*/ struct IModelObject * Object ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_GetSurfacePoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetSurfacePoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("153924cd-e046-4334-8798-46a6d6663de4"))
IRadialDimensions3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialDimension3D))
    IRadialDimension3DPtr RadialDimension3D[];

    //
    // Wrapper methods for error-handling
    //

    IRadialDimension3DPtr GetRadialDimension3D (
        const _variant_t & Index );
    IRadialDimension3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialDimension3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRadialDimension3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRadialDimension3D * * Result ) = 0;
};

struct __declspec(uuid("261ae065-69b8-4b42-b103-c8746720c5bf"))
IDiametralDimension3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObject1,put=PutObject1))
    IModelObjectPtr Object1;
    __declspec(property(get=GetPlaneObject,put=PutPlaneObject))
    IModelObjectPtr PlaneObject;
    __declspec(property(get=GetDimensionType,put=PutDimensionType))
    VARIANT_BOOL DimensionType;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetObject1 ( );
    void PutObject1 (
        struct IModelObject * Object1 );
    IModelObjectPtr GetPlaneObject ( );
    void PutPlaneObject (
        struct IModelObject * Object2 );
    VARIANT_BOOL GetDimensionType ( );
    void PutDimensionType (
        VARIANT_BOOL PVal );
    double GetAngle ( );
    void PutAngle (
        double PVal );
    VARIANT_BOOL GetSurfacePoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetSurfacePoint (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetCenterPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetCenterPoint (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Object1 (
        /*[out,retval]*/ struct IModelObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_Object1 (
        /*[in]*/ struct IModelObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_PlaneObject (
        /*[out,retval]*/ struct IModelObject * * Object2 ) = 0;
      virtual HRESULT __stdcall put_PlaneObject (
        /*[in]*/ struct IModelObject * Object2 ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_GetSurfacePoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetSurfacePoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("79b5ac3b-9b2f-4c75-8482-3c0d6b07d911"))
IDiametralDimensions3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetDiametralDimension3D))
    IDiametralDimension3DPtr DiametralDimension3D[];

    //
    // Wrapper methods for error-handling
    //

    IDiametralDimension3DPtr GetDiametralDimension3D (
        const _variant_t & Index );
    IDiametralDimension3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiametralDimension3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDiametralDimension3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IDiametralDimension3D * * Result ) = 0;
};

struct __declspec(uuid("c22870b5-f002-4c76-9e67-46854e938824"))
IAngleDimension3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObject1,put=PutObject1))
    IModelObjectPtr Object1;
    __declspec(property(get=GetObject2,put=PutObject2))
    IModelObjectPtr Object2;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetDimensionType,put=PutDimensionType))
    enum ksAngleDimTypeEnum DimensionType;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetObject1 ( );
    void PutObject1 (
        struct IModelObject * Object1 );
    IModelObjectPtr GetObject2 ( );
    void PutObject2 (
        struct IModelObject * Object2 );
    double GetLength ( );
    void PutLength (
        double PVal );
    enum ksAngleDimTypeEnum GetDimensionType ( );
    void PutDimensionType (
        enum ksAngleDimTypeEnum PVal );
    VARIANT_BOOL Inverse ( );
    VARIANT_BOOL GetCenterPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetCenterPoint (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Object1 (
        /*[out,retval]*/ struct IModelObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_Object1 (
        /*[in]*/ struct IModelObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_Object2 (
        /*[out,retval]*/ struct IModelObject * * Object2 ) = 0;
      virtual HRESULT __stdcall put_Object2 (
        /*[in]*/ struct IModelObject * Object2 ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ enum ksAngleDimTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionType (
        /*[in]*/ enum ksAngleDimTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall raw_Inverse (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e0e8db05-f71b-457e-bfeb-7ec2e803e77a"))
IAngleDimensions3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetAngleDimension3D))
    IAngleDimension3DPtr AngleDimension3D[];

    //
    // Wrapper methods for error-handling
    //

    IAngleDimension3DPtr GetAngleDimension3D (
        const _variant_t & Index );
    IAngleDimension3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AngleDimension3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAngleDimension3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAngleDimension3D * * Result ) = 0;
};

struct __declspec(uuid("7170f38e-8230-4c9c-b36b-0bacbb27b123"))
IBaseLeader3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    ksObj3dTypeEnum BasePlane;
    __declspec(property(get=GetPositionObject,put=PutPositionObject))
    IModelObjectPtr PositionObject;
    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum ksArrowEnum ArrowType;

    //
    // Wrapper methods for error-handling
    //

    ksObj3dTypeEnum GetBasePlane ( );
    void PutBasePlane (
        ksObj3dTypeEnum Val );
    IModelObjectPtr GetPositionObject ( );
    void PutPositionObject (
        struct IModelObject * Val );
    VARIANT_BOOL GetPosition (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPosition (
        double X,
        double Y,
        double Z );
    enum ksArrowEnum GetArrowType ( );
    void PutArrowType (
        enum ksArrowEnum Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ ksObj3dTypeEnum * Val ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ ksObj3dTypeEnum Val ) = 0;
      virtual HRESULT __stdcall get_PositionObject (
        /*[out,retval]*/ struct IModelObject * * Val ) = 0;
      virtual HRESULT __stdcall put_PositionObject (
        /*[in]*/ struct IModelObject * Val ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum ksArrowEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum ksArrowEnum Result ) = 0;
};

struct __declspec(uuid("c6e6bdd4-2b0e-49bf-87d3-04e800200ddc"))
ILeaders3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLeader3D))
    IBaseLeader3DPtr Leader3D[];

    //
    // Wrapper methods for error-handling
    //

    IBaseLeader3DPtr GetLeader3D (
        const _variant_t & Index );
    IBaseLeader3DPtr Add (
        ksObj3dTypeEnum DimType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Leader3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBaseLeader3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum DimType,
        /*[out,retval]*/ struct IBaseLeader3D * * Value ) = 0;
};

struct __declspec(uuid("083a4984-199e-4591-8fc3-cb8a9d7d4303"))
IRough3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    ksObj3dTypeEnum BasePlane;
    __declspec(property(get=GetPositionObject,put=PutPositionObject))
    IModelObjectPtr PositionObject;
    __declspec(property(get=GetBaseObject))
    IModelObjectPtr BaseObject;

    //
    // Wrapper methods for error-handling
    //

    ksObj3dTypeEnum GetBasePlane ( );
    void PutBasePlane (
        ksObj3dTypeEnum Val );
    IModelObjectPtr GetPositionObject ( );
    void PutPositionObject (
        struct IModelObject * Val );
    VARIANT_BOOL GetPosition (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPosition (
        double X,
        double Y,
        double Z );
    IModelObjectPtr GetBaseObject ( );
    VARIANT_BOOL GetBasePosition (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetBasePosition (
        double X,
        double Y,
        double Z,
        struct IModelObject * Object );
    VARIANT_BOOL GetShelfPosition (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetShelfPosition (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ ksObj3dTypeEnum * Val ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ ksObj3dTypeEnum Val ) = 0;
      virtual HRESULT __stdcall get_PositionObject (
        /*[out,retval]*/ struct IModelObject * * Val ) = 0;
      virtual HRESULT __stdcall put_PositionObject (
        /*[in]*/ struct IModelObject * Val ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IModelObject * * Object1 ) = 0;
      virtual HRESULT __stdcall raw_GetBasePosition (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBasePosition (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetShelfPosition (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetShelfPosition (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("8533772b-1c43-4fdd-9f0e-bc92f15862c9"))
IRoughs3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRough3D))
    IRough3DPtr Rough3D[];

    //
    // Wrapper methods for error-handling
    //

    IRough3DPtr GetRough3D (
        const _variant_t & Index );
    IRough3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rough3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRough3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRough3D * * Value ) = 0;
};

struct __declspec(uuid("d5b737f6-fd3d-49f8-b3d8-c8475e5e3d3a"))
IBase3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    ksObj3dTypeEnum BasePlane;
    __declspec(property(get=GetPositionObject,put=PutPositionObject))
    IModelObjectPtr PositionObject;
    __declspec(property(get=GetBaseObject))
    IModelObjectPtr BaseObject;
    __declspec(property(get=GetDrawType,put=PutDrawType))
    VARIANT_BOOL DrawType;
    __declspec(property(get=GetAutoSorted,put=PutAutoSorted))
    VARIANT_BOOL AutoSorted;
    __declspec(property(get=GetText))
    ITextPtr Text;

    //
    // Wrapper methods for error-handling
    //

    ksObj3dTypeEnum GetBasePlane ( );
    void PutBasePlane (
        ksObj3dTypeEnum Val );
    IModelObjectPtr GetPositionObject ( );
    void PutPositionObject (
        struct IModelObject * Val );
    VARIANT_BOOL GetPosition (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPosition (
        double X,
        double Y,
        double Z );
    IModelObjectPtr GetBaseObject ( );
    VARIANT_BOOL GetDrawType ( );
    void PutDrawType (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAutoSorted ( );
    void PutAutoSorted (
        VARIANT_BOOL Result );
    ITextPtr GetText ( );
    VARIANT_BOOL GetBranchBeginPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetBranchBeginPoint (
        double X,
        double Y,
        double Z,
        struct IModelObject * Object );
    VARIANT_BOOL GetBranchEndPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetBranchEndPoint (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ ksObj3dTypeEnum * Val ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ ksObj3dTypeEnum Val ) = 0;
      virtual HRESULT __stdcall get_PositionObject (
        /*[out,retval]*/ struct IModelObject * * Val ) = 0;
      virtual HRESULT __stdcall put_PositionObject (
        /*[in]*/ struct IModelObject * Val ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IModelObject * * Object1 ) = 0;
      virtual HRESULT __stdcall get_DrawType (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_DrawType (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AutoSorted (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSorted (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetBranchBeginPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBranchBeginPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBranchEndPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBranchEndPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("8bc582b3-1f82-4d19-af95-24cbad412e52"))
IBases3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBase3D))
    IBase3DPtr Base3D[];

    //
    // Wrapper methods for error-handling
    //

    IBase3DPtr GetBase3D (
        const _variant_t & Index );
    IBase3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Base3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBase3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBase3D * * Value ) = 0;
};

struct __declspec(uuid("9cf700cf-72db-44eb-a191-3814a3cc21bd"))
ITolerance3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    ksObj3dTypeEnum BasePlane;
    __declspec(property(get=GetPositionObject,put=PutPositionObject))
    IModelObjectPtr PositionObject;
    __declspec(property(get=GetArrowType,put=PutArrowType))
    VARIANT_BOOL ArrowType[];
    __declspec(property(get=GetToleranceArrowType,put=PutToleranceArrowType))
    enum ksToleranceArrowType ToleranceArrowType[];
    __declspec(property(get=GetBranchPos,put=PutBranchPos))
    enum ksTablePointEnum BranchPos[];

    //
    // Wrapper methods for error-handling
    //

    ksObj3dTypeEnum GetBasePlane ( );
    void PutBasePlane (
        ksObj3dTypeEnum Val );
    IModelObjectPtr GetPositionObject ( );
    void PutPositionObject (
        struct IModelObject * Val );
    VARIANT_BOOL GetPosition (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPosition (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetArrowType (
        long Index );
    void PutArrowType (
        long Index,
        VARIANT_BOOL Result );
    enum ksToleranceArrowType GetToleranceArrowType (
        long Index );
    void PutToleranceArrowType (
        long Index,
        enum ksToleranceArrowType Result );
    enum ksTablePointEnum GetBranchPos (
        long Index );
    void PutBranchPos (
        long Index,
        enum ksTablePointEnum Result );
    VARIANT_BOOL FormatTolerance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ ksObj3dTypeEnum * Val ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ ksObj3dTypeEnum Val ) = 0;
      virtual HRESULT __stdcall get_PositionObject (
        /*[out,retval]*/ struct IModelObject * * Val ) = 0;
      virtual HRESULT __stdcall put_PositionObject (
        /*[in]*/ struct IModelObject * Val ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ArrowType (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ToleranceArrowType (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksToleranceArrowType * Result ) = 0;
      virtual HRESULT __stdcall put_ToleranceArrowType (
        /*[in]*/ long Index,
        /*[in]*/ enum ksToleranceArrowType Result ) = 0;
      virtual HRESULT __stdcall get_BranchPos (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksTablePointEnum * Result ) = 0;
      virtual HRESULT __stdcall put_BranchPos (
        /*[in]*/ long Index,
        /*[in]*/ enum ksTablePointEnum Result ) = 0;
      virtual HRESULT __stdcall raw_FormatTolerance (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("82adda0c-b8de-4336-a5cc-b36504a80e2d"))
ITolerances3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetTolerance3D))
    ITolerance3DPtr Tolerance3D[];

    //
    // Wrapper methods for error-handling
    //

    ITolerance3DPtr GetTolerance3D (
        const _variant_t & Index );
    ITolerance3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tolerance3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ITolerance3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ITolerance3D * * Value ) = 0;
};

struct __declspec(uuid("6090c8d4-4eb0-402a-8e25-29c1fae85f11"))
IThreads : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetThread))
    IThreadPtr Thread[];

    //
    // Wrapper methods for error-handling
    //

    IThreadPtr GetThread (
        const _variant_t & Index );
    IThreadPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Thread (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IThread * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IThread * * Result ) = 0;
};

struct __declspec(uuid("fae2bd57-c091-4009-a7d3-a55371961966"))
IArcDimension3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObject,put=PutObject))
    IModelObjectPtr Object;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetObject ( );
    void PutObject (
        struct IModelObject * Object );
    double GetLength ( );
    void PutLength (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ struct IModelObject * * Object ) = 0;
      virtual HRESULT __stdcall put_Object (
        /*[in]*/ struct IModelObject * Object ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("fa666f0b-f646-468b-a1ec-0cee38103a8b"))
IArcDimensions3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetArcDimension3D))
    IArcDimension3DPtr ArcDimension3D[];

    //
    // Wrapper methods for error-handling
    //

    IArcDimension3DPtr GetArcDimension3D (
        const _variant_t & Index );
    IArcDimension3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArcDimension3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IArcDimension3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IArcDimension3D * * Result ) = 0;
};

struct __declspec(uuid("1ae2cbf3-da20-4888-8be7-e1165621a21a"))
IModelText : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject;
    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetPointParameterType,put=PutPointParameterType))
    enum ksPoint3DTypeEnum PointParameterType;
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHFormat,put=PutHFormat))
    enum ksTextHorizontalFormatEnum HFormat;
    __declspec(property(get=GetVFormat,put=PutVFormat))
    VARIANT_BOOL VFormat;
    __declspec(property(get=GetAllocation,put=PutAllocation))
    enum ksAllocationEnum Allocation;
    __declspec(property(get=GetTextObjects,put=PutTextObjects))
    _variant_t TextObjects;
    __declspec(property(get=GetText))
    ITextPtr Text;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        double X,
        double Y,
        double Z );
    void PutAssociationObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject ( );
    void PutPlane (
        struct IModelObject * PVal );
    IModelObjectPtr GetPlane ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutPointParameterType (
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointParameterType ( );
    IKompasAPIObjectPtr GetPointParameters ( );
    double GetHeight ( );
    void PutHeight (
        double Result );
    double GetWidth ( );
    void PutWidth (
        double Result );
    enum ksTextHorizontalFormatEnum GetHFormat ( );
    void PutHFormat (
        enum ksTextHorizontalFormatEnum Result );
    VARIANT_BOOL GetVFormat ( );
    void PutVFormat (
        VARIANT_BOOL Result );
    enum ksAllocationEnum GetAllocation ( );
    void PutAllocation (
        enum ksAllocationEnum Result );
    void PutTextObjects (
        const _variant_t & Result );
    _variant_t GetTextObjects ( );
    ITextPtr GetText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_PointParameterType (
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameterType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_HFormat (
        /*[out,retval]*/ enum ksTextHorizontalFormatEnum * Result ) = 0;
      virtual HRESULT __stdcall put_HFormat (
        /*[in]*/ enum ksTextHorizontalFormatEnum Result ) = 0;
      virtual HRESULT __stdcall get_VFormat (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_VFormat (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Allocation (
        /*[out,retval]*/ enum ksAllocationEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Allocation (
        /*[in]*/ enum ksAllocationEnum Result ) = 0;
      virtual HRESULT __stdcall put_TextObjects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_TextObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
};

struct __declspec(uuid("c18c14c9-bcb8-47a0-9506-5b033ed0ac4c"))
IModelTexts : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetModelText))
    IModelTextPtr ModelText[];

    //
    // Wrapper methods for error-handling
    //

    IModelTextPtr GetModelText (
        const _variant_t & Index );
    IModelTextPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelText (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IModelText * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IModelText * * Value ) = 0;
};

struct __declspec(uuid("be1c5e22-0676-45d0-8081-c1cf7157cb5c"))
IModelTable : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject;
    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetPointParameterType,put=PutPointParameterType))
    enum ksPoint3DTypeEnum PointParameterType;
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters;
    __declspec(property(get=GetFixedCellsSize,put=PutFixedCellsSize))
    VARIANT_BOOL FixedCellsSize;
    __declspec(property(get=GetFixedRowCount,put=PutFixedRowCount))
    VARIANT_BOOL FixedRowCount;
    __declspec(property(get=GetFixedColumnCount,put=PutFixedColumnCount))
    VARIANT_BOOL FixedColumnCount;
    __declspec(property(get=GetTable))
    ITablePtr Table;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        double X,
        double Y,
        double Z );
    void PutAssociationObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject ( );
    void PutPlane (
        struct IModelObject * PVal );
    IModelObjectPtr GetPlane ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutPointParameterType (
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointParameterType ( );
    IKompasAPIObjectPtr GetPointParameters ( );
    void PutFixedCellsSize (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedCellsSize ( );
    void PutFixedRowCount (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedRowCount ( );
    void PutFixedColumnCount (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedColumnCount ( );
    VARIANT_BOOL Save (
        _bstr_t FileName );
    ITablePtr GetTable ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_PointParameterType (
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameterType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall put_FixedCellsSize (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedCellsSize (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedRowCount (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedRowCount (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedColumnCount (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedColumnCount (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct ITable * * Result ) = 0;
};

struct __declspec(uuid("fec86293-7ab2-4bbb-8baf-53ec5d033afe"))
IModelTables : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetModelTable))
    IModelTablePtr ModelTable[];

    //
    // Wrapper methods for error-handling
    //

    IModelTablePtr GetModelTable (
        const _variant_t & Index );
    IModelTablePtr Add (
        long RowsCount,
        long ColumnsCount,
        double RowHeigh,
        double ColumnsWidth,
        enum ksTableTileLayoutEnum TitlePos );
    IModelTablePtr Load (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelTable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IModelTable * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long RowsCount,
        /*[in]*/ long ColumnsCount,
        /*[in]*/ double RowHeigh,
        /*[in]*/ double ColumnsWidth,
        /*[in]*/ enum ksTableTileLayoutEnum TitlePos,
        /*[out,retval]*/ struct IModelTable * * Value ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct IModelTable * * PVal ) = 0;
};

struct __declspec(uuid("d695d345-7054-4bbd-8d36-8e1f5aedc5ed"))
ISymbols3DContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLineDimensions3D))
    ILineDimensions3DPtr LineDimensions3D;
    __declspec(property(get=GetRadialDimensions3D))
    IRadialDimensions3DPtr RadialDimensions3D;
    __declspec(property(get=GetDiametralDimensions3D))
    IDiametralDimensions3DPtr DiametralDimensions3D;
    __declspec(property(get=GetAngleDimensions3D))
    IAngleDimensions3DPtr AngleDimensions3D;
    __declspec(property(get=GetLeaders3D))
    ILeaders3DPtr Leaders3D;
    __declspec(property(get=GetRoughs3D))
    IRoughs3DPtr Roughs3D;
    __declspec(property(get=GetBases3D))
    IBases3DPtr Bases3D;
    __declspec(property(get=GetTolerances3D))
    ITolerances3DPtr Tolerances3D;
    __declspec(property(get=GetThreads))
    IThreadsPtr Threads;
    __declspec(property(get=GetArcDimensions3D))
    IArcDimensions3DPtr ArcDimensions3D;
    __declspec(property(get=GetModelTexts))
    IModelTextsPtr ModelTexts;
    __declspec(property(get=GetModelTables))
    IModelTablesPtr ModelTables;

    //
    // Wrapper methods for error-handling
    //

    ILineDimensions3DPtr GetLineDimensions3D ( );
    IRadialDimensions3DPtr GetRadialDimensions3D ( );
    IDiametralDimensions3DPtr GetDiametralDimensions3D ( );
    IAngleDimensions3DPtr GetAngleDimensions3D ( );
    ILeaders3DPtr GetLeaders3D ( );
    IRoughs3DPtr GetRoughs3D ( );
    IBases3DPtr GetBases3D ( );
    ITolerances3DPtr GetTolerances3D ( );
    VARIANT_BOOL CreateGenerativeDimensions (
        const _variant_t & Objects,
        VARIANT_BOOL CreateZeroDimensions );
    IVariable7Ptr GetDimensionVariable (
        struct IModelObject * Dimension );
    IThreadsPtr GetThreads ( );
    IArcDimensions3DPtr GetArcDimensions3D ( );
    IModelTextsPtr GetModelTexts ( );
    IModelTablesPtr GetModelTables ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineDimensions3D (
        /*[out,retval]*/ struct ILineDimensions3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_RadialDimensions3D (
        /*[out,retval]*/ struct IRadialDimensions3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_DiametralDimensions3D (
        /*[out,retval]*/ struct IDiametralDimensions3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_AngleDimensions3D (
        /*[out,retval]*/ struct IAngleDimensions3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Leaders3D (
        /*[out,retval]*/ struct ILeaders3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Roughs3D (
        /*[out,retval]*/ struct IRoughs3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Bases3D (
        /*[out,retval]*/ struct IBases3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Tolerances3D (
        /*[out,retval]*/ struct ITolerances3D * * PVal ) = 0;
      virtual HRESULT __stdcall raw_CreateGenerativeDimensions (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ VARIANT_BOOL CreateZeroDimensions,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDimensionVariable (
        /*[in]*/ struct IModelObject * Dimension,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_Threads (
        /*[out,retval]*/ struct IThreads * * PVal ) = 0;
      virtual HRESULT __stdcall get_ArcDimensions3D (
        /*[out,retval]*/ struct IArcDimensions3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_ModelTexts (
        /*[out,retval]*/ struct IModelTexts * * PVal ) = 0;
      virtual HRESULT __stdcall get_ModelTables (
        /*[out,retval]*/ struct IModelTables * * PVal ) = 0;
};

struct __declspec(uuid("f38e986b-9cc0-4492-b850-180d3a6af713"))
ILineDimension3D : IBaseLineDimension3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetPlane ( );
    void PutPlane (
        struct IModelObject * Plane );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * Plane ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * Plane ) = 0;
};

struct __declspec(uuid("2ad2e4b4-b870-437a-8d57-5807729fcb05"))
ICurveVertexParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksLineBuildingType BuildingType;
    __declspec(property(get=GetBuildingObject,put=PutBuildingObject))
    IModelObjectPtr BuildingObject;
    __declspec(property(get=GetAssociationVertex,put=PutAssociationVertex))
    IModelObjectPtr AssociationVertex;
    __declspec(property(get=GetVertex))
    IModelObjectPtr Vertex;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum ksPoint3DTypeEnum PointType;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;

    //
    // Wrapper methods for error-handling
    //

    void PutBuildingType (
        enum ksLineBuildingType Result );
    enum ksLineBuildingType GetBuildingType ( );
    void PutBuildingObject (
        struct IModelObject * Result );
    IModelObjectPtr GetBuildingObject ( );
    void PutAssociationVertex (
        struct IModelObject * Result );
    IModelObjectPtr GetAssociationVertex ( );
    IModelObjectPtr GetVertex ( );
    int GetIndex ( );
    IKompasAPIObjectPtr GetPointParameters ( );
    void PutPointType (
        enum ksPoint3DTypeEnum Result );
    enum ksPoint3DTypeEnum GetPointType ( );
    VARIANT_BOOL GetParamVertex (
        double * X,
        double * Y,
        double * Z,
        double * Value );
    VARIANT_BOOL SetParamVertex (
        double X,
        double Y,
        double Z,
        double Value );
    VARIANT_BOOL SetParamByVertex (
        struct IModelObject * Obj,
        double Value );
    VARIANT_BOOL GetParamByDistance (
        double * Distance,
        double * Value );
    VARIANT_BOOL SetParamByDistance (
        double Distance,
        double Value );
    IVector3DPtr GetVector3D ( );
    VARIANT_BOOL Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksLineBuildingType Result ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksLineBuildingType * Result ) = 0;
      virtual HRESULT __stdcall put_BuildingObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_BuildingObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationVertex (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_AssociationVertex (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Result ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum ksPoint3DTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall raw_GetParamVertex (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * Value,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetParamVertex (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetParamByVertex (
        /*[in]*/ struct IModelObject * Obj,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetParamByDistance (
        /*[out]*/ double * Distance,
        /*[out]*/ double * Value,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetParamByDistance (
        /*[in]*/ double Distance,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("4d0940a0-6a4a-4ce8-a08a-ea0a4ae91942"))
ISpline3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCenterPointAssociationObject,put=PutCenterPointAssociationObject))
    IModelObjectPtr CenterPointAssociationObject[];
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetSplineOnPoles,put=PutSplineOnPoles))
    VARIANT_BOOL SplineOnPoles;
    __declspec(property(get=GetSplineOrder,put=PutSplineOrder))
    long SplineOrder;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetVertexParams))
    ICurveVertexParamPtr VertexParams[];
    __declspec(property(get=GetVertexParamsArray))
    _variant_t VertexParamsArray;
    __declspec(property(get=GetKnots,put=PutKnots))
    _variant_t Knots;
    __declspec(property(get=GetSplineTransitionType,put=PutSplineTransitionType))
    enum ksSplineTransitionTypeEnum SplineTransitionType[];
    __declspec(property(get=GetConstraintObject,put=PutConstraintObject))
    IModelObjectPtr ConstraintObject[];
    __declspec(property(get=GetConstraintLimitObject,put=PutConstraintLimitObject))
    IModelObjectPtr ConstraintLimitObject[];
    __declspec(property(get=GetConstraintType,put=PutConstraintType))
    enum ksNurbsByPointsPointConstraintsEnum ConstraintType[];
    __declspec(property(get=GetConstraintReverse,put=PutConstraintReverse))
    VARIANT_BOOL ConstraintReverse[];
    __declspec(property(get=GetTangentVectorLenght,put=PutTangentVectorLenght))
    double TangentVectorLenght[];
    __declspec(property(get=GetCurvatureRadius,put=PutCurvatureRadius))
    double CurvatureRadius[];
    __declspec(property(get=GetCurvature,put=PutCurvature))
    double Curvature[];
    __declspec(property(get=GetVectorDirectionObject,put=PutVectorDirectionObject))
    IModelObjectPtr VectorDirectionObject[][];
    __declspec(property(get=GetVectorOrientation,put=PutVectorOrientation))
    VARIANT_BOOL VectorOrientation[][];
    __declspec(property(get=GetDirectionVector))
    IVector3DPtr DirectionVector[][];
    __declspec(property(get=GetCenterPointParams))
    IKompasAPIObjectPtr CenterPointParams[];
    __declspec(property(get=GetCenterPointType,put=PutCenterPointType))
    enum ksPoint3DTypeEnum CenterPointType[];

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    void PutSplineOnPoles (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSplineOnPoles ( );
    void PutSplineOrder (
        long Result );
    long GetSplineOrder ( );
    long GetVertexCount ( );
    ICurveVertexParamPtr GetVertexParams (
        long Index );
    ICurveVertexParamPtr AddVertex (
        long Index );
    VARIANT_BOOL DeleteVertex (
        long Index );
    VARIANT_BOOL Flush ( );
    VARIANT_BOOL ReadFromFile (
        _bstr_t FileName );
    VARIANT_BOOL WriteToFile (
        _bstr_t FileName );
    _variant_t GetVertexParamsArray ( );
    VARIANT_BOOL GetVertexCoordinatesArray (
        VARIANT * Coordinates,
        VARIANT * Weights );
    void PutKnots (
        const _variant_t & PVal );
    _variant_t GetKnots ( );
    void PutSplineTransitionType (
        long PointIndex,
        enum ksSplineTransitionTypeEnum PVal );
    enum ksSplineTransitionTypeEnum GetSplineTransitionType (
        long PointIndex );
    void PutConstraintObject (
        long PointIndex,
        struct IModelObject * PVal );
    IModelObjectPtr GetConstraintObject (
        long PointIndex );
    void PutConstraintLimitObject (
        long PointIndex,
        struct IModelObject * PVal );
    IModelObjectPtr GetConstraintLimitObject (
        long PointIndex );
    void PutConstraintType (
        long PointIndex,
        enum ksNurbsByPointsPointConstraintsEnum PVal );
    enum ksNurbsByPointsPointConstraintsEnum GetConstraintType (
        long PointIndex );
    void PutConstraintReverse (
        long PointIndex,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetConstraintReverse (
        long PointIndex );
    void PutTangentVectorLenght (
        long PointIndex,
        double PVal );
    double GetTangentVectorLenght (
        long PointIndex );
    void PutCurvatureRadius (
        long PointIndex,
        double PVal );
    double GetCurvatureRadius (
        long PointIndex );
    void PutCurvature (
        long PointIndex,
        double PVal );
    double GetCurvature (
        long PointIndex );
    VARIANT_BOOL GetVector (
        long PointIndex,
        enum ksTransitionVectorIndexEnum VectorIndex,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetVector (
        long PointIndex,
        enum ksTransitionVectorIndexEnum VectorIndex,
        double X,
        double Y,
        double Z );
    VARIANT_BOOL InvertVector (
        long PointIndex,
        enum ksTransitionVectorIndexEnum VectorIndex );
    void PutVectorDirectionObject (
        long PointIndex,
        enum ksTransitionVectorIndexEnum VectorIndex,
        struct IModelObject * PVal );
    IModelObjectPtr GetVectorDirectionObject (
        long PointIndex,
        enum ksTransitionVectorIndexEnum VectorIndex );
    void PutVectorOrientation (
        long PointIndex,
        enum ksTransitionVectorIndexEnum VectorIndex,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVectorOrientation (
        long PointIndex,
        enum ksTransitionVectorIndexEnum VectorIndex );
    IVector3DPtr GetDirectionVector (
        long PointIndex,
        enum ksTransitionVectorIndexEnum VectorIndex );
    VARIANT_BOOL GetCenterPoint (
        long PointIndex,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetCenterPoint (
        long PointIndex,
        double X,
        double Y,
        double Z );
    IKompasAPIObjectPtr GetCenterPointParams (
        long PointIndex );
    void PutCenterPointType (
        long PointIndex,
        enum ksPoint3DTypeEnum Result );
    enum ksPoint3DTypeEnum GetCenterPointType (
        long PointIndex );
    void PutCenterPointAssociationObject (
        long PointIndex,
        struct IModelObject * PVal );
    IModelObjectPtr GetCenterPointAssociationObject (
        long PointIndex );
    VARIANT_BOOL DeleteCenterPointParams (
        long PointIndex );
    VARIANT_BOOL ClearTangentParameters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_SplineOnPoles (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_SplineOnPoles (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_SplineOrder (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_SplineOrder (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_VertexParams (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICurveVertexParam * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICurveVertexParam * * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteVertex (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Flush (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ReadFromFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_WriteToFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_VertexParamsArray (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_GetVertexCoordinatesArray (
        /*[out]*/ VARIANT * Coordinates,
        /*[out]*/ VARIANT * Weights,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Knots (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Knots (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_SplineTransitionType (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksSplineTransitionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SplineTransitionType (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ enum ksSplineTransitionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintObject (
        /*[in]*/ long PointIndex,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintObject (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintLimitObject (
        /*[in]*/ long PointIndex,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintLimitObject (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintType (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksNurbsByPointsPointConstraintsEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ enum ksNurbsByPointsPointConstraintsEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintReverse (
        /*[in]*/ long PointIndex,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintReverse (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TangentVectorLenght (
        /*[in]*/ long PointIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TangentVectorLenght (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CurvatureRadius (
        /*[in]*/ long PointIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CurvatureRadius (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Curvature (
        /*[in]*/ long PointIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Curvature (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksTransitionVectorIndexEnum VectorIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetVector (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksTransitionVectorIndexEnum VectorIndex,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_InvertVector (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksTransitionVectorIndexEnum VectorIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_VectorDirectionObject (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksTransitionVectorIndexEnum VectorIndex,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_VectorDirectionObject (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksTransitionVectorIndexEnum VectorIndex,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_VectorOrientation (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksTransitionVectorIndexEnum VectorIndex,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_VectorOrientation (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksTransitionVectorIndexEnum VectorIndex,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksTransitionVectorIndexEnum VectorIndex,
        /*[out,retval]*/ struct IVector3D * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[in]*/ long PointIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ long PointIndex,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_CenterPointParams (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall put_CenterPointType (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksPoint3DTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_CenterPointType (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ enum ksPoint3DTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall put_CenterPointAssociationObject (
        /*[in]*/ long PointIndex,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_CenterPointAssociationObject (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteCenterPointParams (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearTangentParameters (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("c4bc0839-932f-4dbc-9a84-5d1fe8927351"))
ISplines3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSpline3D))
    ISpline3DPtr Spline3D[];

    //
    // Wrapper methods for error-handling
    //

    ISpline3DPtr GetSpline3D (
        const _variant_t & Index );
    ISpline3DPtr Add ( );
    _variant_t Convert (
        const _variant_t & Objects );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Spline3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpline3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISpline3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("cc04cbf6-f0d4-456e-903a-c0b0d3551368"))
ILocalCoordinateSystems : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalCoordinateSystem))
    ILocalCoordinateSystemPtr LocalCoordinateSystem[];
    __declspec(property(get=GetCurrent))
    IModelObjectPtr Current;

    //
    // Wrapper methods for error-handling
    //

    ILocalCoordinateSystemPtr GetLocalCoordinateSystem (
        const _variant_t & Index );
    ILocalCoordinateSystemPtr Add ( );
    IModelObjectPtr GetCurrent ( );
    VARIANT_BOOL SetCurrent (
        struct ILocalCoordinateSystem * Object );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocalCoordinateSystem (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILocalCoordinateSystem * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * Result ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCurrent (
        /*[in]*/ struct ILocalCoordinateSystem * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("6ce7843d-9afa-48ff-b444-61cdf036d118"))
IPolyLine : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetVertexVisible,put=PutVertexVisible))
    VARIANT_BOOL VertexVisible;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetEdges))
    _variant_t Edges;
    __declspec(property(get=GetVertexParams))
    ICurveVertexParamPtr VertexParams[];
    __declspec(property(get=GetVertexParamsArray))
    _variant_t VertexParamsArray;
    __declspec(property(get=GetErrorIndexes))
    _variant_t ErrorIndexes;

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    void PutVertexVisible (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetVertexVisible ( );
    long GetVertexCount ( );
    _variant_t GetEdges ( );
    ICurveVertexParamPtr GetVertexParams (
        long Index );
    VARIANT_BOOL ReadFromFile (
        _bstr_t FileName );
    VARIANT_BOOL WriteToFile (
        _bstr_t FileName );
    ICurveVertexParamPtr AddVertex (
        long Index );
    VARIANT_BOOL DeleteVertex (
        long Index );
    VARIANT_BOOL Flush ( );
    _variant_t GetVertexParamsArray ( );
    VARIANT_BOOL GetVertexCoordinatesArray (
        VARIANT * Coordinates,
        VARIANT * Radiuses );
    _variant_t GetErrorIndexes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_VertexVisible (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_VertexVisible (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_VertexParams (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICurveVertexParam * * Result ) = 0;
      virtual HRESULT __stdcall raw_ReadFromFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_WriteToFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICurveVertexParam * * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteVertex (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Flush (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_VertexParamsArray (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_GetVertexCoordinatesArray (
        /*[out]*/ VARIANT * Coordinates,
        /*[out]*/ VARIANT * Radiuses,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ErrorIndexes (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("0cf9b989-29f8-495f-9dda-8c2cad840bb6"))
IPolyLines : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPolyLine))
    IPolyLinePtr PolyLine[];

    //
    // Wrapper methods for error-handling
    //

    IPolyLinePtr GetPolyLine (
        const _variant_t & Index );
    IPolyLinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PolyLine (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPolyLine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IPolyLine * * Result ) = 0;
};

struct __declspec(uuid("39f4fc2c-99e7-411b-9036-9c756a71e211"))
IControlPoint : IPoint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetShowName,put=PutShowName))
    VARIANT_BOOL ShowName;

    //
    // Wrapper methods for error-handling
    //

    void PutShowName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ShowName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("e22e30f6-05ee-4fb5-9eeb-e288234f256a"))
IControlPoints : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetControlPoint))
    IControlPointPtr ControlPoint[];

    //
    // Wrapper methods for error-handling
    //

    IControlPointPtr GetControlPoint (
        const _variant_t & Index );
    IControlPointPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlPoint (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IControlPoint * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IControlPoint * * Result ) = 0;
};

struct __declspec(uuid("bc7ad518-9599-490b-9e2b-9711fd9b8d4c"))
IConjunctivePoint : IPoint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetDirectionObject1))
    IModelObjectPtr DirectionObject1;
    __declspec(property(get=GetDirectionObject2))
    IModelObjectPtr DirectionObject2;
    __declspec(property(get=GetDirection1,put=PutDirection1))
    VARIANT_BOOL Direction1;
    __declspec(property(get=GetDirection2,put=PutDirection2))
    VARIANT_BOOL Direction2;
    __declspec(property(get=GetAxis))
    IModelObjectPtr Axis[];
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D[];
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksConjunctivePointTypeEnum BuildingType;
    __declspec(property(get=GetUseDirection2,put=PutUseDirection2))
    VARIANT_BOOL UseDirection2;
    __declspec(property(get=GetShowName,put=PutShowName))
    VARIANT_BOOL ShowName;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetDirectionObject1 (
        struct IModelObject * NewVal );
    IModelObjectPtr GetDirectionObject1 ( );
    VARIANT_BOOL SetDirectionObject2 (
        struct IModelObject * NewVal );
    IModelObjectPtr GetDirectionObject2 ( );
    VARIANT_BOOL GetDirection1 ( );
    void PutDirection1 (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetDirection2 ( );
    void PutDirection2 (
        VARIANT_BOOL Val );
    IModelObjectPtr GetAxis (
        ksObj3dTypeEnum Val );
    IVector3DPtr GetVector3D (
        VARIANT_BOOL First );
    enum ksConjunctivePointTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksConjunctivePointTypeEnum Val );
    VARIANT_BOOL InitByMatrix3D (
        const _variant_t & mtr );
    VARIANT_BOOL GetVector (
        ksObj3dTypeEnum Axis,
        double * X,
        double * Y,
        double * Z );
    void PutUseDirection2 (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetUseDirection2 ( );
    void PutShowName (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShowName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetDirectionObject1 (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_DirectionObject1 (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_SetDirectionObject2 (
        /*[in]*/ struct IModelObject * NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_DirectionObject2 (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Direction1 (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_Direction1 (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_Direction2 (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_Direction2 (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[in]*/ ksObj3dTypeEnum Val,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IVector3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksConjunctivePointTypeEnum * Val ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksConjunctivePointTypeEnum Val ) = 0;
      virtual HRESULT __stdcall raw_InitByMatrix3D (
        /*[in]*/ VARIANT mtr,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_UseDirection2 (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_UseDirection2 (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ShowName (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShowName (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("4df343a0-8744-429d-a605-0eeabb7b5f23"))
IConjunctivePoints : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetConjunctivePoint))
    IConjunctivePointPtr ConjunctivePoint[];

    //
    // Wrapper methods for error-handling
    //

    IConjunctivePointPtr GetConjunctivePoint (
        const _variant_t & Index );
    IConjunctivePointPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConjunctivePoint (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IConjunctivePoint * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IConjunctivePoint * * Result ) = 0;
};

struct __declspec(uuid("758420a0-becb-4fda-bdde-1f398b41117c"))
ISurfacesIntersectionCurve : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectsCount))
    long ObjectsCount[];
    __declspec(property(get=GetAutoCheck,put=PutAutoCheck))
    VARIANT_BOOL AutoCheck;
    __declspec(property(get=GetEdgesChecks,put=PutEdgesChecks))
    _variant_t EdgesChecks;
    __declspec(property(get=GetEdgesArraysCount))
    long EdgesArraysCount;
    __declspec(property(get=GetEdges))
    _variant_t Edges[];
    __declspec(property(get=GetEdgesCheck,put=PutEdgesCheck))
    VARIANT_BOOL EdgesCheck[];
    __declspec(property(get=GetEdgesChecksCount))
    long EdgesChecksCount;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetObjects (
        const _variant_t & ObjectsArray1,
        const _variant_t & ObjectsArray2 );
    VARIANT_BOOL GetObjects (
        VARIANT * ObjectsArray1,
        VARIANT * ObjectsArray2 );
    VARIANT_BOOL AddObjects (
        VARIANT_BOOL ForArray1,
        const _variant_t & Objects );
    VARIANT_BOOL Clear (
        VARIANT_BOOL ForArray1 );
    long GetObjectsCount (
        VARIANT_BOOL ForArray1 );
    IModelObjectPtr GetObject (
        VARIANT_BOOL ForArray1,
        long Index );
    VARIANT_BOOL GetAutoCheck ( );
    void PutAutoCheck (
        VARIANT_BOOL CheckValue );
    _variant_t GetEdgesChecks ( );
    void PutEdgesChecks (
        const _variant_t & Checks );
    long GetEdgesArraysCount ( );
    _variant_t GetEdges (
        long Index );
    VARIANT_BOOL GetEdgesCheck (
        long ContourIndex );
    void PutEdgesCheck (
        long ContourIndex,
        VARIANT_BOOL CheckValue );
    long GetEdgesChecksCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetObjects (
        /*[in]*/ VARIANT ObjectsArray1,
        /*[in]*/ VARIANT ObjectsArray2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetObjects (
        /*[out]*/ VARIANT * ObjectsArray1,
        /*[out]*/ VARIANT * ObjectsArray2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddObjects (
        /*[in]*/ VARIANT_BOOL ForArray1,
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[in]*/ VARIANT_BOOL ForArray1,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ObjectsCount (
        /*[in]*/ VARIANT_BOOL ForArray1,
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetObject (
        /*[in]*/ VARIANT_BOOL ForArray1,
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * Object ) = 0;
      virtual HRESULT __stdcall get_AutoCheck (
        /*[out,retval]*/ VARIANT_BOOL * CheckValue ) = 0;
      virtual HRESULT __stdcall put_AutoCheck (
        /*[in]*/ VARIANT_BOOL CheckValue ) = 0;
      virtual HRESULT __stdcall get_EdgesChecks (
        /*[out,retval]*/ VARIANT * Checks ) = 0;
      virtual HRESULT __stdcall put_EdgesChecks (
        /*[in]*/ VARIANT Checks ) = 0;
      virtual HRESULT __stdcall get_EdgesArraysCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Edges ) = 0;
      virtual HRESULT __stdcall get_EdgesCheck (
        /*[in]*/ long ContourIndex,
        /*[out,retval]*/ VARIANT_BOOL * CheckValue ) = 0;
      virtual HRESULT __stdcall put_EdgesCheck (
        /*[in]*/ long ContourIndex,
        /*[in]*/ VARIANT_BOOL CheckValue ) = 0;
      virtual HRESULT __stdcall get_EdgesChecksCount (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("453e0e34-4d2d-47b2-8e95-eb05c731961d"))
ISurfacesIntersectionCurves : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSurfacesIntersectionCurve))
    ISurfacesIntersectionCurvePtr SurfacesIntersectionCurve[];

    //
    // Wrapper methods for error-handling
    //

    ISurfacesIntersectionCurvePtr GetSurfacesIntersectionCurve (
        const _variant_t & Index );
    ISurfacesIntersectionCurvePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SurfacesIntersectionCurve (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISurfacesIntersectionCurve * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISurfacesIntersectionCurve * * Result ) = 0;
};

struct __declspec(uuid("c25ddbf4-3cc1-467d-b996-e30ed4d529b6"))
IEquidistant3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetEdges,put=PutEdges))
    _variant_t Edges;
    __declspec(property(get=GetOnFace,put=PutOnFace))
    VARIANT_BOOL OnFace;
    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IModelObjectPtr BaseObject;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetCutMode,put=PutCutMode))
    enum ksEquidistant3DCutModeEnum CutMode;
    __declspec(property(get=GetKeepRadius,put=PutKeepRadius))
    VARIANT_BOOL KeepRadius;
    __declspec(property(get=GetDirFromBegin,put=PutDirFromBegin))
    VARIANT_BOOL DirFromBegin;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;
    __declspec(property(get=GetEdgesCount))
    long EdgesCount;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEdges ( );
    void PutEdges (
        const _variant_t & PVal );
    void PutOnFace (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOnFace ( );
    IModelObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IModelObject * Result );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutDistance (
        double PVal );
    double GetDistance ( );
    void PutCutMode (
        enum ksEquidistant3DCutModeEnum PVal );
    enum ksEquidistant3DCutModeEnum GetCutMode ( );
    void PutKeepRadius (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetKeepRadius ( );
    void PutDirFromBegin (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirFromBegin ( );
    IVector3DPtr GetVector3D ( );
    VARIANT_BOOL AddEdge (
        struct IModelObject * Object );
    VARIANT_BOOL RemoveEdge (
        long Index );
    long GetEdgesCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Edges (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall put_OnFace (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_OnFace (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CutMode (
        /*[in]*/ enum ksEquidistant3DCutModeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CutMode (
        /*[out,retval]*/ enum ksEquidistant3DCutModeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_KeepRadius (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_KeepRadius (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DirFromBegin (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DirFromBegin (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddEdge (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveEdge (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EdgesCount (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("8b94f332-eefd-4610-9c55-20a1f7336122"))
IEquidistants3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetEquidistant3D))
    IEquidistant3DPtr Equidistant3D[];

    //
    // Wrapper methods for error-handling
    //

    IEquidistant3DPtr GetEquidistant3D (
        const _variant_t & Index );
    IEquidistant3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Equidistant3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IEquidistant3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IEquidistant3D * * Result ) = 0;
};

struct __declspec(uuid("f86b25dd-55a8-40f7-acc4-4795fcf7c87c"))
ITrimmedCurve : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurve,put=PutCurve))
    IModelObjectPtr Curve;
    __declspec(property(get=GetCutObject1,put=PutCutObject1))
    IModelObjectPtr CutObject1;
    __declspec(property(get=GetCutObject2,put=PutCutObject2))
    IModelObjectPtr CutObject2;
    __declspec(property(get=GetUseTwoCutObjecs,put=PutUseTwoCutObjecs))
    VARIANT_BOOL UseTwoCutObjecs;
    __declspec(property(get=GetSense,put=PutSense))
    VARIANT_BOOL Sense;
    __declspec(property(get=GetBeginParameter,put=PutBeginParameter))
    double BeginParameter;
    __declspec(property(get=GetEndParameter,put=PutEndParameter))
    double EndParameter;

    //
    // Wrapper methods for error-handling
    //

    void PutCurve (
        struct IModelObject * PVal );
    IModelObjectPtr GetCurve ( );
    void PutCutObject1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetCutObject1 ( );
    void PutCutObject2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetCutObject2 ( );
    void PutUseTwoCutObjecs (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetUseTwoCutObjecs ( );
    void PutSense (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSense ( );
    void PutBeginParameter (
        double Val );
    double GetBeginParameter ( );
    void PutEndParameter (
        double Val );
    double GetEndParameter ( );
    VARIANT_BOOL GetIntersectParameters (
        VARIANT * CutPoints1,
        VARIANT * CutPoints2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curve (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Curve (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_CutObject1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_CutObject1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_CutObject2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_CutObject2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_UseTwoCutObjecs (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_UseTwoCutObjecs (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Sense (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Sense (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_BeginParameter (
        /*[in]*/ double Val ) = 0;
      virtual HRESULT __stdcall get_BeginParameter (
        /*[out,retval]*/ double * Val ) = 0;
      virtual HRESULT __stdcall put_EndParameter (
        /*[in]*/ double Val ) = 0;
      virtual HRESULT __stdcall get_EndParameter (
        /*[out,retval]*/ double * Val ) = 0;
      virtual HRESULT __stdcall raw_GetIntersectParameters (
        /*[out]*/ VARIANT * CutPoints1,
        /*[out]*/ VARIANT * CutPoints2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e0916a32-60a7-4786-859f-c4b08402cc36"))
ITrimmedCurves : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetTrimmedCurve))
    ITrimmedCurvePtr TrimmedCurve[];

    //
    // Wrapper methods for error-handling
    //

    ITrimmedCurvePtr GetTrimmedCurve (
        const _variant_t & Index );
    ITrimmedCurvePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrimmedCurve (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ITrimmedCurve * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ITrimmedCurve * * Result ) = 0;
};

struct __declspec(uuid("c3bbe1b9-976c-45ef-805f-dda2ba801567"))
IConnectCurve : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurve1,put=PutCurve1))
    IModelObjectPtr Curve1;
    __declspec(property(get=GetCurve2,put=PutCurve2))
    IModelObjectPtr Curve2;
    __declspec(property(get=GetCurve1ConnectType,put=PutCurve1ConnectType))
    enum ksConnectTypeEnum Curve1ConnectType;
    __declspec(property(get=GetCurve2ConnectType,put=PutCurve2ConnectType))
    enum ksConnectTypeEnum Curve2ConnectType;
    __declspec(property(get=GetCurve1ConnectVertex,put=PutCurve1ConnectVertex))
    VARIANT_BOOL Curve1ConnectVertex;
    __declspec(property(get=GetCurve2ConnectVertex,put=PutCurve2ConnectVertex))
    VARIANT_BOOL Curve2ConnectVertex;
    __declspec(property(get=GetTension,put=PutTension))
    double Tension;

    //
    // Wrapper methods for error-handling
    //

    void PutCurve1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetCurve1 ( );
    void PutCurve2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetCurve2 ( );
    void PutCurve1ConnectType (
        enum ksConnectTypeEnum PVal );
    enum ksConnectTypeEnum GetCurve1ConnectType ( );
    void PutCurve2ConnectType (
        enum ksConnectTypeEnum PVal );
    enum ksConnectTypeEnum GetCurve2ConnectType ( );
    void PutCurve1ConnectVertex (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetCurve1ConnectVertex ( );
    void PutCurve2ConnectVertex (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetCurve2ConnectVertex ( );
    void PutTension (
        double Result );
    double GetTension ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curve1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Curve1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Curve2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Curve2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Curve1ConnectType (
        /*[in]*/ enum ksConnectTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Curve1ConnectType (
        /*[out,retval]*/ enum ksConnectTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Curve2ConnectType (
        /*[in]*/ enum ksConnectTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Curve2ConnectType (
        /*[out,retval]*/ enum ksConnectTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Curve1ConnectVertex (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Curve1ConnectVertex (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Curve2ConnectVertex (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Curve2ConnectVertex (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Tension (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Tension (
        /*[out,retval]*/ double * Result ) = 0;
};

struct __declspec(uuid("2e869cee-5432-48c8-b750-5dac8b6094d6"))
IConnectCurves : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetConnectCurve))
    IConnectCurvePtr ConnectCurve[];

    //
    // Wrapper methods for error-handling
    //

    IConnectCurvePtr GetConnectCurve (
        const _variant_t & Index );
    IConnectCurvePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConnectCurve (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IConnectCurve * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IConnectCurve * * Result ) = 0;
};

struct __declspec(uuid("962810e4-0c48-4886-8b80-aea166b1952b"))
IFilletCurve : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurve1,put=PutCurve1))
    IModelObjectPtr Curve1;
    __declspec(property(get=GetCurve2,put=PutCurve2))
    IModelObjectPtr Curve2;
    __declspec(property(get=GetTrimCurve1,put=PutTrimCurve1))
    VARIANT_BOOL TrimCurve1;
    __declspec(property(get=GetTrimCurve2,put=PutTrimCurve2))
    VARIANT_BOOL TrimCurve2;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetOnSurface,put=PutOnSurface))
    VARIANT_BOOL OnSurface;

    //
    // Wrapper methods for error-handling
    //

    void PutCurve1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetCurve1 ( );
    void PutCurve2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetCurve2 ( );
    void PutTrimCurve1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTrimCurve1 ( );
    void PutTrimCurve2 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTrimCurve2 ( );
    VARIANT_BOOL GetDirection ( );
    void PutDirection (
        VARIANT_BOOL Val );
    void PutRadius (
        double Result );
    double GetRadius ( );
    VARIANT_BOOL GetCurve1CutPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetCurve1CutPoint (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetCurve2CutPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetCurve2CutPoint (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetOnSurface ( );
    void PutOnSurface (
        VARIANT_BOOL Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curve1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Curve1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Curve2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Curve2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_TrimCurve1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TrimCurve1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TrimCurve2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TrimCurve2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCurve1CutPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCurve1CutPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCurve2CutPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCurve2CutPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_OnSurface (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_OnSurface (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
};

struct __declspec(uuid("e530740c-ab81-4daa-afb2-18e90121c8dc"))
IFilletCurves : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetFilletCurve))
    IFilletCurvePtr FilletCurve[];

    //
    // Wrapper methods for error-handling
    //

    IFilletCurvePtr GetFilletCurve (
        const _variant_t & Index );
    IFilletCurvePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilletCurve (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IFilletCurve * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IFilletCurve * * Result ) = 0;
};

struct __declspec(uuid("79cc225f-c4f9-4721-9fe8-8af3aa887523"))
IArc3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksArc3DBuildingTypeEnum BuildingType;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject[];
    __declspec(property(get=GetBuildingObject,put=PutBuildingObject))
    IModelObjectPtr BuildingObject;
    __declspec(property(get=GetBuildingVectorParameters))
    IVector3DPtr BuildingVectorParameters;
    __declspec(property(get=GetDirectionPointIndex,put=PutDirectionPointIndex))
    enum ksArc3DParameterEnum DirectionPointIndex;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum ksPoint3DTypeEnum PointType[];
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters[];

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    void PutDirection (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetDirection ( );
    void PutBuildingType (
        enum ksArc3DBuildingTypeEnum Result );
    enum ksArc3DBuildingTypeEnum GetBuildingType ( );
    void PutRadius (
        double Result );
    double GetRadius ( );
    void PutAngle1 (
        double Result );
    double GetAngle1 ( );
    void PutAngle2 (
        double Result );
    double GetAngle2 ( );
    VARIANT_BOOL GetPoint (
        enum ksArc3DParameterEnum Index,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        enum ksArc3DParameterEnum Index,
        double X,
        double Y,
        double Z );
    void PutAssociationObject (
        enum ksArc3DParameterEnum Index,
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject (
        enum ksArc3DParameterEnum Index );
    void PutBuildingObject (
        struct IModelObject * Result );
    IModelObjectPtr GetBuildingObject ( );
    IVector3DPtr GetBuildingVectorParameters ( );
    void PutDirectionPointIndex (
        enum ksArc3DParameterEnum Index );
    enum ksArc3DParameterEnum GetDirectionPointIndex ( );
    void PutPointType (
        enum ksArc3DParameterEnum Index,
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointType (
        enum ksArc3DParameterEnum Index );
    IKompasAPIObjectPtr GetPointParameters (
        enum ksArc3DParameterEnum Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksArc3DBuildingTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksArc3DBuildingTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ enum ksArc3DParameterEnum Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ enum ksArc3DParameterEnum Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ enum ksArc3DParameterEnum Index,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ enum ksArc3DParameterEnum Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_BuildingObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_BuildingVectorParameters (
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
      virtual HRESULT __stdcall put_DirectionPointIndex (
        /*[in]*/ enum ksArc3DParameterEnum Index ) = 0;
      virtual HRESULT __stdcall get_DirectionPointIndex (
        /*[out,retval]*/ enum ksArc3DParameterEnum * Index ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum ksArc3DParameterEnum Index,
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[in]*/ enum ksArc3DParameterEnum Index,
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[in]*/ enum ksArc3DParameterEnum Index,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
};

struct __declspec(uuid("0c7e7d56-f8af-4803-9291-6351dde52b69"))
IArcs3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetArc3D))
    IArc3DPtr Arc3D[];

    //
    // Wrapper methods for error-handling
    //

    IArc3DPtr GetArc3D (
        const _variant_t & Index );
    IArc3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Arc3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IArc3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IArc3D * * Result ) = 0;
};

struct __declspec(uuid("bc64a05c-0078-44eb-9492-abad7ad38e86"))
ICurveOutLine : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFaces,put=PutFaces))
    _variant_t Faces;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;
    __declspec(property(get=GetAutoCheck,put=PutAutoCheck))
    VARIANT_BOOL AutoCheck;
    __declspec(property(get=GetEdgesChecks,put=PutEdgesChecks))
    _variant_t EdgesChecks;
    __declspec(property(get=GetEdgesArraysCount))
    long EdgesArraysCount;
    __declspec(property(get=GetEdges))
    _variant_t Edges[];
    __declspec(property(get=GetEdgesCheck,put=PutEdgesCheck))
    VARIANT_BOOL EdgesCheck[];
    __declspec(property(get=GetEdgesChecksCount))
    long EdgesChecksCount;

    //
    // Wrapper methods for error-handling
    //

    void PutFaces (
        const _variant_t & Faces );
    _variant_t GetFaces ( );
    IVector3DPtr GetVector3D ( );
    VARIANT_BOOL GetAutoCheck ( );
    void PutAutoCheck (
        VARIANT_BOOL CheckValue );
    _variant_t GetEdgesChecks ( );
    void PutEdgesChecks (
        const _variant_t & Checks );
    long GetEdgesArraysCount ( );
    _variant_t GetEdges (
        long Index );
    VARIANT_BOOL GetEdgesCheck (
        long ContourIndex );
    void PutEdgesCheck (
        long ContourIndex,
        VARIANT_BOOL CheckValue );
    long GetEdgesChecksCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT Faces ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * Faces ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
      virtual HRESULT __stdcall get_AutoCheck (
        /*[out,retval]*/ VARIANT_BOOL * CheckValue ) = 0;
      virtual HRESULT __stdcall put_AutoCheck (
        /*[in]*/ VARIANT_BOOL CheckValue ) = 0;
      virtual HRESULT __stdcall get_EdgesChecks (
        /*[out,retval]*/ VARIANT * Checks ) = 0;
      virtual HRESULT __stdcall put_EdgesChecks (
        /*[in]*/ VARIANT Checks ) = 0;
      virtual HRESULT __stdcall get_EdgesArraysCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Edges ) = 0;
      virtual HRESULT __stdcall get_EdgesCheck (
        /*[in]*/ long ContourIndex,
        /*[out,retval]*/ VARIANT_BOOL * CheckValue ) = 0;
      virtual HRESULT __stdcall put_EdgesCheck (
        /*[in]*/ long ContourIndex,
        /*[in]*/ VARIANT_BOOL CheckValue ) = 0;
      virtual HRESULT __stdcall get_EdgesChecksCount (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("491f65e7-f227-42fd-ab49-82487eae7775"))
ICurveOutLines : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCurveOutLine))
    ICurveOutLinePtr CurveOutLine[];

    //
    // Wrapper methods for error-handling
    //

    ICurveOutLinePtr GetCurveOutLine (
        const _variant_t & Index );
    ICurveOutLinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurveOutLine (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICurveOutLine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICurveOutLine * * Result ) = 0;
};

struct __declspec(uuid("d875d25c-b52b-47c8-b04c-8cba73623f17"))
ICurveByLaw : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPointsType,put=PutPointsType))
    enum ksPoint3DTypeEnum PointsType;
    __declspec(property(get=GetLawType,put=PutLawType))
    enum ksLawTypeEnum LawType[];
    __declspec(property(get=GetTMin,put=PutTMin))
    double TMin[];
    __declspec(property(get=GetTMax,put=PutTMax))
    double TMax[];
    __declspec(property(get=GetExpression,put=PutExpression))
    _bstr_t Expression[];
    __declspec(property(get=GetUserVariables))
    _variant_t UserVariables;
    __declspec(property(get=GetIntervalExpression,put=PutIntervalExpression))
    _bstr_t IntervalExpression[];

    //
    // Wrapper methods for error-handling
    //

    void PutPointsType (
        enum ksPoint3DTypeEnum Type );
    enum ksPoint3DTypeEnum GetPointsType ( );
    void PutLawType (
        enum ksCoordLawEnum coord,
        enum ksLawTypeEnum Type );
    enum ksLawTypeEnum GetLawType (
        enum ksCoordLawEnum coord );
    void PutTMin (
        enum ksCoordLawEnum coord,
        double T );
    double GetTMin (
        enum ksCoordLawEnum coord );
    void PutTMax (
        enum ksCoordLawEnum coord,
        double T );
    double GetTMax (
        enum ksCoordLawEnum coord );
    void PutExpression (
        enum ksCoordLawEnum coord,
        _bstr_t PVal );
    _bstr_t GetExpression (
        enum ksCoordLawEnum coord );
    _variant_t GetUserVariables ( );
    void PutIntervalExpression (
        enum ksCoordLawEnum coord,
        _bstr_t PVal );
    _bstr_t GetIntervalExpression (
        enum ksCoordLawEnum coord );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PointsType (
        /*[in]*/ enum ksPoint3DTypeEnum Type ) = 0;
      virtual HRESULT __stdcall get_PointsType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall put_LawType (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[in]*/ enum ksLawTypeEnum Type ) = 0;
      virtual HRESULT __stdcall get_LawType (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[out,retval]*/ enum ksLawTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall put_TMin (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[in]*/ double T ) = 0;
      virtual HRESULT __stdcall get_TMin (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[out,retval]*/ double * T ) = 0;
      virtual HRESULT __stdcall put_TMax (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[in]*/ double T ) = 0;
      virtual HRESULT __stdcall get_TMax (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[out,retval]*/ double * T ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_UserVariables (
        /*[out,retval]*/ VARIANT * Variables ) = 0;
      virtual HRESULT __stdcall put_IntervalExpression (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_IntervalExpression (
        /*[in]*/ enum ksCoordLawEnum coord,
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("7dd7bf03-5348-4345-a2a2-fc116c100b2e"))
ICurveByLaws : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCurveByLaw))
    ICurveByLawPtr CurveByLaw[];

    //
    // Wrapper methods for error-handling
    //

    ICurveByLawPtr GetCurveByLaw (
        const _variant_t & Index );
    ICurveByLawPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurveByLaw (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICurveByLaw * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICurveByLaw * * Result ) = 0;
};

struct __declspec(uuid("d7e519c3-ea15-43ca-a2eb-d5f119a70051"))
IIsoparametricCurve : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSurfaceObject,put=PutSurfaceObject))
    IModelObjectPtr SurfaceObject;
    __declspec(property(get=GetU,put=PutU))
    double U;
    __declspec(property(get=GetV,put=PutV))
    double V;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject;
    __declspec(property(get=GetUDirection,put=PutUDirection))
    VARIANT_BOOL UDirection;

    //
    // Wrapper methods for error-handling
    //

    void PutSurfaceObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetSurfaceObject ( );
    void PutU (
        double PVal );
    double GetU ( );
    void PutV (
        double PVal );
    double GetV ( );
    void PutAssociationObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject ( );
    void PutUDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUDirection ( );
    VARIANT_BOOL GetPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_SurfaceObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_U (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_U (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_V (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_V (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_UDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("6046fd5e-434a-4b9f-826f-37ecc1730ad4"))
IIsoparametricCurves : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetIsoparametricCurve))
    IIsoparametricCurvePtr IsoparametricCurve[];

    //
    // Wrapper methods for error-handling
    //

    IIsoparametricCurvePtr GetIsoparametricCurve (
        const _variant_t & Index );
    IIsoparametricCurvePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsoparametricCurve (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IIsoparametricCurve * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IIsoparametricCurve * * Result ) = 0;
};

struct __declspec(uuid("f6768800-d726-4530-8966-ca1dc1ac2927"))
IIsoparametricCurvesSet : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSurfaceObject,put=PutSurfaceObject))
    IModelObjectPtr SurfaceObject;
    __declspec(property(get=GetUCount,put=PutUCount))
    long UCount;
    __declspec(property(get=GetVCount,put=PutVCount))
    long VCount;
    __declspec(property(get=GetSaveBoundaries,put=PutSaveBoundaries))
    VARIANT_BOOL SaveBoundaries;

    //
    // Wrapper methods for error-handling
    //

    void PutSurfaceObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetSurfaceObject ( );
    void PutUCount (
        long PVal );
    long GetUCount ( );
    void PutVCount (
        long PVal );
    long GetVCount ( );
    void PutSaveBoundaries (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveBoundaries ( );
    VARIANT_BOOL Destroy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_SurfaceObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_UCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_UCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_VCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_VCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveBoundaries (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveBoundaries (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Destroy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("8a0aadfb-d56c-46bb-90e7-29beeb42ea63"))
IIsoparametricCurvesSets : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetIsoparametricCurvesSet))
    IIsoparametricCurvesSetPtr IsoparametricCurvesSet[];

    //
    // Wrapper methods for error-handling
    //

    IIsoparametricCurvesSetPtr GetIsoparametricCurvesSet (
        const _variant_t & Index );
    IIsoparametricCurvesSetPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsoparametricCurvesSet (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IIsoparametricCurvesSet * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IIsoparametricCurvesSet * * Result ) = 0;
};

struct __declspec(uuid("bff82605-c64b-460e-a6d3-3c22229a8325"))
ISplineOnSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetSplineOnPoles,put=PutSplineOnPoles))
    VARIANT_BOOL SplineOnPoles;
    __declspec(property(get=GetSplineOrder,put=PutSplineOrder))
    long SplineOrder;
    __declspec(property(get=GetSurfaceObject,put=PutSurfaceObject))
    IModelObjectPtr SurfaceObject;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject[];
    __declspec(property(get=GetSplineTangent,put=PutSplineTangent))
    enum ksSplineTangentEnum SplineTangent[];
    __declspec(property(get=GetVectorLenght,put=PutVectorLenght))
    double VectorLenght[];
    __declspec(property(get=GetTangentCurve,put=PutTangentCurve))
    IModelObjectPtr TangentCurve[];
    __declspec(property(get=GetReverse,put=PutReverse))
    VARIANT_BOOL Reverse[];

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    void PutSplineOnPoles (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSplineOnPoles ( );
    void PutSplineOrder (
        long Result );
    long GetSplineOrder ( );
    void PutSurfaceObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetSurfaceObject ( );
    long GetVertexCount ( );
    VARIANT_BOOL GetVertex (
        long Index,
        double * U,
        double * V,
        double * W );
    VARIANT_BOOL SetVertex (
        long Index,
        double U,
        double V,
        double W );
    VARIANT_BOOL AddVertex (
        long IndexAt,
        double U,
        double V,
        double W,
        struct IModelObject * AssociationObject );
    VARIANT_BOOL DeleteVertex (
        long Index );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL GetPoint (
        long Index,
        double * X,
        double * Y,
        double * Z,
        double * W );
    VARIANT_BOOL SetPoint (
        long Index,
        double X,
        double Y,
        double Z,
        double W );
    VARIANT_BOOL AddPoint (
        long IndexAt,
        double X,
        double Y,
        double Z,
        double W,
        struct IModelObject * AssociationObject );
    VARIANT_BOOL GetVertexParams (
        VARIANT * UV,
        VARIANT * Points,
        VARIANT * Weights );
    void PutAssociationObject (
        long Index,
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject (
        long Index );
    void PutSplineTangent (
        long Index,
        enum ksSplineTangentEnum PVal );
    enum ksSplineTangentEnum GetSplineTangent (
        long Index );
    VARIANT_BOOL SetTangentVector (
        long Index,
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetTangentVector (
        long Index,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL Invert (
        long Index );
    void PutVectorLenght (
        long Index,
        double PVal );
    double GetVectorLenght (
        long Index );
    void PutTangentCurve (
        long Index,
        struct IModelObject * PVal );
    IModelObjectPtr GetTangentCurve (
        long Index );
    VARIANT_BOOL ClearTangentParameters ( );
    void PutReverse (
        long Index,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReverse (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_SplineOnPoles (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_SplineOnPoles (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_SplineOrder (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_SplineOrder (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_SurfaceObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * U,
        /*[out]*/ double * V,
        /*[out]*/ double * W,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double U,
        /*[in]*/ double V,
        /*[in]*/ double W,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ long IndexAt,
        /*[in]*/ double U,
        /*[in]*/ double V,
        /*[in]*/ double W,
        /*[in]*/ struct IModelObject * AssociationObject,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteVertex (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * W,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double W,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ long IndexAt,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double W,
        struct IModelObject * AssociationObject,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetVertexParams (
        /*[out]*/ VARIANT * UV,
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Weights,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ long Index,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_SplineTangent (
        /*[in]*/ long Index,
        /*[in]*/ enum ksSplineTangentEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SplineTangent (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksSplineTangentEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetTangentVector (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetTangentVector (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Invert (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_VectorLenght (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_VectorLenght (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TangentCurve (
        /*[in]*/ long Index,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_TangentCurve (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearTangentParameters (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Reverse (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Reverse (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("0e670e69-68ab-4075-9ce4-99e0a1547538"))
ISplinesOnSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSplineOnSurface))
    ISplineOnSurfacePtr SplineOnSurface[];

    //
    // Wrapper methods for error-handling
    //

    ISplineOnSurfacePtr GetSplineOnSurface (
        const _variant_t & Index );
    ISplineOnSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SplineOnSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISplineOnSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISplineOnSurface * * Result ) = 0;
};

struct __declspec(uuid("535dd795-507f-41c8-ac1e-6eaf243a3792"))
IProjectionCurve : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFaces,put=PutFaces))
    _variant_t Faces;
    __declspec(property(get=GetCurves,put=PutCurves))
    _variant_t Curves;
    __declspec(property(get=GetProjectionType,put=PutProjectionType))
    enum ksCurveProjectionTypeEnum ProjectionType;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;
    __declspec(property(get=GetTruncationByBounds,put=PutTruncationByBounds))
    VARIANT_BOOL TruncationByBounds;
    __declspec(property(get=GetAutoCheck,put=PutAutoCheck))
    VARIANT_BOOL AutoCheck;
    __declspec(property(get=GetEdgesChecks,put=PutEdgesChecks))
    _variant_t EdgesChecks;
    __declspec(property(get=GetEdgesArraysCount))
    long EdgesArraysCount;
    __declspec(property(get=GetEdges))
    _variant_t Edges[];
    __declspec(property(get=GetEdgesCheck,put=PutEdgesCheck))
    VARIANT_BOOL EdgesCheck[];
    __declspec(property(get=GetEdgesChecksCount))
    long EdgesChecksCount;

    //
    // Wrapper methods for error-handling
    //

    void PutFaces (
        const _variant_t & PVal );
    _variant_t GetFaces ( );
    void PutCurves (
        const _variant_t & PVal );
    _variant_t GetCurves ( );
    enum ksCurveProjectionTypeEnum GetProjectionType ( );
    void PutProjectionType (
        enum ksCurveProjectionTypeEnum PVal );
    IVector3DPtr GetVector3D ( );
    VARIANT_BOOL GetTruncationByBounds ( );
    void PutTruncationByBounds (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoCheck ( );
    void PutAutoCheck (
        VARIANT_BOOL CheckValue );
    _variant_t GetEdgesChecks ( );
    void PutEdgesChecks (
        const _variant_t & Checks );
    long GetEdgesArraysCount ( );
    _variant_t GetEdges (
        long Index );
    VARIANT_BOOL GetEdgesCheck (
        long ContourIndex );
    void PutEdgesCheck (
        long ContourIndex,
        VARIANT_BOOL CheckValue );
    long GetEdgesChecksCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Curves (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Curves (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionType (
        /*[out,retval]*/ enum ksCurveProjectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ProjectionType (
        /*[in]*/ enum ksCurveProjectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
      virtual HRESULT __stdcall get_TruncationByBounds (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TruncationByBounds (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoCheck (
        /*[out,retval]*/ VARIANT_BOOL * CheckValue ) = 0;
      virtual HRESULT __stdcall put_AutoCheck (
        /*[in]*/ VARIANT_BOOL CheckValue ) = 0;
      virtual HRESULT __stdcall get_EdgesChecks (
        /*[out,retval]*/ VARIANT * Checks ) = 0;
      virtual HRESULT __stdcall put_EdgesChecks (
        /*[in]*/ VARIANT Checks ) = 0;
      virtual HRESULT __stdcall get_EdgesArraysCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Edges ) = 0;
      virtual HRESULT __stdcall get_EdgesCheck (
        /*[in]*/ long ContourIndex,
        /*[out,retval]*/ VARIANT_BOOL * CheckValue ) = 0;
      virtual HRESULT __stdcall put_EdgesCheck (
        /*[in]*/ long ContourIndex,
        /*[in]*/ VARIANT_BOOL CheckValue ) = 0;
      virtual HRESULT __stdcall get_EdgesChecksCount (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("88819055-3211-47dd-908f-187b5826fe67"))
IProjectionCurves : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetProjectionCurve))
    IProjectionCurvePtr ProjectionCurve[];

    //
    // Wrapper methods for error-handling
    //

    IProjectionCurvePtr GetProjectionCurve (
        const _variant_t & Index );
    IProjectionCurvePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProjectionCurve (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IProjectionCurve * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IProjectionCurve * * Result ) = 0;
};

struct __declspec(uuid("75250d2e-1a02-4593-9002-09872f65f1cb"))
ICurveBy2Projections : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetProjection1,put=PutProjection1))
    _variant_t Projection1;
    __declspec(property(get=GetProjection2,put=PutProjection2))
    _variant_t Projection2;
    __declspec(property(get=GetAutoCheck,put=PutAutoCheck))
    VARIANT_BOOL AutoCheck;
    __declspec(property(get=GetEdgesChecks,put=PutEdgesChecks))
    _variant_t EdgesChecks;
    __declspec(property(get=GetEdgesArraysCount))
    long EdgesArraysCount;
    __declspec(property(get=GetEdges))
    _variant_t Edges[];
    __declspec(property(get=GetEdgesCheck,put=PutEdgesCheck))
    VARIANT_BOOL EdgesCheck[];
    __declspec(property(get=GetEdgesChecksCount))
    long EdgesChecksCount;

    //
    // Wrapper methods for error-handling
    //

    void PutProjection1 (
        const _variant_t & PVal );
    _variant_t GetProjection1 ( );
    void PutProjection2 (
        const _variant_t & PVal );
    _variant_t GetProjection2 ( );
    VARIANT_BOOL GetAutoCheck ( );
    void PutAutoCheck (
        VARIANT_BOOL CheckValue );
    _variant_t GetEdgesChecks ( );
    void PutEdgesChecks (
        const _variant_t & Checks );
    long GetEdgesArraysCount ( );
    _variant_t GetEdges (
        long Index );
    VARIANT_BOOL GetEdgesCheck (
        long ContourIndex );
    void PutEdgesCheck (
        long ContourIndex,
        VARIANT_BOOL CheckValue );
    long GetEdgesChecksCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Projection1 (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Projection1 (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Projection2 (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Projection2 (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_AutoCheck (
        /*[out,retval]*/ VARIANT_BOOL * CheckValue ) = 0;
      virtual HRESULT __stdcall put_AutoCheck (
        /*[in]*/ VARIANT_BOOL CheckValue ) = 0;
      virtual HRESULT __stdcall get_EdgesChecks (
        /*[out,retval]*/ VARIANT * Checks ) = 0;
      virtual HRESULT __stdcall put_EdgesChecks (
        /*[in]*/ VARIANT Checks ) = 0;
      virtual HRESULT __stdcall get_EdgesArraysCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Edges ) = 0;
      virtual HRESULT __stdcall get_EdgesCheck (
        /*[in]*/ long ContourIndex,
        /*[out,retval]*/ VARIANT_BOOL * CheckValue ) = 0;
      virtual HRESULT __stdcall put_EdgesCheck (
        /*[in]*/ long ContourIndex,
        /*[in]*/ VARIANT_BOOL CheckValue ) = 0;
      virtual HRESULT __stdcall get_EdgesChecksCount (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("8062145f-c6ac-4006-a89b-f1fc6a08fcc5"))
ICurvesBy2Projectionses : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCurveBy2Projections))
    ICurveBy2ProjectionsPtr CurveBy2Projections[];

    //
    // Wrapper methods for error-handling
    //

    ICurveBy2ProjectionsPtr GetCurveBy2Projections (
        const _variant_t & Index );
    ICurveBy2ProjectionsPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurveBy2Projections (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICurveBy2Projections * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICurveBy2Projections * * Result ) = 0;
};

struct __declspec(uuid("05fd7844-ea39-497d-b00b-7a1154830524"))
IContour3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetContour3DType,put=PutContour3DType))
    enum ksContour3DTypeEnum Contour3DType;
    __declspec(property(get=GetEdges,put=PutEdges))
    _variant_t Edges;
    __declspec(property(get=GetCutMode,put=PutCutMode))
    enum ksEquidistant3DCutModeEnum CutMode;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetEdgesVisibility,put=PutEdgesVisibility))
    VARIANT_BOOL EdgesVisibility;
    __declspec(property(get=GetEdgesCount))
    long EdgesCount;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksContour3DBuildingTypeTypeEnum BuildingType;
    __declspec(property(get=GetEquidistant))
    IEquidistant3DPtr Equidistant;
    __declspec(property(get=GetPointsCount))
    long PointsCount;
    __declspec(property(get=GetVarRadius,put=PutVarRadius))
    double VarRadius[];

    //
    // Wrapper methods for error-handling
    //

    void PutContour3DType (
        enum ksContour3DTypeEnum PVal );
    enum ksContour3DTypeEnum GetContour3DType ( );
    void PutEdges (
        const _variant_t & PVal );
    _variant_t GetEdges ( );
    void PutCutMode (
        enum ksEquidistant3DCutModeEnum PVal );
    enum ksEquidistant3DCutModeEnum GetCutMode ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutEdgesVisibility (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEdgesVisibility ( );
    VARIANT_BOOL AddEdge (
        struct IModelObject * Object );
    VARIANT_BOOL RemoveEdge (
        long Index );
    long GetEdgesCount ( );
    void PutBuildingType (
        enum ksContour3DBuildingTypeTypeEnum PVal );
    enum ksContour3DBuildingTypeTypeEnum GetBuildingType ( );
    IEquidistant3DPtr GetEquidistant ( );
    long GetPointsCount ( );
    void PutVarRadius (
        long PointNum,
        double PVal );
    double GetVarRadius (
        long PointNum );
    VARIANT_BOOL DelVarRadius (
        long PointNum );
    VARIANT_BOOL GetIntersectionPoint (
        long PointNum,
        double * X,
        double * Y,
        double * Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Contour3DType (
        /*[in]*/ enum ksContour3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Contour3DType (
        /*[out,retval]*/ enum ksContour3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Edges (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_CutMode (
        /*[in]*/ enum ksEquidistant3DCutModeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CutMode (
        /*[out,retval]*/ enum ksEquidistant3DCutModeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_EdgesVisibility (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EdgesVisibility (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddEdge (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveEdge (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EdgesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksContour3DBuildingTypeTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksContour3DBuildingTypeTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_Equidistant (
        /*[out,retval]*/ struct IEquidistant3D * * Result ) = 0;
      virtual HRESULT __stdcall get_PointsCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_VarRadius (
        /*[in]*/ long PointNum,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_VarRadius (
        /*[in]*/ long PointNum,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_DelVarRadius (
        /*[in]*/ long PointNum,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetIntersectionPoint (
        /*[in]*/ long PointNum,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("9c1419ee-e99e-47dd-8ba3-9132e03f1307"))
IContours3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetContour3D))
    IContour3DPtr Contour3D[];

    //
    // Wrapper methods for error-handling
    //

    IContour3DPtr GetContour3D (
        const _variant_t & Index );
    IContour3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Contour3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IContour3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IContour3D * * Result ) = 0;
};

struct __declspec(uuid("74880880-4f48-44cc-8fc3-83fe3ca7c44a"))
ILineSegment3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject[];
    __declspec(property(get=GetPointType,put=PutPointType))
    enum ksPoint3DTypeEnum PointType[];
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters[];
    __declspec(property(get=GetLenght,put=PutLenght))
    double Lenght;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksLineSegment3DTypeEnum BuildingType;
    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    IModelObjectPtr BasePlane;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPoint (
        VARIANT_BOOL Begin,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        VARIANT_BOOL Begin,
        double X,
        double Y,
        double Z );
    void PutAssociationObject (
        VARIANT_BOOL Begin,
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject (
        VARIANT_BOOL Begin );
    void PutPointType (
        VARIANT_BOOL Begin,
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointType (
        VARIANT_BOOL Begin );
    IKompasAPIObjectPtr GetPointParameters (
        VARIANT_BOOL Begin );
    double GetLenght ( );
    void PutLenght (
        double Result );
    void PutBuildingType (
        enum ksLineSegment3DTypeEnum PVal );
    enum ksLineSegment3DTypeEnum GetBuildingType ( );
    void PutBasePlane (
        struct IModelObject * PVal );
    IModelObjectPtr GetBasePlane ( );
    void PutAngle (
        double Result );
    double GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ VARIANT_BOOL Begin,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ VARIANT_BOOL Begin,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ VARIANT_BOOL Begin,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ VARIANT_BOOL Begin,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ VARIANT_BOOL Begin,
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[in]*/ VARIANT_BOOL Begin,
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[in]*/ VARIANT_BOOL Begin,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Lenght (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Lenght (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksLineSegment3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksLineSegment3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Result ) = 0;
};

struct __declspec(uuid("0dfa5c90-9674-4c27-9441-acdcd46c0af4"))
ILineSegments3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLineSegment3D))
    ILineSegment3DPtr LineSegment3D[];

    //
    // Wrapper methods for error-handling
    //

    ILineSegment3DPtr GetLineSegment3D (
        const _variant_t & Index );
    ILineSegment3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineSegment3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILineSegment3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILineSegment3D * * Result ) = 0;
};

struct __declspec(uuid("56f2843f-de6a-43bc-accd-560b7fa7dd05"))
IUnhistoredCurve3D : IModelObject
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Replace (
        struct IModelObject * Curve,
        VARIANT_BOOL DeleteSource );
    VARIANT_BOOL Unwrap (
        const _variant_t & Placement,
        double X,
        double Y,
        double Z,
        double Accuracy );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ struct IModelObject * Curve,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Unwrap (
        /*[in]*/ VARIANT Placement,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double Accuracy,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("aaadb4ee-6f26-4865-9a83-01e71a438621"))
IUnhistoredCurves3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetUnhistoredCurve3D))
    IUnhistoredCurve3DPtr UnhistoredCurve3D[];

    //
    // Wrapper methods for error-handling
    //

    IUnhistoredCurve3DPtr GetUnhistoredCurve3D (
        const _variant_t & Index );
    IUnhistoredCurve3DPtr Add (
        const _variant_t & Points );
    _variant_t Load (
        _bstr_t FileName,
        VARIANT_BOOL SewCurves );
    IUnhistoredCurve3DPtr Convert (
        struct IModelObject * Curve,
        VARIANT_BOOL DeleteSource );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UnhistoredCurve3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IUnhistoredCurve3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ struct IUnhistoredCurve3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL SewCurves,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ struct IModelObject * Curve,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ struct IUnhistoredCurve3D * * Result ) = 0;
};

struct __declspec(uuid("13783b5e-3591-4173-8da1-6f3095b88db4"))
IPointsArrOnCurve : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurve,put=PutCurve))
    IModelObjectPtr Curve;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksPointsArrOnCurveTypeEnum BuildingType;
    __declspec(property(get=GetCount,put=PutCount))
    long Count;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetByStep,put=PutByStep))
    VARIANT_BOOL ByStep;
    __declspec(property(get=GetReverseDirection,put=PutReverseDirection))
    VARIANT_BOOL ReverseDirection;
    __declspec(property(get=GetOnOffsets,put=PutOnOffsets))
    VARIANT_BOOL OnOffsets;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum ksPoint3DCurveParamTypeEnum OffsetType[];
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset[];
    __declspec(property(get=GetOffsetDirection,put=PutOffsetDirection))
    VARIANT_BOOL OffsetDirection[];
    __declspec(property(get=GetSymbol,put=PutSymbol))
    enum ksAnnotationSymbolEnum Symbol;

    //
    // Wrapper methods for error-handling
    //

    void PutCurve (
        struct IModelObject * PVal );
    IModelObjectPtr GetCurve ( );
    void PutBuildingType (
        enum ksPointsArrOnCurveTypeEnum PVal );
    enum ksPointsArrOnCurveTypeEnum GetBuildingType ( );
    void PutCount (
        long PVal );
    long GetCount ( );
    void PutStep (
        double PVal );
    double GetStep ( );
    void PutByStep (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetByStep ( );
    void PutReverseDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReverseDirection ( );
    void PutOnOffsets (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOnOffsets ( );
    void PutOffsetType (
        VARIANT_BOOL FirstPoint,
        enum ksPoint3DCurveParamTypeEnum PVal );
    enum ksPoint3DCurveParamTypeEnum GetOffsetType (
        VARIANT_BOOL FirstPoint );
    void PutOffset (
        VARIANT_BOOL FirstPoint,
        double PVal );
    double GetOffset (
        VARIANT_BOOL FirstPoint );
    void PutOffsetDirection (
        VARIANT_BOOL FirstPoint,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOffsetDirection (
        VARIANT_BOOL FirstPoint );
    void PutSymbol (
        enum ksAnnotationSymbolEnum PVal );
    enum ksAnnotationSymbolEnum GetSymbol ( );
    VARIANT_BOOL Destroy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curve (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Curve (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksPointsArrOnCurveTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksPointsArrOnCurveTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ByStep (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ByStep (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReverseDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReverseDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_OnOffsets (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_OnOffsets (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetType (
        /*[in]*/ VARIANT_BOOL FirstPoint,
        /*[in]*/ enum ksPoint3DCurveParamTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[in]*/ VARIANT_BOOL FirstPoint,
        /*[out,retval]*/ enum ksPoint3DCurveParamTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ VARIANT_BOOL FirstPoint,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[in]*/ VARIANT_BOOL FirstPoint,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetDirection (
        /*[in]*/ VARIANT_BOOL FirstPoint,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetDirection (
        /*[in]*/ VARIANT_BOOL FirstPoint,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ enum ksAnnotationSymbolEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ enum ksAnnotationSymbolEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_Destroy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("1a156def-0854-4fbd-9dc6-a6b415385c25"))
IPointsArrsOnCurves : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPointsArrOnCurve))
    IPointsArrOnCurvePtr PointsArrOnCurve[];

    //
    // Wrapper methods for error-handling
    //

    IPointsArrOnCurvePtr GetPointsArrOnCurve (
        const _variant_t & Index );
    IPointsArrOnCurvePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointsArrOnCurve (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPointsArrOnCurve * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IPointsArrOnCurve * * Result ) = 0;
};

struct __declspec(uuid("d385fed6-763e-4b1b-b8e5-8b1926389550"))
IPointsArrOnSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFace,put=PutFace))
    IModelObjectPtr Face;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksPointsArrOnSurfaceTypeEnum BuildingType;
    __declspec(property(get=GetUCount,put=PutUCount))
    long UCount;
    __declspec(property(get=GetVCount,put=PutVCount))
    long VCount;
    __declspec(property(get=GetLinearDeflection,put=PutLinearDeflection))
    double LinearDeflection;
    __declspec(property(get=GetAngularDeflection,put=PutAngularDeflection))
    double AngularDeflection;
    __declspec(property(get=GetAllowBoundaries,put=PutAllowBoundaries))
    VARIANT_BOOL AllowBoundaries;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    enum ksAnnotationSymbolEnum Symbol;

    //
    // Wrapper methods for error-handling
    //

    void PutFace (
        struct IModelObject * PVal );
    IModelObjectPtr GetFace ( );
    void PutBuildingType (
        enum ksPointsArrOnSurfaceTypeEnum PVal );
    enum ksPointsArrOnSurfaceTypeEnum GetBuildingType ( );
    void PutUCount (
        long PVal );
    long GetUCount ( );
    void PutVCount (
        long PVal );
    long GetVCount ( );
    void PutLinearDeflection (
        double PVal );
    double GetLinearDeflection ( );
    void PutAngularDeflection (
        double PVal );
    double GetAngularDeflection ( );
    void PutAllowBoundaries (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAllowBoundaries ( );
    void PutSymbol (
        enum ksAnnotationSymbolEnum PVal );
    enum ksAnnotationSymbolEnum GetSymbol ( );
    VARIANT_BOOL Destroy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Face (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksPointsArrOnSurfaceTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksPointsArrOnSurfaceTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_UCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_UCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_VCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_VCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_LinearDeflection (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_LinearDeflection (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AngularDeflection (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_AngularDeflection (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AllowBoundaries (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AllowBoundaries (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ enum ksAnnotationSymbolEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ enum ksAnnotationSymbolEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_Destroy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("5bd348d2-2e20-4a8d-87b7-c74ef22d0310"))
IPointsArrsOnSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPointsArrOnSurface))
    IPointsArrOnSurfacePtr PointsArrOnSurface[];

    //
    // Wrapper methods for error-handling
    //

    IPointsArrOnSurfacePtr GetPointsArrOnSurface (
        const _variant_t & Index );
    IPointsArrOnSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointsArrOnSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPointsArrOnSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IPointsArrOnSurface * * Result ) = 0;
};

struct __declspec(uuid("782932b2-8969-41e1-819c-2458ea6dc8c0"))
IPointsArrFromFile : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPointsType,put=PutPointsType))
    enum ksPoint3DTypeEnum PointsType;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    enum ksAnnotationSymbolEnum Symbol;

    //
    // Wrapper methods for error-handling
    //

    void PutPointsType (
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointsType ( );
    void PutFileName (
        _bstr_t PVal );
    _bstr_t GetFileName ( );
    void PutSymbol (
        enum ksAnnotationSymbolEnum PVal );
    enum ksAnnotationSymbolEnum GetSymbol ( );
    VARIANT_BOOL Destroy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PointsType (
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointsType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ enum ksAnnotationSymbolEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ enum ksAnnotationSymbolEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_Destroy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("7ea13b3a-7d45-4e40-a5c3-1920b53437a6"))
IPointsArrsFromFiles : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPointsArrFromFile))
    IPointsArrFromFilePtr PointsArrFromFile[];

    //
    // Wrapper methods for error-handling
    //

    IPointsArrFromFilePtr GetPointsArrFromFile (
        const _variant_t & Index );
    IPointsArrFromFilePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointsArrFromFile (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPointsArrFromFile * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IPointsArrFromFile * * Result ) = 0;
};

struct __declspec(uuid("6d2112dd-f6e1-49cf-9678-89b0c6cc6aca"))
IMathCurve3D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetParamMin))
    double ParamMin;
    __declspec(property(get=GetParamMax))
    double ParamMax;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetPeriodic))
    VARIANT_BOOL Periodic;
    __declspec(property(get=GetDegenerate))
    VARIANT_BOOL Degenerate;
    __declspec(property(get=GetCurveType))
    enum ksMathCurve3DTypeEnum CurveType;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPoint (
        double ParamT,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetTangentVector (
        double ParamT,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetNormal (
        double ParamT,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeT (
        double ParamT,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeTT (
        double ParamT,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeTTT (
        double ParamT,
        double * X,
        double * Y,
        double * Z );
    double GetParamMin ( );
    double GetParamMax ( );
    VARIANT_BOOL GetClosed ( );
    VARIANT_BOOL GetPeriodic ( );
    double GetMetricLength (
        double StartParam,
        double EndParam );
    VARIANT_BOOL GetGabarit (
        double * X1,
        double * Y1,
        double * Z1,
        double * X2,
        double * Y2,
        double * Z2 );
    VARIANT_BOOL GetDegenerate ( );
    enum ksMathCurve3DTypeEnum GetCurveType ( );
    double GetLength (
        enum ksLengthUnitsEnum BitVector );
    VARIANT_BOOL NearPointProjection (
        double X,
        double Y,
        double Z,
        double * T,
        VARIANT_BOOL Ext );
    _variant_t CalculatePolygon (
        double Step );
    VARIANT_BOOL GetCentre (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetWeightCentre (
        double * X,
        double * Y,
        double * Z );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ double ParamT,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetTangentVector (
        /*[in]*/ double ParamT,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetNormal (
        /*[in]*/ double ParamT,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeT (
        /*[in]*/ double ParamT,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeTT (
        /*[in]*/ double ParamT,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeTTT (
        /*[in]*/ double ParamT,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ParamMin (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ParamMax (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Periodic (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetMetricLength (
        /*[in]*/ double StartParam,
        /*[in]*/ double EndParam,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_GetGabarit (
        /*[out]*/ double * X1,
        /*[out]*/ double * Y1,
        /*[out]*/ double * Z1,
        /*[out]*/ double * X2,
        /*[out]*/ double * Y2,
        /*[out]*/ double * Z2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Degenerate (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_CurveType (
        /*[out,retval]*/ enum ksMathCurve3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetLength (
        /*[in]*/ enum ksLengthUnitsEnum BitVector,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_NearPointProjection (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out]*/ double * T,
        /*[in]*/ VARIANT_BOOL Ext,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_CalculatePolygon (
        /*[in]*/ double Step,
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall raw_GetCentre (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetWeightCentre (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("bc67ce6c-c27b-4c72-a2bf-f850373d8e13"))
IAxis3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetMathCurve))
    IMathCurve3DPtr MathCurve;

    //
    // Wrapper methods for error-handling
    //

    IMathCurve3DPtr GetMathCurve ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MathCurve (
        /*[out,retval]*/ struct IMathCurve3D * * Result ) = 0;
};

struct __declspec(uuid("f2645e37-5d28-4821-8716-86c3f0b13892"))
IAxes3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetAxis3D))
    IAxis3DPtr Axis3D[];

    //
    // Wrapper methods for error-handling
    //

    IAxis3DPtr GetAxis3D (
        const _variant_t & Index );
    IAxis3DPtr Add (
        ksObj3dTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Axis3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAxis3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum Type,
        /*[out,retval]*/ struct IAxis3D * * Result ) = 0;
};

struct __declspec(uuid("25675c2f-10fd-4ce7-9e73-d3915d3e894e"))
IMathSurface3D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetParamUMin))
    double ParamUMin;
    __declspec(property(get=GetParamUMax))
    double ParamUMax;
    __declspec(property(get=GetParamVMin))
    double ParamVMin;
    __declspec(property(get=GetParamVMax))
    double ParamVMax;
    __declspec(property(get=GetClosedU))
    VARIANT_BOOL ClosedU;
    __declspec(property(get=GetClosedV))
    VARIANT_BOOL ClosedV;
    __declspec(property(get=GetSurface3DType))
    enum ksMathSurface3DTypeEnum Surface3DType;
    __declspec(property(get=GetBoundaryCount))
    long BoundaryCount;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetGabarit (
        double * X1,
        double * Y1,
        double * Z1,
        double * X2,
        double * Y2,
        double * Z2 );
    VARIANT_BOOL GetPoint (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetNormal (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetTangentVectorU (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetTangentVectorV (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeU (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeV (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeUU (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeVV (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeUV (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeUUU (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeVVV (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeUVV (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetDerivativeUUV (
        double ParamU,
        double ParamV,
        double * X,
        double * Y,
        double * Z );
    double GetParamUMin ( );
    double GetParamUMax ( );
    double GetParamVMin ( );
    double GetParamVMax ( );
    VARIANT_BOOL GetClosedU ( );
    VARIANT_BOOL GetClosedV ( );
    enum ksMathSurface3DTypeEnum GetSurface3DType ( );
    double GetArea (
        enum ksLengthUnitsEnum BitVector );
    VARIANT_BOOL NearPointProjection (
        double X,
        double Y,
        double Z,
        double * ParamU,
        double * ParamV,
        VARIANT_BOOL Ext );
    VARIANT_BOOL GetBoundaryUVNurbs (
        VARIANT_BOOL UV,
        VARIANT_BOOL Closed,
        long LoopIndex,
        long EdgeIndex,
        long * Degree,
        VARIANT * Points,
        VARIANT * Weights,
        VARIANT * Knots,
        double * TMin,
        double * TMax );
    long GetBoundaryCount ( );
    long GetEdgesCount (
        long LoopIndex );
    VARIANT_BOOL NearDirectPointProjection (
        double X,
        double Y,
        double Z,
        double VX,
        double VY,
        double VZ,
        VARIANT_BOOL Extended,
        double * U,
        double * V );
    _variant_t PointProjection (
        double X,
        double Y,
        double Z,
        double VX,
        double VY,
        double VZ,
        VARIANT_BOOL Extended );
    double GetAreaEx (
        enum ksLengthUnitsEnum Unit,
        double AngleTolerance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetGabarit (
        /*[out]*/ double * X1,
        /*[out]*/ double * Y1,
        /*[out]*/ double * Z1,
        /*[out]*/ double * X2,
        /*[out]*/ double * Y2,
        /*[out]*/ double * Z2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetNormal (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetTangentVectorU (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetTangentVectorV (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeU (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeV (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeUU (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeVV (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeUV (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeUUU (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeVVV (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeUVV (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDerivativeUUV (
        /*[in]*/ double ParamU,
        /*[in]*/ double ParamV,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ParamUMin (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ParamUMax (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ParamVMin (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ParamVMax (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_ClosedU (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ClosedV (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Surface3DType (
        /*[out,retval]*/ enum ksMathSurface3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetArea (
        /*[in]*/ enum ksLengthUnitsEnum BitVector,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_NearPointProjection (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out]*/ double * ParamU,
        /*[out]*/ double * ParamV,
        /*[in]*/ VARIANT_BOOL Ext,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBoundaryUVNurbs (
        /*[in]*/ VARIANT_BOOL UV,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[in]*/ long LoopIndex,
        /*[in]*/ long EdgeIndex,
        /*[out]*/ long * Degree,
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Weights,
        /*[out]*/ VARIANT * Knots,
        /*[out]*/ double * TMin,
        /*[out]*/ double * TMax,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BoundaryCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetEdgesCount (
        /*[in]*/ long LoopIndex,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_NearDirectPointProjection (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double VX,
        /*[in]*/ double VY,
        /*[in]*/ double VZ,
        /*[in]*/ VARIANT_BOOL Extended,
        /*[out]*/ double * U,
        /*[out]*/ double * V,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_PointProjection (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double VX,
        /*[in]*/ double VY,
        /*[in]*/ double VZ,
        /*[in]*/ VARIANT_BOOL Extended,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_GetAreaEx (
        /*[in]*/ enum ksLengthUnitsEnum Unit,
        /*[in]*/ double AngleTolerance,
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("d71c768d-89f1-4143-903a-ad2595fd8220"))
IPlane3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface))
    IMathSurface3DPtr Surface;

    //
    // Wrapper methods for error-handling
    //

    IMathSurface3DPtr GetSurface ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IMathSurface3D * * Result ) = 0;
};

struct __declspec(uuid("71b69c8b-feae-484f-bbda-f7c71a94ddc7"))
IPlanes3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPlane3D))
    IPlane3DPtr Plane3D[];

    //
    // Wrapper methods for error-handling
    //

    IPlane3DPtr GetPlane3D (
        const _variant_t & Index );
    IPlane3DPtr Add (
        ksObj3dTypeEnum PlaneType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Plane3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPlane3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum PlaneType,
        /*[out,retval]*/ struct IPlane3D * * Result ) = 0;
};

struct __declspec(uuid("919df6db-0ba9-4edd-b681-33e0b519834b"))
ILocalCSAxesDirectionParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDirectingObject))
    IModelObjectPtr DirectingObject[];
    __declspec(property(put=PutAngleByOwnAxis))
    double AngleByOwnAxis[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetDirectingObject (
        ksObj3dTypeEnum Axis,
        struct IModelObject * Object );
    IModelObjectPtr GetDirectingObject (
        ksObj3dTypeEnum Axis );
    VARIANT_BOOL RotateAxis (
        ksObj3dTypeEnum Axis );
    void PutAngleByOwnAxis (
        ksObj3dTypeEnum Axis,
        double _arg2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetDirectingObject (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_DirectingObject (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_RotateAxis (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AngleByOwnAxis (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[in]*/ double _arg2 ) = 0;
};

struct __declspec(uuid("ad261149-1455-49bd-ba0a-b1760a0c8cb0"))
ILocalCSEulerParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetNutationAngle,put=PutNutationAngle))
    double NutationAngle;
    __declspec(property(get=GetPrecessionAngle,put=PutPrecessionAngle))
    double PrecessionAngle;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;

    //
    // Wrapper methods for error-handling
    //

    void PutNutationAngle (
        double Result );
    double GetNutationAngle ( );
    void PutPrecessionAngle (
        double Result );
    double GetPrecessionAngle ( );
    void PutRotationAngle (
        double Result );
    double GetRotationAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_NutationAngle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_NutationAngle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_PrecessionAngle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_PrecessionAngle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * Result ) = 0;
};

struct __declspec(uuid("6c1943ce-8fdb-47d2-9b2f-95f7b851be3d"))
IRoughParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseLengthText))
    ITextPtr BaseLengthText;
    __declspec(property(get=GetTrendText))
    ITextPtr TrendText;
    __declspec(property(get=GetProcessingByContour,put=PutProcessingByContour))
    VARIANT_BOOL ProcessingByContour;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetLeaderLength,put=PutLeaderLength))
    double LeaderLength;
    __declspec(property(get=GetLeaderAngle,put=PutLeaderAngle))
    double LeaderAngle;
    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum ksArrowEnum ArrowType;
    __declspec(property(get=GetArrowInside,put=PutArrowInside))
    VARIANT_BOOL ArrowInside;
    __declspec(property(get=GetSignType,put=PutSignType))
    enum ksRoughSignEnum SignType;
    __declspec(property(get=GetRoughParamText))
    ITextPtr RoughParamText;
    __declspec(property(get=GetProcessText))
    ITextPtr ProcessText;

    //
    // Wrapper methods for error-handling
    //

    enum ksRoughSignEnum GetSignType ( );
    void PutSignType (
        enum ksRoughSignEnum Result );
    ITextPtr GetRoughParamText ( );
    ITextPtr GetProcessText ( );
    ITextPtr GetBaseLengthText ( );
    ITextPtr GetTrendText ( );
    VARIANT_BOOL GetProcessingByContour ( );
    void PutProcessingByContour (
        VARIANT_BOOL Result );
    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum Result );
    double GetLeaderLength ( );
    void PutLeaderLength (
        double Result );
    double GetLeaderAngle ( );
    void PutLeaderAngle (
        double Result );
    enum ksArrowEnum GetArrowType ( );
    void PutArrowType (
        enum ksArrowEnum Result );
    VARIANT_BOOL GetArrowInside ( );
    void PutArrowInside (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SignType (
        /*[out,retval]*/ enum ksRoughSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_SignType (
        /*[in]*/ enum ksRoughSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_RoughParamText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_ProcessText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseLengthText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TrendText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_ProcessingByContour (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProcessingByContour (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum Result ) = 0;
      virtual HRESULT __stdcall get_LeaderLength (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LeaderLength (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_LeaderAngle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LeaderAngle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum ksArrowEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum ksArrowEnum Result ) = 0;
      virtual HRESULT __stdcall get_ArrowInside (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ArrowInside (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("afe08aec-f751-42d9-a6f5-3c004e4d41a6"))
IBranchs3D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBranchCount))
    long BranchCount;
    __declspec(property(get=GetBranchPoints,put=PutBranchPoints))
    _variant_t BranchPoints[];
    __declspec(property(get=GetBranchPointsCount))
    long BranchPointsCount[];
    __declspec(property(get=GetBranchObject))
    IModelObjectPtr BranchObject[];
    __declspec(property(get=GetBranchObjects))
    _variant_t BranchObjects;
    __declspec(property(get=GetBranchEndPoints))
    _variant_t BranchEndPoints;

    //
    // Wrapper methods for error-handling
    //

    long GetBranchCount ( );
    VARIANT_BOOL GetBranchBeginPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetBranchBeginPoint (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL GetBranchEndPoint (
        long Index,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetBranchEndPoint (
        long Index,
        double X,
        double Y,
        double Z );
    void PutBranchPoints (
        long Index,
        const _variant_t & PVal );
    _variant_t GetBranchPoints (
        long Index );
    long GetBranchPointsCount (
        long Index );
    VARIANT_BOOL AddBranch (
        const _variant_t & Points,
        struct IModelObject * Object );
    VARIANT_BOOL AddBranchByPoint (
        double X,
        double Y,
        double Z,
        struct IModelObject * Object );
    VARIANT_BOOL DeleteBranch (
        long Index );
    IModelObjectPtr GetBranchObject (
        long Index );
    _variant_t GetBranchObjects ( );
    _variant_t GetBranchEndPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BranchCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBranchBeginPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBranchBeginPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBranchEndPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBranchEndPoint (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_BranchPoints (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_BranchPoints (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_BranchPointsCount (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_AddBranch (
        /*[in]*/ VARIANT Points,
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddBranchByPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteBranch (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BranchObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_BranchObjects (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_BranchEndPoints (
        /*[out,retval]*/ VARIANT * Points ) = 0;
};

struct __declspec(uuid("618485e7-d88a-4dcc-8896-7ea04d831dbb"))
ILocalCSOrientByObjectParam : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientationObject))
    IModelObjectPtr OrientationObject;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetOrientationObject (
        struct IModelObject * Object );
    IModelObjectPtr GetOrientationObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetOrientationObject (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_OrientationObject (
        /*[out,retval]*/ struct IModelObject * * Object ) = 0;
};

struct __declspec(uuid("116f7e59-f175-47d2-8346-eb3c87d60578"))
ILocalCSObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelObjectParamType,put=PutModelObjectParamType))
    enum ksModelObjectParamTypeEnum ModelObjectParamType;
    __declspec(property(get=GetLocalCoordinateSystem))
    ILocalCoordinateSystemPtr LocalCoordinateSystem;
    __declspec(property(get=GetCoordinateSystem,put=PutCoordinateSystem))
    IModelObjectPtr CoordinateSystem;

    //
    // Wrapper methods for error-handling
    //

    void PutModelObjectParamType (
        enum ksModelObjectParamTypeEnum PVal );
    enum ksModelObjectParamTypeEnum GetModelObjectParamType ( );
    ILocalCoordinateSystemPtr GetLocalCoordinateSystem ( );
    IModelObjectPtr GetCoordinateSystem ( );
    void PutCoordinateSystem (
        struct IModelObject * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ModelObjectParamType (
        /*[in]*/ enum ksModelObjectParamTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ModelObjectParamType (
        /*[out,retval]*/ enum ksModelObjectParamTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_LocalCoordinateSystem (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * PVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystem (
        /*[in]*/ struct IModelObject * PVal ) = 0;
};

struct __declspec(uuid("b6330040-7aba-4ecd-8c92-5b441af11c3b"))
ISurfacePatch : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetEdges,put=PutEdges))
    _variant_t Edges;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEdges ( );
    void PutEdges (
        const _variant_t & PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Edges (
        /*[in]*/ VARIANT PVal ) = 0;
};

struct __declspec(uuid("dee5b135-4d8e-4ad8-aea4-e763f68290b2"))
ISurfacePatches : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSurfacePatch))
    ISurfacePatchPtr SurfacePatch[];

    //
    // Wrapper methods for error-handling
    //

    ISurfacePatchPtr GetSurfacePatch (
        const _variant_t & Index );
    ISurfacePatchPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SurfacePatch (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISurfacePatch * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISurfacePatch * * Result ) = 0;
};

struct __declspec(uuid("4cae21e3-4183-47a6-94b8-8ad14d5775ee"))
IFaceRemover : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFaces,put=PutFaces))
    _variant_t Faces;
    __declspec(property(get=GetSaveBody,put=PutSaveBody))
    VARIANT_BOOL SaveBody;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetFaces ( );
    void PutFaces (
        const _variant_t & PVal );
    VARIANT_BOOL GetSaveBody ( );
    void PutSaveBody (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_SaveBody (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_SaveBody (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("6e177627-05d6-40b4-b955-9203f00656b5"))
IFaceRemovers : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetFaceRemover))
    IFaceRemoverPtr FaceRemover[];

    //
    // Wrapper methods for error-handling
    //

    IFaceRemoverPtr GetFaceRemover (
        const _variant_t & Index );
    IFaceRemoverPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FaceRemover (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IFaceRemover * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IFaceRemover * * Result ) = 0;
};

struct __declspec(uuid("031fd1c7-9cb6-4e49-a27d-73b8d0b648d4"))
ISurfaceSewer : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetShells,put=PutShells))
    _variant_t Shells;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    double Precision;
    __declspec(property(get=GetCreateBody,put=PutCreateBody))
    VARIANT_BOOL CreateBody;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetShells ( );
    void PutShells (
        const _variant_t & PVal );
    double GetPrecision ( );
    void PutPrecision (
        double Result );
    VARIANT_BOOL GetCreateBody ( );
    void PutCreateBody (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Shells (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Shells (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_CreateBody (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_CreateBody (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("70ae0ba0-2059-4eab-be41-a6e8c8acfa8a"))
ISurfaceSewers : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSurfaceSewer))
    ISurfaceSewerPtr SurfaceSewer[];

    //
    // Wrapper methods for error-handling
    //

    ISurfaceSewerPtr GetSurfaceSewer (
        const _variant_t & Index );
    ISurfaceSewerPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SurfaceSewer (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISurfaceSewer * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISurfaceSewer * * Result ) = 0;
};

struct __declspec(uuid("5dafc690-b3a7-4771-8e98-f83b5bf0d454"))
INurbsSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosedU,put=PutClosedU))
    VARIANT_BOOL ClosedU;
    __declspec(property(get=GetClosedV,put=PutClosedV))
    VARIANT_BOOL ClosedV;
    __declspec(property(get=GetBoundaryCount))
    long BoundaryCount;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetNurbsParams (
        VARIANT_BOOL ClosedV,
        VARIANT_BOOL ClosedU,
        long * DegreeV,
        long * DegreeU,
        long * NPV,
        long * NPU,
        VARIANT * Points,
        VARIANT * Weights,
        VARIANT * KnotsV,
        VARIANT * KnotsU );
    VARIANT_BOOL SetNurbsParams (
        VARIANT_BOOL ClosedV,
        VARIANT_BOOL ClosedU,
        long DegreeV,
        long DegreeU,
        long NPV,
        long NPU,
        const _variant_t & Points,
        const _variant_t & Weights,
        const _variant_t & KnotsV,
        const _variant_t & KnotsU );
    VARIANT_BOOL InitParamByFace (
        struct IModelObject * Face );
    VARIANT_BOOL GetClosedU ( );
    void PutClosedU (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosedV ( );
    void PutClosedV (
        VARIANT_BOOL PVal );
    long GetBoundaryCount ( );
    VARIANT_BOOL AddBoundary (
        VARIANT_BOOL UV,
        VARIANT_BOOL Closed,
        long Degree,
        const _variant_t & Points,
        const _variant_t & Weights,
        const _variant_t & Knots,
        double TMin,
        double TMax );
    VARIANT_BOOL GetBoundary (
        VARIANT_BOOL UV,
        VARIANT_BOOL Closed,
        long BoundaryIndex,
        long * Degree,
        VARIANT * Points,
        VARIANT * Weights,
        VARIANT * Knots,
        double * TMin,
        double * TMax );
    VARIANT_BOOL DeleteBoundary (
        long BoundaryIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetNurbsParams (
        /*[in]*/ VARIANT_BOOL ClosedV,
        /*[in]*/ VARIANT_BOOL ClosedU,
        /*[out]*/ long * DegreeV,
        /*[out]*/ long * DegreeU,
        /*[out]*/ long * NPV,
        /*[out]*/ long * NPU,
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Weights,
        /*[out]*/ VARIANT * KnotsV,
        /*[out]*/ VARIANT * KnotsU,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetNurbsParams (
        /*[in]*/ VARIANT_BOOL ClosedV,
        /*[in]*/ VARIANT_BOOL ClosedU,
        /*[in]*/ long DegreeV,
        /*[in]*/ long DegreeU,
        /*[in]*/ long NPV,
        /*[in]*/ long NPU,
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Weights,
        /*[in]*/ VARIANT KnotsV,
        /*[in]*/ VARIANT KnotsU,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_InitParamByFace (
        /*[in]*/ struct IModelObject * Face,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ClosedU (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosedU (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ClosedV (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosedV (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddBoundary (
        /*[in]*/ VARIANT_BOOL UV,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[in]*/ long Degree,
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Weights,
        /*[in]*/ VARIANT Knots,
        /*[in]*/ double TMin,
        /*[in]*/ double TMax,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBoundary (
        /*[in]*/ VARIANT_BOOL UV,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[in]*/ long BoundaryIndex,
        /*[out]*/ long * Degree,
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Weights,
        /*[out]*/ VARIANT * Knots,
        /*[out]*/ double * TMin,
        /*[out]*/ double * TMax,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteBoundary (
        /*[in]*/ long BoundaryIndex,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("db184867-6207-4fb7-9b3f-882beaa16b4d"))
INurbsSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetNurbsSurface))
    INurbsSurfacePtr NurbsSurface[];

    //
    // Wrapper methods for error-handling
    //

    INurbsSurfacePtr GetNurbsSurface (
        const _variant_t & Index );
    INurbsSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NurbsSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct INurbsSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct INurbsSurface * * Result ) = 0;
};

struct __declspec(uuid("95681235-7522-4a84-b01c-e76a27393552"))
IRuledSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurves1,put=PutCurves1))
    _variant_t Curves1;
    __declspec(property(get=GetCurves2,put=PutCurves2))
    _variant_t Curves2;
    __declspec(property(get=GetCheckSelfIntersection,put=PutCheckSelfIntersection))
    VARIANT_BOOL CheckSelfIntersection;
    __declspec(property(get=GetAutoSegmentation,put=PutAutoSegmentation))
    VARIANT_BOOL AutoSegmentation;
    __declspec(property(get=GetEdgesCount))
    long EdgesCount;
    __declspec(property(get=GetConsiderComplianceVertices,put=PutConsiderComplianceVertices))
    VARIANT_BOOL ConsiderComplianceVertices;

    //
    // Wrapper methods for error-handling
    //

    void PutCurves1 (
        const _variant_t & Curves );
    _variant_t GetCurves1 ( );
    void PutCurves2 (
        const _variant_t & Curves );
    _variant_t GetCurves2 ( );
    void PutCheckSelfIntersection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCheckSelfIntersection ( );
    void PutAutoSegmentation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoSegmentation ( );
    VARIANT_BOOL AddNewEdge (
        long IndexAt );
    VARIANT_BOOL DeleteEdge (
        long Index );
    long GetEdgesCount ( );
    VARIANT_BOOL SetEdgePointParam (
        long EdgeIndex,
        VARIANT_BOOL StartPoint,
        double X,
        double Y,
        double Z,
        double * T,
        struct IModelObject * Segment,
        struct IModelObject * AssociateVertex );
    VARIANT_BOOL GetEdgePointParam (
        long EdgeIndex,
        VARIANT_BOOL StartPoint,
        double * X,
        double * Y,
        double * Z,
        double * T,
        struct IModelObject * * Segment,
        struct IModelObject * * AssociateVertex );
    VARIANT_BOOL GetEdgePointParams (
        VARIANT * Points1,
        VARIANT * T1,
        VARIANT * Segments1,
        VARIANT * AssociateVertexes1,
        VARIANT * Points2,
        VARIANT * T2,
        VARIANT * Segments2,
        VARIANT * AssociateVertexes2 );
    void PutConsiderComplianceVertices (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetConsiderComplianceVertices ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curves1 (
        /*[in]*/ VARIANT Curves ) = 0;
      virtual HRESULT __stdcall get_Curves1 (
        /*[out,retval]*/ VARIANT * Curves ) = 0;
      virtual HRESULT __stdcall put_Curves2 (
        /*[in]*/ VARIANT Curves ) = 0;
      virtual HRESULT __stdcall get_Curves2 (
        /*[out,retval]*/ VARIANT * Curves ) = 0;
      virtual HRESULT __stdcall put_CheckSelfIntersection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CheckSelfIntersection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoSegmentation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSegmentation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewEdge (
        /*[in]*/ long IndexAt,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteEdge (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EdgesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetEdgePointParam (
        /*[in]*/ long EdgeIndex,
        /*[in]*/ VARIANT_BOOL StartPoint,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double * T,
        /*[in]*/ struct IModelObject * Segment,
        /*[in]*/ struct IModelObject * AssociateVertex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetEdgePointParam (
        /*[in]*/ long EdgeIndex,
        /*[in]*/ VARIANT_BOOL StartPoint,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * T,
        /*[out]*/ struct IModelObject * * Segment,
        /*[out]*/ struct IModelObject * * AssociateVertex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetEdgePointParams (
        /*[out]*/ VARIANT * Points1,
        /*[out]*/ VARIANT * T1,
        /*[out]*/ VARIANT * Segments1,
        /*[out]*/ VARIANT * AssociateVertexes1,
        /*[out]*/ VARIANT * Points2,
        /*[out]*/ VARIANT * T2,
        /*[out]*/ VARIANT * Segments2,
        /*[out]*/ VARIANT * AssociateVertexes2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ConsiderComplianceVertices (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ConsiderComplianceVertices (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("3f3efc1c-a0a7-4b06-bf7a-384bab27b07f"))
IRuledSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRuledSurface))
    IRuledSurfacePtr RuledSurface[];

    //
    // Wrapper methods for error-handling
    //

    IRuledSurfacePtr GetRuledSurface (
        const _variant_t & Index );
    IRuledSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RuledSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRuledSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRuledSurface * * Result ) = 0;
};

struct __declspec(uuid("f665724f-7177-4b93-b51a-063baf70ced4"))
IEquidistantSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseSurface,put=PutBaseSurface))
    _variant_t BaseSurface;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;

    //
    // Wrapper methods for error-handling
    //

    void PutBaseSurface (
        const _variant_t & Result );
    _variant_t GetBaseSurface ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutDistance (
        double PVal );
    double GetDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BaseSurface (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_BaseSurface (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("992d7c05-7a25-46fb-aab1-b7337e6ea74b"))
IEquidistantSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetEquidistantSurface))
    IEquidistantSurfacePtr EquidistantSurface[];

    //
    // Wrapper methods for error-handling
    //

    IEquidistantSurfacePtr GetEquidistantSurface (
        const _variant_t & Index );
    IEquidistantSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EquidistantSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IEquidistantSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IEquidistantSurface * * Result ) = 0;
};

struct __declspec(uuid("3d64a257-8109-491c-8cb6-f0dcf516f02e"))
ITrimmedSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface,put=PutSurface))
    _variant_t Surface;
    __declspec(property(get=GetCutObject,put=PutCutObject))
    _variant_t CutObject;
    __declspec(property(get=GetSense,put=PutSense))
    VARIANT_BOOL Sense;
    __declspec(property(get=GetOperationResult,put=PutOperationResult))
    enum ksOperationResultEnum OperationResult;

    //
    // Wrapper methods for error-handling
    //

    void PutSurface (
        const _variant_t & PVal );
    _variant_t GetSurface ( );
    void PutCutObject (
        const _variant_t & PVal );
    _variant_t GetCutObject ( );
    void PutSense (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSense ( );
    void PutOperationResult (
        enum ksOperationResultEnum Result );
    enum ksOperationResultEnum GetOperationResult ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Surface (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_CutObject (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_CutObject (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Sense (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Sense (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_OperationResult (
        /*[in]*/ enum ksOperationResultEnum Result ) = 0;
      virtual HRESULT __stdcall get_OperationResult (
        /*[out,retval]*/ enum ksOperationResultEnum * Result ) = 0;
};

struct __declspec(uuid("799a9110-799b-40e5-85af-087ad30a89b4"))
ITrimmedSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetTrimmedSurface))
    ITrimmedSurfacePtr TrimmedSurface[];

    //
    // Wrapper methods for error-handling
    //

    ITrimmedSurfacePtr GetTrimmedSurface (
        const _variant_t & Index );
    ITrimmedSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrimmedSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ITrimmedSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ITrimmedSurface * * Result ) = 0;
};

struct __declspec(uuid("27fe71e1-c84d-4f59-8f9b-f0c144314c83"))
IExtensionSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetEdges,put=PutEdges))
    _variant_t Edges;
    __declspec(property(get=GetExtensionType,put=PutExtensionType))
    enum ksExtensionSurfaceTypeEnum ExtensionType;
    __declspec(property(get=GetExtensionLimitType,put=PutExtensionLimitType))
    enum ksExtensionLimitTypeEnum ExtensionLimitType;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetSideEdges,put=PutSideEdges))
    VARIANT_BOOL SideEdges;
    __declspec(property(get=GetDirObject,put=PutDirObject))
    IModelObjectPtr DirObject;
    __declspec(property(get=GetTargetObject,put=PutTargetObject))
    IModelObjectPtr TargetObject;
    __declspec(property(get=GetSense,put=PutSense))
    VARIANT_BOOL Sense;
    __declspec(property(get=GetBuildingVectorParameters))
    IVector3DPtr BuildingVectorParameters;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEdges ( );
    void PutEdges (
        const _variant_t & PVal );
    void PutExtensionType (
        enum ksExtensionSurfaceTypeEnum PVal );
    enum ksExtensionSurfaceTypeEnum GetExtensionType ( );
    void PutExtensionLimitType (
        enum ksExtensionLimitTypeEnum PVal );
    enum ksExtensionLimitTypeEnum GetExtensionLimitType ( );
    void PutLength (
        double Result );
    double GetLength ( );
    void PutSideEdges (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSideEdges ( );
    void PutDirObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetDirObject ( );
    void PutTargetObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetTargetObject ( );
    void PutSense (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSense ( );
    IVector3DPtr GetBuildingVectorParameters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Edges (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall put_ExtensionType (
        /*[in]*/ enum ksExtensionSurfaceTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ExtensionType (
        /*[out,retval]*/ enum ksExtensionSurfaceTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ExtensionLimitType (
        /*[in]*/ enum ksExtensionLimitTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ExtensionLimitType (
        /*[out,retval]*/ enum ksExtensionLimitTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_SideEdges (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_SideEdges (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_DirObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DirObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_TargetObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_TargetObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Sense (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Sense (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BuildingVectorParameters (
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
};

struct __declspec(uuid("5f6ee7f9-972a-4bb8-b1e4-bc1c74048fff"))
IExtensionSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetExtensionSurface))
    IExtensionSurfacePtr ExtensionSurface[];

    //
    // Wrapper methods for error-handling
    //

    IExtensionSurfacePtr GetExtensionSurface (
        const _variant_t & Index );
    IExtensionSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtensionSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IExtensionSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IExtensionSurface * * Result ) = 0;
};

struct __declspec(uuid("a1d85ab6-c3fd-415b-92db-4eb4414ca78b"))
IMeshPointsSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksMeshPointsSurfaceBuildingTypeEnum BuildingType;
    __declspec(property(get=GetClosedU,put=PutClosedU))
    VARIANT_BOOL ClosedU;
    __declspec(property(get=GetClosedV,put=PutClosedV))
    VARIANT_BOOL ClosedV;
    __declspec(property(get=GetDegreeU,put=PutDegreeU))
    long DegreeU;
    __declspec(property(get=GetDegreeV,put=PutDegreeV))
    long DegreeV;
    __declspec(property(get=GetRowsCount))
    long RowsCount;
    __declspec(property(get=GetColumnsCount))
    long ColumnsCount;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum ksPoint3DTypeEnum PointType[][];
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters[][];
    __declspec(property(get=GetCheckSelfIntersection,put=PutCheckSelfIntersection))
    VARIANT_BOOL CheckSelfIntersection;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject[][];

    //
    // Wrapper methods for error-handling
    //

    enum ksMeshPointsSurfaceBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksMeshPointsSurfaceBuildingTypeEnum PVal );
    VARIANT_BOOL GetParams (
        VARIANT_BOOL * ClosedV,
        VARIANT_BOOL * ClosedU,
        long * DegreeV,
        long * DegreeU,
        long * RowsCount,
        long * ColumsCount,
        VARIANT * Points,
        VARIANT * Weights );
    VARIANT_BOOL SetParams (
        VARIANT_BOOL ClosedV,
        VARIANT_BOOL ClosedU,
        long DegreeV,
        long DegreeU,
        long RowsCount,
        long ColumsCount,
        const _variant_t & Points,
        const _variant_t & Weights );
    VARIANT_BOOL InitParamByFace (
        struct IModelObject * Face );
    VARIANT_BOOL GetClosedU ( );
    void PutClosedU (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosedV ( );
    void PutClosedV (
        VARIANT_BOOL PVal );
    long GetDegreeU ( );
    void PutDegreeU (
        long PVal );
    long GetDegreeV ( );
    void PutDegreeV (
        long PVal );
    VARIANT_BOOL BeginPointsSeries (
        VARIANT_BOOL AddNewRow,
        long IndexAt );
    IKompasAPIObjectPtr AddPoint (
        double X,
        double Y,
        double Z,
        double Weight,
        enum ksPoint3DTypeEnum PointType,
        struct IModelObject * AssociationObject );
    VARIANT_BOOL EndPointsSeries ( );
    VARIANT_BOOL AddPointsSeries (
        VARIANT_BOOL AddNewRow,
        long IndexAt,
        const _variant_t & Points,
        const _variant_t & Weights );
    VARIANT_BOOL DeletePointsSeries (
        VARIANT_BOOL DeleteRow,
        long Index );
    VARIANT_BOOL ClearPointsSeries ( );
    long GetRowsCount ( );
    long GetColumnsCount ( );
    void PutPointType (
        long IRow,
        long ICol,
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointType (
        long IRow,
        long ICol );
    IKompasAPIObjectPtr GetPointParameters (
        long IRow,
        long ICol );
    VARIANT_BOOL GetPoint (
        long IRow,
        long ICol,
        double * X,
        double * Y,
        double * Z,
        double * Weight );
    VARIANT_BOOL SetPoint (
        long IRow,
        long ICol,
        double X,
        double Y,
        double Z,
        double Weight );
    VARIANT_BOOL GetCheckSelfIntersection ( );
    void PutCheckSelfIntersection (
        VARIANT_BOOL PVal );
    void PutAssociationObject (
        long IRow,
        long ICol,
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject (
        long IRow,
        long ICol );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksMeshPointsSurfaceBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksMeshPointsSurfaceBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall raw_GetParams (
        /*[out]*/ VARIANT_BOOL * ClosedV,
        /*[out]*/ VARIANT_BOOL * ClosedU,
        /*[out]*/ long * DegreeV,
        /*[out]*/ long * DegreeU,
        /*[out]*/ long * RowsCount,
        /*[out]*/ long * ColumsCount,
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Weights,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetParams (
        /*[in]*/ VARIANT_BOOL ClosedV,
        /*[in]*/ VARIANT_BOOL ClosedU,
        /*[in]*/ long DegreeV,
        /*[in]*/ long DegreeU,
        /*[in]*/ long RowsCount,
        /*[in]*/ long ColumsCount,
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Weights,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_InitParamByFace (
        /*[in]*/ struct IModelObject * Face,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ClosedU (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosedU (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ClosedV (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ClosedV (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DegreeU (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_DegreeU (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_DegreeV (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_DegreeV (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall raw_BeginPointsSeries (
        /*[in]*/ VARIANT_BOOL AddNewRow,
        /*[in]*/ long IndexAt,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double Weight,
        /*[in]*/ enum ksPoint3DTypeEnum PointType,
        /*[in]*/ struct IModelObject * AssociationObject,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_EndPointsSeries (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPointsSeries (
        /*[in]*/ VARIANT_BOOL AddNewRow,
        /*[in]*/ long IndexAt,
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Weights,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeletePointsSeries (
        /*[in]*/ VARIANT_BOOL DeleteRow,
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearPointsSeries (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_RowsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_ColumnsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ long IRow,
        /*[in]*/ long ICol,
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[in]*/ long IRow,
        /*[in]*/ long ICol,
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[in]*/ long IRow,
        /*[in]*/ long ICol,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long IRow,
        /*[in]*/ long ICol,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * Weight,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ long IRow,
        /*[in]*/ long ICol,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double Weight,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_CheckSelfIntersection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckSelfIntersection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ long IRow,
        /*[in]*/ long ICol,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ long IRow,
        /*[in]*/ long ICol,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("46afc862-e2da-432b-95a3-7971bfc82cb8"))
IMeshPointsSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetMeshPointsSurface))
    IMeshPointsSurfacePtr MeshPointsSurface[];

    //
    // Wrapper methods for error-handling
    //

    IMeshPointsSurfacePtr GetMeshPointsSurface (
        const _variant_t & Index );
    IMeshPointsSurfacePtr Add ( );
    IMeshPointsSurfacePtr Load (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MeshPointsSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMeshPointsSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IMeshPointsSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct IMeshPointsSurface * * Result ) = 0;
};

struct __declspec(uuid("f820f8c4-9c93-4513-8bbd-cc028daae41d"))
ICloudPointsSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksCloudPointsSurfaceBuildingTypeEnum BuildingType;
    __declspec(property(get=GetPoints,put=PutPoints))
    _variant_t Points;
    __declspec(property(get=GetDegree,put=PutDegree))
    long Degree;
    __declspec(property(get=GetCloudType,put=PutCloudType))
    enum ksCloudTypeEnum CloudType;
    __declspec(property(get=GetCloudLCS,put=PutCloudLCS))
    ILocalCoordinateSystemPtr CloudLCS;
    __declspec(property(get=GetFixedPosition,put=PutFixedPosition))
    VARIANT_BOOL FixedPosition;
    __declspec(property(get=GetPointsCount))
    long PointsCount;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum ksPoint3DTypeEnum PointType[];
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters[];
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject[];
    __declspec(property(get=GetCheckSelfIntersection,put=PutCheckSelfIntersection))
    VARIANT_BOOL CheckSelfIntersection;

    //
    // Wrapper methods for error-handling
    //

    enum ksCloudPointsSurfaceBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksCloudPointsSurfaceBuildingTypeEnum PVal );
    _variant_t GetPoints ( );
    void PutPoints (
        const _variant_t & Points );
    long GetDegree ( );
    void PutDegree (
        long PVal );
    enum ksCloudTypeEnum GetCloudType ( );
    void PutCloudType (
        enum ksCloudTypeEnum Type );
    ILocalCoordinateSystemPtr GetCloudLCS ( );
    void PutCloudLCS (
        struct ILocalCoordinateSystem * Object );
    VARIANT_BOOL GetFixedPosition ( );
    void PutFixedPosition (
        VARIANT_BOOL PVal );
    IKompasAPIObjectPtr AddPoint (
        double X,
        double Y,
        double Z,
        enum ksPoint3DTypeEnum PVal,
        struct IModelObject * AssociationObject );
    long GetPointsCount ( );
    void PutPointType (
        long Index,
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointType (
        long Index );
    IKompasAPIObjectPtr GetPointParameters (
        long Index );
    void PutAssociationObject (
        long Index,
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject (
        long Index );
    VARIANT_BOOL GetCheckSelfIntersection ( );
    void PutCheckSelfIntersection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL ClearPoints ( );
    VARIANT_BOOL AddPoints (
        const _variant_t & Points );
    VARIANT_BOOL GetPoint (
        long Index,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        long Index,
        double X,
        double Y,
        double Z );
    VARIANT_BOOL DeletePoint (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksCloudPointsSurfaceBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksCloudPointsSurfaceBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall put_Points (
        /*[in]*/ VARIANT Points ) = 0;
      virtual HRESULT __stdcall get_Degree (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Degree (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_CloudType (
        /*[out,retval]*/ enum ksCloudTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall put_CloudType (
        /*[in]*/ enum ksCloudTypeEnum Type ) = 0;
      virtual HRESULT __stdcall get_CloudLCS (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * Object ) = 0;
      virtual HRESULT __stdcall put_CloudLCS (
        /*[in]*/ struct ILocalCoordinateSystem * Object ) = 0;
      virtual HRESULT __stdcall get_FixedPosition (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedPosition (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ enum ksPoint3DTypeEnum PVal,
        /*[in]*/ struct IModelObject * AssociationObject,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_PointsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ long Index,
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ long Index,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_CheckSelfIntersection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckSelfIntersection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearPoints (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPoints (
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeletePoint (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("6ca7ce7a-12c8-4103-acc1-11001dd1b01d"))
ICloudPointsSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCloudPointsSurface))
    ICloudPointsSurfacePtr CloudPointsSurface[];

    //
    // Wrapper methods for error-handling
    //

    ICloudPointsSurfacePtr GetCloudPointsSurface (
        const _variant_t & Index );
    ICloudPointsSurfacePtr Add ( );
    ICloudPointsSurfacePtr Load (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CloudPointsSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICloudPointsSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICloudPointsSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct ICloudPointsSurface * * Result ) = 0;
};

struct __declspec(uuid("2b98dee2-3352-4f9b-85b7-f0d94742efa7"))
IImportedSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPointsVCount))
    long PointsVCount;
    __declspec(property(get=GetPointsUCount))
    long PointsUCount;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetPoints (
        long * UPCount,
        long * VPCount );
    VARIANT_BOOL SetPoints (
        long UPCount,
        long VPCount,
        const _variant_t & Points );
    VARIANT_BOOL ClearPointsSeries ( );
    VARIANT_BOOL BeginPointsSeries (
        VARIANT_BOOL UV,
        long IndexAt );
    VARIANT_BOOL AddPoint (
        double X,
        double Y,
        double Z );
    VARIANT_BOOL EndPointsSeries ( );
    VARIANT_BOOL AddPointsSeries (
        VARIANT_BOOL UV,
        long IndexAt,
        const _variant_t & Arr );
    long GetPointsVCount ( );
    long GetPointsUCount ( );
    VARIANT_BOOL GetPoint (
        long UIndex,
        long VIndex,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        long UIndex,
        long VIndex,
        double X,
        double Y,
        double Z );
    VARIANT_BOOL DeletePointsSeries (
        VARIANT_BOOL UV,
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPoints (
        /*[out]*/ long * UPCount,
        /*[out]*/ long * VPCount,
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall raw_SetPoints (
        /*[in]*/ long UPCount,
        /*[in]*/ long VPCount,
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearPointsSeries (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_BeginPointsSeries (
        /*[in]*/ VARIANT_BOOL UV,
        /*[in]*/ long IndexAt,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_EndPointsSeries (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPointsSeries (
        /*[in]*/ VARIANT_BOOL UV,
        /*[in]*/ long IndexAt,
        /*[in]*/ VARIANT Arr,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_PointsVCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_PointsUCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long UIndex,
        /*[in]*/ long VIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ long UIndex,
        /*[in]*/ long VIndex,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeletePointsSeries (
        /*[in]*/ VARIANT_BOOL UV,
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("7791ddc6-7c2d-450b-bb44-660b078e52d6"))
IImportedSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetImportedSurface))
    IImportedSurfacePtr ImportedSurface[];

    //
    // Wrapper methods for error-handling
    //

    IImportedSurfacePtr GetImportedSurface (
        const _variant_t & Index );
    IImportedSurfacePtr Add ( );
    _variant_t Load (
        _bstr_t FileName,
        VARIANT_BOOL SewSurfaces );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImportedSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IImportedSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IImportedSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL SewSurfaces,
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("d06fc62c-a572-4e6b-9c85-0a7d0f971079"))
INurbsSurfaceByCurvesMesh : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetUCurves,put=PutUCurves))
    _variant_t UCurves;
    __declspec(property(get=GetVCurves,put=PutVCurves))
    _variant_t VCurves;
    __declspec(property(get=GetCheckSelfIntersection,put=PutCheckSelfIntersection))
    VARIANT_BOOL CheckSelfIntersection;
    __declspec(property(get=GetUClosed,put=PutUClosed))
    VARIANT_BOOL UClosed;
    __declspec(property(get=GetVClosed,put=PutVClosed))
    VARIANT_BOOL VClosed;
    __declspec(property(get=GetConnectSurface,put=PutConnectSurface))
    IModelObjectPtr ConnectSurface[];
    __declspec(property(get=GetConnectType,put=PutConnectType))
    enum ksConnectTypeEnum ConnectType[];

    //
    // Wrapper methods for error-handling
    //

    void PutUCurves (
        const _variant_t & Curves );
    _variant_t GetUCurves ( );
    void PutVCurves (
        const _variant_t & Curves );
    _variant_t GetVCurves ( );
    void PutCheckSelfIntersection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCheckSelfIntersection ( );
    void PutUClosed (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUClosed ( );
    void PutVClosed (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVClosed ( );
    void PutConnectSurface (
        long Index,
        struct IModelObject * PVal );
    IModelObjectPtr GetConnectSurface (
        long Index );
    void PutConnectType (
        long Index,
        enum ksConnectTypeEnum PVal );
    enum ksConnectTypeEnum GetConnectType (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_UCurves (
        /*[in]*/ VARIANT Curves ) = 0;
      virtual HRESULT __stdcall get_UCurves (
        /*[out,retval]*/ VARIANT * Curves ) = 0;
      virtual HRESULT __stdcall put_VCurves (
        /*[in]*/ VARIANT Curves ) = 0;
      virtual HRESULT __stdcall get_VCurves (
        /*[out,retval]*/ VARIANT * Curves ) = 0;
      virtual HRESULT __stdcall put_CheckSelfIntersection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CheckSelfIntersection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UClosed (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UClosed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_VClosed (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_VClosed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ConnectSurface (
        /*[in]*/ long Index,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_ConnectSurface (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ConnectType (
        /*[in]*/ long Index,
        /*[in]*/ enum ksConnectTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ConnectType (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksConnectTypeEnum * PVal ) = 0;
};

struct __declspec(uuid("9ceec1df-a155-4702-ad18-0d851a4b85a8"))
INurbsSurfacesByCurvesMeshs : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetNurbsSurfaceByCurvesMesh))
    INurbsSurfaceByCurvesMeshPtr NurbsSurfaceByCurvesMesh[];

    //
    // Wrapper methods for error-handling
    //

    INurbsSurfaceByCurvesMeshPtr GetNurbsSurfaceByCurvesMesh (
        const _variant_t & Index );
    INurbsSurfaceByCurvesMeshPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NurbsSurfaceByCurvesMesh (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct INurbsSurfaceByCurvesMesh * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct INurbsSurfaceByCurvesMesh * * Result ) = 0;
};

struct __declspec(uuid("e9c8814e-a3c0-4e31-bffd-ed8f3dd13016"))
IJointSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurves1,put=PutCurves1))
    _variant_t Curves1;
    __declspec(property(get=GetCurves2,put=PutCurves2))
    _variant_t Curves2;
    __declspec(property(get=GetFace1,put=PutFace1))
    IModelObjectPtr Face1;
    __declspec(property(get=GetFace2,put=PutFace2))
    IModelObjectPtr Face2;
    __declspec(property(get=GetFace1ConnectType,put=PutFace1ConnectType))
    enum ksConnectTypeEnum Face1ConnectType;
    __declspec(property(get=GetFace2ConnectType,put=PutFace2ConnectType))
    enum ksConnectTypeEnum Face2ConnectType;
    __declspec(property(get=GetSense1,put=PutSense1))
    VARIANT_BOOL Sense1;
    __declspec(property(get=GetSense2,put=PutSense2))
    VARIANT_BOOL Sense2;
    __declspec(property(get=GetTension1,put=PutTension1))
    double Tension1;
    __declspec(property(get=GetTension2,put=PutTension2))
    double Tension2;
    __declspec(property(get=GetSideEdges1,put=PutSideEdges1))
    VARIANT_BOOL SideEdges1;
    __declspec(property(get=GetSideEdges2,put=PutSideEdges2))
    VARIANT_BOOL SideEdges2;
    __declspec(property(get=GetGeneralTension,put=PutGeneralTension))
    VARIANT_BOOL GeneralTension;
    __declspec(property(get=GetCheckSelfIntersection,put=PutCheckSelfIntersection))
    VARIANT_BOOL CheckSelfIntersection;
    __declspec(property(get=GetAutoSegmentation,put=PutAutoSegmentation))
    VARIANT_BOOL AutoSegmentation;
    __declspec(property(get=GetEdgesCount))
    long EdgesCount;

    //
    // Wrapper methods for error-handling
    //

    void PutCurves1 (
        const _variant_t & PVal );
    _variant_t GetCurves1 ( );
    void PutCurves2 (
        const _variant_t & PVal );
    _variant_t GetCurves2 ( );
    void PutFace1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetFace1 ( );
    void PutFace2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetFace2 ( );
    void PutFace1ConnectType (
        enum ksConnectTypeEnum PVal );
    enum ksConnectTypeEnum GetFace1ConnectType ( );
    void PutFace2ConnectType (
        enum ksConnectTypeEnum PVal );
    enum ksConnectTypeEnum GetFace2ConnectType ( );
    void PutSense1 (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSense1 ( );
    void PutSense2 (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSense2 ( );
    void PutTension1 (
        double PVal );
    double GetTension1 ( );
    void PutTension2 (
        double PVal );
    double GetTension2 ( );
    void PutSideEdges1 (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSideEdges1 ( );
    void PutSideEdges2 (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSideEdges2 ( );
    void PutGeneralTension (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetGeneralTension ( );
    void PutCheckSelfIntersection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCheckSelfIntersection ( );
    void PutAutoSegmentation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoSegmentation ( );
    VARIANT_BOOL AddNewEdge (
        long IndexAt );
    VARIANT_BOOL DeleteEdge (
        long Index );
    long GetEdgesCount ( );
    VARIANT_BOOL SetEdgePointParam (
        long EdgeIndex,
        VARIANT_BOOL StartPoint,
        double X,
        double Y,
        double Z,
        double * T,
        struct IModelObject * AssociateVertex );
    VARIANT_BOOL GetEdgePointParam (
        long EdgeIndex,
        VARIANT_BOOL StartPoint,
        double * X,
        double * Y,
        double * Z,
        double * T,
        struct IModelObject * * AssociateVertex );
    VARIANT_BOOL GetEdgePointParams (
        VARIANT * Points1,
        VARIANT * T1,
        VARIANT * AssociateVertexes1,
        VARIANT * Points2,
        VARIANT * T2,
        VARIANT * AssociateVertexes2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curves1 (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Curves1 (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Curves2 (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Curves2 (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Face1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Face1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Face2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Face2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Face1ConnectType (
        /*[in]*/ enum ksConnectTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Face1ConnectType (
        /*[out,retval]*/ enum ksConnectTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Face2ConnectType (
        /*[in]*/ enum ksConnectTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Face2ConnectType (
        /*[out,retval]*/ enum ksConnectTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Sense1 (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Sense1 (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Sense2 (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Sense2 (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Tension1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Tension1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Tension2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Tension2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SideEdges1 (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_SideEdges1 (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_SideEdges2 (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_SideEdges2 (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_GeneralTension (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_GeneralTension (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CheckSelfIntersection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CheckSelfIntersection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoSegmentation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSegmentation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewEdge (
        /*[in]*/ long IndexAt,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteEdge (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EdgesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetEdgePointParam (
        /*[in]*/ long EdgeIndex,
        /*[in]*/ VARIANT_BOOL StartPoint,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double * T,
        /*[in]*/ struct IModelObject * AssociateVertex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetEdgePointParam (
        /*[in]*/ long EdgeIndex,
        /*[in]*/ VARIANT_BOOL StartPoint,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * T,
        /*[out]*/ struct IModelObject * * AssociateVertex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetEdgePointParams (
        /*[out]*/ VARIANT * Points1,
        /*[out]*/ VARIANT * T1,
        /*[out]*/ VARIANT * AssociateVertexes1,
        /*[out]*/ VARIANT * Points2,
        /*[out]*/ VARIANT * T2,
        /*[out]*/ VARIANT * AssociateVertexes2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("c8ad51fa-5a71-4ee4-adb2-ddaaa90f1621"))
IJointSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetJointSurface))
    IJointSurfacePtr JointSurface[];

    //
    // Wrapper methods for error-handling
    //

    IJointSurfacePtr GetJointSurface (
        const _variant_t & Index );
    IJointSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_JointSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IJointSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IJointSurface * * Result ) = 0;
};

struct __declspec(uuid("ec25af95-4117-4fb6-a952-1fc72be32e60"))
IRestoredSurface : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFace,put=PutFace))
    IModelObjectPtr Face;

    //
    // Wrapper methods for error-handling
    //

    void PutFace (
        struct IModelObject * PVal );
    IModelObjectPtr GetFace ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Face (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("cf84b430-2579-49ca-b937-02354eb1f8a7"))
IRestoredSurfaces : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRestoredSurface))
    IRestoredSurfacePtr RestoredSurface[];

    //
    // Wrapper methods for error-handling
    //

    IRestoredSurfacePtr GetRestoredSurface (
        const _variant_t & Index );
    IRestoredSurfacePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RestoredSurface (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRestoredSurface * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRestoredSurface * * Result ) = 0;
};

struct __declspec(uuid("ca8a3896-61a1-4976-84af-ad5ba857adc5"))
IFaceMover : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFaces))
    _variant_t Faces;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetFaces ( );
    VARIANT_BOOL SetFaces (
        const _variant_t & Faces,
        VARIANT_BOOL TangentFaces );
    void PutOffset (
        double PVal );
    double GetOffset ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetFaces (
        /*[in]*/ VARIANT Faces,
        /*[in]*/ VARIANT_BOOL TangentFaces,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("fc5cb737-7393-40c3-9d8c-e4738469c967"))
IFaceMovers : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetFaceMover))
    IFaceMoverPtr FaceMover[];

    //
    // Wrapper methods for error-handling
    //

    IFaceMoverPtr GetFaceMover (
        const _variant_t & Index );
    IFaceMoverPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FaceMover (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IFaceMover * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IFaceMover * * Result ) = 0;
};

struct __declspec(uuid("faa408c7-1a43-499c-b2e2-06f29b48bcbb"))
ILinearPattern : IFeaturePattern
{
    //
    // Property data
    //

    __declspec(property(get=GetAxis1,put=PutAxis1))
    IModelObjectPtr Axis1;
    __declspec(property(get=GetVector1))
    IVector3DPtr Vector1;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetDirection1,put=PutDirection1))
    VARIANT_BOOL Direction1;
    __declspec(property(get=GetStep1,put=PutStep1))
    double Step1;
    __declspec(property(get=GetBoundaryInstancesStepFactor1,put=PutBoundaryInstancesStepFactor1))
    VARIANT_BOOL BoundaryInstancesStepFactor1;
    __declspec(property(get=GetCount1,put=PutCount1))
    long Count1;
    __declspec(property(get=GetAxis2,put=PutAxis2))
    IModelObjectPtr Axis2;
    __declspec(property(get=GetVector2))
    IVector3DPtr Vector2;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetDirection2,put=PutDirection2))
    VARIANT_BOOL Direction2;
    __declspec(property(get=GetStep2,put=PutStep2))
    double Step2;
    __declspec(property(get=GetBoundaryInstancesStepFactor2,put=PutBoundaryInstancesStepFactor2))
    VARIANT_BOOL BoundaryInstancesStepFactor2;
    __declspec(property(get=GetCount2,put=PutCount2))
    long Count2;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksLinearPatternBuildingTypeEnum BuildingType;

    //
    // Wrapper methods for error-handling
    //

    void PutAxis1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetAxis1 ( );
    IVector3DPtr GetVector1 ( );
    void PutAngle1 (
        double Val );
    double GetAngle1 ( );
    void PutDirection1 (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetDirection1 ( );
    void PutStep1 (
        double PVal );
    double GetStep1 ( );
    void PutBoundaryInstancesStepFactor1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBoundaryInstancesStepFactor1 ( );
    void PutCount1 (
        long Val );
    long GetCount1 ( );
    void PutAxis2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetAxis2 ( );
    IVector3DPtr GetVector2 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );
    void PutDirection2 (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetDirection2 ( );
    void PutStep2 (
        double PVal );
    double GetStep2 ( );
    void PutBoundaryInstancesStepFactor2 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBoundaryInstancesStepFactor2 ( );
    void PutCount2 (
        long PVal );
    long GetCount2 ( );
    void PutBuildingType (
        enum ksLinearPatternBuildingTypeEnum PVal );
    enum ksLinearPatternBuildingTypeEnum GetBuildingType ( );
    VARIANT_BOOL SetBaseExemplarPlacement (
        long Index1,
        long Index2 );
    VARIANT_BOOL GetBaseExemplarPlacement (
        long * Index1,
        long * Index2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Axis1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Axis1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Vector1 (
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double Val ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * Val ) = 0;
      virtual HRESULT __stdcall put_Direction1 (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_Direction1 (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_Step1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BoundaryInstancesStepFactor1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryInstancesStepFactor1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Count1 (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_Count1 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_Axis2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Axis2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Vector2 (
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction2 (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_Direction2 (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_Step2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BoundaryInstancesStepFactor2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryInstancesStepFactor2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Count2 (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count2 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksLinearPatternBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksLinearPatternBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetBaseExemplarPlacement (
        /*[in]*/ long Index1,
        /*[in]*/ long Index2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBaseExemplarPlacement (
        /*[out]*/ long * Index1,
        /*[out]*/ long * Index2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("4cf250ac-878e-4e7b-94de-f834cd13543f"))
IPointDrivenPattern : IFeaturePattern
{
    //
    // Property data
    //

    __declspec(property(get=GetDrivenObjects,put=PutDrivenObjects))
    _variant_t DrivenObjects;
    __declspec(property(get=GetProjectionPoints,put=PutProjectionPoints))
    VARIANT_BOOL ProjectionPoints;
    __declspec(property(get=GetSaveInitialOrientation,put=PutSaveInitialOrientation))
    VARIANT_BOOL SaveInitialOrientation;
    __declspec(property(get=GetOrientationType,put=PutOrientationType))
    enum ksPatternExemplarsOrientationTypeEnum OrientationType;
    __declspec(property(get=GetOrientationObject,put=PutOrientationObject))
    IModelObjectPtr OrientationObject;

    //
    // Wrapper methods for error-handling
    //

    void PutDrivenObjects (
        const _variant_t & Objects );
    _variant_t GetDrivenObjects ( );
    VARIANT_BOOL IsSuitableDrivenObject (
        struct IModelObject * Object );
    VARIANT_BOOL ClearDrivenObjects ( );
    void PutProjectionPoints (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetProjectionPoints ( );
    void PutSaveInitialOrientation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveInitialOrientation ( );
    void PutOrientationType (
        enum ksPatternExemplarsOrientationTypeEnum PVal );
    enum ksPatternExemplarsOrientationTypeEnum GetOrientationType ( );
    void PutOrientationObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetOrientationObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DrivenObjects (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall get_DrivenObjects (
        /*[out,retval]*/ VARIANT * Objects ) = 0;
      virtual HRESULT __stdcall raw_IsSuitableDrivenObject (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearDrivenObjects (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectionPoints (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionPoints (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveInitialOrientation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveInitialOrientation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_OrientationType (
        /*[in]*/ enum ksPatternExemplarsOrientationTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum ksPatternExemplarsOrientationTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_OrientationObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_OrientationObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("b1ed4ca8-0835-4465-925d-c137559a32e0"))
ICircularPattern : IFeaturePattern
{
    //
    // Property data
    //

    __declspec(property(get=GetAxis,put=PutAxis))
    IModelObjectPtr Axis;
    __declspec(property(get=GetStep1,put=PutStep1))
    double Step1;
    __declspec(property(get=GetBoundaryInstancesStepFactor1,put=PutBoundaryInstancesStepFactor1))
    VARIANT_BOOL BoundaryInstancesStepFactor1;
    __declspec(property(get=GetCount1,put=PutCount1))
    long Count1;
    __declspec(property(get=GetStep2,put=PutStep2))
    double Step2;
    __declspec(property(get=GetBoundaryInstancesStepFactor2,put=PutBoundaryInstancesStepFactor2))
    VARIANT_BOOL BoundaryInstancesStepFactor2;
    __declspec(property(get=GetCount2,put=PutCount2))
    long Count2;
    __declspec(property(get=GetSaveInitialOrientation,put=PutSaveInitialOrientation))
    VARIANT_BOOL SaveInitialOrientation;
    __declspec(property(get=GetReverseDirection,put=PutReverseDirection))
    VARIANT_BOOL ReverseDirection;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksCircularPatternBuildingTypeEnum BuildingType;
    __declspec(property(get=GetStepByAxis,put=PutStepByAxis))
    double StepByAxis;

    //
    // Wrapper methods for error-handling
    //

    void PutAxis (
        struct IModelObject * PVal );
    IModelObjectPtr GetAxis ( );
    void PutStep1 (
        double PVal );
    double GetStep1 ( );
    void PutBoundaryInstancesStepFactor1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBoundaryInstancesStepFactor1 ( );
    void PutCount1 (
        long Val );
    long GetCount1 ( );
    void PutStep2 (
        double PVal );
    double GetStep2 ( );
    void PutBoundaryInstancesStepFactor2 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBoundaryInstancesStepFactor2 ( );
    void PutCount2 (
        long PVal );
    long GetCount2 ( );
    void PutSaveInitialOrientation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveInitialOrientation ( );
    void PutReverseDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReverseDirection ( );
    VARIANT_BOOL SetBaseExemplarPlacement (
        long Index1,
        long Index2 );
    VARIANT_BOOL GetBaseExemplarPlacement (
        long * Index1,
        long * Index2 );
    void PutBuildingType (
        enum ksCircularPatternBuildingTypeEnum PVal );
    enum ksCircularPatternBuildingTypeEnum GetBuildingType ( );
    void PutStepByAxis (
        double PVal );
    double GetStepByAxis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Step1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BoundaryInstancesStepFactor1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryInstancesStepFactor1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Count1 (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_Count1 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_Step2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BoundaryInstancesStepFactor2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryInstancesStepFactor2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Count2 (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count2 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveInitialOrientation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveInitialOrientation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReverseDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReverseDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetBaseExemplarPlacement (
        /*[in]*/ long Index1,
        /*[in]*/ long Index2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBaseExemplarPlacement (
        /*[out]*/ long * Index1,
        /*[out]*/ long * Index2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksCircularPatternBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksCircularPatternBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_StepByAxis (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StepByAxis (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("b05fc37d-7d60-4291-be81-e4a9e23d4740"))
IPathPattern : IFeaturePattern
{
    //
    // Property data
    //

    __declspec(property(get=GetCurves,put=PutCurves))
    _variant_t Curves;
    __declspec(property(get=GetCount,put=PutCount))
    long Count;
    __declspec(property(get=GetStartingPoint,put=PutStartingPoint))
    IModelObjectPtr StartingPoint;
    __declspec(property(get=GetByStep,put=PutByStep))
    VARIANT_BOOL ByStep;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetBoundaryInstancesStepFactor,put=PutBoundaryInstancesStepFactor))
    VARIANT_BOOL BoundaryInstancesStepFactor;
    __declspec(property(get=GetSaveInitialOrientation,put=PutSaveInitialOrientation))
    VARIANT_BOOL SaveInitialOrientation;
    __declspec(property(get=GetReverseDirection,put=PutReverseDirection))
    VARIANT_BOOL ReverseDirection;

    //
    // Wrapper methods for error-handling
    //

    void PutCurves (
        const _variant_t & Curves );
    _variant_t GetCurves ( );
    void PutCount (
        long PVal );
    long GetCount ( );
    void PutStartingPoint (
        struct IModelObject * Object );
    IModelObjectPtr GetStartingPoint ( );
    void PutByStep (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetByStep ( );
    void PutStep (
        double PVal );
    double GetStep ( );
    void PutBoundaryInstancesStepFactor (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBoundaryInstancesStepFactor ( );
    void PutSaveInitialOrientation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveInitialOrientation ( );
    void PutReverseDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReverseDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curves (
        /*[in]*/ VARIANT Curves ) = 0;
      virtual HRESULT __stdcall get_Curves (
        /*[out,retval]*/ VARIANT * Curves ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_StartingPoint (
        /*[in]*/ struct IModelObject * Object ) = 0;
      virtual HRESULT __stdcall get_StartingPoint (
        /*[out,retval]*/ struct IModelObject * * Object ) = 0;
      virtual HRESULT __stdcall put_ByStep (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ByStep (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BoundaryInstancesStepFactor (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryInstancesStepFactor (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveInitialOrientation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveInitialOrientation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReverseDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReverseDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("575d30e2-efa3-40b5-9ca1-02a63e0d50d9"))
IDerivedPattern : IFeaturePattern
{
    //
    // Property data
    //

    __declspec(property(get=GetMasterPattern,put=PutMasterPattern))
    IModelObjectPtr MasterPattern;
    __declspec(property(get=GetOrientBySample,put=PutOrientBySample))
    VARIANT_BOOL OrientBySample;
    __declspec(property(get=GetSampleExemplar,put=PutSampleExemplar))
    IModelObjectPtr SampleExemplar;
    __declspec(property(get=GetAllowNesting,put=PutAllowNesting))
    VARIANT_BOOL AllowNesting;
    __declspec(property(get=GetAllowDeleted,put=PutAllowDeleted))
    VARIANT_BOOL AllowDeleted;

    //
    // Wrapper methods for error-handling
    //

    void PutMasterPattern (
        struct IModelObject * Object );
    IModelObjectPtr GetMasterPattern ( );
    void PutOrientBySample (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOrientBySample ( );
    void PutSampleExemplar (
        struct IModelObject * Object );
    IModelObjectPtr GetSampleExemplar ( );
    void PutAllowNesting (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAllowNesting ( );
    void PutAllowDeleted (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAllowDeleted ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_MasterPattern (
        /*[in]*/ struct IModelObject * Object ) = 0;
      virtual HRESULT __stdcall get_MasterPattern (
        /*[out,retval]*/ struct IModelObject * * Object ) = 0;
      virtual HRESULT __stdcall put_OrientBySample (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_OrientBySample (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SampleExemplar (
        /*[in]*/ struct IModelObject * Object ) = 0;
      virtual HRESULT __stdcall get_SampleExemplar (
        /*[out,retval]*/ struct IModelObject * * Object ) = 0;
      virtual HRESULT __stdcall put_AllowNesting (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AllowNesting (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AllowDeleted (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AllowDeleted (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("c039c103-ec51-4ff1-a870-7c016bc7a0d9"))
IVector3DBy2VertexesParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVertex1,put=PutVertex1))
    IModelObjectPtr Vertex1;
    __declspec(property(get=GetVertex2,put=PutVertex2))
    IModelObjectPtr Vertex2;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;

    //
    // Wrapper methods for error-handling
    //

    void PutVertex1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetVertex1 ( );
    void PutVertex2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetVertex2 ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Vertex1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Vertex1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Vertex2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Vertex2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("47c76e89-23c0-4a82-8dfc-f770f9f380c8"))
IMirrorPattern : IFeaturePattern
{
    //
    // Property data
    //

    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;
    __declspec(property(get=GetSaveInitialObjects,put=PutSaveInitialObjects))
    VARIANT_BOOL SaveInitialObjects;

    //
    // Wrapper methods for error-handling
    //

    void PutPlane (
        struct IModelObject * Object );
    IModelObjectPtr GetPlane ( );
    void PutSaveInitialObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveInitialObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * Object ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * Object ) = 0;
      virtual HRESULT __stdcall put_SaveInitialObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveInitialObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("794bec80-ebb3-4021-9710-2e7bdac66f63"))
IVector3DByCoefficientsParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalCS,put=PutLocalCS))
    ILocalCoordinateSystemPtr LocalCS;
    __declspec(property(get=GetCoefficientByX,put=PutCoefficientByX))
    double CoefficientByX;
    __declspec(property(get=GetCoefficientByY,put=PutCoefficientByY))
    double CoefficientByY;
    __declspec(property(get=GetCoefficientByZ,put=PutCoefficientByZ))
    double CoefficientByZ;

    //
    // Wrapper methods for error-handling
    //

    void PutLocalCS (
        struct ILocalCoordinateSystem * PVal );
    ILocalCoordinateSystemPtr GetLocalCS ( );
    void PutCoefficientByX (
        double PVal );
    double GetCoefficientByX ( );
    void PutCoefficientByY (
        double PVal );
    double GetCoefficientByY ( );
    void PutCoefficientByZ (
        double PVal );
    double GetCoefficientByZ ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LocalCS (
        /*[in]*/ struct ILocalCoordinateSystem * PVal ) = 0;
      virtual HRESULT __stdcall get_LocalCS (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * PVal ) = 0;
      virtual HRESULT __stdcall put_CoefficientByX (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CoefficientByX (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CoefficientByY (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CoefficientByY (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CoefficientByZ (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CoefficientByZ (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("7dc2a592-facb-4ab2-9b74-27d8116fd591"))
IVector3DBy2AnglesParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalCS,put=PutLocalCS))
    ILocalCoordinateSystemPtr LocalCS;
    __declspec(property(get=GetAngleA,put=PutAngleA))
    double AngleA;
    __declspec(property(get=GetAngleB,put=PutAngleB))
    double AngleB;

    //
    // Wrapper methods for error-handling
    //

    void PutLocalCS (
        struct ILocalCoordinateSystem * PVal );
    ILocalCoordinateSystemPtr GetLocalCS ( );
    void PutAngleA (
        double PVal );
    double GetAngleA ( );
    void PutAngleB (
        double PVal );
    double GetAngleB ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LocalCS (
        /*[in]*/ struct ILocalCoordinateSystem * PVal ) = 0;
      virtual HRESULT __stdcall get_LocalCS (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * PVal ) = 0;
      virtual HRESULT __stdcall put_AngleA (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_AngleA (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AngleB (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_AngleB (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("1e1f5be3-e502-41d1-b2eb-8a8216c49b18"))
IVector3DByLocalCSParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalCS,put=PutLocalCS))
    ILocalCoordinateSystemPtr LocalCS;
    __declspec(property(get=GetAxisType,put=PutAxisType))
    ksObj3dTypeEnum AxisType;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;

    //
    // Wrapper methods for error-handling
    //

    void PutLocalCS (
        struct ILocalCoordinateSystem * PVal );
    ILocalCoordinateSystemPtr GetLocalCS ( );
    void PutAxisType (
        ksObj3dTypeEnum PVal );
    ksObj3dTypeEnum GetAxisType ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LocalCS (
        /*[in]*/ struct ILocalCoordinateSystem * PVal ) = 0;
      virtual HRESULT __stdcall get_LocalCS (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * PVal ) = 0;
      virtual HRESULT __stdcall put_AxisType (
        /*[in]*/ ksObj3dTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_AxisType (
        /*[out,retval]*/ ksObj3dTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("4cbab5b7-2350-47eb-84da-2953f932d465"))
IVector3DByObjectParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IModelObjectPtr BaseObject;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;

    //
    // Wrapper methods for error-handling
    //

    void PutBaseObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetBaseObject ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("064cf423-8d27-41e5-84c4-303f286b38b1"))
IVector3DAlongSurfaceNormalParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IModelObjectPtr BaseObject;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetU,put=PutU))
    double U;
    __declspec(property(get=GetV,put=PutV))
    double V;

    //
    // Wrapper methods for error-handling
    //

    void PutBaseObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetBaseObject ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutU (
        double PVal );
    double GetU ( );
    void PutV (
        double PVal );
    double GetV ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_U (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_U (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_V (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_V (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("68c9d554-7df1-4509-9b41-007f123efb78"))
IVector3DByCurveParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurve,put=PutCurve))
    IModelObjectPtr Curve;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetVectorType,put=PutVectorType))
    enum ksBasisVectorTypeEnum VectorType;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;

    //
    // Wrapper methods for error-handling
    //

    void PutCurve (
        struct IModelObject * PVal );
    IModelObjectPtr GetCurve ( );
    void PutOffset (
        double PVal );
    double GetOffset ( );
    void PutVectorType (
        enum ksBasisVectorTypeEnum PVal );
    enum ksBasisVectorTypeEnum GetVectorType ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curve (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Curve (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_VectorType (
        /*[in]*/ enum ksBasisVectorTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_VectorType (
        /*[out,retval]*/ enum ksBasisVectorTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("f4593ca1-05e9-46f2-bf6c-4288371066d1"))
IVector3DByScreenNormalParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetFix,put=PutFix))
    VARIANT_BOOL Fix;

    //
    // Wrapper methods for error-handling
    //

    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutFix (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFix ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Fix (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Fix (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("115a16ef-b0c3-4deb-9d65-d2324fa075d8"))
ICutRotated : IRotated
{
    //
    // Property data
    //

    __declspec(property(get=GetCut,put=PutCut))
    VARIANT_BOOL Cut;

    //
    // Wrapper methods for error-handling
    //

    void PutCut (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCut ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Cut (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Cut (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("3191cebb-584c-4f58-82c1-a3771f73be12"))
IRotatedSurface : IRotated
{
    //
    // Property data
    //

    __declspec(property(get=GetClosedShell,put=PutClosedShell))
    VARIANT_BOOL ClosedShell;

    //
    // Wrapper methods for error-handling
    //

    void PutClosedShell (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosedShell ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ClosedShell (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ClosedShell (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("341ee39e-ec72-42a1-ba85-38f4ae2875cc"))
IPoint3DParamBySphere : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetR,put=PutR))
    double R;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject;
    __declspec(property(get=GetRadiusObject,put=PutRadiusObject))
    IModelObjectPtr RadiusObject;

    //
    // Wrapper methods for error-handling
    //

    void PutR (
        double PVal );
    double GetR ( );
    void PutA (
        double PVal );
    double GetA ( );
    void PutB (
        double PVal );
    double GetB ( );
    void PutAssociationObject (
        struct IModelObject * Result );
    IModelObjectPtr GetAssociationObject ( );
    void PutRadiusObject (
        struct IModelObject * Result );
    IModelObjectPtr GetRadiusObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_R (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_R (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_RadiusObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_RadiusObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("98d8aa95-b217-4cd7-8bb4-c419f9042acf"))
IPoint3DParamByCylinder : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetR,put=PutR))
    double R;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject;
    __declspec(property(get=GetRadiusObject,put=PutRadiusObject))
    IModelObjectPtr RadiusObject;

    //
    // Wrapper methods for error-handling
    //

    void PutR (
        double PVal );
    double GetR ( );
    void PutA (
        double PVal );
    double GetA ( );
    void PutZ (
        double PVal );
    double GetZ ( );
    void PutAssociationObject (
        struct IModelObject * Result );
    IModelObjectPtr GetAssociationObject ( );
    void PutRadiusObject (
        struct IModelObject * Result );
    IModelObjectPtr GetRadiusObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_R (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_R (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_RadiusObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_RadiusObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("2cb26ab2-09b9-4b7f-a776-ef02ab25fb78"))
IMeshAroundPointParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeshType,put=PutMeshType))
    enum ksMeshAroundPointTypeEnum MeshType;
    __declspec(property(get=GetOffsetU,put=PutOffsetU))
    double OffsetU;
    __declspec(property(get=GetOffsetV,put=PutOffsetV))
    double OffsetV;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject;
    __declspec(property(get=GetStep1,put=PutStep1))
    double Step1;
    __declspec(property(get=GetStep2,put=PutStep2))
    double Step2;
    __declspec(property(get=GetStepU,put=PutStepU))
    double StepU;
    __declspec(property(get=GetStepV,put=PutStepV))
    double StepV;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetRayCount,put=PutRayCount))
    long RayCount;
    __declspec(property(get=GetRadialStep,put=PutRadialStep))
    double RadialStep;
    __declspec(property(get=GetMeshAngle,put=PutMeshAngle))
    double MeshAngle;

    //
    // Wrapper methods for error-handling
    //

    void PutMeshType (
        enum ksMeshAroundPointTypeEnum PVal );
    enum ksMeshAroundPointTypeEnum GetMeshType ( );
    void PutOffsetU (
        double PVal );
    double GetOffsetU ( );
    void PutOffsetV (
        double PVal );
    double GetOffsetV ( );
    void PutAssociationObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject ( );
    VARIANT_BOOL GetOffsetPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetOffsetPoint (
        double X,
        double Y,
        double Z );
    void PutStep1 (
        double PVal );
    double GetStep1 ( );
    void PutStep2 (
        double PVal );
    double GetStep2 ( );
    void PutStepU (
        double PVal );
    double GetStepU ( );
    void PutStepV (
        double PVal );
    double GetStepV ( );
    void PutStep (
        double PVal );
    double GetStep ( );
    void PutRayCount (
        long PVal );
    long GetRayCount ( );
    void PutRadialStep (
        double PVal );
    double GetRadialStep ( );
    void PutMeshAngle (
        double PVal );
    double GetMeshAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_MeshType (
        /*[in]*/ enum ksMeshAroundPointTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_MeshType (
        /*[out,retval]*/ enum ksMeshAroundPointTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetU (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetU (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetV (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetV (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetOffsetPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetOffsetPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Step1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepU (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StepU (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepV (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StepV (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RayCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_RayCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_RadialStep (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_RadialStep (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MeshAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_MeshAngle (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("8cf29d41-23e9-4e19-8df7-c56560f1a237"))
IAxis3DBy2Points : IAxis3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint1,put=PutPoint1))
    IModelObjectPtr Point1;
    __declspec(property(get=GetPoint2,put=PutPoint2))
    IModelObjectPtr Point2;

    //
    // Wrapper methods for error-handling
    //

    void PutPoint1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetPoint1 ( );
    void PutPoint2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetPoint2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Point1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Point1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Point2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Point2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("ae53df83-5d00-4851-bbcd-bedfca50bf1c"))
IAxis3DBy2Planes : IAxis3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPlane1,put=PutPlane1))
    IModelObjectPtr Plane1;
    __declspec(property(get=GetPlane2,put=PutPlane2))
    IModelObjectPtr Plane2;

    //
    // Wrapper methods for error-handling
    //

    void PutPlane1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetPlane1 ( );
    void PutPlane2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetPlane2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Plane1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Plane1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Plane2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Plane2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("2e23903d-9c7c-42b5-861a-a28da3eea2e6"))
IAxis3DByConeface : IAxis3D
{
    //
    // Property data
    //

    __declspec(property(get=GetFace,put=PutFace))
    IModelObjectPtr Face;

    //
    // Wrapper methods for error-handling
    //

    void PutFace (
        struct IModelObject * PVal );
    IModelObjectPtr GetFace ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Face (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("95be2f02-3b18-4bbc-9451-54b4ab70cc7a"))
IAxis3DByEdge : IAxis3D
{
    //
    // Property data
    //

    __declspec(property(get=GetEdge,put=PutEdge))
    IModelObjectPtr Edge;

    //
    // Wrapper methods for error-handling
    //

    void PutEdge (
        struct IModelObject * PVal );
    IModelObjectPtr GetEdge ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Edge (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("2cc2e874-b336-4a24-bd03-9ac7e30123b6"))
IAxis3DByPointAndObject : IAxis3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint,put=PutPoint))
    IModelObjectPtr Point;
    __declspec(property(get=GetDirectObject,put=PutDirectObject))
    IModelObjectPtr DirectObject;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;
    __declspec(property(get=GetParallel,put=PutParallel))
    VARIANT_BOOL Parallel;

    //
    // Wrapper methods for error-handling
    //

    void PutPoint (
        struct IModelObject * PVal );
    IModelObjectPtr GetPoint ( );
    void PutDirectObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetDirectObject ( );
    IVector3DPtr GetVector3D ( );
    void PutParallel (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetParallel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_DirectObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DirectObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * Val ) = 0;
      virtual HRESULT __stdcall put_Parallel (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Parallel (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("c068bbe9-180d-4d82-a827-124166a451ee"))
IAxis3DByOperation : IAxis3D
{
    //
    // Property data
    //

    __declspec(property(get=GetOperation,put=PutOperation))
    IModelObjectPtr Operation;

    //
    // Wrapper methods for error-handling
    //

    void PutOperation (
        struct IModelObject * PVal );
    IModelObjectPtr GetOperation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Operation (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Operation (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("b815e0a4-a837-48ab-9fd8-3e9cdd5a0ab0"))
IPlane3DByPlaneCurve : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetCurve,put=PutCurve))
    IModelObjectPtr Curve;

    //
    // Wrapper methods for error-handling
    //

    void PutCurve (
        struct IModelObject * PVal );
    IModelObjectPtr GetCurve ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Curve (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Curve (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("5ede5e22-2d26-4ae2-a765-8ca314eaad85"))
IPlane3DTangentToFaceInPoint : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetFace,put=PutFace))
    IModelObjectPtr Face;
    __declspec(property(get=GetPoint,put=PutPoint))
    IModelObjectPtr Point;
    __declspec(property(get=GetParamU,put=PutParamU))
    double ParamU;
    __declspec(property(get=GetParamV,put=PutParamV))
    double ParamV;

    //
    // Wrapper methods for error-handling
    //

    void PutFace (
        struct IModelObject * PVal );
    IModelObjectPtr GetFace ( );
    void PutPoint (
        struct IModelObject * PVal );
    IModelObjectPtr GetPoint ( );
    void PutParamU (
        double PVal );
    double GetParamU ( );
    void PutParamV (
        double PVal );
    double GetParamV ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Face (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ParamU (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ParamU (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ParamV (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ParamV (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("5f5e0fa2-84d7-44d1-a946-018ebeb82926"))
IPlane3DByOffset : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    IModelObjectPtr BasePlane;

    //
    // Wrapper methods for error-handling
    //

    void PutOffset (
        double PVal );
    double GetOffset ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutBasePlane (
        struct IModelObject * Result );
    IModelObjectPtr GetBasePlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("1a0e3dc8-f3f9-4c73-a3d6-87168b1e0dbd"))
IPlane3DBy3Points : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint1,put=PutPoint1))
    IModelObjectPtr Point1;
    __declspec(property(get=GetPoint2,put=PutPoint2))
    IModelObjectPtr Point2;
    __declspec(property(get=GetPoint3,put=PutPoint3))
    IModelObjectPtr Point3;

    //
    // Wrapper methods for error-handling
    //

    void PutPoint1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetPoint1 ( );
    void PutPoint2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetPoint2 ( );
    void PutPoint3 (
        struct IModelObject * PVal );
    IModelObjectPtr GetPoint3 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Point1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Point1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Point2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Point2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Point3 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Point3 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("4ad8121e-95bb-4b0f-b1d8-e0394a72dee2"))
IPlane3DByAngle : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    IModelObjectPtr BasePlane;
    __declspec(property(get=GetBaseLine,put=PutBaseLine))
    IModelObjectPtr BaseLine;

    //
    // Wrapper methods for error-handling
    //

    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutBasePlane (
        struct IModelObject * Result );
    IModelObjectPtr GetBasePlane ( );
    void PutBaseLine (
        struct IModelObject * Result );
    IModelObjectPtr GetBaseLine ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_BaseLine (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_BaseLine (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("5d170073-faa3-4e00-a4b4-27e166556626"))
IPlane3DByEdgeAndPoint : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint,put=PutPoint))
    IModelObjectPtr Point;
    __declspec(property(get=GetEdge,put=PutEdge))
    IModelObjectPtr Edge;

    //
    // Wrapper methods for error-handling
    //

    void PutPoint (
        struct IModelObject * Result );
    IModelObjectPtr GetPoint ( );
    void PutEdge (
        struct IModelObject * Result );
    IModelObjectPtr GetEdge ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Edge (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("b9fcc89d-d48c-4090-b092-b0f016b84d58"))
IPlane3DParallelByPoint : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint,put=PutPoint))
    IModelObjectPtr Point;
    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;

    //
    // Wrapper methods for error-handling
    //

    void PutPoint (
        struct IModelObject * Result );
    IModelObjectPtr GetPoint ( );
    void PutPlane (
        struct IModelObject * Result );
    IModelObjectPtr GetPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("972d817b-dec8-41f7-9307-a6d368975f2f"))
IPlane3DPerpendicularByEdge : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint,put=PutPoint))
    IModelObjectPtr Point;
    __declspec(property(get=GetEdge,put=PutEdge))
    IModelObjectPtr Edge;
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D;

    //
    // Wrapper methods for error-handling
    //

    void PutPoint (
        struct IModelObject * Result );
    IModelObjectPtr GetPoint ( );
    void PutEdge (
        struct IModelObject * Result );
    IModelObjectPtr GetEdge ( );
    IVector3DPtr GetVector3D ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Point (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Edge (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[out,retval]*/ struct IVector3D * * Result ) = 0;
};

struct __declspec(uuid("054f3818-eabb-426a-b55a-867152cef8bd"))
IPlane3DNormalToSurface : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;
    __declspec(property(get=GetFace,put=PutFace))
    IModelObjectPtr Face;
    __declspec(property(get=GetAngleDirection,put=PutAngleDirection))
    VARIANT_BOOL AngleDirection;

    //
    // Wrapper methods for error-handling
    //

    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutPlane (
        struct IModelObject * Result );
    IModelObjectPtr GetPlane ( );
    void PutFace (
        struct IModelObject * Result );
    IModelObjectPtr GetFace ( );
    void PutAngleDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAngleDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Face (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_AngleDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AngleDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("70190dea-7da4-4305-ad83-90d2637697be"))
IPlane3DMiddle : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetObject1,put=PutObject1))
    IModelObjectPtr Object1;
    __declspec(property(get=GetObject2,put=PutObject2))
    IModelObjectPtr Object2;
    __declspec(property(get=GetOriention,put=PutOriention))
    VARIANT_BOOL Oriention;

    //
    // Wrapper methods for error-handling
    //

    void PutObject1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetObject1 ( );
    void PutObject2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetObject2 ( );
    void PutOriention (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOriention ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Object1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Object1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Object2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Object2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Oriention (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Oriention (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("ea6f2004-7996-4873-abe4-8c88ac597abc"))
IPlane3DByEdgeAndPlane : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;
    __declspec(property(get=GetEdge,put=PutEdge))
    IModelObjectPtr Edge;
    __declspec(property(get=GetParallel,put=PutParallel))
    VARIANT_BOOL Parallel;

    //
    // Wrapper methods for error-handling
    //

    void PutPlane (
        struct IModelObject * PVal );
    IModelObjectPtr GetPlane ( );
    void PutEdge (
        struct IModelObject * PVal );
    IModelObjectPtr GetEdge ( );
    void PutParallel (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetParallel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Edge (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Parallel (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Parallel (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("a4c4d3b7-0daf-43ab-b2c2-bd3fcb6a5f8f"))
IPlane3DBy2Edge : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetEdge1,put=PutEdge1))
    IModelObjectPtr Edge1;
    __declspec(property(get=GetEdge2,put=PutEdge2))
    IModelObjectPtr Edge2;
    __declspec(property(get=GetParallel,put=PutParallel))
    VARIANT_BOOL Parallel;

    //
    // Wrapper methods for error-handling
    //

    void PutEdge1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetEdge1 ( );
    void PutEdge2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetEdge2 ( );
    void PutParallel (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetParallel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Edge1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Edge1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Edge2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Edge2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Parallel (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Parallel (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("a9a97838-3b17-4903-ae8c-82543c91d272"))
IPlane3DTangentToFace : IPlane3D
{
    //
    // Property data
    //

    __declspec(property(get=GetFace,put=PutFace))
    IModelObjectPtr Face;
    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    VARIANT_BOOL Orientation;

    //
    // Wrapper methods for error-handling
    //

    void PutFace (
        struct IModelObject * PVal );
    IModelObjectPtr GetFace ( );
    void PutPlane (
        struct IModelObject * PVal );
    IModelObjectPtr GetPlane ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutOrientation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Face (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("07c35e20-5554-4c10-b0d4-5b07dd9ce842"))
IToleranceRecalc : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCurrent,put=PutCurrent))
    VARIANT_BOOL Current;
    __declspec(property(get=GetItemsCount))
    long ItemsCount;
    __declspec(property(get=GetItem))
    IKompasAPIObjectPtr Item[];
    __declspec(property(get=GetRecalcType,put=PutRecalcType))
    enum ksToleranceRecalcsEnum RecalcType[];
    __declspec(property(get=GetRecalcUserType,put=PutRecalcUserType))
    _bstr_t RecalcUserType[];
    __declspec(property(get=GetCoefficient,put=PutCoefficient))
    double Coefficient[];
    __declspec(property(get=GetId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    void PutCurrent (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCurrent ( );
    long GetItemsCount ( );
    IKompasAPIObjectPtr GetItem (
        const _variant_t & Index );
    VARIANT_BOOL AddItems (
        struct IKompasAPIObject * Object );
    VARIANT_BOOL AddAllVariables ( );
    VARIANT_BOOL DeleteItem (
        const _variant_t & Index );
    void PutRecalcType (
        const _variant_t & Index,
        enum ksToleranceRecalcsEnum PVal );
    enum ksToleranceRecalcsEnum GetRecalcType (
        const _variant_t & Index );
    void PutRecalcUserType (
        const _variant_t & Index,
        _bstr_t PVal );
    _bstr_t GetRecalcUserType (
        const _variant_t & Index );
    void PutCoefficient (
        const _variant_t & Index,
        double PVal );
    double GetCoefficient (
        const _variant_t & Index );
    long GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ItemsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddItems (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddAllVariables (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteItem (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_RecalcType (
        /*[in]*/ VARIANT Index,
        /*[in]*/ enum ksToleranceRecalcsEnum PVal ) = 0;
      virtual HRESULT __stdcall get_RecalcType (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ enum ksToleranceRecalcsEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_RecalcUserType (
        /*[in]*/ VARIANT Index,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_RecalcUserType (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Coefficient (
        /*[in]*/ VARIANT Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Coefficient (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("b7134661-5e97-45db-9208-5e1e49bef9c2"))
IToleranceRecalcsManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRecalcsCount))
    long RecalcsCount;
    __declspec(property(get=GetToleranceMode,put=PutToleranceMode))
    VARIANT_BOOL ToleranceMode;
    __declspec(property(get=GetCurrentRecalc))
    IToleranceRecalcPtr CurrentRecalc;

    //
    // Wrapper methods for error-handling
    //

    long GetRecalcsCount ( );
    IToleranceRecalcPtr AddRecalc ( );
    IToleranceRecalcPtr AddRecalcCopy (
        struct IToleranceRecalc * Source );
    IToleranceRecalcPtr GetRecalc (
        const _variant_t & Index );
    void PutToleranceMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetToleranceMode ( );
    VARIANT_BOOL SaveRecalcModel (
        _bstr_t FileName );
    IToleranceRecalcPtr GetCurrentRecalc ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RecalcsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddRecalc (
        /*[out,retval]*/ struct IToleranceRecalc * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddRecalcCopy (
        /*[in]*/ struct IToleranceRecalc * Source,
        /*[out,retval]*/ struct IToleranceRecalc * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetRecalc (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IToleranceRecalc * * Result ) = 0;
      virtual HRESULT __stdcall put_ToleranceMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SaveRecalcModel (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_CurrentRecalc (
        /*[out,retval]*/ struct IToleranceRecalc * * PVal ) = 0;
};

struct __declspec(uuid("527ccf94-b32b-413b-8b0b-4afd3705cddf"))
IMate3DByAngle : IMateConstraint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle3D,put=PutAngle3D))
    VARIANT_BOOL Angle3D;
    __declspec(property(get=GetAxis,put=PutAxis))
    IModelObjectPtr Axis;

    //
    // Wrapper methods for error-handling
    //

    void PutAngle3D (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAngle3D ( );
    void PutAxis (
        struct IModelObject * PVal );
    IModelObjectPtr GetAxis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Angle3D (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Angle3D (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("8d3897d5-a2d1-4ccb-b479-e629b50cf12f"))
IMate3DByTangent : IMateConstraint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetTangentType,put=PutTangentType))
    enum ksMateTangentTypeEnum TangentType;

    //
    // Wrapper methods for error-handling
    //

    void PutTangentType (
        enum ksMateTangentTypeEnum PVal );
    enum ksMateTangentTypeEnum GetTangentType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_TangentType (
        /*[in]*/ enum ksMateTangentTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_TangentType (
        /*[out,retval]*/ enum ksMateTangentTypeEnum * PVal ) = 0;
};

struct __declspec(uuid("b6ca167c-64a4-4f46-a2e2-cbc5bb019351"))
IMate3DSymmetry : IMateConstraint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;

    //
    // Wrapper methods for error-handling
    //

    void PutPlane (
        struct IModelObject * PVal );
    IModelObjectPtr GetPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("52b90d96-d338-4a92-99d9-a90b9d2ff918"))
IMate3DTransmission : IMateConstraint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetMotionType1,put=PutMotionType1))
    enum ksMateMotionTypeEnum MotionType1;
    __declspec(property(get=GetMotionType2,put=PutMotionType2))
    enum ksMateMotionTypeEnum MotionType2;
    __declspec(property(get=GetRotationAxis1,put=PutRotationAxis1))
    IModelObjectPtr RotationAxis1;
    __declspec(property(get=GetRotationAxis2,put=PutRotationAxis2))
    IModelObjectPtr RotationAxis2;
    __declspec(property(get=GetTrajectory1,put=PutTrajectory1))
    IModelObjectPtr Trajectory1;
    __declspec(property(get=GetTrajectory2,put=PutTrajectory2))
    IModelObjectPtr Trajectory2;
    __declspec(property(get=GetDirection1,put=PutDirection1))
    VARIANT_BOOL Direction1;
    __declspec(property(get=GetDirection2,put=PutDirection2))
    VARIANT_BOOL Direction2;
    __declspec(property(get=GetScale1))
    double Scale1;
    __declspec(property(get=GetScale2))
    double Scale2;

    //
    // Wrapper methods for error-handling
    //

    void PutMotionType1 (
        enum ksMateMotionTypeEnum PVal );
    enum ksMateMotionTypeEnum GetMotionType1 ( );
    void PutMotionType2 (
        enum ksMateMotionTypeEnum PVal );
    enum ksMateMotionTypeEnum GetMotionType2 ( );
    void PutRotationAxis1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetRotationAxis1 ( );
    void PutRotationAxis2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetRotationAxis2 ( );
    void PutTrajectory1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetTrajectory1 ( );
    void PutTrajectory2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetTrajectory2 ( );
    void PutDirection1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection1 ( );
    void PutDirection2 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection2 ( );
    double GetScale1 ( );
    double GetScale2 ( );
    VARIANT_BOOL SetScale (
        double Scale1,
        double Scale2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_MotionType1 (
        /*[in]*/ enum ksMateMotionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_MotionType1 (
        /*[out,retval]*/ enum ksMateMotionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_MotionType2 (
        /*[in]*/ enum ksMateMotionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_MotionType2 (
        /*[out,retval]*/ enum ksMateMotionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_RotationAxis1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_RotationAxis1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_RotationAxis2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_RotationAxis2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Trajectory1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Trajectory2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Scale1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Scale2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetScale (
        /*[in]*/ double Scale1,
        /*[in]*/ double Scale2,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("68ef30fe-933c-4f3a-bb9e-098adcc66368"))
IMate3DCamGear : IMateConstraint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetCamFaces,put=PutCamFaces))
    _variant_t CamFaces;
    __declspec(property(get=GetRotationAxis,put=PutRotationAxis))
    IModelObjectPtr RotationAxis;
    __declspec(property(get=GetFollowerFace,put=PutFollowerFace))
    IModelObjectPtr FollowerFace;
    __declspec(property(get=GetTrajectory,put=PutTrajectory))
    IModelObjectPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    void PutCamFaces (
        const _variant_t & PVal );
    _variant_t GetCamFaces ( );
    void PutRotationAxis (
        struct IModelObject * PVal );
    IModelObjectPtr GetRotationAxis ( );
    void PutFollowerFace (
        struct IModelObject * PVal );
    IModelObjectPtr GetFollowerFace ( );
    void PutTrajectory (
        struct IModelObject * PVal );
    IModelObjectPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CamFaces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_CamFaces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_RotationAxis (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_RotationAxis (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_FollowerFace (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_FollowerFace (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Trajectory (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("02b548bf-05ec-4fc6-944f-f4e50ab354cd"))
ICountersinkHoleParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCountersinkType,put=PutCountersinkType))
    enum ksCountersinkTypeEnum CountersinkType;
    __declspec(property(get=GetCountersinkDiameter,put=PutCountersinkDiameter))
    double CountersinkDiameter;
    __declspec(property(get=GetCountersinkAngle,put=PutCountersinkAngle))
    double CountersinkAngle;
    __declspec(property(get=GetCountersinkDepth,put=PutCountersinkDepth))
    double CountersinkDepth;

    //
    // Wrapper methods for error-handling
    //

    enum ksCountersinkTypeEnum GetCountersinkType ( );
    void PutCountersinkType (
        enum ksCountersinkTypeEnum PVal );
    double GetCountersinkDiameter ( );
    void PutCountersinkDiameter (
        double PVal );
    double GetCountersinkAngle ( );
    void PutCountersinkAngle (
        double PVal );
    double GetCountersinkDepth ( );
    void PutCountersinkDepth (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CountersinkType (
        /*[out,retval]*/ enum ksCountersinkTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CountersinkType (
        /*[in]*/ enum ksCountersinkTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CountersinkDiameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CountersinkDiameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CountersinkAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CountersinkAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CountersinkDepth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CountersinkDepth (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("3ebdd778-87eb-4357-bf08-47bcde5abb5d"))
ISpotfacingHoleParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSpotfacingDiameter,put=PutSpotfacingDiameter))
    double SpotfacingDiameter;
    __declspec(property(get=GetSpotfacingDepth,put=PutSpotfacingDepth))
    double SpotfacingDepth;

    //
    // Wrapper methods for error-handling
    //

    double GetSpotfacingDiameter ( );
    void PutSpotfacingDiameter (
        double PVal );
    double GetSpotfacingDepth ( );
    void PutSpotfacingDepth (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpotfacingDiameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SpotfacingDiameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SpotfacingDepth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SpotfacingDepth (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("c92c6cdf-5cde-456c-a235-67c3e43bb141"))
ICountersinkSpotfacingHoleParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSpotfacingCountersinkDiameter,put=PutSpotfacingCountersinkDiameter))
    double SpotfacingCountersinkDiameter;
    __declspec(property(get=GetSpotfacingDepth,put=PutSpotfacingDepth))
    double SpotfacingDepth;
    __declspec(property(get=GetCountersinkAngle,put=PutCountersinkAngle))
    double CountersinkAngle;

    //
    // Wrapper methods for error-handling
    //

    double GetSpotfacingCountersinkDiameter ( );
    void PutSpotfacingCountersinkDiameter (
        double PVal );
    double GetSpotfacingDepth ( );
    void PutSpotfacingDepth (
        double PVal );
    double GetCountersinkAngle ( );
    void PutCountersinkAngle (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpotfacingCountersinkDiameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SpotfacingCountersinkDiameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SpotfacingDepth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SpotfacingDepth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CountersinkAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CountersinkAngle (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("9110f9b1-83f0-4412-b2fe-2b1f416a0932"))
IConicHoleParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetConicType,put=PutConicType))
    enum ksConicTypeEnum ConicType;
    __declspec(property(get=GetConicDiameter,put=PutConicDiameter))
    double ConicDiameter;
    __declspec(property(get=GetConicAngle,put=PutConicAngle))
    double ConicAngle;

    //
    // Wrapper methods for error-handling
    //

    enum ksConicTypeEnum GetConicType ( );
    void PutConicType (
        enum ksConicTypeEnum PVal );
    double GetConicDiameter ( );
    void PutConicDiameter (
        double PVal );
    double GetConicAngle ( );
    void PutConicAngle (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConicType (
        /*[out,retval]*/ enum ksConicTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ConicType (
        /*[in]*/ enum ksConicTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ConicDiameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ConicDiameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ConicAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ConicAngle (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("071c7a25-91e2-4c9d-954a-ca0fa0e94863"))
IHoleDisposal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseSurface,put=PutBaseSurface))
    IModelObjectPtr BaseSurface;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum ksPoint3DSurfaceParamTypeEnum OffsetType;
    __declspec(property(get=GetPoint3DParamSurface))
    IKompasAPIObjectPtr Point3DParamSurface;
    __declspec(property(get=GetAssociationVertex,put=PutAssociationVertex))
    IModelObjectPtr AssociationVertex;
    __declspec(property(get=GetPerpendicular,put=PutPerpendicular))
    VARIANT_BOOL Perpendicular;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetProcessCanopy,put=PutProcessCanopy))
    VARIANT_BOOL ProcessCanopy;
    __declspec(property(get=GetVector))
    IVector3DPtr Vector;
    __declspec(property(get=GetDirectionObject,put=PutDirectionObject))
    IModelObjectPtr DirectionObject;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetBaseSurface ( );
    void PutBaseSurface (
        struct IModelObject * PVal );
    enum ksPoint3DSurfaceParamTypeEnum GetOffsetType ( );
    void PutOffsetType (
        enum ksPoint3DSurfaceParamTypeEnum PVal );
    IKompasAPIObjectPtr GetPoint3DParamSurface ( );
    IModelObjectPtr GetAssociationVertex ( );
    void PutAssociationVertex (
        struct IModelObject * PVal );
    VARIANT_BOOL GetPerpendicular ( );
    void PutPerpendicular (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetProcessCanopy ( );
    void PutProcessCanopy (
        VARIANT_BOOL PVal );
    IVector3DPtr GetVector ( );
    IModelObjectPtr GetDirectionObject ( );
    void PutDirectionObject (
        struct IModelObject * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseSurface (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseSurface (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum ksPoint3DSurfaceParamTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_OffsetType (
        /*[in]*/ enum ksPoint3DSurfaceParamTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Point3DParamSurface (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationVertex (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationVertex (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Perpendicular (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Perpendicular (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ProcessCanopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ProcessCanopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IVector3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_DirectionObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_DirectionObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
};

struct __declspec(uuid("585e265f-0aad-4a42-8030-3a69882a9b39"))
IVertex : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetIsFreeVertex))
    VARIANT_BOOL IsFreeVertex;
    __declspec(property(get=GetIsTopologyVertex))
    VARIANT_BOOL IsTopologyVertex;
    __declspec(property(get=GetIsSketchVertex))
    VARIANT_BOOL IsSketchVertex;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPoint (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetIsFreeVertex ( );
    VARIANT_BOOL GetIsTopologyVertex ( );
    VARIANT_BOOL GetIsSketchVertex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsFreeVertex (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsTopologyVertex (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsSketchVertex (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("299a549e-3f82-4f60-98a3-258d632aa635"))
IFace : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface3DType))
    enum ksMathSurface3DTypeEnum Surface3DType;
    __declspec(property(get=GetBaseSurface3DType))
    enum ksMathSurface3DTypeEnum BaseSurface3DType;
    __declspec(property(get=GetMathSurface))
    IMathSurface3DPtr MathSurface;
    __declspec(property(get=GetNormalOrientation))
    VARIANT_BOOL NormalOrientation;
    __declspec(property(get=GetLoops))
    _variant_t Loops;
    __declspec(property(get=GetConnectedFaces))
    _variant_t ConnectedFaces;
    __declspec(property(get=GetLimitingEdges))
    _variant_t LimitingEdges;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetTessellation))
    ITessellation7Ptr Tessellation;

    //
    // Wrapper methods for error-handling
    //

    enum ksMathSurface3DTypeEnum GetSurface3DType ( );
    enum ksMathSurface3DTypeEnum GetBaseSurface3DType ( );
    IMathSurface3DPtr GetMathSurface ( );
    VARIANT_BOOL GetNormalOrientation ( );
    _variant_t GetLoops ( );
    _variant_t GetConnectedFaces ( );
    _variant_t GetLimitingEdges ( );
    VARIANT_BOOL IsConnectedWith (
        struct IFace * OtherFace );
    double GetRadius ( );
    VARIANT_BOOL GetConeParam (
        double * Height,
        double * Angle,
        double * Radius );
    double GetArea (
        enum ksLengthUnitsEnum Unit );
    ITessellation7Ptr GetTessellation ( );
    double GetAreaEx (
        enum ksLengthUnitsEnum Unit,
        double AngleTolerance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface3DType (
        /*[out,retval]*/ enum ksMathSurface3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseSurface3DType (
        /*[out,retval]*/ enum ksMathSurface3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_MathSurface (
        /*[out,retval]*/ struct IMathSurface3D * * Result ) = 0;
      virtual HRESULT __stdcall get_NormalOrientation (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Loops (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_ConnectedFaces (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_LimitingEdges (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_IsConnectedWith (
        /*[in]*/ struct IFace * OtherFace,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetConeParam (
        /*[out]*/ double * Height,
        /*[out]*/ double * Angle,
        /*[out]*/ double * Radius,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetArea (
        /*[in]*/ enum ksLengthUnitsEnum Unit,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Tessellation (
        /*[out,retval]*/ struct ITessellation7 * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetAreaEx (
        /*[in]*/ enum ksLengthUnitsEnum Unit,
        /*[in]*/ double AngleTolerance,
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("5a61ced2-dced-4cda-8c3c-cf710f0e727b"))
IEdge : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCurve3DType))
    enum ksMathCurve3DTypeEnum Curve3DType;
    __declspec(property(get=GetBaseCurve3DType))
    enum ksMathCurve3DTypeEnum BaseCurve3DType;
    __declspec(property(get=GetMathCurve))
    IMathCurve3DPtr MathCurve;
    __declspec(property(get=GetIsPeriodic))
    VARIANT_BOOL IsPeriodic;
    __declspec(property(get=GetIsStraight))
    VARIANT_BOOL IsStraight;
    __declspec(property(get=GetAdjacentFace))
    IFacePtr AdjacentFace[];
    __declspec(property(get=GetVertex))
    IVertexPtr Vertex[];
    __declspec(property(get=GetEdges))
    _variant_t Edges[];
    __declspec(property(get=GetOrientedEdges))
    _variant_t OrientedEdges;
    __declspec(property(get=GetIsSketchEdge))
    VARIANT_BOOL IsSketchEdge;

    //
    // Wrapper methods for error-handling
    //

    enum ksMathCurve3DTypeEnum GetCurve3DType ( );
    enum ksMathCurve3DTypeEnum GetBaseCurve3DType ( );
    IMathCurve3DPtr GetMathCurve ( );
    VARIANT_BOOL GetIsPeriodic ( );
    VARIANT_BOOL GetIsStraight ( );
    IFacePtr GetAdjacentFace (
        VARIANT_BOOL FacePlus );
    IVertexPtr GetVertex (
        VARIANT_BOOL Start );
    VARIANT_BOOL GetPoint (
        VARIANT_BOOL Start,
        double * X,
        double * Y,
        double * Z );
    _variant_t GetEdges (
        VARIANT_BOOL Start );
    _variant_t GetOrientedEdges ( );
    double GetLength (
        enum ksLengthUnitsEnum BitVector );
    VARIANT_BOOL GetIsSketchEdge ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Curve3DType (
        /*[out,retval]*/ enum ksMathCurve3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseCurve3DType (
        /*[out,retval]*/ enum ksMathCurve3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_MathCurve (
        /*[out,retval]*/ struct IMathCurve3D * * Result ) = 0;
      virtual HRESULT __stdcall get_IsPeriodic (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsStraight (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_AdjacentFace (
        /*[in]*/ VARIANT_BOOL FacePlus,
        /*[out,retval]*/ struct IFace * * Result ) = 0;
      virtual HRESULT __stdcall get_Vertex (
        /*[in]*/ VARIANT_BOOL Start,
        /*[out,retval]*/ struct IVertex * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ VARIANT_BOOL Start,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[in]*/ VARIANT_BOOL Start,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_OrientedEdges (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_GetLength (
        /*[in]*/ enum ksLengthUnitsEnum BitVector,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_IsSketchEdge (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("02c63f96-1370-4147-b024-8bc6837b98fe"))
ILoop7 : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientedEdges))
    _variant_t OrientedEdges;
    __declspec(property(get=GetEdges))
    _variant_t Edges;
    __declspec(property(get=GetIsOuter))
    VARIANT_BOOL IsOuter;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetOrientedEdges ( );
    _variant_t GetEdges ( );
    VARIANT_BOOL GetIsOuter ( );
    double GetLength (
        enum ksLengthUnitsEnum Unit );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OrientedEdges (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_IsOuter (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetLength (
        /*[in]*/ enum ksLengthUnitsEnum Unit,
        /*[out,retval]*/ double * Result ) = 0;
};

struct __declspec(uuid("8e62d0ef-3a22-40c7-b5ea-d85fa0c9f25e"))
IOrientedEdge7 : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation))
    VARIANT_BOOL Orientation;
    __declspec(property(get=GetSameSense))
    VARIANT_BOOL SameSense;
    __declspec(property(get=GetEdge))
    IModelObjectPtr Edge;
    __declspec(property(get=GetNext))
    IOrientedEdge7Ptr Next;
    __declspec(property(get=GetAdjacentFace))
    IFacePtr AdjacentFace[];
    __declspec(property(get=GetIsStraight))
    VARIANT_BOOL IsStraight;
    __declspec(property(get=GetIsSeam))
    VARIANT_BOOL IsSeam;
    __declspec(property(get=GetIsPole))
    VARIANT_BOOL IsPole;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetOrientation ( );
    VARIANT_BOOL GetSameSense ( );
    IModelObjectPtr GetEdge ( );
    IOrientedEdge7Ptr GetNext ( );
    IFacePtr GetAdjacentFace (
        VARIANT_BOOL FacePlus );
    VARIANT_BOOL GetIsStraight ( );
    VARIANT_BOOL GetIsSeam ( );
    VARIANT_BOOL GetIsPole ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_SameSense (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct IOrientedEdge7 * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdjacentFace (
        /*[in]*/ VARIANT_BOOL FacePlus,
        /*[out,retval]*/ struct IFace * * Result ) = 0;
      virtual HRESULT __stdcall get_IsStraight (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsSeam (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsPole (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("ff326c86-55cd-49fb-bbce-bc033f762cf7"))
IDistanceAngleMeasurement3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObject1,put=PutObject1))
    IModelObjectPtr Object1;
    __declspec(property(get=GetObject2,put=PutObject2))
    IModelObjectPtr Object2;
    __declspec(property(get=GetBriefly,put=PutBriefly))
    VARIANT_BOOL Briefly;
    __declspec(property(get=GetMeasureResult))
    enum ksMeasureResultEnum MeasureResult;
    __declspec(property(get=GetLmin))
    double Lmin;
    __declspec(property(get=GetLmax))
    double Lmax;
    __declspec(property(get=GetLNormal))
    double LNormal;
    __declspec(property(get=GetIsAngleValid))
    VARIANT_BOOL IsAngleValid;
    __declspec(property(get=GetAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetObject1 ( );
    void PutObject1 (
        struct IModelObject * Result );
    IModelObjectPtr GetObject2 ( );
    void PutObject2 (
        struct IModelObject * Result );
    VARIANT_BOOL GetBriefly ( );
    void PutBriefly (
        VARIANT_BOOL Result );
    enum ksMeasureResultEnum GetMeasureResult ( );
    double GetLmin ( );
    double GetLmax ( );
    double GetLNormal ( );
    VARIANT_BOOL GetIsAngleValid ( );
    double GetAngle ( );
    VARIANT_BOOL GetMinPoint1 (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetMinPoint2 (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetMaxPoint1 (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetMaxPoint2 (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetNormalPoint1 (
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetNormalPoint2 (
        double * X,
        double * Y,
        double * Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Object1 (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Object1 (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Object2 (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Object2 (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Briefly (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Briefly (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_MeasureResult (
        /*[out,retval]*/ enum ksMeasureResultEnum * Result ) = 0;
      virtual HRESULT __stdcall get_Lmin (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_Lmax (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_LNormal (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_IsAngleValid (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_GetMinPoint1 (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetMinPoint2 (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetMaxPoint1 (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetMaxPoint2 (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetNormalPoint1 (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetNormalPoint2 (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("f16c388f-16dc-4498-8875-ec8b300ce4a0"))
IDistanceAngleMeasurements3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetDistanceAngleMeasurement3D))
    IDistanceAngleMeasurement3DPtr DistanceAngleMeasurement3D[];

    //
    // Wrapper methods for error-handling
    //

    IDistanceAngleMeasurement3DPtr GetDistanceAngleMeasurement3D (
        const _variant_t & Index );
    IDistanceAngleMeasurement3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DistanceAngleMeasurement3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDistanceAngleMeasurement3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IDistanceAngleMeasurement3D * * Result ) = 0;
};

struct __declspec(uuid("93154762-202b-41e4-9ada-7792ec3e6481"))
IEdgeLengthMeasurement3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetEdges,put=PutEdges))
    _variant_t Edges;
    __declspec(property(get=GetLengths))
    _variant_t Lengths;
    __declspec(property(get=GetSum))
    double Sum;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEdges ( );
    void PutEdges (
        const _variant_t & Result );
    _variant_t GetLengths ( );
    double GetSum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_Edges (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Lengths (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Sum (
        /*[out,retval]*/ double * Result ) = 0;
};

struct __declspec(uuid("90749843-c25c-4e07-a432-f46201bee90c"))
IEdgeLengthMeasurements3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetEdgeLengthMeasurement3D))
    IEdgeLengthMeasurement3DPtr EdgeLengthMeasurement3D[];

    //
    // Wrapper methods for error-handling
    //

    IEdgeLengthMeasurement3DPtr GetEdgeLengthMeasurement3D (
        const _variant_t & Index );
    IEdgeLengthMeasurement3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EdgeLengthMeasurement3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IEdgeLengthMeasurement3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IEdgeLengthMeasurement3D * * Result ) = 0;
};

struct __declspec(uuid("02d1f030-8709-4602-8bae-e47ce1c9c13d"))
IAreaMeasurement3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFaces,put=PutFaces))
    _variant_t Faces;
    __declspec(property(get=GetAreas))
    _variant_t Areas;
    __declspec(property(get=GetSum))
    double Sum;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetFaces ( );
    void PutFaces (
        const _variant_t & Result );
    _variant_t GetAreas ( );
    double GetSum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Areas (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Sum (
        /*[out,retval]*/ double * Result ) = 0;
};

struct __declspec(uuid("12126558-ea51-46e0-baed-07e523f4b7c6"))
IAreaMeasurements3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetAreaMeasurement3D))
    IAreaMeasurement3DPtr AreaMeasurement3D[];

    //
    // Wrapper methods for error-handling
    //

    IAreaMeasurement3DPtr GetAreaMeasurement3D (
        const _variant_t & Index );
    IAreaMeasurement3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AreaMeasurement3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAreaMeasurement3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAreaMeasurement3D * * Result ) = 0;
};

struct __declspec(uuid("c84cb131-1565-4794-abf5-e5bddb9ee5df"))
IMeasurementContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDistanceAngleMeasurements3D))
    IDistanceAngleMeasurements3DPtr DistanceAngleMeasurements3D;
    __declspec(property(get=GetEdgeLengthMeasurements3D))
    IEdgeLengthMeasurements3DPtr EdgeLengthMeasurements3D;
    __declspec(property(get=GetAreaMeasurements3D))
    IAreaMeasurements3DPtr AreaMeasurements3D;

    //
    // Wrapper methods for error-handling
    //

    IDistanceAngleMeasurements3DPtr GetDistanceAngleMeasurements3D ( );
    IEdgeLengthMeasurements3DPtr GetEdgeLengthMeasurements3D ( );
    IAreaMeasurements3DPtr GetAreaMeasurements3D ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DistanceAngleMeasurements3D (
        /*[out,retval]*/ struct IDistanceAngleMeasurements3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_EdgeLengthMeasurements3D (
        /*[out,retval]*/ struct IEdgeLengthMeasurements3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_AreaMeasurements3D (
        /*[out,retval]*/ struct IAreaMeasurements3D * * PVal ) = 0;
};

struct __declspec(uuid("701ee4da-4a8c-4f64-9ed3-4b51a0abf79c"))
IUserDesignationCompObj : IModelObject
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetObjects (
        const _variant_t & Objects );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetObjects (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("2123d327-4119-4f1d-a9e4-48462883e968"))
ILibraryHoleParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetVariables))
    _variant_t Variables;
    __declspec(property(get=GetVariable))
    IVariable7Ptr Variable[];
    __declspec(property(get=GetVariablesCount))
    long VariablesCount;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t PVal );
    _variant_t GetVariables ( );
    IVariable7Ptr GetVariable (
        const _variant_t & Index );
    long GetVariablesCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Variable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_VariablesCount (
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("f577ed6f-c858-442f-855a-e572aa6068aa"))
IZoneParametersByObjects : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObjects,put=PutBaseObjects))
    _variant_t BaseObjects;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBaseObjects ( );
    void PutBaseObjects (
        const _variant_t & Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_BaseObjects (
        /*[in]*/ VARIANT Result ) = 0;
};

struct __declspec(uuid("c29d4dca-6bdc-4e7e-bd93-163950e8a1e1"))
IZoneDivisionParametersRegular : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXCount,put=PutXCount))
    long XCount;
    __declspec(property(get=GetYCount,put=PutYCount))
    long YCount;
    __declspec(property(get=GetZCount,put=PutZCount))
    long ZCount;

    //
    // Wrapper methods for error-handling
    //

    long GetXCount ( );
    void PutXCount (
        long PVal );
    long GetYCount ( );
    void PutYCount (
        long PVal );
    long GetZCount ( );
    void PutZCount (
        long PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_XCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_YCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_YCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_ZCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_ZCount (
        /*[in]*/ long PVal ) = 0;
};

struct __declspec(uuid("3e6ba559-7a5a-4525-8cc0-304ab4164ea5"))
IZoneDivisionParametersByPlanes : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPlanes,put=PutPlanes))
    _variant_t Planes;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetPlanes ( );
    void PutPlanes (
        const _variant_t & Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Planes (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_Planes (
        /*[in]*/ VARIANT Result ) = 0;
};

struct __declspec(uuid("4a8082d6-fc56-4fd4-a258-51e74a44510d"))
IDynamicCrossSectionStep : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksDynamicCrossSectionStepBuildingTypeEnum BuildingType;
    __declspec(property(get=GetParameters))
    IKompasAPIObjectPtr Parameters;

    //
    // Wrapper methods for error-handling
    //

    enum ksDynamicCrossSectionStepBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksDynamicCrossSectionStepBuildingTypeEnum PVal );
    IKompasAPIObjectPtr GetParameters ( );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksDynamicCrossSectionStepBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksDynamicCrossSectionStepBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("dc056bc2-64cd-4afe-910e-97ace56b647b"))
IDynamicCrossSection : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFillCutPlanes,put=PutFillCutPlanes))
    VARIANT_BOOL FillCutPlanes;
    __declspec(property(get=GetStepsCount))
    long StepsCount;
    __declspec(property(get=GetStep))
    IDynamicCrossSectionStepPtr Step[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetFillCutPlanes ( );
    void PutFillCutPlanes (
        VARIANT_BOOL Result );
    long GetStepsCount ( );
    IDynamicCrossSectionStepPtr AddStep (
        enum ksDynamicCrossSectionStepBuildingTypeEnum BuildingType );
    IDynamicCrossSectionStepPtr GetStep (
        long Index );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FillCutPlanes (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_FillCutPlanes (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_StepsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_AddStep (
        /*[in]*/ enum ksDynamicCrossSectionStepBuildingTypeEnum BuildingType,
        /*[out,retval]*/ struct IDynamicCrossSectionStep * * Result ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDynamicCrossSectionStep * * Result ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("fe4be487-b453-45e4-8be2-2ebd28d56cf5"))
IDynamicCrossSectionsManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDynamicCrossSectionsCount))
    long DynamicCrossSectionsCount;
    __declspec(property(get=GetDynamicCrossSection))
    IDynamicCrossSectionPtr DynamicCrossSection[];
    __declspec(property(get=GetCurrentDynamicCrossSection,put=PutCurrentDynamicCrossSection))
    IDynamicCrossSectionPtr CurrentDynamicCrossSection;
    __declspec(property(get=GetDynamicCrossSectionModeOn,put=PutDynamicCrossSectionModeOn))
    VARIANT_BOOL DynamicCrossSectionModeOn;

    //
    // Wrapper methods for error-handling
    //

    long GetDynamicCrossSectionsCount ( );
    IDynamicCrossSectionPtr GetDynamicCrossSection (
        const _variant_t & Index );
    IDynamicCrossSectionPtr AddDynamicCrossSection ( );
    IDynamicCrossSectionPtr GetCurrentDynamicCrossSection ( );
    void PutCurrentDynamicCrossSection (
        struct IDynamicCrossSection * Result );
    VARIANT_BOOL GetDynamicCrossSectionModeOn ( );
    void PutDynamicCrossSectionModeOn (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DynamicCrossSectionsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_DynamicCrossSection (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDynamicCrossSection * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddDynamicCrossSection (
        /*[out,retval]*/ struct IDynamicCrossSection * * Result ) = 0;
      virtual HRESULT __stdcall get_CurrentDynamicCrossSection (
        /*[out,retval]*/ struct IDynamicCrossSection * * Result ) = 0;
      virtual HRESULT __stdcall put_CurrentDynamicCrossSection (
        /*[in]*/ struct IDynamicCrossSection * Result ) = 0;
      virtual HRESULT __stdcall get_DynamicCrossSectionModeOn (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_DynamicCrossSectionModeOn (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("3918486a-85b2-4f9b-a85e-13bb754951e0"))
IDynamicCrossSectionStepParametersByFreePlane : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalCoordinateSystem))
    ILocalCoordinateSystemPtr LocalCoordinateSystem;

    //
    // Wrapper methods for error-handling
    //

    ILocalCoordinateSystemPtr GetLocalCoordinateSystem ( );
    VARIANT_BOOL ReverseDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocalCoordinateSystem (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * PVal ) = 0;
      virtual HRESULT __stdcall raw_ReverseDirection (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e5beb695-4c46-4897-9330-7463ed4d6725"))
IDynamicCrossSectionStepParametersByOffsetPlane : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOffsetPlane))
    IPlane3DByOffsetPtr OffsetPlane;
    __declspec(property(get=GetPlaneBuildingType,put=PutPlaneBuildingType))
    enum ksCrossSectionPlaneBuildingTypeEnum PlaneBuildingType;
    __declspec(property(get=GetBaseStep,put=PutBaseStep))
    IDynamicCrossSectionStepPtr BaseStep;

    //
    // Wrapper methods for error-handling
    //

    IPlane3DByOffsetPtr GetOffsetPlane ( );
    enum ksCrossSectionPlaneBuildingTypeEnum GetPlaneBuildingType ( );
    void PutPlaneBuildingType (
        enum ksCrossSectionPlaneBuildingTypeEnum PVal );
    IDynamicCrossSectionStepPtr GetBaseStep ( );
    void PutBaseStep (
        struct IDynamicCrossSectionStep * PVal );
    VARIANT_BOOL ReverseDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OffsetPlane (
        /*[out,retval]*/ struct IPlane3DByOffset * * PVal ) = 0;
      virtual HRESULT __stdcall get_PlaneBuildingType (
        /*[out,retval]*/ enum ksCrossSectionPlaneBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_PlaneBuildingType (
        /*[in]*/ enum ksCrossSectionPlaneBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BaseStep (
        /*[out,retval]*/ struct IDynamicCrossSectionStep * * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseStep (
        /*[in]*/ struct IDynamicCrossSectionStep * PVal ) = 0;
      virtual HRESULT __stdcall raw_ReverseDirection (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("69ed339f-a095-467d-85f3-91c120bf01bf"))
IDynamicCrossSectionStepParametersByRotatedPlane : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPlane))
    IPlane3DByAnglePtr Plane;
    __declspec(property(get=GetPlaneBuildingType,put=PutPlaneBuildingType))
    enum ksCrossSectionPlaneBuildingTypeEnum PlaneBuildingType;
    __declspec(property(get=GetBaseStep,put=PutBaseStep))
    IDynamicCrossSectionStepPtr BaseStep;

    //
    // Wrapper methods for error-handling
    //

    IPlane3DByAnglePtr GetPlane ( );
    enum ksCrossSectionPlaneBuildingTypeEnum GetPlaneBuildingType ( );
    void PutPlaneBuildingType (
        enum ksCrossSectionPlaneBuildingTypeEnum PVal );
    IDynamicCrossSectionStepPtr GetBaseStep ( );
    void PutBaseStep (
        struct IDynamicCrossSectionStep * PVal );
    VARIANT_BOOL ReverseDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IPlane3DByAngle * * PVal ) = 0;
      virtual HRESULT __stdcall get_PlaneBuildingType (
        /*[out,retval]*/ enum ksCrossSectionPlaneBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_PlaneBuildingType (
        /*[in]*/ enum ksCrossSectionPlaneBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BaseStep (
        /*[out,retval]*/ struct IDynamicCrossSectionStep * * PVal ) = 0;
      virtual HRESULT __stdcall put_BaseStep (
        /*[in]*/ struct IDynamicCrossSectionStep * PVal ) = 0;
      virtual HRESULT __stdcall raw_ReverseDirection (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("f966880f-c8ec-4455-a155-43ed46f159f5"))
IDynamicCrossSectionStepParametersByZone : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetZone,put=PutZone))
    IZonePtr Zone;

    //
    // Wrapper methods for error-handling
    //

    IZonePtr GetZone ( );
    void PutZone (
        struct IZone * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Zone (
        /*[out,retval]*/ struct IZone * * PVal ) = 0;
      virtual HRESULT __stdcall put_Zone (
        /*[in]*/ struct IZone * PVal ) = 0;
};

struct __declspec(uuid("4477b6ce-4f64-4bdf-9eaf-c07c7833ce8a"))
IAxisLine3D : IAxis3D
{
    //
    // Property data
    //

    __declspec(property(get=GetObject1,put=PutObject1))
    IModelObjectPtr Object1;
    __declspec(property(get=GetObject2,put=PutObject2))
    IModelObjectPtr Object2;

    //
    // Wrapper methods for error-handling
    //

    IModelObjectPtr GetObject1 ( );
    void PutObject1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetObject2 ( );
    void PutObject2 (
        struct IModelObject * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Object1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Object1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Object2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Object2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
};

struct __declspec(uuid("430d5e8d-1135-4150-a449-a9d434940460"))
IDismantleStep : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetParts,put=PutParts))
    _variant_t Parts;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetVector))
    IVector3DPtr Vector;
    __declspec(property(get=GetDirectionObject,put=PutDirectionObject))
    IModelObjectPtr DirectionObject;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetParts ( );
    void PutParts (
        const _variant_t & Result );
    double GetDistance ( );
    void PutDistance (
        double Result );
    IVector3DPtr GetVector ( );
    IModelObjectPtr GetDirectionObject ( );
    void PutDirectionObject (
        struct IModelObject * Result );
    long Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parts (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_Parts (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IVector3D * * Result ) = 0;
      virtual HRESULT __stdcall get_DirectionObject (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_DirectionObject (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("5a605cf7-d21e-4e02-be8b-3f6fe8e26903"))
IDismantleParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDismantleStepsCount))
    long DismantleStepsCount;
    __declspec(property(get=GetDismantleStep))
    IDismantleStepPtr DismantleStep[];

    //
    // Wrapper methods for error-handling
    //

    long GetDismantleStepsCount ( );
    IDismantleStepPtr GetDismantleStep (
        long Index );
    IDismantleStepPtr AddDismantleStep ( );
    VARIANT_BOOL ClearDismantleParameters ( );
    VARIANT_BOOL DeleteDismantleStep (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DismantleStepsCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_DismantleStep (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDismantleStep * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddDismantleStep (
        /*[out,retval]*/ struct IDismantleStep * * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearDismantleParameters (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteDismantleStep (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e32e5703-0141-41cf-9917-9565648fe331"))
IDrawingText : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHFormat,put=PutHFormat))
    enum ksTextHorizontalFormatEnum HFormat;
    __declspec(property(get=GetVFormat,put=PutVFormat))
    VARIANT_BOOL VFormat;
    __declspec(property(get=GetAllocation,put=PutAllocation))
    enum ksAllocationEnum Allocation;
    __declspec(property(get=GetMirrorSymmetry,put=PutMirrorSymmetry))
    VARIANT_BOOL MirrorSymmetry;
    __declspec(property(get=GetIsTextMark))
    VARIANT_BOOL IsTextMark;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Result );
    double GetY ( );
    void PutY (
        double Result );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    double GetHeight ( );
    void PutHeight (
        double Result );
    double GetWidth ( );
    void PutWidth (
        double Result );
    enum ksTextHorizontalFormatEnum GetHFormat ( );
    void PutHFormat (
        enum ksTextHorizontalFormatEnum Result );
    VARIANT_BOOL GetVFormat ( );
    void PutVFormat (
        VARIANT_BOOL Result );
    enum ksAllocationEnum GetAllocation ( );
    void PutAllocation (
        enum ksAllocationEnum Result );
    VARIANT_BOOL GetMirrorSymmetry ( );
    void PutMirrorSymmetry (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetIsTextMark ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_HFormat (
        /*[out,retval]*/ enum ksTextHorizontalFormatEnum * Result ) = 0;
      virtual HRESULT __stdcall put_HFormat (
        /*[in]*/ enum ksTextHorizontalFormatEnum Result ) = 0;
      virtual HRESULT __stdcall get_VFormat (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_VFormat (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Allocation (
        /*[out,retval]*/ enum ksAllocationEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Allocation (
        /*[in]*/ enum ksAllocationEnum Result ) = 0;
      virtual HRESULT __stdcall get_MirrorSymmetry (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_MirrorSymmetry (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_IsTextMark (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("c72e0e9d-7078-4aa7-95e4-e8c75ca9bcec"))
IDrawingTexts : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawingText))
    IDrawingTextPtr DrawingText[];

    //
    // Wrapper methods for error-handling
    //

    IDrawingTextPtr GetDrawingText (
        const _variant_t & Index );
    IDrawingTextPtr Add ( );
    IDrawingTextPtr AddTextMark (
        struct IDrawingObject * Object );
    IDrawingTextPtr FindTextMark (
        struct IDrawingObject * Object );
    IDrawingObjectPtr FindTextMarkObject (
        struct IDrawingText * Mark );
    VARIANT_BOOL DeleteTextMark (
        struct IDrawingObject * Object );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawingText (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDrawingText * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IDrawingText * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddTextMark (
        /*[in]*/ struct IDrawingObject * Object,
        /*[out,retval]*/ struct IDrawingText * * Value ) = 0;
      virtual HRESULT __stdcall raw_FindTextMark (
        /*[in]*/ struct IDrawingObject * Object,
        /*[out,retval]*/ struct IDrawingText * * Result ) = 0;
      virtual HRESULT __stdcall raw_FindTextMarkObject (
        /*[in]*/ struct IDrawingText * Mark,
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteTextMark (
        /*[in]*/ struct IDrawingObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("64acc86f-4b10-4897-8552-bc0a556d228b"))
ILineSegment : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutLength (
        double PVal );
    double GetLength ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    long GetStyle ( );
    void PutStyle (
        long Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
};

struct __declspec(uuid("b211c782-a830-468e-9f4f-c499a77078d8"))
ILineSegments : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLineSegment))
    ILineSegmentPtr LineSegment[];

    //
    // Wrapper methods for error-handling
    //

    ILineSegmentPtr GetLineSegment (
        const _variant_t & Index );
    ILineSegmentPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineSegment (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILineSegment * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILineSegment * * Result ) = 0;
};

struct __declspec(uuid("a22dfb7e-21e0-4b28-9ca1-29b7950cf256"))
IArc : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetX3,put=PutX3))
    double X3;
    __declspec(property(get=GetY3,put=PutY3))
    double Y3;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutX3 (
        double PVal );
    double GetX3 ( );
    void PutY3 (
        double PVal );
    double GetY3 ( );
    void PutAngle1 (
        double PVal );
    double GetAngle1 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );
    long GetStyle ( );
    void PutStyle (
        long Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
};

struct __declspec(uuid("4fcb4c17-3b9e-45e8-b83c-9284027baa0d"))
IArcs : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetArc))
    IArcPtr Arc[];

    //
    // Wrapper methods for error-handling
    //

    IArcPtr GetArc (
        const _variant_t & Index );
    IArcPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Arc (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IArc * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IArc * * Result ) = 0;
};

struct __declspec(uuid("e79f5a53-f456-4996-b620-16b725f134fb"))
IContour : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetSegment))
    IKompasAPIObjectPtr Segment[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTmpObjects))
    _variant_t TmpObjects;

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    IKompasAPIObjectPtr AddSegment (
        enum ksContourSegmentEnum Type );
    IKompasAPIObjectPtr GetSegment (
        long Index );
    VARIANT_BOOL CopyCurve (
        struct IDrawingObject * Curve,
        VARIANT_BOOL DeleteSource );
    long GetCount ( );
    _variant_t GetTmpObjects ( );
    VARIANT_BOOL CopySegments (
        const _variant_t & Val,
        VARIANT_BOOL DeleteSource );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL RemoveContourGaps (
        double Accuracy,
        VARIANT_BOOL CanInsert,
        VARIANT_BOOL CanReplace );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddSegment (
        /*[in]*/ enum ksContourSegmentEnum Type,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Segment (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_CopyCurve (
        /*[in]*/ struct IDrawingObject * Curve,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_TmpObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_CopySegments (
        /*[in]*/ VARIANT Val,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_RemoveContourGaps (
        /*[in]*/ double Accuracy,
        /*[in]*/ VARIANT_BOOL CanInsert,
        /*[in]*/ VARIANT_BOOL CanReplace,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("f6ccb098-5710-44e3-8198-8fafd56c7a6f"))
IMultiline : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetBaseContour))
    IContourPtr BaseContour;
    __declspec(property(get=GetTrackingType,put=PutTrackingType))
    enum ksMlVertexTrackingEnum TrackingType[];
    __declspec(property(get=GetVertexLimiter,put=PutVertexLimiter))
    enum ksMlVertexLimiterEnum VertexLimiter[];
    __declspec(property(get=GetVertexDirection,put=PutVertexDirection))
    VARIANT_BOOL VertexDirection[];
    __declspec(property(get=GetVertexRadius,put=PutVertexRadius))
    double VertexRadius[];
    __declspec(property(get=GetVertexStyle,put=PutVertexStyle))
    long VertexStyle[];
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetEndLimiter,put=PutEndLimiter))
    enum ksMlEndLimiterEnum EndLimiter[];
    __declspec(property(get=GetEndParameter,put=PutEndParameter))
    double EndParameter[];
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    long EndStyle[];
    __declspec(property(get=GetLineCount))
    long LineCount;
    __declspec(property(get=GetLineOffset,put=PutLineOffset))
    double LineOffset[];
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    long LineStyle[];
    __declspec(property(get=GetLineOffsets))
    _variant_t LineOffsets;

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    IContourPtr GetBaseContour ( );
    enum ksMlVertexTrackingEnum GetTrackingType (
        long VertexIndex );
    void PutTrackingType (
        long VertexIndex,
        enum ksMlVertexTrackingEnum Val );
    enum ksMlVertexLimiterEnum GetVertexLimiter (
        long VertexIndex );
    void PutVertexLimiter (
        long VertexIndex,
        enum ksMlVertexLimiterEnum PVal );
    VARIANT_BOOL GetVertexDirection (
        long VertexIndex );
    void PutVertexDirection (
        long VertexIndex,
        VARIANT_BOOL PVal );
    void PutVertexRadius (
        long VertexIndex,
        double PVal );
    double GetVertexRadius (
        long VertexIndex );
    long GetVertexStyle (
        long VertexIndex );
    void PutVertexStyle (
        long VertexIndex,
        long Result );
    long GetVertexCount ( );
    enum ksMlEndLimiterEnum GetEndLimiter (
        VARIANT_BOOL First );
    void PutEndLimiter (
        VARIANT_BOOL First,
        enum ksMlEndLimiterEnum PVal );
    void PutEndParameter (
        VARIANT_BOOL First,
        double PVal );
    double GetEndParameter (
        VARIANT_BOOL First );
    long GetEndStyle (
        VARIANT_BOOL First );
    void PutEndStyle (
        VARIANT_BOOL First,
        long Result );
    VARIANT_BOOL AddLine (
        double Offset,
        long Style );
    VARIANT_BOOL DeleteLine (
        long LineIndex );
    long GetLineCount ( );
    void PutLineOffset (
        long LineIndex,
        double PVal );
    double GetLineOffset (
        long LineIndex );
    long GetLineStyle (
        long LineIndex );
    void PutLineStyle (
        long LineIndex,
        long Result );
    long FindLine (
        double Offset );
    _variant_t GetLineOffsets ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BaseContour (
        /*[out,retval]*/ struct IContour * * Result ) = 0;
      virtual HRESULT __stdcall get_TrackingType (
        /*[in]*/ long VertexIndex,
        /*[out,retval]*/ enum ksMlVertexTrackingEnum * Val ) = 0;
      virtual HRESULT __stdcall put_TrackingType (
        /*[in]*/ long VertexIndex,
        /*[in]*/ enum ksMlVertexTrackingEnum Val ) = 0;
      virtual HRESULT __stdcall get_VertexLimiter (
        /*[in]*/ long VertexIndex,
        /*[out,retval]*/ enum ksMlVertexLimiterEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_VertexLimiter (
        /*[in]*/ long VertexIndex,
        /*[in]*/ enum ksMlVertexLimiterEnum PVal ) = 0;
      virtual HRESULT __stdcall get_VertexDirection (
        /*[in]*/ long VertexIndex,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_VertexDirection (
        /*[in]*/ long VertexIndex,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall put_VertexRadius (
        /*[in]*/ long VertexIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_VertexRadius (
        /*[in]*/ long VertexIndex,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_VertexStyle (
        /*[in]*/ long VertexIndex,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_VertexStyle (
        /*[in]*/ long VertexIndex,
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_EndLimiter (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ enum ksMlEndLimiterEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_EndLimiter (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ enum ksMlEndLimiterEnum PVal ) = 0;
      virtual HRESULT __stdcall put_EndParameter (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_EndParameter (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_EndStyle (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_EndStyle (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ double Offset,
        /*[in]*/ long Style,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteLine (
        /*[in]*/ long LineIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_LineCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_LineOffset (
        /*[in]*/ long LineIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_LineOffset (
        /*[in]*/ long LineIndex,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[in]*/ long LineIndex,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ long LineIndex,
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall raw_FindLine (
        /*[in]*/ double Offset,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_LineOffsets (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("968d7b84-2bc1-4354-aafe-73192e405546"))
IMultilines : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiline))
    IMultilinePtr Multiline[];

    //
    // Wrapper methods for error-handling
    //

    IMultilinePtr GetMultiline (
        const _variant_t & Index );
    IMultilinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Multiline (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMultiline * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IMultiline * * Value ) = 0;
};

struct __declspec(uuid("25509c3a-7b46-4e3f-b0e8-0e61b7548664"))
IDrawingContour : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    long GetStyle ( );
    void PutStyle (
        long Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
};

struct __declspec(uuid("dba3626c-12be-4bff-8d42-b01a78666bc9"))
IDrawingContours : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawingContour))
    IDrawingContourPtr DrawingContour[];

    //
    // Wrapper methods for error-handling
    //

    IDrawingContourPtr GetDrawingContour (
        const _variant_t & Index );
    IDrawingContourPtr Add ( );
    _variant_t AddBooleanResultContours (
        struct IDrawingObject * Contour1,
        struct IDrawingObject * Contour2,
        enum ksBooleanType BooleanType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawingContour (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDrawingContour * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IDrawingContour * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddBooleanResultContours (
        /*[in]*/ struct IDrawingObject * Contour1,
        /*[in]*/ struct IDrawingObject * Contour2,
        /*[in]*/ enum ksBooleanType BooleanType,
        /*[out,retval]*/ VARIANT * RezultContours ) = 0;
};

struct __declspec(uuid("5c952f95-dfed-4eee-b39a-6699ede08676"))
ICircle : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    long GetStyle ( );
    void PutStyle (
        long Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
};

struct __declspec(uuid("c8ca9255-e5fe-4396-9c3f-75ee7377c508"))
ICircles : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCircle))
    ICirclePtr Circle[];

    //
    // Wrapper methods for error-handling
    //

    ICirclePtr GetCircle (
        const _variant_t & Index );
    ICirclePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Circle (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICircle * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICircle * * Result ) = 0;
};

struct __declspec(uuid("d0c19c87-14e7-401d-aef5-a2e88e899f6e"))
IPoint : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    long GetStyle ( );
    void PutStyle (
        long PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long PVal ) = 0;
};

struct __declspec(uuid("8c6846a4-ee3b-4c00-a708-5c0fd01e21b7"))
IPoints : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint))
    IPointPtr Point[];

    //
    // Wrapper methods for error-handling
    //

    IPointPtr GetPoint (
        const _variant_t & Index );
    IPointPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Point (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPoint * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IPoint * * Result ) = 0;
};

struct __declspec(uuid("6d51ec19-200c-47a2-ae55-0593ad746851"))
IBezier : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetPointsCount))
    long PointsCount;
    __declspec(property(get=GetPoints,put=PutPoints))
    _variant_t Points[];
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    long GetPointsCount ( );
    void PutPoints (
        VARIANT_BOOL AllPoints,
        const _variant_t & Points );
    _variant_t GetPoints (
        VARIANT_BOOL AllPoints );
    VARIANT_BOOL AddPoint (
        long Index,
        double XBase,
        double YBase,
        double * XLeft,
        double * YLeft,
        double * XRight,
        double * YRight );
    VARIANT_BOOL GetPoint (
        long Index,
        double * XBase,
        double * YBase,
        double * XLeft,
        double * YLeft,
        double * XRight,
        double * YRight );
    VARIANT_BOOL DeletePoint (
        long Index );
    VARIANT_BOOL Clear ( );
    long GetStyle ( );
    void PutStyle (
        long Result );
    VARIANT_BOOL ReadFromFile (
        _bstr_t FileName );
    VARIANT_BOOL WriteToFile (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_PointsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Points (
        /*[in]*/ VARIANT_BOOL AllPoints,
        /*[in]*/ VARIANT Points ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[in]*/ VARIANT_BOOL AllPoints,
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ long Index,
        /*[in]*/ double XBase,
        /*[in]*/ double YBase,
        /*[in]*/ double * XLeft,
        /*[in]*/ double * YLeft,
        /*[in]*/ double * XRight,
        /*[in]*/ double * YRight,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * XBase,
        /*[out]*/ double * YBase,
        /*[out]*/ double * XLeft,
        /*[out]*/ double * YLeft,
        /*[out]*/ double * XRight,
        /*[out]*/ double * YRight,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeletePoint (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall raw_ReadFromFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_WriteToFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("57944ecc-5491-4551-9db9-fabc45125a63"))
IBeziers : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBezier))
    IBezierPtr Bezier[];

    //
    // Wrapper methods for error-handling
    //

    IBezierPtr GetBezier (
        const _variant_t & Index );
    IBezierPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bezier (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBezier * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBezier * * Result ) = 0;
};

struct __declspec(uuid("5b3f5454-160a-4981-b093-890e9a719ae3"))
IMacroObjects : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetMacroObject))
    IMacroObjectPtr MacroObject[];

    //
    // Wrapper methods for error-handling
    //

    IMacroObjectPtr GetMacroObject (
        const _variant_t & Index );
    IMacroObjectPtr Add (
        VARIANT_BOOL MultiLayer );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MacroObject (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMacroObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT_BOOL MultiLayer,
        /*[out,retval]*/ struct IMacroObject * * Value ) = 0;
};

struct __declspec(uuid("3ea0da9b-f2c0-40c4-be36-7103509a9389"))
ILine : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("889a9b9c-7533-4ec5-8e2c-5ecf8228b06f"))
ILines : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLine))
    ILinePtr Line[];

    //
    // Wrapper methods for error-handling
    //

    ILinePtr GetLine (
        const _variant_t & Index );
    ILinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Line (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILine * * Result ) = 0;
};

struct __declspec(uuid("4d0da413-9507-4795-896f-e049fa6e44dd"))
IPolyLine2D : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetPointsCount))
    long PointsCount;
    __declspec(property(get=GetPoints,put=PutPoints))
    _variant_t Points;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    long GetPointsCount ( );
    void PutPoints (
        const _variant_t & Points );
    _variant_t GetPoints ( );
    VARIANT_BOOL AddPoint (
        long Index,
        double X,
        double Y );
    VARIANT_BOOL GetPoint (
        long Index,
        double * X,
        double * Y );
    VARIANT_BOOL DeletePoint (
        long Index );
    VARIANT_BOOL Clear ( );
    long GetStyle ( );
    void PutStyle (
        long Result );
    VARIANT_BOOL ReadFromFile (
        _bstr_t FileName );
    VARIANT_BOOL WriteToFile (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_PointsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Points (
        /*[in]*/ VARIANT Points ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeletePoint (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall raw_ReadFromFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_WriteToFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("d1a9cb2d-a259-4ccc-9cd4-fa006494bca7"))
IPolyLines2D : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPolyLine2D))
    IPolyLine2DPtr PolyLine2D[];

    //
    // Wrapper methods for error-handling
    //

    IPolyLine2DPtr GetPolyLine2D (
        const _variant_t & Index );
    IPolyLine2DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PolyLine2D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPolyLine2D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IPolyLine2D * * Result ) = 0;
};

struct __declspec(uuid("ee1ab9f4-b127-4303-a30d-c3509f6d10cd"))
INurbs : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetDegree,put=PutDegree))
    long Degree;
    __declspec(property(get=GetPeriodic))
    VARIANT_BOOL Periodic;
    __declspec(property(get=GetPointsCount))
    long PointsCount;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutClosed (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetClosed ( );
    void PutDegree (
        long Result );
    long GetDegree ( );
    VARIANT_BOOL GetPeriodic ( );
    long GetPointsCount ( );
    VARIANT_BOOL SetNurbsParams (
        const _variant_t & Points,
        const _variant_t & Weight,
        const _variant_t & Knots,
        long Degree,
        VARIANT_BOOL Closed );
    VARIANT_BOOL GetNurbsParams (
        VARIANT * Points,
        VARIANT * Weight,
        VARIANT * Knots );
    VARIANT_BOOL AddPoint (
        long Index,
        double X,
        double Y,
        double Weight );
    VARIANT_BOOL GetPoint (
        long Index,
        double * X,
        double * Y,
        double * Weight );
    VARIANT_BOOL DeletePoint (
        long Index );
    VARIANT_BOOL Clear ( );
    long GetStyle ( );
    void PutStyle (
        long Result );
    VARIANT_BOOL ReadFromFile (
        _bstr_t FileName );
    VARIANT_BOOL WriteToFile (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Degree (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_Degree (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Periodic (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_PointsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_SetNurbsParams (
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Weight,
        /*[in]*/ VARIANT Knots,
        /*[in]*/ long Degree,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetNurbsParams (
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Weight,
        /*[out]*/ VARIANT * Knots,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Weight,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Weight,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeletePoint (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall raw_ReadFromFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_WriteToFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("88eced7c-181c-4d9f-84de-44b2e360f278"))
INurbses : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetNurbs))
    INurbsPtr Nurbs[];

    //
    // Wrapper methods for error-handling
    //

    INurbsPtr GetNurbs (
        const _variant_t & Index );
    INurbsPtr Add ( );
    INurbsPtr Convert (
        struct IDrawingObject * Curve );
    INurbsPtr ConvertEx (
        struct IDrawingObject * Curve,
        enum ksNurbsByPointsAproximationTypeEnum AproximationType,
        double Step );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Nurbs (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct INurbs * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct INurbs * * Result ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ struct IDrawingObject * Curve,
        /*[out,retval]*/ struct INurbs * * Result ) = 0;
      virtual HRESULT __stdcall raw_ConvertEx (
        /*[in]*/ struct IDrawingObject * Curve,
        /*[in]*/ enum ksNurbsByPointsAproximationTypeEnum AproximationType,
        /*[in]*/ double Step,
        /*[out,retval]*/ struct INurbs * * Result ) = 0;
};

struct __declspec(uuid("deed8d7b-404b-4f17-b42a-2f5e64818d0a"))
IRaster : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetInsertionType,put=PutInsertionType))
    VARIANT_BOOL InsertionType;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;
    __declspec(property(get=GetDisplayModePartial,put=PutDisplayModePartial))
    VARIANT_BOOL DisplayModePartial;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetSourceHeight))
    double SourceHeight;
    __declspec(property(get=GetSourceWidth))
    double SourceWidth;
    __declspec(property(get=GetPalette))
    long Palette;
    __declspec(property(get=GetIsEnableChangeResolution))
    VARIANT_BOOL IsEnableChangeResolution;
    __declspec(property(get=GetIsCutBoundarySet))
    VARIANT_BOOL IsCutBoundarySet;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPlacement (
        double * X,
        double * Y,
        double * Angle,
        VARIANT_BOOL * MirrorSymmetry );
    VARIANT_BOOL SetPlacement (
        double X,
        double Y,
        double Angle,
        VARIANT_BOOL MirrorSymmetry );
    void PutScale (
        double PVal );
    double GetScale ( );
    void PutFileName (
        _bstr_t PVal );
    _bstr_t GetFileName ( );
    void PutInsertionType (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInsertionType ( );
    void PutResolution (
        double PVal );
    double GetResolution ( );
    void PutDisplayModePartial (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDisplayModePartial ( );
    double GetHeight ( );
    void PutHeight (
        double PVal );
    double GetWidth ( );
    void PutWidth (
        double PVal );
    double GetSourceHeight ( );
    double GetSourceWidth ( );
    long GetPalette ( );
    VARIANT_BOOL GetIsEnableChangeResolution ( );
    VARIANT_BOOL GetIsCutBoundarySet ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPlacement (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Angle,
        /*[out]*/ VARIANT_BOOL * MirrorSymmetry,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPlacement (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Angle,
        /*[in]*/ VARIANT_BOOL MirrorSymmetry,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_InsertionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Resolution (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DisplayModePartial (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DisplayModePartial (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SourceHeight (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_SourceWidth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Palette (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_IsEnableChangeResolution (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsCutBoundarySet (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("c6e4e32d-e077-4b14-b9de-041bd628c38c"))
IRasters : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRaster))
    IRasterPtr Raster[];

    //
    // Wrapper methods for error-handling
    //

    IRasterPtr GetRaster (
        const _variant_t & Index );
    IRasterPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Raster (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRaster * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRaster * * Result ) = 0;
};

struct __declspec(uuid("9a0ece23-7b60-44e0-9728-c56caaa455a2"))
IOleDrawingObject : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetClassId,put=PutClassId))
    _bstr_t ClassId;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetLink,put=PutLink))
    VARIANT_BOOL Link;
    __declspec(property(get=GetInsertionType,put=PutInsertionType))
    VARIANT_BOOL InsertionType;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPlacement (
        double * X,
        double * Y,
        double * Angle,
        VARIANT_BOOL * MirrorSymmetry );
    VARIANT_BOOL SetPlacement (
        double X,
        double Y,
        double Angle,
        VARIANT_BOOL MirrorSymmetry );
    void PutScale (
        double PVal );
    double GetScale ( );
    void PutClassId (
        _bstr_t PVal );
    _bstr_t GetClassId ( );
    void PutFileName (
        _bstr_t PVal );
    _bstr_t GetFileName ( );
    void PutLink (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetLink ( );
    void PutInsertionType (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInsertionType ( );
    IDispatchPtr DoVerb (
        long iVerb );
    VARIANT_BOOL Close (
        VARIANT_BOOL Save );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPlacement (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Angle,
        /*[out]*/ VARIANT_BOOL * MirrorSymmetry,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPlacement (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Angle,
        /*[in]*/ VARIANT_BOOL MirrorSymmetry,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ClassId (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ClassId (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Link (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Link (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_InsertionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_DoVerb (
        /*[in]*/ long iVerb,
        /*[out,retval]*/ IDispatch * * Result ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT_BOOL Save,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e7a8dd07-cd6b-45a6-b6af-155a674bc7e4"))
IOleDrawingObjects : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetOleDrawingObject))
    IOleDrawingObjectPtr OleDrawingObject[];

    //
    // Wrapper methods for error-handling
    //

    IOleDrawingObjectPtr GetOleDrawingObject (
        const _variant_t & Index );
    IOleDrawingObjectPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OleDrawingObject (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IOleDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IOleDrawingObject * * Result ) = 0;
};

struct __declspec(uuid("f60c9107-d8e2-433c-a0e3-a4e508d09353"))
IEllipse : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetSemiAxisA,put=PutSemiAxisA))
    double SemiAxisA;
    __declspec(property(get=GetSemiAxisB,put=PutSemiAxisB))
    double SemiAxisB;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutSemiAxisA (
        double PVal );
    double GetSemiAxisA ( );
    void PutSemiAxisB (
        double PVal );
    double GetSemiAxisB ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    long GetStyle ( );
    void PutStyle (
        long Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SemiAxisA (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SemiAxisA (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SemiAxisB (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SemiAxisB (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
};

struct __declspec(uuid("47633c44-93bb-4f41-a6ca-4f8ccaea0659"))
IEllipses : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetEllipse))
    IEllipsePtr Ellipse[];

    //
    // Wrapper methods for error-handling
    //

    IEllipsePtr GetEllipse (
        const _variant_t & Index );
    IEllipsePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ellipse (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IEllipse * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IEllipse * * Result ) = 0;
};

struct __declspec(uuid("320d837f-0b27-45b0-98b4-9d21156e9857"))
IEllipseArc : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetT1,put=PutT1))
    double T1;
    __declspec(property(get=GetT2,put=PutT2))
    double T2;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetSemiAxisA,put=PutSemiAxisA))
    double SemiAxisA;
    __declspec(property(get=GetSemiAxisB,put=PutSemiAxisB))
    double SemiAxisB;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutT1 (
        double PVal );
    double GetT1 ( );
    void PutT2 (
        double PVal );
    double GetT2 ( );
    void PutAngle1 (
        double PVal );
    double GetAngle1 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );
    void PutSemiAxisA (
        double PVal );
    double GetSemiAxisA ( );
    void PutSemiAxisB (
        double PVal );
    double GetSemiAxisB ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    VARIANT_BOOL GetDirection ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    long GetStyle ( );
    void PutStyle (
        long Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_T1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_T1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_T2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_T2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SemiAxisA (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SemiAxisA (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SemiAxisB (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SemiAxisB (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
};

struct __declspec(uuid("cc5b7fcb-b887-4a47-ae6b-2522dfa24433"))
IEllipseArcs : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetEllipseArc))
    IEllipseArcPtr EllipseArc[];

    //
    // Wrapper methods for error-handling
    //

    IEllipseArcPtr GetEllipseArc (
        const _variant_t & Index );
    IEllipseArcPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EllipseArc (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IEllipseArc * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IEllipseArc * * Result ) = 0;
};

struct __declspec(uuid("42f9fc58-fea0-4e52-a604-1a00985ab772"))
IRectangle : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetContourSegmentsPoints))
    _variant_t ContourSegmentsPoints;

    //
    // Wrapper methods for error-handling
    //

    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutHeight (
        double PVal );
    double GetHeight ( );
    void PutWidth (
        double PVal );
    double GetWidth ( );
    long GetStyle ( );
    void PutStyle (
        long Result );
    VARIANT_BOOL GetCorner (
        long Index,
        enum ksCornerTypeEnum * Type,
        double * L1,
        double * L2 );
    VARIANT_BOOL SetCorner (
        long Index,
        enum ksCornerTypeEnum Type,
        double L1,
        double L2 );
    _variant_t GetContourSegmentsPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall raw_GetCorner (
        /*[in]*/ long Index,
        /*[out]*/ enum ksCornerTypeEnum * Type,
        /*[out]*/ double * L1,
        /*[out]*/ double * L2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCorner (
        /*[in]*/ long Index,
        /*[in]*/ enum ksCornerTypeEnum Type,
        /*[in]*/ double L1,
        /*[in]*/ double L2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ContourSegmentsPoints (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("d6bc2ee9-249f-4961-89a7-88da854f35fe"))
IRectangles : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRectangle))
    IRectanglePtr Rectangle[];

    //
    // Wrapper methods for error-handling
    //

    IRectanglePtr GetRectangle (
        const _variant_t & Index );
    IRectanglePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rectangle (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRectangle * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRectangle * * Result ) = 0;
};

struct __declspec(uuid("51968648-f264-4904-a07f-653676ae1d35"))
IRegularPolygon : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCount,put=PutCount))
    long Count;
    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDescribe,put=PutDescribe))
    VARIANT_BOOL Describe;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetContourSegmentsPoints))
    _variant_t ContourSegmentsPoints;

    //
    // Wrapper methods for error-handling
    //

    void PutCount (
        long PVal );
    long GetCount ( );
    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutDescribe (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDescribe ( );
    long GetStyle ( );
    void PutStyle (
        long Result );
    VARIANT_BOOL GetCorner (
        long Index,
        enum ksCornerTypeEnum * Type,
        double * L1,
        double * L2 );
    VARIANT_BOOL SetCorner (
        long Index,
        enum ksCornerTypeEnum Type,
        double L1,
        double L2 );
    _variant_t GetContourSegmentsPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Count (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Describe (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Describe (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall raw_GetCorner (
        /*[in]*/ long Index,
        /*[out]*/ enum ksCornerTypeEnum * Type,
        /*[out]*/ double * L1,
        /*[out]*/ double * L2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetCorner (
        /*[in]*/ long Index,
        /*[in]*/ enum ksCornerTypeEnum Type,
        /*[in]*/ double L1,
        /*[in]*/ double L2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ContourSegmentsPoints (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("80377cb2-073e-4c38-8532-c42a078ba719"))
IRegularPolygons : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRegularPolygon))
    IRegularPolygonPtr RegularPolygon[];

    //
    // Wrapper methods for error-handling
    //

    IRegularPolygonPtr GetRegularPolygon (
        const _variant_t & Index );
    IRegularPolygonPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RegularPolygon (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRegularPolygon * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRegularPolygon * * Result ) = 0;
};

struct __declspec(uuid("ee6713f9-ad9a-466d-9fb9-d19235e42c95"))
IEquidistant : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetSide,put=PutSide))
    enum ksEquidistantTypeEnum Side;
    __declspec(property(get=GetCutMode,put=PutCutMode))
    VARIANT_BOOL CutMode;
    __declspec(property(get=GetDegenerateSegment,put=PutDegenerateSegment))
    VARIANT_BOOL DegenerateSegment;
    __declspec(property(get=GetLeftRadius,put=PutLeftRadius))
    double LeftRadius;
    __declspec(property(get=GetRightRadius,put=PutRightRadius))
    double RightRadius;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Result );
    void PutSide (
        enum ksEquidistantTypeEnum PVal );
    enum ksEquidistantTypeEnum GetSide ( );
    void PutCutMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCutMode ( );
    void PutDegenerateSegment (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDegenerateSegment ( );
    void PutLeftRadius (
        double PVal );
    double GetLeftRadius ( );
    void PutRightRadius (
        double PVal );
    double GetRightRadius ( );
    long GetStyle ( );
    void PutStyle (
        long Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Result ) = 0;
      virtual HRESULT __stdcall put_Side (
        /*[in]*/ enum ksEquidistantTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Side (
        /*[out,retval]*/ enum ksEquidistantTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CutMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CutMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DegenerateSegment (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DegenerateSegment (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftRadius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_LeftRadius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_RightRadius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_RightRadius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
};

struct __declspec(uuid("86182e5e-8fa3-4283-9dc5-43d1673c80da"))
IEquidistants : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetEquidistant))
    IEquidistantPtr Equidistant[];

    //
    // Wrapper methods for error-handling
    //

    IEquidistantPtr GetEquidistant (
        const _variant_t & Index );
    IEquidistantPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Equidistant (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IEquidistant * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IEquidistant * * Result ) = 0;
};

struct __declspec(uuid("826c0b5b-0146-417a-8128-e581f8430f37"))
IHatch : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetSide,put=PutSide))
    VARIANT_BOOL Side;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Result );
    double GetY ( );
    void PutY (
        double Result );
    VARIANT_BOOL GetSide ( );
    void PutSide (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Side (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Side (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("b7e776b0-9524-4254-9d1f-0cf8e0314a1b"))
IHatches : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetHatch))
    IHatchPtr Hatch[];

    //
    // Wrapper methods for error-handling
    //

    IHatchPtr GetHatch (
        const _variant_t & Index );
    IHatchPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Hatch (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IHatch * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IHatch * * Result ) = 0;
};

struct __declspec(uuid("1e0ef1b5-08d3-40b6-893e-3ee7e4faec98"))
IColouring : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetColouringType,put=PutColouringType))
    enum ksColouringTypeEnum ColouringType;
    __declspec(property(get=GetColor1,put=PutColor1))
    long Color1;
    __declspec(property(get=GetColor2,put=PutColor2))
    long Color2;
    __declspec(property(get=GetTransparency1,put=PutTransparency1))
    long Transparency1;
    __declspec(property(get=GetTransparency2,put=PutTransparency2))
    long Transparency2;
    __declspec(property(get=GetGradientType,put=PutGradientType))
    VARIANT_BOOL GradientType;
    __declspec(property(get=GetGradientCount,put=PutGradientCount))
    long GradientCount;
    __declspec(property(get=GetGradientAngle,put=PutGradientAngle))
    double GradientAngle;
    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetGradationsCount))
    long GradationsCount;

    //
    // Wrapper methods for error-handling
    //

    enum ksColouringTypeEnum GetColouringType ( );
    void PutColouringType (
        enum ksColouringTypeEnum Result );
    long GetColor1 ( );
    void PutColor1 (
        long Result );
    long GetColor2 ( );
    void PutColor2 (
        long Result );
    long GetTransparency1 ( );
    void PutTransparency1 (
        long PVal );
    long GetTransparency2 ( );
    void PutTransparency2 (
        long PVal );
    VARIANT_BOOL GetGradientType ( );
    void PutGradientType (
        VARIANT_BOOL Result );
    long GetGradientCount ( );
    void PutGradientCount (
        long Result );
    double GetGradientAngle ( );
    void PutGradientAngle (
        double Result );
    double GetXc ( );
    void PutXc (
        double Result );
    double GetYc ( );
    void PutYc (
        double Result );
    VARIANT_BOOL GetGradations (
        VARIANT * Positions,
        VARIANT * Colors,
        VARIANT * Transparences,
        VARIANT * Interpolations );
    VARIANT_BOOL SetGradations (
        const _variant_t & Positions,
        const _variant_t & Colors,
        const _variant_t & Transparences,
        const _variant_t & Interpolations );
    long AddGradation (
        long Position,
        long Color,
        long Transparency,
        VARIANT_BOOL Interpolation );
    VARIANT_BOOL ClearGradations ( );
    long GetGradationsCount ( );
    VARIANT_BOOL GetGradation (
        long Index,
        long * Position,
        long * Color,
        long * Transparency,
        VARIANT_BOOL * Interpolation );
    long SetGradation (
        long Index,
        long Position,
        long Color,
        long Transparency,
        VARIANT_BOOL Interpolation );
    VARIANT_BOOL DeleteGradation (
        long Index );
    long FindPosition (
        long Position );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColouringType (
        /*[out,retval]*/ enum ksColouringTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ColouringType (
        /*[in]*/ enum ksColouringTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_Color1 (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Color1 (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_Color2 (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Color2 (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_Transparency1 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Transparency1 (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Transparency2 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_Transparency2 (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_GradientType (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_GradientType (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_GradientCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_GradientCount (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_GradientAngle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_GradientAngle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall raw_GetGradations (
        /*[out]*/ VARIANT * Positions,
        /*[out]*/ VARIANT * Colors,
        /*[out]*/ VARIANT * Transparences,
        /*[out]*/ VARIANT * Interpolations,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetGradations (
        /*[in]*/ VARIANT Positions,
        /*[in]*/ VARIANT Colors,
        /*[in]*/ VARIANT Transparences,
        /*[in]*/ VARIANT Interpolations,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddGradation (
        /*[in]*/ long Position,
        /*[in]*/ long Color,
        /*[in]*/ long Transparency,
        /*[in]*/ VARIANT_BOOL Interpolation,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearGradations (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_GradationsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_GetGradation (
        /*[in]*/ long Index,
        /*[out]*/ long * Position,
        /*[out]*/ long * Color,
        /*[out]*/ long * Transparency,
        /*[out]*/ VARIANT_BOOL * Interpolation,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetGradation (
        /*[in]*/ long Index,
        /*[in]*/ long Position,
        /*[in]*/ long Color,
        /*[in]*/ long Transparency,
        /*[in]*/ VARIANT_BOOL Interpolation,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteGradation (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_FindPosition (
        /*[in]*/ long Position,
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("60437dad-2688-4146-b765-3fcc55c39d0f"))
IColourings : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetColouring))
    IColouringPtr Colouring[];

    //
    // Wrapper methods for error-handling
    //

    IColouringPtr GetColouring (
        const _variant_t & Index );
    IColouringPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Colouring (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IColouring * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IColouring * * Result ) = 0;
};

struct __declspec(uuid("83312bfe-f373-4994-b4b8-ea989fad0e3c"))
IConicCurve : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCoefficient,put=PutCoefficient))
    double Coefficient;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPoint (
        enum ksConicCurvePontIndexEnum PointIndex,
        double * X,
        double * Y );
    VARIANT_BOOL SetPoint (
        enum ksConicCurvePontIndexEnum PointIndex,
        double X,
        double Y );
    double GetHeight ( );
    void PutHeight (
        double PVal );
    double GetCoefficient ( );
    void PutCoefficient (
        double PVal );
    double GetAngle1 ( );
    void PutAngle1 (
        double PVal );
    double GetAngle2 ( );
    void PutAngle2 (
        double PVal );
    long GetStyle ( );
    void PutStyle (
        long Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ enum ksConicCurvePontIndexEnum PointIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ enum ksConicCurvePontIndexEnum PointIndex,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Coefficient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Coefficient (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
};

struct __declspec(uuid("d496f149-ab99-402b-b3d2-942b26069753"))
IConicCurves : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetConicCurve))
    IConicCurvePtr ConicCurve[];

    //
    // Wrapper methods for error-handling
    //

    IConicCurvePtr GetConicCurve (
        const _variant_t & Index );
    IConicCurvePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConicCurve (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IConicCurve * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IConicCurve * * Result ) = 0;
};

struct __declspec(uuid("b5d1a0be-8f3c-4143-b9c5-66f0cf0fe74d"))
IMark : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAutoNumber,put=PutAutoNumber))
    VARIANT_BOOL AutoNumber;
    __declspec(property(get=GetName))
    ITextPtr Name;
    __declspec(property(get=GetNumber))
    ITextPtr Number;
    __declspec(property(get=GetTextBefore))
    ITextPtr TextBefore;
    __declspec(property(get=GetTextAfter))
    ITextPtr TextAfter;
    __declspec(property(get=GetTextUnder))
    ITextPtr TextUnder;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Result );
    double GetY ( );
    void PutY (
        double Result );
    VARIANT_BOOL GetAutoNumber ( );
    void PutAutoNumber (
        VARIANT_BOOL Result );
    ITextPtr GetName ( );
    ITextPtr GetNumber ( );
    ITextPtr GetTextBefore ( );
    ITextPtr GetTextAfter ( );
    ITextPtr GetTextUnder ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_AutoNumber (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoNumber (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextBefore (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextAfter (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextUnder (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR Result ) = 0;
};

struct __declspec(uuid("47585370-56bd-4419-82d9-db7cbfb1a252"))
IMarks : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetMark))
    IMarkPtr Mark[];

    //
    // Wrapper methods for error-handling
    //

    IMarkPtr GetMark (
        const _variant_t & Index );
    IMarkPtr Add (
        enum DrawingObjectTypeEnum MarkType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Mark (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMark * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum DrawingObjectTypeEnum MarkType,
        /*[out,retval]*/ struct IMark * * Result ) = 0;
};

struct __declspec(uuid("e5c5a0ff-6cab-4179-9bf3-868d96bf6aea"))
IMarkInsideForm : IMark
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetForm,put=PutForm))
    enum ksMarkInsideFormEnum Form;
    __declspec(property(get=GetFormGabarit,put=PutFormGabarit))
    double FormGabarit;
    __declspec(property(get=GetFormHeight,put=PutFormHeight))
    double FormHeight;
    __declspec(property(get=GetFormStyle,put=PutFormStyle))
    long FormStyle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double Result );
    void PutForm (
        enum ksMarkInsideFormEnum NewVal );
    enum ksMarkInsideFormEnum GetForm ( );
    void PutFormGabarit (
        double PVal );
    double GetFormGabarit ( );
    void PutFormHeight (
        double PVal );
    double GetFormHeight ( );
    void PutFormStyle (
        long PVal );
    long GetFormStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall put_Form (
        /*[in]*/ enum ksMarkInsideFormEnum NewVal ) = 0;
      virtual HRESULT __stdcall get_Form (
        /*[out,retval]*/ enum ksMarkInsideFormEnum * NewVal ) = 0;
      virtual HRESULT __stdcall put_FormGabarit (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_FormGabarit (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FormHeight (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_FormHeight (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FormStyle (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_FormStyle (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("5a1540f9-7388-466f-a13c-eb1133423dd9"))
IMarkOnLine : IMark
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    enum ksMarkOnLinePosTypeEnum Position;
    __declspec(property(get=GetLine,put=PutLine))
    IDrawingObjectPtr Line;

    //
    // Wrapper methods for error-handling
    //

    enum ksMarkOnLinePosTypeEnum GetPosition ( );
    void PutPosition (
        enum ksMarkOnLinePosTypeEnum Result );
    IDrawingObjectPtr GetLine ( );
    void PutLine (
        struct IDrawingObject * Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum ksMarkOnLinePosTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum ksMarkOnLinePosTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Line (
        /*[in]*/ struct IDrawingObject * Result ) = 0;
};

struct __declspec(uuid("f3d7e6a6-26ea-4d68-ad58-4de194c47b4e"))
IMarkOnLeader : IMark
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum ksArrowEnum ArrowType;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetParallelBranch,put=PutParallelBranch))
    VARIANT_BOOL ParallelBranch;
    __declspec(property(get=GetBranchCount))
    long BranchCount;
    __declspec(property(get=GetBranchPoints,put=PutBranchPoints))
    _variant_t BranchPoints[];
    __declspec(property(get=GetBranchBegin,put=PutBranchBegin))
    VARIANT_BOOL BranchBegin[];
    __declspec(property(get=GetBranchX,put=PutBranchX))
    double BranchX[];
    __declspec(property(get=GetBranchY,put=PutBranchY))
    double BranchY[];
    __declspec(property(get=GetBranchPointsCount))
    long BranchPointsCount[];

    //
    // Wrapper methods for error-handling
    //

    enum ksArrowEnum GetArrowType ( );
    void PutArrowType (
        enum ksArrowEnum PVal );
    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum PVal );
    VARIANT_BOOL GetParallelBranch ( );
    void PutParallelBranch (
        VARIANT_BOOL PVal );
    long GetBranchCount ( );
    void PutBranchPoints (
        long Index,
        const _variant_t & PVal );
    _variant_t GetBranchPoints (
        long Index );
    void PutBranchBegin (
        long Index,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBranchBegin (
        long Index );
    void PutBranchX (
        long Index,
        double PVal );
    double GetBranchX (
        long Index );
    void PutBranchY (
        long Index,
        double PVal );
    double GetBranchY (
        long Index );
    long GetBranchPointsCount (
        long Index );
    VARIANT_BOOL AddBranch (
        long Index,
        VARIANT_BOOL Begin,
        const _variant_t & Points );
    VARIANT_BOOL AddBranchByPoint (
        long Index,
        VARIANT_BOOL Begin,
        double X,
        double Y );
    VARIANT_BOOL DeleteBranch (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum ksArrowEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum ksArrowEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ParallelBranch (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ParallelBranch (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BranchCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_BranchPoints (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_BranchPoints (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_BranchBegin (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BranchBegin (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BranchX (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BranchX (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BranchY (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BranchY (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_BranchPointsCount (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_AddBranch (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Begin,
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddBranchByPoint (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Begin,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteBranch (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("5a22e024-f530-45db-a3f2-ca0587bda1b5"))
IAxisJut : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetMarkOffset,put=PutMarkOffset))
    double MarkOffset;
    __declspec(property(get=GetBreakOffset,put=PutBreakOffset))
    double BreakOffset;
    __declspec(property(get=GetBreakDirection,put=PutBreakDirection))
    VARIANT_BOOL BreakDirection;
    __declspec(property(get=GetMarkOn,put=PutMarkOn))
    VARIANT_BOOL MarkOn;

    //
    // Wrapper methods for error-handling
    //

    void PutLength (
        double PVal );
    double GetLength ( );
    void PutMarkOffset (
        double PVal );
    double GetMarkOffset ( );
    void PutBreakOffset (
        double PVal );
    double GetBreakOffset ( );
    void PutBreakDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBreakDirection ( );
    void PutMarkOn (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMarkOn ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MarkOffset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_MarkOffset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakOffset (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BreakOffset (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BreakDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MarkOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MarkOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("2eda58ee-dbda-44cc-ad10-6895006d498c"))
ICutUnitMarking : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetStrokeCount))
    long StrokeCount;
    __declspec(property(get=GetStrokeX,put=PutStrokeX))
    double StrokeX[];
    __declspec(property(get=GetStrokeY,put=PutStrokeY))
    double StrokeY[];
    __declspec(property(get=GetStroke,put=PutStroke))
    double Stroke[];
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetTextUp))
    ITextPtr TextUp;
    __declspec(property(get=GetTextDown))
    ITextPtr TextDown;

    //
    // Wrapper methods for error-handling
    //

    long GetStrokeCount ( );
    void PutStrokeX (
        long Index,
        double PVal );
    double GetStrokeX (
        long Index );
    void PutStrokeY (
        long Index,
        double PVal );
    double GetStrokeY (
        long Index );
    void PutStroke (
        long Index,
        double PVal );
    double GetStroke (
        long Index );
    double GetAngle ( );
    void PutAngle (
        double Result );
    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum Result );
    double GetShelfX ( );
    void PutShelfX (
        double Result );
    double GetShelfY ( );
    void PutShelfY (
        double Result );
    ITextPtr GetTextUp ( );
    ITextPtr GetTextDown ( );
    VARIANT_BOOL AddStroke (
        double X,
        double Y,
        double Length );
    VARIANT_BOOL DeleteStroke (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StrokeCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_StrokeX (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StrokeX (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StrokeY (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_StrokeY (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Stroke (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Stroke (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum Result ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddStroke (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Length,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteStroke (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("23b00f94-98d3-4ad7-8827-f4088f4a9e5c"))
ICutUnitMarkings : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCutUnitMarking))
    ICutUnitMarkingPtr CutUnitMarking[];

    //
    // Wrapper methods for error-handling
    //

    ICutUnitMarkingPtr GetCutUnitMarking (
        const _variant_t & Index );
    ICutUnitMarkingPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CutUnitMarking (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICutUnitMarking * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICutUnitMarking * * Value ) = 0;
};

struct __declspec(uuid("86f46084-16a8-4b5c-99e9-f848216788f0"))
IUnitMarking : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetForm,put=PutForm))
    enum ksContourFormEnum Form;
    __declspec(property(get=GetTextUp))
    ITextPtr TextUp;
    __declspec(property(get=GetTextDown))
    ITextPtr TextDown;
    __declspec(property(get=GetFilletRadius,put=PutFilletRadius))
    double FilletRadius;

    //
    // Wrapper methods for error-handling
    //

    double GetXc ( );
    void PutXc (
        double Result );
    double GetYc ( );
    void PutYc (
        double Result );
    double GetRadius ( );
    void PutRadius (
        double Result );
    double GetHeight ( );
    void PutHeight (
        double Result );
    double GetWidth ( );
    void PutWidth (
        double Result );
    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum Result );
    double GetShelfX ( );
    void PutShelfX (
        double Result );
    double GetShelfY ( );
    void PutShelfY (
        double Result );
    enum ksContourFormEnum GetForm ( );
    void PutForm (
        enum ksContourFormEnum Result );
    ITextPtr GetTextUp ( );
    ITextPtr GetTextDown ( );
    double GetFilletRadius ( );
    void PutFilletRadius (
        double Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum Result ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Form (
        /*[out,retval]*/ enum ksContourFormEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Form (
        /*[in]*/ enum ksContourFormEnum Result ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_FilletRadius (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_FilletRadius (
        /*[in]*/ double Result ) = 0;
};

struct __declspec(uuid("969ad901-fc09-47f5-94f5-1abeb1a9c85c"))
IUnitMarkings : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetUnitMarking))
    IUnitMarkingPtr UnitMarking[];

    //
    // Wrapper methods for error-handling
    //

    IUnitMarkingPtr GetUnitMarking (
        const _variant_t & Index );
    IUnitMarkingPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UnitMarking (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IUnitMarking * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IUnitMarking * * Value ) = 0;
};

struct __declspec(uuid("1bfc5d3f-1483-4569-b4b5-7a12163a4655"))
IMultiTextLeader : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum ksArrowEnum ArrowType;
    __declspec(property(get=GetBranchCount))
    long BranchCount;
    __declspec(property(get=GetBranchPoints,put=PutBranchPoints))
    _variant_t BranchPoints[];
    __declspec(property(get=GetBranchPointsCount))
    long BranchPointsCount[];
    __declspec(property(get=GetBranchX,put=PutBranchX))
    double BranchX[];
    __declspec(property(get=GetBranchY,put=PutBranchY))
    double BranchY[];
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetTextDirection,put=PutTextDirection))
    VARIANT_BOOL TextDirection;
    __declspec(property(get=GetForm,put=PutForm))
    VARIANT_BOOL Form;
    __declspec(property(get=GetAlign,put=PutAlign))
    VARIANT_BOOL Align;
    __declspec(property(get=GetText))
    ITextPtr Text;

    //
    // Wrapper methods for error-handling
    //

    enum ksArrowEnum GetArrowType ( );
    void PutArrowType (
        enum ksArrowEnum Result );
    long GetBranchCount ( );
    void PutBranchPoints (
        long Index,
        const _variant_t & PVal );
    _variant_t GetBranchPoints (
        long Index );
    long GetBranchPointsCount (
        long Index );
    void PutBranchX (
        long Index,
        double PVal );
    double GetBranchX (
        long Index );
    void PutBranchY (
        long Index,
        double PVal );
    double GetBranchY (
        long Index );
    VARIANT_BOOL AddBranch (
        long Index,
        const _variant_t & Points );
    VARIANT_BOOL AddBranchByPoint (
        long Index,
        double X,
        double Y );
    VARIANT_BOOL DeleteBranch (
        long Index );
    double GetShelfX ( );
    void PutShelfX (
        double Result );
    double GetShelfY ( );
    void PutShelfY (
        double Result );
    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum Result );
    VARIANT_BOOL GetTextDirection ( );
    void PutTextDirection (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetForm ( );
    void PutForm (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAlign ( );
    void PutAlign (
        VARIANT_BOOL Result );
    ITextPtr GetText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum ksArrowEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum ksArrowEnum Result ) = 0;
      virtual HRESULT __stdcall get_BranchCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_BranchPoints (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_BranchPoints (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_BranchPointsCount (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_BranchX (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BranchX (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BranchY (
        /*[in]*/ long Index,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BranchY (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddBranch (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Points,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddBranchByPoint (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteBranch (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum Result ) = 0;
      virtual HRESULT __stdcall get_TextDirection (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_TextDirection (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Form (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Form (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
};

struct __declspec(uuid("233b2298-7a45-4ce1-aef2-30b063fdb63c"))
IMultiTextLeaders : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiTextLeader))
    IMultiTextLeaderPtr MultiTextLeader[];

    //
    // Wrapper methods for error-handling
    //

    IMultiTextLeaderPtr GetMultiTextLeader (
        const _variant_t & Index );
    IMultiTextLeaderPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiTextLeader (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMultiTextLeader * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IMultiTextLeader * * Value ) = 0;
};

struct __declspec(uuid("fabaf607-cb92-47c4-9409-b7678162051d"))
IUnitNumber : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetTextUp))
    ITextPtr TextUp;
    __declspec(property(get=GetTextDown))
    ITextPtr TextDown;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Result );
    double GetY ( );
    void PutY (
        double Result );
    ITextPtr GetTextUp ( );
    ITextPtr GetTextDown ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_TextUp (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextDown (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
};

struct __declspec(uuid("598e649b-970c-454b-9162-1bb6c9fbfcbf"))
IUnitNumbers : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetUnitNumber))
    IUnitNumberPtr UnitNumber[];

    //
    // Wrapper methods for error-handling
    //

    IUnitNumberPtr GetUnitNumber (
        const _variant_t & Index );
    IUnitNumberPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UnitNumber (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IUnitNumber * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IUnitNumber * * Value ) = 0;
};

struct __declspec(uuid("7f328d28-76e9-4e04-a35c-ad60339998e4"))
IBrace : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum ksAlignmentTypeEnum Alignment;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetShelfPoints,put=PutShelfPoints))
    _variant_t ShelfPoints;

    //
    // Wrapper methods for error-handling
    //

    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutLength (
        double PVal );
    double GetLength ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    double GetRadius ( );
    void PutRadius (
        double Result );
    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum Result );
    double GetShelfX ( );
    void PutShelfX (
        double Result );
    double GetShelfY ( );
    void PutShelfY (
        double Result );
    VARIANT_BOOL GetDirection ( );
    void PutDirection (
        VARIANT_BOOL Result );
    enum ksAlignmentTypeEnum GetAlignment ( );
    void PutAlignment (
        enum ksAlignmentTypeEnum Result );
    long GetStyle ( );
    void PutStyle (
        long Result );
    ITextPtr GetText ( );
    void PutShelfPoints (
        const _variant_t & PVal );
    _variant_t GetShelfPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum Result ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum ksAlignmentTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum ksAlignmentTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfPoints (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfPoints (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
};

struct __declspec(uuid("99f27bd6-6294-45d9-af78-a9d52e9dd799"))
IBraces : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBrace))
    IBracePtr Brace[];

    //
    // Wrapper methods for error-handling
    //

    IBracePtr GetBrace (
        const _variant_t & Index );
    IBracePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brace (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBrace * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBrace * * Value ) = 0;
};

struct __declspec(uuid("26e86124-dc1c-41a2-8075-e73f3ead8474"))
ICutLine : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowPos,put=PutArrowPos))
    VARIANT_BOOL ArrowPos;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetPoints,put=PutPoints))
    _variant_t Points;
    __declspec(property(get=GetAutoSorted,put=PutAutoSorted))
    VARIANT_BOOL AutoSorted;
    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetAdditionalText))
    ITextPtr AdditionalText;
    __declspec(property(get=GetAutoSheet,put=PutAutoSheet))
    VARIANT_BOOL AutoSheet;
    __declspec(property(get=GetAutoZone,put=PutAutoZone))
    VARIANT_BOOL AutoZone;
    __declspec(property(get=GetAdditionalTextPos,put=PutAdditionalTextPos))
    VARIANT_BOOL AdditionalTextPos;
    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum ksArrowEnum ArrowType;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetArrowPos ( );
    void PutArrowPos (
        VARIANT_BOOL Result );
    double GetX1 ( );
    void PutX1 (
        double Result );
    double GetY1 ( );
    void PutY1 (
        double Result );
    double GetX2 ( );
    void PutX2 (
        double Result );
    double GetY2 ( );
    void PutY2 (
        double Result );
    void PutPoints (
        const _variant_t & PVal );
    _variant_t GetPoints ( );
    VARIANT_BOOL GetAutoSorted ( );
    void PutAutoSorted (
        VARIANT_BOOL Result );
    ITextPtr GetText ( );
    ITextPtr GetAdditionalText ( );
    VARIANT_BOOL GetAutoSheet ( );
    void PutAutoSheet (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAutoZone ( );
    void PutAutoZone (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAdditionalTextPos ( );
    void PutAdditionalTextPos (
        VARIANT_BOOL Result );
    enum ksArrowEnum GetArrowType ( );
    void PutArrowType (
        enum ksArrowEnum PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowPos (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ArrowPos (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall put_Points (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSorted (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSorted (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSheet (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSheet (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AutoZone (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoZone (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AdditionalTextPos (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AdditionalTextPos (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum ksArrowEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum ksArrowEnum PVal ) = 0;
};

struct __declspec(uuid("666da5b4-324c-493c-9a91-37d9e078eb4e"))
ICutLines : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCutLine))
    ICutLinePtr CutLine[];

    //
    // Wrapper methods for error-handling
    //

    ICutLinePtr GetCutLine (
        const _variant_t & Index );
    ICutLinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CutLine (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICutLine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICutLine * * Value ) = 0;
};

struct __declspec(uuid("a3767bda-e605-4fc1-988d-81809deb36f4"))
ILineDimension : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetX3,put=PutX3))
    double X3;
    __declspec(property(get=GetY3,put=PutY3))
    double Y3;
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum ksLineDimensionOrientationEnum Orientation;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetX1 ( );
    void PutX1 (
        double PVal );
    double GetY1 ( );
    void PutY1 (
        double PVal );
    double GetX2 ( );
    void PutX2 (
        double PVal );
    double GetY2 ( );
    void PutY2 (
        double PVal );
    double GetX3 ( );
    void PutX3 (
        double PVal );
    double GetY3 ( );
    void PutY3 (
        double PVal );
    double GetShelfX ( );
    void PutShelfX (
        double PVal );
    double GetShelfY ( );
    void PutShelfY (
        double PVal );
    enum ksLineDimensionOrientationEnum GetOrientation ( );
    void PutOrientation (
        enum ksLineDimensionOrientationEnum PVal );
    double GetAngle ( );
    void PutAngle (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum ksLineDimensionOrientationEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum ksLineDimensionOrientationEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("a6f6a18a-78fa-4a77-bb75-90647e0c545c"))
ILineDimensions : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLineDimension))
    ILineDimensionPtr LineDimension[];

    //
    // Wrapper methods for error-handling
    //

    ILineDimensionPtr GetLineDimension (
        const _variant_t & Index );
    ILineDimensionPtr Add ( );
    ILineDimensionPtr AddLineSegmentAndPointDimension ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineDimension (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILineDimension * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILineDimension * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddLineSegmentAndPointDimension (
        /*[out,retval]*/ struct ILineDimension * * Value ) = 0;
};

struct __declspec(uuid("712a9437-d772-4eae-af83-abc9c22eb281"))
IRadialDimension : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDimensionType,put=PutDimensionType))
    VARIANT_BOOL DimensionType;
    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetBranchsCount))
    long BranchsCount;
    __declspec(property(get=GetBranchObject,put=PutBranchObject))
    IDrawingObjectPtr BranchObject[];
    __declspec(property(get=GetBranchBegin,put=PutBranchBegin))
    VARIANT_BOOL BranchBegin[];
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;

    //
    // Wrapper methods for error-handling
    //

    double GetXc ( );
    void PutXc (
        double PVal );
    double GetYc ( );
    void PutYc (
        double PVal );
    double GetRadius ( );
    void PutRadius (
        double PVal );
    VARIANT_BOOL GetDimensionType ( );
    void PutDimensionType (
        VARIANT_BOOL PVal );
    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Object1 );
    double GetAngle ( );
    void PutAngle (
        double PVal );
    VARIANT_BOOL AddBranch (
        VARIANT_BOOL BranchBegin,
        struct IDrawingObject * BranchObject );
    VARIANT_BOOL AddBranchByArcParam (
        VARIANT_BOOL BranchBegin,
        double Xc,
        double Yc,
        double Radius,
        double Angle1,
        double Angle2,
        VARIANT_BOOL Direction );
    long GetBranchsCount ( );
    IDrawingObjectPtr GetBranchObject (
        long Index );
    void PutBranchObject (
        long Index,
        struct IDrawingObject * BranchObject );
    VARIANT_BOOL DeleteBranch (
        long Index );
    VARIANT_BOOL GetBranchParam (
        long Index,
        double * Xc,
        double * Yc,
        double * Angle1,
        double * Angle2,
        VARIANT_BOOL * Direction );
    VARIANT_BOOL SetBranchParam (
        long Index,
        double Xc,
        double Yc,
        double Angle1,
        double Angle2,
        VARIANT_BOOL Direction );
    VARIANT_BOOL GetBranchBegin (
        long Index );
    void PutBranchBegin (
        long Index,
        VARIANT_BOOL PVal );
    double GetShelfX ( );
    void PutShelfX (
        double PVal );
    double GetShelfY ( );
    void PutShelfY (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_AddBranch (
        /*[in]*/ VARIANT_BOOL BranchBegin,
        /*[in]*/ struct IDrawingObject * BranchObject,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddBranchByArcParam (
        /*[in]*/ VARIANT_BOOL BranchBegin,
        /*[in]*/ double Xc,
        /*[in]*/ double Yc,
        /*[in]*/ double Radius,
        /*[in]*/ double Angle1,
        /*[in]*/ double Angle2,
        /*[in]*/ VARIANT_BOOL Direction,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BranchsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_BranchObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDrawingObject * * BranchObject ) = 0;
      virtual HRESULT __stdcall put_BranchObject (
        /*[in]*/ long Index,
        /*[in]*/ struct IDrawingObject * BranchObject ) = 0;
      virtual HRESULT __stdcall raw_DeleteBranch (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBranchParam (
        /*[in]*/ long Index,
        /*[out]*/ double * Xc,
        /*[out]*/ double * Yc,
        /*[out]*/ double * Angle1,
        /*[out]*/ double * Angle2,
        /*[out]*/ VARIANT_BOOL * Direction,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBranchParam (
        /*[in]*/ long Index,
        /*[in]*/ double Xc,
        /*[in]*/ double Yc,
        /*[in]*/ double Angle1,
        /*[in]*/ double Angle2,
        /*[in]*/ VARIANT_BOOL Direction,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_BranchBegin (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BranchBegin (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("12d26993-449e-42e2-a909-b047afd6e27d"))
IRadialDimensions : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialDimension))
    IRadialDimensionPtr RadialDimension[];

    //
    // Wrapper methods for error-handling
    //

    IRadialDimensionPtr GetRadialDimension (
        const _variant_t & Index );
    IRadialDimensionPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialDimension (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRadialDimension * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRadialDimension * * Value ) = 0;
};

struct __declspec(uuid("2b4ce92f-438d-4d3e-8f8d-4d14e5d0e214"))
IDiametralDimension : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDimensionType,put=PutDimensionType))
    VARIANT_BOOL DimensionType;
    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetXc ( );
    void PutXc (
        double PVal );
    double GetYc ( );
    void PutYc (
        double PVal );
    double GetRadius ( );
    void PutRadius (
        double PVal );
    VARIANT_BOOL GetDimensionType ( );
    void PutDimensionType (
        VARIANT_BOOL PVal );
    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Object1 );
    double GetAngle ( );
    void PutAngle (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("8e45feb9-7bcd-4c9f-9767-320736980662"))
IDiametralDimensions : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetDiametralDimension))
    IDiametralDimensionPtr DiametralDimension[];

    //
    // Wrapper methods for error-handling
    //

    IDiametralDimensionPtr GetDiametralDimension (
        const _variant_t & Index );
    IDiametralDimensionPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiametralDimension (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDiametralDimension * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IDiametralDimension * * Value ) = 0;
};

struct __declspec(uuid("0f2ce9ec-5d2a-4b21-b96a-46201c120ed1"))
IAngleDimension : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetBaseObject1,put=PutBaseObject1))
    IDrawingObjectPtr BaseObject1;
    __declspec(property(get=GetBaseObject2,put=PutBaseObject2))
    IDrawingObjectPtr BaseObject2;
    __declspec(property(get=GetDimensionType,put=PutDimensionType))
    enum ksAngleDimTypeEnum DimensionType;
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetX3,put=PutX3))
    double X3;
    __declspec(property(get=GetY3,put=PutY3))
    double Y3;

    //
    // Wrapper methods for error-handling
    //

    double GetXc ( );
    void PutXc (
        double PVal );
    double GetYc ( );
    void PutYc (
        double PVal );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutAngle1 (
        double PVal );
    double GetAngle1 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );
    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    IDrawingObjectPtr GetBaseObject1 ( );
    void PutBaseObject1 (
        struct IDrawingObject * Object1 );
    IDrawingObjectPtr GetBaseObject2 ( );
    void PutBaseObject2 (
        struct IDrawingObject * Object1 );
    enum ksAngleDimTypeEnum GetDimensionType ( );
    void PutDimensionType (
        enum ksAngleDimTypeEnum PVal );
    double GetShelfX ( );
    void PutShelfX (
        double PVal );
    double GetShelfY ( );
    void PutShelfY (
        double PVal );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutX3 (
        double PVal );
    double GetX3 ( );
    void PutY3 (
        double PVal );
    double GetY3 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject1 (
        /*[out,retval]*/ struct IDrawingObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_BaseObject1 (
        /*[in]*/ struct IDrawingObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_BaseObject2 (
        /*[out,retval]*/ struct IDrawingObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_BaseObject2 (
        /*[in]*/ struct IDrawingObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ enum ksAngleDimTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionType (
        /*[in]*/ enum ksAngleDimTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_X3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y3 (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("df9abb77-bbb6-4b29-a0e0-81dcfd525c2e"))
IAngleDimensions : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetAngleDimension))
    IAngleDimensionPtr AngleDimension[];

    //
    // Wrapper methods for error-handling
    //

    IAngleDimensionPtr GetAngleDimension (
        const _variant_t & Index );
    IAngleDimensionPtr Add (
        enum DrawingObjectTypeEnum DimType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AngleDimension (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAngleDimension * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum DrawingObjectTypeEnum DimType,
        /*[out,retval]*/ struct IAngleDimension * * Value ) = 0;
};

struct __declspec(uuid("61164a26-855c-4220-88ed-c2bdaf49b2db"))
IBreakLineDimension : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetX3,put=PutX3))
    double X3;
    __declspec(property(get=GetY3,put=PutY3))
    double Y3;
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;

    //
    // Wrapper methods for error-handling
    //

    double GetX1 ( );
    void PutX1 (
        double PVal );
    double GetY1 ( );
    void PutY1 (
        double PVal );
    double GetX2 ( );
    void PutX2 (
        double PVal );
    double GetY2 ( );
    void PutY2 (
        double PVal );
    double GetX3 ( );
    void PutX3 (
        double PVal );
    double GetY3 ( );
    void PutY3 (
        double PVal );
    double GetShelfX ( );
    void PutShelfX (
        double PVal );
    double GetShelfY ( );
    void PutShelfY (
        double PVal );
    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Object1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Object1 ) = 0;
};

struct __declspec(uuid("4125169f-3ea8-4ac0-9e1b-5582d62600c4"))
IBreakLineDimensions : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBreakLineDimension))
    IBreakLineDimensionPtr BreakLineDimension[];

    //
    // Wrapper methods for error-handling
    //

    IBreakLineDimensionPtr GetBreakLineDimension (
        const _variant_t & Index );
    IBreakLineDimensionPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BreakLineDimension (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBreakLineDimension * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBreakLineDimension * * Result ) = 0;
};

struct __declspec(uuid("938be57f-55ff-469f-82a5-b1cd6ccf8340"))
IHeightDimension : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDimensionType,put=PutDimensionType))
    enum ksHeightDimTypeEnum DimensionType;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;

    //
    // Wrapper methods for error-handling
    //

    enum ksHeightDimTypeEnum GetDimensionType ( );
    void PutDimensionType (
        enum ksHeightDimTypeEnum PVal );
    double GetX ( );
    void PutX (
        double PVal );
    double GetY ( );
    void PutY (
        double PVal );
    double GetX1 ( );
    void PutX1 (
        double PVal );
    double GetY1 ( );
    void PutY1 (
        double PVal );
    double GetX2 ( );
    void PutX2 (
        double PVal );
    double GetY2 ( );
    void PutY2 (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ enum ksHeightDimTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionType (
        /*[in]*/ enum ksHeightDimTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("3a56d35c-3242-4c49-ba99-cf790eb10356"))
IHeightDimensions : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetHeightDimension))
    IHeightDimensionPtr HeightDimension[];

    //
    // Wrapper methods for error-handling
    //

    IHeightDimensionPtr GetHeightDimension (
        const _variant_t & Index );
    IHeightDimensionPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HeightDimension (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IHeightDimension * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IHeightDimension * * Result ) = 0;
};

struct __declspec(uuid("11487495-b18a-4877-9e85-3dc9016df8bd"))
IArcDimension : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetX3,put=PutX3))
    double X3;
    __declspec(property(get=GetY3,put=PutY3))
    double Y3;
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetDimensionType,put=PutDimensionType))
    VARIANT_BOOL DimensionType;
    __declspec(property(get=GetTextPointer,put=PutTextPointer))
    VARIANT_BOOL TextPointer;

    //
    // Wrapper methods for error-handling
    //

    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Object1 );
    double GetXc ( );
    void PutXc (
        double PVal );
    double GetYc ( );
    void PutYc (
        double PVal );
    double GetX1 ( );
    void PutX1 (
        double PVal );
    double GetY1 ( );
    void PutY1 (
        double PVal );
    double GetX2 ( );
    void PutX2 (
        double PVal );
    double GetY2 ( );
    void PutY2 (
        double PVal );
    double GetX3 ( );
    void PutX3 (
        double PVal );
    double GetY3 ( );
    void PutY3 (
        double PVal );
    double GetShelfX ( );
    void PutShelfX (
        double PVal );
    double GetShelfY ( );
    void PutShelfY (
        double PVal );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    VARIANT_BOOL GetDimensionType ( );
    void PutDimensionType (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTextPointer ( );
    void PutTextPointer (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TextPointer (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TextPointer (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("fe2755d9-48e2-44cc-bc24-86cf86be08e2"))
IArcDimensions : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetArcDimension))
    IArcDimensionPtr ArcDimension[];

    //
    // Wrapper methods for error-handling
    //

    IArcDimensionPtr GetArcDimension (
        const _variant_t & Index );
    IArcDimensionPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArcDimension (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IArcDimension * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IArcDimension * * Value ) = 0;
};

struct __declspec(uuid("88491537-9e93-42f3-861c-761a75bb89d6"))
IBreakRadialDimension : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetBreakLength,put=PutBreakLength))
    double BreakLength;
    __declspec(property(get=GetTextOnLine,put=PutTextOnLine))
    enum ksDimensionTextPosEnum TextOnLine;
    __declspec(property(get=GetBreakAngle,put=PutBreakAngle))
    double BreakAngle;
    __declspec(property(get=GetBreakX1,put=PutBreakX1))
    double BreakX1;
    __declspec(property(get=GetBreakY1,put=PutBreakY1))
    double BreakY1;
    __declspec(property(get=GetBreakX2,put=PutBreakX2))
    double BreakX2;
    __declspec(property(get=GetBreakY2,put=PutBreakY2))
    double BreakY2;

    //
    // Wrapper methods for error-handling
    //

    double GetXc ( );
    void PutXc (
        double PVal );
    double GetYc ( );
    void PutYc (
        double PVal );
    double GetRadius ( );
    void PutRadius (
        double PVal );
    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Object1 );
    double GetAngle ( );
    void PutAngle (
        double PVal );
    double GetBreakLength ( );
    void PutBreakLength (
        double PVal );
    enum ksDimensionTextPosEnum GetTextOnLine ( );
    void PutTextOnLine (
        enum ksDimensionTextPosEnum PVal );
    double GetBreakAngle ( );
    void PutBreakAngle (
        double PVal );
    double GetBreakX1 ( );
    void PutBreakX1 (
        double PVal );
    double GetBreakY1 ( );
    void PutBreakY1 (
        double PVal );
    double GetBreakX2 ( );
    void PutBreakX2 (
        double PVal );
    double GetBreakY2 ( );
    void PutBreakY2 (
        double PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BreakLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TextOnLine (
        /*[out,retval]*/ enum ksDimensionTextPosEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_TextOnLine (
        /*[in]*/ enum ksDimensionTextPosEnum PVal ) = 0;
      virtual HRESULT __stdcall get_BreakAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BreakX1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakX1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BreakY1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakY1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BreakX2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakX2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BreakY2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakY2 (
        /*[in]*/ double PVal ) = 0;
};

struct __declspec(uuid("e2181a3e-5417-4d73-ab65-983ded3438e0"))
IBreakRadialDimensions : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBreakRadialDimension))
    IBreakRadialDimensionPtr BreakRadialDimension[];

    //
    // Wrapper methods for error-handling
    //

    IBreakRadialDimensionPtr GetBreakRadialDimension (
        const _variant_t & Index );
    IBreakRadialDimensionPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BreakRadialDimension (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBreakRadialDimension * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBreakRadialDimension * * Value ) = 0;
};

struct __declspec(uuid("0a192ac5-d8bc-43e9-8fc7-acf32578ddb4"))
IRough : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetBranchX0,put=PutBranchX0))
    double BranchX0;
    __declspec(property(get=GetBranchY0,put=PutBranchY0))
    double BranchY0;
    __declspec(property(get=GetShelfX,put=PutShelfX))
    double ShelfX;
    __declspec(property(get=GetShelfY,put=PutShelfY))
    double ShelfY;
    __declspec(property(get=GetBranchArrowType,put=PutBranchArrowType))
    enum ksArrowEnum BranchArrowType[];
    __declspec(property(get=GetBranchArrowInside,put=PutBranchArrowInside))
    VARIANT_BOOL BranchArrowInside[];

    //
    // Wrapper methods for error-handling
    //

    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * NewObject );
    double GetBranchX0 ( );
    void PutBranchX0 (
        double Result );
    double GetBranchY0 ( );
    void PutBranchY0 (
        double Result );
    double GetShelfX ( );
    void PutShelfX (
        double Result );
    double GetShelfY ( );
    void PutShelfY (
        double Result );
    enum ksArrowEnum GetBranchArrowType (
        long Index );
    void PutBranchArrowType (
        long Index,
        enum ksArrowEnum Result );
    VARIANT_BOOL GetBranchArrowInside (
        long Index );
    void PutBranchArrowInside (
        long Index,
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * NewObject ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * NewObject ) = 0;
      virtual HRESULT __stdcall get_BranchX0 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_BranchX0 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_BranchY0 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_BranchY0 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfX (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfX (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_ShelfY (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfY (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_BranchArrowType (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksArrowEnum * Result ) = 0;
      virtual HRESULT __stdcall put_BranchArrowType (
        /*[in]*/ long Index,
        /*[in]*/ enum ksArrowEnum Result ) = 0;
      virtual HRESULT __stdcall get_BranchArrowInside (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_BranchArrowInside (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("acc42b32-27f3-4f74-b4a5-c97d4c7b289d"))
IRoughs : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRough))
    IRoughPtr Rough[];

    //
    // Wrapper methods for error-handling
    //

    IRoughPtr GetRough (
        const _variant_t & Index );
    IRoughPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rough (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRough * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRough * * Value ) = 0;
};

struct __declspec(uuid("01cdfd67-69ea-4289-8f42-5b01bb9bf70b"))
IBase : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetX0,put=PutX0))
    double X0;
    __declspec(property(get=GetY0,put=PutY0))
    double Y0;
    __declspec(property(get=GetBranchX,put=PutBranchX))
    double BranchX;
    __declspec(property(get=GetBranchY,put=PutBranchY))
    double BranchY;
    __declspec(property(get=GetDrawType,put=PutDrawType))
    VARIANT_BOOL DrawType;
    __declspec(property(get=GetAutoSorted,put=PutAutoSorted))
    VARIANT_BOOL AutoSorted;
    __declspec(property(get=GetText))
    ITextPtr Text;

    //
    // Wrapper methods for error-handling
    //

    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Object1 );
    double GetX0 ( );
    void PutX0 (
        double Result );
    double GetY0 ( );
    void PutY0 (
        double Result );
    double GetBranchX ( );
    void PutBranchX (
        double Result );
    double GetBranchY ( );
    void PutBranchY (
        double Result );
    VARIANT_BOOL GetDrawType ( );
    void PutDrawType (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAutoSorted ( );
    void PutAutoSorted (
        VARIANT_BOOL Result );
    ITextPtr GetText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Object1 ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Object1 ) = 0;
      virtual HRESULT __stdcall get_X0 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X0 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y0 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y0 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_BranchX (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_BranchX (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_BranchY (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_BranchY (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_DrawType (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_DrawType (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AutoSorted (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSorted (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
};

struct __declspec(uuid("c607727c-6b0a-4fb6-afca-ed9d83f5c6b7"))
IBases : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBase))
    IBasePtr Base[];

    //
    // Wrapper methods for error-handling
    //

    IBasePtr GetBase (
        const _variant_t & Index );
    IBasePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Base (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBase * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBase * * Value ) = 0;
};

struct __declspec(uuid("42def911-adb2-478c-85f1-d5fefa262eec"))
ITolerance : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowType,put=PutArrowType))
    VARIANT_BOOL ArrowType[];
    __declspec(property(get=GetBranchPos,put=PutBranchPos))
    enum ksTablePointEnum BranchPos[];
    __declspec(property(get=GetToleranceArrowType,put=PutToleranceArrowType))
    enum ksToleranceArrowType ToleranceArrowType[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetArrowType (
        long Index );
    void PutArrowType (
        long Index,
        VARIANT_BOOL Result );
    enum ksTablePointEnum GetBranchPos (
        long Index );
    void PutBranchPos (
        long Index,
        enum ksTablePointEnum Result );
    enum ksToleranceArrowType GetToleranceArrowType (
        long Index );
    void PutToleranceArrowType (
        long Index,
        enum ksToleranceArrowType Result );
    VARIANT_BOOL FormatTolerance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowType (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_BranchPos (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksTablePointEnum * Result ) = 0;
      virtual HRESULT __stdcall put_BranchPos (
        /*[in]*/ long Index,
        /*[in]*/ enum ksTablePointEnum Result ) = 0;
      virtual HRESULT __stdcall get_ToleranceArrowType (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum ksToleranceArrowType * Result ) = 0;
      virtual HRESULT __stdcall put_ToleranceArrowType (
        /*[in]*/ long Index,
        /*[in]*/ enum ksToleranceArrowType Result ) = 0;
      virtual HRESULT __stdcall raw_FormatTolerance (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("97cdd55f-3c64-469b-b26e-a927d3300b6c"))
ITolerances : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetTolerance))
    ITolerancePtr Tolerance[];

    //
    // Wrapper methods for error-handling
    //

    ITolerancePtr GetTolerance (
        const _variant_t & Index );
    ITolerancePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tolerance (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ITolerance * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ITolerance * * Value ) = 0;
};

struct __declspec(uuid("9b421bda-0444-4a68-b69c-1c05d05c9d28"))
IDrawingTable : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetFixedCellsSize,put=PutFixedCellsSize))
    VARIANT_BOOL FixedCellsSize;
    __declspec(property(get=GetFixedRowCount,put=PutFixedRowCount))
    VARIANT_BOOL FixedRowCount;
    __declspec(property(get=GetFixedColumnCount,put=PutFixedColumnCount))
    VARIANT_BOOL FixedColumnCount;
    __declspec(property(get=GetTitle))
    ITextPtr Title;
    __declspec(property(get=GetNumericGroup,put=PutNumericGroup))
    INumericGroupPtr NumericGroup;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Result );
    double GetY ( );
    void PutY (
        double Result );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutFixedCellsSize (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedCellsSize ( );
    void PutFixedRowCount (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedRowCount ( );
    void PutFixedColumnCount (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixedColumnCount ( );
    VARIANT_BOOL Save (
        _bstr_t FileName );
    ITextPtr GetTitle ( );
    INumericGroupPtr GetNumericGroup ( );
    void PutNumericGroup (
        struct INumericGroup * Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedCellsSize (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedCellsSize (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedRowCount (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedRowCount (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FixedColumnCount (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FixedColumnCount (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_NumericGroup (
        /*[out,retval]*/ struct INumericGroup * * Result ) = 0;
      virtual HRESULT __stdcall put_NumericGroup (
        /*[in]*/ struct INumericGroup * Result ) = 0;
};

struct __declspec(uuid("df92dace-bdc6-4341-86da-3a9c8dcfdefe"))
IDrawingTables : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawingTable))
    IDrawingTablePtr DrawingTable[];

    //
    // Wrapper methods for error-handling
    //

    IDrawingTablePtr GetDrawingTable (
        const _variant_t & Index );
    IDrawingTablePtr Add (
        long RowsCount,
        long ColumnsCount,
        double RowHeigh,
        double ColumnsWidth,
        enum ksTableTileLayoutEnum TitlePos );
    IDrawingTablePtr Load (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawingTable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IDrawingTable * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long RowsCount,
        /*[in]*/ long ColumnsCount,
        /*[in]*/ double RowHeigh,
        /*[in]*/ double ColumnsWidth,
        /*[in]*/ enum ksTableTileLayoutEnum TitlePos,
        /*[out,retval]*/ struct IDrawingTable * * Value ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct IDrawingTable * * PVal ) = 0;
};

struct __declspec(uuid("3ee98177-63e8-4c48-89ad-3d5cccf84d72"))
IViewPointer : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetTextX,put=PutTextX))
    double TextX;
    __declspec(property(get=GetTextY,put=PutTextY))
    double TextY;
    __declspec(property(get=GetAutoSorted,put=PutAutoSorted))
    VARIANT_BOOL AutoSorted;
    __declspec(property(get=GetAutoSheet,put=PutAutoSheet))
    VARIANT_BOOL AutoSheet;
    __declspec(property(get=GetAutoZone,put=PutAutoZone))
    VARIANT_BOOL AutoZone;
    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetAdditionalText))
    ITextPtr AdditionalText;
    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum ksArrowEnum ArrowType;

    //
    // Wrapper methods for error-handling
    //

    double GetX1 ( );
    void PutX1 (
        double Result );
    double GetY1 ( );
    void PutY1 (
        double Result );
    double GetX2 ( );
    void PutX2 (
        double Result );
    double GetY2 ( );
    void PutY2 (
        double Result );
    double GetTextX ( );
    void PutTextX (
        double Result );
    double GetTextY ( );
    void PutTextY (
        double Result );
    VARIANT_BOOL GetAutoSorted ( );
    void PutAutoSorted (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAutoSheet ( );
    void PutAutoSheet (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAutoZone ( );
    void PutAutoZone (
        VARIANT_BOOL Result );
    ITextPtr GetText ( );
    ITextPtr GetAdditionalText ( );
    enum ksArrowEnum GetArrowType ( );
    void PutArrowType (
        enum ksArrowEnum PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_TextX (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_TextX (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_TextY (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_TextY (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_AutoSorted (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSorted (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AutoSheet (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSheet (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AutoZone (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoZone (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum ksArrowEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum ksArrowEnum PVal ) = 0;
};

struct __declspec(uuid("08b45c97-6f86-4809-bbc3-78f216bd0430"))
IViewPointers : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetViewPointer))
    IViewPointerPtr ViewPointer[];

    //
    // Wrapper methods for error-handling
    //

    IViewPointerPtr GetViewPointer (
        const _variant_t & Index );
    IViewPointerPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ViewPointer (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IViewPointer * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IViewPointer * * Value ) = 0;
};

struct __declspec(uuid("8fe1cada-de72-4a55-b303-eaf1f4748cf6"))
ICentreMarker : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetSignType,put=PutSignType))
    enum ksCentreMarkerEnum SignType;
    __declspec(property(get=GetSemiAxisAutoLength,put=PutSemiAxisAutoLength))
    VARIANT_BOOL SemiAxisAutoLength[];
    __declspec(property(get=GetSemiAxisLength,put=PutSemiAxisLength))
    double SemiAxisLength[];
    __declspec(property(get=GetCrosshairSize,put=PutCrosshairSize))
    double CrosshairSize;
    __declspec(property(get=GetCrosshairSizeModify,put=PutCrosshairSizeModify))
    VARIANT_BOOL CrosshairSizeModify;

    //
    // Wrapper methods for error-handling
    //

    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Result );
    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutSignType (
        enum ksCentreMarkerEnum PVal );
    enum ksCentreMarkerEnum GetSignType ( );
    void PutSemiAxisAutoLength (
        enum ksSemiAxisTypeEnum AxisType,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSemiAxisAutoLength (
        enum ksSemiAxisTypeEnum AxisType );
    void PutSemiAxisLength (
        enum ksSemiAxisTypeEnum AxisType,
        double PVal );
    double GetSemiAxisLength (
        enum ksSemiAxisTypeEnum AxisType );
    void PutCrosshairSize (
        double PVal );
    double GetCrosshairSize ( );
    void PutCrosshairSizeModify (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCrosshairSizeModify ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Result ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_SignType (
        /*[in]*/ enum ksCentreMarkerEnum PVal ) = 0;
      virtual HRESULT __stdcall get_SignType (
        /*[out,retval]*/ enum ksCentreMarkerEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_SemiAxisAutoLength (
        /*[in]*/ enum ksSemiAxisTypeEnum AxisType,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SemiAxisAutoLength (
        /*[in]*/ enum ksSemiAxisTypeEnum AxisType,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SemiAxisLength (
        /*[in]*/ enum ksSemiAxisTypeEnum AxisType,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SemiAxisLength (
        /*[in]*/ enum ksSemiAxisTypeEnum AxisType,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CrosshairSize (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CrosshairSize (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CrosshairSizeModify (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CrosshairSizeModify (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("a0533211-cf52-4ab5-a172-3dc7d94276d1"))
ICentreMarkers : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCentreMarker))
    ICentreMarkerPtr CentreMarker[];

    //
    // Wrapper methods for error-handling
    //

    ICentreMarkerPtr GetCentreMarker (
        const _variant_t & Index );
    ICentreMarkerPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentreMarker (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICentreMarker * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICentreMarker * * Result ) = 0;
};

struct __declspec(uuid("a9d96ce2-9fe4-494e-87b2-20122eac2ae4"))
IRemoteElement : IUnitMarking
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSorted,put=PutAutoSorted))
    VARIANT_BOOL AutoSorted;
    __declspec(property(get=GetAutoSheet,put=PutAutoSheet))
    VARIANT_BOOL AutoSheet;
    __declspec(property(get=GetAutoZone,put=PutAutoZone))
    VARIANT_BOOL AutoZone;
    __declspec(property(get=GetAdditionalText))
    ITextPtr AdditionalText;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAutoSorted ( );
    void PutAutoSorted (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAutoSheet ( );
    void PutAutoSheet (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetAutoZone ( );
    void PutAutoZone (
        VARIANT_BOOL Result );
    ITextPtr GetAdditionalText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AutoSorted (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSorted (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AutoSheet (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSheet (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AutoZone (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoZone (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AdditionalText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
};

struct __declspec(uuid("88427a6b-00af-46e2-9b95-bc8348c2162a"))
IRemoteElements : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRemoteElement))
    IRemoteElementPtr RemoteElement[];

    //
    // Wrapper methods for error-handling
    //

    IRemoteElementPtr GetRemoteElement (
        const _variant_t & Index );
    IRemoteElementPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RemoteElement (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRemoteElement * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRemoteElement * * Result ) = 0;
};

struct __declspec(uuid("5c5caebd-70a9-41db-9f74-f9760d822d95"))
IAxisLine : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutLength (
        double PVal );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("c567e700-e163-4c8f-b329-931bb93d0223"))
IAxisLines : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisLine))
    IAxisLinePtr AxisLine[];

    //
    // Wrapper methods for error-handling
    //

    IAxisLinePtr GetAxisLine (
        const _variant_t & Index );
    IAxisLinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AxisLine (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAxisLine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAxisLine * * Result ) = 0;
};

struct __declspec(uuid("fa2012e1-a983-47d3-9d43-b8dc619ac554"))
IWaveLine : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetHalfWavesCount,put=PutHalfWavesCount))
    long HalfWavesCount;
    __declspec(property(get=GetWaveLength,put=PutWaveLength))
    double WaveLength;
    __declspec(property(get=GetWavesAmplitude))
    double WavesAmplitude;
    __declspec(property(get=GetWavesAmplitudeRepresentation))
    VARIANT_BOOL WavesAmplitudeRepresentation;
    __declspec(property(get=GetAutoWavesAmplitude,put=PutAutoWavesAmplitude))
    VARIANT_BOOL AutoWavesAmplitude;

    //
    // Wrapper methods for error-handling
    //

    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    void PutLength (
        double PVal );
    double GetLength ( );
    long GetStyle ( );
    void PutStyle (
        long Result );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutHalfWavesCount (
        long PVal );
    long GetHalfWavesCount ( );
    void PutWaveLength (
        double PVal );
    double GetWaveLength ( );
    VARIANT_BOOL SetWavesAmplitude (
        VARIANT_BOOL Representation,
        double NewVal );
    double GetWavesAmplitude ( );
    VARIANT_BOOL GetWavesAmplitudeRepresentation ( );
    void PutAutoWavesAmplitude (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoWavesAmplitude ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HalfWavesCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_HalfWavesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_WaveLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_WaveLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetWavesAmplitude (
        /*[in]*/ VARIANT_BOOL Representation,
        /*[in]*/ double NewVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_WavesAmplitude (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_WavesAmplitudeRepresentation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoWavesAmplitude (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoWavesAmplitude (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("c1f0a911-8b4a-48b5-9611-5250d3fc2aca"))
IWaveLines : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetWaveLine))
    IWaveLinePtr WaveLine[];

    //
    // Wrapper methods for error-handling
    //

    IWaveLinePtr GetWaveLine (
        const _variant_t & Index );
    IWaveLinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WaveLine (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IWaveLine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IWaveLine * * Result ) = 0;
};

struct __declspec(uuid("2482eb44-5625-4fb9-a46b-781426b02510"))
IBrokenLine : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetJutValue,put=PutJutValue))
    double JutValue;
    __declspec(property(get=GetAutoJutValue,put=PutAutoJutValue))
    VARIANT_BOOL AutoJutValue;
    __declspec(property(get=GetBreaksCount,put=PutBreaksCount))
    long BreaksCount;
    __declspec(property(get=GetBreakAmplitude,put=PutBreakAmplitude))
    double BreakAmplitude;
    __declspec(property(get=GetAutoBreakAmplitude,put=PutAutoBreakAmplitude))
    VARIANT_BOOL AutoBreakAmplitude;
    __declspec(property(get=GetBreakDisplacement,put=PutBreakDisplacement))
    double BreakDisplacement;
    __declspec(property(get=GetType1,put=PutType1))
    VARIANT_BOOL Type1;

    //
    // Wrapper methods for error-handling
    //

    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutLength (
        double PVal );
    double GetLength ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    long GetStyle ( );
    void PutStyle (
        long Result );
    void PutJutValue (
        double PVal );
    double GetJutValue ( );
    void PutAutoJutValue (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoJutValue ( );
    void PutBreaksCount (
        long PVal );
    long GetBreaksCount ( );
    void PutBreakAmplitude (
        double PVal );
    double GetBreakAmplitude ( );
    void PutAutoBreakAmplitude (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoBreakAmplitude ( );
    void PutBreakDisplacement (
        double PVal );
    double GetBreakDisplacement ( );
    void PutType1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetType1 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall put_JutValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_JutValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoJutValue (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoJutValue (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BreaksCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_BreaksCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakAmplitude (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BreakAmplitude (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoBreakAmplitude (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoBreakAmplitude (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakDisplacement (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BreakDisplacement (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Type1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Type1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("2a7eadc0-5e79-4ddb-85d5-e3edb743480d"))
IBrokenLines : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBrokenLine))
    IBrokenLinePtr BrokenLine[];

    //
    // Wrapper methods for error-handling
    //

    IBrokenLinePtr GetBrokenLine (
        const _variant_t & Index );
    IBrokenLinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BrokenLine (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBrokenLine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IBrokenLine * * Result ) = 0;
};

struct __declspec(uuid("43812a86-37cd-4c6c-ae86-78576ec7e834"))
ICircularCentres : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObjects,put=PutBaseObjects))
    _variant_t BaseObjects;
    __declspec(property(get=GetX0,put=PutX0))
    double X0;
    __declspec(property(get=GetY0,put=PutY0))
    double Y0;
    __declspec(property(get=GetWithCenter,put=PutWithCenter))
    VARIANT_BOOL WithCenter;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetCentres))
    _variant_t Centres;
    __declspec(property(get=GetRadiuses))
    _variant_t Radiuses;
    __declspec(property(get=GetAxisesCount))
    long AxisesCount[];
    __declspec(property(get=GetSemiAxisAutoLength,put=PutSemiAxisAutoLength))
    VARIANT_BOOL SemiAxisAutoLength[][][];
    __declspec(property(get=GetSemiAxisLength,put=PutSemiAxisLength))
    double SemiAxisLength[][][];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBaseObjects ( );
    void PutBaseObjects (
        const _variant_t & Result );
    void PutX0 (
        double PVal );
    double GetX0 ( );
    void PutY0 (
        double PVal );
    double GetY0 ( );
    void PutWithCenter (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWithCenter ( );
    void PutClosed (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosed ( );
    _variant_t GetCentres ( );
    _variant_t GetRadiuses ( );
    VARIANT_BOOL AddCentre (
        double X,
        double Y,
        double Radius );
    VARIANT_BOOL AddCentreByObject (
        struct IKompasAPIObject * Object );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL DeleteCentre (
        long Index );
    VARIANT_BOOL DeleteCentreByPoint (
        double X,
        double Y );
    long GetAxisesCount (
        VARIANT_BOOL WithCenter );
    void PutSemiAxisAutoLength (
        VARIANT_BOOL WithCenter,
        long Index,
        enum ksSemiAxisTypeEnum AxisType,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSemiAxisAutoLength (
        VARIANT_BOOL WithCenter,
        long Index,
        enum ksSemiAxisTypeEnum AxisType );
    void PutSemiAxisLength (
        VARIANT_BOOL WithCenter,
        long Index,
        enum ksSemiAxisTypeEnum AxisType,
        double PVal );
    double GetSemiAxisLength (
        VARIANT_BOOL WithCenter,
        long Index,
        enum ksSemiAxisTypeEnum AxisType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_BaseObjects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall put_X0 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X0 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y0 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y0 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_WithCenter (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WithCenter (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Centres (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Radiuses (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_AddCentre (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Radius,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddCentreByObject (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteCentre (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteCentreByPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_AxisesCount (
        /*[in]*/ VARIANT_BOOL WithCenter,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_SemiAxisAutoLength (
        /*[in]*/ VARIANT_BOOL WithCenter,
        /*[in]*/ long Index,
        /*[in]*/ enum ksSemiAxisTypeEnum AxisType,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SemiAxisAutoLength (
        /*[in]*/ VARIANT_BOOL WithCenter,
        /*[in]*/ long Index,
        /*[in]*/ enum ksSemiAxisTypeEnum AxisType,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SemiAxisLength (
        /*[in]*/ VARIANT_BOOL WithCenter,
        /*[in]*/ long Index,
        /*[in]*/ enum ksSemiAxisTypeEnum AxisType,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SemiAxisLength (
        /*[in]*/ VARIANT_BOOL WithCenter,
        /*[in]*/ long Index,
        /*[in]*/ enum ksSemiAxisTypeEnum AxisType,
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("1f7ed8f6-85da-4b32-9306-31e3daba3f84"))
ICircularsCentries : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCircularCentres))
    ICircularCentresPtr CircularCentres[];

    //
    // Wrapper methods for error-handling
    //

    ICircularCentresPtr GetCircularCentres (
        const _variant_t & Index );
    ICircularCentresPtr Add (
        const _variant_t & BaseObjects,
        VARIANT_BOOL AutoFindOtherObjects,
        VARIANT_BOOL Closed,
        VARIANT_BOOL WithCenter );
    ICircularCentresPtr AddByPoint (
        double X0,
        double Y0,
        const _variant_t & BaseObjects,
        VARIANT_BOOL AutoFindOtherObjects,
        VARIANT_BOOL Closed,
        VARIANT_BOOL WithCenter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CircularCentres (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICircularCentres * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT BaseObjects,
        /*[in]*/ VARIANT_BOOL AutoFindOtherObjects,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[in]*/ VARIANT_BOOL WithCenter,
        /*[out,retval]*/ struct ICircularCentres * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddByPoint (
        /*[in]*/ double X0,
        /*[in]*/ double Y0,
        /*[in]*/ VARIANT BaseObjects,
        /*[in]*/ VARIANT_BOOL AutoFindOtherObjects,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[in]*/ VARIANT_BOOL WithCenter,
        /*[out,retval]*/ struct ICircularCentres * * Result ) = 0;
};

struct __declspec(uuid("c1e24970-64f0-4689-a3ab-cc34698378dc"))
ILinearCentres : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObjects,put=PutBaseObjects))
    _variant_t BaseObjects;
    __declspec(property(get=GetHasBreaks,put=PutHasBreaks))
    VARIANT_BOOL HasBreaks;
    __declspec(property(get=GetAxisAngle,put=PutAxisAngle))
    double AxisAngle;
    __declspec(property(get=GetTurnAngle,put=PutTurnAngle))
    double TurnAngle;
    __declspec(property(get=GetCentres))
    _variant_t Centres;
    __declspec(property(get=GetRadiuses))
    _variant_t Radiuses;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBaseObjects ( );
    void PutBaseObjects (
        const _variant_t & Result );
    void PutHasBreaks (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHasBreaks ( );
    void PutAxisAngle (
        double PVal );
    double GetAxisAngle ( );
    void PutTurnAngle (
        double PVal );
    double GetTurnAngle ( );
    _variant_t GetCentres ( );
    _variant_t GetRadiuses ( );
    VARIANT_BOOL AddCentre (
        double X,
        double Y,
        double Radius );
    VARIANT_BOOL AddCentreByObject (
        struct IKompasAPIObject * Object );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL DeleteCentre (
        long Index );
    VARIANT_BOOL DeleteCentreByPoint (
        double X,
        double Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_BaseObjects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall put_HasBreaks (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HasBreaks (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AxisAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_AxisAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TurnAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TurnAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Centres (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Radiuses (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_AddCentre (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Radius,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddCentreByObject (
        /*[in]*/ struct IKompasAPIObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteCentre (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteCentreByPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("e0854ccb-7849-4503-bf8b-f70cf493d59b"))
ILinearsCentries : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetLinearCentres))
    ILinearCentresPtr LinearCentres[];

    //
    // Wrapper methods for error-handling
    //

    ILinearCentresPtr GetLinearCentres (
        const _variant_t & Index );
    ILinearCentresPtr Add (
        const _variant_t & BaseObjects,
        VARIANT_BOOL AutoFindOtherObjects,
        VARIANT_BOOL HasBreaks,
        double AxisAngle,
        double TurnAngle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinearCentres (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILinearCentres * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT BaseObjects,
        /*[in]*/ VARIANT_BOOL AutoFindOtherObjects,
        /*[in]*/ VARIANT_BOOL HasBreaks,
        /*[in]*/ double AxisAngle,
        /*[in]*/ double TurnAngle,
        /*[out,retval]*/ struct ILinearCentres * * Result ) = 0;
};

struct __declspec(uuid("8e844a00-fc0a-47fa-9167-37be6c77d032"))
IConditionIntersect : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetRemoteLine1Visible,put=PutRemoteLine1Visible))
    VARIANT_BOOL RemoteLine1Visible;
    __declspec(property(get=GetRemoteLine2Visible,put=PutRemoteLine2Visible))
    VARIANT_BOOL RemoteLine2Visible;
    __declspec(property(get=GetGap,put=PutGap))
    VARIANT_BOOL Gap;
    __declspec(property(get=GetGapValue,put=PutGapValue))
    double GapValue;
    __declspec(property(get=GetPointVisible,put=PutPointVisible))
    VARIANT_BOOL PointVisible;
    __declspec(property(get=GetPointStyle,put=PutPointStyle))
    enum ksAnnotationSymbolEnum PointStyle;
    __declspec(property(get=GetAssociationObject))
    IDrawingObjectPtr AssociationObject[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIntersectPoint (
        double * X,
        double * Y );
    VARIANT_BOOL GetCurvePoint (
        VARIANT_BOOL FirstCurve,
        double * X,
        double * Y );
    void PutRemoteLine1Visible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRemoteLine1Visible ( );
    void PutRemoteLine2Visible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRemoteLine2Visible ( );
    VARIANT_BOOL GetGap ( );
    void PutGap (
        VARIANT_BOOL PVal );
    double GetGapValue ( );
    void PutGapValue (
        double PVal );
    void PutPointVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPointVisible ( );
    void PutPointStyle (
        enum ksAnnotationSymbolEnum PVal );
    enum ksAnnotationSymbolEnum GetPointStyle ( );
    VARIANT_BOOL InitByObjects (
        struct IKompasAPIObject * Curve1,
        struct IKompasAPIObject * Curve2,
        double * X1,
        double * Y1,
        double * X2,
        double * Y2,
        VARIANT_BOOL RemoteLine1Visible,
        VARIANT_BOOL RemoteLine2Visible );
    IDrawingObjectPtr GetAssociationObject (
        VARIANT_BOOL First );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetIntersectPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurvePoint (
        /*[in]*/ VARIANT_BOOL FirstCurve,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RemoteLine1Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RemoteLine1Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RemoteLine2Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RemoteLine2Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_GapValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_GapValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall put_PointVisible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PointVisible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PointStyle (
        /*[in]*/ enum ksAnnotationSymbolEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointStyle (
        /*[out,retval]*/ enum ksAnnotationSymbolEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_InitByObjects (
        /*[in]*/ struct IKompasAPIObject * Curve1,
        /*[in]*/ struct IKompasAPIObject * Curve2,
        /*[in,out]*/ double * X1,
        /*[in,out]*/ double * Y1,
        /*[in,out]*/ double * X2,
        /*[in,out]*/ double * Y2,
        /*[in]*/ VARIANT_BOOL RemoteLine1Visible,
        /*[in]*/ VARIANT_BOOL RemoteLine2Visible,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IDrawingObject * * PVal ) = 0;
};

struct __declspec(uuid("edb023f6-0862-4cb3-af81-62d784f455b1"))
IConditionIntersects : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetConditionIntersect))
    IConditionIntersectPtr ConditionIntersect[];

    //
    // Wrapper methods for error-handling
    //

    IConditionIntersectPtr GetConditionIntersect (
        const _variant_t & Index );
    IConditionIntersectPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConditionIntersect (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IConditionIntersect * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IConditionIntersect * * Result ) = 0;
};

struct __declspec(uuid("f6ed408a-c2a8-47dd-8ec3-011a7ad60335"))
IBreakAngleDimension : IAngleDimension
{};

struct __declspec(uuid("a7419920-06b8-4f34-ac1e-9d48e0ed9dcb"))
ILeader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextOnShelf))
    ITextPtr TextOnShelf;
    __declspec(property(get=GetTextUnderShelf))
    ITextPtr TextUnderShelf;
    __declspec(property(get=GetTextOnBranch))
    ITextPtr TextOnBranch;
    __declspec(property(get=GetTextUnderBranch))
    ITextPtr TextUnderBranch;
    __declspec(property(get=GetTextAfterShelf))
    ITextPtr TextAfterShelf;
    __declspec(property(get=GetBranchBegin,put=PutBranchBegin))
    VARIANT_BOOL BranchBegin[];
    __declspec(property(get=GetParallelBranch,put=PutParallelBranch))
    VARIANT_BOOL ParallelBranch;
    __declspec(property(get=GetAutoSorted,put=PutAutoSorted))
    VARIANT_BOOL AutoSorted;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetSignType,put=PutSignType))
    enum ksLeaderSignEnum SignType;
    __declspec(property(get=GetArround,put=PutArround))
    VARIANT_BOOL Arround;

    //
    // Wrapper methods for error-handling
    //

    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum Result );
    enum ksLeaderSignEnum GetSignType ( );
    void PutSignType (
        enum ksLeaderSignEnum Result );
    VARIANT_BOOL GetArround ( );
    void PutArround (
        VARIANT_BOOL Result );
    ITextPtr GetTextOnShelf ( );
    ITextPtr GetTextUnderShelf ( );
    ITextPtr GetTextOnBranch ( );
    ITextPtr GetTextUnderBranch ( );
    ITextPtr GetTextAfterShelf ( );
    void PutBranchBegin (
        long Index,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBranchBegin (
        long Index );
    VARIANT_BOOL GetParallelBranch ( );
    void PutParallelBranch (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoSorted ( );
    void PutAutoSorted (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum Result ) = 0;
      virtual HRESULT __stdcall get_SignType (
        /*[out,retval]*/ enum ksLeaderSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_SignType (
        /*[in]*/ enum ksLeaderSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_Arround (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Arround (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_TextOnShelf (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextUnderShelf (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextOnBranch (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextUnderBranch (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextAfterShelf (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall put_BranchBegin (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BranchBegin (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_ParallelBranch (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ParallelBranch (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSorted (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AutoSorted (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("8a5d2a56-ecb6-4151-b1ac-f8548cd668cf"))
IMarkLeader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextOnBranch))
    ITextPtr TextOnBranch;
    __declspec(property(get=GetTextUnderBranch))
    ITextPtr TextUnderBranch;
    __declspec(property(get=GetDesignation))
    ITextPtr Designation;

    //
    // Wrapper methods for error-handling
    //

    ITextPtr GetTextOnBranch ( );
    ITextPtr GetTextUnderBranch ( );
    ITextPtr GetDesignation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextOnBranch (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextUnderBranch (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_Designation (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
};

struct __declspec(uuid("a8227628-4b9c-42c8-ae58-b3716a7ec1af"))
IPositionLeader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetForm,put=PutForm))
    enum ksPositionLederFormEnum Form;
    __declspec(property(get=GetPositions))
    ITextPtr Positions;
    __declspec(property(get=GetUnderPositionText))
    ITextPtr UnderPositionText;
    __declspec(property(get=GetHorizontally,put=PutHorizontally))
    VARIANT_BOOL Horizontally;
    __declspec(property(get=GetShelfDirection,put=PutShelfDirection))
    enum ksShelfDirectionEnum ShelfDirection;
    __declspec(property(get=GetShelfVisible,put=PutShelfVisible))
    VARIANT_BOOL ShelfVisible;
    __declspec(property(get=GetTextDirection,put=PutTextDirection))
    VARIANT_BOOL TextDirection;

    //
    // Wrapper methods for error-handling
    //

    enum ksShelfDirectionEnum GetShelfDirection ( );
    void PutShelfDirection (
        enum ksShelfDirectionEnum Result );
    VARIANT_BOOL GetShelfVisible ( );
    void PutShelfVisible (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetTextDirection ( );
    void PutTextDirection (
        VARIANT_BOOL Result );
    enum ksPositionLederFormEnum GetForm ( );
    void PutForm (
        enum ksPositionLederFormEnum Result );
    ITextPtr GetPositions ( );
    ITextPtr GetUnderPositionText ( );
    VARIANT_BOOL GetHorizontally ( );
    void PutHorizontally (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShelfDirection (
        /*[out,retval]*/ enum ksShelfDirectionEnum * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfDirection (
        /*[in]*/ enum ksShelfDirectionEnum Result ) = 0;
      virtual HRESULT __stdcall get_ShelfVisible (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ShelfVisible (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_TextDirection (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_TextDirection (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Form (
        /*[out,retval]*/ enum ksPositionLederFormEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Form (
        /*[in]*/ enum ksPositionLederFormEnum Result ) = 0;
      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_UnderPositionText (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_Horizontally (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Horizontally (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("ccfbe87d-1a3c-4c8b-abe3-1c2319694314"))
IChangeLeader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullLeaderLength,put=PutFullLeaderLength))
    VARIANT_BOOL FullLeaderLength;
    __declspec(property(get=GetDesignation))
    ITextPtr Designation;
    __declspec(property(get=GetNumericGroup,put=PutNumericGroup))
    INumericGroupPtr NumericGroup;
    __declspec(property(get=GetSignType,put=PutSignType))
    enum ksChangeLeaderSignEnum SignType;
    __declspec(property(get=GetSignHeight,put=PutSignHeight))
    double SignHeight;
    __declspec(property(get=GetLeaderLength,put=PutLeaderLength))
    double LeaderLength;

    //
    // Wrapper methods for error-handling
    //

    enum ksChangeLeaderSignEnum GetSignType ( );
    void PutSignType (
        enum ksChangeLeaderSignEnum Result );
    double GetSignHeight ( );
    void PutSignHeight (
        double Result );
    double GetLeaderLength ( );
    void PutLeaderLength (
        double Result );
    VARIANT_BOOL GetFullLeaderLength ( );
    void PutFullLeaderLength (
        VARIANT_BOOL Result );
    ITextPtr GetDesignation ( );
    INumericGroupPtr GetNumericGroup ( );
    void PutNumericGroup (
        struct INumericGroup * Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SignType (
        /*[out,retval]*/ enum ksChangeLeaderSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_SignType (
        /*[in]*/ enum ksChangeLeaderSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_SignHeight (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_SignHeight (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_LeaderLength (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_LeaderLength (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_FullLeaderLength (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_FullLeaderLength (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Designation (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_NumericGroup (
        /*[out,retval]*/ struct INumericGroup * * Result ) = 0;
      virtual HRESULT __stdcall put_NumericGroup (
        /*[in]*/ struct INumericGroup * Result ) = 0;
};

struct __declspec(uuid("eef8366b-7c8d-448b-9944-be63e82c1543"))
IBrandLeader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetTextOnBranch))
    ITextPtr TextOnBranch;
    __declspec(property(get=GetTextUnderBranch))
    ITextPtr TextUnderBranch;
    __declspec(property(get=GetDesignation))
    ITextPtr Designation;

    //
    // Wrapper methods for error-handling
    //

    ITextPtr GetTextOnBranch ( );
    ITextPtr GetTextUnderBranch ( );
    ITextPtr GetDesignation ( );
    VARIANT_BOOL GetDirection ( );
    void PutDirection (
        VARIANT_BOOL Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextOnBranch (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextUnderBranch (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_Designation (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
};

struct __declspec(uuid("46e2f216-6bce-4863-9ddc-cc08dc0016f7"))
IToleranceParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSign,put=PutSign))
    long Sign;
    __declspec(property(get=GetPrefixSign,put=PutPrefixSign))
    enum ksTolerancePrefixSignEnum PrefixSign;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSuffixSign,put=PutSuffixSign))
    enum ksToleranceSuffixSignEnum SuffixSign;
    __declspec(property(get=GetBaseValue1))
    ITextLinePtr BaseValue1;
    __declspec(property(get=GetBaseSign1,put=PutBaseSign1))
    enum ksToleranceSuffixSignEnum BaseSign1;
    __declspec(property(get=GetBaseValue2))
    ITextLinePtr BaseValue2;
    __declspec(property(get=GetBaseSign2,put=PutBaseSign2))
    enum ksToleranceSuffixSignEnum BaseSign2;
    __declspec(property(get=GetBasePointPos,put=PutBasePointPos))
    enum ksTablePointEnum BasePointPos;
    __declspec(property(get=GetVertical,put=PutVertical))
    VARIANT_BOOL Vertical;
    __declspec(property(get=GetTable))
    ITablePtr Table;

    //
    // Wrapper methods for error-handling
    //

    enum ksTablePointEnum GetBasePointPos ( );
    void PutBasePointPos (
        enum ksTablePointEnum Result );
    VARIANT_BOOL GetVertical ( );
    void PutVertical (
        VARIANT_BOOL Result );
    ITablePtr GetTable ( );
    long GetSign ( );
    void PutSign (
        long Result );
    enum ksTolerancePrefixSignEnum GetPrefixSign ( );
    void PutPrefixSign (
        enum ksTolerancePrefixSignEnum Result );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t PVal );
    enum ksToleranceSuffixSignEnum GetSuffixSign ( );
    void PutSuffixSign (
        enum ksToleranceSuffixSignEnum Result );
    ITextLinePtr GetBaseValue1 ( );
    enum ksToleranceSuffixSignEnum GetBaseSign1 ( );
    void PutBaseSign1 (
        enum ksToleranceSuffixSignEnum Result );
    ITextLinePtr GetBaseValue2 ( );
    enum ksToleranceSuffixSignEnum GetBaseSign2 ( );
    void PutBaseSign2 (
        enum ksToleranceSuffixSignEnum Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePointPos (
        /*[out,retval]*/ enum ksTablePointEnum * Result ) = 0;
      virtual HRESULT __stdcall put_BasePointPos (
        /*[in]*/ enum ksTablePointEnum Result ) = 0;
      virtual HRESULT __stdcall get_Vertical (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Vertical (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct ITable * * PVal ) = 0;
      virtual HRESULT __stdcall get_Sign (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_Sign (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_PrefixSign (
        /*[out,retval]*/ enum ksTolerancePrefixSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_PrefixSign (
        /*[in]*/ enum ksTolerancePrefixSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_SuffixSign (
        /*[out,retval]*/ enum ksToleranceSuffixSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_SuffixSign (
        /*[in]*/ enum ksToleranceSuffixSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_BaseValue1 (
        /*[out,retval]*/ struct ITextLine * * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseSign1 (
        /*[out,retval]*/ enum ksToleranceSuffixSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_BaseSign1 (
        /*[in]*/ enum ksToleranceSuffixSignEnum Result ) = 0;
      virtual HRESULT __stdcall get_BaseValue2 (
        /*[out,retval]*/ struct ITextLine * * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseSign2 (
        /*[out,retval]*/ enum ksToleranceSuffixSignEnum * Result ) = 0;
      virtual HRESULT __stdcall put_BaseSign2 (
        /*[in]*/ enum ksToleranceSuffixSignEnum Result ) = 0;
};

struct __declspec(uuid("aa485b32-ff45-4035-bfc4-aee54e638344"))
IContourSegment : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSegmentType))
    enum ksContourSegmentEnum SegmentType;
    __declspec(property(get=GetCurve2D))
    ICurve2DPtr Curve2D;

    //
    // Wrapper methods for error-handling
    //

    enum ksContourSegmentEnum GetSegmentType ( );
    ICurve2DPtr GetCurve2D ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ enum ksContourSegmentEnum * Result ) = 0;
      virtual HRESULT __stdcall get_Curve2D (
        /*[out,retval]*/ struct ICurve2D * * Result ) = 0;
};

struct __declspec(uuid("fb2432f1-8ae7-4d43-aff2-a3a3be226cfa"))
IContourLineSegment : IContourSegment
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutLength (
        double PVal );
    double GetLength ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("ed4a6d97-4543-4842-b2c3-973fb0e90e87"))
IContourArc : IContourSegment
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetX3,put=PutX3))
    double X3;
    __declspec(property(get=GetY3,put=PutY3))
    double Y3;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;

    //
    // Wrapper methods for error-handling
    //

    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutX3 (
        double PVal );
    double GetX3 ( );
    void PutY3 (
        double PVal );
    double GetY3 ( );
    void PutAngle1 (
        double PVal );
    double GetAngle1 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("ae6c238c-4398-4057-9d28-d275954d9506"))
IAnnotativeContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAnnotativeObjectPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IAnnotativeObjectPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IAnnotativeObjectPtr Add (
        enum DrawingObjectTypeEnum Type );
    IAnnotativeObjectPtr CreateByGeomObject (
        struct IDrawingObject * Obj );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAnnotativeObject * * Result ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum DrawingObjectTypeEnum Type,
        /*[out,retval]*/ struct IAnnotativeObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_CreateByGeomObject (
        /*[in]*/ struct IDrawingObject * Obj,
        /*[out,retval]*/ struct IAnnotativeObject * * Result ) = 0;
};

struct __declspec(uuid("12b52a99-ff5f-4c08-9e5e-df7c7ad834a8"))
ICurveCopyObjectParam : ICopyObjectParam
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseCurve,put=PutBaseCurve))
    IDrawingObjectPtr BaseCurve;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetCount,put=PutCount))
    long Count;
    __declspec(property(get=GetTurnToNormal,put=PutTurnToNormal))
    VARIANT_BOOL TurnToNormal;
    __declspec(property(get=GetPositiveDirection,put=PutPositiveDirection))
    VARIANT_BOOL PositiveDirection;
    __declspec(property(get=GetStepFactor,put=PutStepFactor))
    VARIANT_BOOL StepFactor;

    //
    // Wrapper methods for error-handling
    //

    void PutBaseCurve (
        struct IDrawingObject * Curve );
    IDrawingObjectPtr GetBaseCurve ( );
    void PutStep (
        double PVal );
    double GetStep ( );
    void PutCount (
        long PVal );
    long GetCount ( );
    void PutTurnToNormal (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTurnToNormal ( );
    void PutPositiveDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPositiveDirection ( );
    void PutStepFactor (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStepFactor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BaseCurve (
        /*[in]*/ struct IDrawingObject * Curve ) = 0;
      virtual HRESULT __stdcall get_BaseCurve (
        /*[out,retval]*/ struct IDrawingObject * * Curve ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_TurnToNormal (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TurnToNormal (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PositiveDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PositiveDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_StepFactor (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StepFactor (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("138d1202-ca46-4db3-bf2b-85d260e44355"))
ICircleCopyObjectParam : ICopyObjectParam
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetCount,put=PutCount))
    long Count;
    __declspec(property(get=GetByStep,put=PutByStep))
    VARIANT_BOOL ByStep;
    __declspec(property(get=GetPositiveDirection,put=PutPositiveDirection))
    VARIANT_BOOL PositiveDirection;

    //
    // Wrapper methods for error-handling
    //

    void PutXc (
        double Val );
    double GetXc ( );
    void PutYc (
        double Val );
    double GetYc ( );
    void PutStep (
        double PVal );
    double GetStep ( );
    void PutCount (
        long PVal );
    long GetCount ( );
    void PutByStep (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetByStep ( );
    void PutPositiveDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPositiveDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double Val ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * Val ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double Val ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * Val ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_ByStep (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ByStep (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PositiveDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PositiveDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("7e553465-7c0d-4e35-b630-d7a54cd4fc2f"))
INurbsByPoints : INurbs
{
    //
    // Property data
    //

    __declspec(property(get=GetPointsBuildingType,put=PutPointsBuildingType))
    enum ksNurbsByPointsBuildingTypeEnum PointsBuildingType;
    __declspec(property(get=GetPointConstraints,put=PutPointConstraints))
    enum ksNurbsByPointsPointConstraintsEnum PointConstraints[];
    __declspec(property(get=GetDerivativeLenghtInPoint,put=PutDerivativeLenghtInPoint))
    double DerivativeLenghtInPoint[];
    __declspec(property(get=GetDerivativeAngleInPoint,put=PutDerivativeAngleInPoint))
    double DerivativeAngleInPoint[];
    __declspec(property(get=GetCurvatureInPoint,put=PutCurvatureInPoint))
    double CurvatureInPoint[];

    //
    // Wrapper methods for error-handling
    //

    void PutPointsBuildingType (
        enum ksNurbsByPointsBuildingTypeEnum PVal );
    enum ksNurbsByPointsBuildingTypeEnum GetPointsBuildingType ( );
    VARIANT_BOOL AddPointByParam (
        long Index,
        double X,
        double Y,
        enum ksNurbsByPointsPointConstraintsEnum ConstraintsType,
        double * DerivativeLenght,
        double * DerivativeAngle,
        double * Curvature );
    VARIANT_BOOL GetPointParam (
        long Index,
        double * X,
        double * Y,
        enum ksNurbsByPointsPointConstraintsEnum * ConstraintsType,
        double * DerivativeLenght,
        double * DerivativeAngle,
        double * Curvature );
    void PutPointConstraints (
        long PointIndex,
        enum ksNurbsByPointsPointConstraintsEnum PVal );
    enum ksNurbsByPointsPointConstraintsEnum GetPointConstraints (
        long PointIndex );
    void PutDerivativeLenghtInPoint (
        long PointIndex,
        double PVal );
    double GetDerivativeLenghtInPoint (
        long PointIndex );
    void PutDerivativeAngleInPoint (
        long PointIndex,
        double PVal );
    double GetDerivativeAngleInPoint (
        long PointIndex );
    void PutCurvatureInPoint (
        long PointIndex,
        double PVal );
    double GetCurvatureInPoint (
        long PointIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PointsBuildingType (
        /*[in]*/ enum ksNurbsByPointsBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointsBuildingType (
        /*[out,retval]*/ enum ksNurbsByPointsBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddPointByParam (
        /*[in]*/ long Index,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ enum ksNurbsByPointsPointConstraintsEnum ConstraintsType,
        /*[in]*/ double * DerivativeLenght,
        /*[in]*/ double * DerivativeAngle,
        /*[in]*/ double * Curvature,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetPointParam (
        /*[in]*/ long Index,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ enum ksNurbsByPointsPointConstraintsEnum * ConstraintsType,
        /*[out]*/ double * DerivativeLenght,
        /*[out]*/ double * DerivativeAngle,
        /*[out]*/ double * Curvature,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_PointConstraints (
        /*[in]*/ long PointIndex,
        /*[in]*/ enum ksNurbsByPointsPointConstraintsEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointConstraints (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ enum ksNurbsByPointsPointConstraintsEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DerivativeLenghtInPoint (
        /*[in]*/ long PointIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DerivativeLenghtInPoint (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DerivativeAngleInPoint (
        /*[in]*/ long PointIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DerivativeAngleInPoint (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CurvatureInPoint (
        /*[in]*/ long PointIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CurvatureInPoint (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("a64be069-8fcb-43f1-ab34-9974dc7fcf5f"))
ITextDocumentSection : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat))
    ISheetFormatPtr Format;
    __declspec(property(get=GetLayoutStyleNumber,put=PutLayoutStyleNumber))
    double LayoutStyleNumber;
    __declspec(property(get=GetEvenLayoutStyleNumber,put=PutEvenLayoutStyleNumber))
    double EvenLayoutStyleNumber;
    __declspec(property(get=GetOddLayoutStyleNumber,put=PutOddLayoutStyleNumber))
    double OddLayoutStyleNumber;

    //
    // Wrapper methods for error-handling
    //

    ISheetFormatPtr GetFormat ( );
    _bstr_t GetLayoutLibraryFileName ( );
    void PutLayoutLibraryFileName (
        LPWSTR PVal );
    double GetLayoutStyleNumber ( );
    void PutLayoutStyleNumber (
        double PVal );
    _bstr_t GetEvenLayoutLibraryFileName ( );
    void PutEvenLayoutLibraryFileName (
        LPWSTR PVal );
    double GetEvenLayoutStyleNumber ( );
    void PutEvenLayoutStyleNumber (
        double PVal );
    _bstr_t GetOddLayoutLibraryFileName ( );
    void PutOddLayoutLibraryFileName (
        LPWSTR PVal );
    double GetOddLayoutStyleNumber ( );
    void PutOddLayoutStyleNumber (
        double PVal );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ISheetFormat * * PVal ) = 0;
      virtual HRESULT __stdcall get_LayoutLibraryFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_LayoutLibraryFileName (
        /*[in]*/ LPWSTR PVal ) = 0;
      virtual HRESULT __stdcall get_LayoutStyleNumber (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_LayoutStyleNumber (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_EvenLayoutLibraryFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_EvenLayoutLibraryFileName (
        /*[in]*/ LPWSTR PVal ) = 0;
      virtual HRESULT __stdcall get_EvenLayoutStyleNumber (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_EvenLayoutStyleNumber (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_OddLayoutLibraryFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_OddLayoutLibraryFileName (
        /*[in]*/ LPWSTR PVal ) = 0;
      virtual HRESULT __stdcall get_OddLayoutStyleNumber (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_OddLayoutStyleNumber (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("eeb71f69-1c0f-4e73-9d20-523697215e0b"))
ITextDocumentSectionsManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSectionsCount))
    long SectionsCount;
    __declspec(property(get=GetSection))
    ITextDocumentSectionPtr Section[];
    __declspec(property(get=GetSectionByTextLine))
    ITextDocumentSectionPtr SectionByTextLine[];

    //
    // Wrapper methods for error-handling
    //

    ITextDocumentSectionPtr AddSection ( );
    ITextDocumentSectionPtr AddSectionAt (
        long Index );
    long GetSectionsCount ( );
    ITextDocumentSectionPtr GetSection (
        long Index );
    ITextDocumentSectionPtr GetSectionByTextLine (
        long LineIndex );
    VARIANT_BOOL MoveSection (
        long SectionIndex,
        long NewSectionIndex );
    long GetSectionLineIndexes (
        long SectionIndex,
        long * FirstLineIndex,
        long * LastLineIndex );
    VARIANT_BOOL MoveLinesToSection (
        struct ITextDocumentSection * Section,
        long FirstLineIndex,
        long LastLineIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddSection (
        /*[out,retval]*/ struct ITextDocumentSection * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddSectionAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITextDocumentSection * * Result ) = 0;
      virtual HRESULT __stdcall get_SectionsCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Section (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITextDocumentSection * * Result ) = 0;
      virtual HRESULT __stdcall get_SectionByTextLine (
        /*[in]*/ long LineIndex,
        /*[out,retval]*/ struct ITextDocumentSection * * Result ) = 0;
      virtual HRESULT __stdcall raw_MoveSection (
        /*[in]*/ long SectionIndex,
        /*[in]*/ long NewSectionIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetSectionLineIndexes (
        /*[in]*/ long SectionIndex,
        /*[out]*/ long * FirstLineIndex,
        /*[out]*/ long * LastLineIndex,
        /*[out,retval]*/ long * LinesCount ) = 0;
      virtual HRESULT __stdcall raw_MoveLinesToSection (
        /*[in]*/ struct ITextDocumentSection * Section,
        /*[in]*/ long FirstLineIndex,
        /*[in]*/ long LastLineIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("9d5cde37-7833-4359-b25a-fe7011ea771a"))
IExternalTessellationObject : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectID))
    long ObjectID;
    __declspec(property(put=PutVisible))
    VARIANT_BOOL Visible[];
    __declspec(property(get=GetDisableDepthTest,put=PutDisableDepthTest))
    VARIANT_BOOL DisableDepthTest;
    __declspec(property(get=GetNonScalableX,put=PutNonScalableX))
    VARIANT_BOOL NonScalableX;
    __declspec(property(get=GetNonScalableY,put=PutNonScalableY))
    VARIANT_BOOL NonScalableY;
    __declspec(property(get=GetNonScalableZ,put=PutNonScalableZ))
    VARIANT_BOOL NonScalableZ;
    __declspec(property(get=GetAlwaysDrawInScreenPlane,put=PutAlwaysDrawInScreenPlane))
    enum ksDrawInScreenPlaneEnum AlwaysDrawInScreenPlane;
    __declspec(property(get=GetNonGeometry,put=PutNonGeometry))
    VARIANT_BOOL NonGeometry;
    __declspec(property(get=GetNonPickable,put=PutNonPickable))
    VARIANT_BOOL NonPickable;

    //
    // Wrapper methods for error-handling
    //

    long GetObjectID ( );
    VARIANT_BOOL SetTessellation (
        const _variant_t & Points,
        const _variant_t & Indexes,
        const _variant_t & Normals,
        const _variant_t & Colors );
    void PutVisible (
        struct IDocumentFrame * Frame,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL SetAdvancedColor (
        long Color,
        double Ambient,
        double Diffuse,
        double Specularity,
        double Shininess,
        double Transparency,
        double Emission );
    VARIANT_BOOL SetEdges (
        const _variant_t & Points,
        const _variant_t & Edges,
        const _variant_t & Colors );
    VARIANT_BOOL SetPlaces (
        const _variant_t & Places );
    VARIANT_BOOL SetEdgeStyles (
        const _variant_t & Styles );
    VARIANT_BOOL SetEdgeWidths (
        const _variant_t & Widths );
    VARIANT_BOOL SetTextureImage (
        long Width,
        long Heigh,
        VARIANT_BOOL RGBA,
        VARIANT_BOOL WrapMode,
        VARIANT_BOOL FiltMode,
        const _variant_t & ImageData );
    VARIANT_BOOL SetTexturePoints (
        VARIANT_BOOL Image2D,
        const _variant_t & ImagePoints );
    VARIANT_BOOL SetFacetMode (
        VARIANT_BOOL SideMode,
        enum ksFacetCullingMode CullingMode );
    VARIANT_BOOL GetDisableDepthTest ( );
    void PutDisableDepthTest (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNonScalableX ( );
    void PutNonScalableX (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNonScalableY ( );
    void PutNonScalableY (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNonScalableZ ( );
    void PutNonScalableZ (
        VARIANT_BOOL PVal );
    enum ksDrawInScreenPlaneEnum GetAlwaysDrawInScreenPlane ( );
    void PutAlwaysDrawInScreenPlane (
        enum ksDrawInScreenPlaneEnum PVal );
    VARIANT_BOOL GetNonGeometry ( );
    void PutNonGeometry (
        VARIANT_BOOL PVal );
    VARIANT_BOOL SelectTextureImage (
        long TexImgId );
    VARIANT_BOOL GetNonPickable ( );
    void PutNonPickable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL SetEdgeColors (
        const _variant_t & Colors );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ObjectID (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetTessellation (
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Indexes,
        /*[in]*/ VARIANT Normals,
        /*[in]*/ VARIANT Colors,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ struct IDocumentFrame * Frame,
        /*[in]*/ VARIANT_BOOL _arg2 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetAdvancedColor (
        /*[in]*/ long Color,
        /*[in]*/ double Ambient,
        /*[in]*/ double Diffuse,
        /*[in]*/ double Specularity,
        /*[in]*/ double Shininess,
        /*[in]*/ double Transparency,
        /*[in]*/ double Emission,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetEdges (
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Edges,
        /*[in]*/ VARIANT Colors,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetPlaces (
        /*[in]*/ VARIANT Places,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetEdgeStyles (
        /*[in]*/ VARIANT Styles,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetEdgeWidths (
        /*[in]*/ VARIANT Widths,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetTextureImage (
        /*[in]*/ long Width,
        /*[in]*/ long Heigh,
        /*[in]*/ VARIANT_BOOL RGBA,
        /*[in]*/ VARIANT_BOOL WrapMode,
        /*[in]*/ VARIANT_BOOL FiltMode,
        /*[in]*/ VARIANT ImageData,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetTexturePoints (
        /*[in]*/ VARIANT_BOOL Image2D,
        /*[in]*/ VARIANT ImagePoints,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetFacetMode (
        /*[in]*/ VARIANT_BOOL SideMode,
        /*[in]*/ enum ksFacetCullingMode CullingMode,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_DisableDepthTest (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DisableDepthTest (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NonScalableX (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonScalableX (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NonScalableY (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonScalableY (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NonScalableZ (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonScalableZ (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysDrawInScreenPlane (
        /*[out,retval]*/ enum ksDrawInScreenPlaneEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysDrawInScreenPlane (
        /*[in]*/ enum ksDrawInScreenPlaneEnum PVal ) = 0;
      virtual HRESULT __stdcall get_NonGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_SelectTextureImage (
        /*[in]*/ long TexImgId,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_NonPickable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonPickable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_SetEdgeColors (
        /*[in]*/ VARIANT Colors,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
};

struct __declspec(uuid("c234e81d-4232-41fd-980d-8e7e6ea7b733"))
IExternalGDIObject : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectID))
    long ObjectID;
    __declspec(property(put=PutVisible))
    VARIANT_BOOL Visible[];
    __declspec(property(get=GetNonScalableX,put=PutNonScalableX))
    VARIANT_BOOL NonScalableX;
    __declspec(property(get=GetNonScalableY,put=PutNonScalableY))
    VARIANT_BOOL NonScalableY;
    __declspec(property(get=GetNonScalableZ,put=PutNonScalableZ))
    VARIANT_BOOL NonScalableZ;
    __declspec(property(get=GetAlwaysDrawInScreenPlane,put=PutAlwaysDrawInScreenPlane))
    enum ksDrawInScreenPlaneEnum AlwaysDrawInScreenPlane;
    __declspec(property(get=GetNonPickable,put=PutNonPickable))
    VARIANT_BOOL NonPickable;
    __declspec(property(get=GetScalableText,put=PutScalableText))
    VARIANT_BOOL ScalableText;

    //
    // Wrapper methods for error-handling
    //

    long GetObjectID ( );
    VARIANT_BOOL SetTexts (
        const _variant_t & Texts,
        const _variant_t & Points,
        const _variant_t & Colors,
        const _variant_t & Fonts,
        VARIANT_BOOL Is3DPoints );
    void PutVisible (
        struct IDocumentFrame * Frame,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL SetPlace (
        const _variant_t & Place );
    VARIANT_BOOL GetNonScalableX ( );
    void PutNonScalableX (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNonScalableY ( );
    void PutNonScalableY (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNonScalableZ ( );
    void PutNonScalableZ (
        VARIANT_BOOL PVal );
    enum ksDrawInScreenPlaneEnum GetAlwaysDrawInScreenPlane ( );
    void PutAlwaysDrawInScreenPlane (
        enum ksDrawInScreenPlaneEnum PVal );
    VARIANT_BOOL SetTextsAlign (
        const _variant_t & TextsAlign );
    VARIANT_BOOL SetBkColors (
        const _variant_t & BkColors );
    VARIANT_BOOL GetNonPickable ( );
    void PutNonPickable (
        VARIANT_BOOL PVal );
    VARIANT_BOOL SetTextColors (
        const _variant_t & textColors );
    VARIANT_BOOL SetTextOrientation (
        const _variant_t & textOrients );
    VARIANT_BOOL GetScalableText ( );
    void PutScalableText (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ObjectID (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetTexts (
        /*[in]*/ VARIANT Texts,
        /*[in]*/ VARIANT Points,
        /*[in]*/ VARIANT Colors,
        /*[in]*/ VARIANT Fonts,
        /*[in]*/ VARIANT_BOOL Is3DPoints,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ struct IDocumentFrame * Frame,
        /*[in]*/ VARIANT_BOOL _arg2 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPlace (
        /*[in]*/ VARIANT Place,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_NonScalableX (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonScalableX (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NonScalableY (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonScalableY (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NonScalableZ (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonScalableZ (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysDrawInScreenPlane (
        /*[out,retval]*/ enum ksDrawInScreenPlaneEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysDrawInScreenPlane (
        /*[in]*/ enum ksDrawInScreenPlaneEnum PVal ) = 0;
      virtual HRESULT __stdcall raw_SetTextsAlign (
        /*[in]*/ VARIANT TextsAlign,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetBkColors (
        /*[in]*/ VARIANT BkColors,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_NonPickable (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NonPickable (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_SetTextColors (
        /*[in]*/ VARIANT textColors,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_SetTextOrientation (
        /*[in]*/ VARIANT textOrients,
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall get_ScalableText (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ScalableText (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("dc21f3d3-ffa6-4274-a976-79f34729b866"))
IExternalTessellationManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTessellationObject))
    IExternalTessellationObjectPtr TessellationObject[];
    __declspec(property(put=PutObjectsVisible))
    VARIANT_BOOL ObjectsVisible[][];
    __declspec(property(get=GetGDIObject))
    IExternalGDIObjectPtr GDIObject[];
    __declspec(property(get=GetDisableModelRotation,put=PutDisableModelRotation))
    VARIANT_BOOL DisableModelRotation;

    //
    // Wrapper methods for error-handling
    //

    IExternalTessellationObjectPtr Add ( );
    IExternalTessellationObjectPtr GetTessellationObject (
        long Id );
    void PutObjectsVisible (
        const _variant_t & Ids,
        struct IDocumentFrame * Frame,
        VARIANT_BOOL _arg3 );
    VARIANT_BOOL DeleteObjects (
        const _variant_t & Id );
    VARIANT_BOOL Clear ( );
    IExternalGDIObjectPtr AddGDIObject ( );
    IExternalGDIObjectPtr GetGDIObject (
        long Id );
    long CreateTextureImage (
        long Width,
        long Heigh,
        VARIANT_BOOL RGBA,
        VARIANT_BOOL WrapMode,
        VARIANT_BOOL FiltMode,
        const _variant_t & ImageData );
    VARIANT_BOOL DeleteTextureImage (
        long TexImgId );
    VARIANT_BOOL PickObjects (
        struct IDocumentFrame * Frame,
        const _variant_t & PickRay,
        VARIANT_BOOL Visible,
        VARIANT * PickedObjs,
        VARIANT * PickedPars );
    VARIANT_BOOL DisableModelDrawing (
        long ForElements );
    VARIANT_BOOL EnableModelDrawing ( );
    VARIANT_BOOL IsModelDrawingEnabled (
        long ForElements );
    void PutDisableModelRotation (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetDisableModelRotation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IExternalTessellationObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_TessellationObject (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IExternalTessellationObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ObjectsVisible (
        /*[in]*/ VARIANT Ids,
        /*[in]*/ struct IDocumentFrame * Frame,
        /*[in]*/ VARIANT_BOOL _arg3 ) = 0;
      virtual HRESULT __stdcall raw_DeleteObjects (
        /*[in]*/ VARIANT Id,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddGDIObject (
        /*[out,retval]*/ struct IExternalGDIObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_GDIObject (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IExternalGDIObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTextureImage (
        /*[in]*/ long Width,
        /*[in]*/ long Heigh,
        /*[in]*/ VARIANT_BOOL RGBA,
        /*[in]*/ VARIANT_BOOL WrapMode,
        /*[in]*/ VARIANT_BOOL FiltMode,
        /*[in]*/ VARIANT ImageData,
        /*[out,retval]*/ long * Res ) = 0;
      virtual HRESULT __stdcall raw_DeleteTextureImage (
        /*[in]*/ long TexImgId,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_PickObjects (
        /*[in]*/ struct IDocumentFrame * Frame,
        /*[in]*/ VARIANT PickRay,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[out]*/ VARIANT * PickedObjs,
        /*[out]*/ VARIANT * PickedPars,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DisableModelDrawing (
        /*[in]*/ long ForElements,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_EnableModelDrawing (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsModelDrawingEnabled (
        /*[in]*/ long ForElements,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_DisableModelRotation (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_DisableModelRotation (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("a5b8e337-ee84-4eec-8235-a812fdd6c2de"))
ICircularCopyObjectParam : ICopyObjectParam
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStep1,put=PutStep1))
    double Step1;
    __declspec(property(get=GetStepFactor1,put=PutStepFactor1))
    VARIANT_BOOL StepFactor1;
    __declspec(property(get=GetCount1,put=PutCount1))
    long Count1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetStep2,put=PutStep2))
    double Step2;
    __declspec(property(get=GetStepFactor2,put=PutStepFactor2))
    VARIANT_BOOL StepFactor2;
    __declspec(property(get=GetCount2,put=PutCount2))
    long Count2;
    __declspec(property(get=GetSaveCentreCopy,put=PutSaveCentreCopy))
    VARIANT_BOOL SaveCentreCopy;
    __declspec(property(get=GetTurnObject,put=PutTurnObject))
    VARIANT_BOOL TurnObject;

    //
    // Wrapper methods for error-handling
    //

    void PutRadius (
        double Val );
    double GetRadius ( );
    void PutStep1 (
        double PVal );
    double GetStep1 ( );
    void PutStepFactor1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStepFactor1 ( );
    void PutCount1 (
        long Val );
    long GetCount1 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );
    void PutStep2 (
        double PVal );
    double GetStep2 ( );
    void PutStepFactor2 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStepFactor2 ( );
    void PutCount2 (
        long PVal );
    long GetCount2 ( );
    void PutSaveCentreCopy (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveCentreCopy ( );
    void PutTurnObject (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTurnObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Val ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Val ) = 0;
      virtual HRESULT __stdcall put_Step1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepFactor1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StepFactor1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Count1 (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_Count1 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepFactor2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StepFactor2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Count2 (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count2 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveCentreCopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveCentreCopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TurnObject (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TurnObject (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("592ab214-a8cf-462e-acd5-528839113338"))
IMeshCopyObjectParam : ICopyObjectParam
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetStep1,put=PutStep1))
    double Step1;
    __declspec(property(get=GetStepFactor1,put=PutStepFactor1))
    VARIANT_BOOL StepFactor1;
    __declspec(property(get=GetCount1,put=PutCount1))
    long Count1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetStep2,put=PutStep2))
    double Step2;
    __declspec(property(get=GetStepFactor2,put=PutStepFactor2))
    VARIANT_BOOL StepFactor2;
    __declspec(property(get=GetCount2,put=PutCount2))
    long Count2;
    __declspec(property(get=GetSaveCornersCopy,put=PutSaveCornersCopy))
    VARIANT_BOOL SaveCornersCopy;
    __declspec(property(get=GetSaveCentreCopy,put=PutSaveCentreCopy))
    VARIANT_BOOL SaveCentreCopy;

    //
    // Wrapper methods for error-handling
    //

    void PutAngle1 (
        double Val );
    double GetAngle1 ( );
    void PutStep1 (
        double PVal );
    double GetStep1 ( );
    void PutStepFactor1 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStepFactor1 ( );
    void PutCount1 (
        long Val );
    long GetCount1 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );
    void PutStep2 (
        double PVal );
    double GetStep2 ( );
    void PutStepFactor2 (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStepFactor2 ( );
    void PutCount2 (
        long PVal );
    long GetCount2 ( );
    void PutSaveCornersCopy (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveCornersCopy ( );
    void PutSaveCentreCopy (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveCentreCopy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double Val ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * Val ) = 0;
      virtual HRESULT __stdcall put_Step1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepFactor1 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StepFactor1 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Count1 (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_Count1 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_StepFactor2 (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StepFactor2 (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Count2 (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_Count2 (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveCornersCopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveCornersCopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveCentreCopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveCentreCopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("e1ac2948-6191-4240-85f4-5a32321e9d46"))
IPropertyOpticalProps : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetColorParam))
    IColorParam7Ptr ColorParam;
    __declspec(property(get=GetEnableAmbient,put=PutEnableAmbient))
    VARIANT_BOOL EnableAmbient;
    __declspec(property(get=GetEnableDiffuse,put=PutEnableDiffuse))
    VARIANT_BOOL EnableDiffuse;
    __declspec(property(get=GetEnableSpecularity,put=PutEnableSpecularity))
    VARIANT_BOOL EnableSpecularity;
    __declspec(property(get=GetEnableShininess,put=PutEnableShininess))
    VARIANT_BOOL EnableShininess;
    __declspec(property(get=GetEnableTransparency,put=PutEnableTransparency))
    VARIANT_BOOL EnableTransparency;
    __declspec(property(get=GetEnableEmission,put=PutEnableEmission))
    VARIANT_BOOL EnableEmission;

    //
    // Wrapper methods for error-handling
    //

    IColorParam7Ptr GetColorParam ( );
    VARIANT_BOOL Init (
        struct IColorParam7 * PVal );
    VARIANT_BOOL GetEnableAmbient ( );
    void PutEnableAmbient (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableDiffuse ( );
    void PutEnableDiffuse (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableSpecularity ( );
    void PutEnableSpecularity (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableShininess ( );
    void PutEnableShininess (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableTransparency ( );
    void PutEnableTransparency (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableEmission ( );
    void PutEnableEmission (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColorParam (
        /*[out,retval]*/ struct IColorParam7 * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IColorParam7 * PVal,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_EnableAmbient (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableAmbient (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableDiffuse (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableDiffuse (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableSpecularity (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableSpecularity (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableShininess (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableShininess (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableTransparency (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableTransparency (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableEmission (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EnableEmission (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("efe5b123-174f-4cb0-ae85-7f291fa8ae1b"))
ITablePattern : IFeaturePattern
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetPointsType,put=PutPointsType))
    enum ksPoint3DTypeEnum PointsType;
    __declspec(property(get=GetSaveInitialOrientation,put=PutSaveInitialOrientation))
    VARIANT_BOOL SaveInitialOrientation;
    __declspec(property(get=GetOrientationType,put=PutOrientationType))
    enum ksPatternExemplarsOrientationTypeEnum OrientationType;
    __declspec(property(get=GetOrientationObject,put=PutOrientationObject))
    IModelObjectPtr OrientationObject;

    //
    // Wrapper methods for error-handling
    //

    void PutFileName (
        _bstr_t Name );
    _bstr_t GetFileName ( );
    void PutPointsType (
        enum ksPoint3DTypeEnum Type );
    enum ksPoint3DTypeEnum GetPointsType ( );
    void PutSaveInitialOrientation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveInitialOrientation ( );
    void PutOrientationType (
        enum ksPatternExemplarsOrientationTypeEnum PVal );
    enum ksPatternExemplarsOrientationTypeEnum GetOrientationType ( );
    void PutOrientationObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetOrientationObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_PointsType (
        /*[in]*/ enum ksPoint3DTypeEnum Type ) = 0;
      virtual HRESULT __stdcall get_PointsType (
        /*[out,retval]*/ enum ksPoint3DTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall put_SaveInitialOrientation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveInitialOrientation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_OrientationType (
        /*[in]*/ enum ksPatternExemplarsOrientationTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum ksPatternExemplarsOrientationTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_OrientationObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_OrientationObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
};

struct __declspec(uuid("60ddc74b-8171-4ba6-abd9-549fba84e7b0"))
IModelObject1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLayerNumber,put=PutLayerNumber))
    long LayerNumber;
    __declspec(property(get=GetProjected,put=PutProjected))
    enum ksProjectionOptionEnum Projected;
    __declspec(property(get=GetHiddenEx,put=PutHiddenEx))
    enum ksVisibleStateEnum HiddenEx;
    __declspec(property(get=GetEditable,put=PutEditable))
    enum ksEditableStateEnum Editable;
    __declspec(property(get=GetMathObject))
    IKompasAPIObjectPtr MathObject;
    __declspec(property(get=GetConnectedWithInitialEmbodiment,put=PutConnectedWithInitialEmbodiment))
    VARIANT_BOOL ConnectedWithInitialEmbodiment;
    __declspec(property(get=GetIsEditableObject))
    VARIANT_BOOL IsEditableObject;
    __declspec(property(get=GetIsExternalObject))
    VARIANT_BOOL IsExternalObject;
    __declspec(property(get=GetParents))
    _variant_t Parents[];
    __declspec(property(get=GetChildrens))
    _variant_t Childrens[];
    __declspec(property(get=GetLinks))
    _variant_t Links;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetParents (
        enum ksRelationTypeEnum RelType );
    _variant_t GetChildrens (
        enum ksRelationTypeEnum RelType );
    _variant_t GetLinks ( );
    VARIANT_BOOL IsMyLink (
        enum ksRelationTypeEnum RelType,
        struct IModelObject * Primitive );
    long GetLayerNumber ( );
    void PutLayerNumber (
        long PVal );
    void PutProjected (
        enum ksProjectionOptionEnum PVal );
    enum ksProjectionOptionEnum GetProjected ( );
    void PutHiddenEx (
        enum ksVisibleStateEnum PVal );
    enum ksVisibleStateEnum GetHiddenEx ( );
    void PutEditable (
        enum ksEditableStateEnum PVal );
    enum ksEditableStateEnum GetEditable ( );
    VARIANT_BOOL Reset ( );
    IKompasAPIObjectPtr GetMathObject ( );
    void PutConnectedWithInitialEmbodiment (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetConnectedWithInitialEmbodiment ( );
    VARIANT_BOOL GetIsEditableObject ( );
    VARIANT_BOOL GetIsExternalObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parents (
        /*[in]*/ enum ksRelationTypeEnum RelType,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Childrens (
        /*[in]*/ enum ksRelationTypeEnum RelType,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Links (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_IsMyLink (
        /*[in]*/ enum ksRelationTypeEnum RelType,
        /*[in]*/ struct IModelObject * Primitive,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_LayerNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_LayerNumber (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall put_Projected (
        /*[in]*/ enum ksProjectionOptionEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Projected (
        /*[out,retval]*/ enum ksProjectionOptionEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_HiddenEx (
        /*[in]*/ enum ksVisibleStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HiddenEx (
        /*[out,retval]*/ enum ksVisibleStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ enum ksEditableStateEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ enum ksEditableStateEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_Reset (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_MathObject (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_ConnectedWithInitialEmbodiment (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ConnectedWithInitialEmbodiment (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsEditableObject (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsExternalObject (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("4be1ac9d-61f2-4305-95d5-2ed6c2b21a6a"))
IPropertyLinkButton : IPropertyControl
{
    //
    // Property data
    //

    __declspec(property(get=GetButtonChecked,put=PutButtonChecked))
    VARIANT_BOOL ButtonChecked[];
    __declspec(property(get=GetButtonEnable,put=PutButtonEnable))
    VARIANT_BOOL ButtonEnable[];
    __declspec(property(get=GetButtonVisible,put=PutButtonVisible))
    VARIANT_BOOL ButtonVisible[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddButton (
        long BtnID,
        _bstr_t Lebel );
    void PutButtonChecked (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonChecked (
        long BtnID );
    void PutButtonEnable (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonEnable (
        long BtnID );
    void PutButtonVisible (
        long BtnID,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetButtonVisible (
        long BtnID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddButton (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR Lebel,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ButtonChecked (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonChecked (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonEnable (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonEnable (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ButtonVisible (
        /*[in]*/ long BtnID,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ButtonVisible (
        /*[in]*/ long BtnID,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("468578bc-beaf-4053-aed9-4e10c48305c1"))
IProductDataManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProductObjects))
    _variant_t ProductObjects[];
    __declspec(property(get=GetProductObject))
    IPropertyKeeperPtr ProductObject[];
    __declspec(property(get=GetGeometry,put=PutGeometry))
    _variant_t Geometry[];
    __declspec(property(get=GetObjectAttachedDocuments,put=PutObjectAttachedDocuments))
    _variant_t ObjectAttachedDocuments[];
    __declspec(property(get=GetMetaProductInfo,put=PutMetaProductInfo))
    _bstr_t MetaProductInfo;
    __declspec(property(get=GetObjectMetaProductInfo,put=PutObjectMetaProductInfo))
    _bstr_t ObjectMetaProductInfo[];
    __declspec(property(get=GetReferenceData,put=PutReferenceData))
    _bstr_t ReferenceData;
    __declspec(property(get=GetReferenceDataIds))
    _variant_t ReferenceDataIds[];
    __declspec(property(get=GetReferenceDataInfo,put=PutReferenceDataInfo))
    _bstr_t ReferenceDataInfo[][];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetProductObjects (
        long Filter );
    IPropertyKeeperPtr GetProductObject (
        _bstr_t UniqueMetaObjectKey );
    IPropertyKeeperPtr AddProductObject (
        struct IPropertyKeeper * Parent,
        _bstr_t Name,
        enum ksProductObjectTypeEnum ObjectType );
    VARIANT_BOOL DeleteProductObject (
        _bstr_t UniqueMetaObjectKey );
    _variant_t GetGeometry (
        struct IPropertyKeeper * PropObject );
    void PutGeometry (
        struct IPropertyKeeper * PropObject,
        const _variant_t & PVal );
    _variant_t GetObjectAttachedDocuments (
        struct IPropertyKeeper * PropObject );
    void PutObjectAttachedDocuments (
        struct IPropertyKeeper * PropObject,
        const _variant_t & PVal );
    _bstr_t GetMetaProductInfo ( );
    void PutMetaProductInfo (
        _bstr_t PVal );
    _bstr_t GetObjectMetaProductInfo (
        struct IPropertyKeeper * PropObject );
    void PutObjectMetaProductInfo (
        struct IPropertyKeeper * PropObject,
        _bstr_t PVal );
    _bstr_t GetReferenceData ( );
    void PutReferenceData (
        _bstr_t PVal );
    _variant_t GetReferenceDataIds (
        _bstr_t ReferenceDataType );
    _bstr_t GetReferenceDataInfo (
        _bstr_t ReferenceDataType,
        _bstr_t ReferenceDataId );
    void PutReferenceDataInfo (
        _bstr_t ReferenceDataType,
        _bstr_t ReferenceDataId,
        _bstr_t PVal );
    _bstr_t AddReferenceData (
        _bstr_t ReferenceDataType,
        _bstr_t ReferenceDataInfo );
    VARIANT_BOOL DeleteReferenceData (
        _bstr_t ReferenceDataType,
        _bstr_t ReferenceDataId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProductObjects (
        /*[in]*/ long Filter,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_ProductObject (
        /*[in]*/ BSTR UniqueMetaObjectKey,
        /*[out,retval]*/ struct IPropertyKeeper * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddProductObject (
        /*[in]*/ struct IPropertyKeeper * Parent,
        /*[in]*/ BSTR Name,
        /*[in]*/ enum ksProductObjectTypeEnum ObjectType,
        /*[out,retval]*/ struct IPropertyKeeper * * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteProductObject (
        /*[in]*/ BSTR UniqueMetaObjectKey,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[in]*/ struct IPropertyKeeper * PropObject,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Geometry (
        /*[in]*/ struct IPropertyKeeper * PropObject,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectAttachedDocuments (
        /*[in]*/ struct IPropertyKeeper * PropObject,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_ObjectAttachedDocuments (
        /*[in]*/ struct IPropertyKeeper * PropObject,
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_MetaProductInfo (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_MetaProductInfo (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectMetaProductInfo (
        /*[in]*/ struct IPropertyKeeper * PropObject,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ObjectMetaProductInfo (
        /*[in]*/ struct IPropertyKeeper * PropObject,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceData (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceData (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceDataIds (
        /*[in]*/ BSTR ReferenceDataType,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceDataInfo (
        /*[in]*/ BSTR ReferenceDataType,
        /*[in]*/ BSTR ReferenceDataId,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceDataInfo (
        /*[in]*/ BSTR ReferenceDataType,
        /*[in]*/ BSTR ReferenceDataId,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_AddReferenceData (
        /*[in]*/ BSTR ReferenceDataType,
        /*[in]*/ BSTR ReferenceDataInfo,
        /*[out,retval]*/ BSTR * ReferenceDataId ) = 0;
      virtual HRESULT __stdcall raw_DeleteReferenceData (
        /*[in]*/ BSTR ReferenceDataType,
        /*[in]*/ BSTR ReferenceDataId,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("619a7499-13da-4c43-ad1b-53acaa4ba5b4"))
IMeshObject3D : IModelObject
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL InitByObjects (
        const _variant_t & Objects );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitByObjects (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("c24eb4cb-ce63-4130-ae76-86de33a8ddd0"))
IZoneParametersByBorderPoints : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksGabaritBuildingTypeEnum BuildingType;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject[];
    __declspec(property(get=GetPointType,put=PutPointType))
    enum ksPoint3DTypeEnum PointType[];
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters[];

    //
    // Wrapper methods for error-handling
    //

    enum ksGabaritBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksGabaritBuildingTypeEnum PVal );
    VARIANT_BOOL GetPoint (
        VARIANT_BOOL First,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        VARIANT_BOOL First,
        double X,
        double Y,
        double Z );
    void PutAssociationObject (
        VARIANT_BOOL First,
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject (
        VARIANT_BOOL First );
    void PutPointType (
        VARIANT_BOOL First,
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointType (
        VARIANT_BOOL First );
    IKompasAPIObjectPtr GetPointParameters (
        VARIANT_BOOL First );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksGabaritBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksGabaritBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ VARIANT_BOOL First,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
};

struct __declspec(uuid("d8a8bcbb-e337-431b-ac37-07007217190b"))
IDynamicCrossSectionStepParametersByBorderPoints : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksGabaritBuildingTypeEnum BuildingType;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject[];
    __declspec(property(get=GetPointType,put=PutPointType))
    enum ksPoint3DTypeEnum PointType[];
    __declspec(property(get=GetPointParameters))
    IKompasAPIObjectPtr PointParameters[];

    //
    // Wrapper methods for error-handling
    //

    enum ksGabaritBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksGabaritBuildingTypeEnum PVal );
    VARIANT_BOOL GetPoint (
        VARIANT_BOOL First,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL SetPoint (
        VARIANT_BOOL First,
        double X,
        double Y,
        double Z );
    void PutAssociationObject (
        VARIANT_BOOL First,
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject (
        VARIANT_BOOL First );
    void PutPointType (
        VARIANT_BOOL First,
        enum ksPoint3DTypeEnum PVal );
    enum ksPoint3DTypeEnum GetPointType (
        VARIANT_BOOL First );
    IKompasAPIObjectPtr GetPointParameters (
        VARIANT_BOOL First );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksGabaritBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksGabaritBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ VARIANT_BOOL First,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ VARIANT_BOOL First,
        /*[in]*/ enum ksPoint3DTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ enum ksPoint3DTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_PointParameters (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
};

struct __declspec(uuid("23a5dfee-5e95-4f8d-9cae-805e707f1ef8"))
IProcessWithVariables : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetControlExpression (
        struct IPropertyControl * Control,
        _bstr_t VariableName,
        _bstr_t Expression );
    _bstr_t GetControlExpression (
        struct IPropertyControl * Control );
    _bstr_t GetControlVariableName (
        struct IPropertyControl * Control );
    VARIANT_BOOL ClearExpressions ( );
    VARIANT_BOOL UpdateExpressionsControls ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetControlExpression (
        /*[in]*/ struct IPropertyControl * Control,
        /*[in]*/ BSTR VariableName,
        /*[in]*/ BSTR Expression,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetControlExpression (
        /*[in]*/ struct IPropertyControl * Control,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_GetControlVariableName (
        /*[in]*/ struct IPropertyControl * Control,
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearExpressions (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_UpdateExpressionsControls (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("70b41905-610e-4340-8239-5717aab0fb2d"))
ILineSegmentAndPointDimension : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBaseObjectPoint (
        long PointIndex,
        double * X,
        double * Y );
    VARIANT_BOOL SetBaseObjectPoint (
        long PointIndex,
        double X,
        double Y );
    IDrawingObjectPtr GetBaseObject (
        long Index );
    VARIANT_BOOL SetBaseObject (
        long Index,
        struct IDrawingObject * NewObject,
        long SegmentIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetBaseObjectPoint (
        /*[in]*/ long PointIndex,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBaseObjectPoint (
        /*[in]*/ long PointIndex,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBaseObject (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_SetBaseObject (
        /*[in]*/ long Index,
        /*[in]*/ struct IDrawingObject * NewObject,
        /*[in]*/ long SegmentIndex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("544803be-9cf8-4c45-b76f-554ccfd35fb4"))
IAdditionConvertParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat,put=PutFormat))
    enum ksKOMPASConverterEnum Format;
    __declspec(property(get=GetFormatBinary,put=PutFormatBinary))
    VARIANT_BOOL FormatBinary;
    __declspec(property(get=GetTopolgyIncluded,put=PutTopolgyIncluded))
    VARIANT_BOOL TopolgyIncluded;
    __declspec(property(get=GetTextExportForm,put=PutTextExportForm))
    enum ksTextExportFormEnum TextExportForm;
    __declspec(property(get=GetStepType,put=PutStepType))
    enum ksStepTypeEnum StepType;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetMaxTeselationCellCount,put=PutMaxTeselationCellCount))
    long MaxTeselationCellCount;
    __declspec(property(get=GetLengthUnits,put=PutLengthUnits))
    enum ksLengthUnitsEnum LengthUnits;
    __declspec(property(get=GetStitchSurfaces,put=PutStitchSurfaces))
    VARIANT_BOOL StitchSurfaces;
    __declspec(property(get=GetStitchPrecision,put=PutStitchPrecision))
    double StitchPrecision;
    __declspec(property(get=GetNeedCreateComponentsFiles,put=PutNeedCreateComponentsFiles))
    VARIANT_BOOL NeedCreateComponentsFiles;
    __declspec(property(get=GetSaveResultDocument,put=PutSaveResultDocument))
    VARIANT_BOOL SaveResultDocument;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    _variant_t Configuration;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetOrganization,put=PutOrganization))
    _bstr_t Organization;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetObjectsOptions,put=PutObjectsOptions))
    VARIANT_BOOL ObjectsOptions[];
    __declspec(property(get=GetPlacement))
    IPlacement3DPtr Placement;
    __declspec(property(get=GetConfigurationFileName,put=PutConfigurationFileName))
    _bstr_t ConfigurationFileName;

    //
    // Wrapper methods for error-handling
    //

    void PutFormat (
        enum ksKOMPASConverterEnum PVal );
    enum ksKOMPASConverterEnum GetFormat ( );
    void PutFormatBinary (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFormatBinary ( );
    void PutTopolgyIncluded (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTopolgyIncluded ( );
    void PutTextExportForm (
        enum ksTextExportFormEnum PVal );
    enum ksTextExportFormEnum GetTextExportForm ( );
    void PutStepType (
        enum ksStepTypeEnum Result );
    enum ksStepTypeEnum GetStepType ( );
    void PutStep (
        double Result );
    double GetStep ( );
    void PutAngle (
        double Result );
    double GetAngle ( );
    void PutLength (
        double Result );
    double GetLength ( );
    void PutMaxTeselationCellCount (
        long Result );
    long GetMaxTeselationCellCount ( );
    void PutLengthUnits (
        enum ksLengthUnitsEnum Result );
    enum ksLengthUnitsEnum GetLengthUnits ( );
    void PutStitchSurfaces (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStitchSurfaces ( );
    void PutStitchPrecision (
        double Result );
    double GetStitchPrecision ( );
    void PutNeedCreateComponentsFiles (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNeedCreateComponentsFiles ( );
    void PutSaveResultDocument (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSaveResultDocument ( );
    void PutConfiguration (
        const _variant_t & PVal );
    _variant_t GetConfiguration ( );
    void PutAuthor (
        _bstr_t PVal );
    _bstr_t GetAuthor ( );
    void PutOrganization (
        _bstr_t PVal );
    _bstr_t GetOrganization ( );
    void PutComment (
        _bstr_t PVal );
    _bstr_t GetComment ( );
    void PutPassword (
        _bstr_t PVal );
    _bstr_t GetPassword ( );
    void PutObjectsOptions (
        enum ksD3ConverterOptionsEnum Option,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetObjectsOptions (
        enum ksD3ConverterOptionsEnum Option );
    IPlacement3DPtr GetPlacement ( );
    void PutConfigurationFileName (
        _bstr_t PVal );
    _bstr_t GetConfigurationFileName ( );
    VARIANT_BOOL SaveConfigurationFile (
        _bstr_t FileName );
    VARIANT_BOOL LoadConfigurationFile (
        _bstr_t FileName );
    VARIANT_BOOL Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Format (
        /*[in]*/ enum ksKOMPASConverterEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum ksKOMPASConverterEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_FormatBinary (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_FormatBinary (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TopolgyIncluded (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TopolgyIncluded (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_TextExportForm (
        /*[in]*/ enum ksTextExportFormEnum PVal ) = 0;
      virtual HRESULT __stdcall get_TextExportForm (
        /*[out,retval]*/ enum ksTextExportFormEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_StepType (
        /*[in]*/ enum ksStepTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_StepType (
        /*[out,retval]*/ enum ksStepTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_MaxTeselationCellCount (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_MaxTeselationCellCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_LengthUnits (
        /*[in]*/ enum ksLengthUnitsEnum Result ) = 0;
      virtual HRESULT __stdcall get_LengthUnits (
        /*[out,retval]*/ enum ksLengthUnitsEnum * Result ) = 0;
      virtual HRESULT __stdcall put_StitchSurfaces (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_StitchSurfaces (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_StitchPrecision (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_StitchPrecision (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_NeedCreateComponentsFiles (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NeedCreateComponentsFiles (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SaveResultDocument (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SaveResultDocument (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Organization (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Organization (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ObjectsOptions (
        /*[in]*/ enum ksD3ConverterOptionsEnum Option,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ObjectsOptions (
        /*[in]*/ enum ksD3ConverterOptionsEnum Option,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ struct IPlacement3D * * PVal ) = 0;
      virtual HRESULT __stdcall put_ConfigurationFileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ConfigurationFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_SaveConfigurationFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_LoadConfigurationFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("6a2efaf7-8254-45a5-9dc8-2213f16af5d7"))
IApplication : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetDocuments))
    IDocumentsPtr Documents;
    __declspec(property(get=GetActiveDocument,put=PutActiveDocument))
    IKompasDocumentPtr ActiveDocument;
    __declspec(property(get=GetLibraryManager))
    ILibraryManagerPtr LibraryManager;
    __declspec(property(get=GetKompasError))
    IKompasErrorPtr KompasError;
    __declspec(property(get=GetConverter))
    IConverterPtr Converter[];
    __declspec(property(get=GetCheckSum))
    ICheckSumPtr CheckSum;
    __declspec(property(get=GetProgressBarIndicator))
    IProgressBarIndicatorPtr ProgressBarIndicator;
    __declspec(property(get=GetHideMessage,put=PutHideMessage))
    enum ksHideMessageEnum HideMessage;
    __declspec(property(get=GetSystemSettings))
    ISystemSettingsPtr SystemSettings;
    __declspec(property(get=GetApplicationName))
    _bstr_t ApplicationName[];
    __declspec(property(get=GetMath2D))
    IMath2DPtr Math2D;
    __declspec(property(get=GetPrintJob))
    IPrintJobPtr PrintJob;
    __declspec(property(get=GetCurrentDirectory,put=PutCurrentDirectory))
    _bstr_t CurrentDirectory;
    __declspec(property(get=GetLibraryStyles))
    IStylesPtr LibraryStyles[][];

    //
    // Wrapper methods for error-handling
    //

    void PutVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetVisible ( );
    IDocumentsPtr GetDocuments ( );
    HRESULT Quit ( );
    IProcessParamPtr CreateProcessParam ( );
    HRESULT StopCurrentProcess (
        VARIANT_BOOL PostMessage,
        struct IKompasDocument * PDoc );
    IPropertyManagerPtr CreatePropertyManager (
        VARIANT_BOOL NewManager );
    void PutActiveDocument (
        struct IKompasDocument * PDoc );
    IKompasDocumentPtr GetActiveDocument ( );
    ILibraryManagerPtr GetLibraryManager ( );
    IKompasErrorPtr GetKompasError ( );
    IConverterPtr GetConverter (
        const _variant_t & Library );
    ICheckSumPtr GetCheckSum ( );
    IProgressBarIndicatorPtr GetProgressBarIndicator ( );
    void PutHideMessage (
        enum ksHideMessageEnum PVal );
    enum ksHideMessageEnum GetHideMessage ( );
    VARIANT_BOOL ExecuteKompasCommand (
        long CommandID,
        VARIANT_BOOL PostMessage );
    VARIANT_BOOL IsKompasCommandEnable (
        long CommandID );
    long IsKompasCommandCheck (
        long CommandID );
    ISystemSettingsPtr GetSystemSettings ( );
    _bstr_t GetApplicationName (
        VARIANT_BOOL FullName );
    IMath2DPtr GetMath2D ( );
    IPrintJobPtr GetPrintJob ( );
    long MessageBoxEx (
        _bstr_t Text,
        _bstr_t Caption,
        long Flags );
    long MessageDlg (
        OLE_HANDLE Parent,
        _bstr_t Text,
        _bstr_t Caption,
        _bstr_t Explanation,
        long Flags,
        _bstr_t PositiveButton,
        _bstr_t NegativeButton,
        _bstr_t CancelButton,
        long HelpId,
        _bstr_t HelpFileName );
    _bstr_t GetCurrentDirectory ( );
    void PutCurrentDirectory (
        _bstr_t PVal );
    IStylesPtr GetLibraryStyles (
        _bstr_t Path,
        enum ksStylesLibraryTypeEnum StylesType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct IDocuments * * Documents ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_CreateProcessParam (
        /*[out,retval]*/ struct IProcessParam * * PProcessParam ) = 0;
      virtual HRESULT __stdcall raw_StopCurrentProcess (
        /*[in]*/ VARIANT_BOOL PostMessage,
        /*[in]*/ struct IKompasDocument * PDoc ) = 0;
      virtual HRESULT __stdcall raw_CreatePropertyManager (
        /*[in]*/ VARIANT_BOOL NewManager,
        /*[out,retval]*/ struct IPropertyManager * * PPropertyManager ) = 0;
      virtual HRESULT __stdcall put_ActiveDocument (
        /*[in]*/ struct IKompasDocument * PDoc ) = 0;
      virtual HRESULT __stdcall get_ActiveDocument (
        /*[out,retval]*/ struct IKompasDocument * * PDoc ) = 0;
      virtual HRESULT __stdcall get_LibraryManager (
        /*[out,retval]*/ struct ILibraryManager * * PRes ) = 0;
      virtual HRESULT __stdcall get_KompasError (
        /*[out,retval]*/ struct IKompasError * * PRes ) = 0;
      virtual HRESULT __stdcall get_Converter (
        /*[in]*/ VARIANT Library,
        /*[out,retval]*/ struct IConverter * * PVal ) = 0;
      virtual HRESULT __stdcall get_CheckSum (
        /*[out,retval]*/ struct ICheckSum * * PRes ) = 0;
      virtual HRESULT __stdcall get_ProgressBarIndicator (
        /*[out,retval]*/ struct IProgressBarIndicator * * PRes ) = 0;
      virtual HRESULT __stdcall put_HideMessage (
        /*[in]*/ enum ksHideMessageEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HideMessage (
        /*[out,retval]*/ enum ksHideMessageEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_ExecuteKompasCommand (
        /*[in]*/ long CommandID,
        /*[in]*/ VARIANT_BOOL PostMessage,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_IsKompasCommandEnable (
        /*[in]*/ long CommandID,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_IsKompasCommandCheck (
        /*[in]*/ long CommandID,
        /*[out,retval]*/ long * PRes ) = 0;
      virtual HRESULT __stdcall get_SystemSettings (
        /*[out,retval]*/ struct ISystemSettings * * PVal ) = 0;
      virtual HRESULT __stdcall get_ApplicationName (
        /*[in]*/ VARIANT_BOOL FullName,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Math2D (
        /*[out,retval]*/ struct IMath2D * * PRes ) = 0;
      virtual HRESULT __stdcall get_PrintJob (
        /*[out,retval]*/ struct IPrintJob * * PrintJob ) = 0;
      virtual HRESULT __stdcall raw_MessageBoxEx (
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR Caption,
        /*[in]*/ long Flags,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_MessageDlg (
        /*[in]*/ OLE_HANDLE Parent,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR Caption,
        /*[in]*/ BSTR Explanation,
        /*[in]*/ long Flags,
        /*[in]*/ BSTR PositiveButton,
        /*[in]*/ BSTR NegativeButton,
        /*[in]*/ BSTR CancelButton,
        /*[in]*/ long HelpId,
        /*[in]*/ BSTR HelpFileName,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_CurrentDirectory (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_CurrentDirectory (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryStyles (
        /*[in]*/ BSTR Path,
        /*[in]*/ enum ksStylesLibraryTypeEnum StylesType,
        /*[out,retval]*/ struct IStyles * * Result ) = 0;
};

struct __declspec(uuid("8bf39f08-5537-4910-84ce-b338e55f7bcf"))
IDocuments : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IKompasDocumentPtr Item[];
    __declspec(property(get=GetDocumentSynchronize,put=PutDocumentSynchronize))
    VARIANT_BOOL DocumentSynchronize;
    __declspec(property(get=GetRecoverMode,put=PutRecoverMode))
    VARIANT_BOOL RecoverMode;
    __declspec(property(get=GetRecoverError,put=PutRecoverError))
    enum ksRecoverErrorEnum RecoverError;
    __declspec(property(get=GetRecoverModeErrorList))
    _variant_t RecoverModeErrorList;

    //
    // Wrapper methods for error-handling
    //

    IKompasDocumentPtr GetItem (
        const _variant_t & Index );
    IKompasDocumentPtr Add (
        enum DocumentTypeEnum Type,
        VARIANT_BOOL Visible );
    IKompasDocumentPtr Open (
        _bstr_t PathName,
        VARIANT_BOOL Visible,
        VARIANT_BOOL ReadOnly );
    IKompasDocumentPtr OpenEx (
        _bstr_t PathName,
        VARIANT_BOOL Visible,
        VARIANT_BOOL ReadOnly,
        const _variant_t & LoadCombinationIndex );
    _variant_t GetLoadCombinations (
        _bstr_t PathName,
        long * CurrentIndex );
    IKompasDocumentPtr AddWithDefaultSettings (
        enum DocumentTypeEnum Type,
        VARIANT_BOOL Visible );
    void PutDocumentSynchronize (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDocumentSynchronize ( );
    VARIANT_BOOL GetRecoverMode ( );
    void PutRecoverMode (
        VARIANT_BOOL PVal );
    enum ksRecoverErrorEnum GetRecoverError ( );
    void PutRecoverError (
        enum ksRecoverErrorEnum PVal );
    ILoadCombinationsParamPtr GetLoadCombinationsParam (
        _bstr_t PathName );
    IOpenDocumentParamPtr GetOpenDocumentParam ( );
    IKompasDocumentPtr OpenDocument (
        _bstr_t FileName,
        struct IOpenDocumentParam * Param );
    _variant_t GetEmbodimentsTree (
        _bstr_t FileName,
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL AddSystemDelimer,
        VARIANT_BOOL AddSpaces,
        long * CurrentEmbodiment );
    _variant_t GetRecoverModeErrorList ( );
    IKompasDocumentPtr AddCustomDocument (
        _bstr_t DocumentTypeId );
    IKompasDocumentPtr AddNewDocumentFromTemplate (
        _bstr_t TemplateFileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IKompasDocument * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum DocumentTypeEnum Type,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[out,retval]*/ struct IKompasDocument * * Result ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR PathName,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ struct IKompasDocument * * Result ) = 0;
      virtual HRESULT __stdcall raw_OpenEx (
        /*[in]*/ BSTR PathName,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[in]*/ VARIANT LoadCombinationIndex,
        /*[out,retval]*/ struct IKompasDocument * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetLoadCombinations (
        /*[in]*/ BSTR PathName,
        /*[out]*/ long * CurrentIndex,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_AddWithDefaultSettings (
        /*[in]*/ enum DocumentTypeEnum Type,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[out,retval]*/ struct IKompasDocument * * Result ) = 0;
      virtual HRESULT __stdcall put_DocumentSynchronize (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DocumentSynchronize (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_RecoverMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RecoverMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RecoverError (
        /*[out,retval]*/ enum ksRecoverErrorEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_RecoverError (
        /*[in]*/ enum ksRecoverErrorEnum PVal ) = 0;
      virtual HRESULT __stdcall raw_GetLoadCombinationsParam (
        /*[in]*/ BSTR PathName,
        /*[out,retval]*/ struct ILoadCombinationsParam * * Value ) = 0;
      virtual HRESULT __stdcall raw_GetOpenDocumentParam (
        /*[out,retval]*/ struct IOpenDocumentParam * * Result ) = 0;
      virtual HRESULT __stdcall raw_OpenDocument (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IOpenDocumentParam * Param,
        /*[out,retval]*/ struct IKompasDocument * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetEmbodimentsTree (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL AddSystemDelimer,
        /*[in]*/ VARIANT_BOOL AddSpaces,
        /*[out]*/ long * CurrentEmbodiment,
        /*[out,retval]*/ VARIANT * Tree ) = 0;
      virtual HRESULT __stdcall get_RecoverModeErrorList (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddCustomDocument (
        /*[in]*/ BSTR DocumentTypeId,
        /*[out,retval]*/ struct IKompasDocument * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddNewDocumentFromTemplate (
        /*[in]*/ BSTR TemplateFileName,
        /*[out,retval]*/ struct IKompasDocument * * Result ) = 0;
};

struct __declspec(uuid("5c6e318d-bd6e-4afa-8a13-977eaa0845ef"))
IKompasDocument : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetChanged))
    VARIANT_BOOL Changed;
    __declspec(property(get=GetDocumentSettings))
    IDocumentSettingsPtr DocumentSettings;
    __declspec(property(get=GetSpecificationDescriptions))
    ISpecificationDescriptionsPtr SpecificationDescriptions;
    __declspec(property(get=GetLayoutSheets))
    ILayoutSheetsPtr LayoutSheets;
    __declspec(property(get=GetUserDataStoragesMng))
    IUserDataStoragesMngPtr UserDataStoragesMng;
    __declspec(property(get=GetDocumentType))
    enum DocumentTypeEnum DocumentType;
    __declspec(property(get=GetDocumentFrames))
    IDocumentFramesPtr DocumentFrames;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPathName))
    _bstr_t PathName;
    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    enum DocumentTypeEnum GetDocumentType ( );
    IDocumentFramesPtr GetDocumentFrames ( );
    VARIANT_BOOL Close (
        enum DocumentCloseOptions closeOptions );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t PathName );
    _bstr_t GetName ( );
    _bstr_t GetPathName ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetVisible ( );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetReadOnly ( );
    void PutReadOnly (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetChanged ( );
    IDocumentSettingsPtr GetDocumentSettings ( );
    ISpecificationDescriptionsPtr GetSpecificationDescriptions ( );
    ILayoutSheetsPtr GetLayoutSheets ( );
    IUserDataStoragesMngPtr GetUserDataStoragesMng ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DocumentType (
        /*[out,retval]*/ enum DocumentTypeEnum * Type ) = 0;
      virtual HRESULT __stdcall get_DocumentFrames (
        /*[out,retval]*/ struct IDocumentFrames * * PFrames ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ enum DocumentCloseOptions closeOptions,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR PathName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_PathName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Changed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_DocumentSettings (
        /*[out,retval]*/ struct IDocumentSettings * * PVal ) = 0;
      virtual HRESULT __stdcall get_SpecificationDescriptions (
        /*[out,retval]*/ struct ISpecificationDescriptions * * PVal ) = 0;
      virtual HRESULT __stdcall get_LayoutSheets (
        /*[out,retval]*/ struct ILayoutSheets * * PVal ) = 0;
      virtual HRESULT __stdcall get_UserDataStoragesMng (
        /*[out,retval]*/ struct IUserDataStoragesMng * * PVal ) = 0;
};

struct __declspec(uuid("d6a6d305-6b5c-4392-b61d-d669c092eef2"))
IInsert : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetComment,put=PutComment))
    _variant_t Comment;
    __declspec(property(get=GetLibraryFolder))
    _bstr_t LibraryFolder;
    __declspec(property(get=GetPathName))
    _bstr_t PathName;
    __declspec(property(get=GetInsertType))
    enum ksDocumentsLibraryInsertionTypeEnum InsertType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t PVal );
    _variant_t GetComment ( );
    void PutComment (
        const _variant_t & PVal );
    _bstr_t GetLibraryFolder ( );
    _bstr_t GetPathName ( );
    IKompasDocumentPtr Edit ( );
    VARIANT_BOOL Delete ( );
    enum ksDocumentsLibraryInsertionTypeEnum GetInsertType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall get_LibraryFolder (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_PathName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_Edit (
        /*[out,retval]*/ struct IKompasDocument * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_InsertType (
        /*[out,retval]*/ enum ksDocumentsLibraryInsertionTypeEnum * PVal ) = 0;
};

struct __declspec(uuid("fcbf6340-119d-4736-bb95-f1eab4bef1b8"))
IInserts : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IInsertPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IInsertPtr GetItem (
        const _variant_t & Index );
    IInsertPtr Add (
        _bstr_t Name,
        enum DocumentTypeEnum DocType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IInsert * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum DocumentTypeEnum DocType,
        /*[out,retval]*/ struct IInsert * * Result ) = 0;
};

struct __declspec(uuid("885cad68-b42b-45cf-8620-e0138558efe3"))
IInsertsLibrary : ILibrary
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveFolder))
    _bstr_t ActiveFolder;
    __declspec(property(get=GetInserts))
    IInsertsPtr Inserts;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetActiveFolder ( );
    VARIANT_BOOL SetActiveFolder (
        _bstr_t PathFolder,
        VARIANT_BOOL LastIsFile,
        VARIANT_BOOL HaveLibName );
    IInsertsPtr GetInserts ( );
    VARIANT_BOOL AddFolder (
        _bstr_t PathFolder );
    VARIANT_BOOL RemoveFolder (
        _bstr_t PathFolder );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActiveFolder (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetActiveFolder (
        /*[in]*/ BSTR PathFolder,
        /*[in]*/ VARIANT_BOOL LastIsFile,
        /*[in]*/ VARIANT_BOOL HaveLibName,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Inserts (
        /*[out,retval]*/ struct IInserts * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddFolder (
        /*[in]*/ BSTR PathFolder,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveFolder (
        /*[in]*/ BSTR PathFolder,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("a6e82d68-69d5-40c0-9a85-275b22219135"))
IInsertsLibraries : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IInsertsLibraryPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IInsertsLibraryPtr GetItem (
        const _variant_t & Index );
    IInsertsLibraryPtr Add (
        _bstr_t PathName,
        _bstr_t LibManagerFolder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IInsertsLibrary * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR PathName,
        /*[in]*/ BSTR LibManagerFolder,
        /*[out,retval]*/ struct IInsertsLibrary * * Result ) = 0;
};

struct __declspec(uuid("53cdc510-99ea-4736-8542-194f4d8fb32b"))
ILibraryManager : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetProceduresLibraries))
    IProceduresLibrariesPtr ProceduresLibraries;
    __declspec(property(get=GetFragmentsLibraries))
    IInsertsLibrariesPtr FragmentsLibraries;
    __declspec(property(get=GetModelsLibraries))
    IInsertsLibrariesPtr ModelsLibraries;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetLayout))
    enum PropertyManagerLayout Layout;
    __declspec(property(get=GetActiveFolder,put=PutActiveFolder))
    _bstr_t ActiveFolder;
    __declspec(property(get=GetActiveFolderComment,put=PutActiveFolderComment))
    _variant_t ActiveFolderComment;
    __declspec(property(get=GetSystemControlStartLibrary))
    IProceduresLibraryPtr SystemControlStartLibrary;
    __declspec(property(get=GetCurrentLibrary))
    IProceduresLibraryPtr CurrentLibrary;
    __declspec(property(get=GetSystemControlStartResult))
    enum ksSystemControlStartEnum SystemControlStartResult;
    __declspec(property(get=GetDocumentsLibraries))
    IInsertsLibrariesPtr DocumentsLibraries;

    //
    // Wrapper methods for error-handling
    //

    IProceduresLibrariesPtr GetProceduresLibraries ( );
    IInsertsLibrariesPtr GetFragmentsLibraries ( );
    IInsertsLibrariesPtr GetModelsLibraries ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL PVal );
    enum PropertyManagerLayout GetLayout ( );
    _bstr_t GetActiveFolder ( );
    void PutActiveFolder (
        _bstr_t PVal );
    _variant_t GetActiveFolderComment ( );
    void PutActiveFolderComment (
        const _variant_t & PVal );
    HRESULT AddFolder (
        _bstr_t PathFolder );
    HRESULT RemoveFolder (
        _bstr_t PathFolder );
    IProceduresLibraryPtr GetSystemControlStartLibrary ( );
    IProceduresLibraryPtr GetCurrentLibrary ( );
    VARIANT_BOOL SetCurrentLibrary (
        struct IProceduresLibrary * PVal );
    enum ksSystemControlStartEnum GetSystemControlStartResult ( );
    IInsertsLibrariesPtr GetDocumentsLibraries ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProceduresLibraries (
        /*[out,retval]*/ struct IProceduresLibraries * * Result ) = 0;
      virtual HRESULT __stdcall get_FragmentsLibraries (
        /*[out,retval]*/ struct IInsertsLibraries * * Result ) = 0;
      virtual HRESULT __stdcall get_ModelsLibraries (
        /*[out,retval]*/ struct IInsertsLibraries * * Result ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PropertyManagerLayout * PVal ) = 0;
      virtual HRESULT __stdcall get_ActiveFolder (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ActiveFolder (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_ActiveFolderComment (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_ActiveFolderComment (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall raw_AddFolder (
        /*[in]*/ BSTR PathFolder ) = 0;
      virtual HRESULT __stdcall raw_RemoveFolder (
        /*[in]*/ BSTR PathFolder ) = 0;
      virtual HRESULT __stdcall get_SystemControlStartLibrary (
        /*[out,retval]*/ struct IProceduresLibrary * * PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentLibrary (
        /*[out,retval]*/ struct IProceduresLibrary * * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentLibrary (
        /*[in]*/ struct IProceduresLibrary * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SystemControlStartResult (
        /*[out,retval]*/ enum ksSystemControlStartEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_DocumentsLibraries (
        /*[out,retval]*/ struct IInsertsLibraries * * Result ) = 0;
};

struct __declspec(uuid("e3fa8fd0-6187-4625-89b7-3c815651944d"))
ISpecificationDocument : IKompasDocument
{
    //
    // Property data
    //

    __declspec(property(get=GetAttachedDocuments))
    IAttachedDocumentsPtr AttachedDocuments;
    __declspec(property(get=GetCrossed))
    VARIANT_BOOL Crossed;

    //
    // Wrapper methods for error-handling
    //

    IAttachedDocumentsPtr GetAttachedDocuments ( );
    VARIANT_BOOL RebuildDocument ( );
    VARIANT_BOOL GetCrossed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttachedDocuments (
        /*[out,retval]*/ struct IAttachedDocuments * * PVal ) = 0;
      virtual HRESULT __stdcall raw_RebuildDocument (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Crossed (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
};

struct __declspec(uuid("71a589ea-d32f-42c4-bbc4-a51611e85e90"))
ITextDocument : IKompasDocument
{
    //
    // Property data
    //

    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetBlocksGabarits))
    _variant_t BlocksGabarits;
    __declspec(property(get=GetBlocksStartLineNumbers))
    _variant_t BlocksStartLineNumbers;
    __declspec(property(get=GetSectionsStartLineNumbers))
    _variant_t SectionsStartLineNumbers;

    //
    // Wrapper methods for error-handling
    //

    ITextPtr GetText ( );
    VARIANT_BOOL Update ( );
    _variant_t GetBlocksGabarits ( );
    _variant_t GetBlocksStartLineNumbers ( );
    _variant_t GetSectionsStartLineNumbers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall get_BlocksGabarits (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_BlocksStartLineNumbers (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_SectionsStartLineNumbers (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("37fd3c77-6032-4459-95e9-c8dfc43b85ff"))
IReport : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetReportType))
    enum ksReportTypeEnum ReportType;
    __declspec(property(get=GetShowAllObjects,put=PutShowAllObjects))
    VARIANT_BOOL ShowAllObjects;
    __declspec(property(get=GetCurrentReportStyle))
    IReportStylePtr CurrentReportStyle;
    __declspec(property(get=GetStylesCount))
    long StylesCount;
    __declspec(property(get=GetReportStyle))
    IReportStylePtr ReportStyle[];
    __declspec(property(get=GetCurrentStyleIndex,put=PutCurrentStyleIndex))
    long CurrentStyleIndex;
    __declspec(property(get=GetSourceFileName))
    _bstr_t SourceFileName;
    __declspec(property(get=GetUseReportFilter,put=PutUseReportFilter))
    VARIANT_BOOL UseReportFilter;
    __declspec(property(get=GetReportFilter))
    IReportFilterPtr ReportFilter;

    //
    // Wrapper methods for error-handling
    //

    enum ksReportTypeEnum GetReportType ( );
    VARIANT_BOOL GetShowAllObjects ( );
    void PutShowAllObjects (
        VARIANT_BOOL PVal );
    IReportStylePtr GetCurrentReportStyle ( );
    long GetStylesCount ( );
    IReportStylePtr GetReportStyle (
        const _variant_t & Index );
    IReportStylePtr AddStyle (
        _bstr_t FileName,
        double Id );
    long GetCurrentStyleIndex ( );
    void PutCurrentStyleIndex (
        long PVal );
    VARIANT_BOOL Rebuild ( );
    _bstr_t GetSourceFileName ( );
    IKompasDocumentPtr LoadSourceDocument (
        VARIANT_BOOL Visible,
        VARIANT_BOOL ReadOnly );
    void PutUseReportFilter (
        VARIANT_BOOL Index );
    VARIANT_BOOL GetUseReportFilter ( );
    IReportFilterPtr GetReportFilter ( );
    VARIANT_BOOL SaveAs (
        const _variant_t & FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReportType (
        /*[out,retval]*/ enum ksReportTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall get_ShowAllObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowAllObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentReportStyle (
        /*[out,retval]*/ struct IReportStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_StylesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_ReportStyle (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IReportStyle * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddStyle (
        /*[in]*/ BSTR FileName,
        /*[in]*/ double Id,
        /*[out,retval]*/ struct IReportStyle * * PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentStyleIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_CurrentStyleIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall raw_Rebuild (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SourceFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_LoadSourceDocument (
        /*[in]*/ VARIANT_BOOL Visible,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ struct IKompasDocument * * PVal ) = 0;
      virtual HRESULT __stdcall put_UseReportFilter (
        /*[in]*/ VARIANT_BOOL Index ) = 0;
      virtual HRESULT __stdcall get_UseReportFilter (
        /*[out,retval]*/ VARIANT_BOOL * Index ) = 0;
      virtual HRESULT __stdcall get_ReportFilter (
        /*[out,retval]*/ struct IReportFilter * * Filter ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ VARIANT FileName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("fd515235-4dba-4f81-8d5c-6fe87c834562"))
IPropertyMng : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPropertyCount))
    long PropertyCount[];

    //
    // Wrapper methods for error-handling
    //

    long GetPropertyCount (
        const _variant_t & Libname );
    IPropertyPtr GetProperty (
        const _variant_t & Libname,
        const _variant_t & Index );
    _variant_t GetProperties (
        const _variant_t & Libname );
    IPropertyPtr AddProperty (
        const _variant_t & Libname,
        const _variant_t & Val );
    VARIANT_BOOL RemoveProperty (
        const _variant_t & Libname,
        const _variant_t & Val );
    IReportPtr GetReport (
        const _variant_t & Document,
        enum ksReportTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PropertyCount (
        /*[in]*/ VARIANT Libname,
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ VARIANT Libname,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IProperty * * Res ) = 0;
      virtual HRESULT __stdcall raw_GetProperties (
        /*[in]*/ VARIANT Libname,
        /*[out,retval]*/ VARIANT * Res ) = 0;
      virtual HRESULT __stdcall raw_AddProperty (
        /*[in]*/ VARIANT Libname,
        /*[in]*/ VARIANT Val,
        /*[out,retval]*/ struct IProperty * * Res ) = 0;
      virtual HRESULT __stdcall raw_RemoveProperty (
        /*[in]*/ VARIANT Libname,
        /*[in]*/ VARIANT Val,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetReport (
        /*[in]*/ VARIANT Document,
        enum ksReportTypeEnum Type,
        /*[out,retval]*/ struct IReport * * Report ) = 0;
};

struct __declspec(uuid("44f0752e-e25b-4896-95b4-6376ac23a2a9"))
IAssociationTable : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetTablePlaceType,put=PutTablePlaceType))
    enum ksTablePointEnum TablePlaceType;
    __declspec(property(get=GetReport))
    IReportPtr Report;
    __declspec(property(get=GetActual))
    VARIANT_BOOL Actual;
    __declspec(property(get=GetTablesCount))
    long TablesCount;
    __declspec(property(get=GetTitle))
    ITextPtr Title[];
    __declspec(property(get=GetNumericGroup,put=PutNumericGroup))
    INumericGroupPtr NumericGroup;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Result );
    double GetY ( );
    void PutY (
        double Result );
    enum ksTablePointEnum GetTablePlaceType ( );
    void PutTablePlaceType (
        enum ksTablePointEnum PVal );
    IReportPtr GetReport ( );
    VARIANT_BOOL GetActual ( );
    VARIANT_BOOL Rebuild ( );
    long GetTablesCount ( );
    ITextPtr GetTitle (
        long TableIndex );
    INumericGroupPtr GetNumericGroup ( );
    void PutNumericGroup (
        struct INumericGroup * Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Result ) = 0;
      virtual HRESULT __stdcall get_TablePlaceType (
        /*[out,retval]*/ enum ksTablePointEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_TablePlaceType (
        /*[in]*/ enum ksTablePointEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Report (
        /*[out,retval]*/ struct IReport * * Result ) = 0;
      virtual HRESULT __stdcall get_Actual (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Rebuild (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_TablesCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[in]*/ long TableIndex,
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_NumericGroup (
        /*[out,retval]*/ struct INumericGroup * * Result ) = 0;
      virtual HRESULT __stdcall put_NumericGroup (
        /*[in]*/ struct INumericGroup * Result ) = 0;
};

struct __declspec(uuid("96f02f01-04e1-44d1-9974-48330ebe801b"))
IAssociationTables : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetAssociationTable))
    IAssociationTablePtr AssociationTable[];

    //
    // Wrapper methods for error-handling
    //

    IAssociationTablePtr GetAssociationTable (
        const _variant_t & Index );
    IAssociationTablePtr Add (
        const _variant_t & Document,
        enum ksReportTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AssociationTable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAssociationTable * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Document,
        /*[in]*/ enum ksReportTypeEnum Type,
        /*[out,retval]*/ struct IAssociationTable * * Result ) = 0;
};

struct __declspec(uuid("f46b0086-17f2-4489-a5a7-0aa677610afd"))
ISymbols2DContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLineDimensions))
    ILineDimensionsPtr LineDimensions;
    __declspec(property(get=GetRadialDimensions))
    IRadialDimensionsPtr RadialDimensions;
    __declspec(property(get=GetDiametralDimensions))
    IDiametralDimensionsPtr DiametralDimensions;
    __declspec(property(get=GetAngleDimensions))
    IAngleDimensionsPtr AngleDimensions;
    __declspec(property(get=GetBreakLineDimensions))
    IBreakLineDimensionsPtr BreakLineDimensions;
    __declspec(property(get=GetHeightDimensions))
    IHeightDimensionsPtr HeightDimensions;
    __declspec(property(get=GetArcDimensions))
    IArcDimensionsPtr ArcDimensions;
    __declspec(property(get=GetBreakRadialDimensions))
    IBreakRadialDimensionsPtr BreakRadialDimensions;
    __declspec(property(get=GetRoughs))
    IRoughsPtr Roughs;
    __declspec(property(get=GetLeaders))
    ILeadersPtr Leaders;
    __declspec(property(get=GetBases))
    IBasesPtr Bases;
    __declspec(property(get=GetTolerances))
    ITolerancesPtr Tolerances;
    __declspec(property(get=GetDrawingTables))
    IDrawingTablesPtr DrawingTables;
    __declspec(property(get=GetCutLines))
    ICutLinesPtr CutLines;
    __declspec(property(get=GetViewPointers))
    IViewPointersPtr ViewPointers;
    __declspec(property(get=GetCentreMarkers))
    ICentreMarkersPtr CentreMarkers;
    __declspec(property(get=GetRemoteElements))
    IRemoteElementsPtr RemoteElements;
    __declspec(property(get=GetAxisLines))
    IAxisLinesPtr AxisLines;
    __declspec(property(get=GetWaveLines))
    IWaveLinesPtr WaveLines;
    __declspec(property(get=GetBrokenLines))
    IBrokenLinesPtr BrokenLines;
    __declspec(property(get=GetAssociationTables))
    IAssociationTablesPtr AssociationTables;
    __declspec(property(get=GetCircularsCentries))
    ICircularsCentriesPtr CircularsCentries;
    __declspec(property(get=GetLinearsCentries))
    ILinearsCentriesPtr LinearsCentries;
    __declspec(property(get=GetConditionIntersects))
    IConditionIntersectsPtr ConditionIntersects;

    //
    // Wrapper methods for error-handling
    //

    ILineDimensionsPtr GetLineDimensions ( );
    IRadialDimensionsPtr GetRadialDimensions ( );
    IDiametralDimensionsPtr GetDiametralDimensions ( );
    IAngleDimensionsPtr GetAngleDimensions ( );
    IBreakLineDimensionsPtr GetBreakLineDimensions ( );
    IHeightDimensionsPtr GetHeightDimensions ( );
    IArcDimensionsPtr GetArcDimensions ( );
    IBreakRadialDimensionsPtr GetBreakRadialDimensions ( );
    IRoughsPtr GetRoughs ( );
    ILeadersPtr GetLeaders ( );
    IBasesPtr GetBases ( );
    ITolerancesPtr GetTolerances ( );
    IDrawingTablesPtr GetDrawingTables ( );
    ICutLinesPtr GetCutLines ( );
    IViewPointersPtr GetViewPointers ( );
    ICentreMarkersPtr GetCentreMarkers ( );
    IRemoteElementsPtr GetRemoteElements ( );
    IAxisLinesPtr GetAxisLines ( );
    IWaveLinesPtr GetWaveLines ( );
    IBrokenLinesPtr GetBrokenLines ( );
    IAssociationTablesPtr GetAssociationTables ( );
    ICircularsCentriesPtr GetCircularsCentries ( );
    ILinearsCentriesPtr GetLinearsCentries ( );
    IConditionIntersectsPtr GetConditionIntersects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineDimensions (
        /*[out,retval]*/ struct ILineDimensions * * PVal ) = 0;
      virtual HRESULT __stdcall get_RadialDimensions (
        /*[out,retval]*/ struct IRadialDimensions * * PVal ) = 0;
      virtual HRESULT __stdcall get_DiametralDimensions (
        /*[out,retval]*/ struct IDiametralDimensions * * PVal ) = 0;
      virtual HRESULT __stdcall get_AngleDimensions (
        /*[out,retval]*/ struct IAngleDimensions * * PVal ) = 0;
      virtual HRESULT __stdcall get_BreakLineDimensions (
        /*[out,retval]*/ struct IBreakLineDimensions * * PVal ) = 0;
      virtual HRESULT __stdcall get_HeightDimensions (
        /*[out,retval]*/ struct IHeightDimensions * * PVal ) = 0;
      virtual HRESULT __stdcall get_ArcDimensions (
        /*[out,retval]*/ struct IArcDimensions * * PVal ) = 0;
      virtual HRESULT __stdcall get_BreakRadialDimensions (
        /*[out,retval]*/ struct IBreakRadialDimensions * * PVal ) = 0;
      virtual HRESULT __stdcall get_Roughs (
        /*[out,retval]*/ struct IRoughs * * PVal ) = 0;
      virtual HRESULT __stdcall get_Leaders (
        /*[out,retval]*/ struct ILeaders * * PVal ) = 0;
      virtual HRESULT __stdcall get_Bases (
        /*[out,retval]*/ struct IBases * * PVal ) = 0;
      virtual HRESULT __stdcall get_Tolerances (
        /*[out,retval]*/ struct ITolerances * * PVal ) = 0;
      virtual HRESULT __stdcall get_DrawingTables (
        /*[out,retval]*/ struct IDrawingTables * * PVal ) = 0;
      virtual HRESULT __stdcall get_CutLines (
        /*[out,retval]*/ struct ICutLines * * PVal ) = 0;
      virtual HRESULT __stdcall get_ViewPointers (
        /*[out,retval]*/ struct IViewPointers * * PVal ) = 0;
      virtual HRESULT __stdcall get_CentreMarkers (
        /*[out,retval]*/ struct ICentreMarkers * * PVal ) = 0;
      virtual HRESULT __stdcall get_RemoteElements (
        /*[out,retval]*/ struct IRemoteElements * * PVal ) = 0;
      virtual HRESULT __stdcall get_AxisLines (
        /*[out,retval]*/ struct IAxisLines * * PVal ) = 0;
      virtual HRESULT __stdcall get_WaveLines (
        /*[out,retval]*/ struct IWaveLines * * PVal ) = 0;
      virtual HRESULT __stdcall get_BrokenLines (
        /*[out,retval]*/ struct IBrokenLines * * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationTables (
        /*[out,retval]*/ struct IAssociationTables * * PVal ) = 0;
      virtual HRESULT __stdcall get_CircularsCentries (
        /*[out,retval]*/ struct ICircularsCentries * * PVal ) = 0;
      virtual HRESULT __stdcall get_LinearsCentries (
        /*[out,retval]*/ struct ILinearsCentries * * PVal ) = 0;
      virtual HRESULT __stdcall get_ConditionIntersects (
        /*[out,retval]*/ struct IConditionIntersects * * PVal ) = 0;
};

struct __declspec(uuid("ee36cadb-07d1-457a-8d7c-1d2d4b240cf3"))
IApplicationServises : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL CheckDocumentMatchingNames (
        struct IKompasDocument * Document );
    long GetCurrentUniqueName (
        struct IKompasDocument * Document );
    VARIANT_BOOL CreateModelSnapshot (
        _bstr_t Path,
        _bstr_t Options );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CheckDocumentMatchingNames (
        /*[in]*/ struct IKompasDocument * Document,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentUniqueName (
        /*[in]*/ struct IKompasDocument * Document,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall raw_CreateModelSnapshot (
        /*[in]*/ BSTR Path,
        /*[in]*/ BSTR Options,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("b9632c5c-86e1-4bc9-83a5-a954e407246a"))
ISpecificationDescriptions : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationDescriptionPtr Item[];
    __declspec(property(get=GetDescription))
    ISpecificationDescriptionPtr Description[][];
    __declspec(property(get=GetActive))
    ISpecificationDescriptionPtr Active;
    __declspec(property(get=GetActiveFromLibStyle))
    ISpecificationDescriptionPtr ActiveFromLibStyle;

    //
    // Wrapper methods for error-handling
    //

    ISpecificationDescriptionPtr GetItem (
        const _variant_t & Index );
    ISpecificationDescriptionPtr Add (
        _bstr_t LayoutName,
        long StyleID,
        _bstr_t SpcName );
    ISpecificationDescriptionPtr GetDescription (
        _bstr_t LayoutName,
        long StyleID );
    ISpecificationDescriptionPtr GetActive ( );
    ISpecificationDescriptionPtr GetActiveFromLibStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationDescription * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR LayoutName,
        /*[in]*/ long StyleID,
        /*[in]*/ BSTR SpcName,
        /*[out,retval]*/ struct ISpecificationDescription * * Result ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[in]*/ BSTR LayoutName,
        /*[in]*/ long StyleID,
        /*[out,retval]*/ struct ISpecificationDescription * * Result ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ struct ISpecificationDescription * * Result ) = 0;
      virtual HRESULT __stdcall get_ActiveFromLibStyle (
        /*[out,retval]*/ struct ISpecificationDescription * * Result ) = 0;
};

struct __declspec(uuid("9678959e-166b-45f3-bde8-88bbf4645f5c"))
ISpecificationDescription : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutName,put=PutLayoutName))
    _bstr_t LayoutName;
    __declspec(property(get=GetStyleID,put=PutStyleID))
    long StyleID;
    __declspec(property(get=GetSpecificationDocumentName,put=PutSpecificationDocumentName))
    _bstr_t SpecificationDocumentName;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetSpecificationStyle))
    ISpecificationStylePtr SpecificationStyle;
    __declspec(property(get=GetSpecificationTuning))
    ISpecificationTuningPtr SpecificationTuning;
    __declspec(property(get=GetObjects))
    _variant_t Objects;
    __declspec(property(get=GetBaseObjects))
    ISpecificationBaseObjectsPtr BaseObjects;
    __declspec(property(get=GetCommentObjects))
    ISpecificationCommentObjectsPtr CommentObjects;
    __declspec(property(get=GetShowOnSheet,put=PutShowOnSheet))
    VARIANT_BOOL ShowOnSheet;
    __declspec(property(get=GetCurrentObject,put=PutCurrentObject))
    ISpecificationObjectPtr CurrentObject;
    __declspec(property(get=GetShowAllObjects,put=PutShowAllObjects))
    VARIANT_BOOL ShowAllObjects;
    __declspec(property(get=GetPerformanceName,put=PutPerformanceName))
    _bstr_t PerformanceName[][];
    __declspec(property(get=GetDelegateMode,put=PutDelegateMode))
    VARIANT_BOOL DelegateMode;
    __declspec(property(get=GetNeedRebuild,put=PutNeedRebuild))
    VARIANT_BOOL NeedRebuild;
    __declspec(property(get=GetShowExcludedObjects,put=PutShowExcludedObjects))
    VARIANT_BOOL ShowExcludedObjects;
    __declspec(property(get=GetPerformanceCount,put=PutPerformanceCount))
    long PerformanceCount;
    __declspec(property(get=GetPerformanceCountInBlock))
    long PerformanceCountInBlock;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLayoutName ( );
    void PutLayoutName (
        _bstr_t PVal );
    long GetStyleID ( );
    void PutStyleID (
        long PVal );
    _bstr_t GetSpecificationDocumentName ( );
    void PutSpecificationDocumentName (
        _bstr_t PVal );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL PVal );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );
    ISpecificationStylePtr GetSpecificationStyle ( );
    ISpecificationTuningPtr GetSpecificationTuning ( );
    _variant_t GetObjects ( );
    ISpecificationBaseObjectsPtr GetBaseObjects ( );
    ISpecificationCommentObjectsPtr GetCommentObjects ( );
    VARIANT_BOOL GetShowOnSheet ( );
    void PutShowOnSheet (
        VARIANT_BOOL PVal );
    ISpecificationObjectPtr GetCurrentObject ( );
    void PutCurrentObject (
        struct ISpecificationObject * Result );
    VARIANT_BOOL GetShowAllObjects ( );
    void PutShowAllObjects (
        VARIANT_BOOL PVal );
    _bstr_t GetPerformanceName (
        long PerformanceIndex,
        long BlockIndex );
    void PutPerformanceName (
        long PerformanceIndex,
        long BlockIndex,
        _bstr_t PVal );
    VARIANT_BOOL GetDelegateMode ( );
    void PutDelegateMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetNeedRebuild ( );
    void PutNeedRebuild (
        VARIANT_BOOL PVal );
    enum ksSpecificationStyleDifferenceTypeEnum CompareStyleWithLibStyle ( );
    _bstr_t GetPerformanceParam (
        long DisplayPerformanceIndex,
        long * PerformanceIndex,
        long * BlockIndex );
    VARIANT_BOOL GetShowExcludedObjects ( );
    void PutShowExcludedObjects (
        VARIANT_BOOL PVal );
    long GetPerformanceCount ( );
    void PutPerformanceCount (
        long PVal );
    long GetPerformanceCountInBlock ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayoutName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_LayoutName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_StyleID (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_StyleID (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_SpecificationDocumentName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_SpecificationDocumentName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_SpecificationStyle (
        /*[out,retval]*/ struct ISpecificationStyle * * Result ) = 0;
      virtual HRESULT __stdcall get_SpecificationTuning (
        /*[out,retval]*/ struct ISpecificationTuning * * Result ) = 0;
      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_BaseObjects (
        /*[out,retval]*/ struct ISpecificationBaseObjects * * Result ) = 0;
      virtual HRESULT __stdcall get_CommentObjects (
        /*[out,retval]*/ struct ISpecificationCommentObjects * * Result ) = 0;
      virtual HRESULT __stdcall get_ShowOnSheet (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowOnSheet (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentObject (
        /*[out,retval]*/ struct ISpecificationObject * * Result ) = 0;
      virtual HRESULT __stdcall put_CurrentObject (
        /*[in]*/ struct ISpecificationObject * Result ) = 0;
      virtual HRESULT __stdcall get_ShowAllObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowAllObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PerformanceName (
        /*[in]*/ long PerformanceIndex,
        /*[in]*/ long BlockIndex,
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_PerformanceName (
        /*[in]*/ long PerformanceIndex,
        /*[in]*/ long BlockIndex,
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_DelegateMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DelegateMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_NeedRebuild (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_NeedRebuild (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_CompareStyleWithLibStyle (
        /*[out,retval]*/ enum ksSpecificationStyleDifferenceTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetPerformanceParam (
        /*[in]*/ long DisplayPerformanceIndex,
        /*[out]*/ long * PerformanceIndex,
        /*[out]*/ long * BlockIndex,
        /*[out,retval]*/ BSTR * PerformanceName ) = 0;
      virtual HRESULT __stdcall get_ShowExcludedObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ShowExcludedObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PerformanceCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PerformanceCount (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_PerformanceCountInBlock (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("b2b97d19-3a0b-4c9f-a6ac-deffafe0d1c2"))
ISpecificationBaseObjects : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationBaseObjectPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ISpecificationBaseObjectPtr GetItem (
        const _variant_t & Index );
    ISpecificationBaseObjectPtr Add (
        long SectionNumb,
        double AttrNumb );
    _variant_t GetSpecificationObjectsForGeom (
        const _variant_t & PGeom,
        VARIANT_BOOL Equal,
        long SectionNumb,
        double AttrNumb );
    ISpecificationBaseObjectPtr CopySpecificationObject (
        struct ISpecificationBaseObject * SpcObj,
        const _variant_t & Geometry );
    ISpecificationBaseObjectPtr AddWithParam (
        struct ISpecificationObjectCreateParam * Param,
        struct IPropertyKeeper * PropertyObject,
        VARIANT_BOOL FillText,
        const _variant_t & Geometry );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationBaseObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long SectionNumb,
        /*[in]*/ double AttrNumb,
        /*[out,retval]*/ struct ISpecificationBaseObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetSpecificationObjectsForGeom (
        /*[in]*/ VARIANT PGeom,
        /*[in]*/ VARIANT_BOOL Equal,
        /*[in]*/ long SectionNumb,
        /*[in]*/ double AttrNumb,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall raw_CopySpecificationObject (
        /*[in]*/ struct ISpecificationBaseObject * SpcObj,
        /*[in]*/ VARIANT Geometry,
        /*[out,retval]*/ struct ISpecificationBaseObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddWithParam (
        /*[in]*/ struct ISpecificationObjectCreateParam * Param,
        /*[in]*/ struct IPropertyKeeper * PropertyObject,
        VARIANT_BOOL FillText,
        /*[in]*/ VARIANT Geometry,
        /*[out,retval]*/ struct ISpecificationBaseObject * * Result ) = 0;
};

struct __declspec(uuid("49994ed8-96ba-4d9d-b642-5f0f1e3fed16"))
ISpecificationBaseObject : ISpecificationObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDraw,put=PutDraw))
    VARIANT_BOOL Draw;
    __declspec(property(get=GetDrawPosition,put=PutDrawPosition))
    VARIANT_BOOL DrawPosition;
    __declspec(property(get=GetPerformance,put=PutPerformance))
    VARIANT_BOOL Performance;
    __declspec(property(get=GetCommentObjects))
    ISpecificationCommentObjectsPtr CommentObjects;
    __declspec(property(get=GetDocuments))
    _variant_t Documents;
    __declspec(property(get=GetAttributeNumber,put=PutAttributeNumber))
    double AttributeNumber;
    __declspec(property(get=GetSummaryCount))
    double SummaryCount[][];
    __declspec(property(get=GetGeometry,put=PutGeometry))
    _variant_t Geometry;
    __declspec(property(get=GetEditSourceObject,put=PutEditSourceObject))
    VARIANT_BOOL EditSourceObject;
    __declspec(property(get=GetSyncronizeWithProperties,put=PutSyncronizeWithProperties))
    VARIANT_BOOL SyncronizeWithProperties;
    __declspec(property(get=GetSpcUsed,put=PutSpcUsed))
    VARIANT_BOOL SpcUsed[];
    __declspec(property(get=GetUniqueMetaObjectKey))
    _bstr_t UniqueMetaObjectKey;
    __declspec(property(get=GetIsFirstObject))
    VARIANT_BOOL IsFirstObject;
    __declspec(property(get=GetFillNameByMaterial,put=PutFillNameByMaterial))
    VARIANT_BOOL FillNameByMaterial;
    __declspec(property(get=GetSummaryCountText))
    ITextPtr SummaryCountText[][];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDraw ( );
    void PutDraw (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDrawPosition ( );
    void PutDrawPosition (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPerformance ( );
    void PutPerformance (
        VARIANT_BOOL PVal );
    ISpecificationCommentObjectsPtr GetCommentObjects ( );
    _variant_t GetDocuments ( );
    double GetAttributeNumber ( );
    void PutAttributeNumber (
        double PVal );
    double GetSummaryCount (
        long ColumnTypeNumber,
        long BlockNumber );
    VARIANT_BOOL SetMaterial (
        _bstr_t Material,
        double Density );
    _variant_t GetGeometry ( );
    void PutGeometry (
        const _variant_t & PVal );
    VARIANT_BOOL IncludeGeometry (
        const _variant_t & PVal,
        VARIANT_BOOL FillText );
    VARIANT_BOOL ClearGeometry (
        VARIANT_BOOL ClearGeometry,
        VARIANT_BOOL ClearLeaders );
    VARIANT_BOOL GetEditSourceObject ( );
    void PutEditSourceObject (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSyncronizeWithProperties ( );
    void PutSyncronizeWithProperties (
        VARIANT_BOOL PVal );
    VARIANT_BOOL SetSection (
        long Val );
    void PutSpcUsed (
        enum ksSpcUsedTypeEnum SpcUsed,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetSpcUsed (
        enum ksSpcUsedTypeEnum SpcUsed );
    _bstr_t GetUniqueMetaObjectKey ( );
    VARIANT_BOOL GetIsFirstObject ( );
    VARIANT_BOOL GetFillNameByMaterial ( );
    void PutFillNameByMaterial (
        VARIANT_BOOL PVal );
    ITextPtr GetSummaryCountText (
        long ColumnTypeNumber,
        long BlockNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Draw (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Draw (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DrawPosition (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DrawPosition (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Performance (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Performance (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CommentObjects (
        /*[out,retval]*/ struct ISpecificationCommentObjects * * Result ) = 0;
      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_AttributeNumber (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AttributeNumber (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SummaryCount (
        /*[in]*/ long ColumnTypeNumber,
        /*[in]*/ long BlockNumber,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaterial (
        /*[in]*/ BSTR Material,
        /*[in]*/ double Density,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Geometry (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall raw_IncludeGeometry (
        /*[in]*/ VARIANT PVal,
        /*[in]*/ VARIANT_BOOL FillText,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ClearGeometry (
        /*[in]*/ VARIANT_BOOL ClearGeometry,
        /*[in]*/ VARIANT_BOOL ClearLeaders,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EditSourceObject (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EditSourceObject (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SyncronizeWithProperties (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SyncronizeWithProperties (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_SetSection (
        /*[in]*/ long Val,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_SpcUsed (
        /*[in]*/ enum ksSpcUsedTypeEnum SpcUsed,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SpcUsed (
        /*[in]*/ enum ksSpcUsedTypeEnum SpcUsed,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_UniqueMetaObjectKey (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_IsFirstObject (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_FillNameByMaterial (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_FillNameByMaterial (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_SummaryCountText (
        /*[in]*/ long ColumnTypeNumber,
        /*[in]*/ long BlockNumber,
        /*[out,retval]*/ struct IText * * PVal ) = 0;
};

struct __declspec(uuid("3b6b80ca-2145-4184-b786-0c571df5acd7"))
ISpecificationCommentObject : ISpecificationObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBaseObject))
    ISpecificationBaseObjectPtr BaseObject;
    __declspec(property(get=GetBlockNumber,put=PutBlockNumber))
    long BlockNumber;
    __declspec(property(get=GetEditSourceObject,put=PutEditSourceObject))
    VARIANT_BOOL EditSourceObject;

    //
    // Wrapper methods for error-handling
    //

    ISpecificationBaseObjectPtr GetBaseObject ( );
    long GetBlockNumber ( );
    void PutBlockNumber (
        long PVal );
    VARIANT_BOOL GetEditSourceObject ( );
    void PutEditSourceObject (
        VARIANT_BOOL PVal );
    VARIANT_BOOL SetSection (
        long Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct ISpecificationBaseObject * * Result ) = 0;
      virtual HRESULT __stdcall get_BlockNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_BlockNumber (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_EditSourceObject (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EditSourceObject (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_SetSection (
        /*[in]*/ long Val,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("b8bd0fc7-ab2b-4e7a-8ec2-82060d7d29a7"))
ISpecificationCommentObjects : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISpecificationCommentObjectPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ISpecificationCommentObjectPtr GetItem (
        const _variant_t & Index );
    ISpecificationCommentObjectPtr Add (
        long SectionNamb );
    VARIANT_BOOL Attach (
        struct ISpecificationCommentObject * PVal );
    VARIANT_BOOL Detach (
        struct ISpecificationCommentObject * PVal );
    ISpecificationCommentObjectPtr CopySpecificationObject (
        struct ISpecificationCommentObject * SpcObj );
    ISpecificationCommentObjectPtr AddWithParam (
        struct ISpecificationObjectCreateParam * Param,
        struct ISpecificationBaseObject * ParentObject );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpecificationCommentObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long SectionNamb,
        /*[out,retval]*/ struct ISpecificationCommentObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_Attach (
        /*[in]*/ struct ISpecificationCommentObject * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Detach (
        /*[in]*/ struct ISpecificationCommentObject * PVal,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_CopySpecificationObject (
        /*[in]*/ struct ISpecificationCommentObject * SpcObj,
        /*[out,retval]*/ struct ISpecificationCommentObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddWithParam (
        /*[in]*/ struct ISpecificationObjectCreateParam * Param,
        /*[in]*/ struct ISpecificationBaseObject * ParentObject,
        /*[out,retval]*/ struct ISpecificationCommentObject * * Result ) = 0;
};

struct __declspec(uuid("096e62b3-7184-4998-9925-74bb710d8d8e"))
IKompasDocument2D : IKompasDocument
{
    //
    // Property data
    //

    __declspec(property(get=GetViewsAndLayersManager))
    IViewsAndLayersManagerPtr ViewsAndLayersManager;

    //
    // Wrapper methods for error-handling
    //

    IViewsAndLayersManagerPtr GetViewsAndLayersManager ( );
    IDispatchPtr GetDrawingObjectNotifyResult ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ViewsAndLayersManager (
        /*[out,retval]*/ struct IViewsAndLayersManager * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetDrawingObjectNotifyResult (
        /*[out,retval]*/ IDispatch * * Result ) = 0;
};

struct __declspec(uuid("c2214318-5c89-40f8-a25c-c87d08b490f4"))
IDrawingDocument : IKompasDocument2D
{
    //
    // Property data
    //

    __declspec(property(get=GetChangeListDescriptions))
    ISpecificationDescriptionsPtr ChangeListDescriptions;
    __declspec(property(get=GetSpecRough))
    ISpecRoughPtr SpecRough;
    __declspec(property(get=GetTechnicalDemand))
    ITechnicalDemandPtr TechnicalDemand;

    //
    // Wrapper methods for error-handling
    //

    ISpecificationDescriptionsPtr GetChangeListDescriptions ( );
    ISpecRoughPtr GetSpecRough ( );
    ITechnicalDemandPtr GetTechnicalDemand ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChangeListDescriptions (
        /*[out,retval]*/ struct ISpecificationDescriptions * * PVal ) = 0;
      virtual HRESULT __stdcall get_SpecRough (
        /*[out,retval]*/ struct ISpecRough * * PVal ) = 0;
      virtual HRESULT __stdcall get_TechnicalDemand (
        /*[out,retval]*/ struct ITechnicalDemand * * PVal ) = 0;
};

struct __declspec(uuid("e19ce626-df9c-48c4-a83d-3e3bc7f0daca"))
IFragmentDocument : IKompasDocument2D
{
    //
    // Property data
    //

    __declspec(property(get=GetIsSketch))
    VARIANT_BOOL IsSketch;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsSketch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsSketch (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("66907239-09ba-4456-ac9a-318804099628"))
IInsertionDefinition : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionType))
    enum ksInsertionTypeEnum InsertionType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetInsertionObjectsCount))
    long InsertionObjectsCount;

    //
    // Wrapper methods for error-handling
    //

    enum ksInsertionTypeEnum GetInsertionType ( );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    void PutFileName (
        _bstr_t PVal );
    _bstr_t GetFileName ( );
    IKompasDocument2DPtr Open (
        VARIANT_BOOL Visible,
        VARIANT_BOOL ReadOnly );
    long GetInsertionObjectsCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InsertionType (
        /*[out,retval]*/ enum ksInsertionTypeEnum * Val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ VARIANT_BOOL Visible,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ struct IKompasDocument2D * * Result ) = 0;
      virtual HRESULT __stdcall get_InsertionObjectsCount (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("1db65c7e-535e-489e-8f34-84df7fba09b2"))
IInsertionParameters : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetSourceHeight))
    double SourceHeight;
    __declspec(property(get=GetSourceWidth))
    double SourceWidth;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetAngle,put=PutAngle))
    enum ksAngleEnum Angle;
    __declspec(property(get=GetInsertionDefinition,put=PutInsertionDefinition))
    IInsertionDefinitionPtr InsertionDefinition;
    __declspec(property(get=GetImageResolution,put=PutImageResolution))
    double ImageResolution;
    __declspec(property(get=GetPalette))
    long Palette;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFileName ( );
    double GetSourceHeight ( );
    double GetSourceWidth ( );
    double GetHeight ( );
    void PutHeight (
        double PVal );
    double GetWidth ( );
    void PutWidth (
        double PVal );
    double GetScale ( );
    void PutScale (
        double PVal );
    VARIANT_BOOL AutoScale (
        VARIANT_BOOL ByHeight );
    enum ksAngleEnum GetAngle ( );
    void PutAngle (
        enum ksAngleEnum PVal );
    IInsertionDefinitionPtr GetInsertionDefinition ( );
    void PutInsertionDefinition (
        struct IInsertionDefinition * PVal );
    double GetImageResolution ( );
    void PutImageResolution (
        double PVal );
    long GetPalette ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_SourceHeight (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_SourceWidth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall raw_AutoScale (
        /*[in]*/ VARIANT_BOOL ByHeight,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ enum ksAngleEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ enum ksAngleEnum PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionDefinition (
        /*[out,retval]*/ struct IInsertionDefinition * * PVal ) = 0;
      virtual HRESULT __stdcall put_InsertionDefinition (
        /*[in]*/ struct IInsertionDefinition * PVal ) = 0;
      virtual HRESULT __stdcall get_ImageResolution (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_ImageResolution (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Palette (
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("e6bbf50d-8401-4fb3-a6b6-153d3f447255"))
ISketch : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPlane,put=PutPlane))
    IModelObjectPtr Plane;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetLeftHandedCS,put=PutLeftHandedCS))
    VARIANT_BOOL LeftHandedCS;
    __declspec(property(get=GetFixed,put=PutFixed))
    VARIANT_BOOL Fixed;
    __declspec(property(get=GetCoordinateSystem,put=PutCoordinateSystem))
    IModelObjectPtr CoordinateSystem;
    __declspec(property(get=GetAssociationObject,put=PutAssociationObject))
    IModelObjectPtr AssociationObject;
    __declspec(property(get=GetDirectingObject,put=PutDirectingObject))
    IModelObjectPtr DirectingObject[];
    __declspec(property(get=GetVector3D))
    IVector3DPtr Vector3D[];

    //
    // Wrapper methods for error-handling
    //

    void PutPlane (
        struct IModelObject * Result );
    IModelObjectPtr GetPlane ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    VARIANT_BOOL GetLocation (
        double * X,
        double * Y );
    VARIANT_BOOL SetLocation (
        double X,
        double Y );
    VARIANT_BOOL GetLoftPoint (
        double * X,
        double * Y );
    VARIANT_BOOL SetLoftPoint (
        double X,
        double Y );
    IFragmentDocumentPtr BeginEdit ( );
    VARIANT_BOOL EndEdit ( );
    IFragmentDocumentPtr BeginEditEx (
        VARIANT_BOOL ReadOnly );
    VARIANT_BOOL AddSketch (
        struct IModelObject * Sketch,
        struct IModelObject * Plane );
    VARIANT_BOOL WriteToFragment (
        _bstr_t FileName );
    VARIANT_BOOL DeleteWrongProjection ( );
    void PutLeftHandedCS (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetLeftHandedCS ( );
    void PutFixed (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixed ( );
    IModelObjectPtr GetCoordinateSystem ( );
    void PutCoordinateSystem (
        struct IModelObject * PVal );
    IModelObjectPtr GetAssociationObject ( );
    void PutAssociationObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetDirectingObject (
        ksObj3dTypeEnum Axis );
    void PutDirectingObject (
        ksObj3dTypeEnum Axis,
        struct IModelObject * PVal );
    IVector3DPtr GetVector3D (
        ksObj3dTypeEnum Axis );
    VARIANT_BOOL RotateAxis (
        ksObj3dTypeEnum Axis );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetLocation (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetLocation (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetLoftPoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetLoftPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_BeginEdit (
        /*[out,retval]*/ struct IFragmentDocument * * SketchDoc ) = 0;
      virtual HRESULT __stdcall raw_EndEdit (
        /*[out,retval]*/ VARIANT_BOOL * Res ) = 0;
      virtual HRESULT __stdcall raw_BeginEditEx (
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ struct IFragmentDocument * * SketchDoc ) = 0;
      virtual HRESULT __stdcall raw_AddSketch (
        /*[in]*/ struct IModelObject * Sketch,
        /*[in]*/ struct IModelObject * Plane,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_WriteToFragment (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteWrongProjection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftHandedCS (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LeftHandedCS (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Fixed (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystem (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DirectingObject (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_DirectingObject (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Vector3D (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out,retval]*/ struct IVector3D * * PVal ) = 0;
      virtual HRESULT __stdcall raw_RotateAxis (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("ee562963-395c-4748-9726-fca9c531b1ca"))
ISketchs : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch))
    ISketchPtr Sketch[];

    //
    // Wrapper methods for error-handling
    //

    ISketchPtr GetSketch (
        const _variant_t & Index );
    ISketchPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sketch (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISketch * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISketch * * Result ) = 0;
};

struct __declspec(uuid("0d7ffe70-33eb-442c-a9b6-a205ea85a237"))
IExtrusion : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch,put=PutSketch))
    ISketchPtr Sketch;
    __declspec(property(get=GetDirection,put=PutDirection))
    ksDirectionTypeEnum Direction;
    __declspec(property(get=GetExtrusionType,put=PutExtrusionType))
    ksEndTypeEnum ExtrusionType[];
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth[];
    __declspec(property(get=GetDraftValue,put=PutDraftValue))
    double DraftValue[];
    __declspec(property(get=GetDraftOutward,put=PutDraftOutward))
    VARIANT_BOOL DraftOutward[];
    __declspec(property(get=GetDepthObject,put=PutDepthObject))
    IModelObjectPtr DepthObject[];

    //
    // Wrapper methods for error-handling
    //

    void PutSketch (
        struct ISketch * Result );
    ISketchPtr GetSketch ( );
    void PutDirection (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetDirection ( );
    void PutExtrusionType (
        VARIANT_BOOL Normal,
        ksEndTypeEnum PVal );
    ksEndTypeEnum GetExtrusionType (
        VARIANT_BOOL Normal );
    void PutDepth (
        VARIANT_BOOL Normal,
        double PVal );
    double GetDepth (
        VARIANT_BOOL Normal );
    void PutDraftValue (
        VARIANT_BOOL Normal,
        double PVal );
    double GetDraftValue (
        VARIANT_BOOL Normal );
    void PutDraftOutward (
        VARIANT_BOOL Normal,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDraftOutward (
        VARIANT_BOOL Normal );
    void PutDepthObject (
        VARIANT_BOOL Normal,
        struct IModelObject * PVal );
    IModelObjectPtr GetDepthObject (
        VARIANT_BOOL Normal );
    VARIANT_BOOL GetSideParameters (
        VARIANT_BOOL Normal,
        ksEndTypeEnum * ExtrusionType,
        double * Depth,
        double * DraftValue,
        VARIANT_BOOL * DraftOutward,
        struct IModelObject * * DepthObject );
    VARIANT_BOOL SetSideParameters (
        VARIANT_BOOL Normal,
        ksEndTypeEnum ExtrusionType,
        double Depth,
        double DraftValue,
        VARIANT_BOOL DraftOutward,
        struct IModelObject * DepthObject );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct ISketch * Result ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct ISketch * * Result ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ExtrusionType (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ ksEndTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ExtrusionType (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ ksEndTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DraftValue (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DraftValue (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DraftOutward (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DraftOutward (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DepthObject (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DepthObject (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetSideParameters (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out]*/ ksEndTypeEnum * ExtrusionType,
        /*[out]*/ double * Depth,
        /*[out]*/ double * DraftValue,
        /*[out]*/ VARIANT_BOOL * DraftOutward,
        /*[out]*/ struct IModelObject * * DepthObject,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetSideParameters (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ ksEndTypeEnum ExtrusionType,
        /*[in]*/ double Depth,
        /*[in]*/ double DraftValue,
        /*[in]*/ VARIANT_BOOL DraftOutward,
        /*[in]*/ struct IModelObject * DepthObject,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("a160c032-cf96-4467-a682-ce2243df76bd"))
IExtrusions : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetExtrusion))
    IExtrusionPtr Extrusion[];

    //
    // Wrapper methods for error-handling
    //

    IExtrusionPtr GetExtrusion (
        const _variant_t & Index );
    IExtrusionPtr Add (
        ksObj3dTypeEnum ExtrusionType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Extrusion (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IExtrusion * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum ExtrusionType,
        /*[out,retval]*/ struct IExtrusion * * Result ) = 0;
};

struct __declspec(uuid("2d8e1f2b-1610-4aa5-8f7f-ed489c4ededc"))
IRib : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch,put=PutSketch))
    ISketchPtr Sketch;
    __declspec(property(get=GetSide,put=PutSide))
    enum ksRibSideEnum Side;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetSegmentIndex,put=PutSegmentIndex))
    long SegmentIndex;
    __declspec(property(get=GetBody,put=PutBody))
    IKompasAPIObjectPtr Body;

    //
    // Wrapper methods for error-handling
    //

    ISketchPtr GetSketch ( );
    void PutSketch (
        struct ISketch * PVal );
    enum ksRibSideEnum GetSide ( );
    void PutSide (
        enum ksRibSideEnum PVal );
    double GetAngle ( );
    void PutAngle (
        double PVal );
    long GetSegmentIndex ( );
    void PutSegmentIndex (
        long PVal );
    void PutBody (
        struct IKompasAPIObject * PVal );
    IKompasAPIObjectPtr GetBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct ISketch * * PVal ) = 0;
      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct ISketch * PVal ) = 0;
      virtual HRESULT __stdcall get_Side (
        /*[out,retval]*/ enum ksRibSideEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Side (
        /*[in]*/ enum ksRibSideEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_SegmentIndex (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_SegmentIndex (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ struct IKompasAPIObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
};

struct __declspec(uuid("70ff934f-d7a2-4d91-ab55-27174e90648b"))
IRibs : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetRib))
    IRibPtr Rib[];

    //
    // Wrapper methods for error-handling
    //

    IRibPtr GetRib (
        const _variant_t & Index );
    IRibPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rib (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IRib * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IRib * * Result ) = 0;
};

struct __declspec(uuid("d2a01420-9159-48c2-8302-c1b10a13d8f8"))
ICutExtrusion : IExtrusion
{
    //
    // Property data
    //

    __declspec(property(get=GetCut,put=PutCut))
    VARIANT_BOOL Cut;

    //
    // Wrapper methods for error-handling
    //

    void PutCut (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCut ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Cut (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Cut (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("2dc533dc-829e-4eff-a905-541e9220a12d"))
ISheetMetalBody : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetThicknessDirection,put=PutThicknessDirection))
    VARIANT_BOOL ThicknessDirection;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetStraighten,put=PutStraighten))
    VARIANT_BOOL Straighten;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetUnfoldType,put=PutUnfoldType))
    enum ksUnfoldTypeEnum UnfoldType;
    __declspec(property(get=GetBendCoefficient,put=PutBendCoefficient))
    double BendCoefficient;
    __declspec(property(get=GetBendValue,put=PutBendValue))
    double BendValue;
    __declspec(property(get=GetBendReduction,put=PutBendReduction))
    double BendReduction;
    __declspec(property(get=GetBendTablePath,put=PutBendTablePath))
    _bstr_t BendTablePath;
    __declspec(property(get=GetSketch,put=PutSketch))
    ISketchPtr Sketch;
    __declspec(property(get=GetDirection,put=PutDirection))
    ksDirectionTypeEnum Direction;
    __declspec(property(get=GetExtrusionType,put=PutExtrusionType))
    ksEndTypeEnum ExtrusionType[];
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth[];
    __declspec(property(get=GetDepthObject,put=PutDepthObject))
    IModelObjectPtr DepthObject[];

    //
    // Wrapper methods for error-handling
    //

    void PutThicknessDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetThicknessDirection ( );
    void PutThickness (
        double PVal );
    double GetThickness ( );
    void PutStraighten (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStraighten ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutUnfoldType (
        enum ksUnfoldTypeEnum PVal );
    enum ksUnfoldTypeEnum GetUnfoldType ( );
    void PutBendCoefficient (
        double PVal );
    double GetBendCoefficient ( );
    void PutBendValue (
        double PVal );
    double GetBendValue ( );
    void PutBendReduction (
        double PVal );
    double GetBendReduction ( );
    void PutBendTablePath (
        _bstr_t PVal );
    _bstr_t GetBendTablePath ( );
    void PutSketch (
        struct ISketch * Result );
    ISketchPtr GetSketch ( );
    void PutDirection (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetDirection ( );
    void PutExtrusionType (
        VARIANT_BOOL Normal,
        ksEndTypeEnum PVal );
    ksEndTypeEnum GetExtrusionType (
        VARIANT_BOOL Normal );
    void PutDepth (
        VARIANT_BOOL Normal,
        double PVal );
    double GetDepth (
        VARIANT_BOOL Normal );
    void PutDepthObject (
        VARIANT_BOOL Normal,
        struct IModelObject * PVal );
    IModelObjectPtr GetDepthObject (
        VARIANT_BOOL Normal );
    VARIANT_BOOL GetSideParameters (
        VARIANT_BOOL Normal,
        ksEndTypeEnum * ExtrusionType,
        double * Depth,
        struct IModelObject * * DepthObject );
    VARIANT_BOOL SetSideParameters (
        VARIANT_BOOL Normal,
        ksEndTypeEnum ExtrusionType,
        double Depth,
        struct IModelObject * DepthObject );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ThicknessDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Straighten (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Straighten (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_UnfoldType (
        /*[in]*/ enum ksUnfoldTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_UnfoldType (
        /*[out,retval]*/ enum ksUnfoldTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BendCoefficient (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendCoefficient (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendValue (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendValue (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendReduction (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_BendReduction (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BendTablePath (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_BendTablePath (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct ISketch * Result ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct ISketch * * Result ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ExtrusionType (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ ksEndTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ExtrusionType (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ ksEndTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DepthObject (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DepthObject (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetSideParameters (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[out]*/ ksEndTypeEnum * ExtrusionType,
        /*[out]*/ double * Depth,
        /*[out]*/ struct IModelObject * * DepthObject,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetSideParameters (
        /*[in]*/ VARIANT_BOOL Normal,
        /*[in]*/ ksEndTypeEnum ExtrusionType,
        /*[in]*/ double Depth,
        /*[in]*/ struct IModelObject * DepthObject,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("f56dbe72-48cc-48ad-9da4-10d972c903ee"))
ISheetMetalBodies : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalBody))
    ISheetMetalBodyPtr SheetMetalBody[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalBodyPtr GetSheetMetalBody (
        const _variant_t & Index );
    ISheetMetalBodyPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalBody (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalBody * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalBody * * Result ) = 0;
};

struct __declspec(uuid("3490b8b8-00d7-4bcf-aad8-9487bf271084"))
ISheetMetalHole : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetCutType,put=PutCutType))
    enum ksHoleCutTypeEnum CutType;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth;
    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    IModelObjectPtr BasePlane;
    __declspec(property(get=GetDepthObject,put=PutDepthObject))
    IModelObjectPtr DepthObject;
    __declspec(property(get=GetSketch))
    ISketchPtr Sketch;
    __declspec(property(get=GetBody,put=PutBody))
    IKompasAPIObjectPtr Body;
    __declspec(property(get=GetPoint3DParamSurface))
    IKompasAPIObjectPtr Point3DParamSurface;
    __declspec(property(get=GetAssociationVertex,put=PutAssociationVertex))
    IModelObjectPtr AssociationVertex;
    __declspec(property(get=GetAxis,put=PutAxis))
    VARIANT_BOOL Axis;
    __declspec(property(get=GetPerpendicularEdge,put=PutPerpendicularEdge))
    VARIANT_BOOL PerpendicularEdge;

    //
    // Wrapper methods for error-handling
    //

    void PutX (
        double PVal );
    double GetX ( );
    void PutY (
        double PVal );
    double GetY ( );
    void PutCutType (
        enum ksHoleCutTypeEnum PVal );
    enum ksHoleCutTypeEnum GetCutType ( );
    void PutDiameter (
        double PVal );
    double GetDiameter ( );
    void PutDepth (
        double PVal );
    double GetDepth ( );
    void PutBasePlane (
        struct IModelObject * Result );
    IModelObjectPtr GetBasePlane ( );
    void PutDepthObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetDepthObject ( );
    ISketchPtr GetSketch ( );
    void PutBody (
        struct IKompasAPIObject * PVal );
    IKompasAPIObjectPtr GetBody ( );
    IKompasAPIObjectPtr GetPoint3DParamSurface ( );
    IModelObjectPtr GetAssociationVertex ( );
    void PutAssociationVertex (
        struct IModelObject * PVal );
    VARIANT_BOOL GetAxis ( );
    void PutAxis (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPerpendicularEdge ( );
    void PutPerpendicularEdge (
        VARIANT_BOOL PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_CutType (
        /*[in]*/ enum ksHoleCutTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CutType (
        /*[out,retval]*/ enum ksHoleCutTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ struct IModelObject * Result ) = 0;
      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_DepthObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DepthObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct ISketch * * PVal ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ struct IKompasAPIObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_Point3DParamSurface (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
      virtual HRESULT __stdcall get_AssociationVertex (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_AssociationVertex (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_PerpendicularEdge (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_PerpendicularEdge (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
};

struct __declspec(uuid("e117bdf9-5133-4672-9b8f-06046f6b9bf3"))
ISheetMetalHoles : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalHole))
    ISheetMetalHolePtr SheetMetalHole[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalHolePtr GetSheetMetalHole (
        const _variant_t & Index );
    ISheetMetalHolePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalHole (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalHole * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalHole * * Result ) = 0;
};

struct __declspec(uuid("b50b1730-bacf-46f2-b10a-6ccdf4e4a2b1"))
ISheetMetalCut : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch,put=PutSketch))
    ISketchPtr Sketch;
    __declspec(property(get=GetCutType,put=PutCutType))
    enum ksHoleCutTypeEnum CutType;
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth;
    __declspec(property(get=GetDepthObject,put=PutDepthObject))
    IModelObjectPtr DepthObject;
    __declspec(property(get=GetCut,put=PutCut))
    VARIANT_BOOL Cut;
    __declspec(property(get=GetBody,put=PutBody))
    IKompasAPIObjectPtr Body;

    //
    // Wrapper methods for error-handling
    //

    void PutSketch (
        struct ISketch * Result );
    ISketchPtr GetSketch ( );
    void PutCutType (
        enum ksHoleCutTypeEnum PVal );
    enum ksHoleCutTypeEnum GetCutType ( );
    void PutDepth (
        double PVal );
    double GetDepth ( );
    void PutDepthObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetDepthObject ( );
    void PutCut (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCut ( );
    void PutBody (
        struct IKompasAPIObject * PVal );
    IKompasAPIObjectPtr GetBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct ISketch * Result ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct ISketch * * Result ) = 0;
      virtual HRESULT __stdcall put_CutType (
        /*[in]*/ enum ksHoleCutTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CutType (
        /*[out,retval]*/ enum ksHoleCutTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DepthObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DepthObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Cut (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Cut (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ struct IKompasAPIObject * PVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IKompasAPIObject * * PVal ) = 0;
};

struct __declspec(uuid("9515e4bb-7c60-4c3a-af7a-847861e67b55"))
ISheetMetalCuts : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalCut))
    ISheetMetalCutPtr SheetMetalCut[];

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalCutPtr GetSheetMetalCut (
        const _variant_t & Index );
    ISheetMetalCutPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalCut (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISheetMetalCut * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISheetMetalCut * * Result ) = 0;
};

struct __declspec(uuid("77a4895d-9b09-4c63-a3ff-6857f4340840"))
ISheetMetalContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetMetalPlates))
    ISheetMetalPlatesPtr SheetMetalPlates;
    __declspec(property(get=GetSheetMetalUndercuts))
    ISheetMetalLineBendsPtr SheetMetalUndercuts;
    __declspec(property(get=GetSheetMetalBendedStraightens))
    ISheetMetalBendedStraightensPtr SheetMetalBendedStraightens;
    __declspec(property(get=GetSheetMetalBendUnfoldParameters))
    ISheetMetalBendUnfoldParametersPtr SheetMetalBendUnfoldParameters;
    __declspec(property(get=GetSheetMetalPressFormings))
    ISheetMetalPressFormingsPtr SheetMetalPressFormings;
    __declspec(property(get=GetSheetMetalShoulders))
    ISheetMetalShouldersPtr SheetMetalShoulders;
    __declspec(property(get=GetSheetMetalJalousies))
    ISheetMetalJalousiesPtr SheetMetalJalousies;
    __declspec(property(get=GetSheetMetalRibs))
    ISheetMetalRibsPtr SheetMetalRibs;
    __declspec(property(get=GetSheetMetalRuledShells))
    ISheetMetalBodiesPtr SheetMetalRuledShells;
    __declspec(property(get=GetSheetMetalLinearRuledShells))
    ISheetMetalBodiesPtr SheetMetalLinearRuledShells;
    __declspec(property(get=GetSheetMetalPunchs))
    ISheetMetalPunchsPtr SheetMetalPunchs;
    __declspec(property(get=GetSheetMetalFlangings))
    ISheetMetalBendsPtr SheetMetalFlangings;
    __declspec(property(get=GetSheetMetalBodies))
    ISheetMetalBodiesPtr SheetMetalBodies;
    __declspec(property(get=GetSheetMetalBends))
    ISheetMetalBendsPtr SheetMetalBends;
    __declspec(property(get=GetSheetMetalLineBends))
    ISheetMetalLineBendsPtr SheetMetalLineBends;
    __declspec(property(get=GetSheetMetalHoles))
    ISheetMetalHolesPtr SheetMetalHoles;
    __declspec(property(get=GetSheetMetalCuts))
    ISheetMetalCutsPtr SheetMetalCuts;
    __declspec(property(get=GetSheetMetalSketchBends))
    ISheetMetalSketchBendsPtr SheetMetalSketchBends;
    __declspec(property(get=GetSheetMetalClosedCorners))
    ISheetMetalClosedCornersPtr SheetMetalClosedCorners;

    //
    // Wrapper methods for error-handling
    //

    ISheetMetalBodiesPtr GetSheetMetalBodies ( );
    ISheetMetalBendsPtr GetSheetMetalBends ( );
    ISheetMetalLineBendsPtr GetSheetMetalLineBends ( );
    ISheetMetalHolesPtr GetSheetMetalHoles ( );
    ISheetMetalCutsPtr GetSheetMetalCuts ( );
    ISheetMetalSketchBendsPtr GetSheetMetalSketchBends ( );
    ISheetMetalClosedCornersPtr GetSheetMetalClosedCorners ( );
    ISheetMetalPlatesPtr GetSheetMetalPlates ( );
    ISheetMetalLineBendsPtr GetSheetMetalUndercuts ( );
    ISheetMetalBendedStraightensPtr GetSheetMetalBendedStraightens ( );
    ISheetMetalBendUnfoldParametersPtr GetSheetMetalBendUnfoldParameters ( );
    ISheetMetalPressFormingsPtr GetSheetMetalPressFormings ( );
    ISheetMetalShouldersPtr GetSheetMetalShoulders ( );
    ISheetMetalJalousiesPtr GetSheetMetalJalousies ( );
    ISheetMetalRibsPtr GetSheetMetalRibs ( );
    ISheetMetalBodiesPtr GetSheetMetalRuledShells ( );
    ISheetMetalBodiesPtr GetSheetMetalLinearRuledShells ( );
    ISheetMetalPunchsPtr GetSheetMetalPunchs ( );
    ISheetMetalBendsPtr GetSheetMetalFlangings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SheetMetalBodies (
        /*[out,retval]*/ struct ISheetMetalBodies * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalBends (
        /*[out,retval]*/ struct ISheetMetalBends * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalLineBends (
        /*[out,retval]*/ struct ISheetMetalLineBends * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalHoles (
        /*[out,retval]*/ struct ISheetMetalHoles * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalCuts (
        /*[out,retval]*/ struct ISheetMetalCuts * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalSketchBends (
        /*[out,retval]*/ struct ISheetMetalSketchBends * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalClosedCorners (
        /*[out,retval]*/ struct ISheetMetalClosedCorners * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalPlates (
        /*[out,retval]*/ struct ISheetMetalPlates * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalUndercuts (
        /*[out,retval]*/ struct ISheetMetalLineBends * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalBendedStraightens (
        /*[out,retval]*/ struct ISheetMetalBendedStraightens * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalBendUnfoldParameters (
        /*[out,retval]*/ struct ISheetMetalBendUnfoldParameters * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalPressFormings (
        /*[out,retval]*/ struct ISheetMetalPressFormings * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalShoulders (
        /*[out,retval]*/ struct ISheetMetalShoulders * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalJalousies (
        /*[out,retval]*/ struct ISheetMetalJalousies * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalRibs (
        /*[out,retval]*/ struct ISheetMetalRibs * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalRuledShells (
        /*[out,retval]*/ struct ISheetMetalBodies * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalLinearRuledShells (
        /*[out,retval]*/ struct ISheetMetalBodies * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalPunchs (
        /*[out,retval]*/ struct ISheetMetalPunchs * * PVal ) = 0;
      virtual HRESULT __stdcall get_SheetMetalFlangings (
        /*[out,retval]*/ struct ISheetMetalBends * * PVal ) = 0;
};

struct __declspec(uuid("969b49d1-e660-4e94-9343-de5b0f397b03"))
ISplitLine : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch,put=PutSketch))
    ISketchPtr Sketch;
    __declspec(property(get=GetFaces,put=PutFaces))
    _variant_t Faces;
    __declspec(property(get=GetDirection,put=PutDirection))
    ksDirectionTypeEnum Direction;
    __declspec(property(get=GetCutObjects,put=PutCutObjects))
    _variant_t CutObjects;

    //
    // Wrapper methods for error-handling
    //

    void PutSketch (
        struct ISketch * Result );
    ISketchPtr GetSketch ( );
    _variant_t GetFaces ( );
    void PutFaces (
        const _variant_t & PVal );
    void PutDirection (
        ksDirectionTypeEnum PVal );
    ksDirectionTypeEnum GetDirection ( );
    void PutCutObjects (
        const _variant_t & Result );
    _variant_t GetCutObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Sketch (
        /*[in]*/ struct ISketch * Result ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct ISketch * * Result ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall put_Faces (
        /*[in]*/ VARIANT PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ ksDirectionTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ ksDirectionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CutObjects (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_CutObjects (
        /*[out,retval]*/ VARIANT * Result ) = 0;
};

struct __declspec(uuid("986e4a45-362f-469d-a3ae-ce081b8ea93a"))
ISplitLines : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSplitLine))
    ISplitLinePtr SplitLine[];

    //
    // Wrapper methods for error-handling
    //

    ISplitLinePtr GetSplitLine (
        const _variant_t & Index );
    ISplitLinePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SplitLine (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISplitLine * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ISplitLine * * Result ) = 0;
};

struct __declspec(uuid("8c428c5d-37ef-43a3-8815-410f177d3577"))
ISpiral3D : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetTurnsCount,put=PutTurnsCount))
    double TurnsCount;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetTurnDirection,put=PutTurnDirection))
    VARIANT_BOOL TurnDirection;
    __declspec(property(get=GetBasePlane,put=PutBasePlane))
    IModelObjectPtr BasePlane;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksSpline3DBuildingTypeEnum BuildingType;
    __declspec(property(get=GetBuildingDirection,put=PutBuildingDirection))
    VARIANT_BOOL BuildingDirection;
    __declspec(property(get=GetHeightType,put=PutHeightType))
    enum ksSpiral3DHeightTypeEnum HeightType;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetHeightBaseObject,put=PutHeightBaseObject))
    IModelObjectPtr HeightBaseObject;
    __declspec(property(get=GetHeightCorrection,put=PutHeightCorrection))
    double HeightCorrection;
    __declspec(property(get=GetTurningAngle,put=PutTurningAngle))
    double TurningAngle;
    __declspec(property(get=GetSketch))
    ISketchPtr Sketch;

    //
    // Wrapper methods for error-handling
    //

    void PutTurnsCount (
        double PVal );
    double GetTurnsCount ( );
    void PutStep (
        double PVal );
    double GetStep ( );
    void PutTurnDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetTurnDirection ( );
    void PutBasePlane (
        struct IModelObject * PVal );
    IModelObjectPtr GetBasePlane ( );
    VARIANT_BOOL GetBasePoint (
        double * X,
        double * Y );
    VARIANT_BOOL SetBasePoint (
        double X,
        double Y );
    void PutBuildingType (
        enum ksSpline3DBuildingTypeEnum Result );
    enum ksSpline3DBuildingTypeEnum GetBuildingType ( );
    void PutBuildingDirection (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetBuildingDirection ( );
    void PutHeightType (
        enum ksSpiral3DHeightTypeEnum PVal );
    enum ksSpiral3DHeightTypeEnum GetHeightType ( );
    void PutHeight (
        double PVal );
    double GetHeight ( );
    void PutHeightBaseObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetHeightBaseObject ( );
    void PutHeightCorrection (
        double PVal );
    double GetHeightCorrection ( );
    void PutTurningAngle (
        double PVal );
    double GetTurningAngle ( );
    ISketchPtr GetSketch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_TurnsCount (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TurnsCount (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TurnDirection (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_TurnDirection (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BasePlane (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_BasePlane (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetBasePoint (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetBasePoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksSpline3DBuildingTypeEnum Result ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksSpline3DBuildingTypeEnum * Result ) = 0;
      virtual HRESULT __stdcall put_BuildingDirection (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_BuildingDirection (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_HeightType (
        /*[in]*/ enum ksSpiral3DHeightTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_HeightType (
        /*[out,retval]*/ enum ksSpiral3DHeightTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_HeightBaseObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_HeightBaseObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_HeightCorrection (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_HeightCorrection (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_TurningAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_TurningAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct ISketch * * PVal ) = 0;
};

struct __declspec(uuid("afa7329d-e69c-4980-b3b3-8a2aa39de979"))
ISpirals3D : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetSpiral3D))
    ISpiral3DPtr Spiral3D[];

    //
    // Wrapper methods for error-handling
    //

    ISpiral3DPtr GetSpiral3D (
        const _variant_t & Index );
    ISpiral3DPtr Add (
        ksObj3dTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Spiral3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ISpiral3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ ksObj3dTypeEnum Type,
        /*[out,retval]*/ struct ISpiral3D * * Result ) = 0;
};

struct __declspec(uuid("950febe2-f916-4e77-a37d-b061e5c22fa8"))
IAuxiliaryGeomContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalCoordinateSystems))
    ILocalCoordinateSystemsPtr LocalCoordinateSystems;
    __declspec(property(get=GetSplines3D))
    ISplines3DPtr Splines3D;
    __declspec(property(get=GetPolyLines))
    IPolyLinesPtr PolyLines;
    __declspec(property(get=GetControlPoints))
    IControlPointsPtr ControlPoints;
    __declspec(property(get=GetConjunctivePoints))
    IConjunctivePointsPtr ConjunctivePoints;
    __declspec(property(get=GetSplitLines))
    ISplitLinesPtr SplitLines;
    __declspec(property(get=GetSurfacesIntersectionCurves))
    ISurfacesIntersectionCurvesPtr SurfacesIntersectionCurves;
    __declspec(property(get=GetEquidistants3D))
    IEquidistants3DPtr Equidistants3D;
    __declspec(property(get=GetTrimmedCurves))
    ITrimmedCurvesPtr TrimmedCurves;
    __declspec(property(get=GetConnectCurves))
    IConnectCurvesPtr ConnectCurves;
    __declspec(property(get=GetFilletCurves))
    IFilletCurvesPtr FilletCurves;
    __declspec(property(get=GetArcs3D))
    IArcs3DPtr Arcs3D;
    __declspec(property(get=GetCurveOutLines))
    ICurveOutLinesPtr CurveOutLines;
    __declspec(property(get=GetCurveByLaws))
    ICurveByLawsPtr CurveByLaws;
    __declspec(property(get=GetIsoparametricCurves))
    IIsoparametricCurvesPtr IsoparametricCurves;
    __declspec(property(get=GetIsoparametricCurvesSets))
    IIsoparametricCurvesSetsPtr IsoparametricCurvesSets;
    __declspec(property(get=GetSplinesOnSurfaces))
    ISplinesOnSurfacesPtr SplinesOnSurfaces;
    __declspec(property(get=GetProjectionCurves))
    IProjectionCurvesPtr ProjectionCurves;
    __declspec(property(get=GetCurvesBy2Projectionses))
    ICurvesBy2ProjectionsesPtr CurvesBy2Projectionses;
    __declspec(property(get=GetContours3D))
    IContours3DPtr Contours3D;
    __declspec(property(get=GetLineSegments3D))
    ILineSegments3DPtr LineSegments3D;
    __declspec(property(get=GetUnhistoredCurves3D))
    IUnhistoredCurves3DPtr UnhistoredCurves3D;
    __declspec(property(get=GetSpirals3D))
    ISpirals3DPtr Spirals3D;
    __declspec(property(get=GetPointsArrsOnCurves))
    IPointsArrsOnCurvesPtr PointsArrsOnCurves;
    __declspec(property(get=GetPointsArrsOnSurfaces))
    IPointsArrsOnSurfacesPtr PointsArrsOnSurfaces;
    __declspec(property(get=GetPointsArrsFromFiles))
    IPointsArrsFromFilesPtr PointsArrsFromFiles;
    __declspec(property(get=GetAxes3D))
    IAxes3DPtr Axes3D;
    __declspec(property(get=GetPlanes3D))
    IPlanes3DPtr Planes3D;

    //
    // Wrapper methods for error-handling
    //

    ILocalCoordinateSystemsPtr GetLocalCoordinateSystems ( );
    ISplines3DPtr GetSplines3D ( );
    IPolyLinesPtr GetPolyLines ( );
    IControlPointsPtr GetControlPoints ( );
    IConjunctivePointsPtr GetConjunctivePoints ( );
    ISplitLinesPtr GetSplitLines ( );
    ISurfacesIntersectionCurvesPtr GetSurfacesIntersectionCurves ( );
    IEquidistants3DPtr GetEquidistants3D ( );
    ITrimmedCurvesPtr GetTrimmedCurves ( );
    IConnectCurvesPtr GetConnectCurves ( );
    IFilletCurvesPtr GetFilletCurves ( );
    IArcs3DPtr GetArcs3D ( );
    ICurveOutLinesPtr GetCurveOutLines ( );
    ICurveByLawsPtr GetCurveByLaws ( );
    IIsoparametricCurvesPtr GetIsoparametricCurves ( );
    IIsoparametricCurvesSetsPtr GetIsoparametricCurvesSets ( );
    ISplinesOnSurfacesPtr GetSplinesOnSurfaces ( );
    IProjectionCurvesPtr GetProjectionCurves ( );
    ICurvesBy2ProjectionsesPtr GetCurvesBy2Projectionses ( );
    IContours3DPtr GetContours3D ( );
    ILineSegments3DPtr GetLineSegments3D ( );
    IUnhistoredCurves3DPtr GetUnhistoredCurves3D ( );
    ISpirals3DPtr GetSpirals3D ( );
    IPointsArrsOnCurvesPtr GetPointsArrsOnCurves ( );
    IPointsArrsOnSurfacesPtr GetPointsArrsOnSurfaces ( );
    IPointsArrsFromFilesPtr GetPointsArrsFromFiles ( );
    IAxes3DPtr GetAxes3D ( );
    IPlanes3DPtr GetPlanes3D ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocalCoordinateSystems (
        /*[out,retval]*/ struct ILocalCoordinateSystems * * PVal ) = 0;
      virtual HRESULT __stdcall get_Splines3D (
        /*[out,retval]*/ struct ISplines3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_PolyLines (
        /*[out,retval]*/ struct IPolyLines * * PVal ) = 0;
      virtual HRESULT __stdcall get_ControlPoints (
        /*[out,retval]*/ struct IControlPoints * * PVal ) = 0;
      virtual HRESULT __stdcall get_ConjunctivePoints (
        /*[out,retval]*/ struct IConjunctivePoints * * PVal ) = 0;
      virtual HRESULT __stdcall get_SplitLines (
        /*[out,retval]*/ struct ISplitLines * * PVal ) = 0;
      virtual HRESULT __stdcall get_SurfacesIntersectionCurves (
        /*[out,retval]*/ struct ISurfacesIntersectionCurves * * PVal ) = 0;
      virtual HRESULT __stdcall get_Equidistants3D (
        /*[out,retval]*/ struct IEquidistants3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_TrimmedCurves (
        /*[out,retval]*/ struct ITrimmedCurves * * PVal ) = 0;
      virtual HRESULT __stdcall get_ConnectCurves (
        /*[out,retval]*/ struct IConnectCurves * * PVal ) = 0;
      virtual HRESULT __stdcall get_FilletCurves (
        /*[out,retval]*/ struct IFilletCurves * * PVal ) = 0;
      virtual HRESULT __stdcall get_Arcs3D (
        /*[out,retval]*/ struct IArcs3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_CurveOutLines (
        /*[out,retval]*/ struct ICurveOutLines * * PVal ) = 0;
      virtual HRESULT __stdcall get_CurveByLaws (
        /*[out,retval]*/ struct ICurveByLaws * * PVal ) = 0;
      virtual HRESULT __stdcall get_IsoparametricCurves (
        /*[out,retval]*/ struct IIsoparametricCurves * * PVal ) = 0;
      virtual HRESULT __stdcall get_IsoparametricCurvesSets (
        /*[out,retval]*/ struct IIsoparametricCurvesSets * * PVal ) = 0;
      virtual HRESULT __stdcall get_SplinesOnSurfaces (
        /*[out,retval]*/ struct ISplinesOnSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionCurves (
        /*[out,retval]*/ struct IProjectionCurves * * PVal ) = 0;
      virtual HRESULT __stdcall get_CurvesBy2Projectionses (
        /*[out,retval]*/ struct ICurvesBy2Projectionses * * PVal ) = 0;
      virtual HRESULT __stdcall get_Contours3D (
        /*[out,retval]*/ struct IContours3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_LineSegments3D (
        /*[out,retval]*/ struct ILineSegments3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_UnhistoredCurves3D (
        /*[out,retval]*/ struct IUnhistoredCurves3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Spirals3D (
        /*[out,retval]*/ struct ISpirals3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_PointsArrsOnCurves (
        /*[out,retval]*/ struct IPointsArrsOnCurves * * PVal ) = 0;
      virtual HRESULT __stdcall get_PointsArrsOnSurfaces (
        /*[out,retval]*/ struct IPointsArrsOnSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_PointsArrsFromFiles (
        /*[out,retval]*/ struct IPointsArrsFromFiles * * PVal ) = 0;
      virtual HRESULT __stdcall get_Axes3D (
        /*[out,retval]*/ struct IAxes3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Planes3D (
        /*[out,retval]*/ struct IPlanes3D * * PVal ) = 0;
};

struct __declspec(uuid("2fe3b199-a6b2-4644-9950-f9905250ff0d"))
ISurfaceContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExtensionSurfaces))
    IExtensionSurfacesPtr ExtensionSurfaces;
    __declspec(property(get=GetExtrusionSurfaces))
    IExtrusionsPtr ExtrusionSurfaces;
    __declspec(property(get=GetRotatedSurfaces))
    IRotatedsPtr RotatedSurfaces;
    __declspec(property(get=GetMeshPointsSurfaces))
    IMeshPointsSurfacesPtr MeshPointsSurfaces;
    __declspec(property(get=GetCloudPointsSurfaces))
    ICloudPointsSurfacesPtr CloudPointsSurfaces;
    __declspec(property(get=GetImportedSurfaces))
    IImportedSurfacesPtr ImportedSurfaces;
    __declspec(property(get=GetLoftSurfaces))
    ILoftsPtr LoftSurfaces;
    __declspec(property(get=GetEvolutionSurfaces))
    IEvolutionsPtr EvolutionSurfaces;
    __declspec(property(get=GetNurbsSurfacesByCurvesMeshs))
    INurbsSurfacesByCurvesMeshsPtr NurbsSurfacesByCurvesMeshs;
    __declspec(property(get=GetJointSurfaces))
    IJointSurfacesPtr JointSurfaces;
    __declspec(property(get=GetRestoredSurfaces))
    IRestoredSurfacesPtr RestoredSurfaces;
    __declspec(property(get=GetFaceMovers))
    IFaceMoversPtr FaceMovers;
    __declspec(property(get=GetSurfacePatches))
    ISurfacePatchesPtr SurfacePatches;
    __declspec(property(get=GetFaceRemovers))
    IFaceRemoversPtr FaceRemovers;
    __declspec(property(get=GetSurfaceSewers))
    ISurfaceSewersPtr SurfaceSewers;
    __declspec(property(get=GetNurbsSurfaces))
    INurbsSurfacesPtr NurbsSurfaces;
    __declspec(property(get=GetRuledSurfaces))
    IRuledSurfacesPtr RuledSurfaces;
    __declspec(property(get=GetEquidistantSurfaces))
    IEquidistantSurfacesPtr EquidistantSurfaces;
    __declspec(property(get=GetTrimmedSurfaces))
    ITrimmedSurfacesPtr TrimmedSurfaces;

    //
    // Wrapper methods for error-handling
    //

    ISurfacePatchesPtr GetSurfacePatches ( );
    IFaceRemoversPtr GetFaceRemovers ( );
    ISurfaceSewersPtr GetSurfaceSewers ( );
    INurbsSurfacesPtr GetNurbsSurfaces ( );
    IRuledSurfacesPtr GetRuledSurfaces ( );
    IEquidistantSurfacesPtr GetEquidistantSurfaces ( );
    ITrimmedSurfacesPtr GetTrimmedSurfaces ( );
    IExtensionSurfacesPtr GetExtensionSurfaces ( );
    IExtrusionsPtr GetExtrusionSurfaces ( );
    IRotatedsPtr GetRotatedSurfaces ( );
    IMeshPointsSurfacesPtr GetMeshPointsSurfaces ( );
    ICloudPointsSurfacesPtr GetCloudPointsSurfaces ( );
    IImportedSurfacesPtr GetImportedSurfaces ( );
    ILoftsPtr GetLoftSurfaces ( );
    IEvolutionsPtr GetEvolutionSurfaces ( );
    INurbsSurfacesByCurvesMeshsPtr GetNurbsSurfacesByCurvesMeshs ( );
    IJointSurfacesPtr GetJointSurfaces ( );
    IRestoredSurfacesPtr GetRestoredSurfaces ( );
    IFaceMoversPtr GetFaceMovers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SurfacePatches (
        /*[out,retval]*/ struct ISurfacePatches * * PVal ) = 0;
      virtual HRESULT __stdcall get_FaceRemovers (
        /*[out,retval]*/ struct IFaceRemovers * * PVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceSewers (
        /*[out,retval]*/ struct ISurfaceSewers * * PVal ) = 0;
      virtual HRESULT __stdcall get_NurbsSurfaces (
        /*[out,retval]*/ struct INurbsSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_RuledSurfaces (
        /*[out,retval]*/ struct IRuledSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_EquidistantSurfaces (
        /*[out,retval]*/ struct IEquidistantSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_TrimmedSurfaces (
        /*[out,retval]*/ struct ITrimmedSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_ExtensionSurfaces (
        /*[out,retval]*/ struct IExtensionSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_ExtrusionSurfaces (
        /*[out,retval]*/ struct IExtrusions * * PVal ) = 0;
      virtual HRESULT __stdcall get_RotatedSurfaces (
        /*[out,retval]*/ struct IRotateds * * PVal ) = 0;
      virtual HRESULT __stdcall get_MeshPointsSurfaces (
        /*[out,retval]*/ struct IMeshPointsSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_CloudPointsSurfaces (
        /*[out,retval]*/ struct ICloudPointsSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_ImportedSurfaces (
        /*[out,retval]*/ struct IImportedSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_LoftSurfaces (
        /*[out,retval]*/ struct ILofts * * PVal ) = 0;
      virtual HRESULT __stdcall get_EvolutionSurfaces (
        /*[out,retval]*/ struct IEvolutions * * PVal ) = 0;
      virtual HRESULT __stdcall get_NurbsSurfacesByCurvesMeshs (
        /*[out,retval]*/ struct INurbsSurfacesByCurvesMeshs * * PVal ) = 0;
      virtual HRESULT __stdcall get_JointSurfaces (
        /*[out,retval]*/ struct IJointSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_RestoredSurfaces (
        /*[out,retval]*/ struct IRestoredSurfaces * * PVal ) = 0;
      virtual HRESULT __stdcall get_FaceMovers (
        /*[out,retval]*/ struct IFaceMovers * * PVal ) = 0;
};

struct __declspec(uuid("b505b91c-3444-4f7d-b987-5bb554932362"))
IExtrusionSurface : IExtrusion
{
    //
    // Property data
    //

    __declspec(property(get=GetClosedShell,put=PutClosedShell))
    VARIANT_BOOL ClosedShell;

    //
    // Wrapper methods for error-handling
    //

    void PutClosedShell (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetClosedShell ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ClosedShell (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ClosedShell (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("086df000-a37d-4296-93fb-2129d0b1df13"))
IConicSpiral3D : ISpiral3D
{
    //
    // Property data
    //

    __declspec(property(get=GetDiameter1,put=PutDiameter1))
    double Diameter1;
    __declspec(property(get=GetDiameterType1,put=PutDiameterType1))
    enum ksSpline3DDiameterTypeEnum DiameterType1;
    __declspec(property(get=GetDiameterBaseObject1,put=PutDiameterBaseObject1))
    IModelObjectPtr DiameterBaseObject1;
    __declspec(property(get=GetDiameter2,put=PutDiameter2))
    double Diameter2;
    __declspec(property(get=GetDiameterType2,put=PutDiameterType2))
    enum ksSpline3DDiameterTypeEnum DiameterType2;
    __declspec(property(get=GetDiameterBaseObject2,put=PutDiameterBaseObject2))
    IModelObjectPtr DiameterBaseObject2;
    __declspec(property(get=GetGeneratrixTiltAngle,put=PutGeneratrixTiltAngle))
    double GeneratrixTiltAngle;
    __declspec(property(get=GetGeneratrixTiltAngleHow,put=PutGeneratrixTiltAngleHow))
    VARIANT_BOOL GeneratrixTiltAngleHow;
    __declspec(property(get=GetHeightCorrectionType,put=PutHeightCorrectionType))
    VARIANT_BOOL HeightCorrectionType;

    //
    // Wrapper methods for error-handling
    //

    void PutDiameter1 (
        double PVal );
    double GetDiameter1 ( );
    void PutDiameterType1 (
        enum ksSpline3DDiameterTypeEnum PVal );
    enum ksSpline3DDiameterTypeEnum GetDiameterType1 ( );
    void PutDiameterBaseObject1 (
        struct IModelObject * PVal );
    IModelObjectPtr GetDiameterBaseObject1 ( );
    void PutDiameter2 (
        double PVal );
    double GetDiameter2 ( );
    void PutDiameterType2 (
        enum ksSpline3DDiameterTypeEnum PVal );
    enum ksSpline3DDiameterTypeEnum GetDiameterType2 ( );
    void PutDiameterBaseObject2 (
        struct IModelObject * PVal );
    IModelObjectPtr GetDiameterBaseObject2 ( );
    void PutGeneratrixTiltAngle (
        double PVal );
    double GetGeneratrixTiltAngle ( );
    void PutGeneratrixTiltAngleHow (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetGeneratrixTiltAngleHow ( );
    void PutHeightCorrectionType (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHeightCorrectionType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Diameter1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Diameter1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DiameterType1 (
        /*[in]*/ enum ksSpline3DDiameterTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DiameterType1 (
        /*[out,retval]*/ enum ksSpline3DDiameterTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DiameterBaseObject1 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DiameterBaseObject1 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_Diameter2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Diameter2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DiameterType2 (
        /*[in]*/ enum ksSpline3DDiameterTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DiameterType2 (
        /*[out,retval]*/ enum ksSpline3DDiameterTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DiameterBaseObject2 (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DiameterBaseObject2 (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_GeneratrixTiltAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_GeneratrixTiltAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_GeneratrixTiltAngleHow (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_GeneratrixTiltAngleHow (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HeightCorrectionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HeightCorrectionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("529de4b2-3130-4c96-b230-32db100bcfac"))
ICylindricSpiral3D : ISpiral3D
{
    //
    // Property data
    //

    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetDiameterType,put=PutDiameterType))
    enum ksSpline3DDiameterTypeEnum DiameterType;
    __declspec(property(get=GetDiameterBaseObject,put=PutDiameterBaseObject))
    IModelObjectPtr DiameterBaseObject;
    __declspec(property(get=GetHeightCorrectionType,put=PutHeightCorrectionType))
    VARIANT_BOOL HeightCorrectionType;

    //
    // Wrapper methods for error-handling
    //

    void PutDiameter (
        double PVal );
    double GetDiameter ( );
    void PutDiameterType (
        enum ksSpline3DDiameterTypeEnum PVal );
    enum ksSpline3DDiameterTypeEnum GetDiameterType ( );
    void PutDiameterBaseObject (
        struct IModelObject * PVal );
    IModelObjectPtr GetDiameterBaseObject ( );
    void PutHeightCorrectionType (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHeightCorrectionType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DiameterType (
        /*[in]*/ enum ksSpline3DDiameterTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_DiameterType (
        /*[out,retval]*/ enum ksSpline3DDiameterTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DiameterBaseObject (
        /*[in]*/ struct IModelObject * PVal ) = 0;
      virtual HRESULT __stdcall get_DiameterBaseObject (
        /*[out,retval]*/ struct IModelObject * * PVal ) = 0;
      virtual HRESULT __stdcall put_HeightCorrectionType (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HeightCorrectionType (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("b9e9ce68-371d-4600-9233-84d89a015c55"))
IInsertionObject : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetInsertionType))
    enum ksInsertionTypeEnum InsertionType;
    __declspec(property(get=GetDimensionLineScale,put=PutDimensionLineScale))
    VARIANT_BOOL DimensionLineScale;
    __declspec(property(get=GetInsertionDefinition,put=PutInsertionDefinition))
    IInsertionDefinitionPtr InsertionDefinition;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPlacement (
        double * X,
        double * Y,
        double * Angle,
        VARIANT_BOOL * MirrorSymmetry );
    VARIANT_BOOL SetPlacement (
        double X,
        double Y,
        double Angle,
        VARIANT_BOOL MirrorSymmetry );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    _bstr_t GetFileName ( );
    enum ksInsertionTypeEnum GetInsertionType ( );
    void PutDimensionLineScale (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDimensionLineScale ( );
    IInsertionDefinitionPtr GetInsertionDefinition ( );
    void PutInsertionDefinition (
        struct IInsertionDefinition * PVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPlacement (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Angle,
        /*[out]*/ VARIANT_BOOL * MirrorSymmetry,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_SetPlacement (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Angle,
        /*[in]*/ VARIANT_BOOL MirrorSymmetry,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionType (
        /*[out,retval]*/ enum ksInsertionTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_DimensionLineScale (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DimensionLineScale (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionDefinition (
        /*[out,retval]*/ struct IInsertionDefinition * * PVal ) = 0;
      virtual HRESULT __stdcall put_InsertionDefinition (
        /*[in]*/ struct IInsertionDefinition * PVal ) = 0;
};

struct __declspec(uuid("c485550b-29e3-4f2a-a85c-c2795e0f1f86"))
IInsertionObjects : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionObject))
    IInsertionObjectPtr InsertionObject[];

    //
    // Wrapper methods for error-handling
    //

    IInsertionObjectPtr GetInsertionObject (
        const _variant_t & Index );
    IInsertionObjectPtr Add (
        struct IInsertionDefinition * Definition );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InsertionObject (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IInsertionObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IInsertionDefinition * Definition,
        /*[out,retval]*/ struct IInsertionObject * * Result ) = 0;
};

struct __declspec(uuid("d603fec9-75b7-4fa5-918f-47074c45b848"))
IDrawingContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEllipses))
    IEllipsesPtr Ellipses;
    __declspec(property(get=GetEllipseArcs))
    IEllipseArcsPtr EllipseArcs;
    __declspec(property(get=GetRectangles))
    IRectanglesPtr Rectangles;
    __declspec(property(get=GetRegularPolygons))
    IRegularPolygonsPtr RegularPolygons;
    __declspec(property(get=GetEquidistants))
    IEquidistantsPtr Equidistants;
    __declspec(property(get=GetInsertionObjects))
    IInsertionObjectsPtr InsertionObjects;
    __declspec(property(get=GetHatches))
    IHatchesPtr Hatches;
    __declspec(property(get=GetColourings))
    IColouringsPtr Colourings;
    __declspec(property(get=GetNurbsesByPoints))
    INurbsesPtr NurbsesByPoints;
    __declspec(property(get=GetConicCurves))
    IConicCurvesPtr ConicCurves;
    __declspec(property(get=GetObjects))
    _variant_t Objects[];
    __declspec(property(get=GetDrawingTexts))
    IDrawingTextsPtr DrawingTexts;
    __declspec(property(get=GetLineSegments))
    ILineSegmentsPtr LineSegments;
    __declspec(property(get=GetArcs))
    IArcsPtr Arcs;
    __declspec(property(get=GetMultilines))
    IMultilinesPtr Multilines;
    __declspec(property(get=GetDrawingContours))
    IDrawingContoursPtr DrawingContours;
    __declspec(property(get=GetCircles))
    ICirclesPtr Circles;
    __declspec(property(get=GetPoints))
    IPointsPtr Points;
    __declspec(property(get=GetBeziers))
    IBeziersPtr Beziers;
    __declspec(property(get=GetMacroObjects))
    IMacroObjectsPtr MacroObjects;
    __declspec(property(get=GetLines))
    ILinesPtr Lines;
    __declspec(property(get=GetPolyLines2D))
    IPolyLines2DPtr PolyLines2D;
    __declspec(property(get=GetNurbses))
    INurbsesPtr Nurbses;
    __declspec(property(get=GetRasters))
    IRastersPtr Rasters;
    __declspec(property(get=GetOleDrawingObjects))
    IOleDrawingObjectsPtr OleDrawingObjects;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetObjects (
        const _variant_t & ObjType );
    IDrawingTextsPtr GetDrawingTexts ( );
    ILineSegmentsPtr GetLineSegments ( );
    IArcsPtr GetArcs ( );
    IMultilinesPtr GetMultilines ( );
    IDrawingContoursPtr GetDrawingContours ( );
    ICirclesPtr GetCircles ( );
    IPointsPtr GetPoints ( );
    IBeziersPtr GetBeziers ( );
    IMacroObjectsPtr GetMacroObjects ( );
    ILinesPtr GetLines ( );
    IPolyLines2DPtr GetPolyLines2D ( );
    INurbsesPtr GetNurbses ( );
    IRastersPtr GetRasters ( );
    IOleDrawingObjectsPtr GetOleDrawingObjects ( );
    IEllipsesPtr GetEllipses ( );
    IEllipseArcsPtr GetEllipseArcs ( );
    IRectanglesPtr GetRectangles ( );
    IRegularPolygonsPtr GetRegularPolygons ( );
    IEquidistantsPtr GetEquidistants ( );
    IInsertionObjectsPtr GetInsertionObjects ( );
    IHatchesPtr GetHatches ( );
    IColouringsPtr GetColourings ( );
    INurbsesPtr GetNurbsesByPoints ( );
    IConicCurvesPtr GetConicCurves ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Objects (
        /*[in]*/ VARIANT ObjType,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_DrawingTexts (
        /*[out,retval]*/ struct IDrawingTexts * * PVal ) = 0;
      virtual HRESULT __stdcall get_LineSegments (
        /*[out,retval]*/ struct ILineSegments * * PVal ) = 0;
      virtual HRESULT __stdcall get_Arcs (
        /*[out,retval]*/ struct IArcs * * PVal ) = 0;
      virtual HRESULT __stdcall get_Multilines (
        /*[out,retval]*/ struct IMultilines * * PVal ) = 0;
      virtual HRESULT __stdcall get_DrawingContours (
        /*[out,retval]*/ struct IDrawingContours * * PVal ) = 0;
      virtual HRESULT __stdcall get_Circles (
        /*[out,retval]*/ struct ICircles * * PVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IPoints * * PVal ) = 0;
      virtual HRESULT __stdcall get_Beziers (
        /*[out,retval]*/ struct IBeziers * * PVal ) = 0;
      virtual HRESULT __stdcall get_MacroObjects (
        /*[out,retval]*/ struct IMacroObjects * * PVal ) = 0;
      virtual HRESULT __stdcall get_Lines (
        /*[out,retval]*/ struct ILines * * PVal ) = 0;
      virtual HRESULT __stdcall get_PolyLines2D (
        /*[out,retval]*/ struct IPolyLines2D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Nurbses (
        /*[out,retval]*/ struct INurbses * * PVal ) = 0;
      virtual HRESULT __stdcall get_Rasters (
        /*[out,retval]*/ struct IRasters * * PVal ) = 0;
      virtual HRESULT __stdcall get_OleDrawingObjects (
        /*[out,retval]*/ struct IOleDrawingObjects * * PVal ) = 0;
      virtual HRESULT __stdcall get_Ellipses (
        /*[out,retval]*/ struct IEllipses * * PVal ) = 0;
      virtual HRESULT __stdcall get_EllipseArcs (
        /*[out,retval]*/ struct IEllipseArcs * * PVal ) = 0;
      virtual HRESULT __stdcall get_Rectangles (
        /*[out,retval]*/ struct IRectangles * * PVal ) = 0;
      virtual HRESULT __stdcall get_RegularPolygons (
        /*[out,retval]*/ struct IRegularPolygons * * PVal ) = 0;
      virtual HRESULT __stdcall get_Equidistants (
        /*[out,retval]*/ struct IEquidistants * * PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionObjects (
        /*[out,retval]*/ struct IInsertionObjects * * PVal ) = 0;
      virtual HRESULT __stdcall get_Hatches (
        /*[out,retval]*/ struct IHatches * * PVal ) = 0;
      virtual HRESULT __stdcall get_Colourings (
        /*[out,retval]*/ struct IColourings * * PVal ) = 0;
      virtual HRESULT __stdcall get_NurbsesByPoints (
        /*[out,retval]*/ struct INurbses * * PVal ) = 0;
      virtual HRESULT __stdcall get_ConicCurves (
        /*[out,retval]*/ struct IConicCurves * * PVal ) = 0;
};

struct __declspec(uuid("3d99b82c-cd88-406d-a946-2d8c8e94ee73"))
IInsertionFragment : IInsertionObject
{
    //
    // Property data
    //

    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetMultiLayer,put=PutMultiLayer))
    VARIANT_BOOL MultiLayer;
    __declspec(property(get=GetVariables))
    _variant_t Variables;
    __declspec(property(get=GetVariable))
    IVariable7Ptr Variable[];
    __declspec(property(get=GetVariablesCount))
    long VariablesCount;
    __declspec(property(get=GetVariableTable))
    IVariableTablePtr VariableTable;
    __declspec(property(get=GetCreateSpcObjects,put=PutCreateSpcObjects))
    VARIANT_BOOL CreateSpcObjects;
    __declspec(property(get=GetBreakObjectsEnabled,put=PutBreakObjectsEnabled))
    VARIANT_BOOL BreakObjectsEnabled;
    __declspec(property(get=GetLabel))
    _bstr_t Label;

    //
    // Wrapper methods for error-handling
    //

    void PutScale (
        double PVal );
    double GetScale ( );
    void PutMultiLayer (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMultiLayer ( );
    _variant_t GetVariables ( );
    IVariable7Ptr GetVariable (
        const _variant_t & Index );
    long GetVariablesCount ( );
    IVariableTablePtr GetVariableTable ( );
    void PutCreateSpcObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateSpcObjects ( );
    void PutBreakObjectsEnabled (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBreakObjectsEnabled ( );
    _bstr_t GetLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MultiLayer (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MultiLayer (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Variable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_VariablesCount (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_VariableTable (
        /*[out,retval]*/ struct IVariableTable * * Result ) = 0;
      virtual HRESULT __stdcall put_CreateSpcObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateSpcObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_BreakObjectsEnabled (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BreakObjectsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("0c8fc5a9-57a8-4971-8e6c-68933269d42e"))
IInsertionView : IInsertionObject
{
    //
    // Property data
    //

    __declspec(property(get=GetViewNumber,put=PutViewNumber))
    long ViewNumber;
    __declspec(property(get=GetViewName))
    _bstr_t ViewName;
    __declspec(property(get=GetThinLines,put=PutThinLines))
    VARIANT_BOOL ThinLines;
    __declspec(property(get=GetOwnerDocumentParams,put=PutOwnerDocumentParams))
    VARIANT_BOOL OwnerDocumentParams;
    __declspec(property(get=GetCreateSpcObjects,put=PutCreateSpcObjects))
    VARIANT_BOOL CreateSpcObjects;
    __declspec(property(get=GetLabel))
    _bstr_t Label;

    //
    // Wrapper methods for error-handling
    //

    void PutViewNumber (
        long PVal );
    long GetViewNumber ( );
    _bstr_t GetViewName ( );
    void PutThinLines (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetThinLines ( );
    void PutOwnerDocumentParams (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetOwnerDocumentParams ( );
    void PutCreateSpcObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateSpcObjects ( );
    _bstr_t GetLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ViewNumber (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_ViewNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall get_ViewName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_ThinLines (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ThinLines (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_OwnerDocumentParams (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_OwnerDocumentParams (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CreateSpcObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateSpcObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * PVal ) = 0;
};

struct __declspec(uuid("b43fa13a-9488-422c-a9f3-d279fda296bb"))
IInsertionsManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInsertionDefinitions))
    _variant_t InsertionDefinitions[];
    __declspec(property(get=GetInsertionDefinition))
    IInsertionDefinitionPtr InsertionDefinition[][];
    __declspec(property(get=GetDefinitionsCount))
    long DefinitionsCount[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetInsertionDefinitions (
        enum ksInsertionTypeEnum Type );
    IInsertionDefinitionPtr GetInsertionDefinition (
        enum ksInsertionTypeEnum Type,
        const _variant_t & Index );
    IInsertionDefinitionPtr AddDefinition (
        enum ksInsertionTypeEnum Type,
        _bstr_t Name,
        _bstr_t FileName );
    long GetDefinitionsCount (
        enum ksInsertionTypeEnum Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InsertionDefinitions (
        /*[in]*/ enum ksInsertionTypeEnum Type,
        /*[out,retval]*/ VARIANT * PVal ) = 0;
      virtual HRESULT __stdcall get_InsertionDefinition (
        /*[in]*/ enum ksInsertionTypeEnum Type,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IInsertionDefinition * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddDefinition (
        /*[in]*/ enum ksInsertionTypeEnum Type,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct IInsertionDefinition * * PVal ) = 0;
      virtual HRESULT __stdcall get_DefinitionsCount (
        /*[in]*/ enum ksInsertionTypeEnum Type,
        /*[out,retval]*/ long * PVal ) = 0;
};

struct __declspec(uuid("934bcc92-bc49-4a46-9a88-70fd2e74537d"))
ISheetMetalLinearRuledShell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSketch2,put=PutSketch2))
    ISketchPtr Sketch2;
    __declspec(property(get=GetUseCommonSegmentationParameters,put=PutUseCommonSegmentationParameters))
    VARIANT_BOOL UseCommonSegmentationParameters;
    __declspec(property(get=GetCurvesCount))
    long CurvesCount;
    __declspec(property(get=GetCurveUseSegmentation,put=PutCurveUseSegmentation))
    VARIANT_BOOL CurveUseSegmentation[];
    __declspec(property(get=GetCurveSegmentationMethod,put=PutCurveSegmentationMethod))
    enum ksSegmentationMethodEnum CurveSegmentationMethod[];
    __declspec(property(get=GetCurveSegmentationSplitValue,put=PutCurveSegmentationSplitValue))
    double CurveSegmentationSplitValue[];
    __declspec(property(get=GetAutoSegmentation,put=PutAutoSegmentation))
    VARIANT_BOOL AutoSegmentation;
    __declspec(property(get=GetEdgesCount))
    long EdgesCount;

    //
    // Wrapper methods for error-handling
    //

    void PutSketch2 (
        struct ISketch * Result );
    ISketchPtr GetSketch2 ( );
    VARIANT_BOOL GetUseCommonSegmentationParameters ( );
    void PutUseCommonSegmentationParameters (
        VARIANT_BOOL PVal );
    long GetCurvesCount ( );
    void PutCurveUseSegmentation (
        long CurveIndex,
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCurveUseSegmentation (
        long CurveIndex );
    void PutCurveSegmentationMethod (
        long CurveIndex,
        enum ksSegmentationMethodEnum PVal );
    enum ksSegmentationMethodEnum GetCurveSegmentationMethod (
        long CurveIndex );
    void PutCurveSegmentationSplitValue (
        long CurveIndex,
        double PVal );
    double GetCurveSegmentationSplitValue (
        long CurveIndex );
    void PutAutoSegmentation (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoSegmentation ( );
    VARIANT_BOOL AddNewEdge (
        long IndexAt );
    VARIANT_BOOL DeleteEdge (
        long Index );
    long GetEdgesCount ( );
    VARIANT_BOOL SetEdgePointParam (
        long EdgeIndex,
        VARIANT_BOOL StartPoint,
        double X,
        double Y,
        double Z,
        double * T,
        struct IModelObject * AssociateVertex );
    VARIANT_BOOL GetEdgePointParam (
        long EdgeIndex,
        VARIANT_BOOL StartPoint,
        double * X,
        double * Y,
        double * Z,
        double * T,
        struct IModelObject * * AssociateVertex );
    VARIANT_BOOL GetEdgePointParams (
        VARIANT * Points1,
        VARIANT * T1,
        VARIANT * AssociateVertexes1,
        VARIANT * Points2,
        VARIANT * T2,
        VARIANT * AssociateVertexes2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Sketch2 (
        /*[in]*/ struct ISketch * Result ) = 0;
      virtual HRESULT __stdcall get_Sketch2 (
        /*[out,retval]*/ struct ISketch * * Result ) = 0;
      virtual HRESULT __stdcall get_UseCommonSegmentationParameters (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UseCommonSegmentationParameters (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CurvesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_CurveUseSegmentation (
        /*[in]*/ long CurveIndex,
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CurveUseSegmentation (
        /*[in]*/ long CurveIndex,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CurveSegmentationMethod (
        /*[in]*/ long CurveIndex,
        /*[in]*/ enum ksSegmentationMethodEnum PVal ) = 0;
      virtual HRESULT __stdcall get_CurveSegmentationMethod (
        /*[in]*/ long CurveIndex,
        /*[out,retval]*/ enum ksSegmentationMethodEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_CurveSegmentationSplitValue (
        /*[in]*/ long CurveIndex,
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_CurveSegmentationSplitValue (
        /*[in]*/ long CurveIndex,
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoSegmentation (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoSegmentation (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewEdge (
        /*[in]*/ long IndexAt,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteEdge (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EdgesCount (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetEdgePointParam (
        /*[in]*/ long EdgeIndex,
        /*[in]*/ VARIANT_BOOL StartPoint,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double * T,
        /*[in]*/ struct IModelObject * AssociateVertex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetEdgePointParam (
        /*[in]*/ long EdgeIndex,
        /*[in]*/ VARIANT_BOOL StartPoint,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * T,
        /*[out]*/ struct IModelObject * * AssociateVertex,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetEdgePointParams (
        /*[out]*/ VARIANT * Points1,
        /*[out]*/ VARIANT * T1,
        /*[out]*/ VARIANT * AssociateVertexes1,
        /*[out]*/ VARIANT * Points2,
        /*[out]*/ VARIANT * T2,
        /*[out]*/ VARIANT * AssociateVertexes2,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("a4737593-578b-4187-8cad-e1056eb5404b"))
IViewsAndLayersManager : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetViews))
    IViewsPtr Views;
    __declspec(property(get=GetLayerGroups))
    ILayerGroupsPtr LayerGroups;

    //
    // Wrapper methods for error-handling
    //

    IViewsPtr GetViews ( );
    ILayerGroupsPtr GetLayerGroups ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Views (
        /*[out,retval]*/ struct IViews * * PVal ) = 0;
      virtual HRESULT __stdcall get_LayerGroups (
        /*[out,retval]*/ struct ILayerGroups * * PVal ) = 0;
};

struct __declspec(uuid("dbff6d98-8f79-453e-9b8b-81e40a6d8027"))
ILayerGroups : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ILayerGroupPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ILayerGroupPtr GetItem (
        const _variant_t & Index );
    ILayerGroupPtr Add (
        struct IView * Owner,
        VARIANT_BOOL Dinamic );
    VARIANT_BOOL Attach (
        struct ILayerGroup * PGroup );
    VARIANT_BOOL Detach (
        struct ILayerGroup * PGroup );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILayerGroup * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IView * Owner,
        /*[in]*/ VARIANT_BOOL Dinamic,
        /*[out,retval]*/ struct ILayerGroup * * Result ) = 0;
      virtual HRESULT __stdcall raw_Attach (
        /*[in]*/ struct ILayerGroup * PGroup,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Detach (
        /*[in]*/ struct ILayerGroup * PGroup,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("265bbb5a-7b8a-4aa5-a0bb-ff64d23be62b"))
ILayerGroup : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOwnerGroup))
    ILayerGroupPtr OwnerGroup;
    __declspec(property(get=GetLayerGroups))
    ILayerGroupsPtr LayerGroups;
    __declspec(property(get=GetLayers))
    ILayersPtr Layers;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLayerFilterConditions))
    ILayerFilterConditionsPtr LayerFilterConditions;
    __declspec(property(get=GetCurrent,put=PutCurrent))
    VARIANT_BOOL Current;
    __declspec(property(get=GetOwnerView,put=PutOwnerView))
    IViewPtr OwnerView;
    __declspec(property(get=GetUniqueId))
    double UniqueId;

    //
    // Wrapper methods for error-handling
    //

    ILayerGroupPtr GetOwnerGroup ( );
    ILayerGroupsPtr GetLayerGroups ( );
    ILayersPtr GetLayers ( );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    ILayerFilterConditionsPtr GetLayerFilterConditions ( );
    VARIANT_BOOL GetLayerStates (
        const _variant_t & LayerIndex,
        VARIANT_BOOL * Visible,
        VARIANT_BOOL * Background,
        VARIANT_BOOL * Curent,
        long * Color );
    VARIANT_BOOL SetLayerStates (
        const _variant_t & LayerIndex,
        VARIANT_BOOL Visible,
        VARIANT_BOOL Background,
        VARIANT_BOOL Curent,
        long Color );
    void PutCurrent (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCurrent ( );
    VARIANT_BOOL Delete ( );
    IViewPtr GetOwnerView ( );
    void PutOwnerView (
        struct IView * PVal );
    double GetUniqueId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OwnerGroup (
        /*[out,retval]*/ struct ILayerGroup * * PVal ) = 0;
      virtual HRESULT __stdcall get_LayerGroups (
        /*[out,retval]*/ struct ILayerGroups * * Result ) = 0;
      virtual HRESULT __stdcall get_Layers (
        /*[out,retval]*/ struct ILayers * * Result ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_LayerFilterConditions (
        /*[out,retval]*/ struct ILayerFilterConditions * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetLayerStates (
        /*[in]*/ VARIANT LayerIndex,
        /*[out]*/ VARIANT_BOOL * Visible,
        /*[out]*/ VARIANT_BOOL * Background,
        /*[out]*/ VARIANT_BOOL * Curent,
        /*[out]*/ long * Color,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_SetLayerStates (
        /*[in]*/ VARIANT LayerIndex,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[in]*/ VARIANT_BOOL Background,
        /*[in]*/ VARIANT_BOOL Curent,
        /*[in]*/ long Color,
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_OwnerView (
        /*[out,retval]*/ struct IView * * PVal ) = 0;
      virtual HRESULT __stdcall put_OwnerView (
        /*[in]*/ struct IView * PVal ) = 0;
      virtual HRESULT __stdcall get_UniqueId (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("7b60e769-06c3-4fdc-9677-7b5ef5180308"))
IKompasDocument3D : IKompasDocument
{
    //
    // Property data
    //

    __declspec(property(get=GetHideAllDesignations,put=PutHideAllDesignations))
    VARIANT_BOOL HideAllDesignations;
    __declspec(property(get=GetHideAllAuxiliaryGeom,put=PutHideAllAuxiliaryGeom))
    VARIANT_BOOL HideAllAuxiliaryGeom;
    __declspec(property(get=GetHideInComponentsMode,put=PutHideInComponentsMode))
    VARIANT_BOOL HideInComponentsMode;
    __declspec(property(get=GetSelectionManager))
    ISelectionManagerPtr SelectionManager;
    __declspec(property(get=GetChooseManager))
    IChooseManagerPtr ChooseManager;
    __declspec(property(get=GetAttributesEx))
    _variant_t AttributesEx[][][][][][][];
    __declspec(property(get=GetEnableUndo,put=PutEnableUndo))
    VARIANT_BOOL EnableUndo;
    __declspec(property(get=GetUndoContainer,put=PutUndoContainer))
    VARIANT_BOOL UndoContainer;
    __declspec(property(get=GetTechnicalDemand3D))
    ITechnicalDemand3DPtr TechnicalDemand3D;
    __declspec(property(get=GetToleranceMode,put=PutToleranceMode))
    VARIANT_BOOL ToleranceMode;
    __declspec(property(get=GetTopPart))
    IPart7Ptr TopPart;
    __declspec(property(get=GetHideAllPlanes,put=PutHideAllPlanes))
    VARIANT_BOOL HideAllPlanes;
    __declspec(property(get=GetHideAllAxis,put=PutHideAllAxis))
    VARIANT_BOOL HideAllAxis;
    __declspec(property(get=GetHideAllSketches,put=PutHideAllSketches))
    VARIANT_BOOL HideAllSketches;
    __declspec(property(get=GetHideAllPlaces,put=PutHideAllPlaces))
    VARIANT_BOOL HideAllPlaces;
    __declspec(property(get=GetHideAllSurfaces,put=PutHideAllSurfaces))
    VARIANT_BOOL HideAllSurfaces;
    __declspec(property(get=GetHideAllThreads,put=PutHideAllThreads))
    VARIANT_BOOL HideAllThreads;
    __declspec(property(get=GetHideAllCurves,put=PutHideAllCurves))
    VARIANT_BOOL HideAllCurves;
    __declspec(property(get=GetHideAllControlPoints,put=PutHideAllControlPoints))
    VARIANT_BOOL HideAllControlPoints;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    VARIANT_BOOL Perspective;
    __declspec(property(get=GetDrawMode,put=PutDrawMode))
    long DrawMode;
    __declspec(property(get=GetShadedWireframe,put=PutShadedWireframe))
    VARIANT_BOOL ShadedWireframe;
    __declspec(property(get=GetCreateObjectsInCurrentLocalCS,put=PutCreateObjectsInCurrentLocalCS))
    VARIANT_BOOL CreateObjectsInCurrentLocalCS;
    __declspec(property(get=GetHideAllDimensions,put=PutHideAllDimensions))
    VARIANT_BOOL HideAllDimensions;

    //
    // Wrapper methods for error-handling
    //

    IPart7Ptr GetTopPart ( );
    void PutHideAllPlanes (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllPlanes ( );
    void PutHideAllAxis (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllAxis ( );
    void PutHideAllSketches (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllSketches ( );
    void PutHideAllPlaces (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllPlaces ( );
    void PutHideAllSurfaces (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllSurfaces ( );
    void PutHideAllThreads (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllThreads ( );
    void PutHideAllCurves (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllCurves ( );
    void PutHideAllControlPoints (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllControlPoints ( );
    void PutPerspective (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetPerspective ( );
    void PutDrawMode (
        long PVal );
    long GetDrawMode ( );
    void PutShadedWireframe (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetShadedWireframe ( );
    void PutCreateObjectsInCurrentLocalCS (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateObjectsInCurrentLocalCS ( );
    void PutHideAllDimensions (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllDimensions ( );
    void PutHideAllDesignations (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllDesignations ( );
    void PutHideAllAuxiliaryGeom (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideAllAuxiliaryGeom ( );
    void PutHideInComponentsMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideInComponentsMode ( );
    ISelectionManagerPtr GetSelectionManager ( );
    IChooseManagerPtr GetChooseManager ( );
    IAttributePtr CreateAttrEx (
        double AttrID,
        _bstr_t Libname,
        const _variant_t & Objects,
        struct IPart7 * SourcePart );
    _variant_t GetAttributesEx (
        long Key1,
        long Key2,
        long Key3,
        long Key4,
        double Numb,
        const _variant_t & Objects,
        struct IPart7 * SourcePart );
    VARIANT_BOOL RebuildDocument ( );
    void PutEnableUndo (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetEnableUndo ( );
    void PutUndoContainer (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUndoContainer ( );
    VARIANT_BOOL DeleteHistory ( );
    ITechnicalDemand3DPtr GetTechnicalDemand3D ( );
    void PutToleranceMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetToleranceMode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TopPart (
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall put_HideAllPlanes (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllPlanes (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllAxis (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllAxis (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllSketches (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllSketches (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllPlaces (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllPlaces (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllSurfaces (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllSurfaces (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllThreads (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllThreads (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllCurves (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllCurves (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllControlPoints (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllControlPoints (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DrawMode (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_DrawMode (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_ShadedWireframe (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ShadedWireframe (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_CreateObjectsInCurrentLocalCS (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateObjectsInCurrentLocalCS (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllDimensions (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllDimensions (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllDesignations (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllDesignations (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideAllAuxiliaryGeom (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideAllAuxiliaryGeom (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_HideInComponentsMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideInComponentsMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_SelectionManager (
        /*[out,retval]*/ struct ISelectionManager * * PVal ) = 0;
      virtual HRESULT __stdcall get_ChooseManager (
        /*[out,retval]*/ struct IChooseManager * * PVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAttrEx (
        /*[in]*/ double AttrID,
        /*[in]*/ BSTR Libname,
        /*[in]*/ VARIANT Objects,
        /*[in]*/ struct IPart7 * SourcePart,
        /*[out,retval]*/ struct IAttribute * * Result ) = 0;
      virtual HRESULT __stdcall get_AttributesEx (
        /*[in]*/ long Key1,
        /*[in]*/ long Key2,
        /*[in]*/ long Key3,
        /*[in]*/ long Key4,
        /*[in]*/ double Numb,
        /*[in]*/ VARIANT Objects,
        /*[in]*/ struct IPart7 * SourcePart,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_RebuildDocument (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_EnableUndo (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_EnableUndo (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_UndoContainer (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UndoContainer (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteHistory (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_TechnicalDemand3D (
        /*[out,retval]*/ struct ITechnicalDemand3D * * Result ) = 0;
      virtual HRESULT __stdcall put_ToleranceMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("0075ea2a-5498-4e28-bdf3-0288eb168054"))
IPartDocument : IKompasDocument3D
{};

struct __declspec(uuid("f6b3f33a-3273-43ef-9b8a-7c0af8faa129"))
IAssemblyDocument : IKompasDocument3D
{
    //
    // Property data
    //

    __declspec(property(get=GetDismantleMode,put=PutDismantleMode))
    VARIANT_BOOL DismantleMode;

    //
    // Wrapper methods for error-handling
    //

    void PutDismantleMode (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDismantleMode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DismantleMode (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DismantleMode (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("0825f23c-0a73-48de-beab-da2ff39962c3"))
IAssociationView : IView
{
    //
    // Property data
    //

    __declspec(property(get=GetIsAssociationObjectsVisible))
    VARIANT_BOOL IsAssociationObjectsVisible[];
    __declspec(property(get=GetSourceFileName,put=PutSourceFileName))
    _bstr_t SourceFileName;
    __declspec(property(get=GetProjectionName,put=PutProjectionName))
    _bstr_t ProjectionName;
    __declspec(property(get=GetExplodedView,put=PutExplodedView))
    VARIANT_BOOL ExplodedView;
    __declspec(property(put=PutDimensionLayoutScaling))
    VARIANT_BOOL DimensionLayoutScaling;
    __declspec(property(get=GetProjectionLink,put=PutProjectionLink))
    VARIANT_BOOL ProjectionLink;
    __declspec(property(get=GetSection,put=PutSection))
    VARIANT_BOOL Section;
    __declspec(property(get=GetUnfold,put=PutUnfold))
    VARIANT_BOOL Unfold;
    __declspec(property(get=GetVisibleLinesStyle,put=PutVisibleLinesStyle))
    long VisibleLinesStyle;
    __declspec(property(get=GetHiddenLines,put=PutHiddenLines))
    VARIANT_BOOL HiddenLines;
    __declspec(property(get=GetHiddenLinesVisible,put=PutHiddenLinesVisible))
    VARIANT_BOOL HiddenLinesVisible;
    __declspec(property(get=GetHiddenLinesStyle,put=PutHiddenLinesStyle))
    long HiddenLinesStyle;
    __declspec(property(get=GetBreakLinesVisible,put=PutBreakLinesVisible))
    VARIANT_BOOL BreakLinesVisible;
    __declspec(property(get=GetBreakLinesStyle,put=PutBreakLinesStyle))
    long BreakLinesStyle;
    __declspec(property(get=GetBendLinesVisible,put=PutBendLinesVisible))
    VARIANT_BOOL BendLinesVisible;
    __declspec(property(get=GetBendLinesStyle,put=PutBendLinesStyle))
    long BendLinesStyle;
    __declspec(property(get=GetBaseView,put=PutBaseView))
    IViewPtr BaseView;
    __declspec(property(get=GetBaseObject,put=PutBaseObject))
    IDrawingObjectPtr BaseObject;
    __declspec(property(get=GetLocal,put=PutLocal))
    VARIANT_BOOL Local;
    __declspec(property(get=GetSameHatch,put=PutSameHatch))
    VARIANT_BOOL SameHatch;
    __declspec(property(get=GetProjectionMatrix,put=PutProjectionMatrix))
    _variant_t ProjectionMatrix;
    __declspec(property(get=GetCenterLinesVisible,put=PutCenterLinesVisible))
    VARIANT_BOOL CenterLinesVisible;
    __declspec(property(get=GetUseOcclusion,put=PutUseOcclusion))
    VARIANT_BOOL UseOcclusion;
    __declspec(property(get=GetAssociationObjects))
    _variant_t AssociationObjects[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSourceFileName ( );
    void PutSourceFileName (
        _bstr_t Result );
    _bstr_t GetProjectionName ( );
    void PutProjectionName (
        _bstr_t Result );
    VARIANT_BOOL GetExplodedView ( );
    void PutExplodedView (
        VARIANT_BOOL Result );
    void PutDimensionLayoutScaling (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetProjectionLink ( );
    void PutProjectionLink (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetSection ( );
    void PutSection (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetUnfold ( );
    void PutUnfold (
        VARIANT_BOOL Result );
    long GetVisibleLinesStyle ( );
    void PutVisibleLinesStyle (
        long Result );
    VARIANT_BOOL GetHiddenLines ( );
    void PutHiddenLines (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetHiddenLinesVisible ( );
    void PutHiddenLinesVisible (
        VARIANT_BOOL Result );
    long GetHiddenLinesStyle ( );
    void PutHiddenLinesStyle (
        long Result );
    VARIANT_BOOL GetBreakLinesVisible ( );
    void PutBreakLinesVisible (
        VARIANT_BOOL Result );
    long GetBreakLinesStyle ( );
    void PutBreakLinesStyle (
        long Result );
    VARIANT_BOOL GetBendLinesVisible ( );
    void PutBendLinesVisible (
        VARIANT_BOOL Result );
    long GetBendLinesStyle ( );
    void PutBendLinesStyle (
        long Result );
    IViewPtr GetBaseView ( );
    void PutBaseView (
        struct IView * Result );
    IDrawingObjectPtr GetBaseObject ( );
    void PutBaseObject (
        struct IDrawingObject * Result );
    VARIANT_BOOL GetLocal ( );
    void PutLocal (
        VARIANT_BOOL Result );
    VARIANT_BOOL CreateLocalView (
        struct IDrawingObject * Contour );
    VARIANT_BOOL GetSameHatch ( );
    void PutSameHatch (
        VARIANT_BOOL Result );
    _variant_t GetProjectionMatrix ( );
    void PutProjectionMatrix (
        const _variant_t & Result );
    VARIANT_BOOL GetCenterLinesVisible ( );
    void PutCenterLinesVisible (
        VARIANT_BOOL Result );
    VARIANT_BOOL GetUseOcclusion ( );
    void PutUseOcclusion (
        VARIANT_BOOL Result );
    _variant_t GetAssociationObjects (
        struct IKompasAPIObject * ModelObject );
    VARIANT_BOOL GetIsAssociationObjectsVisible (
        struct IKompasAPIObject * ModelObject );
    _variant_t FindFaceEdges (
        double X,
        double Y );
    IModelObjectPtr FindFace (
        double X,
        double Y,
        struct IKompasDocument3D * Document3D );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourceFileName (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_SourceFileName (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_ProjectionName (
        /*[out,retval]*/ BSTR * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectionName (
        /*[in]*/ BSTR Result ) = 0;
      virtual HRESULT __stdcall get_ExplodedView (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ExplodedView (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall put_DimensionLayoutScaling (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_ProjectionLink (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectionLink (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Section (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Section (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_Unfold (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Unfold (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_VisibleLinesStyle (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_VisibleLinesStyle (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_HiddenLines (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_HiddenLines (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_HiddenLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_HiddenLinesVisible (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_HiddenLinesStyle (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_HiddenLinesStyle (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_BreakLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_BreakLinesVisible (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_BreakLinesStyle (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_BreakLinesStyle (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_BendLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_BendLinesVisible (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_BendLinesStyle (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_BendLinesStyle (
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall get_BaseView (
        /*[out,retval]*/ struct IView * * Result ) = 0;
      virtual HRESULT __stdcall put_BaseView (
        /*[in]*/ struct IView * Result ) = 0;
      virtual HRESULT __stdcall get_BaseObject (
        /*[out,retval]*/ struct IDrawingObject * * Result ) = 0;
      virtual HRESULT __stdcall put_BaseObject (
        /*[in]*/ struct IDrawingObject * Result ) = 0;
      virtual HRESULT __stdcall get_Local (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_Local (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall raw_CreateLocalView (
        /*[in]*/ struct IDrawingObject * Contour,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SameHatch (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_SameHatch (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_ProjectionMatrix (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall put_ProjectionMatrix (
        /*[in]*/ VARIANT Result ) = 0;
      virtual HRESULT __stdcall get_CenterLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_CenterLinesVisible (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_UseOcclusion (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_UseOcclusion (
        /*[in]*/ VARIANT_BOOL Result ) = 0;
      virtual HRESULT __stdcall get_AssociationObjects (
        /*[in]*/ struct IKompasAPIObject * ModelObject,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_IsAssociationObjectsVisible (
        /*[in]*/ struct IKompasAPIObject * ModelObject,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_FindFaceEdges (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_FindFace (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ struct IKompasDocument3D * Document3D,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("63e5636b-0661-4635-a902-6e8727e75d93"))
ICopyGeometry : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetInitialObjects,put=PutInitialObjects))
    _variant_t InitialObjects;
    __declspec(property(get=GetContextObjects,put=PutContextObjects))
    VARIANT_BOOL ContextObjects;
    __declspec(property(get=GetDocumentFileName))
    _bstr_t DocumentFileName;
    __declspec(property(get=GetLocalCS,put=PutLocalCS))
    ILocalCoordinateSystemPtr LocalCS;
    __declspec(property(get=GetExternalLocalCS,put=PutExternalLocalCS))
    ILocalCoordinateSystemPtr ExternalLocalCS;
    __declspec(property(get=GetByCollectionGeometry,put=PutByCollectionGeometry))
    VARIANT_BOOL ByCollectionGeometry;
    __declspec(property(get=GetCollectionGeometry,put=PutCollectionGeometry))
    ICollectionGeometryPtr CollectionGeometry;
    __declspec(property(get=GetMirrorCopy,put=PutMirrorCopy))
    VARIANT_BOOL MirrorCopy;
    __declspec(property(get=GetBuildingType,put=PutBuildingType))
    enum ksCopyGeometryBuildingTypeEnum BuildingType;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetWatchForSourceChange,put=PutWatchForSourceChange))
    VARIANT_BOOL WatchForSourceChange;

    //
    // Wrapper methods for error-handling
    //

    void PutInitialObjects (
        const _variant_t & Objects );
    _variant_t GetInitialObjects ( );
    VARIANT_BOOL Destroy ( );
    VARIANT_BOOL IsInitialObject (
        struct IModelObject * Object );
    VARIANT_BOOL AddInitialObjects (
        const _variant_t & Objects );
    VARIANT_BOOL AddInitialObjectsFromExternalDocument (
        struct IKompasDocument3D * ExternalDocument,
        struct ILocalCoordinateSystem * ExternalLocalCS,
        const _variant_t & Objects );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL IsSuitableObject (
        struct IModelObject * Object );
    VARIANT_BOOL GetContextObjects ( );
    void PutContextObjects (
        VARIANT_BOOL PVal );
    _bstr_t GetDocumentFileName ( );
    IKompasDocument3DPtr OpenDocument (
        VARIANT_BOOL Visible,
        VARIANT_BOOL ReadOnly );
    ILocalCoordinateSystemPtr GetLocalCS ( );
    void PutLocalCS (
        struct ILocalCoordinateSystem * PVal );
    ILocalCoordinateSystemPtr GetExternalLocalCS ( );
    void PutExternalLocalCS (
        struct ILocalCoordinateSystem * PVal );
    VARIANT_BOOL GetByCollectionGeometry ( );
    void PutByCollectionGeometry (
        VARIANT_BOOL PVal );
    ICollectionGeometryPtr GetCollectionGeometry ( );
    void PutCollectionGeometry (
        struct ICollectionGeometry * PVal );
    VARIANT_BOOL GetMirrorCopy ( );
    void PutMirrorCopy (
        VARIANT_BOOL PVal );
    enum ksCopyGeometryBuildingTypeEnum GetBuildingType ( );
    void PutBuildingType (
        enum ksCopyGeometryBuildingTypeEnum PVal );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetWatchForSourceChange ( );
    void PutWatchForSourceChange (
        VARIANT_BOOL PVal );
    VARIANT_BOOL Synhronise ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_InitialObjects (
        /*[in]*/ VARIANT Objects ) = 0;
      virtual HRESULT __stdcall get_InitialObjects (
        /*[out,retval]*/ VARIANT * Objects ) = 0;
      virtual HRESULT __stdcall raw_Destroy (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsInitialObject (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddInitialObjects (
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddInitialObjectsFromExternalDocument (
        /*[in]*/ struct IKompasDocument3D * ExternalDocument,
        /*[in]*/ struct ILocalCoordinateSystem * ExternalLocalCS,
        /*[in]*/ VARIANT Objects,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_IsSuitableObject (
        /*[in]*/ struct IModelObject * Object,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ContextObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ContextObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DocumentFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_OpenDocument (
        /*[in]*/ VARIANT_BOOL Visible,
        /*[in]*/ VARIANT_BOOL ReadOnly,
        /*[out,retval]*/ struct IKompasDocument3D * * Result ) = 0;
      virtual HRESULT __stdcall get_LocalCS (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * PVal ) = 0;
      virtual HRESULT __stdcall put_LocalCS (
        /*[in]*/ struct ILocalCoordinateSystem * PVal ) = 0;
      virtual HRESULT __stdcall get_ExternalLocalCS (
        /*[out,retval]*/ struct ILocalCoordinateSystem * * PVal ) = 0;
      virtual HRESULT __stdcall put_ExternalLocalCS (
        /*[in]*/ struct ILocalCoordinateSystem * PVal ) = 0;
      virtual HRESULT __stdcall get_ByCollectionGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_ByCollectionGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CollectionGeometry (
        /*[out,retval]*/ struct ICollectionGeometry * * PVal ) = 0;
      virtual HRESULT __stdcall put_CollectionGeometry (
        /*[in]*/ struct ICollectionGeometry * PVal ) = 0;
      virtual HRESULT __stdcall get_MirrorCopy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MirrorCopy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingType (
        /*[out,retval]*/ enum ksCopyGeometryBuildingTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_BuildingType (
        /*[in]*/ enum ksCopyGeometryBuildingTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_WatchForSourceChange (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_WatchForSourceChange (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_Synhronise (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
};

struct __declspec(uuid("6cc5e3b7-b509-4b8e-87d1-0b936010120c"))
ICopiesGeometry : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetCopyGeometry))
    ICopyGeometryPtr CopyGeometry[];

    //
    // Wrapper methods for error-handling
    //

    ICopyGeometryPtr GetCopyGeometry (
        const _variant_t & Index );
    ICopyGeometryPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CopyGeometry (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ICopyGeometry * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ICopyGeometry * * Result ) = 0;
};

struct __declspec(uuid("2c6e8a0f-edc8-413c-9304-9278817b915b"))
IModelContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObjects))
    _variant_t Objects[];
    __declspec(property(get=GetSketchs))
    ISketchsPtr Sketchs;
    __declspec(property(get=GetExtrusions))
    IExtrusionsPtr Extrusions;
    __declspec(property(get=GetPoints3D))
    IPoints3DPtr Points3D;
    __declspec(property(get=GetFeaturePatterns))
    IFeaturePatternsPtr FeaturePatterns;
    __declspec(property(get=GetSurfaceThickenings))
    ISurfaceThickeningsPtr SurfaceThickenings;
    __declspec(property(get=GetRotateds))
    IRotatedsPtr Rotateds;
    __declspec(property(get=GetScalings3D))
    IScalings3DPtr Scalings3D;
    __declspec(property(get=GetBilletsObsoletes))
    IBilletsObsoletesPtr BilletsObsoletes;
    __declspec(property(get=GetCopiesGeometry))
    ICopiesGeometryPtr CopiesGeometry;
    __declspec(property(get=GetCollectionsGeometry))
    ICollectionsGeometryPtr CollectionsGeometry;
    __declspec(property(get=GetUserObjects))
    IUserObjects3DPtr UserObjects;
    __declspec(property(get=GetHoles3D))
    IHoles3DPtr Holes3D;
    __declspec(property(get=GetChamfers))
    IChamfersPtr Chamfers;
    __declspec(property(get=GetFillets))
    IFilletsPtr Fillets;
    __declspec(property(get=GetInclines))
    IInclinesPtr Inclines;
    __declspec(property(get=GetRibs))
    IRibsPtr Ribs;
    __declspec(property(get=GetShells))
    IShellsPtr Shells;
    __declspec(property(get=GetBooleans))
    IBooleansPtr Booleans;
    __declspec(property(get=GetCuts))
    ICutsPtr Cuts;
    __declspec(property(get=GetLofts))
    ILoftsPtr Lofts;
    __declspec(property(get=GetEvolutions))
    IEvolutionsPtr Evolutions;
    __declspec(property(get=GetUnionsComponents))
    IUnionsComponentsPtr UnionsComponents;
    __declspec(property(get=GetMoldCavities))
    IMoldCavitiesPtr MoldCavities;
    __declspec(property(get=GetMacroObjects3D))
    IMacroObjects3DPtr MacroObjects3D;
    __declspec(property(get=GetBodyRepositions))
    IBodyRepositionsPtr BodyRepositions;
    __declspec(property(get=GetFullFillets))
    IFullFilletsPtr FullFillets;
    __declspec(property(get=GetWireFrames3D))
    IWireFrames3DPtr WireFrames3D;
    __declspec(property(get=GetSplitSolids))
    ISplitSolidsPtr SplitSolids;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetObjects (
        const _variant_t & ObjType );
    ISketchsPtr GetSketchs ( );
    IExtrusionsPtr GetExtrusions ( );
    IPoints3DPtr GetPoints3D ( );
    IFeaturePatternsPtr GetFeaturePatterns ( );
    ISurfaceThickeningsPtr GetSurfaceThickenings ( );
    IRotatedsPtr GetRotateds ( );
    IScalings3DPtr GetScalings3D ( );
    IBilletsObsoletesPtr GetBilletsObsoletes ( );
    ICopiesGeometryPtr GetCopiesGeometry ( );
    ICollectionsGeometryPtr GetCollectionsGeometry ( );
    IUserObjects3DPtr GetUserObjects ( );
    IHoles3DPtr GetHoles3D ( );
    IChamfersPtr GetChamfers ( );
    IFilletsPtr GetFillets ( );
    IInclinesPtr GetInclines ( );
    IRibsPtr GetRibs ( );
    IShellsPtr GetShells ( );
    IBooleansPtr GetBooleans ( );
    ICutsPtr GetCuts ( );
    ILoftsPtr GetLofts ( );
    IEvolutionsPtr GetEvolutions ( );
    IUnionsComponentsPtr GetUnionsComponents ( );
    IMoldCavitiesPtr GetMoldCavities ( );
    IMacroObjects3DPtr GetMacroObjects3D ( );
    IBodyRepositionsPtr GetBodyRepositions ( );
    IModelObjectPtr AddObject (
        ksObj3dTypeEnum ObjectType );
    IFullFilletsPtr GetFullFillets ( );
    IWireFrames3DPtr GetWireFrames3D ( );
    ISplitSolidsPtr GetSplitSolids ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Objects (
        /*[in]*/ VARIANT ObjType,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_Sketchs (
        /*[out,retval]*/ struct ISketchs * * PVal ) = 0;
      virtual HRESULT __stdcall get_Extrusions (
        /*[out,retval]*/ struct IExtrusions * * PVal ) = 0;
      virtual HRESULT __stdcall get_Points3D (
        /*[out,retval]*/ struct IPoints3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_FeaturePatterns (
        /*[out,retval]*/ struct IFeaturePatterns * * PVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceThickenings (
        /*[out,retval]*/ struct ISurfaceThickenings * * PVal ) = 0;
      virtual HRESULT __stdcall get_Rotateds (
        /*[out,retval]*/ struct IRotateds * * PVal ) = 0;
      virtual HRESULT __stdcall get_Scalings3D (
        /*[out,retval]*/ struct IScalings3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_BilletsObsoletes (
        /*[out,retval]*/ struct IBilletsObsoletes * * PVal ) = 0;
      virtual HRESULT __stdcall get_CopiesGeometry (
        /*[out,retval]*/ struct ICopiesGeometry * * PVal ) = 0;
      virtual HRESULT __stdcall get_CollectionsGeometry (
        /*[out,retval]*/ struct ICollectionsGeometry * * PVal ) = 0;
      virtual HRESULT __stdcall get_UserObjects (
        /*[out,retval]*/ struct IUserObjects3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Holes3D (
        /*[out,retval]*/ struct IHoles3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_Chamfers (
        /*[out,retval]*/ struct IChamfers * * PVal ) = 0;
      virtual HRESULT __stdcall get_Fillets (
        /*[out,retval]*/ struct IFillets * * PVal ) = 0;
      virtual HRESULT __stdcall get_Inclines (
        /*[out,retval]*/ struct IInclines * * PVal ) = 0;
      virtual HRESULT __stdcall get_Ribs (
        /*[out,retval]*/ struct IRibs * * PVal ) = 0;
      virtual HRESULT __stdcall get_Shells (
        /*[out,retval]*/ struct IShells * * PVal ) = 0;
      virtual HRESULT __stdcall get_Booleans (
        /*[out,retval]*/ struct IBooleans * * PVal ) = 0;
      virtual HRESULT __stdcall get_Cuts (
        /*[out,retval]*/ struct ICuts * * PVal ) = 0;
      virtual HRESULT __stdcall get_Lofts (
        /*[out,retval]*/ struct ILofts * * PVal ) = 0;
      virtual HRESULT __stdcall get_Evolutions (
        /*[out,retval]*/ struct IEvolutions * * PVal ) = 0;
      virtual HRESULT __stdcall get_UnionsComponents (
        /*[out,retval]*/ struct IUnionsComponents * * PVal ) = 0;
      virtual HRESULT __stdcall get_MoldCavities (
        /*[out,retval]*/ struct IMoldCavities * * PVal ) = 0;
      virtual HRESULT __stdcall get_MacroObjects3D (
        /*[out,retval]*/ struct IMacroObjects3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_BodyRepositions (
        /*[out,retval]*/ struct IBodyRepositions * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddObject (
        /*[in]*/ ksObj3dTypeEnum ObjectType,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_FullFillets (
        /*[out,retval]*/ struct IFullFillets * * PVal ) = 0;
      virtual HRESULT __stdcall get_WireFrames3D (
        /*[out,retval]*/ struct IWireFrames3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_SplitSolids (
        /*[out,retval]*/ struct ISplitSolids * * PVal ) = 0;
};

struct __declspec(uuid("fa4a5fde-a08c-4f5a-8c04-98395ba44307"))
IPart7 : IModelObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPartsGroupNumber,put=PutPartsGroupNumber))
    long PartsGroupNumber;
    __declspec(property(get=GetMarking,put=PutMarking))
    _bstr_t Marking;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetStandard,put=PutStandard))
    VARIANT_BOOL Standard;
    __declspec(property(get=GetFixed,put=PutFixed))
    VARIANT_BOOL Fixed;
    __declspec(property(get=GetDetail))
    VARIANT_BOOL Detail;
    __declspec(property(get=GetMass))
    double Mass;
    __declspec(property(get=GetDensity))
    double Density;
    __declspec(property(get=GetMaterial))
    _bstr_t Material;
    __declspec(property(get=GetRevealComposition,put=PutRevealComposition))
    VARIANT_BOOL RevealComposition;
    __declspec(property(get=GetParts))
    IParts7Ptr Parts;
    __declspec(property(get=GetVariableTable))
    IVariableTablePtr VariableTable;
    __declspec(property(get=GetPartsEx))
    _variant_t PartsEx[];
    __declspec(property(get=GetInstanceCount))
    long InstanceCount[];
    __declspec(property(get=GetInheritVisible,put=PutInheritVisible))
    VARIANT_BOOL InheritVisible;
    __declspec(property(get=GetLoadState))
    enum ksLoadStateEnum LoadState;
    __declspec(property(get=GetDefaultObject))
    IModelObjectPtr DefaultObject[];
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    enum ksPartAccessTypeEnum ReadOnly;
    __declspec(property(get=GetStaffVisible,put=PutStaffVisible))
    VARIANT_BOOL StaffVisible;
    __declspec(property(get=GetCreateSpcObjects,put=PutCreateSpcObjects))
    VARIANT_BOOL CreateSpcObjects;
    __declspec(property(get=GetIsLocal,put=PutIsLocal))
    VARIANT_BOOL IsLocal;
    __declspec(property(get=GetHatchParam))
    IHatchParamPtr HatchParam;
    __declspec(property(get=GetUniqueNum,put=PutUniqueNum))
    long UniqueNum[];
    __declspec(property(get=GetIsLayoutGeometry,put=PutIsLayoutGeometry))
    VARIANT_BOOL IsLayoutGeometry;
    __declspec(property(get=GetIsBillet,put=PutIsBillet))
    VARIANT_BOOL IsBillet;
    __declspec(property(get=GetPlacement))
    IPlacement3DPtr Placement;
    __declspec(property(get=GetSpecRough))
    ISpecRough3DPtr SpecRough;
    __declspec(property(get=GetLeftHandedCS,put=PutLeftHandedCS))
    VARIANT_BOOL LeftHandedCS;
    __declspec(property(get=GetMateConstraints))
    IMateConstraints3DPtr MateConstraints;
    __declspec(property(get=GetUserFolders))
    IUserFoldersPtr UserFolders;
    __declspec(property(get=GetToleranceRecalcType,put=PutToleranceRecalcType))
    enum ksToleranceRecalcsEnum ToleranceRecalcType;
    __declspec(property(get=GetUserToleranceRecalcId,put=PutUserToleranceRecalcId))
    long UserToleranceRecalcId;
    __declspec(property(get=GetUserToleranceRecalcName,put=PutUserToleranceRecalcName))
    _bstr_t UserToleranceRecalcName;
    __declspec(property(get=GetUseDummy,put=PutUseDummy))
    VARIANT_BOOL UseDummy;
    __declspec(property(get=GetDummyFileName,put=PutDummyFileName))
    _bstr_t DummyFileName;
    __declspec(property(get=GetDummyEmbodimentIndex))
    long DummyEmbodimentIndex;
    __declspec(property(get=GetZonesManager))
    IZonesManagerPtr ZonesManager;
    __declspec(property(get=GetInheritExclude,put=PutInheritExclude))
    VARIANT_BOOL InheritExclude;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetMarking ( );
    void PutMarking (
        _bstr_t PVal );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t PVal );
    void PutStandard (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetStandard ( );
    void PutFixed (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetFixed ( );
    VARIANT_BOOL GetDetail ( );
    double GetMass ( );
    double GetDensity ( );
    _bstr_t GetMaterial ( );
    VARIANT_BOOL SetMaterial (
        _bstr_t Name,
        double Density );
    IParts7Ptr GetParts ( );
    IVariableTablePtr GetVariableTable ( );
    _variant_t GetPartsEx (
        const _variant_t & PartCollectionType );
    long GetInstanceCount (
        struct IPart7 * Part );
    _variant_t SelectByPoint (
        const _variant_t & Objects,
        double X,
        double Y,
        double Z );
    VARIANT_BOOL TransferObjects (
        const _variant_t & Objects,
        struct ILocalCoordinateSystem * Lcs,
        VARIANT_BOOL HoldPosition );
    VARIANT_BOOL Load (
        VARIANT_BOOL Full );
    VARIANT_BOOL Unload (
        VARIANT_BOOL Full );
    enum ksLoadStateEnum GetLoadState ( );
    IModelObjectPtr GetDefaultObject (
        ksObj3dTypeEnum Type );
    VARIANT_BOOL IsVariableNameValid (
        _bstr_t Name );
    IVariable7Ptr AddVariable (
        _bstr_t Name,
        double Value,
        _bstr_t Note );
    VARIANT_BOOL RebuildModel (
        VARIANT_BOOL Redraw );
    enum ksPartAccessTypeEnum GetReadOnly ( );
    void PutReadOnly (
        enum ksPartAccessTypeEnum PVal );
    VARIANT_BOOL GetStaffVisible ( );
    void PutStaffVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL SaveAs (
        _bstr_t PathName );
    IModelObjectPtr FindObject (
        struct IModelObject * Obj,
        struct IPart7 * SourcePart );
    void PutCreateSpcObjects (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetCreateSpcObjects ( );
    void PutIsLocal (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIsLocal ( );
    IOpenDocumentParamPtr GetOpenDocumentParam ( );
    IKompasDocument3DPtr BeginEdit (
        struct IOpenDocumentParam * Param );
    VARIANT_BOOL EndEdit (
        VARIANT_BOOL Rebuild );
    _variant_t FindObjectsByPoint (
        double X,
        double Y,
        double Z,
        VARIANT_BOOL FirstLevel );
    IHatchParamPtr GetHatchParam ( );
    long GetUniqueNum (
        ksObj3dTypeEnum OType );
    void PutUniqueNum (
        ksObj3dTypeEnum OType,
        long Result );
    VARIANT_BOOL ChangeObjectLinks (
        const _variant_t & SourceObjs,
        const _variant_t & DestObjs,
        VARIANT_BOOL RebuildAll );
    VARIANT_BOOL GetIsLayoutGeometry ( );
    void PutIsLayoutGeometry (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetIsBillet ( );
    void PutIsBillet (
        VARIANT_BOOL PVal );
    IPlacement3DPtr GetPlacement ( );
    VARIANT_BOOL UpdatePlacement (
        VARIANT_BOOL Redraw );
    ISpecRough3DPtr GetSpecRough ( );
    void PutLeftHandedCS (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetLeftHandedCS ( );
    VARIANT_BOOL MirroringPlacement (
        ksObj3dTypeEnum Axis );
    VARIANT_BOOL DestroySubassembly ( );
    double GetMaxSag ( );
    IMateConstraints3DPtr GetMateConstraints ( );
    IBody7Ptr GetBodyById (
        long BodyId );
    IUserFoldersPtr GetUserFolders ( );
    void PutToleranceRecalcType (
        enum ksToleranceRecalcsEnum PVal );
    enum ksToleranceRecalcsEnum GetToleranceRecalcType ( );
    void PutUserToleranceRecalcId (
        long PVal );
    long GetUserToleranceRecalcId ( );
    void PutUserToleranceRecalcName (
        _bstr_t PVal );
    _bstr_t GetUserToleranceRecalcName ( );
    void PutUseDummy (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetUseDummy ( );
    void PutDummyFileName (
        _bstr_t PVal );
    _bstr_t GetDummyFileName ( );
    long GetDummyEmbodimentIndex ( );
    _bstr_t GetDummyEmbodimentMarking (
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL AddSystemDelimer );
    VARIANT_BOOL SetDummyEmbodiment (
        const _variant_t & Index );
    VARIANT_BOOL UnloadEx (
        enum ksLoadStateEnum Type );
    IKompasDocument3DPtr OpenSourceDocument (
        struct IOpenDocumentParam * Param );
    IZonesManagerPtr GetZonesManager ( );
    void PutInheritExclude (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInheritExclude ( );
    long GetPartsGroupNumber ( );
    void PutPartsGroupNumber (
        long PVal );
    VARIANT_BOOL IsLocalResultExist (
        VARIANT_BOOL Reqursive );
    void PutRevealComposition (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetRevealComposition ( );
    void PutInheritVisible (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetInheritVisible ( );
    VARIANT_BOOL TransformPoint (
        double * X,
        double * Y,
        double * Z,
        struct IPart7 * Part );
    VARIANT_BOOL TransformPoints (
        VARIANT * Points,
        struct IPart7 * Part );
    _variant_t GetSummMatrix (
        struct IPart7 * Part );
    IBody7Ptr FindBody (
        _bstr_t UniqueMetaObjectKey );
    _variant_t GetSimilarInstances (
        struct IPart7 * Part );
    IModelObjectPtr FindSimilarObject (
        struct IModelObject * Obj );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Marking (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Marking (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall put_Standard (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Standard (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_Fixed (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Detail (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Mass (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaterial (
        /*[in]*/ BSTR Name,
        /*[in]*/ double Density,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Parts (
        /*[out,retval]*/ struct IParts7 * * Result ) = 0;
      virtual HRESULT __stdcall get_VariableTable (
        /*[out,retval]*/ struct IVariableTable * * Result ) = 0;
      virtual HRESULT __stdcall get_PartsEx (
        /*[in]*/ VARIANT PartCollectionType,
        /*[out,retval]*/ VARIANT * Objects ) = 0;
      virtual HRESULT __stdcall get_InstanceCount (
        /*[in]*/ struct IPart7 * Part,
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_SelectByPoint (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_TransferObjects (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ struct ILocalCoordinateSystem * Lcs,
        /*[in]*/ VARIANT_BOOL HoldPosition,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ VARIANT_BOOL Full,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Unload (
        /*[in]*/ VARIANT_BOOL Full,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_LoadState (
        /*[out,retval]*/ enum ksLoadStateEnum * Type ) = 0;
      virtual HRESULT __stdcall get_DefaultObject (
        /*[in]*/ ksObj3dTypeEnum Type,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_IsVariableNameValid (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddVariable (
        /*[in]*/ BSTR Name,
        /*[in]*/ double Value,
        /*[in]*/ BSTR Note,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_RebuildModel (
        /*[in]*/ VARIANT_BOOL Redraw,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ enum ksPartAccessTypeEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ enum ksPartAccessTypeEnum PVal ) = 0;
      virtual HRESULT __stdcall get_StaffVisible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_StaffVisible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR PathName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_FindObject (
        /*[in]*/ struct IModelObject * Obj,
        /*[in]*/ struct IPart7 * SourcePart,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall put_CreateSpcObjects (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_CreateSpcObjects (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IsLocal (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IsLocal (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetOpenDocumentParam (
        /*[out,retval]*/ struct IOpenDocumentParam * * Result ) = 0;
      virtual HRESULT __stdcall raw_BeginEdit (
        /*[in]*/ struct IOpenDocumentParam * Param,
        /*[out,retval]*/ struct IKompasDocument3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_EndEdit (
        /*[in]*/ VARIANT_BOOL Rebuild,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_FindObjectsByPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT_BOOL FirstLevel,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall get_HatchParam (
        /*[out,retval]*/ struct IHatchParam * * Result ) = 0;
      virtual HRESULT __stdcall get_UniqueNum (
        /*[in]*/ ksObj3dTypeEnum OType,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall put_UniqueNum (
        /*[in]*/ ksObj3dTypeEnum OType,
        /*[in]*/ long Result ) = 0;
      virtual HRESULT __stdcall raw_ChangeObjectLinks (
        /*[in]*/ VARIANT SourceObjs,
        /*[in]*/ VARIANT DestObjs,
        /*[in]*/ VARIANT_BOOL RebuildAll,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_IsLayoutGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IsLayoutGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_IsBillet (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IsBillet (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ struct IPlacement3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_UpdatePlacement (
        /*[in]*/ VARIANT_BOOL Redraw,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_SpecRough (
        /*[out,retval]*/ struct ISpecRough3D * * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftHandedCS (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LeftHandedCS (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_MirroringPlacement (
        /*[in]*/ ksObj3dTypeEnum Axis,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DestroySubassembly (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetMaxSag (
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall get_MateConstraints (
        /*[out,retval]*/ struct IMateConstraints3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetBodyById (
        /*[in]*/ long BodyId,
        /*[out,retval]*/ struct IBody7 * * Result ) = 0;
      virtual HRESULT __stdcall get_UserFolders (
        /*[out,retval]*/ struct IUserFolders * * Result ) = 0;
      virtual HRESULT __stdcall put_ToleranceRecalcType (
        /*[in]*/ enum ksToleranceRecalcsEnum PVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceRecalcType (
        /*[out,retval]*/ enum ksToleranceRecalcsEnum * PVal ) = 0;
      virtual HRESULT __stdcall put_UserToleranceRecalcId (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall get_UserToleranceRecalcId (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_UserToleranceRecalcName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_UserToleranceRecalcName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_UseDummy (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_UseDummy (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_DummyFileName (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_DummyFileName (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall get_DummyEmbodimentIndex (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_GetDummyEmbodimentMarking (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL AddSystemDelimer,
        /*[out,retval]*/ BSTR * Marking ) = 0;
      virtual HRESULT __stdcall raw_SetDummyEmbodiment (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_UnloadEx (
        /*[in]*/ enum ksLoadStateEnum Type,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_OpenSourceDocument (
        /*[in]*/ struct IOpenDocumentParam * Param,
        /*[out,retval]*/ struct IKompasDocument3D * * Result ) = 0;
      virtual HRESULT __stdcall get_ZonesManager (
        /*[out,retval]*/ struct IZonesManager * * PVal ) = 0;
      virtual HRESULT __stdcall put_InheritExclude (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InheritExclude (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_PartsGroupNumber (
        /*[out,retval]*/ long * PVal ) = 0;
      virtual HRESULT __stdcall put_PartsGroupNumber (
        /*[in]*/ long PVal ) = 0;
      virtual HRESULT __stdcall raw_IsLocalResultExist (
        /*[in]*/ VARIANT_BOOL Reqursive,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall put_RevealComposition (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_RevealComposition (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_InheritVisible (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_InheritVisible (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_TransformPoint (
        /*[in,out]*/ double * X,
        /*[in,out]*/ double * Y,
        /*[in,out]*/ double * Z,
        /*[in]*/ struct IPart7 * Part,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_TransformPoints (
        /*[in,out]*/ VARIANT * Points,
        /*[in]*/ struct IPart7 * Part,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetSummMatrix (
        /*[in]*/ struct IPart7 * Part,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_FindBody (
        /*[in]*/ BSTR UniqueMetaObjectKey,
        /*[out,retval]*/ struct IBody7 * * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetSimilarInstances (
        /*[in]*/ struct IPart7 * Part,
        /*[out,retval]*/ VARIANT * Objects ) = 0;
      virtual HRESULT __stdcall raw_FindSimilarObject (
        /*[in]*/ struct IModelObject * Obj,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
};

struct __declspec(uuid("42f8fcef-e56f-466c-8814-bebac0719ae6"))
IParts7 : IModelObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetPart))
    IPart7Ptr Part[];

    //
    // Wrapper methods for error-handling
    //

    IPart7Ptr GetPart (
        const _variant_t & Index );
    IPart7Ptr AddFromFile (
        _bstr_t FileName,
        VARIANT_BOOL ExternalFile,
        VARIANT_BOOL Redraw );
    IPart7Ptr Add (
        _bstr_t FileName,
        struct IModelObject * Plane );
    IPart7Ptr CreateDocument (
        enum DocumentTypeEnum Type,
        VARIANT_BOOL Local,
        VARIANT_BOOL Redraw );
    IPart7Ptr CreateDocumentEx (
        _bstr_t StartFileName,
        enum DocumentTypeEnum Type,
        VARIANT_BOOL Local,
        VARIANT_BOOL Redraw );
    IPart7Ptr SaveAsDetail (
        const _variant_t & Objects,
        struct ISaveAsDetailParam * Param );
    VARIANT_BOOL MoveParts (
        const _variant_t & Parts );
    IPart7Ptr CreateSubAssembly (
        const _variant_t & Parts,
        _bstr_t FileName );
    IPart7Ptr FindPart (
        _bstr_t UniqueMetaObjectKey,
        VARIANT_BOOL Reqursive );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Part (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_AddFromFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL ExternalFile,
        /*[in]*/ VARIANT_BOOL Redraw,
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IModelObject * Plane,
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_CreateDocument (
        /*[in]*/ enum DocumentTypeEnum Type,
        /*[in]*/ VARIANT_BOOL Local,
        /*[in]*/ VARIANT_BOOL Redraw,
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_CreateDocumentEx (
        /*[in]*/ BSTR StartFileName,
        /*[in]*/ enum DocumentTypeEnum Type,
        /*[in]*/ VARIANT_BOOL Local,
        /*[in]*/ VARIANT_BOOL Redraw,
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_SaveAsDetail (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ struct ISaveAsDetailParam * Param,
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_MoveParts (
        /*[in]*/ VARIANT Parts,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_CreateSubAssembly (
        /*[in]*/ VARIANT Parts,
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_FindPart (
        /*[in]*/ BSTR UniqueMetaObjectKey,
        /*[in]*/ VARIANT_BOOL Reqursive,
        /*[out,retval]*/ struct IPart7 * * Result ) = 0;
};

struct __declspec(uuid("83dbb66a-83b8-47d9-93fe-2a90992193e8"))
IEmbodiment : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMass))
    double Mass;
    __declspec(property(get=GetDensity))
    double Density;
    __declspec(property(get=GetMaterial))
    _bstr_t Material;
    __declspec(property(get=GetIsCurrent,put=PutIsCurrent))
    VARIANT_BOOL IsCurrent;
    __declspec(property(get=GetOwner))
    IEmbodimentPtr Owner;
    __declspec(property(get=GetEmbodiment))
    IEmbodimentPtr Embodiment[];
    __declspec(property(get=GetEmbodimentsCount))
    long EmbodimentsCount;
    __declspec(property(get=GetSpecRough))
    ISpecRough3DPtr SpecRough;
    __declspec(property(get=GetLeftHandedCS,put=PutLeftHandedCS))
    VARIANT_BOOL LeftHandedCS;
    __declspec(property(get=GetPart))
    IPart7Ptr Part;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetMarking (
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL AddSystemDelimer );
    VARIANT_BOOL SetMarking (
        enum ksVariantMarkingTypeEnum MarkingType,
        _bstr_t Marking );
    double GetMass ( );
    double GetDensity ( );
    _bstr_t GetMaterial ( );
    VARIANT_BOOL SetMaterial (
        _bstr_t Name,
        double Density );
    VARIANT_BOOL Update ( );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL GetIsCurrent ( );
    void PutIsCurrent (
        VARIANT_BOOL PVal );
    IEmbodimentPtr GetOwner ( );
    IEmbodimentPtr GetEmbodiment (
        long Index );
    long GetEmbodimentsCount ( );
    ISpecRough3DPtr GetSpecRough ( );
    void PutLeftHandedCS (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetLeftHandedCS ( );
    IPart7Ptr GetPart ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_GetMarking (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL AddSystemDelimer,
        /*[out,retval]*/ BSTR * Marking ) = 0;
      virtual HRESULT __stdcall raw_SetMarking (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ BSTR Marking,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_Mass (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaterial (
        /*[in]*/ BSTR Name,
        /*[in]*/ double Density,
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_IsCurrent (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_IsCurrent (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Owner (
        /*[out,retval]*/ struct IEmbodiment * * PVal ) = 0;
      virtual HRESULT __stdcall get_Embodiment (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IEmbodiment * * PVal ) = 0;
      virtual HRESULT __stdcall get_EmbodimentsCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_SpecRough (
        /*[out,retval]*/ struct ISpecRough3D * * PVal ) = 0;
      virtual HRESULT __stdcall put_LeftHandedCS (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_LeftHandedCS (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IPart7 * * PVal ) = 0;
};

struct __declspec(uuid("c1948ce8-0933-4d75-9446-3e143928d045"))
IEmbodimentsManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentEmbodimentIndex))
    long CurrentEmbodimentIndex;
    __declspec(property(get=GetEmbodimentCount))
    long EmbodimentCount;
    __declspec(property(get=GetEmbodiment))
    IEmbodimentPtr Embodiment[];
    __declspec(property(get=GetTopEmbodiment))
    IEmbodimentPtr TopEmbodiment;
    __declspec(property(get=GetCurrentEmbodiment))
    IEmbodimentPtr CurrentEmbodiment;
    __declspec(property(get=GetEmbodimentAdditionalNumber,put=PutEmbodimentAdditionalNumber))
    _bstr_t EmbodimentAdditionalNumber;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEmbodimentsTree (
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL AddSystemDelimer,
        VARIANT_BOOL AddSpaces );
    _bstr_t GetCurrentEmbodimentMarking (
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL AddSystemDelimer );
    long GetCurrentEmbodimentIndex ( );
    VARIANT_BOOL SetCurrentEmbodiment (
        const _variant_t & Index );
    VARIANT_BOOL AddEmbodiment (
        const _variant_t & ParentIndex,
        VARIANT_BOOL Depended,
        _bstr_t BaseMarking,
        _bstr_t EmbodimentNumber,
        _bstr_t AdditionalNumber );
    VARIANT_BOOL DeleteEmbodiment (
        const _variant_t & Index );
    _bstr_t GetEmbodimentMarking (
        long Index,
        enum ksVariantMarkingTypeEnum MarkingType,
        VARIANT_BOOL AddSystemDelimer );
    VARIANT_BOOL SetEmbodimentMarking (
        long Index,
        enum ksVariantMarkingTypeEnum MarkingType,
        _bstr_t Marking );
    long GetEmbodimentCount ( );
    IEmbodimentPtr GetEmbodiment (
        const _variant_t & Index );
    IEmbodimentPtr GetTopEmbodiment ( );
    IEmbodimentPtr GetCurrentEmbodiment ( );
    VARIANT_BOOL AddMirrorEmbodiment (
        const _variant_t & ParentIndex,
        _bstr_t BaseMarking,
        _bstr_t EmbodimentNumber,
        _bstr_t AdditionalNumber );
    _bstr_t GetEmbodimentAdditionalNumber ( );
    void PutEmbodimentAdditionalNumber (
        _bstr_t PVal );
    IEmbodimentPtr FindEmbodiment (
        _bstr_t UniqueMetaObjectKey );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEmbodimentsTree (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL AddSystemDelimer,
        /*[in]*/ VARIANT_BOOL AddSpaces,
        /*[out,retval]*/ VARIANT * Tree ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentEmbodimentMarking (
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL AddSystemDelimer,
        /*[out,retval]*/ BSTR * Marking ) = 0;
      virtual HRESULT __stdcall get_CurrentEmbodimentIndex (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentEmbodiment (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_AddEmbodiment (
        /*[in]*/ VARIANT ParentIndex,
        /*[in]*/ VARIANT_BOOL Depended,
        /*[in]*/ BSTR BaseMarking,
        /*[in]*/ BSTR EmbodimentNumber,
        /*[in]*/ BSTR AdditionalNumber,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_DeleteEmbodiment (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_GetEmbodimentMarking (
        /*[in]*/ long Index,
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ VARIANT_BOOL AddSystemDelimer,
        /*[out,retval]*/ BSTR * Marking ) = 0;
      virtual HRESULT __stdcall raw_SetEmbodimentMarking (
        /*[in]*/ long Index,
        /*[in]*/ enum ksVariantMarkingTypeEnum MarkingType,
        /*[in]*/ BSTR Marking,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EmbodimentCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Embodiment (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IEmbodiment * * PVal ) = 0;
      virtual HRESULT __stdcall get_TopEmbodiment (
        /*[out,retval]*/ struct IEmbodiment * * PVal ) = 0;
      virtual HRESULT __stdcall get_CurrentEmbodiment (
        /*[out,retval]*/ struct IEmbodiment * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddMirrorEmbodiment (
        /*[in]*/ VARIANT ParentIndex,
        /*[in]*/ BSTR BaseMarking,
        /*[in]*/ BSTR EmbodimentNumber,
        /*[in]*/ BSTR AdditionalNumber,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_EmbodimentAdditionalNumber (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall put_EmbodimentAdditionalNumber (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall raw_FindEmbodiment (
        /*[in]*/ BSTR UniqueMetaObjectKey,
        /*[out,retval]*/ struct IEmbodiment * * PVal ) = 0;
};

struct __declspec(uuid("698a8f34-5759-4fec-afef-c8b29d072e12"))
IMate3DDependentPosition : IMateConstraint3D
{
    //
    // Property data
    //

    __declspec(property(get=GetBySample,put=PutBySample))
    VARIANT_BOOL BySample;
    __declspec(property(get=GetSampleObject1,put=PutSampleObject1))
    IPart7Ptr SampleObject1;
    __declspec(property(get=GetSampleObject2,put=PutSampleObject2))
    IPart7Ptr SampleObject2;

    //
    // Wrapper methods for error-handling
    //

    void PutBySample (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetBySample ( );
    void PutSampleObject1 (
        struct IPart7 * PVal );
    IPart7Ptr GetSampleObject1 ( );
    void PutSampleObject2 (
        struct IPart7 * PVal );
    IPart7Ptr GetSampleObject2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BySample (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_BySample (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_SampleObject1 (
        /*[in]*/ struct IPart7 * PVal ) = 0;
      virtual HRESULT __stdcall get_SampleObject1 (
        /*[out,retval]*/ struct IPart7 * * PVal ) = 0;
      virtual HRESULT __stdcall put_SampleObject2 (
        /*[in]*/ struct IPart7 * PVal ) = 0;
      virtual HRESULT __stdcall get_SampleObject2 (
        /*[out,retval]*/ struct IPart7 * * PVal ) = 0;
};

struct __declspec(uuid("92ab02f7-2c68-4a74-9e74-70c51e015fef"))
IKompasDocument3D1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHideLayoutGeometry,put=PutHideLayoutGeometry))
    VARIANT_BOOL HideLayoutGeometry;
    __declspec(property(get=GetEditObject,put=PutEditObject))
    IFeature7Ptr EditObject;
    __declspec(property(get=GetDocument3DManager))
    IDocument3DManagerPtr Document3DManager;
    __declspec(property(get=GetSpecRough))
    ISpecRough3DPtr SpecRough;
    __declspec(property(get=GetMateConstraints))
    IMateConstraints3DPtr MateConstraints;
    __declspec(property(get=GetLibProcess))
    IProcess3DPtr LibProcess[];
    __declspec(property(get=GetIntervalVariables))
    _variant_t IntervalVariables;
    __declspec(property(get=GetIntervalVariable))
    IVariable7Ptr IntervalVariable[];
    __declspec(property(get=GetUserFuncVariables))
    _variant_t UserFuncVariables;
    __declspec(property(get=GetUserFuncVariable))
    IVariable7Ptr UserFuncVariable[];

    //
    // Wrapper methods for error-handling
    //

    void PutHideLayoutGeometry (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetHideLayoutGeometry ( );
    void PutEditObject (
        struct IFeature7 * Result );
    IFeature7Ptr GetEditObject ( );
    IDocument3DManagerPtr GetDocument3DManager ( );
    ISpecRough3DPtr GetSpecRough ( );
    VARIANT_BOOL ClearUndo ( );
    IMateConstraints3DPtr GetMateConstraints ( );
    VARIANT_BOOL ExcludeObjects (
        const _variant_t & Objects,
        VARIANT_BOOL Excl );
    VARIANT_BOOL ExecuteProcessOfInsertComponentFromFile (
        _bstr_t FileName,
        enum ProcessTypeEnum ProcessType );
    IProcess3DPtr GetLibProcess (
        enum ksProcess3DTypeEnum ProcessType );
    _variant_t PickModelObjects (
        const _variant_t & PickRay,
        struct IFindObject3DParameters * FilterParam );
    IModelObjectPtr FindNearestObject (
        const _variant_t & PickRay,
        struct IFindObject3DParameters * FilterParam );
    _variant_t GetIntervalVariables ( );
    IVariable7Ptr AddIntervalVariable (
        _bstr_t Name,
        double FirstValue,
        double SecondValue );
    IVariable7Ptr GetIntervalVariable (
        const _variant_t & Index );
    _variant_t GetUserFuncVariables ( );
    IVariable7Ptr AddUserFuncVariable (
        _bstr_t Name,
        _bstr_t Expression );
    IVariable7Ptr GetUserFuncVariable (
        const _variant_t & Index );
    IKompasAPIObjectPtr FindObjectByAssociationGeometry (
        struct IKompasAPIObject * Geometry );
    VARIANT_BOOL SetHiddenObjects (
        const _variant_t & Objects,
        VARIANT_BOOL Visible );
    VARIANT_BOOL CompleteRebuildDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HideLayoutGeometry (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_HideLayoutGeometry (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_EditObject (
        /*[in]*/ struct IFeature7 * Result ) = 0;
      virtual HRESULT __stdcall get_EditObject (
        /*[out,retval]*/ struct IFeature7 * * Result ) = 0;
      virtual HRESULT __stdcall get_Document3DManager (
        /*[out,retval]*/ struct IDocument3DManager * * PVal ) = 0;
      virtual HRESULT __stdcall get_SpecRough (
        /*[out,retval]*/ struct ISpecRough3D * * PVal ) = 0;
      virtual HRESULT __stdcall raw_ClearUndo (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_MateConstraints (
        /*[out,retval]*/ struct IMateConstraints3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_ExcludeObjects (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ VARIANT_BOOL Excl,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ExecuteProcessOfInsertComponentFromFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum ProcessTypeEnum ProcessType,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_LibProcess (
        /*[in]*/ enum ksProcess3DTypeEnum ProcessType,
        /*[out,retval]*/ struct IProcess3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_PickModelObjects (
        /*[in]*/ VARIANT PickRay,
        /*[in]*/ struct IFindObject3DParameters * FilterParam,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_FindNearestObject (
        /*[in]*/ VARIANT PickRay,
        /*[in]*/ struct IFindObject3DParameters * FilterParam,
        /*[out,retval]*/ struct IModelObject * * Result ) = 0;
      virtual HRESULT __stdcall get_IntervalVariables (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_AddIntervalVariable (
        /*[in]*/ BSTR Name,
        /*[in]*/ double FirstValue,
        /*[in]*/ double SecondValue,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_IntervalVariable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_UserFuncVariables (
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_AddUserFuncVariable (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Expression,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall get_UserFuncVariable (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IVariable7 * * Result ) = 0;
      virtual HRESULT __stdcall raw_FindObjectByAssociationGeometry (
        /*[in]*/ struct IKompasAPIObject * Geometry,
        /*[out,retval]*/ struct IKompasAPIObject * * Result ) = 0;
      virtual HRESULT __stdcall raw_SetHiddenObjects (
        /*[in]*/ VARIANT Objects,
        /*[in]*/ VARIANT_BOOL Visible,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_CompleteRebuildDocument (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("75f1ca7e-5071-4c1f-8a9f-f76a6e05caf6"))
IDocument3DManager : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLayers3D))
    ILayers3DPtr Layers3D;
    __declspec(property(get=GetLayersGroups3D))
    ILayerGroups3DPtr LayersGroups3D;
    __declspec(property(get=GetLayersDynamicGroups3D))
    ILayerGroups3DPtr LayersDynamicGroups3D;
    __declspec(property(get=GetPartsGroups))
    ILayers3DPtr PartsGroups;

    //
    // Wrapper methods for error-handling
    //

    ILayers3DPtr GetLayers3D ( );
    ILayerGroups3DPtr GetLayersGroups3D ( );
    ILayerGroups3DPtr GetLayersDynamicGroups3D ( );
    VARIANT_BOOL Update ( );
    ILayers3DPtr GetPartsGroups ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Layers3D (
        /*[out,retval]*/ struct ILayers3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_LayersGroups3D (
        /*[out,retval]*/ struct ILayerGroups3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_LayersDynamicGroups3D (
        /*[out,retval]*/ struct ILayerGroups3D * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_PartsGroups (
        /*[out,retval]*/ struct ILayers3D * * PVal ) = 0;
};

struct __declspec(uuid("d3f08d03-3bb2-4de6-95a9-38b5c05d8c12"))
ILayerGroups3D : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetLayerGroup3D))
    ILayerGroup3DPtr LayerGroup3D[];

    //
    // Wrapper methods for error-handling
    //

    ILayerGroup3DPtr GetLayerGroup3D (
        const _variant_t & Index );
    ILayerGroup3DPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LayerGroup3D (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ILayerGroup3D * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct ILayerGroup3D * * Result ) = 0;
};

struct __declspec(uuid("0b176bbc-51f5-4d31-a630-6a04207e4da1"))
ILayerGroup3D : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOwnerGroup))
    ILayerGroup3DPtr OwnerGroup;
    __declspec(property(get=GetLayerGroups))
    ILayerGroups3DPtr LayerGroups;
    __declspec(property(get=GetLayers))
    ILayers3DPtr Layers;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetUniqueId))
    double UniqueId;
    __declspec(property(get=GetLayerFilterConditions))
    ILayerFilterConditionsPtr LayerFilterConditions;

    //
    // Wrapper methods for error-handling
    //

    ILayerGroup3DPtr GetOwnerGroup ( );
    ILayerGroups3DPtr GetLayerGroups ( );
    ILayers3DPtr GetLayers ( );
    void PutName (
        _bstr_t PVal );
    _bstr_t GetName ( );
    VARIANT_BOOL Delete ( );
    double GetUniqueId ( );
    ILayerFilterConditionsPtr GetLayerFilterConditions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OwnerGroup (
        /*[out,retval]*/ struct ILayerGroup3D * * PVal ) = 0;
      virtual HRESULT __stdcall get_LayerGroups (
        /*[out,retval]*/ struct ILayerGroups3D * * Result ) = 0;
      virtual HRESULT __stdcall get_Layers (
        /*[out,retval]*/ struct ILayers3D * * Result ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR PVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_UniqueId (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_LayerFilterConditions (
        /*[out,retval]*/ struct ILayerFilterConditions * * PVal ) = 0;
};

struct __declspec(uuid("123c45bf-14de-433e-b3b0-2fb642a9a418"))
IBuildingAxis : IDrawingObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDoubleMark,put=PutDoubleMark))
    VARIANT_BOOL DoubleMark;
    __declspec(property(get=GetMarkSize,put=PutMarkSize))
    double MarkSize;
    __declspec(property(get=GetDottedLength,put=PutDottedLength))
    double DottedLength;
    __declspec(property(get=GetInterval,put=PutInterval))
    double Interval;
    __declspec(property(get=GetStroke,put=PutStroke))
    double Stroke;
    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetTextBefore))
    ITextPtr TextBefore;
    __declspec(property(get=GetTextAfter))
    ITextPtr TextAfter;
    __declspec(property(get=GetAutoStroke,put=PutAutoStroke))
    VARIANT_BOOL AutoStroke;

    //
    // Wrapper methods for error-handling
    //

    void PutDoubleMark (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDoubleMark ( );
    void PutMarkSize (
        double PVal );
    double GetMarkSize ( );
    void PutDottedLength (
        double PVal );
    double GetDottedLength ( );
    void PutInterval (
        double PVal );
    double GetInterval ( );
    void PutStroke (
        double PVal );
    double GetStroke ( );
    ITextPtr GetText ( );
    ITextPtr GetTextBefore ( );
    ITextPtr GetTextAfter ( );
    void PutAutoStroke (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetAutoStroke ( );
    VARIANT_BOOL GetInsertionPoints (
        VARIANT_BOOL First,
        VARIANT * Points,
        VARIANT * Directions,
        VARIANT * Nodes );
    IMarkNodePtr GetNodeByPoint (
        double X,
        double Y,
        double Limit );
    IMarkNodePtr AddNodeByPoint (
        enum ksMarkNodeEnum Type,
        double X,
        double Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DoubleMark (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DoubleMark (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_MarkSize (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_MarkSize (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_DottedLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_DottedLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Interval (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Interval (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Stroke (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Stroke (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextBefore (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_TextAfter (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall put_AutoStroke (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_AutoStroke (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall raw_GetInsertionPoints (
        /*[in]*/ VARIANT_BOOL First,
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Directions,
        /*[out]*/ VARIANT * Nodes,
        /*[out,retval]*/ VARIANT_BOOL * RetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNodeByPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Limit,
        /*[out,retval]*/ struct IMarkNode * * PVal ) = 0;
      virtual HRESULT __stdcall raw_AddNodeByPoint (
        /*[in]*/ enum ksMarkNodeEnum Type,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ struct IMarkNode * * PVal ) = 0;
};

struct __declspec(uuid("18072e1d-1802-41f5-a434-04bb9d3f157f"))
IBuildingAxes : IDrawingObjects
{
    //
    // Property data
    //

    __declspec(property(get=GetBuildingAxis))
    IBuildingAxisPtr BuildingAxis[];

    //
    // Wrapper methods for error-handling
    //

    IBuildingAxisPtr GetBuildingAxis (
        const _variant_t & Index );
    IBuildingAxisPtr Add (
        enum DrawingObjectTypeEnum AxisType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingAxis (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IBuildingAxis * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum DrawingObjectTypeEnum AxisType,
        /*[out,retval]*/ struct IBuildingAxis * * Result ) = 0;
};

struct __declspec(uuid("fd1fd236-f5ba-4fb0-a872-21fc13e6895f"))
IBuildingContainer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnitMarkings))
    IUnitMarkingsPtr UnitMarkings;
    __declspec(property(get=GetMultiTextLeaders))
    IMultiTextLeadersPtr MultiTextLeaders;
    __declspec(property(get=GetUnitNumbers))
    IUnitNumbersPtr UnitNumbers;
    __declspec(property(get=GetBraces))
    IBracesPtr Braces;
    __declspec(property(get=GetBuildingCutLines))
    ICutLinesPtr BuildingCutLines;
    __declspec(property(get=GetBuildingAxes))
    IBuildingAxesPtr BuildingAxes;
    __declspec(property(get=GetMarks))
    IMarksPtr Marks;
    __declspec(property(get=GetCutUnitMarkings))
    ICutUnitMarkingsPtr CutUnitMarkings;

    //
    // Wrapper methods for error-handling
    //

    IBuildingAxesPtr GetBuildingAxes ( );
    IMarksPtr GetMarks ( );
    ICutUnitMarkingsPtr GetCutUnitMarkings ( );
    IUnitMarkingsPtr GetUnitMarkings ( );
    IMultiTextLeadersPtr GetMultiTextLeaders ( );
    IUnitNumbersPtr GetUnitNumbers ( );
    IBracesPtr GetBraces ( );
    ICutLinesPtr GetBuildingCutLines ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuildingAxes (
        /*[out,retval]*/ struct IBuildingAxes * * PVal ) = 0;
      virtual HRESULT __stdcall get_Marks (
        /*[out,retval]*/ struct IMarks * * PVal ) = 0;
      virtual HRESULT __stdcall get_CutUnitMarkings (
        /*[out,retval]*/ struct ICutUnitMarkings * * PVal ) = 0;
      virtual HRESULT __stdcall get_UnitMarkings (
        /*[out,retval]*/ struct IUnitMarkings * * PVal ) = 0;
      virtual HRESULT __stdcall get_MultiTextLeaders (
        /*[out,retval]*/ struct IMultiTextLeaders * * PVal ) = 0;
      virtual HRESULT __stdcall get_UnitNumbers (
        /*[out,retval]*/ struct IUnitNumbers * * PVal ) = 0;
      virtual HRESULT __stdcall get_Braces (
        /*[out,retval]*/ struct IBraces * * PVal ) = 0;
      virtual HRESULT __stdcall get_BuildingCutLines (
        /*[out,retval]*/ struct ICutLines * * PVal ) = 0;
};

struct __declspec(uuid("5ac48e97-80b1-459f-9709-1f3f374559be"))
IMarkNode : IKompasAPIObject
{
    //
    // Property data
    //

    __declspec(property(get=GetMarkType,put=PutMarkType))
    enum ksMarkNodeEnum MarkType;
    __declspec(property(get=GetDoubleMark,put=PutDoubleMark))
    VARIANT_BOOL DoubleMark;
    __declspec(property(get=GetRefLength,put=PutRefLength))
    double RefLength;
    __declspec(property(get=GetText))
    ITextPtr Text;
    __declspec(property(get=GetMarkNodes))
    IMarkNodesPtr MarkNodes[];

    //
    // Wrapper methods for error-handling
    //

    void PutMarkType (
        enum ksMarkNodeEnum Val );
    enum ksMarkNodeEnum GetMarkType ( );
    void PutDoubleMark (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDoubleMark ( );
    void PutRefLength (
        double PVal );
    double GetRefLength ( );
    ITextPtr GetText ( );
    IMarkNodesPtr GetMarkNodes (
        VARIANT_BOOL Left );
    VARIANT_BOOL Delete ( );
    VARIANT_BOOL GetInsertionPoints (
        VARIANT_BOOL LeftJut,
        VARIANT * Points,
        VARIANT * Directions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_MarkType (
        /*[in]*/ enum ksMarkNodeEnum Val ) = 0;
      virtual HRESULT __stdcall get_MarkType (
        /*[out,retval]*/ enum ksMarkNodeEnum * Val ) = 0;
      virtual HRESULT __stdcall put_DoubleMark (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_DoubleMark (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall put_RefLength (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_RefLength (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IText * * PVal ) = 0;
      virtual HRESULT __stdcall get_MarkNodes (
        /*[in]*/ VARIANT_BOOL Left,
        /*[out,retval]*/ struct IMarkNodes * * PVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * PRes ) = 0;
      virtual HRESULT __stdcall raw_GetInsertionPoints (
        /*[in]*/ VARIANT_BOOL LeftJut,
        /*[out]*/ VARIANT * Points,
        /*[out]*/ VARIANT * Directions,
        /*[out,retval]*/ VARIANT_BOOL * RetVal ) = 0;
};

struct __declspec(uuid("eb8acd77-8008-4f89-a311-2f4712462f72"))
IMarkNodes : IKompasCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IMarkNodePtr Item[];

    //
    // Wrapper methods for error-handling
    //

    IMarkNodePtr GetItem (
        const _variant_t & Index );
    IMarkNodePtr Add (
        enum ksMarkNodeEnum Type,
        const _variant_t & Index );
    VARIANT_BOOL Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMarkNode * * Result ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum ksMarkNodeEnum Type,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IMarkNode * * Result ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("7b2820e0-2cb7-4412-9b96-f291dd790448"))
IStraightAxis : IBuildingAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetJut))
    IAxisJutPtr Jut[];
    __declspec(property(get=GetMarkNodes))
    IMarkNodesPtr MarkNodes;

    //
    // Wrapper methods for error-handling
    //

    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutLength (
        double PVal );
    double GetLength ( );
    void PutAngle (
        double PVal );
    double GetAngle ( );
    IAxisJutPtr GetJut (
        VARIANT_BOOL First );
    IMarkNodesPtr GetMarkNodes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall get_Jut (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IAxisJut * * PRes ) = 0;
      virtual HRESULT __stdcall get_MarkNodes (
        /*[out,retval]*/ struct IMarkNodes * * PVal ) = 0;
};

struct __declspec(uuid("daa9755a-3971-4713-b281-15995cbf2e56"))
IArcAxis : IBuildingAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDirection,put=PutDirection))
    VARIANT_BOOL Direction;
    __declspec(property(get=GetJut))
    IAxisJutPtr Jut[];
    __declspec(property(get=GetMarkNodes))
    IMarkNodesPtr MarkNodes;
    __declspec(property(get=GetX3,put=PutX3))
    double X3;
    __declspec(property(get=GetY3,put=PutY3))
    double Y3;

    //
    // Wrapper methods for error-handling
    //

    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutX1 (
        double PVal );
    double GetX1 ( );
    void PutY1 (
        double PVal );
    double GetY1 ( );
    void PutX2 (
        double PVal );
    double GetX2 ( );
    void PutY2 (
        double PVal );
    double GetY2 ( );
    void PutAngle1 (
        double PVal );
    double GetAngle1 ( );
    void PutAngle2 (
        double PVal );
    double GetAngle2 ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutDirection (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetDirection ( );
    IAxisJutPtr GetJut (
        VARIANT_BOOL First );
    IMarkNodesPtr GetMarkNodes ( );
    void PutX3 (
        double PVal );
    double GetX3 ( );
    void PutY3 (
        double PVal );
    double GetY3 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_Jut (
        /*[in]*/ VARIANT_BOOL First,
        /*[out,retval]*/ struct IAxisJut * * PRes ) = 0;
      virtual HRESULT __stdcall get_MarkNodes (
        /*[out,retval]*/ struct IMarkNodes * * PVal ) = 0;
      virtual HRESULT __stdcall put_X3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_X3 (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Y3 (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Y3 (
        /*[out,retval]*/ double * PVal ) = 0;
};

struct __declspec(uuid("d84358fb-674c-4a5d-93ba-ee5d3342097b"))
ICircleAxis : IBuildingAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetXc,put=PutXc))
    double Xc;
    __declspec(property(get=GetYc,put=PutYc))
    double Yc;
    __declspec(property(get=GetMarkAngle,put=PutMarkAngle))
    double MarkAngle;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetMarkOn,put=PutMarkOn))
    VARIANT_BOOL MarkOn;
    __declspec(property(get=GetBaseMarkNode))
    IMarkNodePtr BaseMarkNode;

    //
    // Wrapper methods for error-handling
    //

    void PutXc (
        double PVal );
    double GetXc ( );
    void PutYc (
        double PVal );
    double GetYc ( );
    void PutMarkAngle (
        double PVal );
    double GetMarkAngle ( );
    void PutRadius (
        double PVal );
    double GetRadius ( );
    void PutMarkOn (
        VARIANT_BOOL PVal );
    VARIANT_BOOL GetMarkOn ( );
    IMarkNodePtr GetBaseMarkNode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Xc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Xc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Yc (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Yc (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MarkAngle (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_MarkAngle (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double PVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * PVal ) = 0;
      virtual HRESULT __stdcall put_MarkOn (
        /*[in]*/ VARIANT_BOOL PVal ) = 0;
      virtual HRESULT __stdcall get_MarkOn (
        /*[out,retval]*/ VARIANT_BOOL * PVal ) = 0;
      virtual HRESULT __stdcall get_BaseMarkNode (
        /*[out,retval]*/ struct IMarkNode * * PVal ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_KompasAPI7 =
    {0x69ac2981,0x37c0,0x4379,{0x84,0xfd,0x5d,0xd2,0xf3,0xc0,0xa5,0x20}};
extern "C" const GUID __declspec(selectany) IID_ISaveAsDetailParam =
    {0xf65db4ac,0x06b4,0x4c93,{0xbd,0x34,0x7b,0x4f,0xd6,0x5e,0x94,0x21}};
extern "C" const GUID __declspec(selectany) IID_IHatchParam =
    {0x437d6587,0x7649,0x4a0c,{0x80,0xbb,0x7a,0x6e,0x89,0x66,0x18,0x39}};
extern "C" const GUID __declspec(selectany) IID_IDimensionParams =
    {0x534518cc,0x6577,0x4273,{0x88,0x7a,0x6b,0x83,0x3f,0xde,0x6e,0xd7}};
extern "C" const GUID __declspec(selectany) IID_ILoadCombination =
    {0xe7f1fd16,0xb641,0x4264,{0x85,0x9c,0xd4,0x72,0x17,0xda,0x8b,0x04}};
extern "C" const GUID __declspec(selectany) IID_IFrameTreesManager =
    {0xb9019350,0xff1d,0x4161,{0xb4,0x1b,0xcd,0x1b,0x02,0x0e,0xcf,0x36}};
extern "C" const GUID __declspec(selectany) IID_IPrintJob_OutputParameters =
    {0xcb083231,0xee0d,0x4596,{0xb0,0x4d,0xe6,0xa0,0x20,0x92,0x65,0x57}};
extern "C" const GUID __declspec(selectany) IID_IPrintJob_PrinterSettings =
    {0x095ce8c1,0xb2e7,0x4417,{0xab,0x3d,0xcc,0xe0,0x14,0x80,0xc0,0x8e}};
extern "C" const GUID __declspec(selectany) IID_ISaveToPreviusParam7 =
    {0xab64a064,0x53e7,0x4adc,{0xbf,0x40,0x3b,0xfc,0x04,0xd9,0x39,0x63}};
extern "C" const GUID __declspec(selectany) IID_IUserMetadataManager =
    {0xdc982411,0xcf10,0x4c00,{0x94,0x6b,0xb5,0x33,0x84,0x48,0x56,0x8a}};
extern "C" const GUID __declspec(selectany) IID_IIntervalVariable =
    {0x9f627059,0x04f9,0x4b14,{0x9c,0x9d,0xeb,0xdf,0x7f,0xb8,0x3e,0x48}};
extern "C" const GUID __declspec(selectany) IID_IReportFilter =
    {0x9d111c31,0x1629,0x4a0b,{0x89,0xe5,0x84,0x61,0xcd,0xfa,0x21,0x57}};
extern "C" const GUID __declspec(selectany) IID_IReportObjectsFilter =
    {0x88803908,0xb243,0x47b0,{0xa3,0x88,0x9e,0x05,0x9c,0xfa,0x8e,0x54}};
extern "C" const GUID __declspec(selectany) IID_IReportParam =
    {0xa1af048d,0x93c0,0x4c21,{0x90,0x64,0xd4,0x37,0xa7,0x1d,0x7d,0x53}};
extern "C" const GUID __declspec(selectany) IID_IPropertyControl1 =
    {0x7d2a79ff,0xec54,0x4480,{0xb9,0xf3,0x46,0xf7,0x52,0x93,0xb5,0x58}};
extern "C" const GUID __declspec(selectany) IID_IPropertyToolBar =
    {0xc2523b7e,0xeb4b,0x45db,{0x8e,0x3b,0x9d,0x6c,0xce,0xd9,0x93,0x33}};
extern "C" const GUID __declspec(selectany) IID_IProcessInfoWindow =
    {0x06f93fbf,0xc65a,0x49b1,{0x83,0xdb,0xc7,0x36,0xba,0x33,0xf0,0xa5}};
extern "C" const GUID __declspec(selectany) IID_IProcessContextIconMenu =
    {0x3f23fd10,0x1526,0x414d,{0x93,0xbc,0xab,0x27,0x37,0x94,0xf6,0x54}};
extern "C" const GUID __declspec(selectany) IID_IEditDoubleManipulator =
    {0x89d98e20,0xa4f4,0x4f49,{0x8f,0xdf,0xfe,0x4d,0xc2,0x8f,0x20,0x8f}};
extern "C" const GUID __declspec(selectany) IID_IAssociationViewElements =
    {0xe4e42871,0xe799,0x4273,{0x8e,0xdb,0xe5,0xef,0x83,0xcc,0x66,0xc2}};
extern "C" const GUID __declspec(selectany) IID_IBreakViewParam =
    {0x1b94c65d,0x3473,0x4ff2,{0xb1,0x85,0x0b,0x1c,0x2c,0x98,0xfc,0xae}};
extern "C" const GUID __declspec(selectany) IID_ITexturesParam =
    {0x6eda87c9,0x26c9,0x4040,{0xae,0x48,0x33,0xad,0x3e,0xa9,0x24,0x4f}};
extern "C" const GUID __declspec(selectany) IID_IAutoSortObjectsParameters =
    {0xbec74a2d,0x02e9,0x46be,{0x9d,0xe4,0xfc,0x09,0x12,0x0c,0xa0,0x10}};
extern "C" const GUID __declspec(selectany) IID_IDrawingDocumentSettings =
    {0x0dc39fc2,0x4fb1,0x489e,{0xa7,0x6e,0xe4,0x74,0x13,0x19,0x9f,0xa3}};
extern "C" const GUID __declspec(selectany) IID_IFragmentDocumentSettings =
    {0xa33d05cf,0xefff,0x4bbe,{0x9b,0xe0,0x15,0xd2,0x83,0x42,0x58,0x28}};
extern "C" const GUID __declspec(selectany) IID_ILibItemSettings =
    {0xc474582a,0x2ad4,0x4ed5,{0xa8,0x6a,0xa1,0x69,0xc4,0xda,0x5d,0x54}};
extern "C" const GUID __declspec(selectany) IID_IColorParam7 =
    {0xbe6a80ee,0x38fe,0x4432,{0x83,0x31,0xbf,0x86,0x48,0x30,0x76,0x1c}};
extern "C" const GUID __declspec(selectany) IID_INewDocument3DSettings =
    {0x16777c2b,0x829d,0x4405,{0xb5,0xc7,0x71,0xea,0xfc,0xa1,0x7b,0xfa}};
extern "C" const GUID __declspec(selectany) IID_ISerializer =
    {0x040c027e,0xd385,0x4a7a,{0x96,0xbd,0x29,0x6d,0xf0,0xb9,0xe7,0x0e}};
extern "C" const GUID __declspec(selectany) IID_ICellFormat =
    {0x9f2f27e7,0x8fb2,0x4c6c,{0xa5,0x4d,0x35,0xdb,0x24,0x00,0x60,0xd8}};
extern "C" const GUID __declspec(selectany) IID_ICellBoundaries =
    {0x1e29e849,0x1d1e,0x4791,{0xbd,0x31,0x8e,0xf0,0x0e,0xd5,0xd1,0x18}};
extern "C" const GUID __declspec(selectany) IID_ITableRange =
    {0xd78e47dc,0x172b,0x4824,{0xa5,0x19,0x9b,0xc2,0xc0,0x38,0x7b,0x5c}};
extern "C" const GUID __declspec(selectany) DIID_ksPropertyManagerNotify =
    {0x5a89c538,0xe0dd,0x4c21,{0xb3,0xd1,0x3b,0xf6,0x5e,0xeb,0x8c,0x3e}};
extern "C" const GUID __declspec(selectany) DIID_ksPropertyUserControlNotify =
    {0x5a31bb02,0x026c,0x4419,{0xa0,0xff,0xa9,0x3c,0xf5,0x8d,0xca,0x99}};
extern "C" const GUID __declspec(selectany) DIID_ksDocumentFrameNotify =
    {0x6ecbb531,0x5609,0x4364,{0xac,0x92,0x7a,0x6a,0x21,0xd2,0x33,0x13}};
extern "C" const GUID __declspec(selectany) IID_IPaintObject =
    {0x4d14726d,0x0ec2,0x49ce,{0xb0,0x2c,0xfe,0xda,0xa6,0xd6,0x5b,0xbd}};
extern "C" const GUID __declspec(selectany) DIID_ksGLObject =
    {0xb1c65023,0xb908,0x4cad,{0x92,0x38,0xc5,0x02,0x65,0x20,0xe6,0x2c}};
extern "C" const GUID __declspec(selectany) IID_IGabaritObject =
    {0xb6674824,0xcd9d,0x4220,{0xb2,0xcb,0x9f,0x93,0x9a,0x9c,0x35,0xc8}};
extern "C" const GUID __declspec(selectany) DIID_ksDrawingObjectNotify =
    {0xe335a73f,0xdf27,0x4d33,{0x8c,0xbd,0xe9,0x28,0xf7,0x97,0xfb,0x94}};
extern "C" const GUID __declspec(selectany) DIID_ksViewsAndLayersManagerNotify =
    {0xfc04c62e,0xab0f,0x4614,{0xb3,0xd9,0x0e,0xa8,0x67,0x1c,0xeb,0x08}};
extern "C" const GUID __declspec(selectany) DIID_ksLibraryManagerNotify =
    {0x9b9cc387,0xe217,0x4eed,{0xbc,0xe9,0x9e,0x1d,0x64,0x5b,0x49,0xee}};
extern "C" const GUID __declspec(selectany) DIID_ksSpecificationDescriptionNotify =
    {0xa0da14e6,0x4f92,0x4d18,{0x8c,0xd1,0x2b,0xba,0xb6,0x95,0xce,0x13}};
extern "C" const GUID __declspec(selectany) DIID_ksSpecificationObjectNotify =
    {0x1c4dec41,0xa8ea,0x40ee,{0x9a,0xc8,0xf8,0x07,0x23,0x2d,0xb8,0x74}};
extern "C" const GUID __declspec(selectany) DIID_ksLayoutSheetsNotify =
    {0x58e30500,0x6073,0x4337,{0xbf,0xc1,0x32,0xa7,0x4e,0xa1,0x7d,0xe8}};
extern "C" const GUID __declspec(selectany) DIID_ksModelObjectNotify =
    {0x7b8e86e1,0x4304,0x449d,{0x9c,0xec,0x1b,0x14,0xf7,0x4a,0x16,0xfb}};
extern "C" const GUID __declspec(selectany) DIID_ksDocument3DNotify7 =
    {0xc784d45b,0x8c68,0x4189,{0x8f,0x27,0xa3,0xb0,0xd6,0xcf,0xae,0xb2}};
extern "C" const GUID __declspec(selectany) DIID_ksProcess2DNotify =
    {0x7278f9ec,0xac53,0x4861,{0x9e,0x9e,0x19,0x9b,0x59,0xf8,0x2a,0x9a}};
extern "C" const GUID __declspec(selectany) DIID_ksProcess3DNotify =
    {0xe896df8d,0x6be9,0x473a,{0xb7,0xb4,0x38,0x05,0x0c,0xde,0xf5,0x37}};
extern "C" const GUID __declspec(selectany) IID_IModelObjectNotifyResult =
    {0x73653933,0x51b5,0x49d6,{0x9e,0xf2,0x66,0x67,0x63,0x92,0x83,0xcc}};
extern "C" const GUID __declspec(selectany) DIID_ksContentDialogNotify =
    {0x7be2f563,0x98ad,0x4f96,{0x89,0x1e,0xc5,0x68,0xc0,0xcc,0xd6,0x1b}};
extern "C" const GUID __declspec(selectany) DIID_ksProcess3DManipulatorsNotify =
    {0x45b82b5c,0xd0b7,0x4ac5,{0x96,0x5c,0x26,0xb0,0x96,0x12,0xcb,0xf6}};
extern "C" const GUID __declspec(selectany) DIID_ksPLMObjectNotify =
    {0xb6db286d,0xa060,0x4107,{0xa6,0x93,0x19,0xd1,0x35,0xc4,0x77,0x51}};
extern "C" const GUID __declspec(selectany) DIID_ksFindObject3DParametersNotify =
    {0xf7694c56,0x6108,0x4b75,{0xba,0xc6,0x87,0xfb,0x24,0x68,0x31,0xf9}};
extern "C" const GUID __declspec(selectany) IID_IMassInertiaParam7 =
    {0x666c987f,0x2700,0x4c35,{0xb8,0xce,0xdb,0x8b,0xfb,0x5a,0xaf,0x02}};
extern "C" const GUID __declspec(selectany) IID_IThinParameters =
    {0xb90d597d,0x4213,0x4a59,{0x98,0xd4,0x0b,0x67,0xe7,0x19,0x55,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IChooseBodies7 =
    {0x7bf80daa,0x25f8,0x4aff,{0xaf,0xea,0xca,0xd3,0x90,0xd4,0x27,0x5d}};
extern "C" const GUID __declspec(selectany) IID_IChooseObjects =
    {0x6d2ee9a7,0x4c9f,0x4606,{0x91,0xa5,0x99,0x41,0xc2,0x07,0x01,0xe5}};
extern "C" const GUID __declspec(selectany) IID_ISourcePart7Params =
    {0xc9e03a9b,0x0a54,0x49ac,{0x93,0x97,0x8d,0xe4,0x46,0x5a,0x8d,0x1d}};
extern "C" const GUID __declspec(selectany) IID_IModelCurve3D =
    {0xeb4ab3a9,0x8e01,0x4952,{0x91,0x19,0xf8,0xd0,0x9d,0x95,0x72,0xd5}};
extern "C" const GUID __declspec(selectany) IID_IRotated1 =
    {0x094d83c7,0x70c3,0x45ea,{0xaa,0x20,0x14,0xe5,0x5e,0xfa,0x52,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IUserParameters =
    {0x2b32e33d,0xf898,0x4249,{0x90,0xe6,0x37,0x70,0xfe,0x3b,0xc9,0x06}};
extern "C" const GUID __declspec(selectany) IID_IThreadsParameters =
    {0x6dbf5262,0x75a5,0x4bb9,{0x8e,0xf6,0x15,0x9f,0x20,0x4b,0x49,0xd8}};
extern "C" const GUID __declspec(selectany) IID_IShellSurface =
    {0x6da1f459,0x7aae,0x4a07,{0x9a,0x7d,0xff,0x19,0xf8,0x99,0x7a,0xd5}};
extern "C" const GUID __declspec(selectany) IID_ITessellation7 =
    {0xca597ae6,0x2ece,0x4483,{0xa9,0x97,0x1a,0xfd,0x5a,0xbf,0x9d,0x3a}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalUndercut =
    {0x2cb2f820,0xa083,0x46e3,{0x83,0xf6,0x5a,0xc4,0xb2,0x70,0x78,0xa3}};
extern "C" const GUID __declspec(selectany) IID_IBranchs =
    {0xc8a55ab3,0xd6dd,0x49b8,{0x95,0xf0,0x71,0x64,0x75,0x85,0x5c,0x10}};
extern "C" const GUID __declspec(selectany) IID_IAxisLineParam =
    {0x620cc8eb,0xa5c0,0x4978,{0xbd,0x98,0x38,0x34,0x4d,0xc6,0xad,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IBoundariesObject =
    {0x7198c93a,0x7655,0x4347,{0x99,0x54,0xba,0x9a,0xa2,0x8d,0x06,0x08}};
extern "C" const GUID __declspec(selectany) IID_IAnnotativeObject =
    {0x0dbd7bcd,0xf78e,0x4bda,{0xbc,0xad,0x30,0x04,0xc6,0x0b,0x6d,0x06}};
extern "C" const GUID __declspec(selectany) CLSID_KompasDocument =
    {0xdbbb268e,0x19d3,0x40de,{0xb7,0x7c,0x98,0x7c,0xa1,0x5f,0xe7,0x11}};
extern "C" const GUID __declspec(selectany) CLSID__Application =
    {0x8c3719b5,0x0df2,0x4c12,{0x9c,0xa8,0x3a,0xf4,0x82,0x7a,0x3b,0xbb}};
extern "C" const GUID __declspec(selectany) CLSID_KompasInvisible7 =
    {0x1a4c2a9b,0x3b2a,0x49d1,{0xb7,0x5f,0x38,0x10,0xdd,0x4a,0x20,0x86}};
extern "C" const GUID __declspec(selectany) CLSID_Documents =
    {0x385647bd,0x89b1,0x4f2d,{0xa0,0x6e,0x4d,0xd8,0x29,0xee,0x09,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_DocumentFrame =
    {0x8bffc9b4,0x5fe7,0x4ec5,{0x8b,0xa5,0x0f,0xf8,0x52,0x0d,0x5f,0xf6}};
extern "C" const GUID __declspec(selectany) CLSID_DocumentFrames =
    {0xcc89942a,0x6fe5,0x4808,{0x8d,0xc8,0xff,0x46,0xd5,0x46,0xa8,0xeb}};
extern "C" const GUID __declspec(selectany) CLSID_ProcessParam =
    {0x4c33de6e,0xfeac,0x4c28,{0x9e,0xe0,0x32,0xc3,0x7f,0x8e,0x7a,0x48}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyControls =
    {0x74d54fdd,0x62d0,0x4544,{0x89,0xc9,0x99,0x96,0x12,0xef,0x6d,0xef}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyTab =
    {0x1c2a5766,0xb80a,0x4752,{0x85,0x09,0x21,0x75,0x74,0x96,0x5b,0xf3}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyTabs =
    {0x52110f5f,0x7bf2,0x4079,{0xb3,0xae,0xa7,0xb7,0x16,0xa7,0xeb,0x1e}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyEdit =
    {0xe4afcb78,0x574f,0x4960,{0x9d,0x92,0xb2,0x38,0x88,0xd7,0x00,0xcd}};
extern "C" const GUID __declspec(selectany) CLSID_PropertySeparator =
    {0x59da09ed,0x130f,0x43af,{0x86,0xb8,0xea,0xc8,0xe0,0xc7,0xd0,0xa2}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyList =
    {0x404cf845,0x9bf6,0x4aad,{0x97,0xa1,0xb9,0xa1,0x73,0xac,0xf9,0x6d}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyCheckBox =
    {0x8cf06399,0xb7eb,0x46eb,{0x8b,0x08,0x56,0x03,0xc5,0x89,0xfe,0x0f}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyMultiButton =
    {0xb734ca6e,0xca21,0x4ccd,{0xae,0xe8,0x94,0xbc,0x8f,0x9d,0x49,0x86}};
extern "C" const GUID __declspec(selectany) CLSID_PropertySlideBox =
    {0x9988ac8d,0x657b,0x4b2a,{0x83,0x38,0xec,0x31,0x5c,0xbb,0xa7,0x0e}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyUserControl =
    {0x725a98dc,0x9987,0x4a79,{0xbd,0xa2,0xf5,0x02,0x4e,0x2d,0x0f,0xf3}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyGrid =
    {0xf0f9573f,0xbe07,0x4251,{0x86,0xe5,0x2a,0xa2,0x4a,0xa3,0xd4,0x3a}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyManager =
    {0x1b9cbab1,0x99da,0x433e,{0x8d,0x4e,0x67,0x61,0xd1,0xab,0x9b,0x8a}};
extern "C" const GUID __declspec(selectany) CLSID_KompasDocument3D =
    {0x9237aafe,0x992b,0x4521,{0xbf,0x68,0x3a,0x0c,0x6d,0x7f,0x77,0x69}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingDocument =
    {0x5414b05f,0xa731,0x4369,{0xbb,0xd2,0x41,0x9b,0x5c,0xd9,0xd2,0xa2}};
extern "C" const GUID __declspec(selectany) CLSID_FragmentDocument =
    {0x86ca15da,0xa197,0x4993,{0xab,0x98,0x89,0x21,0xd1,0x56,0x11,0x4e}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationDocument =
    {0x2d43b764,0x4f8a,0x47a6,{0xaa,0xab,0x52,0xb5,0x9c,0xe5,0xa0,0x8d}};
extern "C" const GUID __declspec(selectany) CLSID_TextDocument =
    {0xf5cf81cf,0xf6c3,0x4d9c,{0xb3,0x93,0x6d,0xf5,0x32,0xbf,0xb4,0x5d}};
extern "C" const GUID __declspec(selectany) CLSID_PartDocument =
    {0x427d2e6b,0x8d4e,0x4f9f,{0x99,0xac,0xf9,0xe0,0xfb,0x22,0xd2,0x5c}};
extern "C" const GUID __declspec(selectany) CLSID_AssemblyDocument =
    {0x705b37c7,0xca52,0x4588,{0x98,0x0e,0x11,0x05,0xc9,0x19,0xe2,0x0c}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyTextButton =
    {0xd4f68e4e,0x2092,0x436a,{0xb6,0xfb,0xb8,0xa3,0x35,0xa6,0x71,0xfd}};
extern "C" const GUID __declspec(selectany) CLSID_PropertySpinEdit =
    {0xf4710743,0xa53b,0x4256,{0xa4,0x50,0x16,0xd0,0xd4,0x0c,0x87,0xaa}};
extern "C" const GUID __declspec(selectany) CLSID_ViewsAndLayersManager =
    {0x2e3092b1,0x3b1a,0x4060,{0xb2,0x02,0xb0,0xc6,0xf4,0x17,0x79,0x73}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingObject =
    {0x3310ac4a,0xdc93,0x4ab5,{0xb2,0xcd,0x53,0x91,0xe6,0xcb,0x37,0x0a}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingObjects =
    {0x5f90a46e,0xea28,0x4294,{0xb3,0x4f,0x14,0x5c,0x80,0x14,0x15,0x17}};
extern "C" const GUID __declspec(selectany) CLSID_Views =
    {0x675cdfc9,0x4ed8,0x4689,{0x8a,0x15,0xbe,0x9c,0xc8,0x5c,0xfb,0xdc}};
extern "C" const GUID __declspec(selectany) CLSID_View =
    {0xadbf03af,0x24d4,0x4ca8,{0xbf,0x0e,0x7f,0x6e,0x40,0x3d,0x4e,0x55}};
extern "C" const GUID __declspec(selectany) CLSID_AssociationView =
    {0x9f144f3a,0xa296,0x46c6,{0x99,0xc2,0x18,0x77,0xb8,0x3b,0x0e,0x63}};
extern "C" const GUID __declspec(selectany) CLSID_LayerGroups =
    {0xe53ffd4e,0x619d,0x4b9b,{0x9c,0x34,0x9c,0x23,0x66,0x8e,0x6f,0x4a}};
extern "C" const GUID __declspec(selectany) CLSID_LayerGroup =
    {0x5543c50a,0xb56d,0x48af,{0x87,0xc3,0x09,0xc1,0xb4,0x8c,0xbc,0x5a}};
extern "C" const GUID __declspec(selectany) CLSID_Layers =
    {0xc0402ed4,0xd1ab,0x4567,{0xbe,0x4f,0xaf,0xd8,0x8a,0xf8,0x48,0xec}};
extern "C" const GUID __declspec(selectany) CLSID_Layer =
    {0x392916b8,0x171e,0x4229,{0x9e,0x75,0x1d,0x51,0x4c,0x75,0xfb,0x17}};
extern "C" const GUID __declspec(selectany) CLSID_LayerFilterCondition =
    {0x21d31870,0x5ebc,0x42ce,{0x88,0x58,0xa3,0x08,0xe7,0xe4,0xb8,0xa4}};
extern "C" const GUID __declspec(selectany) CLSID_LayerFilterConditions =
    {0x9f90da69,0x2ca3,0x4c2e,{0xab,0x59,0x6b,0xb9,0xb0,0xe7,0xdf,0xb8}};
extern "C" const GUID __declspec(selectany) CLSID_DocumentSettings =
    {0x64964b4c,0x5a02,0x41d8,{0xb6,0xec,0xf7,0xcf,0x62,0x75,0x64,0xe6}};
extern "C" const GUID __declspec(selectany) CLSID_Document2DSettings =
    {0xebb0ee6b,0x305c,0x4448,{0x96,0x74,0x3f,0x50,0x72,0x60,0x6d,0x47}};
extern "C" const GUID __declspec(selectany) CLSID_LibraryManager =
    {0xaacb5896,0x8918,0x43cb,{0xa5,0xb4,0xf3,0xea,0xf4,0x5b,0xce,0xf7}};
extern "C" const GUID __declspec(selectany) CLSID_ProceduresLibrary =
    {0xe865b51e,0x8276,0x4f7e,{0xa2,0x0b,0x50,0x9d,0xc2,0x56,0x79,0xb1}};
extern "C" const GUID __declspec(selectany) CLSID_Procedures =
    {0x0ea0000e,0x9328,0x488d,{0xb6,0x11,0x9f,0x72,0xee,0xcc,0xd9,0x2d}};
extern "C" const GUID __declspec(selectany) CLSID_Procedure =
    {0x5d9929f6,0x3d65,0x4daf,{0xb1,0x46,0xa8,0x5f,0xa9,0x8f,0x23,0x56}};
extern "C" const GUID __declspec(selectany) CLSID_InsertsLibrary =
    {0x9a06d2a1,0xbcde,0x4c43,{0x88,0xa1,0x5a,0x49,0x14,0x69,0xbe,0x11}};
extern "C" const GUID __declspec(selectany) CLSID_Inserts =
    {0xf8527798,0xeb6e,0x43c6,{0xae,0x05,0x6f,0xa9,0x64,0xcf,0xd9,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_Insert =
    {0x5d1bd639,0x051f,0x48c5,{0xbc,0xa7,0x76,0x98,0xb4,0xd0,0x70,0xb4}};
extern "C" const GUID __declspec(selectany) CLSID_InsertsLibraries =
    {0x6c64bd39,0x1613,0x4ad4,{0xb5,0xba,0xb6,0xf3,0x8d,0x32,0xe8,0x2c}};
extern "C" const GUID __declspec(selectany) CLSID_ProceduresLibraries =
    {0xdbc3ac55,0x2823,0x4661,{0x97,0x40,0x54,0x84,0x3b,0xa7,0x2b,0x12}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationDescriptions =
    {0x77168b66,0x5a17,0x4694,{0xad,0xdf,0x84,0x8e,0x31,0x4e,0xe0,0xd1}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationDescription =
    {0xad076943,0xbf97,0x4802,{0x9d,0x4f,0xd2,0x8c,0x6c,0x41,0xe9,0x66}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationStyle =
    {0x7e9787dc,0x72ed,0x452d,{0x8e,0xf5,0xfd,0x3d,0x21,0x25,0x97,0x12}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationColumnStyles =
    {0xec3f7c56,0x6a3b,0x45ac,{0xbf,0x81,0x61,0x4b,0x7b,0x04,0x5b,0xaa}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationColumnStyle =
    {0xff5e4685,0x8914,0x4382,{0x97,0xc9,0xc7,0x3f,0xfe,0xd7,0x34,0x49}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationSectionStyles =
    {0x25b2edd7,0xfb95,0x4fe6,{0xba,0x9c,0xb2,0x96,0x53,0x1e,0xa6,0xc7}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationSectionStyle =
    {0xa862b550,0xcaed,0x48fd,{0x88,0x9d,0xc1,0x50,0x7a,0x30,0xd2,0x41}};
extern "C" const GUID __declspec(selectany) CLSID_AdditionalBlockStyles =
    {0x2a248d5e,0x8b8f,0x4f43,{0x91,0xec,0x10,0xc7,0xf0,0x2e,0x20,0x64}};
extern "C" const GUID __declspec(selectany) CLSID_AdditionalBlockStyle =
    {0x704bc0bd,0x189c,0x4b8b,{0xa9,0x7a,0xab,0x5f,0x0c,0x68,0x97,0xef}};
extern "C" const GUID __declspec(selectany) CLSID_SheetFormat =
    {0xb872a3a8,0xc21f,0x487b,{0xa4,0x4d,0xb1,0x68,0x39,0x8e,0x01,0x4a}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationTuning =
    {0xc6410109,0x2800,0x476b,{0x82,0xee,0x20,0x2c,0x76,0x6b,0x51,0x5d}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationTuningSections =
    {0xb64e5fbc,0x99d3,0x4cbf,{0x98,0x9f,0x0f,0x83,0x2f,0x3c,0x7b,0x5f}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationTuningSection =
    {0x03d146c9,0x35d2,0x4fbf,{0xb0,0x51,0x05,0x37,0x11,0xfc,0xa5,0x1b}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationSubsections =
    {0x79130306,0x1fb8,0x49fd,{0x85,0xd2,0xa6,0xc2,0x35,0xb9,0x16,0x38}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationSubsection =
    {0xc82a6a36,0xcf62,0x43ce,{0xa1,0x80,0xfa,0x12,0x68,0xae,0x01,0x16}};
extern "C" const GUID __declspec(selectany) CLSID_AdditionalBlockTunings =
    {0xb6cc6f97,0xb1f1,0x42cf,{0xad,0xc7,0x78,0x75,0xb0,0x6a,0x70,0x89}};
extern "C" const GUID __declspec(selectany) CLSID_AdditionalBlockTuning =
    {0xd62780c1,0xedd6,0x49b6,{0xb6,0x19,0x04,0xe2,0x21,0x89,0xd2,0x88}};
extern "C" const GUID __declspec(selectany) CLSID_AdditionalBlockSectionTunings =
    {0x821a5929,0x98f3,0x4c67,{0xbc,0x2c,0xd3,0xa8,0xa1,0x44,0x20,0x86}};
extern "C" const GUID __declspec(selectany) CLSID_AdditionalBlockSectionTuning =
    {0x39bde053,0x03aa,0x4b95,{0x8e,0x25,0x5b,0x80,0x41,0xc7,0xbe,0x12}};
extern "C" const GUID __declspec(selectany) CLSID_TextFont =
    {0x7f52ddde,0xfd30,0x40df,{0x97,0xe9,0xb6,0x06,0xa0,0x05,0xfd,0x14}};
extern "C" const GUID __declspec(selectany) CLSID_TextStyle =
    {0x92523524,0x1e11,0x4193,{0xad,0x5f,0xe2,0x38,0x15,0x55,0xdc,0xc6}};
extern "C" const GUID __declspec(selectany) CLSID_Tabulators =
    {0xc0d50c82,0x511e,0x4554,{0x82,0x96,0xed,0xff,0x2a,0xe6,0x6c,0x4c}};
extern "C" const GUID __declspec(selectany) CLSID_Tabulator =
    {0xd65e21e0,0x4b98,0x401d,{0x86,0xb5,0x71,0x2e,0x0a,0xa5,0x6c,0xec}};
extern "C" const GUID __declspec(selectany) CLSID_KompasError =
    {0xa5b4db5f,0x0554,0x4d75,{0x91,0x5b,0x3f,0x83,0x8f,0x18,0xc8,0x09}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationBaseObjects =
    {0xe2fd0c57,0x3e8a,0x4ec2,{0xa1,0xe9,0x7b,0xeb,0x75,0xe3,0xab,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationCommentObjects =
    {0x77cfdebf,0x2df0,0x4b67,{0x88,0x25,0x78,0xdf,0x71,0x2a,0x04,0x97}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationObject =
    {0x77a64147,0x06a5,0x4843,{0x8c,0x6f,0xf0,0xe3,0x5f,0x0e,0xd9,0x51}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationBaseObject =
    {0x41fcdd59,0x6012,0x4e46,{0x84,0xdc,0x04,0x93,0x46,0x83,0xb0,0x98}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationCommentObject =
    {0x6f0354e0,0x9ab0,0x47ac,{0x80,0xe8,0x10,0xfb,0x48,0xc5,0x93,0x40}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationColumns =
    {0xa641e019,0x073f,0x49f5,{0x97,0xbc,0xa9,0xd5,0xff,0xb0,0x63,0xd8}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationColumn =
    {0xb5216b74,0x0577,0x41d5,{0x9b,0x62,0xc7,0x16,0x74,0xec,0x93,0x30}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationColumnItems =
    {0x86172cf0,0x0bed,0x46e0,{0xb2,0xe1,0xdd,0x43,0xab,0xf0,0x92,0x90}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationColumnItem =
    {0xd1a46669,0xaf0c,0x43ee,{0xac,0xb6,0xe7,0x65,0xd0,0x6b,0xed,0x4a}};
extern "C" const GUID __declspec(selectany) CLSID_AttachedDocuments =
    {0x7e97523d,0xc412,0x4da4,{0x9f,0xec,0xe4,0x76,0x9e,0x88,0xb3,0x40}};
extern "C" const GUID __declspec(selectany) CLSID_AttachedDocument =
    {0x30251a40,0x34ea,0x4da6,{0xa0,0xb0,0x66,0xe7,0xa5,0x56,0xa8,0x13}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyFileName =
    {0xbbb62ba6,0xac05,0x4d05,{0xbf,0xf2,0xbc,0x85,0x79,0xa2,0xc5,0xfc}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyColor =
    {0x77e6e019,0xa5a1,0x4318,{0xb9,0x8e,0xcd,0x97,0x0d,0x24,0x8e,0xa0}};
extern "C" const GUID __declspec(selectany) CLSID_LayoutSheets =
    {0x1ef17e36,0x3c4d,0x4c86,{0xad,0x1b,0x17,0xe7,0x44,0x07,0x5d,0xf8}};
extern "C" const GUID __declspec(selectany) CLSID_LayoutSheet =
    {0x5331e747,0x7833,0x4988,{0x92,0xca,0x90,0x28,0x31,0x60,0xdd,0xf6}};
extern "C" const GUID __declspec(selectany) CLSID_Converter =
    {0xa496a838,0x57f7,0x4bec,{0x99,0xff,0x51,0xd4,0x78,0x2c,0x60,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_CheckSum =
    {0xd3154740,0x6bf5,0x47f6,{0x9a,0x02,0x48,0x6f,0x78,0x19,0x07,0x91}};
extern "C" const GUID __declspec(selectany) CLSID_ModelObject =
    {0xdb0070f0,0xc367,0x4db5,{0xb7,0x22,0x9c,0xfe,0x69,0x89,0x56,0x57}};
extern "C" const GUID __declspec(selectany) CLSID_ModelObjects =
    {0xb0223eed,0x4659,0x4eac,{0xbd,0xa2,0x20,0xb0,0xfd,0xd4,0xe7,0xb7}};
extern "C" const GUID __declspec(selectany) CLSID_Parts7 =
    {0xcb826c3d,0x9968,0x4546,{0xbc,0xd7,0xba,0x65,0xf6,0xb8,0x49,0x02}};
extern "C" const GUID __declspec(selectany) CLSID_Part7 =
    {0x314057d1,0x5efd,0x4980,{0x8a,0xb8,0x4e,0x0c,0xc3,0xf7,0xe7,0x56}};
extern "C" const GUID __declspec(selectany) CLSID_Sketchs =
    {0x6f94d909,0xe9c7,0x4496,{0x8f,0x5b,0x01,0xf0,0xb0,0x3f,0xf4,0x09}};
extern "C" const GUID __declspec(selectany) CLSID_Extrusions =
    {0x2b4c99e4,0xfb5d,0x4d7d,{0xa4,0x4d,0x5b,0x89,0x8e,0x1f,0x5e,0x9e}};
extern "C" const GUID __declspec(selectany) CLSID_VariableTable =
    {0xb49fd0e4,0x26ac,0x48de,{0xad,0x0e,0x7d,0xfa,0x90,0x2d,0xf2,0xb7}};
extern "C" const GUID __declspec(selectany) CLSID_ProgressBarIndicator =
    {0x9361276c,0x70a0,0x4000,{0x82,0xd2,0x90,0xfb,0x54,0x6c,0x98,0xd4}};
extern "C" const GUID __declspec(selectany) CLSID_Text =
    {0x393ab030,0xf683,0x470c,{0x8f,0x4e,0xaa,0x93,0xbf,0x31,0x62,0xcc}};
extern "C" const GUID __declspec(selectany) CLSID_TextLine =
    {0xfdfd93bc,0x11c4,0x42a9,{0x9c,0x8f,0xa4,0xfb,0x20,0x62,0x74,0xb6}};
extern "C" const GUID __declspec(selectany) CLSID_TextItem =
    {0x58ced17b,0x2aa8,0x4df8,{0xb2,0x15,0x81,0x1d,0xde,0x72,0xdf,0x3c}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingText =
    {0x2e194b4e,0xf08d,0x4d62,{0xa9,0xb8,0x84,0x90,0x04,0xd8,0xd9,0x23}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingTexts =
    {0x5f4c3aa0,0x4b59,0x4eee,{0xab,0x00,0x53,0xce,0xa8,0x90,0x9f,0x66}};
extern "C" const GUID __declspec(selectany) CLSID_Marks =
    {0xc0dea6bf,0x0ad5,0x4c55,{0xad,0x3d,0xa3,0xf1,0x45,0x94,0x3e,0x47}};
extern "C" const GUID __declspec(selectany) CLSID_MarkInsideForm =
    {0xcdabb418,0x649a,0x4ab9,{0x8a,0x92,0xc5,0x17,0x89,0x07,0x59,0x12}};
extern "C" const GUID __declspec(selectany) CLSID_MarkOnLine =
    {0x84caa3bb,0x3e7a,0x4185,{0x82,0xbc,0x85,0xd4,0x10,0x2d,0x5d,0xef}};
extern "C" const GUID __declspec(selectany) CLSID_MarkOnLeader =
    {0xcf195c37,0xa915,0x48ca,{0x9f,0x6b,0x6b,0x38,0x45,0xfe,0xd0,0x5b}};
extern "C" const GUID __declspec(selectany) CLSID_UserDataStoragesMng =
    {0x13bcc1c9,0xc582,0x4616,{0x89,0xee,0x4c,0xd2,0x50,0x59,0x5c,0xc4}};
extern "C" const GUID __declspec(selectany) CLSID_UserDataStorages =
    {0x1b57d1cf,0xcbea,0x4dbc,{0x94,0x52,0x50,0xe3,0x67,0x78,0x49,0x58}};
extern "C" const GUID __declspec(selectany) CLSID_UserDataStorage =
    {0x4c7c5a7e,0xad2c,0x4b1f,{0x82,0xb9,0x73,0x47,0x68,0x37,0xe0,0x20}};
extern "C" const GUID __declspec(selectany) CLSID_BuildingAxes =
    {0xb879c6f6,0x5ab0,0x4bee,{0x88,0x72,0xfe,0x87,0xc6,0x21,0xf1,0x5b}};
extern "C" const GUID __declspec(selectany) CLSID_StraightAxis =
    {0x04728d73,0xa533,0x4c98,{0xb0,0xbf,0x92,0xa8,0xa0,0x2e,0x6f,0x4c}};
extern "C" const GUID __declspec(selectany) CLSID_ArcAxis =
    {0xae2c24d6,0x17e4,0x4e5f,{0xba,0x2b,0xed,0x62,0xac,0x23,0x23,0xec}};
extern "C" const GUID __declspec(selectany) CLSID_CircleAxis =
    {0x8a706e75,0x73ff,0x4fbf,{0x8d,0x3f,0x61,0xa1,0x35,0x13,0xc7,0xeb}};
extern "C" const GUID __declspec(selectany) CLSID_AxisJut =
    {0x97559604,0x8ccc,0x44e4,{0xb3,0x32,0x7e,0x16,0xc3,0x45,0x22,0xd5}};
extern "C" const GUID __declspec(selectany) CLSID_MarkNodes =
    {0x6681105e,0x35e0,0x4e76,{0x9e,0x64,0x0a,0xb8,0xb5,0x0e,0x61,0x49}};
extern "C" const GUID __declspec(selectany) CLSID_MarkNode =
    {0xb98ea663,0x66bc,0x46c0,{0xa8,0x6c,0x1f,0xe4,0x0a,0xf8,0xa3,0xd8}};
extern "C" const GUID __declspec(selectany) CLSID_LineSegments =
    {0xb7b673af,0x5e78,0x45aa,{0x8c,0x78,0x89,0x4d,0x1f,0x4f,0x77,0xac}};
extern "C" const GUID __declspec(selectany) CLSID_LineSegment =
    {0xee1993ad,0xcac2,0x421c,{0xb9,0xb1,0x13,0x1b,0xa1,0x64,0x66,0xcf}};
extern "C" const GUID __declspec(selectany) CLSID_SystemSettings =
    {0x31c4845e,0x508f,0x43f0,{0xa5,0x7f,0xe7,0x60,0x2a,0x0e,0x45,0xe6}};
extern "C" const GUID __declspec(selectany) CLSID_CutUnitMarking =
    {0xbe66b386,0x7d76,0x4afc,{0xac,0x47,0x52,0x1b,0x66,0x48,0xcb,0x8f}};
extern "C" const GUID __declspec(selectany) CLSID_CutUnitMarkings =
    {0xddeff219,0xe3bc,0x457f,{0x87,0xff,0x3c,0x3a,0xdc,0xfa,0x72,0x0e}};
extern "C" const GUID __declspec(selectany) CLSID_UnitMarking =
    {0x82be653c,0x832a,0x4611,{0x94,0x1f,0xd2,0x7b,0xe7,0x33,0x53,0x0b}};
extern "C" const GUID __declspec(selectany) CLSID_UnitMarkings =
    {0x2156b173,0xa854,0x4714,{0xbe,0x90,0x6f,0x9a,0xde,0x48,0xe2,0xaf}};
extern "C" const GUID __declspec(selectany) CLSID_Arcs =
    {0x307690ef,0x0e80,0x4cd1,{0x93,0xe1,0x49,0x28,0x8c,0x56,0x97,0xa7}};
extern "C" const GUID __declspec(selectany) CLSID__Arc =
    {0x6ba18a3d,0x28a8,0x47c3,{0xa9,0x7c,0xe3,0x24,0x28,0x2f,0x93,0xfd}};
extern "C" const GUID __declspec(selectany) CLSID_MultiTextLeader =
    {0x123d60bb,0x0331,0x4726,{0x97,0x07,0x77,0x76,0x15,0xe9,0xd3,0x54}};
extern "C" const GUID __declspec(selectany) CLSID_MultiTextLeaders =
    {0xaf30b851,0x0ae8,0x4f62,{0xb7,0xdb,0x1d,0xf5,0x2d,0x93,0x16,0xf2}};
extern "C" const GUID __declspec(selectany) CLSID_Brace =
    {0x2df7a8f9,0xcb3b,0x499e,{0x86,0x7f,0x81,0xba,0x5b,0x41,0xed,0x57}};
extern "C" const GUID __declspec(selectany) CLSID_Braces =
    {0x82cd752f,0xbc4f,0x45a2,{0x9f,0xe9,0x8a,0xb0,0x1f,0xda,0xf6,0xc9}};
extern "C" const GUID __declspec(selectany) CLSID_UnitNumber =
    {0x515c7a0d,0x0120,0x4cc4,{0xa5,0xf0,0x67,0x47,0x3d,0x7d,0x95,0xd3}};
extern "C" const GUID __declspec(selectany) CLSID_UnitNumbers =
    {0x624e4c7c,0x156c,0x4fd9,{0x8d,0xa8,0xce,0xb9,0x75,0x08,0x60,0xd1}};
extern "C" const GUID __declspec(selectany) CLSID_Sketch =
    {0xfc43ea04,0xaded,0x4d42,{0x88,0x3a,0x11,0x07,0x3e,0x2e,0x68,0xec}};
extern "C" const GUID __declspec(selectany) CLSID_Extrusion =
    {0x9d3caf4c,0x4d9d,0x40ec,{0xbe,0x5a,0x12,0xa3,0xac,0x59,0x50,0x07}};
extern "C" const GUID __declspec(selectany) CLSID_ParametriticConstraint =
    {0x7536f0bf,0x2857,0x4a01,{0xac,0xfa,0x5d,0xdf,0x1c,0x98,0x40,0xa8}};
extern "C" const GUID __declspec(selectany) CLSID_CutExtrusion =
    {0xb60b0f24,0x9069,0x4ab4,{0xb0,0xe4,0xdc,0x55,0x8a,0x6b,0xf4,0xa3}};
extern "C" const GUID __declspec(selectany) CLSID_Body7 =
    {0x29e7e8d5,0x7988,0x408f,{0xa0,0x2b,0x7c,0x08,0x71,0x22,0x1c,0x9c}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalBodies =
    {0xdc4c565f,0x935d,0x4f7a,{0x97,0xa5,0xdb,0x4d,0x25,0x2f,0x6b,0x91}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalBody =
    {0x1301dc0f,0xcdf1,0x4eb1,{0x90,0xb4,0xd0,0x6e,0xa2,0x61,0x0f,0x0b}};
extern "C" const GUID __declspec(selectany) CLSID_Points3D =
    {0x2b0c2912,0x59d7,0x4976,{0x9e,0x57,0x20,0xd8,0x3c,0xda,0x90,0x38}};
extern "C" const GUID __declspec(selectany) CLSID_Point3D =
    {0xa4ca403f,0xb960,0x4e41,{0xa3,0x50,0xc0,0x7d,0x15,0x11,0x5d,0xc2}};
extern "C" const GUID __declspec(selectany) CLSID_Point3DParamDisplace =
    {0x7e00821a,0xe79b,0x412b,{0x9a,0x51,0xad,0xb9,0x66,0x4c,0x23,0xa0}};
extern "C" const GUID __declspec(selectany) CLSID_Point3DParamIntersect =
    {0xde8a8774,0x6705,0x4971,{0xba,0x1f,0xf8,0x89,0xe7,0xe3,0x75,0x2c}};
extern "C" const GUID __declspec(selectany) CLSID_Point3DParamCenter =
    {0x02da512f,0x097f,0x4911,{0x8e,0x27,0x8c,0x54,0x6e,0xd4,0xb2,0x2a}};
extern "C" const GUID __declspec(selectany) CLSID_Point3DParamCurve =
    {0xaac9ee7f,0xc69f,0x48dd,{0x9a,0x38,0x8e,0x38,0xc3,0x8b,0xab,0x28}};
extern "C" const GUID __declspec(selectany) CLSID_Point3DParamSurface =
    {0xe5490b1d,0x49e8,0x4042,{0xbe,0xaa,0xc6,0x66,0x95,0x2d,0x3b,0x1b}};
extern "C" const GUID __declspec(selectany) CLSID_Point3DParamProjection =
    {0xbd60e7d5,0x0e9e,0x4e00,{0xa2,0x7b,0x08,0xc1,0x1c,0xfd,0x41,0xbd}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalBends =
    {0xe82b9381,0x1ba1,0x4cd8,{0x8f,0x0a,0x0f,0x7a,0xab,0x07,0x77,0xce}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalBend =
    {0xc84c5989,0x2ae1,0x4e61,{0x9c,0x29,0x88,0x02,0x8c,0x88,0x73,0xa2}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalLineBends =
    {0xc7df1afe,0xa3ef,0x427a,{0xb7,0x32,0x70,0xde,0xfd,0xdb,0x35,0x1d}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalLineBend =
    {0xdca09f8b,0x187b,0x400b,{0xaf,0xfa,0xd1,0xec,0x84,0x25,0x1e,0xc2}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalHole =
    {0x6d725058,0x9a30,0x49b2,{0x8b,0xa6,0x46,0x6f,0x28,0x07,0xe2,0x32}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalHoles =
    {0xd11bbacb,0x3a8a,0x4b3f,{0x9d,0xec,0xc1,0x7c,0xc9,0x98,0x90,0x83}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalCut =
    {0x17cdfc21,0xa515,0x4011,{0xbc,0xc6,0xa3,0x42,0x02,0x19,0xe1,0x9d}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalCuts =
    {0xa0c32567,0x9107,0x4695,{0xa9,0xb0,0x4d,0x99,0x1b,0x58,0x68,0x9e}};
extern "C" const GUID __declspec(selectany) CLSID_RadialDimension =
    {0xf6910669,0xb8fc,0x4f05,{0x87,0x2e,0xba,0x10,0xde,0x09,0x64,0xa4}};
extern "C" const GUID __declspec(selectany) CLSID_RadialDimensions =
    {0xbd3d6d8c,0xc5d8,0x42f0,{0x92,0x6d,0xfd,0x99,0x5e,0xe6,0xd2,0x32}};
extern "C" const GUID __declspec(selectany) CLSID_BreakRadialDimension =
    {0x60adba37,0x9540,0x40e9,{0x8f,0x52,0x03,0xe8,0x0e,0x3f,0x42,0x3e}};
extern "C" const GUID __declspec(selectany) CLSID_RadialBreakDimensions =
    {0x2782662c,0xd266,0x46d6,{0x9b,0xf5,0x6e,0x46,0x12,0xd3,0x2d,0x9f}};
extern "C" const GUID __declspec(selectany) CLSID_DiametralDimension =
    {0x117e5ab9,0x3d8c,0x4f14,{0xbb,0x4b,0x14,0xff,0x43,0x08,0x2e,0xa7}};
extern "C" const GUID __declspec(selectany) CLSID_DiametralDimensions =
    {0x2195ac03,0x677a,0x4236,{0x9b,0xea,0xfb,0xde,0x74,0xce,0xe7,0xf3}};
extern "C" const GUID __declspec(selectany) CLSID_LineDimensions3D =
    {0xbc66c415,0x362a,0x4246,{0x85,0x0f,0xa7,0xd3,0x9b,0xde,0x6c,0x1b}};
extern "C" const GUID __declspec(selectany) CLSID_BaseLineDimension3D =
    {0xf8e92c35,0x23b4,0x4058,{0x85,0xe5,0x32,0x4b,0x46,0xfb,0x55,0x1f}};
extern "C" const GUID __declspec(selectany) CLSID_LineDimension3D =
    {0x0fd2290e,0x6ff6,0x48c4,{0x9b,0x10,0xe1,0xc6,0xd0,0x60,0x8c,0x74}};
extern "C" const GUID __declspec(selectany) CLSID_LineDimension =
    {0xa7b94e84,0xcb49,0x4021,{0x8a,0xc2,0x27,0xad,0xc8,0x03,0x6b,0x4d}};
extern "C" const GUID __declspec(selectany) CLSID_LineDimensions =
    {0xd44491ce,0xcdd2,0x4435,{0xaf,0xab,0x7a,0xec,0x8e,0x58,0xd9,0x12}};
extern "C" const GUID __declspec(selectany) CLSID_RadialDimension3D =
    {0x1072b7e5,0x9c4b,0x44f2,{0xa8,0xf0,0x1a,0x60,0xc5,0x9d,0x49,0x09}};
extern "C" const GUID __declspec(selectany) CLSID_DiametralDimension3D =
    {0xfc1fc235,0x02c5,0x41d5,{0x87,0x1b,0xd7,0x54,0x92,0x6b,0x59,0x3e}};
extern "C" const GUID __declspec(selectany) CLSID_RadialDimensions3D =
    {0x7245f71f,0xe655,0x4102,{0x8c,0x2c,0xb4,0xe6,0xd2,0xfa,0x26,0xd8}};
extern "C" const GUID __declspec(selectany) CLSID_DiametralDimensions3D =
    {0xf3f0ede3,0x3e00,0x48e8,{0x92,0x2f,0x12,0x1c,0xa5,0x71,0xbe,0x26}};
extern "C" const GUID __declspec(selectany) CLSID_BreakLineDimension =
    {0x9f6632a5,0xaaa8,0x4bf3,{0x94,0xaa,0xad,0xf2,0x83,0x8b,0xec,0x74}};
extern "C" const GUID __declspec(selectany) CLSID_BreakLineDimensions =
    {0x865edbb6,0xf511,0x45ef,{0xaa,0x82,0xc1,0x9a,0xd1,0x26,0xf9,0xb9}};
extern "C" const GUID __declspec(selectany) CLSID_HeightDimension =
    {0xca99c371,0x8e76,0x4fe0,{0xa1,0x76,0xa3,0x3f,0xc6,0xd2,0xfd,0xfc}};
extern "C" const GUID __declspec(selectany) CLSID_HeightDimensions =
    {0x2a942576,0xe76d,0x4375,{0xa1,0xd9,0x0c,0xcc,0x4b,0x38,0x27,0x86}};
extern "C" const GUID __declspec(selectany) CLSID_AngleDimension =
    {0xbeabbb41,0xf220,0x43ab,{0x99,0x22,0x39,0xbf,0x76,0x20,0x7e,0x2a}};
extern "C" const GUID __declspec(selectany) CLSID_AngleDimensions =
    {0x82ddc7df,0xd7c3,0x41a6,{0x99,0x13,0xde,0xb4,0xce,0x34,0x92,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_BreakAngleDimension =
    {0xd33d3bfc,0xbedc,0x4e91,{0xa7,0x8c,0xd0,0x34,0x61,0x37,0x9e,0x15}};
extern "C" const GUID __declspec(selectany) CLSID_ArcDimension =
    {0x37f30e53,0x7355,0x436d,{0x8e,0xef,0x3b,0x1d,0xe7,0xe9,0xef,0xce}};
extern "C" const GUID __declspec(selectany) CLSID_ArcDimensions =
    {0xd18dfb31,0x8a26,0x4281,{0xbf,0x18,0xc4,0x62,0xce,0xdb,0xe7,0x14}};
extern "C" const GUID __declspec(selectany) CLSID_AngleDimension3D =
    {0x9d769f23,0x62b6,0x46fb,{0x9b,0xc9,0xa7,0x4a,0x28,0xe9,0x85,0x01}};
extern "C" const GUID __declspec(selectany) CLSID_AngleDimensions3D =
    {0x154cbd57,0x2124,0x4667,{0xbe,0xca,0x61,0xa6,0xd8,0xab,0x38,0x0a}};
extern "C" const GUID __declspec(selectany) CLSID_CurveVertexParam =
    {0x114075c2,0x6d73,0x4198,{0xa2,0x9a,0xf0,0x5d,0x77,0x2f,0xc7,0x5d}};
extern "C" const GUID __declspec(selectany) CLSID_Splines3D =
    {0xa7899fac,0xecf5,0x40ac,{0x92,0x67,0x97,0xb9,0x8b,0x84,0x95,0x70}};
extern "C" const GUID __declspec(selectany) CLSID_Spline3D =
    {0xcf10fb1d,0xfe72,0x48a2,{0xa3,0x6b,0x19,0xb6,0x35,0x94,0xd6,0x74}};
extern "C" const GUID __declspec(selectany) CLSID_LocalCoordinateSystem =
    {0xe39cae1d,0x9b07,0x4171,{0x8a,0x97,0x90,0xd9,0xe7,0xe4,0x75,0xd4}};
extern "C" const GUID __declspec(selectany) CLSID_LocalCoordinateSystems =
    {0xc2eb441c,0x8053,0x4ecb,{0x96,0x1f,0xd0,0x60,0x77,0x69,0xb5,0x08}};
extern "C" const GUID __declspec(selectany) CLSID_LocalCSAxesDirectionParam =
    {0xd9b8494f,0x9693,0x488d,{0xac,0x64,0x1e,0xee,0x76,0x77,0x37,0xe9}};
extern "C" const GUID __declspec(selectany) CLSID_LocalCSEulerParam =
    {0xd49278a6,0x1476,0x48fb,{0x93,0x74,0xcd,0x06,0x67,0x42,0xb0,0xac}};
extern "C" const GUID __declspec(selectany) CLSID_PolyLine =
    {0x1f490d96,0x2098,0x40e6,{0xbb,0x73,0x52,0xdd,0x0a,0x71,0x11,0x1a}};
extern "C" const GUID __declspec(selectany) CLSID_PolyLines =
    {0x1dc144a1,0x0f9f,0x4d93,{0x98,0xec,0x53,0xbf,0xcc,0xf7,0x95,0xfe}};
extern "C" const GUID __declspec(selectany) CLSID_BaseLeader =
    {0x7a899963,0x5137,0x459a,{0xab,0x0a,0x48,0x65,0x30,0x74,0xbc,0xd0}};
extern "C" const GUID __declspec(selectany) CLSID_Leaders =
    {0x90e9d9e8,0x1451,0x4ba1,{0x97,0xa6,0x4b,0xe6,0xd1,0x50,0x86,0x49}};
extern "C" const GUID __declspec(selectany) CLSID_Roughs =
    {0x55912a9b,0x6387,0x4946,{0x80,0xb9,0xc3,0x0d,0x1d,0xd3,0x0d,0x07}};
extern "C" const GUID __declspec(selectany) CLSID_Rough =
    {0x1237c011,0x5d75,0x4ebf,{0xb5,0x3a,0x74,0x4a,0xa1,0x6d,0x7e,0xc7}};
extern "C" const GUID __declspec(selectany) CLSID_BaseLeader3D =
    {0x31dc80a4,0xbcc8,0x45c1,{0x8c,0xe1,0x6c,0x43,0xe2,0x4f,0xd9,0x6c}};
extern "C" const GUID __declspec(selectany) CLSID_Leaders3D =
    {0x9b18cb77,0x9edd,0x440c,{0xb1,0x54,0x96,0x9f,0x1b,0x5c,0x7b,0x98}};
extern "C" const GUID __declspec(selectany) CLSID_Rough3D =
    {0x48398fc6,0xd508,0x4f69,{0xa2,0x92,0x84,0x0a,0xc4,0xc7,0xdb,0x69}};
extern "C" const GUID __declspec(selectany) CLSID_Roughs3D =
    {0xd2ed0beb,0x1705,0x4d5f,{0xb8,0xc4,0xf0,0xd8,0x8b,0x49,0xab,0x2d}};
extern "C" const GUID __declspec(selectany) CLSID__Base =
    {0x700819a4,0x82b8,0x4e32,{0xb5,0x16,0xdb,0x0e,0xd4,0x8d,0x1d,0x05}};
extern "C" const GUID __declspec(selectany) CLSID_Bases =
    {0x2d2bc5f4,0x2d44,0x4c4e,{0xa2,0x0e,0x1f,0x8d,0x80,0x95,0xdf,0x73}};
extern "C" const GUID __declspec(selectany) CLSID_TableCell =
    {0x7c3ad6f0,0x625e,0x4756,{0x8c,0x64,0xa0,0x47,0x83,0x65,0x3a,0x72}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingTable =
    {0x020b47a5,0x6b61,0x48b2,{0x80,0xf6,0x3a,0x60,0x7e,0x0e,0x0a,0x94}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingTables =
    {0xe0c24704,0x8d4e,0x45ba,{0x91,0x75,0x97,0x2d,0x58,0xe3,0x7c,0x7f}};
extern "C" const GUID __declspec(selectany) CLSID_Tolerances =
    {0x6e4f37e5,0x2f92,0x4a22,{0x97,0xef,0xf5,0xae,0xc3,0x74,0x34,0x3a}};
extern "C" const GUID __declspec(selectany) CLSID__Tolerance =
    {0xbd78c015,0x15e7,0x45f6,{0xad,0x21,0xd7,0x37,0x00,0x7e,0xd7,0xc1}};
extern "C" const GUID __declspec(selectany) CLSID_Bases3D =
    {0xdbf9fa07,0x8fe1,0x46de,{0xb2,0x36,0x99,0x31,0x38,0x8f,0xf5,0x43}};
extern "C" const GUID __declspec(selectany) CLSID_Base3D =
    {0xdaae59df,0xe97c,0x4434,{0x91,0x66,0x8a,0x52,0xbe,0xa0,0xff,0x31}};
extern "C" const GUID __declspec(selectany) CLSID_Tolerances3D =
    {0xee1cf4a7,0xcb7e,0x42c2,{0x85,0x4d,0x32,0xeb,0x10,0xe2,0x8c,0x78}};
extern "C" const GUID __declspec(selectany) CLSID_Tolerance3D =
    {0x68c4a672,0x8029,0x40e8,{0x92,0x03,0xe5,0x00,0x46,0x07,0x2b,0xcf}};
extern "C" const GUID __declspec(selectany) CLSID_LocalCSOrientByObjectParam =
    {0x9018b030,0x43b0,0x4a67,{0xae,0x2b,0x11,0xf1,0x4a,0xb2,0x71,0x6d}};
extern "C" const GUID __declspec(selectany) CLSID_CutLine =
    {0xde089315,0x444a,0x46a1,{0xa5,0x51,0x4f,0x02,0x64,0xef,0x11,0xd2}};
extern "C" const GUID __declspec(selectany) CLSID_CutLines =
    {0xafde9b99,0x603d,0x4b29,{0xb2,0xe5,0x3f,0x73,0x99,0xb7,0x26,0x19}};
extern "C" const GUID __declspec(selectany) CLSID_ExternalTessellationObject =
    {0xc51785d4,0x4665,0x4521,{0x88,0x5e,0x1d,0x06,0x33,0xae,0x44,0x5c}};
extern "C" const GUID __declspec(selectany) CLSID_ControlPoints =
    {0xf8b4a9ea,0x09fe,0x41c4,{0x8e,0x66,0xb2,0xa0,0x15,0xca,0x51,0xc8}};
extern "C" const GUID __declspec(selectany) CLSID_ControlPoint =
    {0x816922d4,0x1fba,0x4672,{0x95,0xae,0xe2,0x7b,0xec,0x78,0x2e,0x47}};
extern "C" const GUID __declspec(selectany) CLSID_ConjunctivePoints =
    {0xc5ddaf9b,0x32b7,0x4552,{0xad,0xad,0xf3,0x1d,0x87,0x06,0xed,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_ConjunctivePoint =
    {0x4a7a9fc8,0x85d7,0x4b62,{0x99,0xbb,0x7a,0x30,0x3f,0x1d,0x6e,0x98}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyBmpList =
    {0x76a04b67,0x394f,0x4b63,{0xbc,0x9c,0x67,0xc5,0x2a,0x36,0xf9,0x8a}};
extern "C" const GUID __declspec(selectany) CLSID_ViewPointer =
    {0xe437188e,0x6071,0x4c50,{0x9e,0x43,0xfb,0x53,0xe6,0x3d,0x9e,0xe9}};
extern "C" const GUID __declspec(selectany) CLSID_ViewPointers =
    {0xa3035980,0xe806,0x4458,{0xbf,0x4e,0x4b,0xd8,0xbc,0x54,0xd5,0x92}};
extern "C" const GUID __declspec(selectany) CLSID_Multiline =
    {0x44a427dc,0x4604,0x43ca,{0x9a,0xf8,0x02,0x6c,0x49,0x4c,0xec,0x57}};
extern "C" const GUID __declspec(selectany) CLSID_Multilines =
    {0x20023299,0x3104,0x4af3,{0xac,0x55,0x6d,0x2b,0x36,0x88,0x96,0xbb}};
extern "C" const GUID __declspec(selectany) CLSID_Contour =
    {0x12fabdf2,0xcaa4,0x4c8f,{0xa3,0xe6,0xa5,0x6d,0xd9,0x05,0x52,0xb5}};
extern "C" const GUID __declspec(selectany) CLSID_ContourSegment =
    {0x33dedd79,0x0855,0x4c92,{0xa1,0xb9,0x0d,0x45,0xbd,0x3b,0x8d,0xab}};
extern "C" const GUID __declspec(selectany) CLSID_ContourLineSegment =
    {0x1d09cc46,0xfbcc,0x4b09,{0x8d,0x0a,0xe2,0x0b,0x22,0xfa,0xe3,0xef}};
extern "C" const GUID __declspec(selectany) CLSID_ContourArc =
    {0x31450942,0xa67c,0x4459,{0xb7,0xeb,0xf1,0xb9,0x00,0xb1,0x00,0xfd}};
extern "C" const GUID __declspec(selectany) CLSID_Curve2D =
    {0x93f02582,0x585f,0x4319,{0x90,0xb5,0x39,0x74,0xa7,0x09,0x99,0xd8}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingContours =
    {0xb3badeea,0x2f85,0x4a72,{0x85,0x46,0xdf,0xea,0x96,0xe3,0xe7,0x36}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingContour =
    {0x63502bd9,0x2ec0,0x4908,{0x8e,0x45,0xde,0x43,0x3e,0x7b,0x9d,0xb7}};
extern "C" const GUID __declspec(selectany) CLSID_SplitLines =
    {0x452f7cd4,0x5c9c,0x48f5,{0x95,0x6f,0xe0,0x7e,0x0b,0x1c,0xc3,0x0d}};
extern "C" const GUID __declspec(selectany) CLSID_SplitLine =
    {0x606ad1d9,0xfe0c,0x44ef,{0xab,0x97,0xee,0x65,0xef,0x26,0xbc,0x08}};
extern "C" const GUID __declspec(selectany) CLSID_SurfacePatches =
    {0xf77e276e,0x6f68,0x4a23,{0xaf,0x68,0xee,0xf2,0x96,0x03,0xb1,0xad}};
extern "C" const GUID __declspec(selectany) CLSID_SurfacePatch =
    {0xe61f549b,0x2e9e,0x45b6,{0xa6,0x47,0x71,0x73,0x0e,0x3e,0xea,0x49}};
extern "C" const GUID __declspec(selectany) CLSID_FaceRemovers =
    {0x8b491e62,0x1de7,0x4c17,{0x96,0x29,0xf7,0x7d,0xf0,0xe8,0xe4,0x5c}};
extern "C" const GUID __declspec(selectany) CLSID_FaceRemover =
    {0x5b433bc2,0xc5db,0x4cf7,{0x8c,0x99,0xeb,0xcd,0x14,0x21,0xd4,0x3e}};
extern "C" const GUID __declspec(selectany) CLSID_SurfaceSewers =
    {0x98702e0a,0xc12c,0x49f3,{0xa1,0x88,0xfb,0xc4,0x53,0xb4,0xb8,0x8c}};
extern "C" const GUID __declspec(selectany) CLSID_SurfaceSewer =
    {0x9541e720,0xded1,0x4a04,{0xa6,0xf0,0xf1,0x1c,0x25,0x12,0xc9,0x32}};
extern "C" const GUID __declspec(selectany) CLSID_NurbsSurfaces =
    {0xfdcf85ba,0x4bb2,0x4a83,{0xaf,0x0d,0x73,0xd9,0x67,0x48,0x5b,0xed}};
extern "C" const GUID __declspec(selectany) CLSID_NurbsSurface =
    {0xd2d5bc88,0x7991,0x4245,{0x99,0x68,0x62,0x22,0xf3,0x99,0x3f,0x45}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyLibExplorer =
    {0xf89065e8,0xd547,0x452f,{0x87,0x23,0x24,0xdb,0x23,0x04,0xbc,0x29}};
extern "C" const GUID __declspec(selectany) CLSID_ExternalGDIObject =
    {0xd7a43da7,0x65ae,0x4006,{0xab,0x72,0xb5,0x79,0xce,0xe9,0xa9,0x9c}};
extern "C" const GUID __declspec(selectany) CLSID_Circles =
    {0xe91c61e1,0x5c35,0x4eb3,{0x97,0x2e,0x21,0x3c,0xc0,0x12,0x42,0x6f}};
extern "C" const GUID __declspec(selectany) CLSID__Circle =
    {0x9f1d8d78,0xc0cd,0x446d,{0x87,0x7f,0x79,0x33,0x0b,0x01,0xb8,0xfa}};
extern "C" const GUID __declspec(selectany) CLSID_MacroObjects =
    {0x2b471c1a,0xe44f,0x44ad,{0x99,0xea,0x4a,0xc1,0x26,0xb8,0x09,0x65}};
extern "C" const GUID __declspec(selectany) CLSID_MacroObject =
    {0xa9880f8d,0x2166,0x4690,{0xac,0xa5,0x44,0x79,0xdb,0xe4,0x25,0x1b}};
extern "C" const GUID __declspec(selectany) CLSID_Ellipses =
    {0xf0270b21,0x879a,0x4b96,{0xba,0x43,0x95,0xb4,0x02,0x75,0x4f,0xc0}};
extern "C" const GUID __declspec(selectany) CLSID__Ellipse =
    {0x209a2979,0x6f0c,0x4d27,{0xb1,0x57,0xcf,0xc7,0x4b,0xa5,0x3f,0x14}};
extern "C" const GUID __declspec(selectany) CLSID_EllipseArcs =
    {0xa1471f9b,0x32be,0x4e66,{0xbf,0x1c,0xf8,0x32,0x55,0xc7,0xec,0x6d}};
extern "C" const GUID __declspec(selectany) CLSID__EllipseArc =
    {0xd79add45,0xa3fd,0x4376,{0xa5,0xe4,0xbd,0x6e,0x31,0xc1,0x93,0xc4}};
extern "C" const GUID __declspec(selectany) CLSID__Point =
    {0xaf3188c2,0xcd4d,0x45f6,{0xbc,0xb2,0x5f,0x44,0xf3,0x02,0x00,0xd1}};
extern "C" const GUID __declspec(selectany) CLSID_Points =
    {0x4b8726c5,0xe743,0x48a5,{0x9c,0x5f,0x50,0x6f,0x5d,0x57,0xdb,0x7f}};
extern "C" const GUID __declspec(selectany) CLSID__Line =
    {0xbca8bbb8,0xccaa,0x4865,{0x91,0x8f,0x7d,0x03,0x5b,0xd9,0xe0,0xd4}};
extern "C" const GUID __declspec(selectany) CLSID_Lines =
    {0x431c0844,0x4c3e,0x4110,{0x8e,0x16,0x2b,0x95,0x2a,0xa0,0x52,0x1d}};
extern "C" const GUID __declspec(selectany) CLSID__Bezier =
    {0xbc4a8e55,0xc5c4,0x405c,{0x9b,0x78,0xaa,0x36,0xca,0x5b,0x11,0x56}};
extern "C" const GUID __declspec(selectany) CLSID_Beziers =
    {0xd744d5ee,0xe926,0x45b3,{0xb6,0x22,0xf7,0xb5,0x43,0xa2,0xd0,0x66}};
extern "C" const GUID __declspec(selectany) CLSID_Rectangles =
    {0xfb692157,0x2a44,0x4313,{0xbe,0x9b,0x5c,0x7a,0xd7,0x0d,0xb6,0x33}};
extern "C" const GUID __declspec(selectany) CLSID__Rectangle =
    {0x28c7998f,0xbb9d,0x4edc,{0x90,0xef,0xd8,0x10,0xf4,0x04,0x81,0xb7}};
extern "C" const GUID __declspec(selectany) CLSID_RegularPolygons =
    {0xc9204fdb,0x09b4,0x443e,{0x90,0x29,0xfe,0x61,0x7c,0xee,0x91,0x06}};
extern "C" const GUID __declspec(selectany) CLSID_RegularPolygon =
    {0x11d9782e,0x11e1,0x471b,{0x82,0xd1,0x86,0x35,0xb0,0x86,0x13,0x39}};
extern "C" const GUID __declspec(selectany) CLSID_InsertionObjects =
    {0x8095a5e3,0x86cb,0x4b66,{0xaa,0x45,0xe7,0x1e,0x1e,0x88,0x83,0xa9}};
extern "C" const GUID __declspec(selectany) CLSID_InsertionView =
    {0xa4e92dc4,0x9804,0x4381,{0x9b,0x54,0x8e,0x20,0x30,0xc5,0x0e,0x6d}};
extern "C" const GUID __declspec(selectany) CLSID_InsertionDefinition =
    {0x30d92d83,0xd913,0x4898,{0x85,0xa4,0xa6,0xdc,0xef,0x20,0x07,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_PolyLine2D =
    {0xffc3a04a,0xc9bd,0x44c2,{0x94,0x85,0x41,0xf4,0xa6,0x55,0x65,0x3c}};
extern "C" const GUID __declspec(selectany) CLSID_PolyLines2D =
    {0x6a3b4fb6,0xfb8d,0x40d2,{0xb3,0xca,0x2d,0xfe,0x4f,0xf7,0x25,0xb5}};
extern "C" const GUID __declspec(selectany) CLSID_Equidistants =
    {0x487511e6,0xe3f4,0x4f7c,{0x92,0x17,0xc4,0x85,0xb1,0x46,0x3a,0x61}};
extern "C" const GUID __declspec(selectany) CLSID__Equidistant =
    {0x5eb10e2c,0x0d66,0x4ac2,{0x96,0x19,0x93,0xb4,0x37,0xcb,0xec,0xe7}};
extern "C" const GUID __declspec(selectany) CLSID__Nurbs =
    {0xa71c349d,0xbafc,0x498c,{0xac,0x18,0xb3,0x72,0xcb,0x2f,0xd4,0xb1}};
extern "C" const GUID __declspec(selectany) CLSID_Nurbses =
    {0x51e9ef87,0xe12d,0x48af,{0x9e,0x0f,0x35,0xa2,0x79,0x87,0x88,0x31}};
extern "C" const GUID __declspec(selectany) CLSID_CentreMarkers =
    {0x80178c38,0xd3be,0x4e6b,{0x9d,0x22,0xaa,0x43,0xd8,0xda,0x2c,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_CentreMarker =
    {0xf6e745a9,0xdb3a,0x40f8,{0x93,0x18,0xd8,0xa5,0x3d,0x04,0xdf,0x16}};
extern "C" const GUID __declspec(selectany) CLSID_RemoteElement =
    {0x79a4caf1,0xf75c,0x47d5,{0xa3,0xaf,0x65,0xd8,0xb9,0x5a,0xd1,0x7a}};
extern "C" const GUID __declspec(selectany) CLSID_RemoteElements =
    {0x8b0949ed,0x637a,0x49be,{0x96,0xd4,0x95,0xcd,0x37,0xa8,0x0f,0xcc}};
extern "C" const GUID __declspec(selectany) CLSID__Attribute =
    {0xaec9ca96,0xa058,0x49df,{0xb5,0x66,0x19,0x5c,0x82,0xfe,0x35,0x76}};
extern "C" const GUID __declspec(selectany) CLSID__ColumnInfo =
    {0xa92d056b,0x1d1f,0x4c2b,{0x97,0xe9,0x77,0xa5,0xf8,0x37,0xa6,0x8a}};
extern "C" const GUID __declspec(selectany) CLSID__AttributeType =
    {0x949bd5dd,0xa728,0x4009,{0x81,0x76,0x22,0x2d,0xfe,0xc7,0xb7,0xfc}};
extern "C" const GUID __declspec(selectany) CLSID_AxisLine =
    {0x325c006c,0xc993,0x4656,{0xbc,0x1a,0xde,0x65,0xd8,0x40,0x15,0x27}};
extern "C" const GUID __declspec(selectany) CLSID_AxisLines =
    {0x78f95449,0x3a99,0x4b3e,{0x86,0xb5,0xc7,0xbc,0x9d,0xdd,0xf0,0x74}};
extern "C" const GUID __declspec(selectany) CLSID_Variable7 =
    {0xdf582f9b,0xe350,0x4ef8,{0xa6,0xea,0x5d,0x8d,0x32,0xd4,0x3c,0xa1}};
extern "C" const GUID __declspec(selectany) CLSID_InsertionParameters =
    {0x863d0e6d,0xc8e0,0x4e49,{0x88,0xb7,0xda,0xb4,0x23,0xcd,0xa1,0xc3}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingGroup =
    {0xc0a36437,0x0d32,0x4d41,{0x9c,0x3f,0x0a,0x70,0xd6,0x6a,0x4c,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_DrawingGroups =
    {0xabbc0387,0x2e69,0x4575,{0xba,0xd1,0xa9,0x7b,0x02,0xb4,0x18,0xb2}};
extern "C" const GUID __declspec(selectany) CLSID__Hatch =
    {0x7627e43f,0x0b5a,0x410f,{0x94,0x56,0x81,0xe7,0xc1,0x30,0xac,0x5b}};
extern "C" const GUID __declspec(selectany) CLSID__Colouring =
    {0xe51e0641,0x4f58,0x48a1,{0x83,0xd8,0xf7,0x73,0x55,0xdb,0x4e,0x5e}};
extern "C" const GUID __declspec(selectany) CLSID_Hatches =
    {0x1044adc3,0xe779,0x4c48,{0xa4,0xdd,0xa0,0x0b,0xef,0x93,0x41,0xd6}};
extern "C" const GUID __declspec(selectany) CLSID_Colourings =
    {0xcaa76116,0x56ad,0x4466,{0x99,0x51,0xc1,0x6c,0x10,0xd4,0x3c,0xe0}};
extern "C" const GUID __declspec(selectany) CLSID__SpecRough =
    {0x11ba32bc,0xd5a2,0x474b,{0xba,0x91,0xe3,0x8e,0xe0,0xa2,0xc5,0x67}};
extern "C" const GUID __declspec(selectany) CLSID_TechnicalDemand =
    {0x281276eb,0xc88d,0x4f54,{0x9c,0x13,0xe6,0xdd,0xb8,0xc2,0x53,0x0d}};
extern "C" const GUID __declspec(selectany) CLSID__Raster =
    {0xacab7aba,0xec2f,0x4e2b,{0xa7,0x42,0x19,0xbb,0x5b,0xc4,0x44,0x1a}};
extern "C" const GUID __declspec(selectany) CLSID_Rasters =
    {0xf90677d1,0x9ed2,0x4bdf,{0x8c,0x68,0x6b,0x24,0x1b,0x2a,0x09,0xf2}};
extern "C" const GUID __declspec(selectany) CLSID_OleDrawingObject =
    {0xc5d9da68,0x4574,0x40d5,{0xb9,0x2a,0x83,0x8c,0x23,0x5f,0x19,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_OleDrawingObjects =
    {0x41e89e17,0x2fb8,0x4e08,{0xa0,0x1a,0xcf,0x9b,0xb5,0x24,0xa6,0xa2}};
extern "C" const GUID __declspec(selectany) CLSID_SelectionManager =
    {0x45615dbb,0x7842,0x436c,{0x9b,0x84,0x06,0x3a,0x13,0xc0,0x61,0xe8}};
extern "C" const GUID __declspec(selectany) CLSID_ChooseManager =
    {0x495c89bd,0x48c4,0x40b3,{0x98,0x29,0x4e,0x98,0x2f,0x19,0x1b,0xa2}};
extern "C" const GUID __declspec(selectany) CLSID_SurfacesIntersectionCurve =
    {0xce94c01b,0xed23,0x43fc,{0x98,0xbb,0xd7,0xbd,0x85,0xee,0x0d,0x47}};
extern "C" const GUID __declspec(selectany) CLSID_SurfacesIntersectionCurves =
    {0xbdd167c1,0x8439,0x412e,{0x8a,0x41,0x4a,0x01,0x57,0x6c,0xbc,0x79}};
extern "C" const GUID __declspec(selectany) CLSID__Stamp =
    {0x79cb82d9,0x6ea1,0x49d2,{0x84,0x79,0xc7,0x00,0x5d,0x87,0xec,0x77}};
extern "C" const GUID __declspec(selectany) CLSID_WaveLine =
    {0x1d709f94,0xc02d,0x4dad,{0x8e,0x74,0xb9,0xe7,0x43,0x4a,0x8e,0x62}};
extern "C" const GUID __declspec(selectany) CLSID_WaveLines =
    {0xa5b25423,0xba42,0x47b3,{0xb0,0xbd,0xaf,0x8c,0xc9,0x11,0xb7,0x67}};
extern "C" const GUID __declspec(selectany) CLSID_BrokenLine =
    {0x1c337edb,0xf786,0x4d56,{0x8b,0xd2,0x06,0xd9,0x27,0x17,0x6c,0x32}};
extern "C" const GUID __declspec(selectany) CLSID_BrokenLines =
    {0x31314843,0x3608,0x4b45,{0x8f,0x0a,0xdd,0xbc,0x30,0x82,0x26,0xc6}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyStyleList =
    {0xc2792bee,0x4f86,0x4610,{0x90,0x8e,0x8e,0x4b,0x31,0xb6,0x03,0xfc}};
extern "C" const GUID __declspec(selectany) CLSID__CopyObjectParam =
    {0x6de8a8f7,0x28c6,0x42c7,{0xa5,0x79,0xc2,0x4b,0xdf,0xa6,0xb7,0x3f}};
extern "C" const GUID __declspec(selectany) CLSID_CurveCopyObjectParam =
    {0x07bd4468,0xd478,0x447c,{0x8f,0x20,0x1c,0x6e,0x2a,0xbb,0xd9,0xc2}};
extern "C" const GUID __declspec(selectany) CLSID_CircleCopyObjectParam =
    {0x6f7f48fc,0x1da4,0x4689,{0x9a,0xe3,0x69,0x80,0x4b,0x84,0x2d,0x1b}};
extern "C" const GUID __declspec(selectany) CLSID_CircularCopyObjectParam =
    {0xfecbf8c1,0xd8b4,0x437f,{0x8a,0xa3,0xdc,0x63,0x62,0xc2,0xe5,0x1e}};
extern "C" const GUID __declspec(selectany) CLSID_MeshCopyObjectParam =
    {0xff54be1b,0x3b35,0x4b01,{0x98,0x5d,0x8d,0x69,0x60,0x86,0xf7,0xe7}};
extern "C" const GUID __declspec(selectany) CLSID_PrintJob =
    {0x87dab0e6,0xb749,0x47fc,{0x8e,0x02,0x76,0xda,0xc0,0x43,0x9c,0x81}};
extern "C" const GUID __declspec(selectany) CLSID_PrintJob_Sheet =
    {0xf035e79b,0x1f65,0x42c6,{0xab,0x49,0x49,0x8c,0x65,0xcc,0x2e,0x1f}};
extern "C" const GUID __declspec(selectany) CLSID__Property =
    {0x9699d02a,0x6ff3,0x4c25,{0x89,0x74,0x5e,0xb5,0x27,0x02,0x43,0x15}};
extern "C" const GUID __declspec(selectany) CLSID_LibArraySettings =
    {0x19144a91,0x0d9f,0x4906,{0xaf,0xd0,0xbe,0xfb,0x56,0x25,0x66,0x2d}};
extern "C" const GUID __declspec(selectany) CLSID_ReportProcess =
    {0x2a2f00ce,0x536e,0x462d,{0xb5,0x54,0x58,0x09,0xcd,0xe3,0x10,0x95}};
extern "C" const GUID __declspec(selectany) CLSID_Equidistants3D =
    {0xd5abff52,0xa8a7,0x45cb,{0xbd,0xcd,0x10,0x3f,0xdf,0xef,0x3e,0x3e}};
extern "C" const GUID __declspec(selectany) CLSID_Equidistant3D =
    {0x948eb787,0x026e,0x4990,{0x8a,0x92,0xb6,0xb3,0xf2,0x5d,0x4d,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_TrimmedCurve =
    {0x46dcf819,0xa2e0,0x4d7c,{0xbf,0xcd,0xf0,0x18,0x1f,0x63,0x58,0xef}};
extern "C" const GUID __declspec(selectany) CLSID_TrimmedCurves =
    {0xffc3be29,0xa93a,0x47aa,{0x97,0x33,0x36,0x2c,0x12,0x0e,0x87,0xd6}};
extern "C" const GUID __declspec(selectany) CLSID_TrimmedSurfaces =
    {0x7c809f8b,0x4bf4,0x42af,{0xb1,0xce,0x7c,0xbe,0xfa,0x65,0x37,0x30}};
extern "C" const GUID __declspec(selectany) CLSID_TrimmedSurface =
    {0x5b3a39a9,0x82eb,0x4997,{0x82,0x79,0x66,0x41,0x00,0x9e,0x9c,0x9e}};
extern "C" const GUID __declspec(selectany) CLSID_FeaturePatterns =
    {0x33289d92,0x16e7,0x4e98,{0xb1,0x26,0xde,0x9f,0xce,0x32,0x8b,0x5e}};
extern "C" const GUID __declspec(selectany) CLSID_LinearPattern =
    {0x9a4b0a4c,0x961b,0x465e,{0xac,0x12,0x99,0xa6,0x04,0xa5,0x03,0xcb}};
extern "C" const GUID __declspec(selectany) CLSID_RuledSurface =
    {0x76921b78,0x7b2a,0x4e77,{0x86,0x47,0x6c,0x4b,0x26,0xa1,0xce,0x4c}};
extern "C" const GUID __declspec(selectany) CLSID_RuledSurfaces =
    {0xf74e75c2,0xf5f9,0x482f,{0xa3,0x0e,0x9b,0x0d,0xbf,0xc7,0xf4,0x26}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3D =
    {0xf47c641c,0xe59b,0x4b44,{0x91,0x68,0xa1,0x56,0xb1,0x5f,0xef,0x69}};
extern "C" const GUID __declspec(selectany) CLSID_ExtensionSurface =
    {0xa6cd01c2,0xfd04,0x4b95,{0x93,0xf4,0x4d,0x06,0x48,0x34,0x9c,0x3f}};
extern "C" const GUID __declspec(selectany) CLSID_ExtensionSurfaces =
    {0xe117eb74,0x5e7d,0x4eda,{0x9f,0x32,0x9c,0x7c,0xef,0xa2,0x93,0x11}};
extern "C" const GUID __declspec(selectany) CLSID_EquidistantSurface =
    {0xd575bf4a,0x81a5,0x4e01,{0xa2,0x2b,0xcf,0x94,0x4c,0x3e,0x9b,0xdc}};
extern "C" const GUID __declspec(selectany) CLSID_EquidistantSurfaces =
    {0x939b3deb,0x7bfd,0x47ea,{0xaf,0x42,0x23,0x3b,0x3b,0x68,0x35,0x71}};
extern "C" const GUID __declspec(selectany) CLSID_PointDrivenPattern =
    {0xec056028,0x53ea,0x48c2,{0x9d,0xe2,0x77,0xce,0xf6,0x4f,0x4c,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_CircularPattern =
    {0xffc0a8bb,0xfb7c,0x4981,{0x8e,0x07,0xf5,0xd3,0xfe,0xb4,0xdc,0x5b}};
extern "C" const GUID __declspec(selectany) CLSID_PathPattern =
    {0x6a4f281e,0x23ab,0x49c0,{0xa0,0xa3,0xb3,0x46,0x95,0xaa,0x8a,0x3d}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3DBy2VertexesParameters =
    {0x4dc7a9c1,0xc7a0,0x421b,{0x84,0x81,0x62,0x14,0x71,0x27,0x99,0x4b}};
extern "C" const GUID __declspec(selectany) CLSID_MirrorPattern =
    {0x26383273,0x9991,0x4d0d,{0x90,0x8b,0x26,0x27,0xf2,0x25,0xd6,0x25}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3DByCoefficientsParameters =
    {0x2347bfd1,0xf8fb,0x4af3,{0xa3,0xde,0x17,0x69,0xac,0x24,0xe1,0x58}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3DBy2AnglesParameters =
    {0x65ca2b10,0x06a5,0x4684,{0xac,0x5f,0xeb,0x51,0xaa,0x0b,0xcf,0x28}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3DByLocalCSParameters =
    {0x5c0be8e4,0xa07b,0x4315,{0x9e,0xbf,0x93,0x31,0x72,0xed,0x15,0x40}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3DByObjectParameters =
    {0x9f24fa16,0x76be,0x4f5e,{0x9d,0xee,0xdb,0xd8,0x6f,0xa9,0x90,0x3e}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3DAlongSurfaceNormalParameters =
    {0xaefae454,0xa1d8,0x4e22,{0xbe,0xa9,0xaf,0x2d,0x79,0xdf,0x6b,0xe9}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3DByCurveParameters =
    {0x01ded71c,0x8500,0x47a1,{0x98,0x79,0xe7,0xd1,0xe9,0x55,0x15,0x2c}};
extern "C" const GUID __declspec(selectany) CLSID_Vector3DByScreenNormalParameters =
    {0x431c567c,0xfa69,0x4dee,{0xb6,0xee,0xc4,0x61,0x56,0xa0,0xf2,0xb3}};
extern "C" const GUID __declspec(selectany) CLSID_DerivedPattern =
    {0x9b988e67,0x1efb,0x4441,{0xbb,0x37,0xf3,0x3a,0x50,0xa5,0xc2,0x09}};
extern "C" const GUID __declspec(selectany) CLSID_LocalCoordinateSystems2D =
    {0xcefd648e,0x547c,0x4d66,{0x94,0xe9,0x33,0x6e,0x6e,0x89,0xbc,0xfe}};
extern "C" const GUID __declspec(selectany) CLSID_LocalCoordinateSystem2D =
    {0xbcb037a2,0xd246,0x44af,{0x92,0xef,0xfd,0xc5,0x46,0x24,0xff,0xa2}};
extern "C" const GUID __declspec(selectany) CLSID_ConnectCurve =
    {0xdc434f74,0x5bc2,0x4ae7,{0x93,0xe1,0xe9,0xfc,0x56,0x70,0xe0,0x28}};
extern "C" const GUID __declspec(selectany) CLSID_ConnectCurves =
    {0xcdc3416d,0xe4fd,0x4c16,{0x9a,0xbc,0x3d,0xb2,0x33,0xfe,0xee,0x76}};
extern "C" const GUID __declspec(selectany) CLSID_FilletCurve =
    {0xddc4358e,0x877e,0x469f,{0xa4,0x65,0x26,0x90,0x12,0x65,0xc5,0x1e}};
extern "C" const GUID __declspec(selectany) CLSID_FilletCurves =
    {0x52cf9d27,0x73d6,0x4cc7,{0x98,0x0e,0x26,0xa4,0xbe,0xc8,0x40,0xbf}};
extern "C" const GUID __declspec(selectany) CLSID_SurfaceThickening =
    {0x63974ee5,0xcb94,0x44b2,{0x8f,0xa0,0xa1,0x3f,0x42,0x64,0xba,0xf5}};
extern "C" const GUID __declspec(selectany) CLSID_SurfaceThickenings =
    {0xb9101beb,0x76d3,0x44f9,{0x82,0x24,0x00,0x05,0xff,0x0e,0x55,0x93}};
extern "C" const GUID __declspec(selectany) CLSID__Arc3D =
    {0xd26baed3,0xe5c6,0x422f,{0xa6,0xe9,0xc5,0xfa,0xb9,0x1c,0x39,0xdb}};
extern "C" const GUID __declspec(selectany) CLSID_Arcs3D =
    {0x0b792ea8,0xe117,0x4b5c,{0x87,0x75,0xc4,0x66,0xa1,0x10,0x84,0x22}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyOpticalProps =
    {0x83ed9022,0xaf06,0x4e7c,{0xa7,0x7b,0xe9,0x5b,0x32,0x5d,0xbc,0x43}};
extern "C" const GUID __declspec(selectany) IID_IPropertyEditCheckBox =
    {0x3fbf29aa,0x5691,0x4e7b,{0xbe,0x08,0x20,0x25,0xf2,0x9f,0x01,0x8e}};
extern "C" const GUID __declspec(selectany) CLSID_TablePattern =
    {0x345103dc,0x4694,0x4a5e,{0xab,0x0e,0x96,0x52,0xb6,0x26,0x46,0xcd}};
extern "C" const GUID __declspec(selectany) CLSID_Rotateds =
    {0x5298a662,0x3440,0x4253,{0xb1,0x5b,0x25,0x80,0xce,0xe7,0xc6,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_Rotated =
    {0x300c9f03,0x56ef,0x482f,{0xa6,0x85,0xb7,0x95,0x0a,0x6d,0x34,0x57}};
extern "C" const GUID __declspec(selectany) CLSID_CutRotated =
    {0xd96a0574,0xfb91,0x4d49,{0xaf,0x19,0xeb,0xcc,0x78,0x33,0x57,0x23}};
extern "C" const GUID __declspec(selectany) CLSID_RotatedSurface =
    {0x9f594d5a,0x30b5,0x415a,{0xac,0xe6,0xd5,0x68,0xf1,0x86,0xd1,0x44}};
extern "C" const GUID __declspec(selectany) CLSID_ExtrusionSurface =
    {0xe25efef5,0xd5c7,0x49e6,{0x91,0x49,0x9e,0xa6,0xe3,0x6c,0xe9,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_Point3DParamBySphere =
    {0xcd7da97a,0x87f8,0x4b2e,{0xb5,0xd4,0x75,0x0d,0x61,0x50,0x29,0x1e}};
extern "C" const GUID __declspec(selectany) CLSID_Point3DParamByCylinder =
    {0xec22584a,0x6fa6,0x4a66,{0xb8,0xde,0x21,0x60,0x5e,0xd1,0xd1,0x2b}};
extern "C" const GUID __declspec(selectany) CLSID_MeshPointsSurface =
    {0x1a73d002,0x0bd3,0x4a73,{0x80,0x1e,0xca,0x6a,0x32,0x2c,0xe5,0x62}};
extern "C" const GUID __declspec(selectany) CLSID_MeshPointsSurfaces =
    {0x372e58ee,0xc5ac,0x48b5,{0xa5,0x35,0xbb,0x49,0x05,0x98,0xd9,0x31}};
extern "C" const GUID __declspec(selectany) CLSID_CloudPointsSurface =
    {0x43f3ca73,0x2015,0x4fb4,{0x82,0xc1,0xb2,0x5a,0x9f,0xa9,0x23,0x10}};
extern "C" const GUID __declspec(selectany) CLSID_CloudPointsSurfaces =
    {0x9860a4f8,0x58dc,0x4285,{0xb1,0xb0,0x5e,0xb5,0x39,0xd2,0xa6,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_ImportedSurface =
    {0xf5dd3012,0x45bd,0x42ea,{0xa4,0x48,0x1c,0xf7,0xe6,0x46,0x48,0x7a}};
extern "C" const GUID __declspec(selectany) CLSID_ImportedSurfaces =
    {0x2df37218,0x0f1d,0x4e7e,{0xb1,0xe4,0x95,0x4b,0x8a,0xa7,0x90,0xd2}};
extern "C" const GUID __declspec(selectany) IID_ICopyObjectParam1 =
    {0x65989bdb,0xab09,0x4cc5,{0xa1,0xdc,0x6d,0xfb,0x5e,0x5c,0x64,0x96}};
extern "C" const GUID __declspec(selectany) CLSID_Scaling3D =
    {0x3d5b953b,0x4efd,0x4c55,{0x94,0x33,0x72,0x05,0x02,0x8f,0x38,0xd6}};
extern "C" const GUID __declspec(selectany) CLSID_Scalings3D =
    {0x0b02fd29,0x1fb4,0x4c7b,{0x9c,0x0b,0xb6,0x3f,0x64,0x15,0xc9,0x60}};
extern "C" const GUID __declspec(selectany) CLSID_CurveOutLine =
    {0x1b3eb690,0x1f97,0x4a36,{0x9a,0x0c,0xb2,0x51,0xcc,0x76,0xa2,0x05}};
extern "C" const GUID __declspec(selectany) CLSID_CurveOutLines =
    {0xb1cddfb5,0x1b50,0x4e4f,{0xae,0xcf,0x51,0xf9,0x75,0xa7,0xd6,0xef}};
extern "C" const GUID __declspec(selectany) CLSID_CurveByLaw =
    {0x5f39d09d,0x2c8f,0x4732,{0x96,0x35,0x52,0x8f,0xf6,0x4d,0x8a,0x1b}};
extern "C" const GUID __declspec(selectany) CLSID_CurveByLaws =
    {0x7fdf9c11,0xfc8f,0x401c,{0x96,0x20,0x3e,0x13,0xc3,0x25,0x4d,0xe0}};
extern "C" const GUID __declspec(selectany) CLSID_TextTable =
    {0x94aa20bc,0x33cf,0x40f0,{0xb0,0xee,0x8d,0xad,0x19,0x4f,0x49,0xd4}};
extern "C" const GUID __declspec(selectany) CLSID_LoadCombinationsParam =
    {0x0801d00a,0x7f0a,0x4045,{0xbc,0xd7,0xe1,0x48,0x08,0x39,0x53,0xd2}};
extern "C" const GUID __declspec(selectany) CLSID_OpenDocumentParam =
    {0xffbb62a8,0xcb09,0x4201,{0xa8,0x5e,0xd2,0x28,0x56,0xd8,0xbb,0x8c}};
extern "C" const GUID __declspec(selectany) CLSID_IsoparametricCurve =
    {0xe05cd072,0xeac4,0x4439,{0x84,0xc9,0xf1,0x08,0x4d,0x17,0x8d,0x8c}};
extern "C" const GUID __declspec(selectany) CLSID_IsoparametricCurves =
    {0x6f579902,0x6cb6,0x4902,{0x80,0x20,0x4f,0x2f,0x71,0xf9,0xc3,0xaa}};
extern "C" const GUID __declspec(selectany) CLSID_IsoparametricCurvesSet =
    {0x74f538e8,0xb3fa,0x40ab,{0x8e,0xec,0x5b,0x30,0x71,0xe9,0x8c,0x44}};
extern "C" const GUID __declspec(selectany) CLSID_IsoparametricCurvesSets =
    {0x6d1aeff5,0x1f8e,0x4bf1,{0x98,0x6c,0x2d,0x43,0x32,0xb3,0xd5,0xf8}};
extern "C" const GUID __declspec(selectany) CLSID_SplineOnSurface =
    {0xfe7d22f2,0x17ed,0x4446,{0xa0,0x31,0x67,0xd6,0x7a,0xc4,0x7f,0x29}};
extern "C" const GUID __declspec(selectany) CLSID_SplinesOnSurfaces =
    {0x83ae651b,0x838c,0x4292,{0x9b,0x82,0x20,0x91,0x8f,0x19,0x28,0x41}};
extern "C" const GUID __declspec(selectany) CLSID_CurveBy2Projections =
    {0x97f94c42,0x4891,0x4c13,{0x84,0x8a,0x52,0x9d,0x3b,0x1f,0x84,0x58}};
extern "C" const GUID __declspec(selectany) CLSID_CurvesBy2Projectionses =
    {0xab57fa3c,0x10b0,0x44bd,{0x96,0xef,0xea,0x9f,0x2a,0xf0,0xd4,0xda}};
extern "C" const GUID __declspec(selectany) CLSID_ProjectionCurve =
    {0x1c5024e9,0x8f3f,0x49d5,{0x9b,0x66,0x42,0xe2,0x6a,0x03,0x61,0x4b}};
extern "C" const GUID __declspec(selectany) CLSID_ProjectionCurves =
    {0x31d3eace,0x36e4,0x4c17,{0x9e,0x47,0x20,0x55,0x5b,0x0b,0x7f,0x07}};
extern "C" const GUID __declspec(selectany) CLSID_Contour3D =
    {0x375fd000,0x6094,0x4351,{0x8e,0x03,0xe2,0xa2,0x63,0x1d,0xfb,0xe0}};
extern "C" const GUID __declspec(selectany) CLSID_Contours3D =
    {0x0ed8dfdc,0x5ef8,0x4a9f,{0x94,0x0f,0x91,0x04,0x77,0x54,0x17,0xd7}};
extern "C" const GUID __declspec(selectany) CLSID_LineSegment3D =
    {0x874a7dfc,0x944e,0x49de,{0x80,0xde,0xeb,0x78,0x89,0x4c,0x48,0xd1}};
extern "C" const GUID __declspec(selectany) CLSID_LineSegments3D =
    {0x9d634adf,0xe8bd,0x48a3,{0xaa,0x20,0x4f,0xe6,0x54,0x60,0x5d,0x3e}};
extern "C" const GUID __declspec(selectany) CLSID_UnhistoredCurve3D =
    {0xdfa86296,0x3244,0x47d5,{0xa3,0x06,0xd1,0x15,0xff,0xc4,0x5d,0xa1}};
extern "C" const GUID __declspec(selectany) CLSID_UnhistoredCurves3D =
    {0xfc9e1d2c,0xce09,0x45e7,{0xb9,0x5b,0xbf,0x06,0x0e,0xd6,0xb5,0x97}};
extern "C" const GUID __declspec(selectany) CLSID_TechnicalDemand3D =
    {0x848b7259,0xb5fe,0x4cf1,{0xa5,0xbc,0x6a,0xd3,0x70,0x4d,0x8f,0x2f}};
extern "C" const GUID __declspec(selectany) CLSID_Embodiment =
    {0x8ed8030c,0x87c3,0x41d4,{0xbb,0x4d,0x31,0x9b,0xa7,0x4d,0x68,0x79}};
extern "C" const GUID __declspec(selectany) IID_INewPartDocumentSettings =
    {0x7f3eebf4,0x9277,0x4603,{0xad,0x0a,0xc8,0xde,0x16,0x24,0xf4,0x44}};
extern "C" const GUID __declspec(selectany) CLSID_Spirals3D =
    {0xc926e817,0x2b20,0x48a1,{0xab,0x97,0xf6,0x39,0x72,0xfb,0xa0,0x7a}};
extern "C" const GUID __declspec(selectany) CLSID_ConicSpiral3D =
    {0xbd740853,0x3960,0x46d9,{0x8d,0xab,0x1c,0x49,0x0e,0x69,0x9b,0x6a}};
extern "C" const GUID __declspec(selectany) CLSID_CylindricSpiral3D =
    {0xcc5b7b89,0xdfa5,0x42eb,{0xb3,0x07,0x11,0x3a,0x01,0x30,0x52,0xd6}};
extern "C" const GUID __declspec(selectany) CLSID_PointsArrOnCurve =
    {0xce1a13ce,0xc56c,0x4bca,{0x94,0xce,0x45,0xd2,0xc3,0x6b,0x7e,0xaa}};
extern "C" const GUID __declspec(selectany) CLSID_PointsArrsOnCurves =
    {0xcfa80033,0xa78c,0x43ea,{0x9c,0xea,0xb2,0x6d,0x1a,0x18,0xfa,0x80}};
extern "C" const GUID __declspec(selectany) CLSID_PointsArrOnSurface =
    {0xe70927b9,0xfaa5,0x4149,{0xb7,0x51,0x94,0x6a,0x1e,0x0e,0x0e,0xfe}};
extern "C" const GUID __declspec(selectany) CLSID_PointsArrsOnSurfaces =
    {0xb4e7ddf0,0xe62a,0x4957,{0xb4,0x77,0xb3,0xb5,0x79,0x7b,0xf8,0x5a}};
extern "C" const GUID __declspec(selectany) CLSID_PointsArrFromFile =
    {0x02155adc,0x2f79,0x497f,{0x9e,0x33,0x9e,0x34,0x96,0x05,0x0c,0x71}};
extern "C" const GUID __declspec(selectany) CLSID_PointsArrsFromFiles =
    {0x6dab2b49,0x9659,0x411b,{0xab,0xeb,0x5e,0xb0,0x49,0xaa,0x81,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_MathCurve3D =
    {0x0bdeef46,0xfcd5,0x4f3c,{0xb9,0xae,0x5a,0x07,0x36,0x89,0xba,0x91}};
extern "C" const GUID __declspec(selectany) CLSID_Axis3D =
    {0x8be0deb4,0x1bd0,0x4997,{0xb8,0x2b,0x14,0x60,0x55,0x74,0xa5,0x3d}};
extern "C" const GUID __declspec(selectany) IID_IAxis3D1 =
    {0x453b98c0,0x91d6,0x415b,{0x8c,0x96,0xce,0x92,0x4f,0x6e,0x32,0x11}};
extern "C" const GUID __declspec(selectany) CLSID_Axes3D =
    {0x7c3d9245,0x648e,0x49d4,{0xa4,0xca,0xdb,0x8d,0x32,0x57,0x68,0x3f}};
extern "C" const GUID __declspec(selectany) CLSID_Axis3DBy2Points =
    {0xf0d21c54,0x2816,0x4fe2,{0x9a,0xa0,0xa8,0x88,0x21,0x48,0x8a,0xb3}};
extern "C" const GUID __declspec(selectany) CLSID_Axis3DBy2Planes =
    {0xef803c9d,0x8e47,0x4eb4,{0xa1,0xf4,0xfd,0x4d,0x37,0x69,0xa7,0x6d}};
extern "C" const GUID __declspec(selectany) CLSID_Axis3DByConeface =
    {0xc0202ada,0x0962,0x41da,{0xad,0xe2,0xd3,0x01,0x5a,0x3e,0x45,0x33}};
extern "C" const GUID __declspec(selectany) CLSID_Axis3DByEdge =
    {0x59309a8d,0xe9b0,0x45c2,{0x98,0xe8,0x79,0x2e,0xc6,0xc9,0x3f,0x15}};
extern "C" const GUID __declspec(selectany) CLSID_Axis3DByPointAndObject =
    {0xa3be6c5c,0xe339,0x4b42,{0x90,0x0e,0x27,0x19,0x84,0x8c,0xdc,0x85}};
extern "C" const GUID __declspec(selectany) CLSID_Axis3DByOperation =
    {0x572af961,0x64c8,0x4335,{0x80,0x8c,0x17,0xf2,0xe8,0xaf,0x01,0x2e}};
extern "C" const GUID __declspec(selectany) CLSID_MathSurface3D =
    {0xd6da79a3,0xcf5d,0x432b,{0x90,0x0f,0x42,0x94,0x03,0x74,0x1d,0xdd}};
extern "C" const GUID __declspec(selectany) CLSID_Planes3D =
    {0x02943f10,0xafc8,0x4be9,{0x86,0xb0,0xac,0xe0,0x92,0x9a,0x2d,0xcc}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3D =
    {0xdebc9cf4,0xad07,0x42f6,{0xa7,0x95,0x17,0x6e,0xb0,0xeb,0x8c,0x75}};
extern "C" const GUID __declspec(selectany) IID_IPlane3D1 =
    {0xde4efb36,0xcf27,0x4dbc,{0x90,0xcb,0x71,0x28,0xc3,0x90,0x36,0x54}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DByPlaneCurve =
    {0x762d8288,0x0893,0x4b8d,{0xa4,0x34,0x99,0xe4,0x44,0x05,0xad,0xe2}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DTangentToFaceInPoint =
    {0x5a341bd4,0x9a7f,0x4dc5,{0x87,0x21,0x88,0xc5,0x44,0x53,0x0f,0x09}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DByOffset =
    {0x3d67d60e,0xa4cc,0x4714,{0x84,0x39,0x9e,0xc6,0x84,0x6e,0x89,0x34}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DBy3Points =
    {0x775b6240,0x2ad6,0x432f,{0x8f,0x65,0xa5,0x4f,0x94,0x5f,0x93,0xf1}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DByAngle =
    {0xd0e15cc6,0x5630,0x42b3,{0x87,0x06,0x8b,0x20,0x5c,0x7e,0x7d,0x11}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DByEdgeAndPoint =
    {0xf2373bf1,0xdc0f,0x4b94,{0xb0,0xae,0x48,0x26,0x5c,0x02,0x8d,0x19}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DParallelByPoint =
    {0x451057bb,0xdd5e,0x44c5,{0x8b,0xc4,0x15,0xf6,0xa2,0xd2,0x4c,0xfc}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DPerpendicularByEdge =
    {0x01a5298a,0x1472,0x4d90,{0x94,0x41,0x8e,0x05,0x91,0x50,0x1d,0x9c}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DNormalToSurface =
    {0x7eedfd78,0x29a9,0x40d6,{0x87,0xb8,0xab,0xd0,0xdc,0xa8,0x67,0x74}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DMiddle =
    {0xa928037a,0x11d4,0x4dd7,{0x93,0xaf,0x49,0x1c,0x9d,0x5a,0xd9,0x07}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DByEdgeAndPlane =
    {0x1dee85e1,0xd2de,0x4981,{0xa6,0x05,0x2d,0x0a,0xe6,0x39,0x3f,0x61}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DBy2Edge =
    {0xc7ddd05c,0xd299,0x46e9,{0x8c,0xd6,0x3e,0x16,0x7a,0x06,0x0f,0x21}};
extern "C" const GUID __declspec(selectany) CLSID_Plane3DTangentToFace =
    {0xa905b4f2,0x52d9,0x4e4c,{0xb9,0xbc,0x09,0xa5,0x60,0x35,0xf7,0x51}};
extern "C" const GUID __declspec(selectany) CLSID_Report =
    {0xc3e4216d,0x283e,0x40b6,{0x8d,0xf9,0xaf,0x5c,0x81,0xb3,0xcf,0x2e}};
extern "C" const GUID __declspec(selectany) CLSID_ReportStyle =
    {0x6611f953,0x12f2,0x41ef,{0x88,0x9d,0xb1,0x7e,0x64,0x3d,0x80,0xe2}};
extern "C" const GUID __declspec(selectany) CLSID_AssociationTables =
    {0xa124f0e6,0xda11,0x45b4,{0x86,0x18,0x95,0xb6,0x3c,0x36,0xc7,0xc3}};
extern "C" const GUID __declspec(selectany) CLSID_AssociationTable =
    {0x8883dd05,0xf024,0x4c44,{0xb9,0xd2,0xe2,0x9e,0xf3,0x61,0xa2,0x3c}};
extern "C" const GUID __declspec(selectany) CLSID_ReportStyleColumn =
    {0x748767b1,0x4a6f,0x4270,{0x8e,0xed,0x98,0x10,0x31,0x3d,0xe3,0x48}};
extern "C" const GUID __declspec(selectany) CLSID_ReportParam =
    {0x11b32e53,0xa4eb,0x427a,{0x87,0x3a,0x56,0x51,0x33,0x0a,0xfc,0x17}};
extern "C" const GUID __declspec(selectany) CLSID_UserFolders =
    {0xbd6a9cd5,0x210a,0x41a7,{0x9a,0xa0,0xd0,0x70,0x64,0xed,0x46,0x0e}};
extern "C" const GUID __declspec(selectany) CLSID_UserFolder =
    {0xff3b01c1,0x0693,0x45ae,{0xa6,0x41,0x8b,0xca,0xae,0x5c,0x99,0xb2}};
extern "C" const GUID __declspec(selectany) CLSID_UserDesignationCompObj =
    {0x2a26a1b6,0x9b08,0x4f28,{0x88,0x28,0x58,0xca,0x66,0x7a,0xd6,0xdf}};
extern "C" const GUID __declspec(selectany) CLSID_UserObject3D =
    {0xde5cd3c8,0x0b9b,0x4b42,{0xa1,0xb7,0x12,0x69,0x0b,0x74,0xd6,0x4e}};
extern "C" const GUID __declspec(selectany) CLSID_UserObjects3D =
    {0xbf632568,0x4e7a,0x4d21,{0xba,0x18,0xae,0x70,0x87,0x75,0xe9,0x2e}};
extern "C" const GUID __declspec(selectany) CLSID_Serializer =
    {0x7979b891,0x59d0,0x44bb,{0xa6,0x43,0x16,0xc3,0x40,0x25,0x9e,0x77}};
extern "C" const GUID __declspec(selectany) CLSID_Placement3D =
    {0xd30e2696,0xb263,0x4283,{0xba,0xca,0x04,0x47,0x1d,0xf8,0x31,0x1e}};
extern "C" const GUID __declspec(selectany) CLSID_Document3DSettings =
    {0x91008bbd,0xb5be,0x42d8,{0xb9,0xd9,0x37,0x12,0x75,0x14,0xc6,0xf1}};
extern "C" const GUID __declspec(selectany) CLSID_Layer3D =
    {0x4f500bed,0x70ae,0x4afd,{0xa1,0x3c,0xc3,0x45,0xfb,0xe3,0x96,0x63}};
extern "C" const GUID __declspec(selectany) CLSID_Layers3D =
    {0xb74e958e,0x2583,0x4b60,{0xa1,0xba,0xfe,0x72,0xec,0x8f,0x09,0x30}};
extern "C" const GUID __declspec(selectany) CLSID_LayerGroup3D =
    {0x049f66cc,0xb9ac,0x4689,{0xb0,0xb4,0xb1,0x18,0x3b,0x5b,0x67,0xb2}};
extern "C" const GUID __declspec(selectany) CLSID_LayerGroups3D =
    {0xe08fa7c6,0x1a29,0x43ae,{0xb0,0xd8,0x15,0x81,0x59,0xbf,0x1d,0x27}};
extern "C" const GUID __declspec(selectany) CLSID_Document3DManager =
    {0x2edcb445,0xfe02,0x4529,{0xba,0xd6,0xde,0xd0,0xc9,0xda,0xf6,0xa5}};
extern "C" const GUID __declspec(selectany) CLSID_ToleranceRecalc =
    {0xb1b69577,0xaa04,0x41ac,{0xa9,0x8e,0xf7,0xdd,0xef,0x40,0xaf,0xc0}};
extern "C" const GUID __declspec(selectany) CLSID_SpecRough3D =
    {0x86eb116e,0x6926,0x4376,{0xae,0x57,0x8f,0x26,0xd8,0x23,0xb3,0x06}};
extern "C" const GUID __declspec(selectany) CLSID_BilletObsolete =
    {0x62afe65c,0x2f2e,0x47fa,{0x96,0x5a,0x37,0xcc,0xa9,0xb2,0x53,0x52}};
extern "C" const GUID __declspec(selectany) CLSID_BilletsObsoletes =
    {0x42c8d1f3,0x0daa,0x477b,{0x89,0x94,0x18,0x4e,0x59,0xdb,0xdd,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_CopyGeometry =
    {0x277e8b80,0xba49,0x4779,{0x94,0xd2,0xcf,0xb7,0xee,0xf2,0x0f,0x06}};
extern "C" const GUID __declspec(selectany) CLSID_CopiesGeometry =
    {0xbb8ba111,0x24ff,0x47f6,{0xae,0x7b,0x97,0x02,0x3f,0x46,0x7a,0x1d}};
extern "C" const GUID __declspec(selectany) CLSID_CollectionGeometry =
    {0x01d8a252,0xc3a1,0x45ea,{0xbc,0x92,0x0e,0x2b,0x62,0x58,0xed,0xf5}};
extern "C" const GUID __declspec(selectany) CLSID_CollectionsGeometry =
    {0x55556ea2,0x4975,0x4c27,{0x97,0xbb,0xa7,0x8c,0x08,0xd9,0x8e,0x2c}};
extern "C" const GUID __declspec(selectany) CLSID_Thread =
    {0x606263b5,0xe920,0x46fb,{0x93,0x0e,0x41,0x07,0xcc,0x0f,0xba,0x1b}};
extern "C" const GUID __declspec(selectany) CLSID_Threads =
    {0xaba1bf7e,0x8138,0x4dc3,{0x8e,0xfb,0xa2,0x40,0xe2,0xb8,0xb3,0x6e}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyGroupBegin =
    {0x4591067e,0xc29a,0x4548,{0x96,0xb6,0xb4,0x55,0xaf,0x70,0x06,0xdc}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyGroupEnd =
    {0x7b10bc9a,0x6a9a,0x4d5e,{0xb8,0x96,0x29,0x41,0x34,0xfb,0x68,0x0f}};
extern "C" const GUID __declspec(selectany) CLSID_Process2D =
    {0xa54a786d,0xfbba,0x45f6,{0xba,0xfb,0x18,0xe6,0xd2,0xce,0x96,0xff}};
extern "C" const GUID __declspec(selectany) CLSID_Phantom2D =
    {0xc08b3775,0x2631,0x4d34,{0x83,0xe0,0xf1,0x8d,0xaf,0x85,0x58,0x48}};
extern "C" const GUID __declspec(selectany) CLSID_Process3D =
    {0x172114b0,0xf8b7,0x4bed,{0xa3,0x8b,0x62,0xbf,0xc4,0x90,0xa3,0xaf}};
extern "C" const GUID __declspec(selectany) CLSID_ThreadPattern =
    {0xa795dec9,0xd9bd,0x4275,{0xb5,0x53,0x44,0x85,0x5b,0xb5,0x9d,0x71}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyTwinSwitcher =
    {0x67d6f78e,0x4f92,0x4809,{0x98,0x94,0x6f,0xa7,0xda,0x81,0x4e,0xfa}};
extern "C" const GUID __declspec(selectany) CLSID_ThreadDialogParam =
    {0x7ad229f8,0xcc73,0x4ff2,{0xa6,0x11,0x02,0x78,0x2b,0x6d,0xdc,0x75}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyPoint3D =
    {0xe32a2d46,0x75f5,0x4da8,{0xa4,0x0e,0x03,0xec,0x80,0x6f,0x20,0xd1}};
extern "C" const GUID __declspec(selectany) CLSID_MateConstraint3D =
    {0x67dbf7c5,0xffb1,0x4e47,{0xa8,0xe5,0x90,0x1a,0x63,0xee,0x13,0x0a}};
extern "C" const GUID __declspec(selectany) CLSID_Mate3DByAngle =
    {0x2d4f2072,0xebd6,0x4cb6,{0xb1,0xc2,0x53,0x5b,0xbf,0x09,0x7f,0x40}};
extern "C" const GUID __declspec(selectany) CLSID_Mate3DByTangent =
    {0xfbbd6a6c,0x65f3,0x492e,{0x90,0x95,0x15,0xd6,0x11,0x1a,0x5e,0xa1}};
extern "C" const GUID __declspec(selectany) CLSID_Mate3DSymmetry =
    {0x80bc4fce,0x18ba,0x42a7,{0x8e,0x62,0x56,0x38,0x43,0x27,0x42,0x50}};
extern "C" const GUID __declspec(selectany) CLSID_Mate3DTransmission =
    {0xfa6ee09a,0xe2c8,0x45b7,{0xa4,0xec,0xb5,0x3f,0x45,0xb8,0x46,0x52}};
extern "C" const GUID __declspec(selectany) CLSID_Mate3DCamGear =
    {0xa7301502,0x52ca,0x4886,{0x94,0xfc,0x5b,0x80,0x02,0x88,0x0f,0xf4}};
extern "C" const GUID __declspec(selectany) CLSID_Mate3DDependentPosition =
    {0x8e8b8453,0x1695,0x477d,{0x9a,0x39,0xc9,0x57,0xff,0xad,0x84,0xfe}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyPreviewText =
    {0x7f6a75b2,0x8c3d,0x46b1,{0x81,0x25,0x07,0xbe,0xb6,0x4b,0x6b,0xbb}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyAggregateControl =
    {0xe3643e08,0x6371,0x413b,{0x8e,0x4a,0x99,0xc5,0x6b,0xd4,0x1d,0x47}};
extern "C" const GUID __declspec(selectany) CLSID_Hole3D =
    {0x9f4504bc,0x739e,0x42c6,{0xa9,0x46,0x78,0x75,0xf3,0xd4,0x35,0x89}};
extern "C" const GUID __declspec(selectany) CLSID_Holes3D =
    {0x12851dca,0xa72c,0x4f44,{0x9c,0xf0,0x28,0x24,0x76,0xf6,0x50,0x52}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyBasePoint =
    {0x0912865e,0x0deb,0x4c6a,{0x8a,0xa0,0x70,0xa5,0x12,0x60,0x3e,0x9e}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyLinkButton =
    {0x24d51cca,0xa3f0,0x4055,{0x86,0xa5,0x32,0x07,0x76,0x79,0xda,0x60}};
extern "C" const GUID __declspec(selectany) CLSID_CountersinkHole3DParameters =
    {0x22d3bacb,0x1077,0x417d,{0xa1,0x38,0xbb,0xf0,0x75,0x4a,0x73,0xb6}};
extern "C" const GUID __declspec(selectany) CLSID_SpotfacingHoleParameters =
    {0xe588e23f,0x6ac1,0x4770,{0xb1,0x84,0x30,0x9b,0x13,0x18,0x0e,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_CountersinkSpotfacingHoleParameters =
    {0x2d9b843d,0x99bb,0x4322,{0xaa,0xe7,0xb1,0xd0,0xc3,0xe8,0x2f,0x83}};
extern "C" const GUID __declspec(selectany) CLSID_ConicHoleParameters =
    {0xd3ca313f,0x8817,0x48b7,{0x89,0x2d,0x6d,0x7d,0xfe,0x1e,0x40,0x7b}};
extern "C" const GUID __declspec(selectany) CLSID_PropertyMarking =
    {0xe4a732a0,0x3da8,0x40e3,{0x9e,0x05,0xe6,0x5f,0x22,0xf0,0x80,0xda}};
extern "C" const GUID __declspec(selectany) CLSID_Chamfer =
    {0x5e6970d9,0xb721,0x4b7c,{0xb2,0x9d,0x7a,0xa4,0xb2,0x5c,0xbc,0xc8}};
extern "C" const GUID __declspec(selectany) CLSID_Chamfers =
    {0x2ac5e1b7,0xc86e,0x476b,{0x90,0x15,0xf1,0x02,0xa3,0x03,0xb0,0xce}};
extern "C" const GUID __declspec(selectany) CLSID_Fillet =
    {0x754d6a63,0xa68d,0x4574,{0xaa,0x01,0xf8,0xc2,0x52,0x87,0x3a,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Fillets =
    {0xbc5254e9,0x8a80,0x49ba,{0x98,0x12,0x68,0x9f,0x59,0x7e,0x09,0x08}};
extern "C" const GUID __declspec(selectany) CLSID_Incline =
    {0x1e0dc81a,0x179b,0x45da,{0xa2,0x85,0x06,0xa4,0x00,0x15,0xc9,0x53}};
extern "C" const GUID __declspec(selectany) CLSID_Inclines =
    {0x6dcec4a9,0xcfa6,0x410b,{0xb7,0xa1,0x1f,0xd6,0x0d,0xcd,0x2b,0xaf}};
extern "C" const GUID __declspec(selectany) CLSID_Rib =
    {0x474ff0ba,0xe909,0x468c,{0xbd,0x6c,0x9a,0x45,0x5b,0x42,0x03,0x50}};
extern "C" const GUID __declspec(selectany) CLSID_Ribs =
    {0x7e0d8d58,0x3bf2,0x4437,{0xbc,0x0d,0x23,0x62,0x61,0xc7,0x06,0xcc}};
extern "C" const GUID __declspec(selectany) CLSID__Shell =
    {0x0290ba8f,0x2f72,0x4cbb,{0xb7,0xad,0xd0,0x43,0x7f,0x6b,0xb1,0x5c}};
extern "C" const GUID __declspec(selectany) CLSID_Shells =
    {0x6cffe821,0x37ca,0x476c,{0x9a,0x65,0x6e,0x01,0x14,0x59,0x75,0x2a}};
extern "C" const GUID __declspec(selectany) CLSID__Boolean =
    {0x340a4b80,0xc3ea,0x4c3d,{0x9d,0xa2,0x50,0xbb,0x2b,0x4a,0xdf,0xee}};
extern "C" const GUID __declspec(selectany) CLSID_Booleans =
    {0x86ba33c6,0x0381,0x4ceb,{0xa6,0xfd,0x84,0xc3,0x96,0x45,0xd7,0xd2}};
extern "C" const GUID __declspec(selectany) CLSID_Cut =
    {0x2757f3a6,0x617f,0x4b75,{0x8a,0xbc,0x45,0x9e,0x30,0x56,0x13,0x16}};
extern "C" const GUID __declspec(selectany) CLSID_Cuts =
    {0x3803d968,0xe469,0x45c2,{0x8c,0x3b,0x0d,0x5b,0x0e,0x00,0xc0,0x34}};
extern "C" const GUID __declspec(selectany) CLSID_Loft =
    {0xf4fa0ee2,0x9988,0x4fe9,{0xaf,0x69,0xd9,0xf8,0x43,0x68,0xaf,0x09}};
extern "C" const GUID __declspec(selectany) CLSID_Lofts =
    {0x73f8984c,0x5a44,0x455c,{0x97,0x3d,0x98,0xe9,0x58,0x9d,0xb5,0x7a}};
extern "C" const GUID __declspec(selectany) CLSID_Coupling =
    {0xc2b10eda,0xfafa,0x4485,{0xa7,0xef,0x0a,0x61,0xfd,0x26,0x53,0x6c}};
extern "C" const GUID __declspec(selectany) CLSID_Evolution =
    {0xb8beec82,0xbec3,0x406f,{0x93,0xc5,0x44,0x64,0x14,0x9c,0x32,0x75}};
extern "C" const GUID __declspec(selectany) CLSID_Evolutions =
    {0xc21b92bd,0xb9d0,0x44c7,{0xb5,0x2f,0x4a,0xfe,0x57,0xf7,0x89,0x9e}};
extern "C" const GUID __declspec(selectany) CLSID_Vertex =
    {0xd3e2c967,0xab5a,0x4732,{0xa7,0xc1,0xd1,0x85,0xdf,0x7a,0x0e,0xd6}};
extern "C" const GUID __declspec(selectany) CLSID_Edge =
    {0x98f55f56,0x45a6,0x4210,{0x95,0x5a,0xe8,0x31,0x90,0x7f,0xd3,0x6f}};
extern "C" const GUID __declspec(selectany) CLSID_Face =
    {0xb92823bb,0x3d0f,0x4994,{0x8b,0xb4,0x7b,0xfc,0x4b,0x6f,0x4c,0xce}};
extern "C" const GUID __declspec(selectany) CLSID_Loop7 =
    {0x6198541b,0x92b1,0x40b1,{0x84,0x84,0xf6,0xe1,0x83,0x02,0xf7,0x5e}};
extern "C" const GUID __declspec(selectany) CLSID_OrientedEdge7 =
    {0x83abcacd,0xf2cf,0x489c,{0xbb,0xe6,0x11,0x60,0x69,0x59,0x18,0x39}};
extern "C" const GUID __declspec(selectany) CLSID_UnionComponents =
    {0xd8af682b,0x5f03,0x4cce,{0x9e,0x77,0x78,0x7a,0x76,0xd2,0xb5,0x5f}};
extern "C" const GUID __declspec(selectany) CLSID_UnionsComponents =
    {0x801b8cc1,0x1735,0x4448,{0xbe,0x29,0xa1,0x6e,0x57,0x8d,0x98,0x51}};
extern "C" const GUID __declspec(selectany) CLSID_MoldCavity =
    {0xcfdd8bf4,0x0d38,0x49e7,{0xa8,0x59,0xca,0x3b,0xff,0xcd,0xb7,0x99}};
extern "C" const GUID __declspec(selectany) CLSID_MoldCavities =
    {0xc334e4dd,0x61dc,0x402e,{0xbb,0x85,0x0d,0xc7,0xc8,0x9b,0x9b,0xc2}};
extern "C" const GUID __declspec(selectany) CLSID_MacroObject3D =
    {0x6b9c4409,0xd991,0x4e0e,{0xa8,0xde,0xaf,0xdd,0x3a,0x58,0x2a,0xe8}};
extern "C" const GUID __declspec(selectany) CLSID_MacroObjects3D =
    {0xa7238b7e,0x7e31,0x46c0,{0xa8,0x14,0xec,0xb9,0x0b,0x54,0x14,0xa5}};
extern "C" const GUID __declspec(selectany) CLSID_NurbsSurfaceByCurvesMesh =
    {0x53212e12,0xf293,0x4574,{0xbb,0x38,0x62,0x96,0x78,0x71,0xa2,0x16}};
extern "C" const GUID __declspec(selectany) CLSID_NurbsSurfacesByCurvesMeshs =
    {0x0bb4e6a3,0x0ba0,0x4839,{0x9f,0x06,0x53,0x17,0x99,0x30,0x91,0x8e}};
extern "C" const GUID __declspec(selectany) CLSID_JointSurface =
    {0xb82a24f7,0xc580,0x4577,{0x9f,0x18,0x09,0xe8,0x17,0xd9,0xcc,0x90}};
extern "C" const GUID __declspec(selectany) CLSID_JointSurfaces =
    {0x0fd2565c,0x9396,0x4df6,{0x93,0x6a,0xdb,0xbc,0x33,0x78,0xbc,0x21}};
extern "C" const GUID __declspec(selectany) CLSID_BodyReposition =
    {0x5924e1df,0x1dba,0x4076,{0x88,0xee,0x55,0xbf,0xa2,0xd4,0x08,0x8d}};
extern "C" const GUID __declspec(selectany) CLSID_BodyRepositions =
    {0xb0280081,0x56aa,0x48b8,{0xa6,0x75,0x30,0xf6,0xa4,0xae,0x64,0x45}};
extern "C" const GUID __declspec(selectany) CLSID_DistanceAngleMeasurement3D =
    {0x2a128198,0xf2cf,0x4f33,{0x85,0xbf,0x7e,0x48,0x14,0x25,0x43,0x08}};
extern "C" const GUID __declspec(selectany) CLSID_DistanceAngleMeasurements3D =
    {0xcfa1be63,0xdaec,0x4b9b,{0xae,0x59,0xa2,0x00,0x32,0x3f,0xda,0xb1}};
extern "C" const GUID __declspec(selectany) CLSID_EdgeLengthMeasurement3D =
    {0x8064eace,0x0aae,0x4ae9,{0x96,0xa1,0xc7,0xa3,0x13,0x10,0xdd,0xd6}};
extern "C" const GUID __declspec(selectany) CLSID_EdgeLengthMeasurements3D =
    {0x18b1fabc,0x67db,0x4847,{0xa0,0xe8,0x95,0xcf,0xc5,0x42,0xd1,0x09}};
extern "C" const GUID __declspec(selectany) CLSID_AreaMeasurement3D =
    {0xa0d30170,0xdd32,0x466a,{0x9c,0xdb,0xac,0x91,0xb0,0x79,0x59,0x95}};
extern "C" const GUID __declspec(selectany) CLSID_AreaMeasurements3D =
    {0xd1b34114,0x0946,0x4074,{0x9e,0x57,0xa8,0x4a,0x83,0x25,0x84,0x5a}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalSketchBend =
    {0x4a2700f2,0x2a3f,0x443b,{0x91,0x40,0xe6,0x31,0xae,0xe5,0x72,0xda}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalSketchBends =
    {0xe7bd79cf,0xf9ec,0x4eef,{0x84,0x31,0xd0,0xb6,0x1b,0x54,0xe8,0xb6}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalClosedCorner =
    {0xd3fa6c9c,0xdac5,0x4e55,{0xa1,0xb0,0x5a,0x47,0xad,0x9f,0x5b,0x40}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalClosedCorners =
    {0x2371bfb4,0xd216,0x4bab,{0x8d,0xa8,0xf0,0x50,0xbd,0xac,0x05,0x54}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalPlate =
    {0x0d764bea,0x4ba1,0x440b,{0x89,0x30,0x62,0xe6,0x75,0xdf,0xbb,0x84}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalPlates =
    {0x76d215ce,0xf548,0x488c,{0xab,0xd0,0xfd,0xfe,0x79,0x4f,0x50,0x5f}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalBendedStraighten =
    {0x81abf9fe,0x165d,0x4975,{0xaa,0xea,0x59,0xae,0x49,0x89,0x88,0x5b}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalBendedStraightens =
    {0x2a0b422f,0xd150,0x4a4b,{0xbe,0x25,0x2a,0xe2,0xf9,0x70,0x68,0xef}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalShoulder =
    {0x5f2dc19a,0xc995,0x40dc,{0xa6,0xc5,0xbf,0x5c,0xa4,0x53,0xe1,0xeb}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalShoulders =
    {0xfabb909b,0xc4bc,0x4632,{0x85,0x66,0xb7,0xf3,0x58,0xfd,0x3f,0xe0}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalJalousie =
    {0x0f80305a,0xf369,0x4406,{0x95,0x19,0x8e,0xc1,0x7a,0xaa,0x8f,0xd6}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalJalousies =
    {0x64eda2cf,0x1a52,0x4766,{0xaa,0xbf,0xdd,0x45,0x1e,0xf1,0x85,0xcb}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalPressForming =
    {0x4757f80e,0x8981,0x4ed5,{0xad,0xf9,0xbc,0xf1,0x4e,0x59,0x2b,0x6f}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalPressFormings =
    {0xc974e025,0x46fb,0x4eed,{0x94,0x56,0x78,0x87,0x6d,0xdc,0xc4,0xfb}};
extern "C" const GUID __declspec(selectany) CLSID_MeshObject3D =
    {0x6774dd56,0x8666,0x4b40,{0xb2,0x2f,0x74,0xb4,0x32,0x99,0x34,0x2d}};
extern "C" const GUID __declspec(selectany) CLSID_ContentDialogParam =
    {0x6ab4afcd,0xefd7,0x49fb,{0x9f,0xa2,0x0c,0xbb,0xac,0x09,0x4d,0xe9}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalRib =
    {0x9dc3e672,0x5b83,0x459b,{0xaa,0x24,0x05,0x2e,0x1c,0x8f,0x13,0x8a}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalRibs =
    {0xe7c8ca4e,0x0110,0x45ef,{0xb5,0xcf,0x3a,0x3d,0x85,0xab,0xcf,0xe3}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalRuledShell =
    {0xd92a7102,0x79cb,0x46d8,{0xb1,0x8a,0x18,0x04,0xd7,0x1f,0x54,0x16}};
extern "C" const GUID __declspec(selectany) CLSID_LibraryHoleParameters =
    {0xda8608dc,0x9b21,0x418e,{0x88,0x13,0xaa,0x33,0xb5,0x0a,0x4d,0xad}};
extern "C" const GUID __declspec(selectany) CLSID_ConicCurve =
    {0x98cf3e5e,0x0548,0x4616,{0x8b,0xb9,0x28,0xc1,0xa1,0x09,0x29,0x55}};
extern "C" const GUID __declspec(selectany) CLSID_ConicCurves =
    {0x4c5033ff,0x6870,0x45b1,{0xa9,0x95,0x73,0x35,0x78,0xc2,0x35,0x53}};
extern "C" const GUID __declspec(selectany) CLSID_CircularCentres =
    {0x46bf1402,0x7436,0x42cd,{0x90,0x84,0xda,0x35,0xc4,0x98,0x32,0x6a}};
extern "C" const GUID __declspec(selectany) CLSID_CircularsCentries =
    {0x412f4305,0xe302,0x4870,{0x86,0x3d,0x99,0x01,0x5f,0x6f,0x08,0x96}};
extern "C" const GUID __declspec(selectany) CLSID_LinearCentres =
    {0xb7c0077b,0xfaef,0x4183,{0xb3,0xbe,0x0b,0x07,0x52,0x9d,0x33,0x42}};
extern "C" const GUID __declspec(selectany) CLSID_LinearsCentries =
    {0xeafbf8c9,0xea01,0x4550,{0x8c,0x56,0x39,0x1d,0x57,0xec,0xce,0x3a}};
extern "C" const GUID __declspec(selectany) CLSID_FullFillet =
    {0x39bc03af,0x5e8d,0x4466,{0xb6,0x9a,0x7e,0x5c,0x2f,0xe8,0xe7,0x9c}};
extern "C" const GUID __declspec(selectany) CLSID_FullFillets =
    {0xc2c76bbb,0xc57c,0x4263,{0x82,0x50,0x62,0x89,0xdf,0x04,0xee,0x8e}};
extern "C" const GUID __declspec(selectany) CLSID_Zone =
    {0xa81f2abb,0x4f55,0x4c82,{0xbd,0xc8,0x78,0xd1,0x0b,0xaa,0x8c,0x15}};
extern "C" const GUID __declspec(selectany) CLSID_ZoneDivision =
    {0x39e54d0f,0x3d65,0x43cd,{0xbc,0xa5,0xb8,0xd4,0x6f,0xe1,0x90,0x77}};
extern "C" const GUID __declspec(selectany) CLSID_ZonesManager =
    {0xd45c07b1,0xe8fe,0x43f8,{0x83,0x96,0x5b,0xdb,0x05,0x93,0x71,0x55}};
extern "C" const GUID __declspec(selectany) CLSID_ZoneParametersByBorderPoints =
    {0xcb8a3b37,0xb26d,0x400c,{0xae,0x24,0x13,0x95,0x17,0x6f,0xdc,0x87}};
extern "C" const GUID __declspec(selectany) CLSID_ZoneParametersByObjects =
    {0xc41922e4,0xe46f,0x48c2,{0x8e,0xf3,0x3a,0x52,0x59,0x8a,0xff,0x26}};
extern "C" const GUID __declspec(selectany) CLSID_ZoneDivisionParametersRegular =
    {0x00f35e8b,0xf196,0x4447,{0x95,0x46,0xca,0x9d,0x21,0xec,0xd3,0xb7}};
extern "C" const GUID __declspec(selectany) CLSID_ZoneDivisionParametersByPlanes =
    {0x2d21b406,0x9933,0x4038,{0x91,0x96,0x51,0x11,0x47,0x2c,0x50,0x99}};
extern "C" const GUID __declspec(selectany) CLSID_DynamicCrossSectionStep =
    {0x5ca6f5da,0x81a0,0x4b99,{0x93,0xb4,0xc4,0xd6,0x8d,0xd8,0xf4,0x2d}};
extern "C" const GUID __declspec(selectany) CLSID_DynamicCrossSection =
    {0x2180f44d,0x3125,0x45f6,{0x84,0x66,0x62,0x79,0x31,0x72,0xa9,0x40}};
extern "C" const GUID __declspec(selectany) CLSID_DynamicCrossSectionStepParametersByFreePlane =
    {0x0cefc601,0xd4aa,0x4493,{0x89,0x05,0x63,0x6f,0x87,0x16,0x75,0x15}};
extern "C" const GUID __declspec(selectany) CLSID_DynamicCrossSectionStepParametersByOffsetPlane =
    {0x543a8daf,0xa009,0x4d20,{0x83,0xee,0x1e,0xcf,0xfa,0xb1,0xcd,0x24}};
extern "C" const GUID __declspec(selectany) CLSID_DynamicCrossSectionStepParametersByRotatedPlane =
    {0xd6f7640a,0xce45,0x4792,{0xb3,0x01,0xb9,0xf9,0xbe,0x8f,0xf4,0x83}};
extern "C" const GUID __declspec(selectany) CLSID_DynamicCrossSectionStepParametersByZone =
    {0x017a292e,0x8bfe,0x4a2c,{0xa3,0xf5,0xac,0x6b,0x8d,0x01,0x5d,0x49}};
extern "C" const GUID __declspec(selectany) CLSID_DynamicCrossSectionStepParametersByBorderPoints =
    {0xe785bb44,0xea2d,0x4704,{0xa6,0x45,0x24,0x00,0xa1,0x9a,0xeb,0xbc}};
extern "C" const GUID __declspec(selectany) CLSID_AxisLine3D =
    {0x11f1cf98,0x3563,0x4dfa,{0xb6,0xac,0xe3,0xbc,0xd6,0x19,0x70,0x85}};
extern "C" const GUID __declspec(selectany) CLSID_FindObjectParameters =
    {0xd4ed8463,0x0728,0x42bd,{0x94,0x13,0x83,0x14,0x4e,0x17,0x42,0x41}};
extern "C" const GUID __declspec(selectany) DIID_ksFindObjectParametersNotify =
    {0xe0c4d376,0x8503,0x4fc1,{0x84,0x42,0x79,0x4e,0xc7,0xf2,0x63,0x64}};
extern "C" const GUID __declspec(selectany) CLSID_Manipulators =
    {0x7cdb34a1,0x2b31,0x4ffd,{0xba,0xf7,0xc0,0x6b,0x58,0x8f,0xe0,0xcb}};
extern "C" const GUID __declspec(selectany) IID_IPlacement3DManipulator =
    {0x46597352,0x925c,0x4d1b,{0x89,0xe3,0x68,0x68,0xd5,0x4f,0xaf,0xe6}};
extern "C" const GUID __declspec(selectany) CLSID_Placement3DManipulator =
    {0x575c0551,0x83d0,0x475c,{0xb6,0xa9,0x49,0xe7,0x88,0xa8,0xeb,0x41}};
extern "C" const GUID __declspec(selectany) CLSID_EditDoubleManipulator =
    {0xf942d621,0x874a,0x4a51,{0xa6,0x51,0xa4,0x35,0xce,0x0c,0x63,0x04}};
extern "C" const GUID __declspec(selectany) CLSID_MouseEnterLeaveParameters7 =
    {0xb05df16e,0x5d90,0x4931,{0x91,0x97,0x81,0x5a,0x2d,0x1e,0x36,0x5d}};
extern "C" const GUID __declspec(selectany) CLSID_RestoredSurface =
    {0xf2c7d9b1,0xc665,0x4c44,{0xae,0xa8,0xbd,0x2c,0x69,0x38,0xe5,0xa6}};
extern "C" const GUID __declspec(selectany) CLSID_RestoredSurfaces =
    {0xf1603067,0xe7c1,0x43c2,{0x9f,0x8f,0xb8,0x32,0x38,0xd6,0x64,0x54}};
extern "C" const GUID __declspec(selectany) CLSID_Styles =
    {0x937a14c5,0x7fb0,0x4675,{0x80,0xd5,0xae,0x99,0xa7,0x3d,0x52,0x54}};
extern "C" const GUID __declspec(selectany) CLSID_CurveStyle =
    {0xb357540f,0xda46,0x471c,{0x90,0xf9,0x20,0x18,0xcb,0x2d,0xc7,0x0e}};
extern "C" const GUID __declspec(selectany) CLSID_HatchStyle =
    {0xf280e407,0xa09f,0x4a98,{0x93,0xa4,0x45,0x12,0x60,0xa3,0xe4,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IApplicationLicenseManager =
    {0x742aa7cc,0x8019,0x4854,{0xa8,0xff,0x9e,0xe1,0xff,0xbd,0x04,0x60}};
extern "C" const GUID __declspec(selectany) IID_IPLMObject =
    {0xbe4ba098,0x99b4,0x4c27,{0x91,0x2b,0x3a,0xd8,0x3a,0x04,0xe5,0x43}};
extern "C" const GUID __declspec(selectany) IID_IPLMObjectsManager =
    {0x95615543,0x48e9,0x4738,{0x9b,0x01,0xd8,0xab,0xc2,0xc9,0x00,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IMultiThicknessGroupsManager =
    {0x4fb26621,0x6a86,0x43ff,{0xbb,0x61,0xaf,0x1b,0x04,0xaf,0xd2,0x2b}};
extern "C" const GUID __declspec(selectany) CLSID_ConditionIntersect =
    {0xf7458066,0x14b5,0x4945,{0xac,0xcc,0x11,0x99,0xf9,0x8a,0xaf,0xda}};
extern "C" const GUID __declspec(selectany) CLSID_ConditionIntersects =
    {0x0031bfff,0x6a43,0x44b4,{0x8e,0x0b,0x0d,0xa3,0x98,0x4c,0xb9,0xed}};
extern "C" const GUID __declspec(selectany) CLSID_TextDocumentSectionsManager =
    {0x87749a4b,0x353e,0x4a5a,{0x86,0x2a,0xf0,0x25,0xb4,0x96,0x09,0xb5}};
extern "C" const GUID __declspec(selectany) CLSID_TextDocumentSection =
    {0x40a3f4a8,0xe1fe,0x4a31,{0x89,0x22,0xb4,0x7c,0x80,0x97,0xf1,0x4f}};
extern "C" const GUID __declspec(selectany) CLSID_TexturesParam =
    {0xb0aa22ba,0x3f8b,0x4dc7,{0x97,0xff,0x68,0x8a,0xe4,0x67,0x17,0x9d}};
extern "C" const GUID __declspec(selectany) CLSID_WireFrame3D =
    {0x50a8b5e3,0xbe42,0x49f4,{0xb0,0xa3,0xc4,0x1c,0xa1,0x1e,0x2b,0x89}};
extern "C" const GUID __declspec(selectany) CLSID_WireFrames3D =
    {0x86f9862f,0xf772,0x45a9,{0x80,0xf5,0x95,0x0a,0xea,0x60,0xb4,0x75}};
extern "C" const GUID __declspec(selectany) CLSID_DismantleStep =
    {0x5081d446,0x4a8e,0x47fd,{0xa6,0x58,0xc6,0x01,0xa6,0x3e,0xc8,0x2b}};
extern "C" const GUID __declspec(selectany) CLSID_SaveAsDetailParam =
    {0x26911eb9,0x82ba,0x4d2a,{0x86,0xae,0x79,0xc8,0x52,0x56,0x2b,0x16}};
extern "C" const GUID __declspec(selectany) IID_IContextPanel =
    {0x480a9539,0xf347,0x4b46,{0xbd,0xfb,0x73,0x23,0xae,0xa5,0xbb,0x37}};
extern "C" const GUID __declspec(selectany) CLSID_SpecificationObjectCreateParam =
    {0x7f197d3f,0xb08e,0x4072,{0x8b,0x85,0x48,0x3c,0x02,0xa9,0xb6,0x44}};
extern "C" const GUID __declspec(selectany) IID_IDimension3D =
    {0x92b07ad7,0x89a8,0x4d65,{0x98,0x7a,0x0e,0x31,0xd8,0x2b,0xc0,0x75}};
extern "C" const GUID __declspec(selectany) CLSID_FindObject3DParameters =
    {0x6bd3e1ad,0x7bc1,0x4ba3,{0x9d,0xf6,0x39,0x01,0x5e,0x70,0x27,0xeb}};
extern "C" const GUID __declspec(selectany) CLSID_NumericGroup =
    {0xfdeef43a,0xf78f,0x4cde,{0xbd,0x0c,0xb2,0xc5,0xe4,0x7f,0xba,0xe9}};
extern "C" const GUID __declspec(selectany) CLSID_ArcDimension3D =
    {0x7b0de800,0x4b2b,0x4272,{0xb5,0x79,0x4a,0x29,0x51,0x7d,0xe0,0xc4}};
extern "C" const GUID __declspec(selectany) CLSID_ArcDimensions3D =
    {0x5eb98807,0x951d,0x48cc,{0x81,0x5c,0x07,0xa4,0xb9,0x09,0xb9,0x01}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalPunch =
    {0x854f862d,0x96da,0x4039,{0x8e,0x5b,0xd3,0xa2,0x11,0x0a,0x60,0x37}};
extern "C" const GUID __declspec(selectany) CLSID_SheetMetalPunchs =
    {0x0634aa3b,0xd8a3,0x450d,{0x81,0xf8,0x48,0x01,0xc7,0x07,0xcd,0x8e}};
extern "C" const GUID __declspec(selectany) CLSID_FaceMovers =
    {0x4051b163,0x9495,0x47e8,{0x9b,0xad,0x30,0xd7,0x71,0xcd,0x4f,0x81}};
extern "C" const GUID __declspec(selectany) CLSID_FaceMover =
    {0x13816df7,0xcf10,0x4a87,{0xa7,0x6f,0xce,0xe1,0x43,0xbf,0x55,0x70}};
extern "C" const GUID __declspec(selectany) CLSID_DocumentSettings1 =
    {0xc83d78f6,0xb8f8,0x412b,{0xac,0x40,0x3a,0x95,0xea,0x7a,0xbd,0x2c}};
extern "C" const GUID __declspec(selectany) CLSID__FormatLabelRules =
    {0x56aac385,0x274b,0x4823,{0xb8,0x40,0xdd,0xd7,0xfd,0x7b,0x7d,0x58}};
extern "C" const GUID __declspec(selectany) CLSID_SplitSolid =
    {0x13fb65b5,0x8ecd,0x49c8,{0xb9,0x3d,0x94,0x79,0xb8,0xb5,0xf6,0x57}};
extern "C" const GUID __declspec(selectany) CLSID_SplitSolids =
    {0xb629e0de,0x2092,0x46c7,{0x8d,0x7e,0x98,0xc7,0xe6,0xca,0xc8,0x9c}};
extern "C" const GUID __declspec(selectany) IID_IDimension2D =
    {0xd025b2c1,0x1b75,0x4266,{0x9f,0x73,0x8b,0xcf,0xa1,0x7c,0xa5,0x52}};
extern "C" const GUID __declspec(selectany) IID_IDesignation3D =
    {0xb6c0160a,0x54b2,0x404e,{0x96,0x67,0xc7,0xbd,0x27,0x89,0x72,0xed}};
extern "C" const GUID __declspec(selectany) IID_IDesignation2D =
    {0x2843869b,0x82a0,0x4cac,{0x91,0xdf,0xab,0xf5,0x53,0xea,0x8a,0x89}};
extern "C" const GUID __declspec(selectany) CLSID_RasterConvertParameters =
    {0x78afbd9d,0x1a2d,0x434f,{0x86,0xb9,0x86,0xa8,0x8b,0xd3,0xb0,0xa1}};
extern "C" const GUID __declspec(selectany) CLSID_AdditionConvertParameters =
    {0x860b59d0,0x0921,0x4e65,{0xa3,0x77,0x21,0xe7,0xff,0xb0,0x90,0xfa}};
extern "C" const GUID __declspec(selectany) IID_ISystemTemplatesSettings =
    {0x409ce413,0x1ffa,0x4e20,{0xb7,0x9a,0x62,0xbf,0xd8,0x7e,0xfa,0xd4}};
extern "C" const GUID __declspec(selectany) CLSID_ModelText =
    {0x7ee6c36f,0xc8fd,0x4902,{0x8e,0x08,0x84,0xf8,0x98,0x0f,0x32,0x9d}};
extern "C" const GUID __declspec(selectany) CLSID_ModelTexts =
    {0xf2308f47,0x3778,0x400a,{0xb3,0x9e,0xb8,0xe0,0xe0,0xfc,0xea,0x3b}};
extern "C" const GUID __declspec(selectany) CLSID_ModelTable =
    {0x10f2efa2,0xbfa1,0x40da,{0x82,0xdf,0x73,0xfe,0x5a,0x22,0x5c,0x12}};
extern "C" const GUID __declspec(selectany) CLSID_ModelTables =
    {0x53e1a473,0xac75,0x4571,{0xa9,0xea,0xbd,0xe9,0x7a,0xe5,0xa9,0x5f}};
extern "C" const GUID __declspec(selectany) IID_IKompasAPIObject =
    {0x5c799a83,0xc0a4,0x4312,{0xbe,0xb0,0x21,0xcb,0xd7,0xff,0x4c,0x13}};
extern "C" const GUID __declspec(selectany) IID_IKompasCollection =
    {0x901f85de,0xfa5a,0x4314,{0xbd,0x75,0x06,0x6a,0x79,0xaf,0x20,0xa8}};
extern "C" const GUID __declspec(selectany) IID_IDocumentFrame =
    {0x4437faba,0x990f,0x45e2,{0xb1,0xa2,0x77,0x54,0xfb,0x32,0x6b,0x76}};
extern "C" const GUID __declspec(selectany) IID_IDocumentFrames =
    {0x1d18c466,0xc085,0x4d68,{0xa4,0x65,0xa8,0x5d,0x0c,0x8e,0x3a,0x0e}};
extern "C" const GUID __declspec(selectany) IID_IDocumentSettings =
    {0xb35ff50e,0x2991,0x4630,{0x8a,0xb8,0xdc,0x31,0x53,0xe7,0x97,0x1a}};
extern "C" const GUID __declspec(selectany) IID_ITextFont =
    {0xa6ad008d,0x58d1,0x48b5,{0xbd,0x29,0xe6,0x79,0x52,0x89,0xfe,0x4b}};
extern "C" const GUID __declspec(selectany) IID_ITabulator =
    {0x2dd73b92,0xf8c8,0x49aa,{0xae,0xcd,0xb7,0x57,0x13,0x42,0x7f,0xc1}};
extern "C" const GUID __declspec(selectany) IID_ITabulators =
    {0xbb66e097,0x95c7,0x49b1,{0xb6,0xfd,0x35,0x06,0xc7,0x75,0x8d,0x09}};
extern "C" const GUID __declspec(selectany) IID_ITextStyle =
    {0x7ea65ca0,0x420d,0x4e1d,{0x8c,0x19,0x99,0x84,0x95,0xc4,0xda,0x2f}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationSubsection =
    {0x7f0e5f63,0x815c,0x46e5,{0xb9,0x9e,0xc2,0x42,0x44,0x56,0x6c,0x00}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationSubsections =
    {0x56532cb4,0xbd3f,0x442c,{0xaf,0xa4,0x0e,0x6b,0xeb,0x67,0x7e,0x61}};
extern "C" const GUID __declspec(selectany) IID_IAdditionalBlockSectionTuning =
    {0xe04b8464,0xc8d6,0x4bac,{0x99,0xb5,0xae,0x79,0xeb,0xbd,0xb2,0x05}};
extern "C" const GUID __declspec(selectany) IID_IAdditionalBlockSectionTunings =
    {0x43efa203,0xf956,0x43d6,{0xb6,0x03,0x87,0x80,0x7d,0xde,0xfd,0x0a}};
extern "C" const GUID __declspec(selectany) IID_IAdditionalBlockTuning =
    {0x9cd5b016,0x9ce9,0x4e0a,{0x89,0x02,0x19,0x6d,0x11,0x36,0x05,0x36}};
extern "C" const GUID __declspec(selectany) IID_IAdditionalBlockTunings =
    {0x8910cc92,0xac76,0x4837,{0xab,0x7a,0x5f,0xd3,0xc7,0xb7,0x47,0x28}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationTuningSection =
    {0xe68aa413,0xcc35,0x450d,{0xbf,0x35,0x0f,0x29,0x4f,0x59,0xb0,0x8c}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationTuningSections =
    {0x01b1bf6f,0xb9e3,0x4e94,{0x99,0xa0,0x81,0x39,0x4f,0xb9,0x9b,0x16}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationTuning =
    {0xbb719d42,0xe44c,0x445b,{0x96,0x9a,0x0e,0x2f,0x63,0xe9,0x7f,0xc8}};
extern "C" const GUID __declspec(selectany) IID_ISheetFormat =
    {0xb9cde694,0x4c33,0x4375,{0xa6,0xf6,0xae,0x94,0xdc,0x75,0x95,0x10}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationColumnStyle =
    {0x16839caa,0x3afb,0x49a4,{0xa1,0x9a,0xc6,0x19,0x63,0x96,0x76,0x49}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationColumnStyles =
    {0x41529a95,0x51f0,0x44b0,{0x9d,0x55,0x57,0x53,0xbc,0xeb,0x23,0xbc}};
extern "C" const GUID __declspec(selectany) IID_IAdditionalBlockStyle =
    {0xb2a43fa6,0x9bce,0x4468,{0x96,0x62,0x81,0x1a,0x62,0x55,0xe2,0x20}};
extern "C" const GUID __declspec(selectany) IID_IAdditionalBlockStyles =
    {0x90e2fbec,0xa56f,0x423c,{0xb8,0x9f,0x47,0x96,0x73,0xed,0xd8,0x95}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationSectionStyle =
    {0x4b61fc7f,0x4826,0x4b58,{0x8c,0xcb,0x7d,0x45,0x9a,0xd0,0xbe,0x7b}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationSectionStyles =
    {0x24ae8484,0xf4f4,0x4059,{0xaf,0xc7,0x94,0x92,0xa6,0x4c,0x88,0xe8}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationStyle =
    {0xf237d2b3,0xdfee,0x4702,{0xb7,0x1f,0xe5,0xf6,0x92,0x3f,0x03,0xe6}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationColumnItem =
    {0x2babdd01,0xeaca,0x4137,{0x97,0x49,0x25,0xb8,0xc5,0xe2,0x30,0xee}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationColumnItems =
    {0xf4bab79a,0x8a35,0x44d5,{0xbe,0x44,0xc5,0x66,0xe4,0x44,0xf3,0x42}};
extern "C" const GUID __declspec(selectany) IID_ITextItem =
    {0x1de74afb,0x5026,0x4b85,{0x86,0x1f,0xf0,0xcf,0xdb,0xd4,0x43,0xe6}};
extern "C" const GUID __declspec(selectany) IID_ITextLine =
    {0xaab72fe2,0xdea3,0x4fb6,{0xb0,0xdd,0xb9,0x26,0x24,0x9e,0xf6,0x7c}};
extern "C" const GUID __declspec(selectany) IID_ITextTable =
    {0x9ae6c0a0,0x72eb,0x4a51,{0xb5,0x4c,0xa0,0xe5,0x7c,0xc5,0xf6,0xdc}};
extern "C" const GUID __declspec(selectany) IID_IText =
    {0x99b840fc,0x0150,0x4dad,{0xbc,0x0e,0xad,0x48,0x1b,0xaa,0xb8,0xc2}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationColumn =
    {0x3ecfb777,0x2645,0x42b5,{0xa6,0xed,0x11,0x16,0x88,0x43,0x3b,0x26}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationColumns =
    {0x9f44bf03,0xde25,0x4dde,{0xad,0xa0,0x92,0x38,0x41,0x99,0xc1,0x00}};
extern "C" const GUID __declspec(selectany) IID_IAttachedDocument =
    {0x333e9e11,0xd161,0x49ae,{0x97,0x91,0x8b,0xed,0xb5,0x8b,0x4c,0x78}};
extern "C" const GUID __declspec(selectany) IID_IAttachedDocuments =
    {0x81fab1c5,0xf566,0x4d06,{0x8d,0x3d,0x17,0xff,0x01,0xd3,0x56,0x6f}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationObject =
    {0x72eb4e8e,0x7952,0x4b36,{0x85,0x2b,0x48,0x16,0xb7,0xb5,0xaf,0xee}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationObjectCreateParam =
    {0x827c4f8f,0x9ec6,0x41cc,{0xaa,0x7a,0xf6,0xa6,0x52,0x24,0x58,0xfc}};
extern "C" const GUID __declspec(selectany) IID_IProperty =
    {0xc389f80d,0x228d,0x4fb1,{0xb1,0x83,0x95,0x9a,0xea,0x0b,0x59,0x06}};
extern "C" const GUID __declspec(selectany) IID_IUserDataStorage =
    {0xdd2af5c4,0xd5b9,0x420d,{0xb6,0x58,0xf9,0x35,0xf8,0x0a,0x85,0x86}};
extern "C" const GUID __declspec(selectany) IID_IUserDataStorages =
    {0x9dbfb4eb,0xbe9f,0x46ef,{0x88,0xff,0xbb,0x60,0x3a,0x9e,0x78,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IUserDataStoragesMng =
    {0x77a6d4ca,0x6418,0x4dee,{0xb5,0x9c,0x40,0x0b,0xfd,0x05,0x23,0x75}};
extern "C" const GUID __declspec(selectany) IID_IPropertyKeeper =
    {0xae7377cb,0x28c6,0x468e,{0xb6,0x67,0x73,0x11,0x7b,0xcd,0xc3,0x00}};
extern "C" const GUID __declspec(selectany) IID_IStamp =
    {0x250ce350,0x7c21,0x47fd,{0x8f,0xf2,0xc4,0x4a,0x9f,0xf1,0x77,0xdf}};
extern "C" const GUID __declspec(selectany) IID_ILayoutSheet =
    {0xd87b5a80,0xcf52,0x4510,{0xad,0xd9,0xd1,0x34,0x4f,0xff,0xfc,0x07}};
extern "C" const GUID __declspec(selectany) IID_ILayoutSheets =
    {0x7ab54196,0x0b76,0x4b01,{0xb7,0x69,0x7f,0x47,0x63,0x71,0x73,0xc4}};
extern "C" const GUID __declspec(selectany) IID_ILoadCombinationsParam =
    {0xa70bf191,0xe1e1,0x4a92,{0x8c,0xa9,0xe6,0xd3,0xfe,0xad,0x2d,0x9a}};
extern "C" const GUID __declspec(selectany) IID_IOpenDocumentParam =
    {0xfadca157,0x95b1,0x4e3f,{0x97,0xaa,0x62,0x2e,0x34,0xda,0x32,0x38}};
extern "C" const GUID __declspec(selectany) IID_IPropertyControl =
    {0xe35f8ff8,0x03c6,0x460c,{0xa2,0xf1,0x29,0x4a,0x3a,0x29,0xa0,0x29}};
extern "C" const GUID __declspec(selectany) IID_IPropertyControls =
    {0x548241ba,0xfda8,0x4633,{0x98,0x1e,0x94,0x55,0x2b,0xe3,0x8d,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IPropertyTab =
    {0x45de8e5b,0xbc2b,0x4584,{0x8b,0xa7,0xd3,0x01,0x4d,0x3a,0x23,0x97}};
extern "C" const GUID __declspec(selectany) IID_IPropertyTabs =
    {0x5ba6324e,0xe555,0x490f,{0xa0,0xe2,0x68,0xd3,0xc6,0xc8,0x8d,0x92}};
extern "C" const GUID __declspec(selectany) IID_IProcessParam =
    {0xcb5fdbc8,0x4dae,0x4c4b,{0x87,0xd5,0x6f,0xd1,0xf2,0x70,0x5c,0x38}};
extern "C" const GUID __declspec(selectany) IID_IPropertyManager =
    {0x34196ec3,0x58b2,0x436c,{0xa3,0x53,0x42,0x77,0x03,0x74,0x08,0x74}};
extern "C" const GUID __declspec(selectany) IID_ILibrary =
    {0x9d6e9ae1,0x7ddf,0x4354,{0xb8,0xd0,0xe1,0x20,0x23,0xb1,0x86,0xfa}};
extern "C" const GUID __declspec(selectany) IID_IProcedure =
    {0x7bf9df08,0xd14d,0x4da9,{0xab,0xc2,0xfb,0x45,0x8e,0x71,0x22,0xd0}};
extern "C" const GUID __declspec(selectany) IID_IProcedures =
    {0x1a77f076,0x2295,0x40f9,{0xb1,0xaa,0x28,0x38,0xc4,0xca,0x08,0x87}};
extern "C" const GUID __declspec(selectany) IID_IProceduresLibrary =
    {0x1aece59e,0xde4c,0x4fb9,{0xb6,0x2b,0x79,0x67,0x57,0x3a,0xd3,0xb1}};
extern "C" const GUID __declspec(selectany) IID_IProceduresLibraries =
    {0x80f95b5b,0xdb8a,0x46b7,{0x8c,0x22,0x60,0x5a,0x0a,0xec,0xd5,0x97}};
extern "C" const GUID __declspec(selectany) IID_IKompasError =
    {0x0a8b4cd1,0x7158,0x4ce6,{0x96,0xe0,0x88,0x53,0x76,0xf5,0xde,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IConverter =
    {0x642d03ab,0x4798,0x48a5,{0xb0,0x75,0x3c,0xd9,0xaf,0xa1,0x85,0x54}};
extern "C" const GUID __declspec(selectany) IID_ICheckSum =
    {0x2aa9f713,0x2328,0x4e8f,{0xb9,0x96,0x9d,0xfd,0xab,0xc6,0x7d,0xc9}};
extern "C" const GUID __declspec(selectany) IID_IProgressBarIndicator =
    {0xbe125aba,0xeab2,0x4a22,{0x99,0xd7,0x10,0x8c,0x84,0xb6,0xdc,0xc5}};
extern "C" const GUID __declspec(selectany) IID_ILibArraySettings =
    {0x76d9033d,0x5f87,0x41cc,{0xa3,0xe8,0x55,0xef,0xee,0x94,0xb6,0x77}};
extern "C" const GUID __declspec(selectany) IID_IThreadPattern =
    {0x246741cf,0xbc91,0x4e69,{0xae,0xee,0xcf,0x90,0x5b,0x9c,0x05,0xf7}};
extern "C" const GUID __declspec(selectany) IID_ISystemSettings =
    {0xffb66332,0x17ff,0x47eb,{0xac,0x43,0x32,0x08,0x4f,0x8f,0x60,0x77}};
extern "C" const GUID __declspec(selectany) IID_ICurve2D =
    {0x65c82884,0xc41b,0x47a1,{0x8c,0x07,0xe8,0x82,0x0d,0x67,0x18,0xea}};
extern "C" const GUID __declspec(selectany) IID_IMath2D =
    {0x0409ec8f,0x88f7,0x4242,{0x81,0xe7,0x96,0x5a,0xbe,0xae,0x93,0x2c}};
extern "C" const GUID __declspec(selectany) IID_IPrintJob_Sheet =
    {0x0ec985bc,0x81fc,0x498e,{0xbf,0x15,0x03,0xdd,0xc8,0x70,0xaa,0x33}};
extern "C" const GUID __declspec(selectany) IID_IPrintJob =
    {0x9d86880b,0xc004,0x475d,{0x82,0x21,0xb7,0x86,0xfd,0x5a,0x22,0x8b}};
extern "C" const GUID __declspec(selectany) IID_IStyle =
    {0x8dfd15e0,0x345e,0x4b1c,{0x86,0xa1,0xbd,0x65,0xf8,0x71,0x28,0xb5}};
extern "C" const GUID __declspec(selectany) IID_IStyles =
    {0xe821ae61,0xfa05,0x4b39,{0x89,0x08,0xbd,0x37,0xd6,0xd0,0x44,0xa4}};
extern "C" const GUID __declspec(selectany) IID_IDrawingObject =
    {0x07ef021f,0x11c1,0x4015,{0x8d,0x87,0x4d,0xc9,0x4a,0x2a,0x71,0xb0}};
extern "C" const GUID __declspec(selectany) IID_IDrawingObjects =
    {0x3dd7f97b,0x59cb,0x4297,{0xa1,0xba,0x04,0xe5,0xa7,0xff,0xf4,0x48}};
extern "C" const GUID __declspec(selectany) IID_ILayer =
    {0x9ad76c38,0xcc48,0x4901,{0xae,0xe5,0x27,0xb4,0x8f,0x51,0x56,0x3c}};
extern "C" const GUID __declspec(selectany) IID_ILayers =
    {0xf6dc2898,0xd596,0x4418,{0xa2,0x1a,0xd1,0x5a,0xe0,0x7b,0x9a,0x40}};
extern "C" const GUID __declspec(selectany) IID_IVariable7 =
    {0x8bab52d9,0x8ef6,0x43a6,{0xa1,0xb8,0xaf,0x42,0xd5,0x96,0x1a,0x94}};
extern "C" const GUID __declspec(selectany) IID_IView =
    {0x21a7ba87,0x1c8b,0x41b4,{0x82,0x47,0xcd,0xd5,0x93,0x54,0x6f,0x37}};
extern "C" const GUID __declspec(selectany) IID_IViews =
    {0x9cd1b5e6,0xc1a2,0x4910,{0x8d,0x0c,0x97,0x08,0x0b,0x14,0xaa,0x3d}};
extern "C" const GUID __declspec(selectany) IID_ILayerFilterCondition =
    {0xd743bc12,0x82a9,0x4e8f,{0x85,0xb2,0x71,0x54,0xa3,0x56,0xac,0xc0}};
extern "C" const GUID __declspec(selectany) IID_ILayerFilterConditions =
    {0xbca22e27,0xab60,0x4ba6,{0x87,0xee,0x92,0x15,0x8a,0xa6,0xd3,0x66}};
extern "C" const GUID __declspec(selectany) IID_IFeature7 =
    {0xef4343fa,0x985d,0x4fe9,{0xad,0x5f,0x43,0x9b,0xc8,0xf9,0x29,0x58}};
extern "C" const GUID __declspec(selectany) IID_IModelObject =
    {0xe37256d4,0x9021,0x47ac,{0x8f,0xaf,0x37,0x13,0xfb,0x2a,0x50,0xc3}};
extern "C" const GUID __declspec(selectany) IID_IModelObjects =
    {0x125cb096,0x639e,0x479f,{0x98,0xde,0xf2,0x7f,0xab,0x23,0x83,0x8a}};
extern "C" const GUID __declspec(selectany) IID_IVariableTable =
    {0x2b8b154e,0xed76,0x4ff0,{0xb3,0xe4,0xfe,0xe6,0x91,0xd0,0x14,0xa4}};
extern "C" const GUID __declspec(selectany) IID_IPoint3D =
    {0xd71aedbe,0x01d4,0x4c7d,{0x96,0xdc,0x94,0x98,0x1f,0x2a,0x1c,0x37}};
extern "C" const GUID __declspec(selectany) IID_IVector3D =
    {0xd51a4dcf,0x627d,0x44f5,{0x89,0xba,0x46,0xef,0x24,0x49,0xa2,0x12}};
extern "C" const GUID __declspec(selectany) IID_ILocalCoordinateSystem =
    {0xba6395f5,0x3506,0x4483,{0x88,0x64,0x4e,0xec,0x22,0x0a,0xf3,0x16}};
extern "C" const GUID __declspec(selectany) IID_IPlacement3D =
    {0x9c66de49,0x529c,0x4678,{0x9a,0xf1,0x12,0x71,0x0c,0xb7,0x78,0x04}};
extern "C" const GUID __declspec(selectany) IID_ISpecRough3D =
    {0xaed8f9fc,0xe493,0x4cbd,{0x93,0x41,0x9d,0x9e,0x39,0xe1,0x4f,0xdc}};
extern "C" const GUID __declspec(selectany) IID_IMateConstraint3D =
    {0x9e37e1f5,0xf770,0x473a,{0xb9,0x96,0xa6,0x75,0x3e,0xda,0x73,0xa5}};
extern "C" const GUID __declspec(selectany) IID_IMateConstraints3D =
    {0x95f316e1,0x0a18,0x4f42,{0x8b,0x70,0x14,0x23,0x25,0x0f,0x24,0x4d}};
extern "C" const GUID __declspec(selectany) IID_IBody7 =
    {0x4f122e22,0x0aa6,0x46e1,{0x84,0x1f,0xa2,0x50,0x4b,0x14,0x59,0x95}};
extern "C" const GUID __declspec(selectany) IID_IUserFolder =
    {0x67671c8a,0x3587,0x41eb,{0x92,0x91,0x39,0xe9,0xf9,0x4e,0x4e,0xa5}};
extern "C" const GUID __declspec(selectany) IID_IUserFolders =
    {0x0155ae59,0x92f4,0x4cee,{0x96,0x33,0x8a,0xda,0x94,0x33,0x88,0xcb}};
extern "C" const GUID __declspec(selectany) IID_IZone =
    {0x05c71c4b,0xf8bc,0x42e9,{0x89,0xd5,0xb9,0xbc,0x01,0x45,0xed,0x36}};
extern "C" const GUID __declspec(selectany) IID_IZoneDivision =
    {0xd67aa2b3,0x2e8a,0x4882,{0xb1,0x1a,0x38,0x28,0xd1,0x06,0xca,0x0a}};
extern "C" const GUID __declspec(selectany) IID_IZonesManager =
    {0x0b93d860,0x69ec,0x4d03,{0x8a,0x1d,0xeb,0x0c,0x93,0x6b,0x1d,0x45}};
extern "C" const GUID __declspec(selectany) IID_ISelectionManager =
    {0xe6df688c,0x5b23,0x436b,{0xa0,0x27,0xa9,0x6b,0xfd,0x54,0x84,0xcc}};
extern "C" const GUID __declspec(selectany) IID_IChooseManager =
    {0xe2d9eaa6,0xf88c,0x4adb,{0xac,0x32,0x85,0x4e,0x32,0xe9,0xfe,0xe1}};
extern "C" const GUID __declspec(selectany) IID_IColumnInfo =
    {0x3fde0f44,0x4459,0x49f3,{0xa0,0x12,0xe6,0x4f,0x9b,0xfa,0x45,0x4d}};
extern "C" const GUID __declspec(selectany) IID_IAttributeType =
    {0x414cf83e,0x4fa3,0x42ab,{0xbc,0x26,0x6c,0x6b,0xbf,0x91,0xbb,0x0f}};
extern "C" const GUID __declspec(selectany) IID_IAttribute =
    {0x94f965b0,0x5abb,0x4994,{0x98,0xc7,0xb0,0x8f,0xa8,0x51,0x54,0x52}};
extern "C" const GUID __declspec(selectany) IID_ITechnicalDemand3D =
    {0xcd435b3d,0x175c,0x4e18,{0xba,0xa0,0x81,0xfd,0xd7,0xeb,0x6a,0x86}};
extern "C" const GUID __declspec(selectany) IID_IParametriticConstraint =
    {0x131069f4,0xa4e2,0x4db4,{0xa5,0x59,0x85,0xea,0xcc,0xc7,0x4c,0xe4}};
extern "C" const GUID __declspec(selectany) IID_IDrawingObject1 =
    {0x649f0eb2,0xebc0,0x449b,{0x8b,0x61,0xdc,0x3c,0xf1,0x95,0x3b,0xf9}};
extern "C" const GUID __declspec(selectany) IID_IRasterConvertParameters =
    {0xebf0cb2e,0x31bf,0x4baf,{0xa6,0x68,0xab,0x9a,0x9b,0xde,0x84,0x22}};
extern "C" const GUID __declspec(selectany) IID_IKompasDocument1 =
    {0x58890fe8,0xe671,0x4561,{0x99,0x4a,0x60,0x0d,0xd2,0x90,0x32,0xe4}};
extern "C" const GUID __declspec(selectany) IID_IBaseLeader =
    {0x1af590a9,0xc339,0x477a,{0x9f,0x22,0x79,0x9c,0x04,0xd2,0x0b,0xb4}};
extern "C" const GUID __declspec(selectany) IID_ILeaders =
    {0xba2d820c,0x0db9,0x47c6,{0xa3,0x2d,0x34,0xc7,0xd8,0xba,0x1b,0x2f}};
extern "C" const GUID __declspec(selectany) IID_IFindObjectParameters =
    {0x8f1a7123,0xbd4a,0x4a49,{0x8e,0x22,0x15,0x02,0xd5,0x9b,0x1f,0xe6}};
extern "C" const GUID __declspec(selectany) IID_IMacroObject =
    {0xb21c70c9,0x53ec,0x4bb7,{0xa9,0xdb,0xbc,0xe8,0x52,0xca,0x67,0x16}};
extern "C" const GUID __declspec(selectany) IID_IDrawingGroup =
    {0x2c96acb2,0x4877,0x45d9,{0xb6,0x2d,0x78,0xbb,0xad,0x70,0x44,0x58}};
extern "C" const GUID __declspec(selectany) IID_IDrawingGroups =
    {0x0ed06421,0x907c,0x4ef0,{0x89,0xf7,0xae,0xfc,0x81,0xbe,0xf1,0xdf}};
extern "C" const GUID __declspec(selectany) IID_ICopyObjectParam =
    {0x58e1baca,0x32d5,0x4eab,{0x87,0xe9,0xd1,0x48,0x16,0xda,0xc2,0x9f}};
extern "C" const GUID __declspec(selectany) IID_IPhantom2D =
    {0xa6e4f3b6,0x0554,0x4a67,{0xa7,0x00,0x42,0x80,0x90,0xa6,0x73,0x9a}};
extern "C" const GUID __declspec(selectany) IID_IProcess2D =
    {0xc74d7419,0x0970,0x4904,{0x90,0x7c,0xdc,0xc5,0x40,0x7c,0x59,0xb0}};
extern "C" const GUID __declspec(selectany) IID_IKompasDocument2D1 =
    {0xfb57f1c4,0x44fe,0x4c73,{0x9b,0x15,0x87,0x24,0x1e,0x87,0x35,0xb5}};
extern "C" const GUID __declspec(selectany) IID_ILayer3D =
    {0xd8adf279,0x1cac,0x4a2a,{0x91,0x1b,0x9a,0x44,0x37,0x84,0x07,0xa0}};
extern "C" const GUID __declspec(selectany) IID_ILayers3D =
    {0xd637078b,0x6498,0x40b6,{0x9f,0x41,0x83,0xed,0x1e,0xa4,0x0d,0x1f}};
extern "C" const GUID __declspec(selectany) IID_IBaseManipulator =
    {0x606fd023,0x3944,0x4215,{0xa4,0x26,0x1e,0x4e,0xb8,0x2a,0x8e,0x32}};
extern "C" const GUID __declspec(selectany) IID_IManipulators =
    {0x5fbb9528,0xb629,0x46de,{0x8b,0xa6,0x13,0xc5,0x87,0x2b,0xdd,0x15}};
extern "C" const GUID __declspec(selectany) IID_IProcess3D =
    {0x77730022,0x3179,0x4674,{0xae,0x49,0x60,0x4f,0xab,0xc0,0xb6,0xb1}};
extern "C" const GUID __declspec(selectany) IID_IFindObject3DParameters =
    {0x02e973e5,0x5f36,0x4bb9,{0x93,0xb7,0xce,0x9b,0x21,0xd9,0x53,0x24}};
extern "C" const GUID __declspec(selectany) IID_ISpecRough =
    {0xd723aac1,0x0315,0x4aed,{0x99,0xbf,0x88,0xa7,0xe5,0x5b,0x6e,0x6d}};
extern "C" const GUID __declspec(selectany) IID_ITechnicalDemand =
    {0x18c80ae5,0xbf92,0x482a,{0x9c,0x56,0x3d,0x16,0x38,0xf5,0xe5,0xf5}};
extern "C" const GUID __declspec(selectany) IID_IDimensionText =
    {0xe0197ba7,0xc3fb,0x44a3,{0x9c,0x13,0x49,0x11,0x5a,0x15,0x0e,0xd2}};
extern "C" const GUID __declspec(selectany) IID_IAttrTypeMng =
    {0x5378690e,0xa57d,0x473f,{0x84,0xdc,0xca,0x50,0x8b,0x34,0xfa,0xd7}};
extern "C" const GUID __declspec(selectany) IID_IStylesManager =
    {0x4f13bb1b,0x44aa,0x42e6,{0xbd,0x50,0x30,0xe2,0x1e,0x43,0x4d,0x1b}};
extern "C" const GUID __declspec(selectany) IID_ICurveStyle =
    {0x5046bf60,0x687a,0x4e5d,{0xbb,0xef,0x3c,0xb5,0xd9,0x5f,0x7a,0x41}};
extern "C" const GUID __declspec(selectany) IID_IHatchStyle =
    {0x9315d8a2,0x95b7,0x4e7f,{0xb8,0x61,0xb8,0x8f,0xa4,0x90,0xee,0x2b}};
extern "C" const GUID __declspec(selectany) IID_IReportStyleColumn =
    {0xdd114fc3,0xeb24,0x4fbd,{0xb9,0xe9,0xb0,0x1a,0x89,0x3a,0xa3,0xb0}};
extern "C" const GUID __declspec(selectany) IID_IReportStyle =
    {0x5c65f11d,0x75c8,0x4130,{0x95,0x1c,0x5e,0xbe,0x0a,0xba,0x4f,0x44}};
extern "C" const GUID __declspec(selectany) IID_IReportProcess =
    {0x29bbf2b8,0xa2e2,0x4e7d,{0xbf,0x04,0x0b,0xb7,0x9c,0x89,0xef,0x35}};
extern "C" const GUID __declspec(selectany) IID_INumericGroup =
    {0xd9c09d24,0xcb85,0x4ea2,{0xb5,0xff,0x85,0xd5,0x9e,0x5d,0x33,0x9a}};
extern "C" const GUID __declspec(selectany) IID_IReportTable =
    {0xf7e44485,0xb4eb,0x4897,{0xa2,0x63,0xbe,0x3b,0xc1,0xa0,0x87,0x89}};
extern "C" const GUID __declspec(selectany) IID_IPropertyEdit =
    {0x1d238c4c,0xaad7,0x4374,{0xb3,0x72,0x01,0x3c,0xf7,0xfc,0xed,0xb4}};
extern "C" const GUID __declspec(selectany) IID_IPropertySeparator =
    {0x4504efa0,0xd059,0x4fd4,{0xb7,0x25,0xfa,0x26,0x4d,0x19,0x08,0x69}};
extern "C" const GUID __declspec(selectany) IID_IPropertyList =
    {0x8f53e9d5,0x07ad,0x412e,{0x8c,0x2a,0x50,0x9b,0xc6,0x33,0xc4,0xff}};
extern "C" const GUID __declspec(selectany) IID_IPropertyCheckBox =
    {0x9205277d,0xb480,0x4af7,{0xb6,0x60,0xcc,0xdc,0x65,0x3f,0x64,0x53}};
extern "C" const GUID __declspec(selectany) IID_IPropertyMultiButton =
    {0x3920a0be,0x0628,0x47d5,{0xb0,0xf1,0x1d,0xfe,0xb7,0x79,0x64,0xbc}};
extern "C" const GUID __declspec(selectany) IID_IPropertySlideBox =
    {0xe1db38cd,0xa6d5,0x44b8,{0x9a,0xd0,0x00,0x56,0xb8,0x79,0x24,0xdd}};
extern "C" const GUID __declspec(selectany) IID_IPropertyUserControl =
    {0x5a902c6c,0xa030,0x4f37,{0xa0,0x89,0x91,0x50,0x5b,0xae,0xe4,0x66}};
extern "C" const GUID __declspec(selectany) IID_IPropertyGrid =
    {0x6682b70f,0x59db,0x4bf0,{0xab,0x01,0x45,0xb6,0x5b,0x1b,0xde,0xd1}};
extern "C" const GUID __declspec(selectany) IID_IPropertyTextButton =
    {0x3cdfe85f,0x643d,0x4008,{0xae,0x32,0x37,0x9c,0x0e,0xb3,0xfb,0x7f}};
extern "C" const GUID __declspec(selectany) IID_IPropertySpinEdit =
    {0xf214a46d,0x2ba9,0x40ad,{0xa3,0x2d,0xe6,0x96,0xef,0x9c,0x89,0x5a}};
extern "C" const GUID __declspec(selectany) IID_IPropertyFileName =
    {0xdb1f3224,0x837e,0x437f,{0x89,0x44,0x6f,0xb9,0x70,0x3f,0x52,0x8b}};
extern "C" const GUID __declspec(selectany) IID_IPropertyColor =
    {0xfc5cdcfb,0x3f67,0x43a1,{0x8f,0xc4,0x12,0x78,0xb9,0x01,0xce,0x0e}};
extern "C" const GUID __declspec(selectany) IID_IPropertyEditList =
    {0xfdb82760,0x7ea3,0x408e,{0x86,0x99,0xa8,0x39,0x2a,0xcf,0xd8,0x10}};
extern "C" const GUID __declspec(selectany) IID_IPropertyBmpList =
    {0xd18d34f5,0x0028,0x4853,{0x99,0x8c,0x25,0xa4,0x8d,0x14,0x1b,0x43}};
extern "C" const GUID __declspec(selectany) IID_IPropertyLibExplorer =
    {0x2a214701,0x0bcb,0x406c,{0xb5,0x7f,0x6d,0xfa,0xdd,0x79,0x9a,0x64}};
extern "C" const GUID __declspec(selectany) IID_IPropertyStyleList =
    {0xb2431c46,0x9a35,0x494b,{0xa9,0x58,0xd9,0x09,0x8f,0x82,0xc3,0xfa}};
extern "C" const GUID __declspec(selectany) IID_IPropertyGroupBegin =
    {0x5a247709,0xea70,0x443c,{0x96,0x8e,0xbf,0xec,0xc9,0x51,0xe1,0x4f}};
extern "C" const GUID __declspec(selectany) IID_IPropertyGroupEnd =
    {0x6afddac7,0xeb89,0x440c,{0x8a,0xd0,0x86,0x6a,0xee,0xea,0xb7,0xcc}};
extern "C" const GUID __declspec(selectany) IID_IPropertyTwinSwitcher =
    {0x74191892,0x71fc,0x4820,{0xb8,0xa4,0xcb,0x26,0x4a,0x9e,0x9e,0x8e}};
extern "C" const GUID __declspec(selectany) IID_IPropertyPoint3D =
    {0x64725d44,0x155c,0x412c,{0xb0,0xf5,0xf5,0x20,0x3f,0x5f,0x75,0xfd}};
extern "C" const GUID __declspec(selectany) IID_IPropertyPreviewText =
    {0x8576d0c2,0x3147,0x4cff,{0xaa,0x39,0xfa,0x9e,0xf9,0xb7,0x99,0xe3}};
extern "C" const GUID __declspec(selectany) IID_IPropertyAggregateControl =
    {0x8b2a259e,0x6819,0x4ddb,{0x8e,0xa3,0xc4,0x08,0xf9,0xf0,0x40,0x54}};
extern "C" const GUID __declspec(selectany) IID_IProcessContextPanel =
    {0xc97e7403,0xb375,0x4544,{0x87,0xdd,0x4d,0x3e,0xf3,0x63,0x88,0xe5}};
extern "C" const GUID __declspec(selectany) IID_IPropertyBasePoint =
    {0x75e9d1c7,0xb766,0x4d53,{0xbe,0x99,0xa3,0x08,0x8c,0x24,0x92,0x66}};
extern "C" const GUID __declspec(selectany) IID_IPropertyMarking =
    {0x2f69f0e3,0x89da,0x4b0c,{0x8a,0xbe,0xa6,0xe9,0x96,0xf3,0x9a,0xd1}};
extern "C" const GUID __declspec(selectany) IID_IProcess =
    {0x3a7c6a0c,0x53db,0x4043,{0x9a,0x77,0x6d,0x39,0x89,0x17,0x57,0x41}};
extern "C" const GUID __declspec(selectany) IID_IMouseEnterLeaveParameters7 =
    {0x05b6026a,0x4b53,0x4015,{0xa7,0xcb,0x94,0x29,0x80,0x73,0xf8,0x6c}};
extern "C" const GUID __declspec(selectany) IID_IPropertyReplaceList =
    {0x18cf34d8,0x95e8,0x4130,{0xa3,0xb2,0x79,0xd0,0xbc,0xb1,0x05,0x5c}};
extern "C" const GUID __declspec(selectany) IID_IViewDesignation =
    {0x5f9580da,0x915c,0x4c28,{0x99,0x1d,0x5d,0xff,0xe3,0xbf,0x3b,0x3c}};
extern "C" const GUID __declspec(selectany) IID_ICutViewParam =
    {0xd4c8b5af,0xb2a1,0x4e07,{0x9c,0xd0,0xa1,0xfc,0x5b,0x0b,0xc1,0xe1}};
extern "C" const GUID __declspec(selectany) IID_ILocalCoordinateSystem2D =
    {0x85efccc7,0x1667,0x48b7,{0xa9,0x15,0xbb,0x81,0x49,0x91,0x5e,0xf8}};
extern "C" const GUID __declspec(selectany) IID_ILocalCoordinateSystems2D =
    {0xe6a6a1c8,0xa6f9,0x470e,{0xaf,0x64,0xd6,0xab,0x77,0x41,0xd6,0x84}};
extern "C" const GUID __declspec(selectany) IID_IView1 =
    {0x93233f05,0xb389,0x4076,{0xbc,0xa2,0xcc,0xdb,0x87,0xbd,0xb7,0xb7}};
extern "C" const GUID __declspec(selectany) IID_IAutoNumerationManager =
    {0x557c20d0,0x5e6c,0x485e,{0xb8,0xd6,0x73,0x61,0x80,0xbd,0x42,0x61}};
extern "C" const GUID __declspec(selectany) IID_IDocument2DSettings =
    {0xb09a64bf,0x7aa6,0x4bf6,{0xb8,0xe8,0xaa,0x8e,0x8e,0xe6,0xe9,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IDocument3DSettings =
    {0x6ffaf1bc,0x98c1,0x4562,{0xa7,0xa7,0x1d,0x26,0x39,0x96,0xb1,0xd4}};
extern "C" const GUID __declspec(selectany) IID_IThreadDialogParam =
    {0x28c513ee,0x057a,0x4094,{0x8c,0x18,0xd3,0xfd,0x73,0x3d,0x2c,0x81}};
extern "C" const GUID __declspec(selectany) IID_IContentDialogParam =
    {0xb9362883,0xc8ec,0x4603,{0xa6,0xaa,0x7f,0x47,0x03,0xaa,0xa9,0xd9}};
extern "C" const GUID __declspec(selectany) IID_IApplicationDialogs =
    {0xc825c801,0xd6d3,0x4456,{0xbd,0x37,0xd4,0x8e,0xd7,0x99,0xe0,0x33}};
extern "C" const GUID __declspec(selectany) IID_IFormatLabelRules =
    {0x0a351402,0xabad,0x4347,{0xb6,0xec,0xb5,0xeb,0x11,0x21,0xdb,0xfb}};
extern "C" const GUID __declspec(selectany) IID_IDocumentSettings1 =
    {0x48496b1a,0xc41f,0x4411,{0x89,0x55,0xe7,0x59,0x33,0x0a,0x4f,0x83}};
extern "C" const GUID __declspec(selectany) IID_IHypertextReferenceParam =
    {0xb416c2ca,0xca76,0x4cbe,{0x8d,0x3a,0x45,0x89,0x67,0xf8,0xe0,0xce}};
extern "C" const GUID __declspec(selectany) IID_ITableCell =
    {0xcf9150ba,0x0e3a,0x46de,{0x89,0x73,0x33,0x2a,0x00,0x36,0x14,0x74}};
extern "C" const GUID __declspec(selectany) IID_ITable =
    {0xd3715420,0x645e,0x435b,{0xbb,0x25,0x8e,0x35,0xac,0x57,0x07,0x18}};
extern "C" const GUID __declspec(selectany) IID_IKompasDocument3DNotifyResult =
    {0x354ea69a,0x3191,0x4da4,{0xb9,0x80,0x82,0x1b,0xe9,0xb7,0x68,0x3c}};
extern "C" const GUID __declspec(selectany) IID_IPoints3D =
    {0x81ebb128,0x3963,0x4759,{0x9d,0x4e,0x28,0x29,0xc3,0x07,0x8b,0x0f}};
extern "C" const GUID __declspec(selectany) IID_IFeaturePattern =
    {0xc020e994,0xfb7f,0x449a,{0xa3,0xd9,0x21,0x81,0x13,0x5f,0x42,0x00}};
extern "C" const GUID __declspec(selectany) IID_IFeaturePatterns =
    {0x5cd7ac22,0xd8c2,0x42c4,{0x96,0xe5,0x5d,0x64,0xe4,0x40,0x46,0xf7}};
extern "C" const GUID __declspec(selectany) IID_ISurfaceThickening =
    {0x984f7dd6,0xa7fb,0x4693,{0x86,0x2f,0x45,0x9c,0xc8,0x63,0x0b,0x11}};
extern "C" const GUID __declspec(selectany) IID_ISurfaceThickenings =
    {0x7a9b6fcc,0x2156,0x48c8,{0xbc,0x95,0x59,0x72,0x42,0xee,0x1b,0x9e}};
extern "C" const GUID __declspec(selectany) IID_IRotated =
    {0x7bb28ad1,0xccae,0x449c,{0x90,0x86,0xa9,0x74,0x70,0x54,0x30,0x89}};
extern "C" const GUID __declspec(selectany) IID_IRotateds =
    {0xa9b14309,0x92b3,0x46ba,{0x88,0x41,0x23,0x32,0x93,0xa6,0x03,0x10}};
extern "C" const GUID __declspec(selectany) IID_IScaling3D =
    {0xa37ee5f1,0xc852,0x467b,{0xb7,0x2a,0x00,0xc0,0x53,0x10,0x17,0x4d}};
extern "C" const GUID __declspec(selectany) IID_IScalings3D =
    {0xb180fe26,0xabee,0x4f37,{0x93,0x2f,0x24,0xaa,0xac,0xf2,0x27,0xa4}};
extern "C" const GUID __declspec(selectany) IID_IBilletObsolete =
    {0x5f754ba9,0x1fb7,0x4aae,{0xa3,0xf2,0xf3,0x6d,0x7c,0xf9,0x38,0xbf}};
extern "C" const GUID __declspec(selectany) IID_IBilletsObsoletes =
    {0x140de7b8,0x8291,0x4220,{0xb7,0xfb,0x9f,0x3c,0x4f,0xdf,0xb6,0x49}};
extern "C" const GUID __declspec(selectany) IID_ICollectionGeometry =
    {0xcc78f834,0x4a97,0x4f69,{0x92,0x07,0x21,0x53,0x08,0xf0,0xab,0xb0}};
extern "C" const GUID __declspec(selectany) IID_ICollectionsGeometry =
    {0xf1b04dda,0xfaac,0x4d51,{0x95,0x67,0x30,0x4c,0xfe,0x3e,0xc0,0x94}};
extern "C" const GUID __declspec(selectany) IID_IUserObject3D =
    {0x1c1886bc,0x98dd,0x4aa9,{0xb0,0x38,0x68,0x49,0xc7,0xbc,0xc8,0x6c}};
extern "C" const GUID __declspec(selectany) IID_IUserObjects3D =
    {0x1753e6be,0xc57c,0x415e,{0x93,0x1d,0x37,0xea,0xd9,0x91,0xd6,0x29}};
extern "C" const GUID __declspec(selectany) IID_IThread =
    {0xbc710e4d,0xa679,0x40fc,{0xb5,0xae,0x16,0x30,0x2a,0xbb,0xfe,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IHole3D =
    {0x4c901765,0x3e0d,0x4a5d,{0xb2,0xf8,0xfa,0x70,0x8e,0x3c,0xc6,0x05}};
extern "C" const GUID __declspec(selectany) IID_IHoles3D =
    {0xa018e8ce,0x26f6,0x4dae,{0x80,0x1b,0x37,0x8e,0xd0,0x8a,0x63,0x14}};
extern "C" const GUID __declspec(selectany) IID_IChamfer =
    {0x59c6927b,0xfc6d,0x4494,{0x9c,0xde,0x64,0x82,0x76,0x02,0x09,0x29}};
extern "C" const GUID __declspec(selectany) IID_IChamfers =
    {0x5e232224,0x2445,0x430f,{0x93,0x24,0x2c,0x75,0xba,0xce,0x1d,0x0c}};
extern "C" const GUID __declspec(selectany) IID_IFillet =
    {0x15e3132f,0x4d4e,0x451f,{0xb1,0x04,0x47,0x8a,0x4e,0x3e,0x01,0x28}};
extern "C" const GUID __declspec(selectany) IID_IFillets =
    {0x7a0672ef,0x4c38,0x4fd7,{0x8d,0x06,0xda,0xdd,0x25,0x6e,0x1e,0x38}};
extern "C" const GUID __declspec(selectany) IID_IIncline =
    {0x2db9e3ce,0x7603,0x4c88,{0x8f,0xf5,0xf8,0x98,0x5a,0xd2,0x6c,0x58}};
extern "C" const GUID __declspec(selectany) IID_IInclines =
    {0x37e37d7d,0x58d1,0x4469,{0x9b,0x79,0x22,0x54,0xd2,0xb9,0xe1,0x12}};
extern "C" const GUID __declspec(selectany) IID_IShell =
    {0x05a5c975,0xd995,0x4069,{0x90,0xa3,0xa8,0x13,0x91,0xae,0x8d,0x62}};
extern "C" const GUID __declspec(selectany) IID_IShells =
    {0x0ba80020,0xad0b,0x4442,{0xb4,0xc7,0x7a,0xc7,0x5a,0xa0,0x4c,0xac}};
extern "C" const GUID __declspec(selectany) IID_IBoolean =
    {0x1fe29bdf,0x0b8e,0x4e34,{0xa7,0xe5,0x41,0x80,0x92,0xc6,0xc9,0xc3}};
extern "C" const GUID __declspec(selectany) IID_IBooleans =
    {0x1739583b,0xbfda,0x4ad2,{0xbf,0xe3,0x14,0x30,0x21,0x33,0xbb,0x21}};
extern "C" const GUID __declspec(selectany) IID_ICut =
    {0xd76be44a,0x2ab3,0x4b5a,{0xb8,0x93,0x3c,0x27,0xe2,0x27,0xdf,0x4d}};
extern "C" const GUID __declspec(selectany) IID_ICuts =
    {0x85b81047,0x11f3,0x46d3,{0x86,0x9d,0xef,0xe3,0x7a,0x6a,0x85,0x88}};
extern "C" const GUID __declspec(selectany) IID_ICoupling =
    {0xfb39791b,0x2100,0x4f36,{0xb3,0x52,0xaa,0x4e,0xb5,0xfd,0x93,0x73}};
extern "C" const GUID __declspec(selectany) IID_ILoft =
    {0xddb04ecf,0x12a9,0x496e,{0x80,0x69,0x40,0x5f,0x73,0x02,0xe0,0x39}};
extern "C" const GUID __declspec(selectany) IID_ILofts =
    {0xaf5f922f,0x8c32,0x4949,{0xa2,0x9a,0xbb,0x5e,0xc7,0xa9,0x9d,0x00}};
extern "C" const GUID __declspec(selectany) IID_IEvolution =
    {0x9ae8a34a,0xde20,0x4c56,{0xa7,0x93,0xbf,0xcb,0xb9,0x34,0x39,0x03}};
extern "C" const GUID __declspec(selectany) IID_IEvolutions =
    {0x8d984124,0xc430,0x45b3,{0x93,0x9a,0xb5,0x26,0x4c,0x5b,0x13,0x88}};
extern "C" const GUID __declspec(selectany) IID_IUnionComponents =
    {0x2dcdd394,0xc325,0x4d41,{0xa5,0xfd,0x9e,0x8c,0xc7,0xb8,0xec,0x5c}};
extern "C" const GUID __declspec(selectany) IID_IUnionsComponents =
    {0x2a449ef6,0x1554,0x4c66,{0x8a,0x98,0x27,0x34,0xda,0xb8,0x8e,0x97}};
extern "C" const GUID __declspec(selectany) IID_IMoldCavity =
    {0xc4b6d128,0x8013,0x4af4,{0xb4,0xd5,0x40,0xe2,0x5f,0x2c,0xdb,0xd0}};
extern "C" const GUID __declspec(selectany) IID_IMoldCavities =
    {0xef2ee8a8,0xbcc8,0x49ba,{0x8f,0xf5,0x3b,0xbf,0x62,0x7c,0x14,0x32}};
extern "C" const GUID __declspec(selectany) IID_IMacroObject3D =
    {0x09dbaa1e,0xfc4c,0x4e16,{0xb0,0x33,0xfb,0x9b,0x8f,0x79,0x95,0xd8}};
extern "C" const GUID __declspec(selectany) IID_IMacroObjects3D =
    {0xb4c41d1d,0x02e2,0x4a05,{0xa4,0x93,0x7d,0x25,0xce,0xec,0x79,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IBodyReposition =
    {0x621e42c8,0x0bf8,0x4cb8,{0x88,0x13,0xe4,0x5e,0x22,0x21,0x69,0x4e}};
extern "C" const GUID __declspec(selectany) IID_IBodyRepositions =
    {0xc42be43c,0x5de5,0x4293,{0x92,0x54,0x5a,0xa7,0xf3,0xb2,0xec,0x2b}};
extern "C" const GUID __declspec(selectany) IID_IFullFillet =
    {0x7fea11b5,0xb4d3,0x4481,{0xab,0x09,0xb0,0xde,0x0a,0x69,0x91,0x89}};
extern "C" const GUID __declspec(selectany) IID_IFullFillets =
    {0xf36e8fba,0xf786,0x4e65,{0x87,0x82,0x3f,0x6b,0xc2,0xf9,0xd0,0x06}};
extern "C" const GUID __declspec(selectany) IID_IWireFrame3D =
    {0x83bfb72d,0x16fe,0x488b,{0x84,0x6c,0x7b,0x99,0x05,0x82,0x4f,0x58}};
extern "C" const GUID __declspec(selectany) IID_IWireFrames3D =
    {0xd5f8b7ed,0x2477,0x4480,{0xbd,0xab,0xc2,0xbb,0x39,0x2f,0x7f,0xec}};
extern "C" const GUID __declspec(selectany) IID_ISplitSolid =
    {0x65851ada,0x9047,0x4ad7,{0x91,0xdf,0xc5,0x0d,0x58,0x81,0x38,0x51}};
extern "C" const GUID __declspec(selectany) IID_ISplitSolids =
    {0x5334bc27,0xf93d,0x4bd6,{0x8c,0xe1,0xf4,0x8b,0x73,0xb2,0xdc,0x2a}};
extern "C" const GUID __declspec(selectany) IID_IExtrusion1 =
    {0x58b4011d,0x3c0b,0x499a,{0xa4,0x41,0x78,0x70,0xb6,0x63,0xe8,0xcf}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalBend =
    {0xb631d95f,0xc487,0x41d6,{0x97,0x26,0xc6,0x5e,0x9f,0x5a,0x45,0x05}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalBends =
    {0x6826cfd6,0x6a48,0x4eb1,{0x8c,0x89,0x7d,0xb4,0xe3,0x67,0x02,0xb4}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalLineBend =
    {0xe13ef07a,0xb1e8,0x41fd,{0x9c,0x85,0xc1,0x7f,0x01,0xe5,0x2a,0x03}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalLineBends =
    {0xaf8b8310,0xaf82,0x4b02,{0x87,0x33,0x78,0x3f,0xfa,0xfd,0x4d,0xbd}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalSketchBend =
    {0x4e4f3cb3,0x5596,0x445b,{0x9a,0x18,0x0a,0xf5,0x59,0xe5,0x45,0xc5}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalSketchBends =
    {0x247539a2,0xbb15,0x4d8a,{0x91,0x21,0x67,0xbd,0xe4,0x8a,0x98,0x9a}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalClosedCorner =
    {0x995bee65,0x54d2,0x443e,{0x94,0x23,0x88,0xb4,0x32,0x33,0x08,0xa7}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalClosedCorners =
    {0x67037d06,0x603a,0x41da,{0x85,0x13,0x45,0x08,0x8f,0xea,0x98,0xa8}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalPlate =
    {0xdc733340,0xdca5,0x4253,{0x8a,0xb1,0x04,0x5a,0xd1,0x69,0xe0,0x6e}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalPlates =
    {0xa1ad042d,0xa57f,0x4079,{0x8f,0x7a,0xce,0x4a,0xab,0x5d,0x9d,0xaf}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalBendedStraighten =
    {0x194f5af1,0x1b37,0x4ff7,{0x9c,0x7a,0xb9,0x39,0xcb,0x55,0x6f,0x3a}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalBendedStraightens =
    {0xb19d00a4,0x1b8e,0x43fa,{0x9d,0xa7,0xeb,0xe3,0x7e,0xc6,0x7b,0x67}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalBendUnfoldParameters =
    {0xbc21145e,0x5520,0x4871,{0xaa,0x24,0x52,0xe1,0x9e,0xf8,0x22,0x11}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalPressForming =
    {0xbdb9fb08,0xc8c8,0x4446,{0x98,0x21,0xbe,0x1b,0xa9,0x30,0x66,0x02}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalPressFormings =
    {0x0541bee1,0x9273,0x4611,{0x9f,0x26,0xb3,0x40,0x8c,0x51,0x58,0x0f}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalShoulder =
    {0x75024bd8,0x6d1c,0x4963,{0x97,0x33,0x32,0x6e,0xfb,0x3c,0xb2,0x8d}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalShoulders =
    {0xac0f620e,0x229a,0x42be,{0x8c,0x5b,0x17,0x86,0xc5,0x44,0x74,0xc0}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalJalousie =
    {0x13501739,0xcd1f,0x4401,{0x8a,0x48,0xb2,0x09,0x3e,0x97,0x4c,0xc1}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalJalousies =
    {0x914d5295,0x8831,0x4166,{0x99,0x4c,0xd1,0x9c,0x5d,0xf1,0x49,0xe7}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalRib =
    {0xaca9c96e,0x5dbe,0x44c8,{0xab,0xf5,0x15,0x23,0x02,0x82,0xab,0x05}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalRibs =
    {0xb72cc78f,0xd630,0x463f,{0x89,0x11,0xed,0x9b,0xd5,0x8b,0xba,0x1c}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalPunch =
    {0x67c22259,0x2d49,0x4f50,{0x92,0x24,0xad,0xf2,0x0f,0x6d,0xd6,0x55}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalPunchs =
    {0x16298697,0x3335,0x435c,{0x8f,0x93,0x1c,0xaf,0xde,0x0e,0xc4,0x42}};
extern "C" const GUID __declspec(selectany) IID_IPoint3DParamDisplace =
    {0x6d57994f,0xc170,0x4ced,{0x96,0x8a,0x6a,0xd6,0x9c,0x1a,0x2c,0x7d}};
extern "C" const GUID __declspec(selectany) IID_IPoint3DParamIntersect =
    {0xc009f9ed,0xed8a,0x4b1e,{0xa4,0xce,0x15,0x6f,0x43,0xc3,0xf6,0xf3}};
extern "C" const GUID __declspec(selectany) IID_IPoint3DParamCenter =
    {0xa92f2938,0xf1d4,0x475e,{0xaa,0xb4,0x96,0x2f,0xaa,0x4a,0x43,0x66}};
extern "C" const GUID __declspec(selectany) IID_IPoint3DParamCurve =
    {0x06b6bda5,0x1dc6,0x4321,{0x8b,0x28,0xac,0x06,0x5d,0x87,0xe0,0x60}};
extern "C" const GUID __declspec(selectany) IID_IPoint3DParamSurface =
    {0x18ce6bbe,0x63fb,0x4c94,{0x89,0x98,0xe4,0x0b,0xc5,0xb5,0xd1,0xc6}};
extern "C" const GUID __declspec(selectany) IID_IPoint3DParamProjection =
    {0xb5d353dd,0x5f26,0x42fd,{0x87,0xd3,0x01,0xc9,0x7c,0x44,0xe1,0xbf}};
extern "C" const GUID __declspec(selectany) IID_IBaseLineDimension3D =
    {0x3514887e,0x321b,0x4ce3,{0xa9,0x66,0x3e,0xb1,0xa0,0x2c,0xee,0xf2}};
extern "C" const GUID __declspec(selectany) IID_ILineDimensions3D =
    {0x8e30c80c,0x4c79,0x497b,{0xa7,0x4b,0x84,0xd4,0x4f,0x96,0xef,0x4d}};
extern "C" const GUID __declspec(selectany) IID_IRadialDimension3D =
    {0x5711b871,0x1fae,0x425c,{0x89,0x8e,0x58,0x34,0x42,0xd8,0x51,0xcd}};
extern "C" const GUID __declspec(selectany) IID_IRadialDimensions3D =
    {0x153924cd,0xe046,0x4334,{0x87,0x98,0x46,0xa6,0xd6,0x66,0x3d,0xe4}};
extern "C" const GUID __declspec(selectany) IID_IDiametralDimension3D =
    {0x261ae065,0x69b8,0x4b42,{0xb1,0x03,0xc8,0x74,0x67,0x20,0xc5,0xbf}};
extern "C" const GUID __declspec(selectany) IID_IDiametralDimensions3D =
    {0x79b5ac3b,0x9b2f,0x4c75,{0x84,0x82,0x3c,0x0d,0x6b,0x07,0xd9,0x11}};
extern "C" const GUID __declspec(selectany) IID_IAngleDimension3D =
    {0xc22870b5,0xf002,0x4c76,{0x9e,0x67,0x46,0x85,0x4e,0x93,0x88,0x24}};
extern "C" const GUID __declspec(selectany) IID_IAngleDimensions3D =
    {0xe0e8db05,0xf71b,0x457e,{0xbf,0xeb,0x7e,0xc2,0xe8,0x03,0xe7,0x7a}};
extern "C" const GUID __declspec(selectany) IID_IBaseLeader3D =
    {0x7170f38e,0x8230,0x4c9c,{0xb3,0x6b,0x0b,0xac,0xbb,0x27,0xb1,0x23}};
extern "C" const GUID __declspec(selectany) IID_ILeaders3D =
    {0xc6e6bdd4,0x2b0e,0x49bf,{0x87,0xd3,0x04,0xe8,0x00,0x20,0x0d,0xdc}};
extern "C" const GUID __declspec(selectany) IID_IRough3D =
    {0x083a4984,0x199e,0x4591,{0x8f,0xc3,0xcb,0x8a,0x9d,0x7d,0x43,0x03}};
extern "C" const GUID __declspec(selectany) IID_IRoughs3D =
    {0x8533772b,0x1c43,0x4fdd,{0x9f,0x0e,0xbc,0x92,0xf1,0x58,0x62,0xc9}};
extern "C" const GUID __declspec(selectany) IID_IBase3D =
    {0xd5b737f6,0xfd3d,0x49f8,{0xb3,0xd8,0xc8,0x47,0x5e,0x5e,0x3d,0x3a}};
extern "C" const GUID __declspec(selectany) IID_IBases3D =
    {0x8bc582b3,0x1f82,0x4d19,{0xaf,0x95,0x24,0xcb,0xad,0x41,0x2e,0x52}};
extern "C" const GUID __declspec(selectany) IID_ITolerance3D =
    {0x9cf700cf,0x72db,0x44eb,{0xa1,0x91,0x38,0x14,0xa3,0xcc,0x21,0xbd}};
extern "C" const GUID __declspec(selectany) IID_ITolerances3D =
    {0x82adda0c,0xb8de,0x4336,{0xa5,0xcc,0xb3,0x65,0x04,0xa8,0x0e,0x2d}};
extern "C" const GUID __declspec(selectany) IID_IThreads =
    {0x6090c8d4,0x4eb0,0x402a,{0x8e,0x25,0x29,0xc1,0xfa,0xe8,0x5f,0x11}};
extern "C" const GUID __declspec(selectany) IID_IArcDimension3D =
    {0xfae2bd57,0xc091,0x4009,{0xa7,0xd3,0xa5,0x53,0x71,0x96,0x19,0x66}};
extern "C" const GUID __declspec(selectany) IID_IArcDimensions3D =
    {0xfa666f0b,0xf646,0x468b,{0xa1,0xec,0x0c,0xee,0x38,0x10,0x3a,0x8b}};
extern "C" const GUID __declspec(selectany) IID_IModelText =
    {0x1ae2cbf3,0xda20,0x4888,{0x8b,0xe7,0xe1,0x16,0x56,0x21,0xa2,0x1a}};
extern "C" const GUID __declspec(selectany) IID_IModelTexts =
    {0xc18c14c9,0xbcb8,0x47a0,{0x95,0x06,0x5b,0x03,0x3e,0xd0,0xac,0x4c}};
extern "C" const GUID __declspec(selectany) IID_IModelTable =
    {0xbe1c5e22,0x0676,0x45d0,{0x80,0x81,0xc1,0xcf,0x71,0x57,0xcb,0x5c}};
extern "C" const GUID __declspec(selectany) IID_IModelTables =
    {0xfec86293,0x7ab2,0x4bbb,{0x8b,0xaf,0x53,0xec,0x5d,0x03,0x3a,0xfe}};
extern "C" const GUID __declspec(selectany) IID_ISymbols3DContainer =
    {0xd695d345,0x7054,0x4bbd,{0x8d,0x36,0x8e,0x1f,0x5a,0xed,0xc5,0xed}};
extern "C" const GUID __declspec(selectany) IID_ILineDimension3D =
    {0xf38e986b,0x9cc0,0x4492,{0xb8,0x50,0x18,0x0d,0x3a,0x6a,0xf7,0x13}};
extern "C" const GUID __declspec(selectany) IID_ICurveVertexParam =
    {0x2ad2e4b4,0xb870,0x437a,{0x8d,0x57,0x58,0x07,0x72,0x9f,0xcb,0x05}};
extern "C" const GUID __declspec(selectany) IID_ISpline3D =
    {0x4d0940a0,0x6a4a,0x4ce8,{0xa0,0x8a,0xea,0x0a,0x4a,0xe9,0x19,0x42}};
extern "C" const GUID __declspec(selectany) IID_ISplines3D =
    {0xc4bc0839,0x932f,0x4dbc,{0x9a,0x84,0x5d,0x1f,0xe8,0x92,0x73,0x51}};
extern "C" const GUID __declspec(selectany) IID_ILocalCoordinateSystems =
    {0xcc04cbf6,0xf0d4,0x456e,{0x90,0x3a,0xc0,0xb0,0xd3,0x55,0x13,0x68}};
extern "C" const GUID __declspec(selectany) IID_IPolyLine =
    {0x6ce7843d,0x9afa,0x48ff,{0xb4,0x44,0x61,0xcd,0xf0,0x36,0xd1,0x18}};
extern "C" const GUID __declspec(selectany) IID_IPolyLines =
    {0x0cf9b989,0x29f8,0x495f,{0x9d,0xda,0x8c,0x2c,0xad,0x84,0x0b,0xb6}};
extern "C" const GUID __declspec(selectany) IID_IControlPoint =
    {0x39f4fc2c,0x99e7,0x411b,{0x90,0x36,0x9c,0x75,0x6a,0x71,0xe2,0x11}};
extern "C" const GUID __declspec(selectany) IID_IControlPoints =
    {0xe22e30f6,0x05ee,0x4fb5,{0x9e,0xeb,0xe2,0x88,0x23,0x4f,0x25,0x6a}};
extern "C" const GUID __declspec(selectany) IID_IConjunctivePoint =
    {0xbc7ad518,0x9599,0x490b,{0x9e,0x2b,0x97,0x11,0xfd,0x9b,0x8d,0x4c}};
extern "C" const GUID __declspec(selectany) IID_IConjunctivePoints =
    {0x4df343a0,0x8744,0x429d,{0xa6,0x05,0x0e,0xea,0xbb,0x7b,0x5f,0x23}};
extern "C" const GUID __declspec(selectany) IID_ISurfacesIntersectionCurve =
    {0x758420a0,0xbecb,0x4fda,{0xbd,0xde,0x1f,0x39,0x8b,0x41,0x11,0x7c}};
extern "C" const GUID __declspec(selectany) IID_ISurfacesIntersectionCurves =
    {0x453e0e34,0x4d2d,0x47b2,{0x8e,0x95,0xeb,0x05,0xc7,0x31,0x96,0x1d}};
extern "C" const GUID __declspec(selectany) IID_IEquidistant3D =
    {0xc25ddbf4,0x3cc1,0x467d,{0xb9,0x96,0xe3,0x0e,0xd4,0xd5,0x29,0xb6}};
extern "C" const GUID __declspec(selectany) IID_IEquidistants3D =
    {0x8b94f332,0xeefd,0x4610,{0x9c,0x55,0x20,0xa1,0xf7,0x33,0x61,0x22}};
extern "C" const GUID __declspec(selectany) IID_ITrimmedCurve =
    {0xf86b25dd,0x55a8,0x40f7,{0xac,0xc4,0x47,0x95,0xfc,0xf7,0xc8,0x7c}};
extern "C" const GUID __declspec(selectany) IID_ITrimmedCurves =
    {0xe0916a32,0x60a7,0x4786,{0x85,0x9f,0xc4,0xb0,0x84,0x02,0xcc,0x36}};
extern "C" const GUID __declspec(selectany) IID_IConnectCurve =
    {0xc3bbe1b9,0x976c,0x45ef,{0x80,0x5f,0xdd,0xa2,0xba,0x80,0x15,0x67}};
extern "C" const GUID __declspec(selectany) IID_IConnectCurves =
    {0x2e869cee,0x5432,0x48c8,{0xb7,0x50,0x5d,0xac,0x8b,0x60,0x94,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IFilletCurve =
    {0x962810e4,0x0c48,0x4886,{0x8b,0x80,0xae,0xa1,0x66,0xb1,0x95,0x2b}};
extern "C" const GUID __declspec(selectany) IID_IFilletCurves =
    {0xe530740c,0xab81,0x4daa,{0xaf,0xb2,0x18,0xe9,0x01,0x21,0xc8,0xdc}};
extern "C" const GUID __declspec(selectany) IID_IArc3D =
    {0x79cc225f,0xc4f9,0x4721,{0x9f,0xe8,0x8a,0xf3,0xaa,0x88,0x75,0x23}};
extern "C" const GUID __declspec(selectany) IID_IArcs3D =
    {0x0c7e7d56,0xf8af,0x4803,{0x92,0x91,0x63,0x51,0xdd,0xe5,0x2b,0x69}};
extern "C" const GUID __declspec(selectany) IID_ICurveOutLine =
    {0xbc64a05c,0x0078,0x44eb,{0x94,0x92,0xab,0xad,0x7a,0xd3,0x8e,0x86}};
extern "C" const GUID __declspec(selectany) IID_ICurveOutLines =
    {0x491f65e7,0xf227,0x42fd,{0xab,0x49,0x82,0x48,0x7e,0xae,0x77,0x75}};
extern "C" const GUID __declspec(selectany) IID_ICurveByLaw =
    {0xd875d25c,0xb52b,0x47c8,{0xb0,0x4c,0x8c,0xba,0x73,0x62,0x3f,0x17}};
extern "C" const GUID __declspec(selectany) IID_ICurveByLaws =
    {0x7dd7bf03,0x5348,0x4345,{0xa2,0xa2,0xfc,0x11,0x6c,0x10,0x0b,0x2e}};
extern "C" const GUID __declspec(selectany) IID_IIsoparametricCurve =
    {0xd7e519c3,0xea15,0x43ca,{0xa2,0xeb,0xd5,0xf1,0x19,0xa7,0x00,0x51}};
extern "C" const GUID __declspec(selectany) IID_IIsoparametricCurves =
    {0x6046fd5e,0x434a,0x4b9f,{0x82,0x6f,0x37,0xec,0xc1,0x73,0x0a,0xd4}};
extern "C" const GUID __declspec(selectany) IID_IIsoparametricCurvesSet =
    {0xf6768800,0xd726,0x4530,{0x89,0x66,0xca,0x1d,0xc1,0xac,0x29,0x27}};
extern "C" const GUID __declspec(selectany) IID_IIsoparametricCurvesSets =
    {0x8a0aadfb,0xd56c,0x46bb,{0x90,0xe7,0x29,0xbe,0xeb,0x42,0xea,0x63}};
extern "C" const GUID __declspec(selectany) IID_ISplineOnSurface =
    {0xbff82605,0xc64b,0x460e,{0xa6,0xd3,0x3c,0x22,0x22,0x9a,0x83,0x25}};
extern "C" const GUID __declspec(selectany) IID_ISplinesOnSurfaces =
    {0x0e670e69,0x68ab,0x4075,{0x9c,0xe4,0x99,0xe0,0xa1,0x54,0x75,0x38}};
extern "C" const GUID __declspec(selectany) IID_IProjectionCurve =
    {0x535dd795,0x507f,0x41c8,{0xac,0x1e,0x6e,0xaf,0x24,0x3a,0x37,0x92}};
extern "C" const GUID __declspec(selectany) IID_IProjectionCurves =
    {0x88819055,0x3211,0x47dd,{0x90,0x8f,0x18,0x7b,0x58,0x26,0xfe,0x67}};
extern "C" const GUID __declspec(selectany) IID_ICurveBy2Projections =
    {0x75250d2e,0x1a02,0x4593,{0x90,0x02,0x09,0x87,0x2f,0x65,0xf1,0xcb}};
extern "C" const GUID __declspec(selectany) IID_ICurvesBy2Projectionses =
    {0x8062145f,0xc6ac,0x4006,{0xa8,0x9b,0xf1,0xfc,0x6a,0x08,0xfc,0xc5}};
extern "C" const GUID __declspec(selectany) IID_IContour3D =
    {0x05fd7844,0xea39,0x497d,{0xb0,0x0b,0x7a,0x11,0x54,0x83,0x05,0x24}};
extern "C" const GUID __declspec(selectany) IID_IContours3D =
    {0x9c1419ee,0xe99e,0x47dd,{0x8b,0xa3,0x91,0x32,0xe0,0x3f,0x13,0x07}};
extern "C" const GUID __declspec(selectany) IID_ILineSegment3D =
    {0x74880880,0x4f48,0x44cc,{0x8f,0xc3,0x83,0xfe,0x3c,0xa7,0xc4,0x4a}};
extern "C" const GUID __declspec(selectany) IID_ILineSegments3D =
    {0x0dfa5c90,0x9674,0x4c27,{0x94,0x41,0xac,0xdc,0xd4,0x6c,0x0a,0xf4}};
extern "C" const GUID __declspec(selectany) IID_IUnhistoredCurve3D =
    {0x56f2843f,0xde6a,0x43bc,{0xac,0xcd,0x56,0x0b,0x7f,0xa7,0xdd,0x05}};
extern "C" const GUID __declspec(selectany) IID_IUnhistoredCurves3D =
    {0xaaadb4ee,0x6f26,0x4865,{0x9a,0x83,0x01,0xe7,0x1a,0x43,0x86,0x21}};
extern "C" const GUID __declspec(selectany) IID_IPointsArrOnCurve =
    {0x13783b5e,0x3591,0x4173,{0x8d,0xa1,0x6f,0x30,0x95,0xb8,0x8d,0xb4}};
extern "C" const GUID __declspec(selectany) IID_IPointsArrsOnCurves =
    {0x1a156def,0x0854,0x4fbd,{0x9d,0xc6,0xa6,0xb4,0x15,0x38,0x5c,0x25}};
extern "C" const GUID __declspec(selectany) IID_IPointsArrOnSurface =
    {0xd385fed6,0x763e,0x4b1b,{0xb8,0xe5,0x8b,0x19,0x26,0x38,0x95,0x50}};
extern "C" const GUID __declspec(selectany) IID_IPointsArrsOnSurfaces =
    {0x5bd348d2,0x2e20,0x4a8d,{0x87,0xb7,0xc7,0x4e,0xf2,0x2d,0x03,0x10}};
extern "C" const GUID __declspec(selectany) IID_IPointsArrFromFile =
    {0x782932b2,0x8969,0x41e1,{0x81,0x9c,0x24,0x58,0xea,0x6d,0xc8,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IPointsArrsFromFiles =
    {0x7ea13b3a,0x7d45,0x4e40,{0xa5,0xc3,0x19,0x20,0xb5,0x34,0x37,0xa6}};
extern "C" const GUID __declspec(selectany) IID_IMathCurve3D =
    {0x6d2112dd,0xf6e1,0x49cf,{0x96,0x78,0x89,0xb0,0xc6,0xcc,0x6a,0xca}};
extern "C" const GUID __declspec(selectany) IID_IAxis3D =
    {0xbc67ce6c,0xc27b,0x4c72,{0xa2,0xbf,0xf8,0x50,0x37,0x3d,0x8e,0x13}};
extern "C" const GUID __declspec(selectany) IID_IAxes3D =
    {0xf2645e37,0x5d28,0x4821,{0x87,0x16,0x86,0xc3,0xf0,0xb1,0x38,0x92}};
extern "C" const GUID __declspec(selectany) IID_IMathSurface3D =
    {0x25675c2f,0x10fd,0x4ce7,{0x9e,0x73,0xd3,0x91,0x5d,0x3e,0x89,0x4e}};
extern "C" const GUID __declspec(selectany) IID_IPlane3D =
    {0xd71c768d,0x89f1,0x4143,{0x90,0x3a,0xad,0x25,0x95,0xfd,0x82,0x20}};
extern "C" const GUID __declspec(selectany) IID_IPlanes3D =
    {0x71b69c8b,0xfeae,0x484f,{0xbb,0xda,0xf7,0xc7,0x1a,0x94,0xdd,0xc7}};
extern "C" const GUID __declspec(selectany) IID_ILocalCSAxesDirectionParam =
    {0x919df6db,0x0ba9,0x4edd,{0xb6,0x81,0x33,0xe0,0xb5,0x19,0x83,0x4b}};
extern "C" const GUID __declspec(selectany) IID_ILocalCSEulerParam =
    {0xad261149,0x1455,0x49bd,{0xba,0x0a,0xb1,0x76,0x0a,0x0c,0x8c,0xb0}};
extern "C" const GUID __declspec(selectany) IID_IRoughParams =
    {0x6c1943ce,0x8fdb,0x47d2,{0x9b,0x2f,0x95,0xf7,0xb8,0x51,0xbe,0x3d}};
extern "C" const GUID __declspec(selectany) IID_IBranchs3D =
    {0xafe08aec,0xf751,0x42d9,{0xa6,0xf5,0x3c,0x00,0x4e,0x4d,0x41,0xa6}};
extern "C" const GUID __declspec(selectany) IID_ILocalCSOrientByObjectParam =
    {0x618485e7,0xd88a,0x4dcc,{0x88,0x96,0x7e,0xa0,0x4d,0x83,0x1d,0xbb}};
extern "C" const GUID __declspec(selectany) IID_ILocalCSObject =
    {0x116f7e59,0xf175,0x47d2,{0x83,0x46,0xeb,0x3c,0x87,0xd6,0x05,0x78}};
extern "C" const GUID __declspec(selectany) IID_ISurfacePatch =
    {0xb6330040,0x7aba,0x4ecd,{0x8c,0x92,0x5b,0x44,0x1a,0xf1,0x1c,0x3b}};
extern "C" const GUID __declspec(selectany) IID_ISurfacePatches =
    {0xdee5b135,0x4d8e,0x4ad8,{0xae,0xa4,0xe7,0x63,0xf6,0x82,0x90,0xb2}};
extern "C" const GUID __declspec(selectany) IID_IFaceRemover =
    {0x4cae21e3,0x4183,0x47a6,{0x94,0xb8,0x8a,0xd1,0x4d,0x57,0x75,0xee}};
extern "C" const GUID __declspec(selectany) IID_IFaceRemovers =
    {0x6e177627,0x05d6,0x40b4,{0xb9,0x55,0x92,0x03,0xf0,0x06,0x56,0xb5}};
extern "C" const GUID __declspec(selectany) IID_ISurfaceSewer =
    {0x031fd1c7,0x9cb6,0x4e49,{0xa2,0x7d,0x73,0xb8,0xd0,0xb6,0x48,0xd4}};
extern "C" const GUID __declspec(selectany) IID_ISurfaceSewers =
    {0x70ae0ba0,0x2059,0x4eab,{0xbe,0x41,0xa6,0xe8,0xc8,0xac,0xfa,0x8a}};
extern "C" const GUID __declspec(selectany) IID_INurbsSurface =
    {0x5dafc690,0xb3a7,0x4771,{0x8e,0x98,0xf8,0x3b,0x5b,0xf0,0xd4,0x54}};
extern "C" const GUID __declspec(selectany) IID_INurbsSurfaces =
    {0xdb184867,0x6207,0x4fb7,{0x9b,0x3f,0x88,0x2b,0xea,0xa1,0x6b,0x4d}};
extern "C" const GUID __declspec(selectany) IID_IRuledSurface =
    {0x95681235,0x7522,0x4a84,{0xb0,0x1c,0xe7,0x6a,0x27,0x39,0x35,0x52}};
extern "C" const GUID __declspec(selectany) IID_IRuledSurfaces =
    {0x3f3efc1c,0xa0a7,0x4b06,{0xbf,0x7a,0x38,0x4b,0xab,0x27,0xb0,0x7f}};
extern "C" const GUID __declspec(selectany) IID_IEquidistantSurface =
    {0xf665724f,0x7177,0x4b93,{0xb5,0x1a,0x06,0x3b,0xaf,0x70,0xce,0xd4}};
extern "C" const GUID __declspec(selectany) IID_IEquidistantSurfaces =
    {0x992d7c05,0x7a25,0x46fb,{0xaa,0xb1,0xb7,0x33,0x7e,0x6e,0xa7,0x4b}};
extern "C" const GUID __declspec(selectany) IID_ITrimmedSurface =
    {0x3d64a257,0x8109,0x491c,{0x8c,0xb6,0xf0,0xdc,0xf5,0x16,0xf0,0x2e}};
extern "C" const GUID __declspec(selectany) IID_ITrimmedSurfaces =
    {0x799a9110,0x799b,0x40e5,{0x85,0xaf,0x08,0x7a,0xd3,0x0a,0x89,0xb4}};
extern "C" const GUID __declspec(selectany) IID_IExtensionSurface =
    {0x27fe71e1,0xc84d,0x4f59,{0x8f,0x9b,0xf0,0xc1,0x44,0x31,0x4c,0x83}};
extern "C" const GUID __declspec(selectany) IID_IExtensionSurfaces =
    {0x5f6ee7f9,0x972a,0x4bb8,{0xb1,0xe4,0xbc,0x1c,0x74,0x04,0x8f,0xff}};
extern "C" const GUID __declspec(selectany) IID_IMeshPointsSurface =
    {0xa1d85ab6,0xc3fd,0x415b,{0x92,0xdb,0x4e,0xb4,0x41,0x4c,0xa7,0x8b}};
extern "C" const GUID __declspec(selectany) IID_IMeshPointsSurfaces =
    {0x46afc862,0xe2da,0x432b,{0x95,0xa3,0x79,0x71,0xbf,0xc8,0x2c,0xb8}};
extern "C" const GUID __declspec(selectany) IID_ICloudPointsSurface =
    {0xf820f8c4,0x9c93,0x4513,{0x8b,0xbd,0xcc,0x02,0x8d,0xaa,0xe4,0x1d}};
extern "C" const GUID __declspec(selectany) IID_ICloudPointsSurfaces =
    {0x6ca7ce7a,0x12c8,0x4103,{0xac,0xc1,0x11,0x00,0x1d,0xd1,0xb0,0x1d}};
extern "C" const GUID __declspec(selectany) IID_IImportedSurface =
    {0x2b98dee2,0x3352,0x4f9b,{0x85,0xb7,0xf0,0xd9,0x47,0x42,0xef,0xa7}};
extern "C" const GUID __declspec(selectany) IID_IImportedSurfaces =
    {0x7791ddc6,0x7c2d,0x450b,{0xbb,0x44,0x66,0x0b,0x07,0x8e,0x52,0xd6}};
extern "C" const GUID __declspec(selectany) IID_INurbsSurfaceByCurvesMesh =
    {0xd06fc62c,0xa572,0x4e6b,{0x9c,0x85,0x0a,0x7d,0x0f,0x97,0x10,0x79}};
extern "C" const GUID __declspec(selectany) IID_INurbsSurfacesByCurvesMeshs =
    {0x9ceec1df,0xa155,0x4702,{0xad,0x18,0x0d,0x85,0x1a,0x4b,0x85,0xa8}};
extern "C" const GUID __declspec(selectany) IID_IJointSurface =
    {0xe9c8814e,0xa3c0,0x4e31,{0xbf,0xfd,0xed,0x8f,0x3d,0xd1,0x30,0x16}};
extern "C" const GUID __declspec(selectany) IID_IJointSurfaces =
    {0xc8ad51fa,0x5a71,0x4ee4,{0xad,0xb2,0xdd,0xaa,0xa9,0x0f,0x16,0x21}};
extern "C" const GUID __declspec(selectany) IID_IRestoredSurface =
    {0xec25af95,0x4117,0x4fb6,{0xa9,0x52,0x1f,0xc7,0x2b,0xe3,0x2e,0x60}};
extern "C" const GUID __declspec(selectany) IID_IRestoredSurfaces =
    {0xcf84b430,0x2579,0x49ca,{0xb9,0x37,0x02,0x35,0x4e,0xb1,0xf8,0xa7}};
extern "C" const GUID __declspec(selectany) IID_IFaceMover =
    {0xca8a3896,0x61a1,0x4976,{0x84,0xaf,0xad,0x5b,0xa8,0x57,0xad,0xc5}};
extern "C" const GUID __declspec(selectany) IID_IFaceMovers =
    {0xfc5cb737,0x7393,0x40c3,{0x9d,0x8c,0xe4,0x73,0x84,0x69,0xc9,0x67}};
extern "C" const GUID __declspec(selectany) IID_ILinearPattern =
    {0xfaa408c7,0x1a43,0x499c,{0xb2,0xe2,0x06,0xf2,0x9b,0x48,0xbc,0xbb}};
extern "C" const GUID __declspec(selectany) IID_IPointDrivenPattern =
    {0x4cf250ac,0x878e,0x4e7b,{0x94,0xde,0xf8,0x34,0xcd,0x13,0x54,0x3f}};
extern "C" const GUID __declspec(selectany) IID_ICircularPattern =
    {0xb1ed4ca8,0x0835,0x4465,{0x92,0x5d,0xc1,0x37,0x55,0x9a,0x32,0xe0}};
extern "C" const GUID __declspec(selectany) IID_IPathPattern =
    {0xb05fc37d,0x7d60,0x4291,{0xbe,0x81,0xe4,0xa9,0xe2,0x3d,0x47,0x40}};
extern "C" const GUID __declspec(selectany) IID_IDerivedPattern =
    {0x575d30e2,0xefa3,0x40b5,{0x9c,0xa1,0x02,0xa6,0x3e,0x0d,0x50,0xd9}};
extern "C" const GUID __declspec(selectany) IID_IVector3DBy2VertexesParameters =
    {0xc039c103,0xec51,0x4ff1,{0xa8,0x70,0x7c,0x01,0x6b,0xc7,0xa0,0xd9}};
extern "C" const GUID __declspec(selectany) IID_IMirrorPattern =
    {0x47c76e89,0x23c0,0x4a82,{0x8d,0xfc,0xf7,0x70,0xf9,0xf3,0x80,0xc8}};
extern "C" const GUID __declspec(selectany) IID_IVector3DByCoefficientsParameters =
    {0x794bec80,0xebb3,0x4021,{0x97,0x10,0x2e,0x7b,0xda,0xc6,0x6f,0x63}};
extern "C" const GUID __declspec(selectany) IID_IVector3DBy2AnglesParameters =
    {0x7dc2a592,0xfacb,0x4ab2,{0x9b,0x74,0x27,0xd8,0x11,0x6f,0xd5,0x91}};
extern "C" const GUID __declspec(selectany) IID_IVector3DByLocalCSParameters =
    {0x1e1f5be3,0xe502,0x41d1,{0xb2,0xeb,0x8a,0x82,0x16,0xc4,0x9b,0x18}};
extern "C" const GUID __declspec(selectany) IID_IVector3DByObjectParameters =
    {0x4cbab5b7,0x2350,0x47eb,{0x84,0xda,0x29,0x53,0xf9,0x32,0xd4,0x65}};
extern "C" const GUID __declspec(selectany) IID_IVector3DAlongSurfaceNormalParameters =
    {0x064cf423,0x8d27,0x41e5,{0x84,0xc4,0x30,0x3f,0x28,0x6b,0x38,0xb1}};
extern "C" const GUID __declspec(selectany) IID_IVector3DByCurveParameters =
    {0x68c9d554,0x7df1,0x4509,{0x9b,0x41,0x00,0x7f,0x12,0x3e,0xfb,0x78}};
extern "C" const GUID __declspec(selectany) IID_IVector3DByScreenNormalParameters =
    {0xf4593ca1,0x05e9,0x46f2,{0xbf,0x6c,0x42,0x88,0x37,0x10,0x66,0xd1}};
extern "C" const GUID __declspec(selectany) IID_ICutRotated =
    {0x115a16ef,0xb0c3,0x4deb,{0x9d,0x65,0xd2,0x32,0x4f,0xa0,0x75,0xd8}};
extern "C" const GUID __declspec(selectany) IID_IRotatedSurface =
    {0x3191cebb,0x584c,0x4f58,{0x82,0xc1,0xa3,0x77,0x1f,0x73,0xbe,0x12}};
extern "C" const GUID __declspec(selectany) IID_IPoint3DParamBySphere =
    {0x341ee39e,0xec72,0x42a1,{0xba,0x85,0x38,0xf4,0xae,0x28,0x75,0xcc}};
extern "C" const GUID __declspec(selectany) IID_IPoint3DParamByCylinder =
    {0x98d8aa95,0xb217,0x4cd7,{0x8b,0xb4,0xc4,0x19,0xf9,0x04,0x2a,0xcf}};
extern "C" const GUID __declspec(selectany) IID_IMeshAroundPointParam =
    {0x2cb26ab2,0x09b9,0x4b7f,{0xa7,0x76,0xef,0x02,0xab,0x25,0xfb,0x78}};
extern "C" const GUID __declspec(selectany) IID_IAxis3DBy2Points =
    {0x8cf29d41,0x23e9,0x4e19,{0x8d,0xf7,0xc5,0x65,0x60,0xf1,0xa2,0x37}};
extern "C" const GUID __declspec(selectany) IID_IAxis3DBy2Planes =
    {0xae53df83,0x5d00,0x4851,{0xbb,0xcd,0xbe,0xdf,0xca,0x50,0xbf,0x1c}};
extern "C" const GUID __declspec(selectany) IID_IAxis3DByConeface =
    {0x2e23903d,0x9c7c,0x42b5,{0x86,0x1a,0xa2,0x8d,0xa3,0xee,0xa2,0xe6}};
extern "C" const GUID __declspec(selectany) IID_IAxis3DByEdge =
    {0x95be2f02,0x3b18,0x4bbc,{0x94,0x51,0x54,0xb4,0xab,0x70,0xcc,0x7a}};
extern "C" const GUID __declspec(selectany) IID_IAxis3DByPointAndObject =
    {0x2cc2e874,0xb336,0x4a24,{0xbd,0x03,0x9a,0xc7,0xe3,0x01,0x23,0xb6}};
extern "C" const GUID __declspec(selectany) IID_IAxis3DByOperation =
    {0xc068bbe9,0x180d,0x4d82,{0xa8,0x27,0x12,0x41,0x66,0xa4,0x51,0xee}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DByPlaneCurve =
    {0xb815e0a4,0xa837,0x48ab,{0x9f,0xd8,0x3e,0x9c,0xdd,0x5a,0x0a,0xb0}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DTangentToFaceInPoint =
    {0x5ede5e22,0x2d26,0x4ae2,{0xa7,0x65,0x8c,0xa3,0x14,0xea,0xad,0x85}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DByOffset =
    {0x5f5e0fa2,0x84d7,0x44d1,{0xa9,0x46,0x01,0x8e,0xbe,0xb8,0x29,0x26}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DBy3Points =
    {0x1a0e3dc8,0xf3f9,0x4c73,{0xa3,0xd6,0x87,0x16,0x8b,0x1e,0x0d,0xbd}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DByAngle =
    {0x4ad8121e,0x95bb,0x4b0f,{0xb1,0xd8,0xe0,0x39,0x4a,0x72,0xde,0xe2}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DByEdgeAndPoint =
    {0x5d170073,0xfaa3,0x4e00,{0xa4,0xb4,0x27,0xe1,0x66,0x55,0x66,0x26}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DParallelByPoint =
    {0xb9fcc89d,0xd48c,0x4090,{0xb0,0x92,0xb0,0xf0,0x16,0xb8,0x4d,0x58}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DPerpendicularByEdge =
    {0x972d817b,0xdec8,0x41f7,{0x93,0x07,0xa6,0xd3,0x68,0x97,0x5f,0x2f}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DNormalToSurface =
    {0x054f3818,0xeabb,0x426a,{0xb5,0x5a,0x86,0x71,0x52,0xce,0xf8,0xbd}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DMiddle =
    {0x70190dea,0x7da4,0x4305,{0xad,0x83,0x90,0xd2,0x63,0x76,0x97,0xbe}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DByEdgeAndPlane =
    {0xea6f2004,0x7996,0x4873,{0xab,0xe4,0x8c,0x88,0xac,0x59,0x7a,0xbc}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DBy2Edge =
    {0xa4c4d3b7,0x0daf,0x43ab,{0xb2,0xc2,0xbd,0x3f,0xcb,0x6a,0x5f,0x8f}};
extern "C" const GUID __declspec(selectany) IID_IPlane3DTangentToFace =
    {0xa9a97838,0x3b17,0x4903,{0xae,0x8c,0x82,0x54,0x3c,0x91,0xd2,0x72}};
extern "C" const GUID __declspec(selectany) IID_IToleranceRecalc =
    {0x07c35e20,0x5554,0x4c10,{0xb0,0xd4,0x5b,0x07,0xdd,0x9c,0xe8,0x42}};
extern "C" const GUID __declspec(selectany) IID_IToleranceRecalcsManager =
    {0xb7134661,0x5e97,0x45db,{0x92,0x08,0x5e,0x1e,0x49,0xbe,0xf9,0xc2}};
extern "C" const GUID __declspec(selectany) IID_IMate3DByAngle =
    {0x527ccf94,0xb32b,0x413b,{0x8b,0x0b,0x4a,0xfd,0x37,0x05,0xcd,0xdf}};
extern "C" const GUID __declspec(selectany) IID_IMate3DByTangent =
    {0x8d3897d5,0xa2d1,0x4ccb,{0xb4,0x79,0xe6,0x29,0xb5,0x0c,0xf1,0x2f}};
extern "C" const GUID __declspec(selectany) IID_IMate3DSymmetry =
    {0xb6ca167c,0x64a4,0x4f46,{0xa2,0xe2,0xcb,0xc5,0xbb,0x01,0x93,0x51}};
extern "C" const GUID __declspec(selectany) IID_IMate3DTransmission =
    {0x52b90d96,0xd338,0x4a92,{0x99,0xd9,0xa9,0x0b,0x9d,0x2f,0xf9,0x18}};
extern "C" const GUID __declspec(selectany) IID_IMate3DCamGear =
    {0x68ef30fe,0x933c,0x4f3a,{0xbb,0x9e,0x09,0x8a,0xdc,0xc6,0x63,0x68}};
extern "C" const GUID __declspec(selectany) IID_ICountersinkHoleParameters =
    {0x02b548bf,0x05ec,0x4fc6,{0x94,0x4f,0xf4,0xe5,0x0a,0xb3,0x54,0xcd}};
extern "C" const GUID __declspec(selectany) IID_ISpotfacingHoleParameters =
    {0x3ebdd778,0x87eb,0x4357,{0xbf,0x08,0x47,0xbc,0xde,0x5a,0xbb,0x5d}};
extern "C" const GUID __declspec(selectany) IID_ICountersinkSpotfacingHoleParameters =
    {0xc92c6cdf,0x5cde,0x456c,{0xa2,0x35,0x67,0xc3,0xe4,0x3b,0xb1,0x41}};
extern "C" const GUID __declspec(selectany) IID_IConicHoleParameters =
    {0x9110f9b1,0x83f0,0x4412,{0xb2,0xfe,0x2b,0x1f,0x41,0x6a,0x09,0x32}};
extern "C" const GUID __declspec(selectany) IID_IHoleDisposal =
    {0x071c7a25,0x91e2,0x4c9d,{0x95,0x4a,0xca,0x0f,0xa0,0xe9,0x48,0x63}};
extern "C" const GUID __declspec(selectany) IID_IVertex =
    {0x585e265f,0x0aad,0x4a42,{0x80,0x30,0x3a,0x69,0x88,0x2a,0x9b,0x39}};
extern "C" const GUID __declspec(selectany) IID_IFace =
    {0x299a549e,0x3f82,0x4f60,{0x98,0xa3,0x25,0x8d,0x63,0x2a,0xa6,0x35}};
extern "C" const GUID __declspec(selectany) IID_IEdge =
    {0x5a61ced2,0xdced,0x4cda,{0x8c,0x3c,0xcf,0x71,0x0f,0x0e,0x72,0x7b}};
extern "C" const GUID __declspec(selectany) IID_ILoop7 =
    {0x02c63f96,0x1370,0x4147,{0xb0,0x24,0x8b,0xc6,0x83,0x7b,0x98,0xfe}};
extern "C" const GUID __declspec(selectany) IID_IOrientedEdge7 =
    {0x8e62d0ef,0x3a22,0x40c7,{0xb5,0xea,0xd8,0x5f,0xa0,0xc9,0xf2,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IDistanceAngleMeasurement3D =
    {0xff326c86,0x55cd,0x49fb,{0xbb,0xce,0xbc,0x03,0x3f,0x76,0x2c,0xf7}};
extern "C" const GUID __declspec(selectany) IID_IDistanceAngleMeasurements3D =
    {0xf16c388f,0x16dc,0x4498,{0x88,0x75,0xec,0x8b,0x30,0x0c,0xe4,0xa0}};
extern "C" const GUID __declspec(selectany) IID_IEdgeLengthMeasurement3D =
    {0x93154762,0x202b,0x41e4,{0x9a,0xda,0x77,0x92,0xec,0x3e,0x64,0x81}};
extern "C" const GUID __declspec(selectany) IID_IEdgeLengthMeasurements3D =
    {0x90749843,0xc25c,0x4e07,{0xa4,0x32,0xf4,0x62,0x01,0xbe,0xe9,0x0c}};
extern "C" const GUID __declspec(selectany) IID_IAreaMeasurement3D =
    {0x02d1f030,0x8709,0x4602,{0x8b,0xae,0xe4,0x7c,0xe1,0xc9,0xc1,0x3d}};
extern "C" const GUID __declspec(selectany) IID_IAreaMeasurements3D =
    {0x12126558,0xea51,0x46e0,{0xba,0xed,0x07,0xe5,0x23,0xf4,0xb7,0xc6}};
extern "C" const GUID __declspec(selectany) IID_IMeasurementContainer =
    {0xc84cb131,0x1565,0x4794,{0xab,0xf5,0xe5,0xbd,0xdb,0x9e,0xe5,0xdf}};
extern "C" const GUID __declspec(selectany) IID_IUserDesignationCompObj =
    {0x701ee4da,0x4a8c,0x4f64,{0x9e,0xd3,0x4b,0x51,0xa0,0xab,0xf7,0x9c}};
extern "C" const GUID __declspec(selectany) IID_ILibraryHoleParameters =
    {0x2123d327,0x4119,0x4f1d,{0xa9,0xe4,0x48,0x46,0x28,0x83,0xe9,0x68}};
extern "C" const GUID __declspec(selectany) IID_IZoneParametersByObjects =
    {0xf577ed6f,0xc858,0x442f,{0x85,0x5a,0xe5,0x72,0xaa,0x60,0x68,0xaa}};
extern "C" const GUID __declspec(selectany) IID_IZoneDivisionParametersRegular =
    {0xc29d4dca,0x6bdc,0x4e7e,{0xbd,0x93,0x16,0x39,0x50,0xe8,0xa1,0xe1}};
extern "C" const GUID __declspec(selectany) IID_IZoneDivisionParametersByPlanes =
    {0x3e6ba559,0x7a5a,0x4525,{0x8c,0xc0,0x30,0x4a,0xb4,0x16,0x4e,0xa5}};
extern "C" const GUID __declspec(selectany) IID_IDynamicCrossSectionStep =
    {0x4a8082d6,0xfc56,0x4fd4,{0xa2,0x58,0x51,0xe7,0x4a,0x44,0x51,0x0d}};
extern "C" const GUID __declspec(selectany) IID_IDynamicCrossSection =
    {0xdc056bc2,0x64cd,0x4afe,{0x91,0x0e,0x97,0xac,0xe5,0x6b,0x64,0x7b}};
extern "C" const GUID __declspec(selectany) IID_IDynamicCrossSectionsManager =
    {0xfe4be487,0xb453,0x45e4,{0x8b,0xe2,0x2e,0xbd,0x28,0xd5,0x6c,0xf5}};
extern "C" const GUID __declspec(selectany) IID_IDynamicCrossSectionStepParametersByFreePlane =
    {0x3918486a,0x85b2,0x4f9b,{0xa8,0x5e,0x13,0xbb,0x75,0x49,0x51,0xe0}};
extern "C" const GUID __declspec(selectany) IID_IDynamicCrossSectionStepParametersByOffsetPlane =
    {0xe5beb695,0x4c46,0x4897,{0x93,0x30,0x74,0x63,0xed,0x4d,0x67,0x25}};
extern "C" const GUID __declspec(selectany) IID_IDynamicCrossSectionStepParametersByRotatedPlane =
    {0x69ed339f,0xa095,0x467d,{0x85,0xf3,0x91,0xc1,0x20,0xbf,0x01,0xbf}};
extern "C" const GUID __declspec(selectany) IID_IDynamicCrossSectionStepParametersByZone =
    {0xf966880f,0xc8ec,0x4455,{0xa1,0x55,0x43,0xed,0x46,0xf1,0x59,0xf5}};
extern "C" const GUID __declspec(selectany) IID_IAxisLine3D =
    {0x4477b6ce,0x4f64,0x4bdf,{0x9e,0xaf,0xc0,0x7c,0x78,0x33,0xce,0x8a}};
extern "C" const GUID __declspec(selectany) IID_IDismantleStep =
    {0x430d5e8d,0x1135,0x4150,{0xa4,0x49,0xa9,0xd4,0x34,0x94,0x04,0x60}};
extern "C" const GUID __declspec(selectany) IID_IDismantleParameters =
    {0x5a605cf7,0xd21e,0x4e02,{0xbe,0x8b,0x3f,0x6f,0xe8,0xe2,0x69,0x03}};
extern "C" const GUID __declspec(selectany) IID_IDrawingText =
    {0xe32e5703,0x0141,0x41cf,{0x99,0x17,0x95,0x65,0x64,0x8f,0xe3,0x31}};
extern "C" const GUID __declspec(selectany) IID_IDrawingTexts =
    {0xc72e0e9d,0x7078,0x4aa7,{0x95,0xe4,0xe8,0xc7,0x5c,0xa9,0xbc,0xec}};
extern "C" const GUID __declspec(selectany) IID_ILineSegment =
    {0x64acc86f,0x4b10,0x4897,{0x85,0x52,0xbc,0x0a,0x55,0x6d,0x22,0x8b}};
extern "C" const GUID __declspec(selectany) IID_ILineSegments =
    {0xb211c782,0xa830,0x468e,{0x9f,0x4f,0xc4,0x99,0xa7,0x70,0x78,0xd8}};
extern "C" const GUID __declspec(selectany) IID_IArc =
    {0xa22dfb7e,0x21e0,0x4b28,{0x9c,0xa1,0x29,0xb7,0x95,0x0c,0xf2,0x56}};
extern "C" const GUID __declspec(selectany) IID_IArcs =
    {0x4fcb4c17,0x3b9e,0x45e8,{0xb8,0x3c,0x92,0x84,0x02,0x7b,0xaa,0x0d}};
extern "C" const GUID __declspec(selectany) IID_IContour =
    {0xe79f5a53,0xf456,0x4996,{0xb6,0x20,0x16,0xb7,0x25,0xf1,0x34,0xfb}};
extern "C" const GUID __declspec(selectany) IID_IMultiline =
    {0xf6ccb098,0x5710,0x44e3,{0x81,0x98,0x8f,0xaf,0xd5,0x6c,0x7a,0x6f}};
extern "C" const GUID __declspec(selectany) IID_IMultilines =
    {0x968d7b84,0x2bc1,0x4354,{0xaa,0xfe,0x73,0x19,0x2e,0x40,0x55,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDrawingContour =
    {0x25509c3a,0x7b46,0x4e3f,{0xb0,0xe8,0x0e,0x61,0xb7,0x54,0x86,0x64}};
extern "C" const GUID __declspec(selectany) IID_IDrawingContours =
    {0xdba3626c,0x12be,0x4bff,{0x8d,0x42,0xb0,0x1a,0x78,0x66,0x6b,0xc9}};
extern "C" const GUID __declspec(selectany) IID_ICircle =
    {0x5c952f95,0xdfed,0x4eee,{0xb3,0x9a,0x66,0x99,0xed,0xe0,0x86,0x76}};
extern "C" const GUID __declspec(selectany) IID_ICircles =
    {0xc8ca9255,0xe5fe,0x4396,{0x9c,0x3f,0x75,0xee,0x73,0x77,0xc5,0x08}};
extern "C" const GUID __declspec(selectany) IID_IPoint =
    {0xd0c19c87,0x14e7,0x401d,{0xae,0xf5,0xa2,0xe8,0x8e,0x89,0x9f,0x6e}};
extern "C" const GUID __declspec(selectany) IID_IPoints =
    {0x8c6846a4,0xee3b,0x4c00,{0xa7,0x08,0x5c,0x0f,0xd0,0x1e,0x21,0xb7}};
extern "C" const GUID __declspec(selectany) IID_IBezier =
    {0x6d51ec19,0x200c,0x47a2,{0xae,0x55,0x05,0x93,0xad,0x74,0x68,0x51}};
extern "C" const GUID __declspec(selectany) IID_IBeziers =
    {0x57944ecc,0x5491,0x4551,{0x9d,0xb9,0xfa,0xbc,0x45,0x12,0x5a,0x63}};
extern "C" const GUID __declspec(selectany) IID_IMacroObjects =
    {0x5b3f5454,0x160a,0x4981,{0xb0,0x93,0x89,0x0e,0x9a,0x71,0x9a,0xe3}};
extern "C" const GUID __declspec(selectany) IID_ILine =
    {0x3ea0da9b,0xf2c0,0x40c4,{0xbe,0x36,0x71,0x03,0x50,0x9a,0x93,0x89}};
extern "C" const GUID __declspec(selectany) IID_ILines =
    {0x889a9b9c,0x7533,0x4ec5,{0x8e,0x2c,0x5e,0xcf,0x82,0x28,0xb0,0x6f}};
extern "C" const GUID __declspec(selectany) IID_IPolyLine2D =
    {0x4d0da413,0x9507,0x4795,{0x89,0x6f,0xe0,0x49,0xfa,0x6e,0x44,0xdd}};
extern "C" const GUID __declspec(selectany) IID_IPolyLines2D =
    {0xd1a9cb2d,0xa259,0x4ccc,{0x9c,0xd4,0xfa,0x00,0x64,0x94,0xbc,0xa7}};
extern "C" const GUID __declspec(selectany) IID_INurbs =
    {0xee1ab9f4,0xb127,0x4303,{0xa3,0x0d,0xc3,0x50,0x9f,0x6d,0x10,0xcd}};
extern "C" const GUID __declspec(selectany) IID_INurbses =
    {0x88eced7c,0x181c,0x4d9f,{0x84,0xde,0x44,0xb2,0xe3,0x60,0xf2,0x78}};
extern "C" const GUID __declspec(selectany) IID_IRaster =
    {0xdeed8d7b,0x404b,0x4f17,{0xb4,0x2a,0x2f,0x5e,0x64,0x81,0x8d,0x0a}};
extern "C" const GUID __declspec(selectany) IID_IRasters =
    {0xc6e4e32d,0xe077,0x4b14,{0xb9,0xde,0x04,0x1b,0xd6,0x28,0xc3,0x8c}};
extern "C" const GUID __declspec(selectany) IID_IOleDrawingObject =
    {0x9a0ece23,0x7b60,0x44e0,{0x97,0x28,0xc5,0x6c,0xaa,0xa4,0x55,0xa2}};
extern "C" const GUID __declspec(selectany) IID_IOleDrawingObjects =
    {0xe7a8dd07,0xcd6b,0x45a6,{0xb6,0xaf,0x15,0x5a,0x67,0x4b,0xc7,0xe4}};
extern "C" const GUID __declspec(selectany) IID_IEllipse =
    {0xf60c9107,0xd8e2,0x433c,{0xa0,0xe3,0xa4,0xe5,0x08,0xd0,0x93,0x53}};
extern "C" const GUID __declspec(selectany) IID_IEllipses =
    {0x47633c44,0x93bb,0x4f41,{0xa6,0xca,0x4f,0x8c,0xca,0xea,0x06,0x59}};
extern "C" const GUID __declspec(selectany) IID_IEllipseArc =
    {0x320d837f,0x0b27,0x45b0,{0x98,0xb4,0x9d,0x21,0x15,0x6e,0x98,0x57}};
extern "C" const GUID __declspec(selectany) IID_IEllipseArcs =
    {0xcc5b7fcb,0xb887,0x4a47,{0xae,0x6b,0x25,0x22,0xdf,0xa2,0x44,0x33}};
extern "C" const GUID __declspec(selectany) IID_IRectangle =
    {0x42f9fc58,0xfea0,0x4e52,{0xa6,0x04,0x1a,0x00,0x98,0x5a,0xb7,0x72}};
extern "C" const GUID __declspec(selectany) IID_IRectangles =
    {0xd6bc2ee9,0x249f,0x4961,{0x89,0xa7,0x88,0xda,0x85,0x4f,0x35,0xfe}};
extern "C" const GUID __declspec(selectany) IID_IRegularPolygon =
    {0x51968648,0xf264,0x4904,{0xa0,0x7f,0x65,0x36,0x76,0xae,0x1d,0x35}};
extern "C" const GUID __declspec(selectany) IID_IRegularPolygons =
    {0x80377cb2,0x073e,0x4c38,{0x85,0x32,0xc4,0x2a,0x07,0x8b,0xa7,0x19}};
extern "C" const GUID __declspec(selectany) IID_IEquidistant =
    {0xee6713f9,0xad9a,0x466d,{0x9f,0xb9,0xd1,0x92,0x35,0xe4,0x2c,0x95}};
extern "C" const GUID __declspec(selectany) IID_IEquidistants =
    {0x86182e5e,0x8fa3,0x4283,{0x9d,0xc5,0x43,0xd1,0x67,0x3c,0x80,0xda}};
extern "C" const GUID __declspec(selectany) IID_IHatch =
    {0x826c0b5b,0x0146,0x417a,{0x81,0x28,0xe5,0x81,0xf8,0x43,0x0f,0x37}};
extern "C" const GUID __declspec(selectany) IID_IHatches =
    {0xb7e776b0,0x9524,0x4254,{0x9d,0x1f,0x0c,0xf8,0xe0,0x31,0x4a,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IColouring =
    {0x1e0ef1b5,0x08d3,0x40b6,{0x89,0x3e,0x3e,0xe7,0xe4,0xfa,0xec,0x98}};
extern "C" const GUID __declspec(selectany) IID_IColourings =
    {0x60437dad,0x2688,0x4146,{0xb7,0x65,0x3f,0xcc,0x55,0xc3,0x9d,0x0f}};
extern "C" const GUID __declspec(selectany) IID_IConicCurve =
    {0x83312bfe,0xf373,0x4994,{0xb4,0xb8,0xea,0x98,0x9f,0xad,0x0e,0x3c}};
extern "C" const GUID __declspec(selectany) IID_IConicCurves =
    {0xd496f149,0xab99,0x402b,{0xb3,0xd2,0x94,0x2b,0x26,0x06,0x97,0x53}};
extern "C" const GUID __declspec(selectany) IID_IMark =
    {0xb5d1a0be,0x8f3c,0x4143,{0xb9,0xc5,0x66,0xf0,0xcf,0x0f,0xe7,0x4d}};
extern "C" const GUID __declspec(selectany) IID_IMarks =
    {0x47585370,0x56bd,0x4419,{0x82,0xd9,0xdb,0x7c,0xbf,0xb1,0xa2,0x52}};
extern "C" const GUID __declspec(selectany) IID_IMarkInsideForm =
    {0xe5c5a0ff,0x6cab,0x4179,{0x9b,0xf3,0x86,0x8d,0x96,0xbf,0x6a,0xea}};
extern "C" const GUID __declspec(selectany) IID_IMarkOnLine =
    {0x5a1540f9,0x7388,0x466f,{0xa1,0x3c,0xeb,0x11,0x33,0x42,0x3d,0xd9}};
extern "C" const GUID __declspec(selectany) IID_IMarkOnLeader =
    {0xf3d7e6a6,0x26ea,0x4d68,{0xad,0x58,0x4d,0xe1,0x94,0xc4,0x7b,0x4e}};
extern "C" const GUID __declspec(selectany) IID_IAxisJut =
    {0x5a22e024,0xf530,0x45db,{0xa3,0xf2,0xca,0x05,0x87,0xbd,0xa1,0xb5}};
extern "C" const GUID __declspec(selectany) IID_ICutUnitMarking =
    {0x2eda58ee,0xdbda,0x44cc,{0xad,0x10,0x68,0x95,0x00,0x6d,0x49,0x8c}};
extern "C" const GUID __declspec(selectany) IID_ICutUnitMarkings =
    {0x23b00f94,0x98d3,0x4ad7,{0x88,0x27,0xf4,0x08,0x8f,0x4a,0x9e,0x5c}};
extern "C" const GUID __declspec(selectany) IID_IUnitMarking =
    {0x86f46084,0x16a8,0x4b5c,{0x99,0xe9,0xf8,0x48,0x21,0x67,0x88,0xf0}};
extern "C" const GUID __declspec(selectany) IID_IUnitMarkings =
    {0x969ad901,0xfc09,0x47f5,{0x94,0xf5,0x1a,0xbe,0xb1,0xa9,0xc8,0x5c}};
extern "C" const GUID __declspec(selectany) IID_IMultiTextLeader =
    {0x1bfc5d3f,0x1483,0x4569,{0xb4,0xb5,0x7a,0x12,0x16,0x3a,0x46,0x55}};
extern "C" const GUID __declspec(selectany) IID_IMultiTextLeaders =
    {0x233b2298,0x7a45,0x4ce1,{0xae,0xf2,0x30,0xb0,0x63,0xfd,0xb6,0x3c}};
extern "C" const GUID __declspec(selectany) IID_IUnitNumber =
    {0xfabaf607,0xcb92,0x47c4,{0x94,0x09,0xb7,0x67,0x81,0x62,0x05,0x1d}};
extern "C" const GUID __declspec(selectany) IID_IUnitNumbers =
    {0x598e649b,0x970c,0x454b,{0x91,0x62,0x1b,0xb6,0xc9,0xfb,0xfc,0xbf}};
extern "C" const GUID __declspec(selectany) IID_IBrace =
    {0x7f328d28,0x76e9,0x4e04,{0xa3,0x5c,0xad,0x60,0x33,0x99,0x98,0xe4}};
extern "C" const GUID __declspec(selectany) IID_IBraces =
    {0x99f27bd6,0x6294,0x45d9,{0xaf,0x78,0xa9,0xd5,0x2e,0x9d,0xd7,0x99}};
extern "C" const GUID __declspec(selectany) IID_ICutLine =
    {0x26e86124,0xdc1c,0x41a2,{0x80,0x75,0xe7,0x3f,0x3e,0xad,0x84,0x74}};
extern "C" const GUID __declspec(selectany) IID_ICutLines =
    {0x666da5b4,0x324c,0x493c,{0x9a,0x91,0x37,0xd9,0xe0,0x78,0xeb,0x4e}};
extern "C" const GUID __declspec(selectany) IID_ILineDimension =
    {0xa3767bda,0xe605,0x4fc1,{0x98,0x8d,0x81,0x80,0x9d,0xeb,0x36,0xf4}};
extern "C" const GUID __declspec(selectany) IID_ILineDimensions =
    {0xa6f6a18a,0x78fa,0x4a77,{0xbb,0x75,0x90,0x64,0x7e,0x0c,0x54,0x5c}};
extern "C" const GUID __declspec(selectany) IID_IRadialDimension =
    {0x712a9437,0xd772,0x4eae,{0xaf,0x83,0xab,0xc9,0xc2,0x2e,0xb2,0x81}};
extern "C" const GUID __declspec(selectany) IID_IRadialDimensions =
    {0x12d26993,0x449e,0x42e2,{0xa9,0x09,0xb0,0x47,0xaf,0xd6,0xe2,0x7d}};
extern "C" const GUID __declspec(selectany) IID_IDiametralDimension =
    {0x2b4ce92f,0x438d,0x4d3e,{0x8f,0x8d,0x4d,0x14,0xe5,0xd0,0xe2,0x14}};
extern "C" const GUID __declspec(selectany) IID_IDiametralDimensions =
    {0x8e45feb9,0x7bcd,0x4c9f,{0x97,0x67,0x32,0x07,0x36,0x98,0x06,0x62}};
extern "C" const GUID __declspec(selectany) IID_IAngleDimension =
    {0x0f2ce9ec,0x5d2a,0x4b21,{0xb9,0x6a,0x46,0x20,0x1c,0x12,0x0e,0xd1}};
extern "C" const GUID __declspec(selectany) IID_IAngleDimensions =
    {0xdf9abb77,0xbbb6,0x4b29,{0xa0,0xe0,0x81,0xdc,0xfd,0x52,0x5c,0x2e}};
extern "C" const GUID __declspec(selectany) IID_IBreakLineDimension =
    {0x61164a26,0x855c,0x4220,{0x88,0xed,0xc2,0xbd,0xaf,0x49,0xb2,0xdb}};
extern "C" const GUID __declspec(selectany) IID_IBreakLineDimensions =
    {0x4125169f,0x3ea8,0x4ac0,{0x9e,0x1b,0x55,0x82,0xd6,0x26,0x00,0xc4}};
extern "C" const GUID __declspec(selectany) IID_IHeightDimension =
    {0x938be57f,0x55ff,0x469f,{0x82,0xa5,0xb1,0xcd,0x6c,0xcf,0x83,0x40}};
extern "C" const GUID __declspec(selectany) IID_IHeightDimensions =
    {0x3a56d35c,0x3242,0x4c49,{0xba,0x99,0xcf,0x79,0x0e,0xb1,0x03,0x56}};
extern "C" const GUID __declspec(selectany) IID_IArcDimension =
    {0x11487495,0xb18a,0x4877,{0x9e,0x85,0x3d,0xc9,0x01,0x6d,0xf8,0xbd}};
extern "C" const GUID __declspec(selectany) IID_IArcDimensions =
    {0xfe2755d9,0x48e2,0x44cc,{0xbc,0x24,0x86,0xcf,0x86,0xbe,0x08,0xe2}};
extern "C" const GUID __declspec(selectany) IID_IBreakRadialDimension =
    {0x88491537,0x9e93,0x42f3,{0x86,0x1c,0x76,0x1a,0x75,0xbb,0x89,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IBreakRadialDimensions =
    {0xe2181a3e,0x5417,0x4d73,{0xab,0x65,0x98,0x3d,0xed,0x34,0x38,0xe0}};
extern "C" const GUID __declspec(selectany) IID_IRough =
    {0x0a192ac5,0xd8bc,0x43e9,{0x8f,0xc7,0xac,0xf3,0x25,0x78,0xdd,0xb4}};
extern "C" const GUID __declspec(selectany) IID_IRoughs =
    {0xacc42b32,0x27f3,0x4f74,{0xb4,0xa5,0xc9,0x7d,0x4c,0x7b,0x28,0x9d}};
extern "C" const GUID __declspec(selectany) IID_IBase =
    {0x01cdfd67,0x69ea,0x4289,{0x8f,0x42,0x5b,0x01,0xbb,0x9b,0xf7,0x0b}};
extern "C" const GUID __declspec(selectany) IID_IBases =
    {0xc607727c,0x6b0a,0x4fb6,{0xaf,0xca,0xed,0x9d,0x83,0xf5,0xc6,0xb7}};
extern "C" const GUID __declspec(selectany) IID_ITolerance =
    {0x42def911,0xadb2,0x478c,{0x85,0xf1,0xd5,0xfe,0xfa,0x26,0x2e,0xec}};
extern "C" const GUID __declspec(selectany) IID_ITolerances =
    {0x97cdd55f,0x3c64,0x469b,{0xb2,0x6e,0xa9,0x27,0xd3,0x30,0x0b,0x6c}};
extern "C" const GUID __declspec(selectany) IID_IDrawingTable =
    {0x9b421bda,0x0444,0x4a68,{0xb6,0x9c,0x1c,0x05,0xd0,0x5c,0x9d,0x28}};
extern "C" const GUID __declspec(selectany) IID_IDrawingTables =
    {0xdf92dace,0xbdc6,0x4341,{0x86,0xda,0x3a,0x9c,0x8d,0xcf,0xde,0xfe}};
extern "C" const GUID __declspec(selectany) IID_IViewPointer =
    {0x3ee98177,0x63e8,0x4c48,{0x89,0xad,0x3d,0x5c,0xcc,0xf8,0x4d,0x72}};
extern "C" const GUID __declspec(selectany) IID_IViewPointers =
    {0x08b45c97,0x6f86,0x4809,{0xbb,0xc3,0x78,0xf2,0x16,0xbd,0x04,0x30}};
extern "C" const GUID __declspec(selectany) IID_ICentreMarker =
    {0x8fe1cada,0xde72,0x4a55,{0xb3,0x03,0xea,0xf1,0xf4,0x74,0x8c,0xf6}};
extern "C" const GUID __declspec(selectany) IID_ICentreMarkers =
    {0xa0533211,0xcf52,0x4ab5,{0xa1,0x72,0x3d,0xc7,0xd9,0x42,0x76,0xd1}};
extern "C" const GUID __declspec(selectany) IID_IRemoteElement =
    {0xa9d96ce2,0x9fe4,0x494e,{0x87,0xb2,0x20,0x12,0x2e,0xac,0x2a,0xe4}};
extern "C" const GUID __declspec(selectany) IID_IRemoteElements =
    {0x88427a6b,0x00af,0x46e2,{0x9b,0x95,0xbc,0x83,0x48,0xc2,0x16,0x2a}};
extern "C" const GUID __declspec(selectany) IID_IAxisLine =
    {0x5c5caebd,0x70a9,0x41db,{0x9f,0x74,0xf9,0x76,0x0d,0x82,0x2d,0x95}};
extern "C" const GUID __declspec(selectany) IID_IAxisLines =
    {0xc567e700,0xe163,0x4c8f,{0xb3,0x29,0x93,0x1b,0xb9,0x3d,0x02,0x23}};
extern "C" const GUID __declspec(selectany) IID_IWaveLine =
    {0xfa2012e1,0xa983,0x47d3,{0x9d,0x43,0xb8,0xdc,0x61,0x9a,0xc5,0x54}};
extern "C" const GUID __declspec(selectany) IID_IWaveLines =
    {0xc1f0a911,0x8b4a,0x48b5,{0x96,0x11,0x52,0x50,0xd3,0xfc,0x2a,0xca}};
extern "C" const GUID __declspec(selectany) IID_IBrokenLine =
    {0x2482eb44,0x5625,0x4fb9,{0xa4,0x6b,0x78,0x14,0x26,0xb0,0x25,0x10}};
extern "C" const GUID __declspec(selectany) IID_IBrokenLines =
    {0x2a7eadc0,0x5e79,0x4ddb,{0x85,0xd5,0xe3,0xed,0xb7,0x43,0x48,0x0d}};
extern "C" const GUID __declspec(selectany) IID_ICircularCentres =
    {0x43812a86,0x37cd,0x4c6c,{0xae,0x86,0x78,0x57,0x6e,0xc7,0xe8,0x34}};
extern "C" const GUID __declspec(selectany) IID_ICircularsCentries =
    {0x1f7ed8f6,0x85da,0x4b32,{0x93,0x06,0x31,0xe3,0xda,0xba,0x3f,0x84}};
extern "C" const GUID __declspec(selectany) IID_ILinearCentres =
    {0xc1e24970,0x64f0,0x4689,{0xa3,0xab,0xcc,0x34,0x69,0x83,0x78,0xdc}};
extern "C" const GUID __declspec(selectany) IID_ILinearsCentries =
    {0xe0854ccb,0x7849,0x4503,{0xbf,0x8b,0xf7,0x0c,0xf4,0x93,0xd5,0x9b}};
extern "C" const GUID __declspec(selectany) IID_IConditionIntersect =
    {0x8e844a00,0xfc0a,0x47fa,{0x91,0x67,0x37,0xbe,0x6c,0x77,0xd0,0x32}};
extern "C" const GUID __declspec(selectany) IID_IConditionIntersects =
    {0xedb023f6,0x0862,0x4cb3,{0xaf,0x81,0x62,0xd7,0x84,0xf4,0x55,0xb1}};
extern "C" const GUID __declspec(selectany) IID_IBreakAngleDimension =
    {0xf6ed408a,0xc2a8,0x47dd,{0x8e,0xc3,0x01,0x1a,0x7a,0xd6,0x03,0x35}};
extern "C" const GUID __declspec(selectany) IID_ILeader =
    {0xa7419920,0x06b8,0x4f34,{0xac,0x1e,0x9d,0x48,0xe0,0xed,0x9d,0xcb}};
extern "C" const GUID __declspec(selectany) IID_IMarkLeader =
    {0x8a5d2a56,0xecb6,0x4151,{0xb1,0xac,0xf8,0x54,0x8c,0xd6,0x68,0xcf}};
extern "C" const GUID __declspec(selectany) IID_IPositionLeader =
    {0xa8227628,0x4b9c,0x42c8,{0xae,0x58,0xb3,0x71,0x6a,0x7e,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IChangeLeader =
    {0xccfbe87d,0x1a3c,0x4c8b,{0xab,0xe3,0x1c,0x23,0x19,0x69,0x43,0x14}};
extern "C" const GUID __declspec(selectany) IID_IBrandLeader =
    {0xeef8366b,0x7c8d,0x448b,{0x99,0x44,0xbe,0x63,0xe8,0x2c,0x15,0x43}};
extern "C" const GUID __declspec(selectany) IID_IToleranceParam =
    {0x46e2f216,0x6bce,0x4863,{0x9d,0xdc,0xcc,0x08,0xdc,0x00,0x16,0xf7}};
extern "C" const GUID __declspec(selectany) IID_IContourSegment =
    {0xaa485b32,0xff45,0x4035,{0xbf,0xc4,0xae,0xe5,0x4e,0x63,0x83,0x44}};
extern "C" const GUID __declspec(selectany) IID_IContourLineSegment =
    {0xfb2432f1,0x8ae7,0x4d43,{0xaf,0xf2,0xa3,0xa3,0xbe,0x22,0x6c,0xfa}};
extern "C" const GUID __declspec(selectany) IID_IContourArc =
    {0xed4a6d97,0x4543,0x4842,{0xb2,0xc3,0x97,0x3f,0xb0,0xe9,0x0e,0x87}};
extern "C" const GUID __declspec(selectany) IID_IAnnotativeContainer =
    {0xae6c238c,0x4398,0x4057,{0x9d,0x28,0xd2,0x75,0x95,0x4d,0x95,0x06}};
extern "C" const GUID __declspec(selectany) IID_ICurveCopyObjectParam =
    {0x12b52a99,0xff5f,0x4c08,{0x9e,0x5e,0xdf,0x7c,0x7a,0xd8,0x34,0xa8}};
extern "C" const GUID __declspec(selectany) IID_ICircleCopyObjectParam =
    {0x138d1202,0xca46,0x4db3,{0xbf,0x2b,0x85,0xd2,0x60,0xe4,0x43,0x55}};
extern "C" const GUID __declspec(selectany) IID_INurbsByPoints =
    {0x7e553465,0x7c0d,0x4e35,{0xb6,0x30,0xd7,0xa5,0x4c,0xd4,0xfc,0x2f}};
extern "C" const GUID __declspec(selectany) IID_ITextDocumentSection =
    {0xa64be069,0x8fcb,0x43f1,{0xab,0x34,0x99,0x74,0xdc,0x7f,0xcf,0x5f}};
extern "C" const GUID __declspec(selectany) IID_ITextDocumentSectionsManager =
    {0xeeb71f69,0x1c0f,0x4e73,{0x9d,0x20,0x52,0x36,0x97,0x21,0x5e,0x0b}};
extern "C" const GUID __declspec(selectany) IID_IExternalTessellationObject =
    {0x9d5cde37,0x7833,0x4359,{0xb2,0x5a,0xfe,0x70,0x11,0xea,0x77,0x1a}};
extern "C" const GUID __declspec(selectany) IID_IExternalGDIObject =
    {0xc234e81d,0x4232,0x41fd,{0x98,0x0d,0x8e,0x7e,0x6e,0xa7,0xb7,0x33}};
extern "C" const GUID __declspec(selectany) IID_IExternalTessellationManager =
    {0xdc21f3d3,0xffa6,0x4274,{0xa9,0x76,0x79,0xf3,0x47,0x29,0xb8,0x66}};
extern "C" const GUID __declspec(selectany) IID_ICircularCopyObjectParam =
    {0xa5b8e337,0xee84,0x4eec,{0x82,0x35,0xa8,0x12,0xfd,0xd6,0xc2,0xde}};
extern "C" const GUID __declspec(selectany) IID_IMeshCopyObjectParam =
    {0x592ab214,0xa8cf,0x462e,{0xac,0xd5,0x52,0x88,0x39,0x11,0x33,0x38}};
extern "C" const GUID __declspec(selectany) IID_IPropertyOpticalProps =
    {0xe1ac2948,0x6191,0x4240,{0x85,0xf4,0x5a,0x32,0x32,0x1e,0x9d,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITablePattern =
    {0xefe5b123,0x174f,0x4cb0,{0xae,0x85,0x7f,0x29,0x1f,0xa8,0xae,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IModelObject1 =
    {0x60ddc74b,0x8171,0x4ba6,{0xab,0xd9,0x54,0x9f,0xba,0x84,0xe7,0xb0}};
extern "C" const GUID __declspec(selectany) IID_IPropertyLinkButton =
    {0x4be1ac9d,0x61f2,0x4305,{0x95,0xd5,0x2e,0xd6,0xc2,0xb2,0x1a,0x6a}};
extern "C" const GUID __declspec(selectany) IID_IProductDataManager =
    {0x468578bc,0xbeaf,0x4053,{0xae,0xd9,0x4e,0x10,0xc4,0x83,0x05,0xc1}};
extern "C" const GUID __declspec(selectany) IID_IMeshObject3D =
    {0x619a7499,0x13da,0x4c43,{0xad,0x1b,0x53,0xac,0xaa,0x4b,0xa5,0xb4}};
extern "C" const GUID __declspec(selectany) IID_IZoneParametersByBorderPoints =
    {0xc24eb4cb,0xce63,0x4130,{0xae,0x76,0x86,0xde,0x33,0xa8,0xdd,0xd0}};
extern "C" const GUID __declspec(selectany) IID_IDynamicCrossSectionStepParametersByBorderPoints =
    {0xd8a8bcbb,0xe337,0x431b,{0xac,0x37,0x07,0x00,0x72,0x17,0x19,0x0b}};
extern "C" const GUID __declspec(selectany) IID_IProcessWithVariables =
    {0x23a5dfee,0x5e95,0x4f8d,{0x9c,0xae,0x80,0x5e,0x70,0x7f,0x1e,0xf8}};
extern "C" const GUID __declspec(selectany) IID_ILineSegmentAndPointDimension =
    {0x70b41905,0x610e,0x4340,{0x82,0x39,0x57,0x17,0xaa,0xb0,0xfb,0x2d}};
extern "C" const GUID __declspec(selectany) IID_IAdditionConvertParameters =
    {0x544803be,0x9cf8,0x4c45,{0xb7,0x6f,0x55,0x4c,0xcf,0xd3,0x5f,0xb4}};
extern "C" const GUID __declspec(selectany) IID_IApplication =
    {0x6a2efaf7,0x8254,0x45a5,{0x9d,0xc8,0x22,0x13,0xf1,0x6a,0xf5,0xd7}};
extern "C" const GUID __declspec(selectany) IID_IDocuments =
    {0x8bf39f08,0x5537,0x4910,{0x84,0xce,0xb3,0x38,0xe5,0x5f,0x7b,0xcf}};
extern "C" const GUID __declspec(selectany) IID_IKompasDocument =
    {0x5c6e318d,0xbd6e,0x4afa,{0x8a,0x13,0x97,0x7e,0xaa,0x08,0x45,0xef}};
extern "C" const GUID __declspec(selectany) IID_IInsert =
    {0xd6a6d305,0x6b5c,0x4392,{0xb6,0x1d,0xd6,0x69,0xc0,0x92,0xee,0xf2}};
extern "C" const GUID __declspec(selectany) IID_IInserts =
    {0xfcbf6340,0x119d,0x4736,{0xbb,0x95,0xf1,0xea,0xb4,0xbe,0xf1,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IInsertsLibrary =
    {0x885cad68,0xb42b,0x45cf,{0x86,0x20,0xe0,0x13,0x85,0x58,0xef,0xe3}};
extern "C" const GUID __declspec(selectany) IID_IInsertsLibraries =
    {0xa6e82d68,0x69d5,0x40c0,{0x9a,0x85,0x27,0x5b,0x22,0x21,0x91,0x35}};
extern "C" const GUID __declspec(selectany) IID_ILibraryManager =
    {0x53cdc510,0x99ea,0x4736,{0x85,0x42,0x19,0x4f,0x4d,0x8f,0xb3,0x2b}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationDocument =
    {0xe3fa8fd0,0x6187,0x4625,{0x89,0xb7,0x3c,0x81,0x56,0x51,0x94,0x4d}};
extern "C" const GUID __declspec(selectany) IID_ITextDocument =
    {0x71a589ea,0xd32f,0x42c4,{0xbb,0xc4,0xa5,0x16,0x11,0xe8,0x5e,0x90}};
extern "C" const GUID __declspec(selectany) IID_IReport =
    {0x37fd3c77,0x6032,0x4459,{0x95,0xe9,0xc8,0xdf,0xc4,0x3b,0x85,0xff}};
extern "C" const GUID __declspec(selectany) IID_IPropertyMng =
    {0xfd515235,0x4dba,0x4f81,{0x8d,0x5c,0x6f,0xe8,0x7c,0x83,0x45,0x62}};
extern "C" const GUID __declspec(selectany) IID_IAssociationTable =
    {0x44f0752e,0xe25b,0x4896,{0x95,0xb4,0x63,0x76,0xac,0x23,0xa2,0xa9}};
extern "C" const GUID __declspec(selectany) IID_IAssociationTables =
    {0x96f02f01,0x04e1,0x44d1,{0x99,0x74,0x48,0x33,0x0e,0xbe,0x80,0x1b}};
extern "C" const GUID __declspec(selectany) IID_ISymbols2DContainer =
    {0xf46b0086,0x17f2,0x4489,{0xa5,0xa7,0x0a,0xa6,0x77,0x61,0x0a,0xfd}};
extern "C" const GUID __declspec(selectany) IID_IApplicationServises =
    {0xee36cadb,0x07d1,0x457a,{0x8d,0x7c,0x1d,0x2d,0x4b,0x24,0x0c,0xf3}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationDescriptions =
    {0xb9632c5c,0x86e1,0x4bc9,{0x83,0xa5,0xa9,0x54,0xe4,0x07,0x24,0x6a}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationDescription =
    {0x9678959e,0x166b,0x45f3,{0xbd,0xe8,0x88,0xbb,0xf4,0x64,0x5f,0x5c}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationBaseObjects =
    {0xb2b97d19,0x3a0b,0x4c9f,{0xa6,0xac,0xde,0xff,0xaf,0xe0,0xd1,0xc2}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationBaseObject =
    {0x49994ed8,0x96ba,0x4d9d,{0xb6,0x42,0x5f,0x0f,0x1e,0x3f,0xed,0x16}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationCommentObject =
    {0x3b6b80ca,0x2145,0x4184,{0xb7,0x86,0x0c,0x57,0x1d,0xf5,0xac,0xd7}};
extern "C" const GUID __declspec(selectany) IID_ISpecificationCommentObjects =
    {0xb8bd0fc7,0xab2b,0x4e7a,{0x8e,0xc2,0x82,0x06,0x0d,0x7d,0x29,0xa7}};
extern "C" const GUID __declspec(selectany) IID_IKompasDocument2D =
    {0x096e62b3,0x7184,0x4998,{0x99,0x25,0x74,0xbb,0x71,0x0d,0x8d,0x8e}};
extern "C" const GUID __declspec(selectany) IID_IDrawingDocument =
    {0xc2214318,0x5c89,0x40f8,{0xa2,0x5c,0xc8,0x7d,0x08,0xb4,0x90,0xf4}};
extern "C" const GUID __declspec(selectany) IID_IFragmentDocument =
    {0xe19ce626,0xdf9c,0x48c4,{0xa8,0x3d,0x3e,0x3b,0xc7,0xf0,0xda,0xca}};
extern "C" const GUID __declspec(selectany) IID_IInsertionDefinition =
    {0x66907239,0x09ba,0x4456,{0xac,0x9a,0x31,0x88,0x04,0x09,0x96,0x28}};
extern "C" const GUID __declspec(selectany) IID_IInsertionParameters =
    {0x1db65c7e,0x535e,0x489e,{0x8f,0x34,0x84,0xdf,0x7f,0xba,0x09,0xb2}};
extern "C" const GUID __declspec(selectany) IID_ISketch =
    {0xe6bbf50d,0x8401,0x4fb3,{0xa6,0xb6,0x15,0x3d,0x3f,0x44,0x72,0x55}};
extern "C" const GUID __declspec(selectany) IID_ISketchs =
    {0xee562963,0x395c,0x4748,{0x97,0x26,0xfc,0xa9,0xc5,0x31,0xb1,0xca}};
extern "C" const GUID __declspec(selectany) IID_IExtrusion =
    {0x0d7ffe70,0x33eb,0x442c,{0xa9,0xb6,0xa2,0x05,0xea,0x85,0xa2,0x37}};
extern "C" const GUID __declspec(selectany) IID_IExtrusions =
    {0xa160c032,0xcf96,0x4467,{0xa6,0x82,0xce,0x22,0x43,0xdf,0x76,0xbd}};
extern "C" const GUID __declspec(selectany) IID_IRib =
    {0x2d8e1f2b,0x1610,0x4aa5,{0x8f,0x7f,0xed,0x48,0x9c,0x4e,0xde,0xdc}};
extern "C" const GUID __declspec(selectany) IID_IRibs =
    {0x70ff934f,0xd7a2,0x4d91,{0xab,0x55,0x27,0x17,0x4e,0x90,0x64,0x8b}};
extern "C" const GUID __declspec(selectany) IID_ICutExtrusion =
    {0xd2a01420,0x9159,0x48c2,{0x83,0x02,0xc1,0xb1,0x0a,0x13,0xd8,0xf8}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalBody =
    {0x2dc533dc,0x829e,0x4eff,{0xa9,0x05,0x54,0x1e,0x92,0x20,0xa1,0x2d}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalBodies =
    {0xf56dbe72,0x48cc,0x48ad,{0x9d,0xa4,0x10,0xd9,0x72,0xc9,0x03,0xee}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalHole =
    {0x3490b8b8,0x00d7,0x4bcf,{0xaa,0xd8,0x94,0x87,0xbf,0x27,0x10,0x84}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalHoles =
    {0xe117bdf9,0x5133,0x4672,{0x9b,0x8f,0x06,0x04,0x6f,0x6b,0x9b,0xf3}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalCut =
    {0xb50b1730,0xbacf,0x46f2,{0xb1,0x0a,0x6c,0xcd,0xf4,0xe4,0xa2,0xb1}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalCuts =
    {0x9515e4bb,0x7c60,0x4c3a,{0xaf,0x7a,0x84,0x78,0x61,0xe6,0x7b,0x55}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalContainer =
    {0x77a4895d,0x9b09,0x4c63,{0xa3,0xff,0x68,0x57,0xf4,0x34,0x08,0x40}};
extern "C" const GUID __declspec(selectany) IID_ISplitLine =
    {0x969b49d1,0xe660,0x4e94,{0x93,0x43,0xde,0x5b,0x0f,0x39,0x7b,0x03}};
extern "C" const GUID __declspec(selectany) IID_ISplitLines =
    {0x986e4a45,0x362f,0x469d,{0xa3,0xae,0xce,0x08,0x1b,0x8e,0xa9,0x3a}};
extern "C" const GUID __declspec(selectany) IID_ISpiral3D =
    {0x8c428c5d,0x37ef,0x43a3,{0x88,0x15,0x41,0x0f,0x17,0x7d,0x35,0x77}};
extern "C" const GUID __declspec(selectany) IID_ISpirals3D =
    {0xafa7329d,0xe69c,0x4980,{0xb3,0xb3,0x8a,0x2a,0xa3,0x9d,0xe9,0x79}};
extern "C" const GUID __declspec(selectany) IID_IAuxiliaryGeomContainer =
    {0x950febe2,0xf916,0x4e77,{0xa3,0x7d,0xb0,0x61,0xe5,0xc2,0x2f,0xa8}};
extern "C" const GUID __declspec(selectany) IID_ISurfaceContainer =
    {0x2fe3b199,0xa6b2,0x4644,{0x99,0x50,0xf9,0x90,0x52,0x50,0xff,0x0d}};
extern "C" const GUID __declspec(selectany) IID_IExtrusionSurface =
    {0xb505b91c,0x3444,0x4f7d,{0xb9,0x87,0x5b,0xb5,0x54,0x93,0x23,0x62}};
extern "C" const GUID __declspec(selectany) IID_IConicSpiral3D =
    {0x086df000,0xa37d,0x4296,{0x93,0xfb,0x21,0x29,0xd0,0xb1,0xdf,0x13}};
extern "C" const GUID __declspec(selectany) IID_ICylindricSpiral3D =
    {0x529de4b2,0x3130,0x4c96,{0xb2,0x30,0x32,0xdb,0x10,0x0b,0xcf,0xac}};
extern "C" const GUID __declspec(selectany) IID_IInsertionObject =
    {0xb9e9ce68,0x371d,0x4600,{0x92,0x33,0x84,0xd8,0x9a,0x01,0x5c,0x55}};
extern "C" const GUID __declspec(selectany) IID_IInsertionObjects =
    {0xc485550b,0x29e3,0x4f2a,{0xa8,0x5c,0xc2,0x79,0x5e,0x0f,0x1f,0x86}};
extern "C" const GUID __declspec(selectany) IID_IDrawingContainer =
    {0xd603fec9,0x75b7,0x4fa5,{0x91,0x8f,0x47,0x07,0x4c,0x45,0xb8,0x48}};
extern "C" const GUID __declspec(selectany) IID_IInsertionFragment =
    {0x3d99b82c,0xcd88,0x406d,{0xa9,0x46,0x2d,0x8c,0x8e,0x94,0xee,0x73}};
extern "C" const GUID __declspec(selectany) IID_IInsertionView =
    {0x0c8fc5a9,0x57a8,0x4971,{0x8e,0x6c,0x68,0x93,0x32,0x69,0xd4,0x2e}};
extern "C" const GUID __declspec(selectany) IID_IInsertionsManager =
    {0xb43fa13a,0x9488,0x422c,{0xa9,0xf3,0xd2,0x79,0xfd,0xa2,0x96,0xbb}};
extern "C" const GUID __declspec(selectany) IID_ISheetMetalLinearRuledShell =
    {0x934bcc92,0xbc49,0x4a46,{0x9a,0x88,0x70,0xfd,0x2e,0x74,0x53,0x7d}};
extern "C" const GUID __declspec(selectany) IID_IViewsAndLayersManager =
    {0xa4737593,0x578b,0x4187,{0x8c,0xad,0xe1,0x05,0x6e,0xb5,0x40,0x4b}};
extern "C" const GUID __declspec(selectany) IID_ILayerGroups =
    {0xdbff6d98,0x8f79,0x453e,{0x9b,0x8b,0x81,0xe4,0x0a,0x6d,0x80,0x27}};
extern "C" const GUID __declspec(selectany) IID_ILayerGroup =
    {0x265bbb5a,0x7b8a,0x4aa5,{0xa0,0xbb,0xff,0x64,0xd2,0x3b,0xe6,0x2b}};
extern "C" const GUID __declspec(selectany) IID_IKompasDocument3D =
    {0x7b60e769,0x06c3,0x4fdc,{0x96,0x77,0x7b,0x5e,0xf5,0x18,0x03,0x08}};
extern "C" const GUID __declspec(selectany) IID_IPartDocument =
    {0x0075ea2a,0x5498,0x4e28,{0xbd,0xf3,0x02,0x88,0xeb,0x16,0x80,0x54}};
extern "C" const GUID __declspec(selectany) IID_IAssemblyDocument =
    {0xf6b3f33a,0x3273,0x43ef,{0x9b,0x8a,0x7c,0x0a,0xf8,0xfa,0xa1,0x29}};
extern "C" const GUID __declspec(selectany) IID_IAssociationView =
    {0x0825f23c,0x0a73,0x48de,{0xbe,0xab,0xda,0x2f,0xf3,0x99,0x62,0xc3}};
extern "C" const GUID __declspec(selectany) IID_ICopyGeometry =
    {0x63e5636b,0x0661,0x4635,{0xa9,0x02,0x6e,0x87,0x27,0xe7,0x5d,0x93}};
extern "C" const GUID __declspec(selectany) IID_ICopiesGeometry =
    {0x6cc5e3b7,0xb509,0x4b8e,{0x87,0xd1,0x0b,0x93,0x60,0x10,0x12,0x0c}};
extern "C" const GUID __declspec(selectany) IID_IModelContainer =
    {0x2c6e8a0f,0xedc8,0x413c,{0x93,0x04,0x92,0x78,0x81,0x7b,0x91,0x5b}};
extern "C" const GUID __declspec(selectany) IID_IPart7 =
    {0xfa4a5fde,0xa08c,0x4f5a,{0x8c,0x04,0x98,0x39,0x5b,0xa4,0x43,0x07}};
extern "C" const GUID __declspec(selectany) IID_IParts7 =
    {0x42f8fcef,0xe56f,0x466c,{0x88,0x14,0xbe,0xba,0xc0,0x71,0x9a,0xe6}};
extern "C" const GUID __declspec(selectany) IID_IEmbodiment =
    {0x83dbb66a,0x83b8,0x47d9,{0x93,0xfe,0x2a,0x90,0x99,0x21,0x93,0xe8}};
extern "C" const GUID __declspec(selectany) IID_IEmbodimentsManager =
    {0xc1948ce8,0x0933,0x4d75,{0x94,0x46,0x3e,0x14,0x39,0x28,0xd0,0x45}};
extern "C" const GUID __declspec(selectany) IID_IMate3DDependentPosition =
    {0x698a8f34,0x5759,0x4fec,{0xaf,0xef,0xc8,0xb2,0x9d,0x07,0x2e,0x12}};
extern "C" const GUID __declspec(selectany) IID_IKompasDocument3D1 =
    {0x92ab02f7,0x2c68,0x4a74,{0x9e,0x74,0x70,0xc5,0x1e,0x01,0x5f,0xef}};
extern "C" const GUID __declspec(selectany) IID_IDocument3DManager =
    {0x75f1ca7e,0x5071,0x4c1f,{0x8a,0x9f,0xf7,0x6a,0x6e,0x05,0xca,0xf6}};
extern "C" const GUID __declspec(selectany) IID_ILayerGroups3D =
    {0xd3f08d03,0x3bb2,0x4de6,{0x95,0xa9,0x38,0xb5,0xc0,0x5d,0x8c,0x12}};
extern "C" const GUID __declspec(selectany) IID_ILayerGroup3D =
    {0x0b176bbc,0x51f5,0x4d31,{0xa6,0x30,0x6a,0x04,0x20,0x7e,0x4d,0xa1}};
extern "C" const GUID __declspec(selectany) IID_IBuildingAxis =
    {0x123c45bf,0x14de,0x433e,{0xb3,0xb0,0x2f,0xb6,0x42,0xa9,0xa4,0x18}};
extern "C" const GUID __declspec(selectany) IID_IBuildingAxes =
    {0x18072e1d,0x1802,0x41f5,{0xa4,0x34,0x04,0xbb,0x9d,0x3f,0x15,0x7f}};
extern "C" const GUID __declspec(selectany) IID_IBuildingContainer =
    {0xfd1fd236,0xf5ba,0x4fb0,{0xa8,0x72,0x21,0xfc,0x13,0xe6,0x89,0x5f}};
extern "C" const GUID __declspec(selectany) IID_IMarkNode =
    {0x5ac48e97,0x80b1,0x459f,{0x97,0x09,0x1f,0x3f,0x37,0x45,0x59,0xbe}};
extern "C" const GUID __declspec(selectany) IID_IMarkNodes =
    {0xeb8acd77,0x8008,0x4f89,{0xa3,0x11,0x2f,0x47,0x12,0x46,0x2f,0x72}};
extern "C" const GUID __declspec(selectany) IID_IStraightAxis =
    {0x7b2820e0,0x2cb7,0x4412,{0x9b,0x96,0xf2,0x91,0xdd,0x79,0x04,0x48}};
extern "C" const GUID __declspec(selectany) IID_IArcAxis =
    {0xdaa9755a,0x3971,0x4713,{0xb2,0x81,0x15,0x99,0x5c,0xbf,0x2e,0x56}};
extern "C" const GUID __declspec(selectany) IID_ICircleAxis =
    {0xd84358fb,0x674c,0x4a5d,{0x93,0xba,0xee,0x5d,0x33,0x42,0x09,0x7b}};

//
// Function implementation mapping
//

#pragma start_map_region("C:\Users\Ivan\source\repos\volume_extension\volume_extension\x64\Debug\kapi7.tli")
__declspec(implementation_key(1)) _bstr_t ISaveAsDetailParam::GetFileName ( );
__declspec(implementation_key(2)) void ISaveAsDetailParam::PutFileName ( _bstr_t Result );
__declspec(implementation_key(3)) _bstr_t ISaveAsDetailParam::GetName ( );
__declspec(implementation_key(4)) void ISaveAsDetailParam::PutName ( _bstr_t Result );
__declspec(implementation_key(5)) _bstr_t ISaveAsDetailParam::GetMarking ( );
__declspec(implementation_key(6)) void ISaveAsDetailParam::PutMarking ( _bstr_t Result );
__declspec(implementation_key(7)) void ISaveAsDetailParam::PutLocal ( VARIANT_BOOL PVal );
__declspec(implementation_key(8)) VARIANT_BOOL ISaveAsDetailParam::GetLocal ( );
__declspec(implementation_key(9)) VARIANT_BOOL ISaveAsDetailParam::GetLayoutGeometry ( );
__declspec(implementation_key(10)) void ISaveAsDetailParam::PutLayoutGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(11)) VARIANT_BOOL ISaveAsDetailParam::GetUnhistored ( );
__declspec(implementation_key(12)) void ISaveAsDetailParam::PutUnhistored ( VARIANT_BOOL PVal );
__declspec(implementation_key(13)) VARIANT_BOOL ISaveAsDetailParam::GetMirror ( );
__declspec(implementation_key(14)) void ISaveAsDetailParam::PutMirror ( VARIANT_BOOL PVal );
__declspec(implementation_key(15)) void ISaveAsDetailParam::PutSaveInitialObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(16)) VARIANT_BOOL ISaveAsDetailParam::GetSaveInitialObjects ( );
__declspec(implementation_key(17)) long IHatchParam::GetStyle ( );
__declspec(implementation_key(18)) void IHatchParam::PutStyle ( long Result );
__declspec(implementation_key(19)) long IHatchParam::GetHatchColor ( );
__declspec(implementation_key(20)) void IHatchParam::PutHatchColor ( long Result );
__declspec(implementation_key(21)) double IHatchParam::GetStep ( );
__declspec(implementation_key(22)) void IHatchParam::PutStep ( double Result );
__declspec(implementation_key(23)) double IHatchParam::GetHatchAngle ( );
__declspec(implementation_key(24)) void IHatchParam::PutHatchAngle ( double Result );
__declspec(implementation_key(25)) VARIANT_BOOL IHatchParam::GetHatchType ( );
__declspec(implementation_key(26)) void IHatchParam::PutHatchType ( VARIANT_BOOL Result );
__declspec(implementation_key(27)) double IHatchParam::GetWidth ( );
__declspec(implementation_key(28)) void IHatchParam::PutWidth ( double Result );
__declspec(implementation_key(29)) VARIANT_BOOL IHatchParam::GetIsSheetAngle ( );
__declspec(implementation_key(30)) void IHatchParam::PutIsSheetAngle ( VARIANT_BOOL Result );
__declspec(implementation_key(31)) _bstr_t IHatchParam::GetHatchFileName ( );
__declspec(implementation_key(32)) double IHatchParam::GetLibraryStyleNumber ( );
__declspec(implementation_key(33)) VARIANT_BOOL IHatchParam::AddStyleFromLibrary ( _bstr_t FileName, double StyleNumber );
__declspec(implementation_key(34)) VARIANT_BOOL IDimensionParams::GetRemoteLine1 ( );
__declspec(implementation_key(35)) void IDimensionParams::PutRemoteLine1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(36)) VARIANT_BOOL IDimensionParams::GetRemoteLine2 ( );
__declspec(implementation_key(37)) void IDimensionParams::PutRemoteLine2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(38)) enum ksArrowEnum IDimensionParams::GetArrowType1 ( );
__declspec(implementation_key(39)) void IDimensionParams::PutArrowType1 ( enum ksArrowEnum PVal );
__declspec(implementation_key(40)) enum ksArrowEnum IDimensionParams::GetArrowType2 ( );
__declspec(implementation_key(41)) void IDimensionParams::PutArrowType2 ( enum ksArrowEnum PVal );
__declspec(implementation_key(42)) enum ksDimensionArrowPosEnum IDimensionParams::GetArrowPos ( );
__declspec(implementation_key(43)) void IDimensionParams::PutArrowPos ( enum ksDimensionArrowPosEnum PVal );
__declspec(implementation_key(44)) long IDimensionParams::GetTextPos ( );
__declspec(implementation_key(45)) void IDimensionParams::PutTextPos ( long PVal );
__declspec(implementation_key(46)) enum ksDimensionTextTypeEnum IDimensionParams::GetTextType ( );
__declspec(implementation_key(47)) void IDimensionParams::PutTextType ( enum ksDimensionTextTypeEnum PVal );
__declspec(implementation_key(48)) enum ksDimensionTextPosEnum IDimensionParams::GetTextOnLine ( );
__declspec(implementation_key(49)) void IDimensionParams::PutTextOnLine ( enum ksDimensionTextPosEnum PVal );
__declspec(implementation_key(50)) enum ksDimensionBaseEnum IDimensionParams::GetTextBase ( );
__declspec(implementation_key(51)) void IDimensionParams::PutTextBase ( enum ksDimensionBaseEnum PVal );
__declspec(implementation_key(52)) enum ksShelfDirectionEnum IDimensionParams::GetShelfDirection ( );
__declspec(implementation_key(53)) void IDimensionParams::PutShelfDirection ( enum ksShelfDirectionEnum PVal );
__declspec(implementation_key(54)) double IDimensionParams::GetShelfAngle ( );
__declspec(implementation_key(55)) void IDimensionParams::PutShelfAngle ( double PVal );
__declspec(implementation_key(56)) double IDimensionParams::GetShelfLength ( );
__declspec(implementation_key(57)) void IDimensionParams::PutShelfLength ( double PVal );
__declspec(implementation_key(58)) VARIANT_BOOL IDimensionParams::GetGap ( );
__declspec(implementation_key(59)) void IDimensionParams::PutGap ( VARIANT_BOOL PVal );
__declspec(implementation_key(60)) long IDimensionParams::GetGapValue ( );
__declspec(implementation_key(61)) void IDimensionParams::PutGapValue ( long PVal );
__declspec(implementation_key(62)) VARIANT_BOOL IDimensionParams::InitDefaultValues ( );
__declspec(implementation_key(63)) VARIANT_BOOL ILoadCombination::GetCompletelyLoaded ( );
__declspec(implementation_key(64)) _variant_t ILoadCombination::GetLoadCombinations ( );
__declspec(implementation_key(65)) long ILoadCombination::GetCurrentIndex ( );
__declspec(implementation_key(66)) long ILoadCombination::Create ( _bstr_t CombinationName );
__declspec(implementation_key(67)) VARIANT_BOOL ILoadCombination::Delete ( const _variant_t & LoadCombinationIndex );
__declspec(implementation_key(68)) VARIANT_BOOL ILoadCombination::Apply ( const _variant_t & LoadCombinationIndex );
__declspec(implementation_key(69)) VARIANT_BOOL ILoadCombination::DeleteEx ( const _variant_t & LoadCombinationIndex, _bstr_t Password, VARIANT_BOOL DeleteDependant );
__declspec(implementation_key(70)) VARIANT_BOOL ILoadCombination::ApplyEx ( const _variant_t & LoadCombinationIndex, _bstr_t Password );
__declspec(implementation_key(71)) VARIANT_BOOL ILoadCombination::SetPassword ( const _variant_t & LoadCombinationIndex, _bstr_t OldPassword, _bstr_t Password, VARIANT_BOOL UnprotectUsers );
__declspec(implementation_key(72)) VARIANT_BOOL ILoadCombination::UpdateByModel ( const _variant_t & LoadCombinationIndex, _bstr_t Password );
__declspec(implementation_key(73)) VARIANT_BOOL ILoadCombination::SetLoadCombinationComment ( const _variant_t & LoadCombinationIndex, _bstr_t NewVal, _bstr_t Password );
__declspec(implementation_key(74)) _bstr_t ILoadCombination::GetLoadCombinationComment ( const _variant_t & LoadCombinationIndex );
__declspec(implementation_key(75)) VARIANT_BOOL ILoadCombination::SetLoadCombinationName ( const _variant_t & LoadCombinationIndex, _bstr_t NewVal, _bstr_t Password );
__declspec(implementation_key(76)) _bstr_t ILoadCombination::GetLoadCombinationName ( const _variant_t & LoadCombinationIndex );
__declspec(implementation_key(77)) _variant_t ILoadCombination::GetProtectedFlags ( );
__declspec(implementation_key(78)) void ILoadCombination::PutCurrentIndex ( long Value );
__declspec(implementation_key(79)) IDispatchPtr IFrameTreesManager::AddTab ( _bstr_t TabCaption, _bstr_t OcxClassID );
__declspec(implementation_key(80)) VARIANT_BOOL IFrameTreesManager::RemoveTab ( IDispatch * Ocx );
__declspec(implementation_key(81)) IDispatchPtr IFrameTreesManager::GetActiveTab ( );
__declspec(implementation_key(82)) void IFrameTreesManager::PutActiveTab ( IDispatch * Ocx );
__declspec(implementation_key(83)) VARIANT_BOOL IFrameTreesManager::GetTabsVisible ( );
__declspec(implementation_key(84)) void IFrameTreesManager::PutTabsVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(85)) _bstr_t IFrameTreesManager::GetTreeCaption ( IDispatch * Ocx );
__declspec(implementation_key(86)) void IFrameTreesManager::PutTreeCaption ( IDispatch * Ocx, _bstr_t PVal );
__declspec(implementation_key(87)) IDispatchPtr IFrameTreesManager::AddTabEx ( _bstr_t TabCaption, _bstr_t TreeCaption, _bstr_t OcxClassID, VARIANT_BOOL Active, enum PropertyManagerLayout Layout );
__declspec(implementation_key(88)) VARIANT_BOOL IFrameTreesManager::GetTabVisible ( IDispatch * Ocx );
__declspec(implementation_key(89)) void IFrameTreesManager::PutTabVisible ( IDispatch * Ocx, VARIANT_BOOL PVal );
__declspec(implementation_key(90)) void IPrintJob_OutputParameters::PutNumberOfCopies ( long PVal );
__declspec(implementation_key(91)) long IPrintJob_OutputParameters::GetNumberOfCopies ( );
__declspec(implementation_key(92)) void IPrintJob_OutputParameters::PutCollateCopies ( VARIANT_BOOL PVal );
__declspec(implementation_key(93)) VARIANT_BOOL IPrintJob_OutputParameters::GetCollateCopies ( );
__declspec(implementation_key(94)) void IPrintJob_OutputParameters::PutPlotToFile ( VARIANT_BOOL PVal );
__declspec(implementation_key(95)) VARIANT_BOOL IPrintJob_OutputParameters::GetPlotToFile ( );
__declspec(implementation_key(96)) void IPrintJob_OutputParameters::PutColor ( enum ksOutputColorTypeEnum PVal );
__declspec(implementation_key(97)) enum ksOutputColorTypeEnum IPrintJob_OutputParameters::GetColor ( );
__declspec(implementation_key(98)) void IPrintJob_OutputParameters::PutOnlyThinLines ( VARIANT_BOOL PVal );
__declspec(implementation_key(99)) VARIANT_BOOL IPrintJob_OutputParameters::GetOnlyThinLines ( );
__declspec(implementation_key(100)) void IPrintJob_OutputParameters::PutAlternativeFillingOutput ( VARIANT_BOOL PVal );
__declspec(implementation_key(101)) VARIANT_BOOL IPrintJob_OutputParameters::GetAlternativeFillingOutput ( );
__declspec(implementation_key(102)) void IPrintJob_OutputParameters::PutAccuracyModelOutput ( long PVal );
__declspec(implementation_key(103)) long IPrintJob_OutputParameters::GetAccuracyModelOutput ( );
__declspec(implementation_key(104)) void IPrintJob_OutputParameters::PutPageOutputOrder ( long PVal );
__declspec(implementation_key(105)) long IPrintJob_OutputParameters::GetPageOutputOrder ( );
__declspec(implementation_key(106)) void IPrintJob_OutputParameters::PutDefaultScale ( double PVal );
__declspec(implementation_key(107)) double IPrintJob_OutputParameters::GetDefaultScale ( );
__declspec(implementation_key(108)) void IPrintJob_OutputParameters::PutAutoScale ( VARIANT_BOOL PVal );
__declspec(implementation_key(109)) VARIANT_BOOL IPrintJob_OutputParameters::GetAutoScale ( );
__declspec(implementation_key(110)) void IPrintJob_OutputParameters::PutUseCatchSpacing ( VARIANT_BOOL PVal );
__declspec(implementation_key(111)) VARIANT_BOOL IPrintJob_OutputParameters::GetUseCatchSpacing ( );
__declspec(implementation_key(112)) void IPrintJob_OutputParameters::PutCatchSpacing ( long PVal );
__declspec(implementation_key(113)) long IPrintJob_OutputParameters::GetCatchSpacing ( );
__declspec(implementation_key(114)) void IPrintJob_OutputParameters::PutUseHooking ( VARIANT_BOOL PVal );
__declspec(implementation_key(115)) VARIANT_BOOL IPrintJob_OutputParameters::GetUseHooking ( );
__declspec(implementation_key(116)) void IPrintJob_OutputParameters::PutHooking ( long PVal );
__declspec(implementation_key(117)) long IPrintJob_OutputParameters::GetHooking ( );
__declspec(implementation_key(118)) VARIANT_BOOL IPrintJob_PrinterSettings::InitPrinterSettings ( _bstr_t DeviceName, VARIANT_BOOL IsPortraitPage, long PaperSize, long PaperLength, long PaperWidth, long PaperSource );
__declspec(implementation_key(119)) _bstr_t IPrintJob_PrinterSettings::GetDeviceName ( );
__declspec(implementation_key(120)) _bstr_t IPrintJob_PrinterSettings::GetPort ( );
__declspec(implementation_key(121)) VARIANT_BOOL IPrintJob_PrinterSettings::LoadPrinterConfig ( _bstr_t FileName );
__declspec(implementation_key(122)) VARIANT_BOOL IPrintJob_PrinterSettings::SavePrinterConfig ( _bstr_t FileName );
__declspec(implementation_key(123)) void IPrintJob_PrinterSettings::PutIsPortraitPage ( VARIANT_BOOL PVal );
__declspec(implementation_key(124)) VARIANT_BOOL IPrintJob_PrinterSettings::GetIsPortraitPage ( );
__declspec(implementation_key(125)) void IPrintJob_PrinterSettings::PutPaperSize ( long PVal );
__declspec(implementation_key(126)) long IPrintJob_PrinterSettings::GetPaperSize ( );
__declspec(implementation_key(127)) void IPrintJob_PrinterSettings::PutPaperSource ( long PVal );
__declspec(implementation_key(128)) long IPrintJob_PrinterSettings::GetPaperSource ( );
__declspec(implementation_key(129)) void IPrintJob_PrinterSettings::PutPaperLength ( long PVal );
__declspec(implementation_key(130)) long IPrintJob_PrinterSettings::GetPaperLength ( );
__declspec(implementation_key(131)) void IPrintJob_PrinterSettings::PutPaperWidth ( long PVal );
__declspec(implementation_key(132)) long IPrintJob_PrinterSettings::GetPaperWidth ( );
__declspec(implementation_key(133)) enum ksPrinterTypeEnum IPrintJob_PrinterSettings::GetPrinterType ( );
__declspec(implementation_key(134)) void IPrintJob_PrinterSettings::PutPrinterType ( enum ksPrinterTypeEnum PVal );
__declspec(implementation_key(135)) VARIANT_BOOL ISaveToPreviusParam7::AddWarning ( _bstr_t UniqueId, _bstr_t OptionName, _bstr_t Text );
__declspec(implementation_key(136)) VARIANT_BOOL ISaveToPreviusParam7::AddOption ( _bstr_t UniqueId, _bstr_t OptionName, const _variant_t & Options, _bstr_t DefaultValue );
__declspec(implementation_key(137)) _bstr_t ISaveToPreviusParam7::GetCurrentOptionValue ( _bstr_t UniqueId );
__declspec(implementation_key(138)) VARIANT_BOOL IUserMetadataManager::CreateStorage ( _bstr_t ApplicationIID, _bstr_t ApplicationDescription, _bstr_t Version );
__declspec(implementation_key(139)) VARIANT_BOOL IUserMetadataManager::ExistStorage ( _bstr_t ApplicationIID );
__declspec(implementation_key(140)) VARIANT_BOOL IUserMetadataManager::DeleteStorage ( _bstr_t ApplicationIID );
__declspec(implementation_key(141)) _variant_t IUserMetadataManager::GetAllFilenames ( _bstr_t ApplicationIID );
__declspec(implementation_key(142)) _bstr_t IUserMetadataManager::GetStorageInfo ( _bstr_t ApplicationIID, _bstr_t ParameterName );
__declspec(implementation_key(143)) void IUserMetadataManager::PutStorageInfo ( _bstr_t ApplicationIID, _bstr_t ParameterName, _bstr_t Result );
__declspec(implementation_key(144)) VARIANT_BOOL IUserMetadataManager::DeleteFile ( _bstr_t ApplicationIID, _bstr_t StorageFileName );
__declspec(implementation_key(145)) VARIANT_BOOL IUserMetadataManager::IsExistFile ( _bstr_t ApplicationIID, _bstr_t StorageFileName );
__declspec(implementation_key(146)) VARIANT_BOOL IUserMetadataManager::AddFile ( _bstr_t ApplicationIID, _bstr_t SrcFileName, _bstr_t DestFileName, VARIANT_BOOL AllowReplacement, VARIANT_BOOL Compress );
__declspec(implementation_key(147)) VARIANT_BOOL IUserMetadataManager::ExtractFile ( _bstr_t ApplicationIID, _bstr_t SrcFileName, _bstr_t DestFileName, VARIANT_BOOL AllowReplacement );
__declspec(implementation_key(148)) double IIntervalVariable::GetFirstValue ( );
__declspec(implementation_key(149)) void IIntervalVariable::PutFirstValue ( double Result );
__declspec(implementation_key(150)) double IIntervalVariable::GetSecondValue ( );
__declspec(implementation_key(151)) void IIntervalVariable::PutSecondValue ( double Result );
__declspec(implementation_key(152)) long IReportFilter::GetConditionCount ( );
__declspec(implementation_key(153)) VARIANT_BOOL IReportFilter::GetCondition ( long Index, VARIANT * UniqId, enum ksReportFiltersTypeEnum * Type, VARIANT * Val );
__declspec(implementation_key(154)) VARIANT_BOOL IReportFilter::SetCondition ( long Index, const _variant_t & UniqId, enum ksReportFiltersTypeEnum Type, const _variant_t & Val );
__declspec(implementation_key(155)) VARIANT_BOOL IReportFilter::RemoveCondition ( long Index );
__declspec(implementation_key(156)) VARIANT_BOOL IReportFilter::Clear ( );
__declspec(implementation_key(157)) VARIANT_BOOL IReportObjectsFilter::GetModelObjects ( );
__declspec(implementation_key(158)) void IReportObjectsFilter::PutModelObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(159)) VARIANT_BOOL IReportObjectsFilter::GetInsertionViews ( );
__declspec(implementation_key(160)) void IReportObjectsFilter::PutInsertionViews ( VARIANT_BOOL PVal );
__declspec(implementation_key(161)) VARIANT_BOOL IReportObjectsFilter::GetInsertionFragments ( );
__declspec(implementation_key(162)) void IReportObjectsFilter::PutInsertionFragments ( VARIANT_BOOL PVal );
__declspec(implementation_key(163)) VARIANT_BOOL IReportObjectsFilter::GetMacroObjects2D ( );
__declspec(implementation_key(164)) void IReportObjectsFilter::PutMacroObjects2D ( VARIANT_BOOL PVal );
__declspec(implementation_key(165)) VARIANT_BOOL IReportObjectsFilter::GetParts ( );
__declspec(implementation_key(166)) void IReportObjectsFilter::PutParts ( VARIANT_BOOL PVal );
__declspec(implementation_key(167)) VARIANT_BOOL IReportObjectsFilter::GetLocalParts ( );
__declspec(implementation_key(168)) void IReportObjectsFilter::PutLocalParts ( VARIANT_BOOL PVal );
__declspec(implementation_key(169)) VARIANT_BOOL IReportObjectsFilter::GetBodies ( );
__declspec(implementation_key(170)) void IReportObjectsFilter::PutBodies ( VARIANT_BOOL PVal );
__declspec(implementation_key(171)) VARIANT_BOOL IReportObjectsFilter::GetViews ( );
__declspec(implementation_key(172)) void IReportObjectsFilter::PutViews ( VARIANT_BOOL PVal );
__declspec(implementation_key(173)) VARIANT_BOOL IReportObjectsFilter::GetSpecialInfoObjects ( );
__declspec(implementation_key(174)) void IReportObjectsFilter::PutSpecialInfoObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(175)) enum ksReportBuildingTypeEnum IReportParam::GetBuildingType ( );
__declspec(implementation_key(176)) void IReportParam::PutBuildingType ( enum ksReportBuildingTypeEnum PVal );
__declspec(implementation_key(177)) long IReportParam::GetLevelsCount ( );
__declspec(implementation_key(178)) void IReportParam::PutLevelsCount ( long PVal );
__declspec(implementation_key(179)) enum ksPageLayoutTypeEnum IReportParam::GetPageLayoutType ( );
__declspec(implementation_key(180)) void IReportParam::PutPageLayoutType ( enum ksPageLayoutTypeEnum PVal );
__declspec(implementation_key(181)) long IReportParam::GetPagesRowsCount ( );
__declspec(implementation_key(182)) void IReportParam::PutPagesRowsCount ( long PVal );
__declspec(implementation_key(183)) long IReportParam::GetPagesColumnsCount ( );
__declspec(implementation_key(184)) void IReportParam::PutPagesColumnsCount ( long PVal );
__declspec(implementation_key(185)) double IReportParam::GetPagesSpace ( );
__declspec(implementation_key(186)) void IReportParam::PutPagesSpace ( double PVal );
__declspec(implementation_key(187)) VARIANT_BOOL IReportParam::GetUseHyperText ( );
__declspec(implementation_key(188)) void IReportParam::PutUseHyperText ( VARIANT_BOOL PVal );
__declspec(implementation_key(189)) void IPropertyControl1::PutPredefineNumber ( long PVal );
__declspec(implementation_key(190)) long IPropertyControl1::GetPredefineNumber ( );
__declspec(implementation_key(191)) void IPropertyControl1::PutUserMenu ( OLE_HANDLE PVal );
__declspec(implementation_key(192)) OLE_HANDLE IPropertyControl1::GetUserMenu ( );
__declspec(implementation_key(193)) void IPropertyControl1::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(194)) _variant_t IPropertyControl1::GetResModule ( );
__declspec(implementation_key(195)) void IPropertyControl1::PutImage ( const _variant_t & Bmp );
__declspec(implementation_key(196)) _variant_t IPropertyControl1::GetImage ( );
__declspec(implementation_key(197)) OLE_HANDLE IPropertyControl1::GetHWND ( );
__declspec(implementation_key(198)) VARIANT_BOOL IPropertyControl1::AddAdditionButton ( long BtnID, const _variant_t & Bmp, _bstr_t Tips, _bstr_t IconFont );
__declspec(implementation_key(199)) VARIANT_BOOL IPropertyControl1::AddAdditionCheckButton ( long BtnID, const _variant_t & BmpChecked, const _variant_t & BmpUnChecked, const _variant_t & BmpUndefine, _bstr_t Tips, _bstr_t IconFont );
__declspec(implementation_key(200)) void IPropertyControl1::PutAdditionButtonVisible ( long BtnID, VARIANT_BOOL Visible );
__declspec(implementation_key(201)) VARIANT_BOOL IPropertyControl1::GetAdditionButtonVisible ( long BtnID );
__declspec(implementation_key(202)) void IPropertyControl1::PutAdditionButtonChecked ( long BtnID, VARIANT_BOOL Checked );
__declspec(implementation_key(203)) VARIANT_BOOL IPropertyControl1::GetAdditionButtonChecked ( long BtnID );
__declspec(implementation_key(204)) void IPropertyControl1::PutAdditionButtonEnable ( long BtnID, VARIANT_BOOL Enable );
__declspec(implementation_key(205)) VARIANT_BOOL IPropertyControl1::GetAdditionButtonEnable ( long BtnID );
__declspec(implementation_key(206)) void IPropertyControl1::PutHyperLinkNameStyle ( VARIANT_BOOL Val );
__declspec(implementation_key(207)) VARIANT_BOOL IPropertyControl1::GetHyperLinkNameStyle ( );
__declspec(implementation_key(208)) void IPropertyControl1::PutNeedMouseEnterLeaveMessages ( VARIANT_BOOL PVal );
__declspec(implementation_key(209)) VARIANT_BOOL IPropertyControl1::GetNeedMouseEnterLeaveMessages ( );
__declspec(implementation_key(210)) void IPropertyControl1::PutAdditionButtonNeedMouseEnterLeaveMessages ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(211)) VARIANT_BOOL IPropertyControl1::GetAdditionButtonNeedMouseEnterLeaveMessages ( long BtnID );
__declspec(implementation_key(212)) void IPropertyToolBar::PutButtonChecked ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(213)) VARIANT_BOOL IPropertyToolBar::GetButtonChecked ( long BtnID );
__declspec(implementation_key(214)) void IPropertyToolBar::PutButtonEnable ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(215)) VARIANT_BOOL IPropertyToolBar::GetButtonEnable ( long BtnID );
__declspec(implementation_key(216)) HRESULT IPropertyToolBar::AddButton ( long BtnID, const _variant_t & Bmp, long InsertAt );
__declspec(implementation_key(217)) void IPropertyToolBar::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(218)) _variant_t IPropertyToolBar::GetResModule ( );
__declspec(implementation_key(219)) void IPropertyToolBar::PutButtonTips ( long BtnID, _bstr_t PVal );
__declspec(implementation_key(220)) _bstr_t IPropertyToolBar::GetButtonTips ( long BtnID );
__declspec(implementation_key(221)) void IPropertyToolBar::PutButtonHint ( long BtnID, _bstr_t PVal );
__declspec(implementation_key(222)) _bstr_t IPropertyToolBar::GetButtonHint ( long BtnID );
__declspec(implementation_key(223)) void IPropertyToolBar::PutButtonType ( long BtnID, enum ButtonTypeEnum PVal );
__declspec(implementation_key(224)) enum ButtonTypeEnum IPropertyToolBar::GetButtonType ( long BtnID );
__declspec(implementation_key(225)) void IPropertyToolBar::PutButtonVisible ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(226)) VARIANT_BOOL IPropertyToolBar::GetButtonVisible ( long BtnID );
__declspec(implementation_key(227)) void IPropertyToolBar::PutButtonIconFont ( long BtnID, _bstr_t PVal );
__declspec(implementation_key(228)) _bstr_t IPropertyToolBar::GetButtonIconFont ( long BtnID );
__declspec(implementation_key(229)) void IProcessInfoWindow::PutCreateWindow ( VARIANT_BOOL PVal );
__declspec(implementation_key(230)) VARIANT_BOOL IProcessInfoWindow::GetCreateWindow ( );
__declspec(implementation_key(231)) void IProcessInfoWindow::PutWindowCaption ( _bstr_t PVal );
__declspec(implementation_key(232)) _bstr_t IProcessInfoWindow::GetWindowCaption ( );
__declspec(implementation_key(233)) void IProcessInfoWindow::PutCloseProcess ( VARIANT_BOOL PVal );
__declspec(implementation_key(234)) VARIANT_BOOL IProcessInfoWindow::GetCloseProcess ( );
__declspec(implementation_key(235)) void IProcessInfoWindow::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(236)) VARIANT_BOOL IProcessInfoWindow::GetVisible ( );
__declspec(implementation_key(237)) void IProcessInfoWindow::PutText ( _bstr_t PVal );
__declspec(implementation_key(238)) _bstr_t IProcessInfoWindow::GetText ( );
__declspec(implementation_key(239)) void IProcessInfoWindow::PutHelpId ( long PVal );
__declspec(implementation_key(240)) long IProcessInfoWindow::GetHelpId ( );
__declspec(implementation_key(241)) VARIANT_BOOL IProcessContextIconMenu::AddMenuCommand ( long Id, _bstr_t Title, long Icon, _bstr_t IconFont );
__declspec(implementation_key(242)) void IEditDoubleManipulator::PutEditValue ( double PVal );
__declspec(implementation_key(243)) double IEditDoubleManipulator::GetEditValue ( );
__declspec(implementation_key(244)) VARIANT_BOOL IEditDoubleManipulator::SetValueRange ( double MinVal, double MaxVal );
__declspec(implementation_key(245)) VARIANT_BOOL IEditDoubleManipulator::GetIsEditCreated ( );
__declspec(implementation_key(246)) VARIANT_BOOL IAssociationViewElements::GetProjectBodies ( );
__declspec(implementation_key(247)) void IAssociationViewElements::PutProjectBodies ( VARIANT_BOOL Result );
__declspec(implementation_key(248)) VARIANT_BOOL IAssociationViewElements::GetProjectSurfaces ( );
__declspec(implementation_key(249)) void IAssociationViewElements::PutProjectSurfaces ( VARIANT_BOOL Result );
__declspec(implementation_key(250)) VARIANT_BOOL IAssociationViewElements::GetHiddenObjectsVisible ( );
__declspec(implementation_key(251)) void IAssociationViewElements::PutHiddenObjectsVisible ( VARIANT_BOOL Result );
__declspec(implementation_key(252)) VARIANT_BOOL IAssociationViewElements::GetProjectThreads ( );
__declspec(implementation_key(253)) void IAssociationViewElements::PutProjectThreads ( VARIANT_BOOL Result );
__declspec(implementation_key(254)) VARIANT_BOOL IAssociationViewElements::GetProjectDimensions ( );
__declspec(implementation_key(255)) void IAssociationViewElements::PutProjectDimensions ( VARIANT_BOOL Result );
__declspec(implementation_key(256)) VARIANT_BOOL IAssociationViewElements::GetProjectRoughs ( );
__declspec(implementation_key(257)) void IAssociationViewElements::PutProjectRoughs ( VARIANT_BOOL Result );
__declspec(implementation_key(258)) VARIANT_BOOL IAssociationViewElements::GetProjectBases ( );
__declspec(implementation_key(259)) void IAssociationViewElements::PutProjectBases ( VARIANT_BOOL Result );
__declspec(implementation_key(260)) VARIANT_BOOL IAssociationViewElements::GetProjectTolerances ( );
__declspec(implementation_key(261)) void IAssociationViewElements::PutProjectTolerances ( VARIANT_BOOL Result );
__declspec(implementation_key(262)) VARIANT_BOOL IAssociationViewElements::GetProjectPositions ( );
__declspec(implementation_key(263)) void IAssociationViewElements::PutProjectPositions ( VARIANT_BOOL Result );
__declspec(implementation_key(264)) VARIANT_BOOL IAssociationViewElements::GetProjectLeaders ( );
__declspec(implementation_key(265)) void IAssociationViewElements::PutProjectLeaders ( VARIANT_BOOL Result );
__declspec(implementation_key(266)) VARIANT_BOOL IAssociationViewElements::GetProjectMarkLeaders ( );
__declspec(implementation_key(267)) void IAssociationViewElements::PutProjectMarkLeaders ( VARIANT_BOOL Result );
__declspec(implementation_key(268)) VARIANT_BOOL IAssociationViewElements::GetProjectBrandLeaders ( );
__declspec(implementation_key(269)) void IAssociationViewElements::PutProjectBrandLeaders ( VARIANT_BOOL Result );
__declspec(implementation_key(270)) VARIANT_BOOL IAssociationViewElements::GetProjectHiddenComponents ( );
__declspec(implementation_key(271)) void IAssociationViewElements::PutProjectHiddenComponents ( VARIANT_BOOL Result );
__declspec(implementation_key(272)) VARIANT_BOOL IAssociationViewElements::GetProjectStandartElements ( );
__declspec(implementation_key(273)) void IAssociationViewElements::PutProjectStandartElements ( VARIANT_BOOL Result );
__declspec(implementation_key(274)) VARIANT_BOOL IAssociationViewElements::GetProjectCurves ( );
__declspec(implementation_key(275)) void IAssociationViewElements::PutProjectCurves ( VARIANT_BOOL Result );
__declspec(implementation_key(276)) VARIANT_BOOL IAssociationViewElements::GetProjectPoints ( );
__declspec(implementation_key(277)) void IAssociationViewElements::PutProjectPoints ( VARIANT_BOOL Result );
__declspec(implementation_key(278)) VARIANT_BOOL IAssociationViewElements::GetProjectAllObjects ( );
__declspec(implementation_key(279)) void IAssociationViewElements::PutProjectAllObjects ( VARIANT_BOOL Result );
__declspec(implementation_key(280)) VARIANT_BOOL IAssociationViewElements::GetProjectAllDesignations ( );
__declspec(implementation_key(281)) void IAssociationViewElements::PutProjectAllDesignations ( VARIANT_BOOL Result );
__declspec(implementation_key(282)) VARIANT_BOOL IAssociationViewElements::GetProjectSpecRough ( );
__declspec(implementation_key(283)) void IAssociationViewElements::PutProjectSpecRough ( VARIANT_BOOL Result );
__declspec(implementation_key(284)) VARIANT_BOOL IAssociationViewElements::GetProjectLayers ( );
__declspec(implementation_key(285)) void IAssociationViewElements::PutProjectLayers ( VARIANT_BOOL Result );
__declspec(implementation_key(286)) VARIANT_BOOL IAssociationViewElements::GetProjectSketches ( );
__declspec(implementation_key(287)) void IAssociationViewElements::PutProjectSketches ( VARIANT_BOOL Result );
__declspec(implementation_key(288)) VARIANT_BOOL IAssociationViewElements::GetProjectAxis ( );
__declspec(implementation_key(289)) void IAssociationViewElements::PutProjectAxis ( VARIANT_BOOL Result );
__declspec(implementation_key(290)) VARIANT_BOOL IAssociationViewElements::GetCreateAxis ( );
__declspec(implementation_key(291)) void IAssociationViewElements::PutCreateAxis ( VARIANT_BOOL Result );
__declspec(implementation_key(292)) VARIANT_BOOL IAssociationViewElements::GetCreateCircularCentres ( );
__declspec(implementation_key(293)) void IAssociationViewElements::PutCreateCircularCentres ( VARIANT_BOOL Result );
__declspec(implementation_key(294)) VARIANT_BOOL IAssociationViewElements::GetCreateLinearCentres ( );
__declspec(implementation_key(295)) void IAssociationViewElements::PutCreateLinearCentres ( VARIANT_BOOL Result );
__declspec(implementation_key(296)) VARIANT_BOOL IAssociationViewElements::GetCreateCentresMarkers ( );
__declspec(implementation_key(297)) void IAssociationViewElements::PutCreateCentresMarkers ( VARIANT_BOOL Result );
__declspec(implementation_key(298)) VARIANT_BOOL IAssociationViewElements::GetProjectDesTexts ( );
__declspec(implementation_key(299)) void IAssociationViewElements::PutProjectDesTexts ( VARIANT_BOOL Result );
__declspec(implementation_key(300)) VARIANT_BOOL IAssociationViewElements::GetProjectDesTables ( );
__declspec(implementation_key(301)) void IAssociationViewElements::PutProjectDesTables ( VARIANT_BOOL Result );
__declspec(implementation_key(302)) long IBreakViewParam::AddBreakLine ( double X1, double Y1, double X2, double Y2, double Angle );
__declspec(implementation_key(303)) VARIANT_BOOL IBreakViewParam::DeleteBreakLine ( long Index );
__declspec(implementation_key(304)) VARIANT_BOOL IBreakViewParam::DeleteAllBreakLines ( );
__declspec(implementation_key(305)) VARIANT_BOOL IBreakViewParam::SetBreakLinePosition ( long Index, double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(306)) VARIANT_BOOL IBreakViewParam::GetBreakLinePosition ( long Index, double * X1, double * Y1, double * X2, double * Y2 );
__declspec(implementation_key(307)) VARIANT_BOOL IBreakViewParam::SetBreakLineParams ( long Index, double Angle, double Clearance, enum ksBreakLineTypeEnum BreakLineType, double Amplitude, double MaxAmplitude );
__declspec(implementation_key(308)) VARIANT_BOOL IBreakViewParam::GetBreakLineParams ( long Index, double * Angle, double * Clearance, enum ksBreakLineTypeEnum * BreakLineType, double * Amplitude, double * MaxAmplitude );
__declspec(implementation_key(309)) long IBreakViewParam::GetBreaksCount ( );
__declspec(implementation_key(310)) VARIANT_BOOL IBreakViewParam::GetBreaksVisible ( );
__declspec(implementation_key(311)) void IBreakViewParam::PutBreaksVisible ( VARIANT_BOOL Result );
__declspec(implementation_key(312)) _bstr_t ITexturesParam::GetTextureFileName ( enum ksTextureTypeEnum Type );
__declspec(implementation_key(313)) void ITexturesParam::PutTextureFileName ( enum ksTextureTypeEnum Type, _bstr_t PVal );
__declspec(implementation_key(314)) double ITexturesParam::GetTextureHeight ( enum ksTextureTypeEnum Type );
__declspec(implementation_key(315)) void ITexturesParam::PutTextureHeight ( enum ksTextureTypeEnum Type, double PVal );
__declspec(implementation_key(316)) double ITexturesParam::GetTextureWidth ( enum ksTextureTypeEnum Type );
__declspec(implementation_key(317)) void ITexturesParam::PutTextureWidth ( enum ksTextureTypeEnum Type, double PVal );
__declspec(implementation_key(318)) double ITexturesParam::GetTextureDx ( enum ksTextureTypeEnum Type );
__declspec(implementation_key(319)) void ITexturesParam::PutTextureDx ( enum ksTextureTypeEnum Type, double PVal );
__declspec(implementation_key(320)) double ITexturesParam::GetTextureDy ( enum ksTextureTypeEnum Type );
__declspec(implementation_key(321)) void ITexturesParam::PutTextureDy ( enum ksTextureTypeEnum Type, double PVal );
__declspec(implementation_key(322)) double ITexturesParam::GetTextureAngle ( enum ksTextureTypeEnum Type );
__declspec(implementation_key(323)) void ITexturesParam::PutTextureAngle ( enum ksTextureTypeEnum Type, double PVal );
__declspec(implementation_key(324)) VARIANT_BOOL ITexturesParam::Update ( );
__declspec(implementation_key(325)) _bstr_t IAutoSortObjectsParameters::GetAutoNumerationSymbols ( );
__declspec(implementation_key(326)) void IAutoSortObjectsParameters::PutAutoNumerationSymbols ( _bstr_t Result );
__declspec(implementation_key(327)) VARIANT_BOOL IAutoSortObjectsParameters::GetAutoNumerationEnable ( long ObjectType );
__declspec(implementation_key(328)) void IAutoSortObjectsParameters::PutAutoNumerationEnable ( long ObjectType, VARIANT_BOOL Result );
__declspec(implementation_key(329)) _variant_t IAutoSortObjectsParameters::GetAutoNumerationObjects ( );
__declspec(implementation_key(330)) void IAutoSortObjectsParameters::PutAutoNumerationObjects ( const _variant_t & Result );
__declspec(implementation_key(331)) void IDrawingDocumentSettings::PutSheetAutoNumber ( VARIANT_BOOL PVal );
__declspec(implementation_key(332)) VARIANT_BOOL IDrawingDocumentSettings::GetSheetAutoNumber ( );
__declspec(implementation_key(333)) void IDrawingDocumentSettings::PutSheetFirstNumber ( long PVal );
__declspec(implementation_key(334)) long IDrawingDocumentSettings::GetSheetFirstNumber ( );
__declspec(implementation_key(335)) void IDrawingDocumentSettings::PutSheetAutoCount ( VARIANT_BOOL PVal );
__declspec(implementation_key(336)) VARIANT_BOOL IDrawingDocumentSettings::GetSheetAutoCount ( );
__declspec(implementation_key(337)) void IDrawingDocumentSettings::PutSheetsCount ( long PVal );
__declspec(implementation_key(338)) long IDrawingDocumentSettings::GetSheetsCount ( );
__declspec(implementation_key(339)) VARIANT_BOOL IDrawingDocumentSettings::GetTechnicalDemandSynchronize ( );
__declspec(implementation_key(340)) void IDrawingDocumentSettings::PutTechnicalDemandSynchronize ( VARIANT_BOOL Result );
__declspec(implementation_key(341)) void IDrawingDocumentSettings::PutSheetStampMassUnit ( enum ksMassUnitsEnum PVal );
__declspec(implementation_key(342)) enum ksMassUnitsEnum IDrawingDocumentSettings::GetSheetStampMassUnit ( );
__declspec(implementation_key(343)) void IDrawingDocumentSettings::PutSheetStampMassDesignation ( enum ksMassUnitsEnum MassUnit, _bstr_t Designation );
__declspec(implementation_key(344)) _bstr_t IDrawingDocumentSettings::GetSheetStampMassDesignation ( enum ksMassUnitsEnum MassUnit );
__declspec(implementation_key(345)) void IDrawingDocumentSettings::PutSheetStampMassDigitsCount ( long PVal );
__declspec(implementation_key(346)) long IDrawingDocumentSettings::GetSheetStampMassDigitsCount ( );
__declspec(implementation_key(347)) void IDrawingDocumentSettings::PutEmbodimentsTableCreateLinkInStamp ( VARIANT_BOOL PVal );
__declspec(implementation_key(348)) VARIANT_BOOL IDrawingDocumentSettings::GetEmbodimentsTableCreateLinkInStamp ( );
__declspec(implementation_key(349)) void IDrawingDocumentSettings::PutEmbodimentsTableAddNumberInStamp ( VARIANT_BOOL PVal );
__declspec(implementation_key(350)) VARIANT_BOOL IDrawingDocumentSettings::GetEmbodimentsTableAddNumberInStamp ( );
__declspec(implementation_key(351)) void IDrawingDocumentSettings::PutEmbodimentsTableAutoFontParamInStamp ( VARIANT_BOOL PVal );
__declspec(implementation_key(352)) VARIANT_BOOL IDrawingDocumentSettings::GetEmbodimentsTableAutoFontParamInStamp ( );
__declspec(implementation_key(353)) void IDrawingDocumentSettings::PutEmbodimentsTableTextInStamp ( _bstr_t PVal );
__declspec(implementation_key(354)) _bstr_t IDrawingDocumentSettings::GetEmbodimentsTableTextInStamp ( );
__declspec(implementation_key(355)) long ILibItemSettings::GetItemCount ( );
__declspec(implementation_key(356)) double ILibItemSettings::GetItem ( const _variant_t & Index, VARIANT_BOOL * Use );
__declspec(implementation_key(357)) VARIANT_BOOL ILibItemSettings::SetItem ( const _variant_t & Index, VARIANT_BOOL Use );
__declspec(implementation_key(358)) VARIANT_BOOL ILibItemSettings::GetItems ( VARIANT * UniqIds, VARIANT * Uses );
__declspec(implementation_key(359)) VARIANT_BOOL ILibItemSettings::GetItemsEx ( VARIANT * UniqIds, VARIANT * Uses, VARIANT * ItemNames, VARIANT * FileNames );
__declspec(implementation_key(360)) ksUseColorEnum IColorParam7::GetUseColor ( );
__declspec(implementation_key(361)) void IColorParam7::PutUseColor ( ksUseColorEnum PVal );
__declspec(implementation_key(362)) long IColorParam7::GetColor ( );
__declspec(implementation_key(363)) void IColorParam7::PutColor ( long PVal );
__declspec(implementation_key(364)) double IColorParam7::GetAmbient ( );
__declspec(implementation_key(365)) void IColorParam7::PutAmbient ( double PVal );
__declspec(implementation_key(366)) double IColorParam7::GetDiffuse ( );
__declspec(implementation_key(367)) void IColorParam7::PutDiffuse ( double PVal );
__declspec(implementation_key(368)) double IColorParam7::GetSpecularity ( );
__declspec(implementation_key(369)) void IColorParam7::PutSpecularity ( double PVal );
__declspec(implementation_key(370)) double IColorParam7::GetShininess ( );
__declspec(implementation_key(371)) void IColorParam7::PutShininess ( double PVal );
__declspec(implementation_key(372)) double IColorParam7::GetTransparency ( );
__declspec(implementation_key(373)) void IColorParam7::PutTransparency ( double PVal );
__declspec(implementation_key(374)) double IColorParam7::GetEmission ( );
__declspec(implementation_key(375)) void IColorParam7::PutEmission ( double PVal );
__declspec(implementation_key(376)) VARIANT_BOOL IColorParam7::GetAdvancedColor ( long * Color, double * Ambient, double * Diffuse, double * Specularity, double * Shininess, double * Transparency, double * Emission );
__declspec(implementation_key(377)) VARIANT_BOOL IColorParam7::SetAdvancedColor ( long Color, double Ambient, double Diffuse, double Specularity, double Shininess, double Transparency, double Emission );
__declspec(implementation_key(378)) IColorParam7Ptr INewDocument3DSettings::GetColorParam ( );
__declspec(implementation_key(379)) void ISerializer::PutXML ( _bstr_t Result );
__declspec(implementation_key(380)) _bstr_t ISerializer::GetXML ( );
__declspec(implementation_key(381)) long ICellFormat::GetTextStyle ( );
__declspec(implementation_key(382)) void ICellFormat::PutTextStyle ( long Result );
__declspec(implementation_key(383)) VARIANT_BOOL ICellFormat::GetReadOnly ( );
__declspec(implementation_key(384)) void ICellFormat::PutReadOnly ( VARIANT_BOOL Result );
__declspec(implementation_key(385)) VARIANT_BOOL ICellFormat::GetOneLine ( );
__declspec(implementation_key(386)) void ICellFormat::PutOneLine ( VARIANT_BOOL Result );
__declspec(implementation_key(387)) double ICellFormat::GetLeftEdge ( );
__declspec(implementation_key(388)) void ICellFormat::PutLeftEdge ( double Result );
__declspec(implementation_key(389)) double ICellFormat::GetRightEdge ( );
__declspec(implementation_key(390)) void ICellFormat::PutRightEdge ( double Result );
__declspec(implementation_key(391)) double ICellFormat::GetSpaceBefore ( );
__declspec(implementation_key(392)) void ICellFormat::PutSpaceBefore ( double Result );
__declspec(implementation_key(393)) double ICellFormat::GetSpaceAfter ( );
__declspec(implementation_key(394)) void ICellFormat::PutSpaceAfter ( double Result );
__declspec(implementation_key(395)) double ICellFormat::GetWidth ( );
__declspec(implementation_key(396)) void ICellFormat::PutWidth ( double Result );
__declspec(implementation_key(397)) double ICellFormat::GetHeight ( );
__declspec(implementation_key(398)) void ICellFormat::PutHeight ( double Result );
__declspec(implementation_key(399)) enum ksTextHorizontalFormatEnum ICellFormat::GetHFormat ( );
__declspec(implementation_key(400)) void ICellFormat::PutHFormat ( enum ksTextHorizontalFormatEnum Result );
__declspec(implementation_key(401)) VARIANT_BOOL ICellFormat::GetVFormat ( );
__declspec(implementation_key(402)) void ICellFormat::PutVFormat ( VARIANT_BOOL Result );
__declspec(implementation_key(403)) enum ksCurveStyleEnum ICellBoundaries::GetLineStyle ( enum ksCellBoundariesEnum Index );
__declspec(implementation_key(404)) void ICellBoundaries::PutLineStyle ( enum ksCellBoundariesEnum Index, enum ksCurveStyleEnum Result );
__declspec(implementation_key(405)) VARIANT_BOOL ICellBoundaries::GetLineVisible ( enum ksCellBoundariesEnum Index );
__declspec(implementation_key(406)) void ICellBoundaries::PutLineVisible ( enum ksCellBoundariesEnum Index, VARIANT_BOOL Result );
__declspec(implementation_key(407)) VARIANT_BOOL ITableRange::CombineCells ( );
__declspec(implementation_key(408)) VARIANT_BOOL ITableRange::DivideCells ( long ColumnCount, long RowCount, VARIANT_BOOL PrepareCombine );
__declspec(implementation_key(409)) VARIANT_BOOL ITableRange::ClearCells ( );
__declspec(implementation_key(410)) _variant_t ITableRange::GetCells ( );
__declspec(implementation_key(411)) ICellFormatPtr ITableRange::GetCellsFormat ( );
__declspec(implementation_key(412)) ICellBoundariesPtr ITableRange::GetCellsBoundaries ( );
__declspec(implementation_key(413)) _variant_t ITableRange::GetTexts ( );
__declspec(implementation_key(414)) void ITableRange::PutTexts ( const _variant_t & PVal );
__declspec(implementation_key(415)) VARIANT_BOOL ksPropertyManagerNotify::ButtonClick ( long ButtonID );
__declspec(implementation_key(416)) VARIANT_BOOL ksPropertyManagerNotify::ChangeControlValue ( struct IPropertyControl * Control );
__declspec(implementation_key(417)) VARIANT_BOOL ksPropertyManagerNotify::ControlCommand ( struct IPropertyControl * Control, long ButtonID );
__declspec(implementation_key(418)) VARIANT_BOOL ksPropertyManagerNotify::ButtonUpdate ( long ButtonID, long * Check, VARIANT_BOOL * Enable );
__declspec(implementation_key(419)) VARIANT_BOOL ksPropertyManagerNotify::ProcessActivate ( );
__declspec(implementation_key(420)) VARIANT_BOOL ksPropertyManagerNotify::ProcessDeactivate ( );
__declspec(implementation_key(421)) VARIANT_BOOL ksPropertyManagerNotify::CommandHelp ( long Id );
__declspec(implementation_key(422)) VARIANT_BOOL ksPropertyManagerNotify::SelectItem ( struct IPropertyControl * Control, long Index, VARIANT_BOOL Select );
__declspec(implementation_key(423)) VARIANT_BOOL ksPropertyManagerNotify::CheckItem ( struct IPropertyControl * Control, long Index, VARIANT_BOOL Check );
__declspec(implementation_key(424)) VARIANT_BOOL ksPropertyManagerNotify::ChangeActiveTab ( long TabIndex );
__declspec(implementation_key(425)) VARIANT_BOOL ksPropertyManagerNotify::EditFocus ( struct IPropertyControl * Control, VARIANT_BOOL Set );
__declspec(implementation_key(426)) VARIANT_BOOL ksPropertyManagerNotify::UserMenuCommand ( struct IPropertyControl * Control, long MenuID );
__declspec(implementation_key(427)) VARIANT_BOOL ksPropertyManagerNotify::LayoutChanged ( );
__declspec(implementation_key(428)) VARIANT_BOOL ksPropertyManagerNotify::GetContextMenuType ( long LX, long LY, long * ContextMenuType );
__declspec(implementation_key(429)) VARIANT_BOOL ksPropertyManagerNotify::FillContextPanel ( struct IProcessContextPanel * ContextPanel );
__declspec(implementation_key(430)) VARIANT_BOOL ksPropertyManagerNotify::FillContextIconMenu ( struct IProcessContextIconMenu * ContextMenu );
__declspec(implementation_key(431)) VARIANT_BOOL ksPropertyManagerNotify::EndEditItem ( struct IPropertyControl * Control, long Index );
__declspec(implementation_key(432)) VARIANT_BOOL ksPropertyManagerNotify::ChangeTabExpanded ( long TabIndex );
__declspec(implementation_key(433)) VARIANT_BOOL ksPropertyManagerNotify::DoubleClickItem ( struct IPropertyControl * Control, long Index );
__declspec(implementation_key(434)) VARIANT_BOOL ksPropertyUserControlNotify::CreateOCX ( IDispatch * IOcx );
__declspec(implementation_key(435)) VARIANT_BOOL ksPropertyUserControlNotify::DestroyOCX ( );
__declspec(implementation_key(436)) VARIANT_BOOL ksDocumentFrameNotify::BeginPaint ( struct IPaintObject * PaintObj );
__declspec(implementation_key(437)) VARIANT_BOOL ksDocumentFrameNotify::ClosePaint ( struct IPaintObject * PaintObj );
__declspec(implementation_key(438)) VARIANT_BOOL ksDocumentFrameNotify::MouseDown ( short NButton, short NShiftState, long X, long Y );
__declspec(implementation_key(439)) VARIANT_BOOL ksDocumentFrameNotify::MouseUp ( short NButton, short NShiftState, long X, long Y );
__declspec(implementation_key(440)) VARIANT_BOOL ksDocumentFrameNotify::MouseDblClick ( short NButton, short NShiftState, long X, long Y );
__declspec(implementation_key(441)) VARIANT_BOOL ksDocumentFrameNotify::BeginPaintGL ( struct ksGLObject * GlObj, long DrawMode );
__declspec(implementation_key(442)) VARIANT_BOOL ksDocumentFrameNotify::ClosePaintGL ( struct ksGLObject * GlObj, long DrawMode );
__declspec(implementation_key(443)) VARIANT_BOOL ksDocumentFrameNotify::AddGabarit ( struct IGabaritObject * GabObj );
__declspec(implementation_key(444)) VARIANT_BOOL ksDocumentFrameNotify::Activate ( );
__declspec(implementation_key(445)) VARIANT_BOOL ksDocumentFrameNotify::Deactivate ( );
__declspec(implementation_key(446)) VARIANT_BOOL ksDocumentFrameNotify::CloseFrame ( );
__declspec(implementation_key(447)) VARIANT_BOOL ksDocumentFrameNotify::MouseMove ( short NShiftState, long X, long Y );
__declspec(implementation_key(448)) VARIANT_BOOL ksDocumentFrameNotify::ShowOcxTree ( IDispatch * Ocx, VARIANT_BOOL Show );
__declspec(implementation_key(449)) VARIANT_BOOL ksDocumentFrameNotify::BeginPaintTmpObjects ( );
__declspec(implementation_key(450)) VARIANT_BOOL ksDocumentFrameNotify::ClosePaintTmpObjects ( );
__declspec(implementation_key(451)) OLE_HANDLE IPaintObject::GetHWND ( );
__declspec(implementation_key(452)) HRESULT IPaintObject::GetTransformMatrix ( double * A11, double * A12, double * A13, double * A14, double * A21, double * A22, double * A23, double * A24 );
__declspec(implementation_key(453)) _bstr_t IPaintObject::GetDIBForOutput ( );
__declspec(implementation_key(454)) VARIANT_BOOL ksGLObject::glBegin ( long Mode );
__declspec(implementation_key(455)) VARIANT_BOOL ksGLObject::glEnd ( );
__declspec(implementation_key(456)) VARIANT_BOOL ksGLObject::glEnable ( long Cap );
__declspec(implementation_key(457)) VARIANT_BOOL ksGLObject::glDisable ( long Cap );
__declspec(implementation_key(458)) VARIANT_BOOL ksGLObject::glColor3d ( double R, double G, double B );
__declspec(implementation_key(459)) VARIANT_BOOL ksGLObject::glLineWidth ( double W );
__declspec(implementation_key(460)) VARIANT_BOOL ksGLObject::glLineStipple ( long Factor, short Pattern );
__declspec(implementation_key(461)) VARIANT_BOOL ksGLObject::glPointSize ( double W );
__declspec(implementation_key(462)) VARIANT_BOOL ksGLObject::glPolygonMode ( long Face, long Mode );
__declspec(implementation_key(463)) VARIANT_BOOL ksGLObject::glVertex2d ( double X, double Y );
__declspec(implementation_key(464)) VARIANT_BOOL ksGLObject::glVertex2dv ( double * PData, long CountDouble );
__declspec(implementation_key(465)) VARIANT_BOOL ksGLObject::glVertex3d ( double X, double Y, double Z );
__declspec(implementation_key(466)) VARIANT_BOOL ksGLObject::glVertex3dv ( double * PData, long CountDouble );
__declspec(implementation_key(467)) VARIANT_BOOL ksGLObject::glVertex4d ( double X, double Y, double Z, double W );
__declspec(implementation_key(468)) VARIANT_BOOL ksGLObject::glVertex4dv ( double * PData, long CountDouble );
__declspec(implementation_key(469)) VARIANT_BOOL IGabaritObject::GetCurrentGabarit ( long NPage, double * P1X, double * P1Y, double * P1Z, double * P2X, double * P2Y, double * P2Z );
__declspec(implementation_key(470)) VARIANT_BOOL IGabaritObject::AddGabarit ( double X1, double Y1, double Z1, double X2, double Y2, double Z2 );
__declspec(implementation_key(471)) VARIANT_BOOL IGabaritObject::GetGabaritModifying ( );
__declspec(implementation_key(472)) VARIANT_BOOL ksDrawingObjectNotify::ChangeActive ( const _variant_t & Obj );
__declspec(implementation_key(473)) VARIANT_BOOL ksDrawingObjectNotify::BeginDelete ( const _variant_t & Objects );
__declspec(implementation_key(474)) VARIANT_BOOL ksDrawingObjectNotify::Delete ( const _variant_t & Objects );
__declspec(implementation_key(475)) VARIANT_BOOL ksDrawingObjectNotify::BeginMove ( const _variant_t & Objects );
__declspec(implementation_key(476)) VARIANT_BOOL ksDrawingObjectNotify::Move ( const _variant_t & Objects );
__declspec(implementation_key(477)) VARIANT_BOOL ksDrawingObjectNotify::BeginRotate ( const _variant_t & Objects );
__declspec(implementation_key(478)) VARIANT_BOOL ksDrawingObjectNotify::Rotate ( const _variant_t & Objects );
__declspec(implementation_key(479)) VARIANT_BOOL ksDrawingObjectNotify::BeginScale ( const _variant_t & Objects );
__declspec(implementation_key(480)) VARIANT_BOOL ksDrawingObjectNotify::Scale ( const _variant_t & Objects );
__declspec(implementation_key(481)) VARIANT_BOOL ksDrawingObjectNotify::BeginTransform ( const _variant_t & Objects );
__declspec(implementation_key(482)) VARIANT_BOOL ksDrawingObjectNotify::Transform ( const _variant_t & Objects );
__declspec(implementation_key(483)) VARIANT_BOOL ksDrawingObjectNotify::BeginCopy ( const _variant_t & Objects );
__declspec(implementation_key(484)) VARIANT_BOOL ksDrawingObjectNotify::Copy ( const _variant_t & Objects );
__declspec(implementation_key(485)) VARIANT_BOOL ksDrawingObjectNotify::BeginSymmetry ( const _variant_t & Objects );
__declspec(implementation_key(486)) VARIANT_BOOL ksDrawingObjectNotify::Symmetry ( const _variant_t & Objects );
__declspec(implementation_key(487)) VARIANT_BOOL ksDrawingObjectNotify::BeginProcess ( long PType, const _variant_t & ObjRef );
__declspec(implementation_key(488)) VARIANT_BOOL ksDrawingObjectNotify::EndProcess ( long PType );
__declspec(implementation_key(489)) VARIANT_BOOL ksDrawingObjectNotify::CreateObject ( const _variant_t & Objects );
__declspec(implementation_key(490)) VARIANT_BOOL ksDrawingObjectNotify::UpdateObject ( const _variant_t & Objects );
__declspec(implementation_key(491)) VARIANT_BOOL ksDrawingObjectNotify::BeginDestroyObject ( const _variant_t & Objects );
__declspec(implementation_key(492)) VARIANT_BOOL ksDrawingObjectNotify::DestroyObject ( const _variant_t & Objects );
__declspec(implementation_key(493)) VARIANT_BOOL ksDrawingObjectNotify::BeginPropertyChanged ( const _variant_t & Objects );
__declspec(implementation_key(494)) VARIANT_BOOL ksDrawingObjectNotify::PropertyChanged ( const _variant_t & Objects );
__declspec(implementation_key(495)) VARIANT_BOOL ksViewsAndLayersManagerNotify::BeginEdit ( );
__declspec(implementation_key(496)) VARIANT_BOOL ksViewsAndLayersManagerNotify::EndEdit ( VARIANT_BOOL IsOk );
__declspec(implementation_key(497)) VARIANT_BOOL ksLibraryManagerNotify::BeginAttach ( struct ILibrary * PLibrary );
__declspec(implementation_key(498)) VARIANT_BOOL ksLibraryManagerNotify::Attach ( struct ILibrary * PLibrary );
__declspec(implementation_key(499)) VARIANT_BOOL ksLibraryManagerNotify::BeginDetach ( struct ILibrary * PLibrary );
__declspec(implementation_key(500)) VARIANT_BOOL ksLibraryManagerNotify::Detach ( struct ILibrary * PLibrary );
__declspec(implementation_key(501)) VARIANT_BOOL ksLibraryManagerNotify::BeginExecute ( struct ILibrary * PLibrary );
__declspec(implementation_key(502)) VARIANT_BOOL ksLibraryManagerNotify::EndExecute ( struct ILibrary * PLibrary );
__declspec(implementation_key(503)) VARIANT_BOOL ksLibraryManagerNotify::SystemControlStop ( struct ILibrary * PLibrary );
__declspec(implementation_key(504)) VARIANT_BOOL ksLibraryManagerNotify::SystemControlStart ( struct ILibrary * PLibrary );
__declspec(implementation_key(505)) VARIANT_BOOL ksLibraryManagerNotify::AddLibraryDescription ( struct ILibrary * PLibrary );
__declspec(implementation_key(506)) VARIANT_BOOL ksLibraryManagerNotify::DeleteLibraryDescription ( struct ILibrary * PLibrary );
__declspec(implementation_key(507)) VARIANT_BOOL ksLibraryManagerNotify::AddInsert ( struct IInsert * PInsert, VARIANT_BOOL Create );
__declspec(implementation_key(508)) VARIANT_BOOL ksLibraryManagerNotify::DeleteInsert ( struct IInsert * PInsert );
__declspec(implementation_key(509)) VARIANT_BOOL ksLibraryManagerNotify::EditInsert ( struct ILibrary * PLibrary, struct IKompasDocument * PDoc, VARIANT_BOOL NewFrw );
__declspec(implementation_key(510)) VARIANT_BOOL ksLibraryManagerNotify::TryExecute ( struct ILibrary * PLibrary, long CommandID );
__declspec(implementation_key(511)) VARIANT_BOOL ksLibraryManagerNotify::BeginInsertDocument ( struct ILibrary * PLibrary, long InsertionType, _bstr_t Insertion );
__declspec(implementation_key(512)) VARIANT_BOOL ksSpecificationDescriptionNotify::TuningSpcStyleBeginChange ( struct ISpecificationDescription * Descr );
__declspec(implementation_key(513)) VARIANT_BOOL ksSpecificationDescriptionNotify::TuningSpcStyleChange ( struct ISpecificationDescription * Descr, VARIANT_BOOL IsOk );
__declspec(implementation_key(514)) VARIANT_BOOL ksSpecificationDescriptionNotify::ChangeCurrentSpcDescription ( struct ISpecificationDescription * Descr );
__declspec(implementation_key(515)) VARIANT_BOOL ksSpecificationDescriptionNotify::SpcDescriptionAdd ( struct ISpecificationDescription * Descr );
__declspec(implementation_key(516)) VARIANT_BOOL ksSpecificationDescriptionNotify::SpcDescriptionRemove ( struct ISpecificationDescription * Descr );
__declspec(implementation_key(517)) VARIANT_BOOL ksSpecificationDescriptionNotify::SpcDescriptionBeginEdit ( struct ISpecificationDescription * Descr );
__declspec(implementation_key(518)) VARIANT_BOOL ksSpecificationDescriptionNotify::SpcDescriptionEdit ( struct ISpecificationDescription * Descr, VARIANT_BOOL IsOk );
__declspec(implementation_key(519)) VARIANT_BOOL ksSpecificationDescriptionNotify::SynchronizationBegin ( );
__declspec(implementation_key(520)) VARIANT_BOOL ksSpecificationDescriptionNotify::Synchronization ( );
__declspec(implementation_key(521)) VARIANT_BOOL ksSpecificationDescriptionNotify::BeginCalcPositions ( );
__declspec(implementation_key(522)) VARIANT_BOOL ksSpecificationDescriptionNotify::CalcPositions ( );
__declspec(implementation_key(523)) VARIANT_BOOL ksSpecificationDescriptionNotify::BeginCreateObject ( long TypeObj );
__declspec(implementation_key(524)) VARIANT_BOOL ksSpecificationObjectNotify::BeginDelete ( struct ISpecificationObject * Obj );
__declspec(implementation_key(525)) VARIANT_BOOL ksSpecificationObjectNotify::Delete ( struct ISpecificationObject * Obj );
__declspec(implementation_key(526)) VARIANT_BOOL ksSpecificationObjectNotify::CellDblClick ( struct ISpecificationObject * Obj, long Number );
__declspec(implementation_key(527)) VARIANT_BOOL ksSpecificationObjectNotify::CellBeginEdit ( struct ISpecificationObject * Obj, long Number );
__declspec(implementation_key(528)) VARIANT_BOOL ksSpecificationObjectNotify::ChangeCurrent ( struct ISpecificationObject * Obj );
__declspec(implementation_key(529)) VARIANT_BOOL ksSpecificationObjectNotify::DocumentBeginAdd ( struct ISpecificationObject * Obj );
__declspec(implementation_key(530)) VARIANT_BOOL ksSpecificationObjectNotify::DocumentAdd ( struct ISpecificationObject * Obj, _bstr_t DocName );
__declspec(implementation_key(531)) VARIANT_BOOL ksSpecificationObjectNotify::DocumentRemove ( struct ISpecificationObject * Obj, _bstr_t DocName );
__declspec(implementation_key(532)) VARIANT_BOOL ksSpecificationObjectNotify::BeginGeomChange ( struct ISpecificationObject * Obj );
__declspec(implementation_key(533)) VARIANT_BOOL ksSpecificationObjectNotify::GeomChange ( struct ISpecificationObject * Obj );
__declspec(implementation_key(534)) VARIANT_BOOL ksSpecificationObjectNotify::BeginProcess ( long PType, struct ISpecificationObject * Obj );
__declspec(implementation_key(535)) VARIANT_BOOL ksSpecificationObjectNotify::EndProcess ( long PType );
__declspec(implementation_key(536)) VARIANT_BOOL ksSpecificationObjectNotify::CreateObject ( struct ISpecificationObject * Obj );
__declspec(implementation_key(537)) VARIANT_BOOL ksSpecificationObjectNotify::UpdateObject ( struct ISpecificationObject * Obj );
__declspec(implementation_key(538)) VARIANT_BOOL ksLayoutSheetsNotify::Add ( struct ILayoutSheet * PSheet );
__declspec(implementation_key(539)) VARIANT_BOOL ksLayoutSheetsNotify::Delete ( struct ILayoutSheet * PSheet );
__declspec(implementation_key(540)) VARIANT_BOOL ksLayoutSheetsNotify::Update ( struct ILayoutSheet * PSheet );
__declspec(implementation_key(541)) VARIANT_BOOL ksModelObjectNotify::BeginDelete ( const _variant_t & Obj );
__declspec(implementation_key(542)) VARIANT_BOOL ksModelObjectNotify::Delete ( const _variant_t & Obj );
__declspec(implementation_key(543)) VARIANT_BOOL ksModelObjectNotify::Excluded ( const _variant_t & Obj, VARIANT_BOOL Excluded );
__declspec(implementation_key(544)) VARIANT_BOOL ksModelObjectNotify::Hidden ( const _variant_t & Obj, VARIANT_BOOL _Hidden );
__declspec(implementation_key(545)) VARIANT_BOOL ksModelObjectNotify::BeginPropertyChanged ( const _variant_t & Obj );
__declspec(implementation_key(546)) VARIANT_BOOL ksModelObjectNotify::PropertyChanged ( const _variant_t & Obj );
__declspec(implementation_key(547)) VARIANT_BOOL ksModelObjectNotify::BeginPlacementChanged ( const _variant_t & Obj );
__declspec(implementation_key(548)) VARIANT_BOOL ksModelObjectNotify::PlacementChanged ( const _variant_t & Obj );
__declspec(implementation_key(549)) VARIANT_BOOL ksModelObjectNotify::BeginProcess ( long PType, const _variant_t & PObj );
__declspec(implementation_key(550)) VARIANT_BOOL ksModelObjectNotify::EndProcess ( long PType );
__declspec(implementation_key(551)) VARIANT_BOOL ksModelObjectNotify::CreateObject ( const _variant_t & Obj );
__declspec(implementation_key(552)) VARIANT_BOOL ksModelObjectNotify::UpdateObject ( const _variant_t & Obj );
__declspec(implementation_key(553)) VARIANT_BOOL ksModelObjectNotify::BeginLoadStateChange ( const _variant_t & Obj, long LoadState );
__declspec(implementation_key(554)) VARIANT_BOOL ksModelObjectNotify::LoadStateChange ( const _variant_t & Obj, long LoadState );
__declspec(implementation_key(555)) VARIANT_BOOL ksDocument3DNotify7::BeginRebuild ( );
__declspec(implementation_key(556)) VARIANT_BOOL ksDocument3DNotify7::Rebuild ( );
__declspec(implementation_key(557)) VARIANT_BOOL ksDocument3DNotify7::BeginChoiceMaterial ( );
__declspec(implementation_key(558)) VARIANT_BOOL ksDocument3DNotify7::ChoiceMaterial ( _bstr_t Material, double Density );
__declspec(implementation_key(559)) VARIANT_BOOL ksDocument3DNotify7::BeginChoiceMarking ( );
__declspec(implementation_key(560)) VARIANT_BOOL ksDocument3DNotify7::ChoiceMarking ( _bstr_t Marking );
__declspec(implementation_key(561)) VARIANT_BOOL ksDocument3DNotify7::BeginSetPartFromFile ( );
__declspec(implementation_key(562)) VARIANT_BOOL ksDocument3DNotify7::BeginCreatePartFromFile ( VARIANT_BOOL TypeDoc, struct IModelObject * Plane );
__declspec(implementation_key(563)) VARIANT_BOOL ksDocument3DNotify7::CreateEmbodiment ( _bstr_t Marking );
__declspec(implementation_key(564)) VARIANT_BOOL ksDocument3DNotify7::DeleteEmbodiment ( _bstr_t Marking );
__declspec(implementation_key(565)) VARIANT_BOOL ksDocument3DNotify7::ChangeCurrentEmbodiment ( _bstr_t Marking );
__declspec(implementation_key(566)) VARIANT_BOOL ksDocument3DNotify7::BeginChoiceProperty ( IDispatch * Obj, double propID );
__declspec(implementation_key(567)) VARIANT_BOOL ksDocument3DNotify7::ChoiceProperty ( IDispatch * Obj, double propID );
__declspec(implementation_key(568)) VARIANT_BOOL ksDocument3DNotify7::BeginRollbackFeatures ( );
__declspec(implementation_key(569)) VARIANT_BOOL ksDocument3DNotify7::RollbackFeatures ( );
__declspec(implementation_key(570)) VARIANT_BOOL ksDocument3DNotify7::BedinLoadCombinationChange ( long Index );
__declspec(implementation_key(571)) VARIANT_BOOL ksDocument3DNotify7::LoadCombinationChange ( long Index );
__declspec(implementation_key(572)) VARIANT_BOOL ksProcess2DNotify::PlacementChange ( double X, double Y, double Angle, VARIANT_BOOL Dynamic );
__declspec(implementation_key(573)) VARIANT_BOOL ksProcess2DNotify::ExecuteCommand ( long Command );
__declspec(implementation_key(574)) VARIANT_BOOL ksProcess2DNotify::Run ( );
__declspec(implementation_key(575)) VARIANT_BOOL ksProcess2DNotify::Stop ( );
__declspec(implementation_key(576)) VARIANT_BOOL ksProcess2DNotify::Activate ( );
__declspec(implementation_key(577)) VARIANT_BOOL ksProcess2DNotify::Deactivate ( );
__declspec(implementation_key(578)) VARIANT_BOOL ksProcess2DNotify::EndProcess ( );
__declspec(implementation_key(579)) VARIANT_BOOL ksProcess2DNotify::GetMouseEnterLeavePoint ( IDispatch * Control, long BtnID, long PointIndex, IDispatch * Parameters );
__declspec(implementation_key(580)) VARIANT_BOOL ksProcess2DNotify::AbortProcess ( );
__declspec(implementation_key(581)) VARIANT_BOOL ksProcess3DNotify::PlacementChange ( IDispatch * Object );
__declspec(implementation_key(582)) VARIANT_BOOL ksProcess3DNotify::ExecuteCommand ( long Command );
__declspec(implementation_key(583)) VARIANT_BOOL ksProcess3DNotify::Run ( );
__declspec(implementation_key(584)) VARIANT_BOOL ksProcess3DNotify::Stop ( );
__declspec(implementation_key(585)) VARIANT_BOOL ksProcess3DNotify::Activate ( );
__declspec(implementation_key(586)) VARIANT_BOOL ksProcess3DNotify::Deactivate ( );
__declspec(implementation_key(587)) VARIANT_BOOL ksProcess3DNotify::FilterObject ( IDispatch * Object );
__declspec(implementation_key(588)) VARIANT_BOOL ksProcess3DNotify::CreateTakeObject ( IDispatch * Object );
__declspec(implementation_key(589)) VARIANT_BOOL ksProcess3DNotify::EndProcess ( );
__declspec(implementation_key(590)) VARIANT_BOOL ksProcess3DNotify::ProcessingGroupObjects ( const _variant_t & Objects, long selectionType );
__declspec(implementation_key(591)) VARIANT_BOOL ksProcess3DNotify::AbortProcess ( );
__declspec(implementation_key(592)) enum ksObject3DNotifyEnum IModelObjectNotifyResult::GetNotifyType ( );
__declspec(implementation_key(593)) _variant_t IModelObjectNotifyResult::GetNotifyObjects ( );
__declspec(implementation_key(594)) enum ProcessTypeEnum IModelObjectNotifyResult::GetProcessType ( );
__declspec(implementation_key(595)) VARIANT_BOOL IModelObjectNotifyResult::GetIsUndoMode ( );
__declspec(implementation_key(596)) VARIANT_BOOL IModelObjectNotifyResult::GetIsRedoMode ( );
__declspec(implementation_key(597)) VARIANT_BOOL ksContentDialogNotify::CreateContentCallback ( OLE_HANDLE ParentHwnd, OLE_HANDLE * NewContentHwnd );
__declspec(implementation_key(598)) VARIANT_BOOL ksContentDialogNotify::DestroyContent ( );
__declspec(implementation_key(599)) VARIANT_BOOL ksContentDialogNotify::ExecuteCommand ( long ButtonID );
__declspec(implementation_key(600)) VARIANT_BOOL ksContentDialogNotify::ButtonUpdate ( long ButtonID, long * Check, VARIANT_BOOL * Enable );
__declspec(implementation_key(601)) VARIANT_BOOL ksProcess3DManipulatorsNotify::RotateManipulator ( long ManipulatorId, double X0, double Y0, double Z0, double AxisZX, double AxisZXY, double AxisZZ, double Angle, VARIANT_BOOL FromEdit );
__declspec(implementation_key(602)) VARIANT_BOOL ksProcess3DManipulatorsNotify::MoveManipulator ( long ManipulatorId, double VX, double VY, double VZ, double Delta, VARIANT_BOOL FromEdit );
__declspec(implementation_key(603)) VARIANT_BOOL ksProcess3DManipulatorsNotify::ClickManipulatorPrimitive ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType, VARIANT_BOOL DoubleClick );
__declspec(implementation_key(604)) VARIANT_BOOL ksProcess3DManipulatorsNotify::BeginDragManipulator ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType );
__declspec(implementation_key(605)) VARIANT_BOOL ksProcess3DManipulatorsNotify::EndDragManipulator ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType );
__declspec(implementation_key(606)) VARIANT_BOOL ksProcess3DManipulatorsNotify::CreateManipulatorEdit ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType );
__declspec(implementation_key(607)) VARIANT_BOOL ksProcess3DManipulatorsNotify::DestroyManipulatorEdit ( long ManipulatorId );
__declspec(implementation_key(608)) VARIANT_BOOL ksProcess3DManipulatorsNotify::ChangeManipulatorValue ( long ManipulatorId, enum ksManipulatorPrimitiveEnum PrimitiveType, double newValue );
__declspec(implementation_key(609)) VARIANT_BOOL ksPLMObjectNotify::PLMStatusChanged ( IDispatch * Object, long newValue );
__declspec(implementation_key(610)) VARIANT_BOOL ksPLMObjectNotify::PLMChangeChanged ( IDispatch * Object, long newValue );
__declspec(implementation_key(611)) VARIANT_BOOL ksFindObject3DParametersNotify::FilterObject ( IDispatch * Object );
__declspec(implementation_key(612)) void IMassInertiaParam7::PutXc ( double PVal );
__declspec(implementation_key(613)) double IMassInertiaParam7::GetXc ( );
__declspec(implementation_key(614)) void IMassInertiaParam7::PutYc ( double PVal );
__declspec(implementation_key(615)) double IMassInertiaParam7::GetYc ( );
__declspec(implementation_key(616)) void IMassInertiaParam7::PutZc ( double PVal );
__declspec(implementation_key(617)) double IMassInertiaParam7::GetZc ( );
__declspec(implementation_key(618)) void IMassInertiaParam7::PutManualMassCentre ( VARIANT_BOOL PVal );
__declspec(implementation_key(619)) VARIANT_BOOL IMassInertiaParam7::GetManualMassCentre ( );
__declspec(implementation_key(620)) void IMassInertiaParam7::PutLengthUnits ( enum ksLengthUnitsEnum PVal );
__declspec(implementation_key(621)) enum ksLengthUnitsEnum IMassInertiaParam7::GetLengthUnits ( );
__declspec(implementation_key(622)) void IMassInertiaParam7::PutMassUnits ( enum ksMassUnitsEnum PVal );
__declspec(implementation_key(623)) enum ksMassUnitsEnum IMassInertiaParam7::GetMassUnits ( );
__declspec(implementation_key(624)) void IMassInertiaParam7::PutManualMass ( double _arg1 );
__declspec(implementation_key(625)) double IMassInertiaParam7::GetCalculateMass ( );
__declspec(implementation_key(626)) void IMassInertiaParam7::PutMassSettingMode ( enum ksMassSettingModeEnum PVal );
__declspec(implementation_key(627)) enum ksMassSettingModeEnum IMassInertiaParam7::GetMassSettingMode ( );
__declspec(implementation_key(628)) void IMassInertiaParam7::PutManualDensity ( double _arg1 );
__declspec(implementation_key(629)) double IMassInertiaParam7::GetHandBookDensity ( );
__declspec(implementation_key(630)) void IMassInertiaParam7::PutDensityMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(631)) VARIANT_BOOL IMassInertiaParam7::GetDensityMode ( );
__declspec(implementation_key(632)) double IMassInertiaParam7::GetVolume ( );
__declspec(implementation_key(633)) double IMassInertiaParam7::GetArea ( );
__declspec(implementation_key(634)) void IMassInertiaParam7::PutSourceData ( VARIANT_BOOL PVal );
__declspec(implementation_key(635)) VARIANT_BOOL IMassInertiaParam7::GetSourceData ( );
__declspec(implementation_key(636)) VARIANT_BOOL IMassInertiaParam7::GetActual ( );
__declspec(implementation_key(637)) VARIANT_BOOL IMassInertiaParam7::Calculate ( );
__declspec(implementation_key(638)) double IMassInertiaParam7::GetLX ( );
__declspec(implementation_key(639)) double IMassInertiaParam7::GetLY ( );
__declspec(implementation_key(640)) double IMassInertiaParam7::GetLz ( );
__declspec(implementation_key(641)) double IMassInertiaParam7::GetLxy ( );
__declspec(implementation_key(642)) double IMassInertiaParam7::GetLxz ( );
__declspec(implementation_key(643)) double IMassInertiaParam7::GetLyz ( );
__declspec(implementation_key(644)) double IMassInertiaParam7::GetJx ( );
__declspec(implementation_key(645)) double IMassInertiaParam7::GetJy ( );
__declspec(implementation_key(646)) double IMassInertiaParam7::GetJz ( );
__declspec(implementation_key(647)) double IMassInertiaParam7::GetJxy ( );
__declspec(implementation_key(648)) double IMassInertiaParam7::GetJxz ( );
__declspec(implementation_key(649)) double IMassInertiaParam7::GetJyz ( );
__declspec(implementation_key(650)) double IMassInertiaParam7::GetJx0 ( );
__declspec(implementation_key(651)) double IMassInertiaParam7::GetJy0 ( );
__declspec(implementation_key(652)) double IMassInertiaParam7::GetJz0 ( );
__declspec(implementation_key(653)) VARIANT_BOOL IMassInertiaParam7::GetAxisX ( double * X, double * Y, double * Z );
__declspec(implementation_key(654)) VARIANT_BOOL IMassInertiaParam7::GetAxisY ( double * X, double * Y, double * Z );
__declspec(implementation_key(655)) VARIANT_BOOL IMassInertiaParam7::GetAxisZ ( double * X, double * Y, double * Z );
__declspec(implementation_key(656)) double IMassInertiaParam7::GetMass ( );
__declspec(implementation_key(657)) double IMassInertiaParam7::GetDensity ( );
__declspec(implementation_key(658)) _bstr_t IMassInertiaParam7::GetMaterial ( );
__declspec(implementation_key(659)) VARIANT_BOOL IMassInertiaParam7::SetMaterial ( _bstr_t Name, double Density );
__declspec(implementation_key(660)) void IMassInertiaParam7::PutMaterialLocation ( _bstr_t PVal );
__declspec(implementation_key(661)) _bstr_t IMassInertiaParam7::GetMaterialLocation ( );
__declspec(implementation_key(662)) void IMassInertiaParam7::PutCopySourceData ( VARIANT_BOOL PVal );
__declspec(implementation_key(663)) VARIANT_BOOL IMassInertiaParam7::GetCopySourceData ( );
__declspec(implementation_key(664)) void IThinParameters::PutThin ( VARIANT_BOOL PVal );
__declspec(implementation_key(665)) VARIANT_BOOL IThinParameters::GetThin ( );
__declspec(implementation_key(666)) void IThinParameters::PutThinType ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(667)) ksDirectionTypeEnum IThinParameters::GetThinType ( );
__declspec(implementation_key(668)) void IThinParameters::PutThickness ( VARIANT_BOOL Normal, double PVal );
__declspec(implementation_key(669)) double IThinParameters::GetThickness ( VARIANT_BOOL Normal );
__declspec(implementation_key(670)) VARIANT_BOOL IThinParameters::GetThinParameters ( VARIANT_BOOL * Thin, ksDirectionTypeEnum * ThinType, double * ThicknessNormal, double * ThicknessReverse );
__declspec(implementation_key(671)) VARIANT_BOOL IThinParameters::SetThinParameters ( VARIANT_BOOL Thin, ksDirectionTypeEnum ThinType, double ThicknessNormal, double ThicknessReverse );
__declspec(implementation_key(672)) void IChooseBodies7::PutChooseBodiesType ( enum ksChooseBodiesType Type );
__declspec(implementation_key(673)) enum ksChooseBodiesType IChooseBodies7::GetChooseBodiesType ( );
__declspec(implementation_key(674)) void IChooseBodies7::PutBodies ( const _variant_t & Result );
__declspec(implementation_key(675)) _variant_t IChooseBodies7::GetBodies ( );
__declspec(implementation_key(676)) void IChooseObjects::PutChooseType ( enum ksChooseType CurrentValue );
__declspec(implementation_key(677)) enum ksChooseType IChooseObjects::GetChooseType ( );
__declspec(implementation_key(678)) void IChooseObjects::PutChoosePartsType ( enum ksChoosePartsType Type );
__declspec(implementation_key(679)) enum ksChoosePartsType IChooseObjects::GetChoosePartsType ( );
__declspec(implementation_key(680)) void IChooseObjects::PutChooseBodies ( const _variant_t & Result );
__declspec(implementation_key(681)) _variant_t IChooseObjects::GetChooseBodies ( );
__declspec(implementation_key(682)) void IChooseObjects::PutChooseParts ( const _variant_t & Result );
__declspec(implementation_key(683)) _variant_t IChooseObjects::GetChooseParts ( );
__declspec(implementation_key(684)) _bstr_t ISourcePart7Params::GetSourceName ( );
__declspec(implementation_key(685)) void ISourcePart7Params::PutSourceName ( _bstr_t PVal );
__declspec(implementation_key(686)) _bstr_t ISourcePart7Params::GetSourceMarking ( );
__declspec(implementation_key(687)) void ISourcePart7Params::PutSourceMarking ( _bstr_t PVal );
__declspec(implementation_key(688)) _bstr_t ISourcePart7Params::GetDocumentAuthor ( );
__declspec(implementation_key(689)) void ISourcePart7Params::PutDocumentAuthor ( _bstr_t PVal );
__declspec(implementation_key(690)) _variant_t ISourcePart7Params::GetDocumentComment ( );
__declspec(implementation_key(691)) void ISourcePart7Params::PutDocumentComment ( const _variant_t & PVal );
__declspec(implementation_key(692)) VARIANT_BOOL IModelCurve3D::GetVertexVisible ( );
__declspec(implementation_key(693)) void IModelCurve3D::PutVertexVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(694)) enum ksAnnotationSymbolEnum IModelCurve3D::GetVertexStyle ( );
__declspec(implementation_key(695)) void IModelCurve3D::PutVertexStyle ( enum ksAnnotationSymbolEnum Style );
__declspec(implementation_key(696)) enum ksCurveStyleEnum IModelCurve3D::GetEdgesStyle ( );
__declspec(implementation_key(697)) void IModelCurve3D::PutEdgesStyle ( enum ksCurveStyleEnum Style );
__declspec(implementation_key(698)) _variant_t IModelCurve3D::GetVerticesParams ( );
__declspec(implementation_key(699)) void IRotated1::PutOperationResult ( enum ksOperationResultEnum Result );
__declspec(implementation_key(700)) enum ksOperationResultEnum IRotated1::GetOperationResult ( );
__declspec(implementation_key(701)) _bstr_t IUserParameters::GetLibraryFileName ( );
__declspec(implementation_key(702)) void IUserParameters::PutLibraryFileName ( _bstr_t PVal );
__declspec(implementation_key(703)) _bstr_t IUserParameters::GetLibraryName ( );
__declspec(implementation_key(704)) void IUserParameters::PutLibraryName ( _bstr_t PVal );
__declspec(implementation_key(705)) long IUserParameters::GetCommand ( );
__declspec(implementation_key(706)) void IUserParameters::PutCommand ( long PVal );
__declspec(implementation_key(707)) void IUserParameters::PutObjectID ( _bstr_t PVal );
__declspec(implementation_key(708)) _bstr_t IUserParameters::GetObjectID ( );
__declspec(implementation_key(709)) void IUserParameters::PutUserParams ( const _variant_t & PVal );
__declspec(implementation_key(710)) _variant_t IUserParameters::GetUserParams ( );
__declspec(implementation_key(711)) VARIANT_BOOL IUserParameters::ClearUserParameters ( );
__declspec(implementation_key(712)) VARIANT_BOOL IThreadsParameters::Init ( _bstr_t StandardFileName, double Diameter, double Pitch );
__declspec(implementation_key(713)) double IThreadsParameters::GetDiameter ( );
__declspec(implementation_key(714)) void IThreadsParameters::PutDiameter ( double PVal );
__declspec(implementation_key(715)) double IThreadsParameters::GetPitch ( );
__declspec(implementation_key(716)) void IThreadsParameters::PutPitch ( double PVal );
__declspec(implementation_key(717)) _bstr_t IThreadsParameters::GetThreadStandardFileName ( );
__declspec(implementation_key(718)) double IThreadsParameters::GetInternalDiameterCoefficient ( );
__declspec(implementation_key(719)) double IThreadsParameters::GetConicalThreadAngle ( );
__declspec(implementation_key(720)) VARIANT_BOOL IThreadsParameters::GetInternal ( );
__declspec(implementation_key(721)) void IShellSurface::PutClosedShell ( VARIANT_BOOL PVal );
__declspec(implementation_key(722)) VARIANT_BOOL IShellSurface::GetClosedShell ( );
__declspec(implementation_key(723)) double ITessellation7::GetFacetSize ( );
__declspec(implementation_key(724)) void ITessellation7::PutFacetSize ( double PVal );
__declspec(implementation_key(725)) double ITessellation7::GetFacetSag ( );
__declspec(implementation_key(726)) void ITessellation7::PutFacetSag ( double PVal );
__declspec(implementation_key(727)) double ITessellation7::GetFacetAngle ( );
__declspec(implementation_key(728)) void ITessellation7::PutFacetAngle ( double PVal );
__declspec(implementation_key(729)) VARIANT_BOOL ITessellation7::GetNeedParams ( );
__declspec(implementation_key(730)) void ITessellation7::PutNeedParams ( VARIANT_BOOL PVal );
__declspec(implementation_key(731)) VARIANT_BOOL ITessellation7::RebuildTessellation ( );
__declspec(implementation_key(732)) VARIANT_BOOL ITessellation7::GetFacetPoints ( VARIANT * Points, VARIANT * Indexes, VARIANT * Normals );
__declspec(implementation_key(733)) _variant_t ITessellation7::GetFacetParams ( );
__declspec(implementation_key(734)) void ISheetMetalUndercut::PutDistanceType ( enum ksUndercutDistanceTypeEnum PVal );
__declspec(implementation_key(735)) enum ksUndercutDistanceTypeEnum ISheetMetalUndercut::GetDistanceType ( );
__declspec(implementation_key(736)) void ISheetMetalUndercut::PutDistance ( double PVal );
__declspec(implementation_key(737)) double ISheetMetalUndercut::GetDistance ( );
__declspec(implementation_key(738)) void ISheetMetalUndercut::PutWithAddMaterial ( VARIANT_BOOL PVal );
__declspec(implementation_key(739)) VARIANT_BOOL ISheetMetalUndercut::GetWithAddMaterial ( );
__declspec(implementation_key(740)) double IBranchs::GetX0 ( );
__declspec(implementation_key(741)) void IBranchs::PutX0 ( double Result );
__declspec(implementation_key(742)) double IBranchs::GetY0 ( );
__declspec(implementation_key(743)) void IBranchs::PutY0 ( double Result );
__declspec(implementation_key(744)) long IBranchs::GetBranchCount ( );
__declspec(implementation_key(745)) void IBranchs::PutBranchPoints ( long Index, const _variant_t & PVal );
__declspec(implementation_key(746)) _variant_t IBranchs::GetBranchPoints ( long Index );
__declspec(implementation_key(747)) long IBranchs::GetBranchPointsCount ( long Index );
__declspec(implementation_key(748)) void IBranchs::PutBranchX ( long Index, double PVal );
__declspec(implementation_key(749)) double IBranchs::GetBranchX ( long Index );
__declspec(implementation_key(750)) void IBranchs::PutBranchY ( long Index, double PVal );
__declspec(implementation_key(751)) double IBranchs::GetBranchY ( long Index );
__declspec(implementation_key(752)) VARIANT_BOOL IBranchs::AddBranch ( long Index, const _variant_t & Points );
__declspec(implementation_key(753)) VARIANT_BOOL IBranchs::AddBranchByPoint ( long Index, double X, double Y );
__declspec(implementation_key(754)) VARIANT_BOOL IBranchs::DeleteBranch ( long Index );
__declspec(implementation_key(755)) void IAxisLineParam::PutJutLength ( double PVal );
__declspec(implementation_key(756)) double IAxisLineParam::GetJutLength ( );
__declspec(implementation_key(757)) void IAxisLineParam::PutDottedLength ( double PVal );
__declspec(implementation_key(758)) double IAxisLineParam::GetDottedLength ( );
__declspec(implementation_key(759)) void IAxisLineParam::PutInterval ( double PVal );
__declspec(implementation_key(760)) double IAxisLineParam::GetInterval ( );
__declspec(implementation_key(761)) void IAxisLineParam::PutAutoDetectedDash ( VARIANT_BOOL PVal );
__declspec(implementation_key(762)) VARIANT_BOOL IAxisLineParam::GetAutoDetectedDash ( );
__declspec(implementation_key(763)) void IAxisLineParam::PutDashMaxLength ( double PVal );
__declspec(implementation_key(764)) double IAxisLineParam::GetDashMaxLength ( );
__declspec(implementation_key(765)) void IAxisLineParam::PutJutLengthModify ( VARIANT_BOOL PVal );
__declspec(implementation_key(766)) VARIANT_BOOL IAxisLineParam::GetJutLengthModify ( );
__declspec(implementation_key(767)) void IAxisLineParam::PutDottedLengthModify ( VARIANT_BOOL PVal );
__declspec(implementation_key(768)) VARIANT_BOOL IAxisLineParam::GetDottedLengthModify ( );
__declspec(implementation_key(769)) void IAxisLineParam::PutIntervalModify ( VARIANT_BOOL PVal );
__declspec(implementation_key(770)) VARIANT_BOOL IAxisLineParam::GetIntervalModify ( );
__declspec(implementation_key(771)) void IAxisLineParam::PutAutoDetectedDashModify ( VARIANT_BOOL PVal );
__declspec(implementation_key(772)) VARIANT_BOOL IAxisLineParam::GetAutoDetectedDashModify ( );
__declspec(implementation_key(773)) void IAxisLineParam::PutDashMaxLengthModify ( VARIANT_BOOL PVal );
__declspec(implementation_key(774)) VARIANT_BOOL IAxisLineParam::GetDashMaxLengthModify ( );
__declspec(implementation_key(775)) void IAxisLineParam::PutJutLength1 ( double PVal );
__declspec(implementation_key(776)) double IAxisLineParam::GetJutLength1 ( );
__declspec(implementation_key(777)) void IAxisLineParam::PutJutLength2 ( double PVal );
__declspec(implementation_key(778)) double IAxisLineParam::GetJutLength2 ( );
__declspec(implementation_key(779)) _variant_t IBoundariesObject::GetBoundaries ( );
__declspec(implementation_key(780)) VARIANT_BOOL IBoundariesObject::AddBoundaries ( const _variant_t & Objects, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(781)) VARIANT_BOOL IBoundariesObject::Clear ( );
__declspec(implementation_key(782)) enum ksAnnotativeTerminatorSignEnum IAnnotativeObject::GetSign1 ( );
__declspec(implementation_key(783)) void IAnnotativeObject::PutSign1 ( enum ksAnnotativeTerminatorSignEnum Result );
__declspec(implementation_key(784)) enum ksAnnotativeTerminatorSignEnum IAnnotativeObject::GetSign2 ( );
__declspec(implementation_key(785)) void IAnnotativeObject::PutSign2 ( enum ksAnnotativeTerminatorSignEnum Result );
__declspec(implementation_key(786)) VARIANT_BOOL IPropertyEditCheckBox::GetCheckButton ( );
__declspec(implementation_key(787)) void IPropertyEditCheckBox::PutCheckButton ( VARIANT_BOOL PVal );
__declspec(implementation_key(788)) VARIANT_BOOL IPropertyEditCheckBox::GetEnableCheckButton ( );
__declspec(implementation_key(789)) void IPropertyEditCheckBox::PutEnableCheckButton ( VARIANT_BOOL PVal );
__declspec(implementation_key(790)) HRESULT IPropertyEditCheckBox::SetCustomBitmaps ( const _variant_t & IdUnchecked, const _variant_t & IdChecked, const _variant_t & IdIndeterminate, const _variant_t & HInstance );
__declspec(implementation_key(791)) _bstr_t IPropertyEditCheckBox::GetDefaultValue ( );
__declspec(implementation_key(792)) void IPropertyEditCheckBox::PutDefaultValue ( _bstr_t PVal );
__declspec(implementation_key(793)) VARIANT_BOOL IPropertyEditCheckBox::GetMissing ( );
__declspec(implementation_key(794)) void IPropertyEditCheckBox::PutMissing ( VARIANT_BOOL PVal );
__declspec(implementation_key(795)) void IPropertyEditCheckBox::PutEnableDeleteValue ( VARIANT_BOOL PVal );
__declspec(implementation_key(796)) VARIANT_BOOL IPropertyEditCheckBox::GetEnableDeleteValue ( );
__declspec(implementation_key(797)) void IPropertyEditCheckBox::PutIsLinkValue ( VARIANT_BOOL PVal );
__declspec(implementation_key(798)) VARIANT_BOOL IPropertyEditCheckBox::GetIsLinkValue ( );
__declspec(implementation_key(799)) void ICopyObjectParam1::PutStoragesCopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(800)) VARIANT_BOOL ICopyObjectParam1::GetStoragesCopy ( );
__declspec(implementation_key(801)) void ICopyObjectParam1::PutHyperLinksCopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(802)) VARIANT_BOOL ICopyObjectParam1::GetHyperLinksCopy ( );
__declspec(implementation_key(803)) void INewPartDocumentSettings::PutMaterial ( _bstr_t PVal );
__declspec(implementation_key(804)) _bstr_t INewPartDocumentSettings::GetMaterial ( );
__declspec(implementation_key(805)) void INewPartDocumentSettings::PutDensity ( double PVal );
__declspec(implementation_key(806)) double INewPartDocumentSettings::GetDensity ( );
__declspec(implementation_key(807)) void INewPartDocumentSettings::PutMaterialLocation ( _bstr_t PVal );
__declspec(implementation_key(808)) _bstr_t INewPartDocumentSettings::GetMaterialLocation ( );
__declspec(implementation_key(809)) IHatchParamPtr INewPartDocumentSettings::GetHatchParam ( );
__declspec(implementation_key(810)) void IAxis3D1::PutShowName ( VARIANT_BOOL PVal );
__declspec(implementation_key(811)) VARIANT_BOOL IAxis3D1::GetShowName ( );
__declspec(implementation_key(812)) void IPlane3D1::PutScaleGabarit ( VARIANT_BOOL PVal );
__declspec(implementation_key(813)) VARIANT_BOOL IPlane3D1::GetScaleGabarit ( );
__declspec(implementation_key(814)) void IPlane3D1::PutShowName ( VARIANT_BOOL PVal );
__declspec(implementation_key(815)) VARIANT_BOOL IPlane3D1::GetShowName ( );
__declspec(implementation_key(816)) double IPlane3D1::GetParamUMin ( );
__declspec(implementation_key(817)) double IPlane3D1::GetParamUMax ( );
__declspec(implementation_key(818)) double IPlane3D1::GetParamVMin ( );
__declspec(implementation_key(819)) double IPlane3D1::GetParamVMax ( );
__declspec(implementation_key(820)) VARIANT_BOOL IPlane3D1::SetLimit ( double Umin, double Vmin, double Umax, double Vmax );
__declspec(implementation_key(821)) void ISheetMetalRuledShell::PutDraftValue ( VARIANT_BOOL Normal, double PVal );
__declspec(implementation_key(822)) double ISheetMetalRuledShell::GetDraftValue ( VARIANT_BOOL Normal );
__declspec(implementation_key(823)) void ISheetMetalRuledShell::PutDraftOutward ( VARIANT_BOOL Normal, VARIANT_BOOL PVal );
__declspec(implementation_key(824)) VARIANT_BOOL ISheetMetalRuledShell::GetDraftOutward ( VARIANT_BOOL Normal );
__declspec(implementation_key(825)) void ISheetMetalRuledShell::PutKeepRadius ( VARIANT_BOOL PVal );
__declspec(implementation_key(826)) VARIANT_BOOL ISheetMetalRuledShell::GetKeepRadius ( );
__declspec(implementation_key(827)) void ISheetMetalRuledShell::PutRuledBorder ( enum ksRuledBorderEnum PVal );
__declspec(implementation_key(828)) enum ksRuledBorderEnum ISheetMetalRuledShell::GetRuledBorder ( );
__declspec(implementation_key(829)) void ISheetMetalRuledShell::PutRuledJoint ( enum ksRuledJointEnum PVal );
__declspec(implementation_key(830)) enum ksRuledJointEnum ISheetMetalRuledShell::GetRuledJoint ( );
__declspec(implementation_key(831)) double ISheetMetalRuledShell::GetGapValue ( );
__declspec(implementation_key(832)) void ISheetMetalRuledShell::PutGapValue ( double PVal );
__declspec(implementation_key(833)) void ISheetMetalRuledShell::PutOffsetGapType ( enum ksOffsetGapType PVal );
__declspec(implementation_key(834)) enum ksOffsetGapType ISheetMetalRuledShell::GetOffsetGapType ( );
__declspec(implementation_key(835)) void ISheetMetalRuledShell::PutGapOffsetU ( double PVal );
__declspec(implementation_key(836)) double ISheetMetalRuledShell::GetGapOffsetU ( );
__declspec(implementation_key(837)) void ISheetMetalRuledShell::PutGapOffsetLength ( double PVal );
__declspec(implementation_key(838)) double ISheetMetalRuledShell::GetGapOffsetLength ( );
__declspec(implementation_key(839)) void ISheetMetalRuledShell::PutGapDraftPosition ( double PVal );
__declspec(implementation_key(840)) double ISheetMetalRuledShell::GetGapDraftPosition ( );
__declspec(implementation_key(841)) void ISheetMetalRuledShell::PutUseSegmentation ( VARIANT_BOOL PVal );
__declspec(implementation_key(842)) VARIANT_BOOL ISheetMetalRuledShell::GetUseSegmentation ( );
__declspec(implementation_key(843)) void ISheetMetalRuledShell::PutSegmentationMethod ( enum ksSegmentationMethodEnum PVal );
__declspec(implementation_key(844)) enum ksSegmentationMethodEnum ISheetMetalRuledShell::GetSegmentationMethod ( );
__declspec(implementation_key(845)) void ISheetMetalRuledShell::PutSegmentationSplitValue ( double PVal );
__declspec(implementation_key(846)) double ISheetMetalRuledShell::GetSegmentationSplitValue ( );
__declspec(implementation_key(847)) VARIANT_BOOL ksFindObjectParametersNotify::FilterObject ( IDispatch * Object );
__declspec(implementation_key(848)) void IPlacement3DManipulator::PutPrimitiveVisible ( enum ksManipulatorPrimitiveEnum Primitive, VARIANT_BOOL PVal );
__declspec(implementation_key(849)) VARIANT_BOOL IPlacement3DManipulator::GetPrimitiveVisible ( enum ksManipulatorPrimitiveEnum Primitive );
__declspec(implementation_key(850)) void IPlacement3DManipulator::PutPrimitiveDisabled ( enum ksManipulatorPrimitiveEnum Primitive, VARIANT_BOOL PVal );
__declspec(implementation_key(851)) VARIANT_BOOL IPlacement3DManipulator::GetPrimitiveDisabled ( enum ksManipulatorPrimitiveEnum Primitive );
__declspec(implementation_key(852)) void IPlacement3DManipulator::PutPrimitiveSelected ( enum ksManipulatorPrimitiveEnum PVal );
__declspec(implementation_key(853)) enum ksManipulatorPrimitiveEnum IPlacement3DManipulator::GetPrimitiveSelected ( );
__declspec(implementation_key(854)) void IPlacement3DManipulator::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(855)) VARIANT_BOOL IPlacement3DManipulator::GetReadOnly ( );
__declspec(implementation_key(856)) void IPlacement3DManipulator::PutMode ( long PVal );
__declspec(implementation_key(857)) long IPlacement3DManipulator::GetMode ( );
__declspec(implementation_key(858)) VARIANT_BOOL IPlacement3DManipulator::SetRotateRange ( double Min, double Max );
__declspec(implementation_key(859)) VARIANT_BOOL IPlacement3DManipulator::SetShiftRange ( double Min, double Max );
__declspec(implementation_key(860)) void IPlacement3DManipulator::PutRotateStep ( double PVal );
__declspec(implementation_key(861)) double IPlacement3DManipulator::GetRotateStep ( );
__declspec(implementation_key(862)) void IPlacement3DManipulator::PutShiftStep ( double PVal );
__declspec(implementation_key(863)) double IPlacement3DManipulator::GetShiftStep ( );
__declspec(implementation_key(864)) void IPlacement3DManipulator::PutEditValue ( double PVal );
__declspec(implementation_key(865)) double IPlacement3DManipulator::GetEditValue ( );
__declspec(implementation_key(866)) VARIANT_BOOL IPlacement3DManipulator::GetIsEditCreated ( );
__declspec(implementation_key(867)) long IApplicationLicenseManager::GetKompasVariant ( );
__declspec(implementation_key(868)) void IApplicationLicenseManager::PutKompasModuleActive ( enum ksKompasModuleEnum Module, VARIANT_BOOL PVal );
__declspec(implementation_key(869)) VARIANT_BOOL IApplicationLicenseManager::GetKompasModuleActive ( enum ksKompasModuleEnum Module );
__declspec(implementation_key(870)) VARIANT_BOOL IApplicationLicenseManager::EnableKompasInvisible ( _bstr_t Key, _bstr_t Signature );
__declspec(implementation_key(871)) VARIANT_BOOL IApplicationLicenseManager::GetLibraryActive ( long ProductNumber );
__declspec(implementation_key(872)) void IApplicationLicenseManager::PutLibraryActive ( long ProductNumber, VARIANT_BOOL PVal );
__declspec(implementation_key(873)) enum ksProtectProductStatusEnum IApplicationLicenseManager::GetLibraryStatus ( long ProductNumber );
__declspec(implementation_key(874)) VARIANT_BOOL IApplicationLicenseManager::GetLibraryTrialStatus ( long ProductNumber );
__declspec(implementation_key(875)) VARIANT_BOOL IApplicationLicenseManager::GetLibraryLocalStatus ( long ProductNumber );
__declspec(implementation_key(876)) _bstr_t IApplicationLicenseManager::GetLibraryProductName ( long ProductNumber );
__declspec(implementation_key(877)) _bstr_t IApplicationLicenseManager::GetLibraryProductKeyInfo ( long ProductNumber );
__declspec(implementation_key(878)) long IApplicationLicenseManager::RegisterLibraryNumber ( long ProductNumber );
__declspec(implementation_key(879)) VARIANT_BOOL IApplicationLicenseManager::UnRegisterLibraryNumber ( long ProductNumbUnicueId );
__declspec(implementation_key(880)) void IPLMObject::PutPLMStatus ( enum ksPLMStatusEnum PVal );
__declspec(implementation_key(881)) enum ksPLMStatusEnum IPLMObject::GetPLMStatus ( );
__declspec(implementation_key(882)) void IPLMObject::PutPLMChange ( enum ksPLMChangesEnum PVal );
__declspec(implementation_key(883)) enum ksPLMChangesEnum IPLMObject::GetPLMChange ( );
__declspec(implementation_key(884)) void IPLMObject::PutPLMPropertyValue ( enum ksPLMPropertyEnum Property, const _variant_t & PVal );
__declspec(implementation_key(885)) _variant_t IPLMObject::GetPLMPropertyValue ( enum ksPLMPropertyEnum Property );
__declspec(implementation_key(886)) VARIANT_BOOL IPLMObjectsManager::SetPLMChangesAttrAvailability ( VARIANT_BOOL Available, VARIANT_BOOL Enabled );
__declspec(implementation_key(887)) VARIANT_BOOL IPLMObjectsManager::SetPLMStatusAttrAvailability ( VARIANT_BOOL Available, VARIANT_BOOL Enabled );
__declspec(implementation_key(888)) void IPLMObjectsManager::PutPLMStatus ( _bstr_t FileName, enum ksPLMStatusEnum PVal );
__declspec(implementation_key(889)) enum ksPLMStatusEnum IPLMObjectsManager::GetPLMStatus ( _bstr_t FileName );
__declspec(implementation_key(890)) void IPLMObjectsManager::PutPLMChange ( _bstr_t FileName, enum ksPLMChangesEnum PVal );
__declspec(implementation_key(891)) enum ksPLMChangesEnum IPLMObjectsManager::GetPLMChange ( _bstr_t FileName );
__declspec(implementation_key(892)) VARIANT_BOOL IPLMObjectsManager::SetPLMPropertyAvailability ( enum ksPLMPropertyEnum Property, VARIANT_BOOL Available, VARIANT_BOOL Enabled, const _variant_t & ValueList );
__declspec(implementation_key(893)) void IPLMObjectsManager::PutPLMPropertyValue ( enum ksPLMPropertyEnum Property, _bstr_t FileName, const _variant_t & PVal );
__declspec(implementation_key(894)) _variant_t IPLMObjectsManager::GetPLMPropertyValue ( enum ksPLMPropertyEnum Property, _bstr_t FileName );
__declspec(implementation_key(895)) VARIANT_BOOL IMultiThicknessGroupsManager::GetMultiThick ( );
__declspec(implementation_key(896)) void IMultiThicknessGroupsManager::PutMultiThick ( VARIANT_BOOL PVal );
__declspec(implementation_key(897)) VARIANT_BOOL IMultiThicknessGroupsManager::AddMultiThicknessGroup ( enum ksMultiThicknessGroupTypeEnum Type, const _variant_t & Objects, double Thickness );
__declspec(implementation_key(898)) long IMultiThicknessGroupsManager::GetMultiThicknessGroupsCount ( enum ksMultiThicknessGroupTypeEnum Type );
__declspec(implementation_key(899)) _variant_t IMultiThicknessGroupsManager::GetMultiThicknessGroupsObjects ( enum ksMultiThicknessGroupTypeEnum Type, long Index );
__declspec(implementation_key(900)) void IMultiThicknessGroupsManager::PutMultiThicknessGroupsObjects ( enum ksMultiThicknessGroupTypeEnum Type, long Index, const _variant_t & Result );
__declspec(implementation_key(901)) double IMultiThicknessGroupsManager::GetMultiThicknessGroupsThickness ( enum ksMultiThicknessGroupTypeEnum Type, long Index );
__declspec(implementation_key(902)) void IMultiThicknessGroupsManager::PutMultiThicknessGroupsThickness ( enum ksMultiThicknessGroupTypeEnum Type, long Index, double Result );
__declspec(implementation_key(903)) VARIANT_BOOL IMultiThicknessGroupsManager::DeleteMultiThicknessGroup ( enum ksMultiThicknessGroupTypeEnum Type, long Index );
__declspec(implementation_key(904)) VARIANT_BOOL IMultiThicknessGroupsManager::DestroyMultiThicknessGroup ( enum ksMultiThicknessGroupTypeEnum Type, long Index );
__declspec(implementation_key(905)) VARIANT_BOOL IMultiThicknessGroupsManager::ExcludeMultiThicknessGroupObjects ( const _variant_t & Objects );
__declspec(implementation_key(906)) VARIANT_BOOL IMultiThicknessGroupsManager::ClearMultiThicknessGroups ( );
__declspec(implementation_key(907)) VARIANT_BOOL IContextPanel::Fill ( _bstr_t ContextPanelID );
__declspec(implementation_key(908)) VARIANT_BOOL IContextPanel::FillComboBoxImage ( _bstr_t ComboBoxID, _bstr_t CommandsGroupID, const _variant_t & FilterCommands, long CurrentCommand );
__declspec(implementation_key(909)) VARIANT_BOOL IContextPanel::FillComboBoxStyle ( _bstr_t ComboBoxID, enum ControlTypeEnum StyleType, const _variant_t & Styles, long CurrentStyleId );
__declspec(implementation_key(910)) VARIANT_BOOL IDimension3D::GetTextPosition ( double * X, double * Y, double * Z );
__declspec(implementation_key(911)) VARIANT_BOOL IDimension3D::SetTextPosition ( double X, double Y, double Z );
__declspec(implementation_key(912)) VARIANT_BOOL IDimension3D::GetDimensionPoint ( enum ksDimensionPointEnum DimensionPoint, long PointIndex, double * X, double * Y, double * Z );
__declspec(implementation_key(913)) VARIANT_BOOL IDimension2D::GetTextPosition ( double * X, double * Y );
__declspec(implementation_key(914)) VARIANT_BOOL IDimension2D::SetTextPosition ( double X, double Y );
__declspec(implementation_key(915)) VARIANT_BOOL IDimension2D::GetAutoSorted ( );
__declspec(implementation_key(916)) void IDimension2D::PutAutoSorted ( VARIANT_BOOL Result );
__declspec(implementation_key(917)) VARIANT_BOOL IDimension2D::GetDimensionPoint ( enum ksDimensionPointEnum DimensionPoint, long PointIndex, double * X, double * Y );
__declspec(implementation_key(918)) VARIANT_BOOL IDesignation3D::GetDesignationPoint ( enum ksDesignationPointEnum DimensionPoint, long PointIndex, double * X, double * Y, double * Z );
__declspec(implementation_key(919)) VARIANT_BOOL IDesignation2D::GetDesignationPoint ( enum ksDesignationPointEnum DimensionPoint, long PointIndex, double * X, double * Y );
__declspec(implementation_key(920)) void ISystemTemplatesSettings::PutTemplatePath ( enum DocumentTypeEnum DocumentType, _bstr_t DocumentTypeId, _bstr_t Result );
__declspec(implementation_key(921)) _bstr_t ISystemTemplatesSettings::GetTemplatePath ( enum DocumentTypeEnum DocumentType, _bstr_t DocumentTypeId );
__declspec(implementation_key(922)) VARIANT_BOOL ISystemTemplatesSettings::GetAddGroupSpecificationTemplate ( );
__declspec(implementation_key(923)) void ISystemTemplatesSettings::PutAddGroupSpecificationTemplate ( VARIANT_BOOL PVal );
__declspec(implementation_key(924)) long ISystemTemplatesSettings::GetGroupSpecificationEmbodimentCount ( );
__declspec(implementation_key(925)) void ISystemTemplatesSettings::PutGroupSpecificationEmbodimentCount ( long PVal );
__declspec(implementation_key(926)) void ISystemTemplatesSettings::PutSpecificationTemplatePath ( enum ksSpecificationVariantEnum SpcType, _bstr_t Result );
__declspec(implementation_key(927)) _bstr_t ISystemTemplatesSettings::GetSpecificationTemplatePath ( enum ksSpecificationVariantEnum SpcType );
__declspec(implementation_key(928)) IKompasAPIObjectPtr IKompasAPIObject::GetParent ( );
__declspec(implementation_key(929)) IApplicationPtr IKompasAPIObject::GetApplication ( );
__declspec(implementation_key(930)) enum KompasAPIObjectTypeEnum IKompasAPIObject::GetType ( );
__declspec(implementation_key(931)) long IKompasAPIObject::GetReference ( );
__declspec(implementation_key(932)) IUnknownPtr IKompasCollection::Get_NewEnum ( );
__declspec(implementation_key(933)) long IKompasCollection::GetCount ( );
__declspec(implementation_key(934)) void IDocumentFrame::PutRegime ( enum FrameRegimeEnum PVal );
__declspec(implementation_key(935)) enum FrameRegimeEnum IDocumentFrame::GetRegime ( );
__declspec(implementation_key(936)) void IDocumentFrame::PutActive ( VARIANT_BOOL PVal );
__declspec(implementation_key(937)) VARIANT_BOOL IDocumentFrame::GetActive ( );
__declspec(implementation_key(938)) _bstr_t IDocumentFrame::GetCaption ( );
__declspec(implementation_key(939)) HRESULT IDocumentFrame::Zoom ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(940)) HRESULT IDocumentFrame::ZoomPrevNextOrAll ( enum ZoomTypeEnum Type );
__declspec(implementation_key(941)) HRESULT IDocumentFrame::ZoomScale ( double X, double Y, double Scale );
__declspec(implementation_key(942)) HRESULT IDocumentFrame::GetZoomScale ( double * X, double * Y, double * Scale );
__declspec(implementation_key(943)) OLE_HANDLE IDocumentFrame::GetHWND ( );
__declspec(implementation_key(944)) HRESULT IDocumentFrame::SetGabaritModifying ( );
__declspec(implementation_key(945)) HRESULT IDocumentFrame::RefreshWindow ( );
__declspec(implementation_key(946)) VARIANT_BOOL IDocumentFrame::ConvertCoordinates ( enum ConvertCoordTypeEnum Type, long LX, long LY, double * X, double * Y, double * Z );
__declspec(implementation_key(947)) VARIANT_BOOL IDocumentFrame::ExecuteKompasCommand ( long CommandID, VARIANT_BOOL PostMessage );
__declspec(implementation_key(948)) VARIANT_BOOL IDocumentFrame::IsKompasCommandEnable ( long CommandID );
__declspec(implementation_key(949)) long IDocumentFrame::IsKompasCommandCheck ( long CommandID );
__declspec(implementation_key(950)) _variant_t IDocumentFrame::GetFPSData ( );
__declspec(implementation_key(951)) VARIANT_BOOL IDocumentFrame::GetPickRay ( long wx, long wy, double * X, double * Y, double * Z, double * zx, double * zy, double * zz );
__declspec(implementation_key(952)) VARIANT_BOOL IDocumentFrame::GetRoundModeOn ( );
__declspec(implementation_key(953)) double IDocumentFrame::GetCurrentCursorStep ( );
__declspec(implementation_key(954)) VARIANT_BOOL IDocumentFrame::GetWorkAreaRect ( long * Left, long * Top, long * Right, long * Bottom );
__declspec(implementation_key(955)) VARIANT_BOOL IDocumentFrame::UnConvertCoordinates ( enum ConvertCoordTypeEnum Type, double X, double Y, double Z, long * LX, long * LY );
__declspec(implementation_key(956)) VARIANT_BOOL IDocumentFrame::SetZoomScale ( double X, double Y, double Scale, VARIANT_BOOL ViewParam );
__declspec(implementation_key(957)) IDocumentFramePtr IDocumentFrames::GetItem ( const _variant_t & Index );
__declspec(implementation_key(958)) _bstr_t ITextFont::GetFontName ( );
__declspec(implementation_key(959)) void ITextFont::PutFontName ( _bstr_t PVal );
__declspec(implementation_key(960)) double ITextFont::GetHeight ( );
__declspec(implementation_key(961)) void ITextFont::PutHeight ( double PVal );
__declspec(implementation_key(962)) double ITextFont::GetWidthFactor ( );
__declspec(implementation_key(963)) void ITextFont::PutWidthFactor ( double PVal );
__declspec(implementation_key(964)) long ITextFont::GetColor ( );
__declspec(implementation_key(965)) void ITextFont::PutColor ( long PVal );
__declspec(implementation_key(966)) VARIANT_BOOL ITextFont::GetBold ( );
__declspec(implementation_key(967)) void ITextFont::PutBold ( VARIANT_BOOL PVal );
__declspec(implementation_key(968)) VARIANT_BOOL ITextFont::GetItalic ( );
__declspec(implementation_key(969)) void ITextFont::PutItalic ( VARIANT_BOOL PVal );
__declspec(implementation_key(970)) VARIANT_BOOL ITextFont::GetUnderline ( );
__declspec(implementation_key(971)) void ITextFont::PutUnderline ( VARIANT_BOOL PVal );
__declspec(implementation_key(972)) double ITextFont::GetTextLineStep ( );
__declspec(implementation_key(973)) void ITextFont::PutTextLineStep ( double PVal );
__declspec(implementation_key(974)) long ITabulator::GetPosition ( );
__declspec(implementation_key(975)) void ITabulator::PutPosition ( long PVal );
__declspec(implementation_key(976)) enum ksAlignEnum ITabulator::GetAlign ( );
__declspec(implementation_key(977)) void ITabulator::PutAlign ( enum ksAlignEnum PVal );
__declspec(implementation_key(978)) enum ksTabulatorFillingEnum ITabulator::GetFilling ( );
__declspec(implementation_key(979)) void ITabulator::PutFilling ( enum ksTabulatorFillingEnum PVal );
__declspec(implementation_key(980)) ITabulatorPtr ITabulators::GetItem ( const _variant_t & Index );
__declspec(implementation_key(981)) ITabulatorPtr ITabulators::Add ( long Position );
__declspec(implementation_key(982)) VARIANT_BOOL ITabulators::Clear ( );
__declspec(implementation_key(983)) _bstr_t ITextStyle::GetName ( );
__declspec(implementation_key(984)) void ITextStyle::PutName ( _bstr_t PVal );
__declspec(implementation_key(985)) long ITextStyle::GetNumber ( );
__declspec(implementation_key(986)) void ITextStyle::PutNumber ( long PVal );
__declspec(implementation_key(987)) double ITextStyle::GetStep ( );
__declspec(implementation_key(988)) void ITextStyle::PutStep ( double PVal );
__declspec(implementation_key(989)) enum ksAlignEnum ITextStyle::GetAlign ( );
__declspec(implementation_key(990)) void ITextStyle::PutAlign ( enum ksAlignEnum PVal );
__declspec(implementation_key(991)) double ITextStyle::GetIndentedLine ( );
__declspec(implementation_key(992)) void ITextStyle::PutIndentedLine ( double PVal );
__declspec(implementation_key(993)) double ITextStyle::GetStepBeforeParagraph ( );
__declspec(implementation_key(994)) void ITextStyle::PutStepBeforeParagraph ( double PVal );
__declspec(implementation_key(995)) double ITextStyle::GetStepAfterParagraph ( );
__declspec(implementation_key(996)) void ITextStyle::PutStepAfterParagraph ( double PVal );
__declspec(implementation_key(997)) double ITextStyle::GetLeftEdge ( );
__declspec(implementation_key(998)) void ITextStyle::PutLeftEdge ( double PVal );
__declspec(implementation_key(999)) double ITextStyle::GetRightEdge ( );
__declspec(implementation_key(1000)) void ITextStyle::PutRightEdge ( double PVal );
__declspec(implementation_key(1001)) VARIANT_BOOL ITextStyle::GetExtended ( );
__declspec(implementation_key(1002)) void ITextStyle::PutExtended ( VARIANT_BOOL PVal );
__declspec(implementation_key(1003)) long ITextStyle::GetLinesCount ( );
__declspec(implementation_key(1004)) void ITextStyle::PutLinesCount ( long PVal );
__declspec(implementation_key(1005)) VARIANT_BOOL ITextStyle::GetEnableLine1 ( );
__declspec(implementation_key(1006)) void ITextStyle::PutEnableLine1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(1007)) double ITextStyle::GetHeight1 ( );
__declspec(implementation_key(1008)) void ITextStyle::PutHeight1 ( double PVal );
__declspec(implementation_key(1009)) double ITextStyle::GetWidthFactor1 ( );
__declspec(implementation_key(1010)) void ITextStyle::PutWidthFactor1 ( double PVal );
__declspec(implementation_key(1011)) double ITextStyle::GetStep1 ( );
__declspec(implementation_key(1012)) void ITextStyle::PutStep1 ( double PVal );
__declspec(implementation_key(1013)) VARIANT_BOOL ITextStyle::GetEnableLine2 ( );
__declspec(implementation_key(1014)) void ITextStyle::PutEnableLine2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(1015)) double ITextStyle::GetHeight2 ( );
__declspec(implementation_key(1016)) void ITextStyle::PutHeight2 ( double PVal );
__declspec(implementation_key(1017)) double ITextStyle::GetWidthFactor2 ( );
__declspec(implementation_key(1018)) void ITextStyle::PutWidthFactor2 ( double PVal );
__declspec(implementation_key(1019)) double ITextStyle::GetStep2 ( );
__declspec(implementation_key(1020)) void ITextStyle::PutStep2 ( double PVal );
__declspec(implementation_key(1021)) VARIANT_BOOL ITextStyle::GetEnableLine3 ( );
__declspec(implementation_key(1022)) void ITextStyle::PutEnableLine3 ( VARIANT_BOOL PVal );
__declspec(implementation_key(1023)) double ITextStyle::GetHeight3 ( );
__declspec(implementation_key(1024)) void ITextStyle::PutHeight3 ( double PVal );
__declspec(implementation_key(1025)) double ITextStyle::GetWidthFactor3 ( );
__declspec(implementation_key(1026)) void ITextStyle::PutWidthFactor3 ( double PVal );
__declspec(implementation_key(1027)) double ITextStyle::GetStep3 ( );
__declspec(implementation_key(1028)) void ITextStyle::PutStep3 ( double PVal );
__declspec(implementation_key(1029)) ITextFontPtr ITextStyle::GetFont ( );
__declspec(implementation_key(1030)) ITabulatorsPtr ITextStyle::GetTabulators ( );
__declspec(implementation_key(1031)) _bstr_t ISpecificationSubsection::GetName ( );
__declspec(implementation_key(1032)) short ISpecificationSubsection::GetNumber ( );
__declspec(implementation_key(1033)) VARIANT_BOOL ISpecificationSubsection::Change ( _bstr_t Name, short Number );
__declspec(implementation_key(1034)) VARIANT_BOOL ISpecificationSubsection::Delete ( );
__declspec(implementation_key(1035)) ISpecificationSubsectionPtr ISpecificationSubsections::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1036)) ISpecificationSubsectionPtr ISpecificationSubsections::Add ( _bstr_t Name, short Number );
__declspec(implementation_key(1037)) long IAdditionalBlockSectionTuning::GetNumber ( );
__declspec(implementation_key(1038)) VARIANT_BOOL IAdditionalBlockSectionTuning::GetUse ( );
__declspec(implementation_key(1039)) void IAdditionalBlockSectionTuning::PutUse ( VARIANT_BOOL PVal );
__declspec(implementation_key(1040)) IAdditionalBlockSectionTuningPtr IAdditionalBlockSectionTunings::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1041)) long IAdditionalBlockTuning::GetNumber ( );
__declspec(implementation_key(1042)) _bstr_t IAdditionalBlockTuning::GetDocumentName ( );
__declspec(implementation_key(1043)) void IAdditionalBlockTuning::PutDocumentName ( _bstr_t PVal );
__declspec(implementation_key(1044)) VARIANT_BOOL IAdditionalBlockTuning::GetUse ( );
__declspec(implementation_key(1045)) void IAdditionalBlockTuning::PutUse ( VARIANT_BOOL PVal );
__declspec(implementation_key(1046)) VARIANT_BOOL IAdditionalBlockTuning::GetFirstOnSheet ( );
__declspec(implementation_key(1047)) void IAdditionalBlockTuning::PutFirstOnSheet ( VARIANT_BOOL PVal );
__declspec(implementation_key(1048)) IAdditionalBlockSectionTuningsPtr IAdditionalBlockTuning::GetSections ( );
__declspec(implementation_key(1049)) VARIANT_BOOL IAdditionalBlockTuning::GetIndependentPosition ( );
__declspec(implementation_key(1050)) void IAdditionalBlockTuning::PutIndependentPosition ( VARIANT_BOOL PVal );
__declspec(implementation_key(1051)) VARIANT_BOOL IAdditionalBlockTuning::GetMarkOn ( );
__declspec(implementation_key(1052)) void IAdditionalBlockTuning::PutMarkOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(1053)) _bstr_t IAdditionalBlockTuning::GetMark ( );
__declspec(implementation_key(1054)) void IAdditionalBlockTuning::PutMark ( _bstr_t PVal );
__declspec(implementation_key(1055)) IAdditionalBlockTuningPtr IAdditionalBlockTunings::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1056)) long ISpecificationTuningSection::GetNumber ( );
__declspec(implementation_key(1057)) VARIANT_BOOL ISpecificationTuningSection::GetSubsectionOn ( );
__declspec(implementation_key(1058)) void ISpecificationTuningSection::PutSubsectionOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(1059)) VARIANT_BOOL ISpecificationTuningSection::GetAttachGeometry ( );
__declspec(implementation_key(1060)) void ISpecificationTuningSection::PutAttachGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(1061)) VARIANT_BOOL ISpecificationTuningSection::GetPutPosition ( );
__declspec(implementation_key(1062)) void ISpecificationTuningSection::PutPutPosition ( VARIANT_BOOL PVal );
__declspec(implementation_key(1063)) VARIANT_BOOL ISpecificationTuningSection::GetSortObjects ( );
__declspec(implementation_key(1064)) void ISpecificationTuningSection::PutSortObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(1065)) VARIANT_BOOL ISpecificationTuningSection::GetFirstOnSheet ( );
__declspec(implementation_key(1066)) void ISpecificationTuningSection::PutFirstOnSheet ( VARIANT_BOOL PVal );
__declspec(implementation_key(1067)) short ISpecificationTuningSection::GetReserveStringCount ( );
__declspec(implementation_key(1068)) void ISpecificationTuningSection::PutReserveStringCount ( short PVal );
__declspec(implementation_key(1069)) ISpecificationSubsectionsPtr ISpecificationTuningSection::GetSubsections ( );
__declspec(implementation_key(1070)) VARIANT_BOOL ISpecificationTuningSection::GetUseAdditionalBlocks ( );
__declspec(implementation_key(1071)) void ISpecificationTuningSection::PutUseAdditionalBlocks ( VARIANT_BOOL PVal );
__declspec(implementation_key(1072)) IAdditionalBlockTuningsPtr ISpecificationTuningSection::GetAdditionalBlocks ( );
__declspec(implementation_key(1073)) VARIANT_BOOL ISpecificationTuningSection::GetShowDocumentCode ( );
__declspec(implementation_key(1074)) void ISpecificationTuningSection::PutShowDocumentCode ( VARIANT_BOOL PVal );
__declspec(implementation_key(1075)) VARIANT_BOOL ISpecificationTuningSection::GetIndependentPosition ( );
__declspec(implementation_key(1076)) void ISpecificationTuningSection::PutIndependentPosition ( VARIANT_BOOL PVal );
__declspec(implementation_key(1077)) VARIANT_BOOL ISpecificationTuningSection::GetMarkOn ( );
__declspec(implementation_key(1078)) void ISpecificationTuningSection::PutMarkOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(1079)) _bstr_t ISpecificationTuningSection::GetMark ( );
__declspec(implementation_key(1080)) void ISpecificationTuningSection::PutMark ( _bstr_t PVal );
__declspec(implementation_key(1081)) ISpecificationTuningSectionPtr ISpecificationTuningSections::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1082)) enum ksSpecificationLinkTypeEnum ISpecificationTuning::GetLinkType ( );
__declspec(implementation_key(1083)) void ISpecificationTuning::PutLinkType ( enum ksSpecificationLinkTypeEnum PVal );
__declspec(implementation_key(1084)) VARIANT_BOOL ISpecificationTuning::GetCalculateZone ( );
__declspec(implementation_key(1085)) void ISpecificationTuning::PutCalculateZone ( VARIANT_BOOL PVal );
__declspec(implementation_key(1086)) VARIANT_BOOL ISpecificationTuning::GetCalculatePosition ( );
__declspec(implementation_key(1087)) void ISpecificationTuning::PutCalculatePosition ( VARIANT_BOOL PVal );
__declspec(implementation_key(1088)) VARIANT_BOOL ISpecificationTuning::GetShowSectionName ( );
__declspec(implementation_key(1089)) void ISpecificationTuning::PutShowSectionName ( VARIANT_BOOL PVal );
__declspec(implementation_key(1090)) VARIANT_BOOL ISpecificationTuning::GetDeleteGeometry ( );
__declspec(implementation_key(1091)) void ISpecificationTuning::PutDeleteGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(1092)) VARIANT_BOOL ISpecificationTuning::GetDisableEmptyString ( );
__declspec(implementation_key(1093)) void ISpecificationTuning::PutDisableEmptyString ( VARIANT_BOOL PVal );
__declspec(implementation_key(1094)) VARIANT_BOOL ISpecificationTuning::GetDisableEmptyBlockString ( );
__declspec(implementation_key(1095)) void ISpecificationTuning::PutDisableEmptyBlockString ( VARIANT_BOOL PVal );
__declspec(implementation_key(1096)) VARIANT_BOOL ISpecificationTuning::GetInsertNull ( );
__declspec(implementation_key(1097)) void ISpecificationTuning::PutInsertNull ( VARIANT_BOOL PVal );
__declspec(implementation_key(1098)) VARIANT_BOOL ISpecificationTuning::GetInsertDash ( );
__declspec(implementation_key(1099)) void ISpecificationTuning::PutInsertDash ( VARIANT_BOOL PVal );
__declspec(implementation_key(1100)) VARIANT_BOOL ISpecificationTuning::GetShowInfoByObjects ( );
__declspec(implementation_key(1101)) void ISpecificationTuning::PutShowInfoByObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(1102)) VARIANT_BOOL ISpecificationTuning::GetSupportPerformance ( );
__declspec(implementation_key(1103)) void ISpecificationTuning::PutSupportPerformance ( VARIANT_BOOL PVal );
__declspec(implementation_key(1104)) VARIANT_BOOL ISpecificationTuning::GetShowPerformanceFull ( );
__declspec(implementation_key(1105)) void ISpecificationTuning::PutShowPerformanceFull ( VARIANT_BOOL PVal );
__declspec(implementation_key(1106)) VARIANT_BOOL ISpecificationTuning::GetBlockOnNewPage ( );
__declspec(implementation_key(1107)) void ISpecificationTuning::PutBlockOnNewPage ( VARIANT_BOOL PVal );
__declspec(implementation_key(1108)) VARIANT_BOOL ISpecificationTuning::GetPositionUp ( );
__declspec(implementation_key(1109)) void ISpecificationTuning::PutPositionUp ( VARIANT_BOOL PVal );
__declspec(implementation_key(1110)) VARIANT_BOOL ISpecificationTuning::GetDrawBottomUp ( );
__declspec(implementation_key(1111)) void ISpecificationTuning::PutDrawBottomUp ( VARIANT_BOOL PVal );
__declspec(implementation_key(1112)) VARIANT_BOOL ISpecificationTuning::GetUserTextStyle ( );
__declspec(implementation_key(1113)) void ISpecificationTuning::PutUserTextStyle ( VARIANT_BOOL PVal );
__declspec(implementation_key(1114)) long ISpecificationTuning::GetPerformanceCount ( );
__declspec(implementation_key(1115)) void ISpecificationTuning::PutPerformanceCount ( long PVal );
__declspec(implementation_key(1116)) long ISpecificationTuning::GetBlockCount ( );
__declspec(implementation_key(1117)) long ISpecificationTuning::GetInitialPosition ( );
__declspec(implementation_key(1118)) void ISpecificationTuning::PutInitialPosition ( long PVal );
__declspec(implementation_key(1119)) _bstr_t ISpecificationTuning::GetPredefinedTextFileName ( );
__declspec(implementation_key(1120)) void ISpecificationTuning::PutPredefinedTextFileName ( _bstr_t PVal );
__declspec(implementation_key(1121)) ITextStylePtr ISpecificationTuning::GetSectionTextStyleFirst ( );
__declspec(implementation_key(1122)) ITextStylePtr ISpecificationTuning::GetSectionTextStyleNext ( );
__declspec(implementation_key(1123)) ITextStylePtr ISpecificationTuning::GetObjectTextStyle ( );
__declspec(implementation_key(1124)) ISpecificationTuningSectionsPtr ISpecificationTuning::GetSections ( );
__declspec(implementation_key(1125)) VARIANT_BOOL ISpecificationTuning::GetUseAdditionalBlocks ( );
__declspec(implementation_key(1126)) void ISpecificationTuning::PutUseAdditionalBlocks ( VARIANT_BOOL PVal );
__declspec(implementation_key(1127)) IAdditionalBlockTuningsPtr ISpecificationTuning::GetAdditionalBlocks ( );
__declspec(implementation_key(1128)) VARIANT_BOOL ISpecificationTuning::GetShowAdditionalBlockName ( );
__declspec(implementation_key(1129)) void ISpecificationTuning::PutShowAdditionalBlockName ( VARIANT_BOOL PVal );
__declspec(implementation_key(1130)) VARIANT_BOOL ISpecificationTuning::GetShowNestingBlockName ( );
__declspec(implementation_key(1131)) void ISpecificationTuning::PutShowNestingBlockName ( VARIANT_BOOL PVal );
__declspec(implementation_key(1132)) VARIANT_BOOL ISpecificationTuning::GetShowPerformanceBlockName ( );
__declspec(implementation_key(1133)) void ISpecificationTuning::PutShowPerformanceBlockName ( VARIANT_BOOL PVal );
__declspec(implementation_key(1134)) ITextStylePtr ISpecificationTuning::GetPerformanceBlockTextStyleFirst ( );
__declspec(implementation_key(1135)) ITextStylePtr ISpecificationTuning::GetPerformanceBlockTextStyleNext ( );
__declspec(implementation_key(1136)) ITextStylePtr ISpecificationTuning::GetAdditionalBlockTextStyleFirst ( );
__declspec(implementation_key(1137)) ITextStylePtr ISpecificationTuning::GetAdditionalBlockTextStyleNext ( );
__declspec(implementation_key(1138)) ITextStylePtr ISpecificationTuning::GetNestingBlockTextStyleFirst ( );
__declspec(implementation_key(1139)) ITextStylePtr ISpecificationTuning::GetNestingBlockTextStyleNext ( );
__declspec(implementation_key(1140)) VARIANT_BOOL ISpecificationTuning::GetDisableNestingBlockEmptyStrings ( );
__declspec(implementation_key(1141)) void ISpecificationTuning::PutDisableNestingBlockEmptyStrings ( VARIANT_BOOL PVal );
__declspec(implementation_key(1142)) VARIANT_BOOL ISpecificationTuning::GetDisableAdditionalBlockEmptyStrings ( );
__declspec(implementation_key(1143)) void ISpecificationTuning::PutDisableAdditionalBlockEmptyStrings ( VARIANT_BOOL PVal );
__declspec(implementation_key(1144)) VARIANT_BOOL ISpecificationTuning::Update ( );
__declspec(implementation_key(1145)) VARIANT_BOOL ISpecificationTuning::GetDeleteSpcObjectOnDeleteGeometry ( );
__declspec(implementation_key(1146)) void ISpecificationTuning::PutDeleteSpcObjectOnDeleteGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(1147)) VARIANT_BOOL ISpecificationTuning::GetCopySpcObjectOnCopyGeometry ( );
__declspec(implementation_key(1148)) void ISpecificationTuning::PutCopySpcObjectOnCopyGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(1149)) VARIANT_BOOL ISpecificationTuning::GetShowEmbodimentWithoutVariables ( );
__declspec(implementation_key(1150)) void ISpecificationTuning::PutShowEmbodimentWithoutVariables ( VARIANT_BOOL PVal );
__declspec(implementation_key(1151)) long ISpecificationTuning::GetPerformanceCountInBlock ( );
__declspec(implementation_key(1152)) VARIANT_BOOL ISpecificationTuning::GetShowListCountIsSameFormat ( );
__declspec(implementation_key(1153)) void ISpecificationTuning::PutShowListCountIsSameFormat ( VARIANT_BOOL PVal );
__declspec(implementation_key(1154)) enum ksDocumentFormatEnum ISheetFormat::GetFormat ( );
__declspec(implementation_key(1155)) void ISheetFormat::PutFormat ( enum ksDocumentFormatEnum PVal );
__declspec(implementation_key(1156)) long ISheetFormat::GetFormatMultiplicity ( );
__declspec(implementation_key(1157)) void ISheetFormat::PutFormatMultiplicity ( long PVal );
__declspec(implementation_key(1158)) VARIANT_BOOL ISheetFormat::GetVerticalOrientation ( );
__declspec(implementation_key(1159)) void ISheetFormat::PutVerticalOrientation ( VARIANT_BOOL PVal );
__declspec(implementation_key(1160)) double ISheetFormat::GetFormatWidth ( );
__declspec(implementation_key(1161)) void ISheetFormat::PutFormatWidth ( double PVal );
__declspec(implementation_key(1162)) double ISheetFormat::GetFormatHeight ( );
__declspec(implementation_key(1163)) void ISheetFormat::PutFormatHeight ( double PVal );
__declspec(implementation_key(1164)) _bstr_t ISpecificationColumnStyle::GetName ( );
__declspec(implementation_key(1165)) enum ksSpecificationColumnTypeEnum ISpecificationColumnStyle::GetColumnType ( );
__declspec(implementation_key(1166)) long ISpecificationColumnStyle::GetNumber ( );
__declspec(implementation_key(1167)) VARIANT_BOOL ISpecificationColumnStyle::GetEdit ( );
__declspec(implementation_key(1168)) VARIANT_BOOL ISpecificationColumnStyle::GetCalculateSum ( );
__declspec(implementation_key(1169)) VARIANT_BOOL ISpecificationColumnStyle::GetMultiplyToCount ( );
__declspec(implementation_key(1170)) VARIANT_BOOL ISpecificationColumnStyle::GetUseForSectionTitle ( );
__declspec(implementation_key(1171)) VARIANT_BOOL ISpecificationColumnStyle::GetTextDown ( );
__declspec(implementation_key(1172)) long ISpecificationColumnStyle::GetStampLinkID ( );
__declspec(implementation_key(1173)) enum ksValueTypeEnum ISpecificationColumnStyle::GetValueType ( );
__declspec(implementation_key(1174)) _bstr_t ISpecificationColumnStyle::GetAttributeLibraryName ( );
__declspec(implementation_key(1175)) long ISpecificationColumnStyle::GetAttributeKey1 ( );
__declspec(implementation_key(1176)) long ISpecificationColumnStyle::GetAttributeKey2 ( );
__declspec(implementation_key(1177)) long ISpecificationColumnStyle::GetAttributeKey3 ( );
__declspec(implementation_key(1178)) long ISpecificationColumnStyle::GetAttributeKey4 ( );
__declspec(implementation_key(1179)) double ISpecificationColumnStyle::GetMinValue ( );
__declspec(implementation_key(1180)) double ISpecificationColumnStyle::GetMaxValue ( );
__declspec(implementation_key(1181)) VARIANT_BOOL ISpecificationColumnStyle::GetUseIn3D ( );
__declspec(implementation_key(1182)) ISpecificationColumnStylePtr ISpecificationColumnStyles::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1183)) _bstr_t IAdditionalBlockStyle::GetName ( );
__declspec(implementation_key(1184)) long IAdditionalBlockStyle::GetNumber ( );
__declspec(implementation_key(1185)) IAdditionalBlockStylePtr IAdditionalBlockStyles::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1186)) _bstr_t ISpecificationSectionStyle::GetName ( );
__declspec(implementation_key(1187)) long ISpecificationSectionStyle::GetNumber ( );
__declspec(implementation_key(1188)) enum ksSpecificationColumnTypeEnum ISpecificationSectionStyle::GetSortColumnType ( );
__declspec(implementation_key(1189)) long ISpecificationSectionStyle::GetSortColumnNumber ( );
__declspec(implementation_key(1190)) VARIANT_BOOL ISpecificationSectionStyle::GetFillDataFromStamp ( );
__declspec(implementation_key(1191)) enum ksSortTypeEnum ISpecificationSectionStyle::GetSortType ( );
__declspec(implementation_key(1192)) ISpecificationColumnStylesPtr ISpecificationSectionStyle::GetColumns ( );
__declspec(implementation_key(1193)) ISpecificationColumnStylesPtr ISpecificationSectionStyle::GetAdditionalColumns ( );
__declspec(implementation_key(1194)) IAdditionalBlockStylesPtr ISpecificationSectionStyle::GetAdditionalBlocks ( );
__declspec(implementation_key(1195)) long ISpecificationSectionStyle::GetSortLevelsCount ( );
__declspec(implementation_key(1196)) enum ksSpecificationColumnTypeEnum ISpecificationSectionStyle::GetSortColumnTypeEx ( long Index );
__declspec(implementation_key(1197)) long ISpecificationSectionStyle::GetSortColumnNumberEx ( long Index );
__declspec(implementation_key(1198)) enum ksSortTypeEnum ISpecificationSectionStyle::GetSortTypeEx ( long Index );
__declspec(implementation_key(1199)) ISpecificationSectionStylePtr ISpecificationSectionStyles::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1200)) _bstr_t ISpecificationStyle::GetLayoutName1 ( );
__declspec(implementation_key(1201)) long ISpecificationStyle::GetStyleID1 ( );
__declspec(implementation_key(1202)) _bstr_t ISpecificationStyle::GetLayoutName2 ( );
__declspec(implementation_key(1203)) long ISpecificationStyle::GetStyleID2 ( );
__declspec(implementation_key(1204)) enum ksSpecificationVariantEnum ISpecificationStyle::GetVariant ( );
__declspec(implementation_key(1205)) VARIANT_BOOL ISpecificationStyle::GetSectionOn ( );
__declspec(implementation_key(1206)) ISpecificationTuningPtr ISpecificationStyle::GetSpecificationTuning ( );
__declspec(implementation_key(1207)) ISheetFormatPtr ISpecificationStyle::GetFormat ( );
__declspec(implementation_key(1208)) ISpecificationColumnStylesPtr ISpecificationStyle::GetColumns ( );
__declspec(implementation_key(1209)) ISpecificationColumnStylesPtr ISpecificationStyle::GetAdditionalColumns ( );
__declspec(implementation_key(1210)) ISpecificationSectionStylesPtr ISpecificationStyle::GetSections ( );
__declspec(implementation_key(1211)) IAdditionalBlockStylesPtr ISpecificationStyle::GetAdditionalBlocks ( );
__declspec(implementation_key(1212)) VARIANT_BOOL ISpecificationStyle::GetSortSectionDown ( );
__declspec(implementation_key(1213)) long ISpecificationStyle::GetPerformanceCountInBlock ( );
__declspec(implementation_key(1214)) enum ksValueTypeEnum ISpecificationColumnItem::GetValueType ( );
__declspec(implementation_key(1215)) short ISpecificationColumnItem::GetKey ( );
__declspec(implementation_key(1216)) void ISpecificationColumnItem::PutKey ( short PVal );
__declspec(implementation_key(1217)) VARIANT_BOOL ISpecificationColumnItem::GetVisible ( );
__declspec(implementation_key(1218)) void ISpecificationColumnItem::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(1219)) _variant_t ISpecificationColumnItem::GetValue ( );
__declspec(implementation_key(1220)) void ISpecificationColumnItem::PutValue ( const _variant_t & PVal );
__declspec(implementation_key(1221)) ISpecificationColumnItemPtr ISpecificationColumnItems::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1222)) enum ksTextItemEnum ITextItem::GetItemType ( );
__declspec(implementation_key(1223)) void ITextItem::PutItemType ( enum ksTextItemEnum PVal );
__declspec(implementation_key(1224)) _bstr_t ITextItem::GetStr ( );
__declspec(implementation_key(1225)) void ITextItem::PutStr ( _bstr_t Result );
__declspec(implementation_key(1226)) _bstr_t ITextItem::GetSymbolFontName ( );
__declspec(implementation_key(1227)) void ITextItem::PutSymbolFontName ( _bstr_t PVal );
__declspec(implementation_key(1228)) long ITextItem::GetNumber ( );
__declspec(implementation_key(1229)) void ITextItem::PutNumber ( long Result );
__declspec(implementation_key(1230)) enum ksTextSizeEnum ITextItem::GetSizeFactor ( );
__declspec(implementation_key(1231)) void ITextItem::PutSizeFactor ( enum ksTextSizeEnum PVal );
__declspec(implementation_key(1232)) VARIANT_BOOL ITextItem::GetNewLine ( );
__declspec(implementation_key(1233)) void ITextItem::PutNewLine ( VARIANT_BOOL Result );
__declspec(implementation_key(1234)) VARIANT_BOOL ITextItem::Delete ( );
__declspec(implementation_key(1235)) VARIANT_BOOL ITextItem::Update ( );
__declspec(implementation_key(1236)) long ITextLine::GetStyle ( );
__declspec(implementation_key(1237)) void ITextLine::PutStyle ( long Result );
__declspec(implementation_key(1238)) _variant_t ITextLine::GetTextItems ( );
__declspec(implementation_key(1239)) long ITextLine::GetCount ( );
__declspec(implementation_key(1240)) ITextItemPtr ITextLine::GetTextItem ( long Index );
__declspec(implementation_key(1241)) ITextItemPtr ITextLine::Add ( );
__declspec(implementation_key(1242)) ITextItemPtr ITextLine::AddBefore ( long Index );
__declspec(implementation_key(1243)) _bstr_t ITextLine::GetStr ( );
__declspec(implementation_key(1244)) void ITextLine::PutStr ( _bstr_t PVal );
__declspec(implementation_key(1245)) VARIANT_BOOL ITextLine::Clear ( );
__declspec(implementation_key(1246)) double ITextLine::GetStep ( );
__declspec(implementation_key(1247)) void ITextLine::PutStep ( double PVal );
__declspec(implementation_key(1248)) enum ksAlignEnum ITextLine::GetAlign ( );
__declspec(implementation_key(1249)) void ITextLine::PutAlign ( enum ksAlignEnum PVal );
__declspec(implementation_key(1250)) double ITextLine::GetIndentedLine ( );
__declspec(implementation_key(1251)) void ITextLine::PutIndentedLine ( double PVal );
__declspec(implementation_key(1252)) double ITextLine::GetStepBeforeParagraph ( );
__declspec(implementation_key(1253)) void ITextLine::PutStepBeforeParagraph ( double PVal );
__declspec(implementation_key(1254)) double ITextLine::GetStepAfterParagraph ( );
__declspec(implementation_key(1255)) void ITextLine::PutStepAfterParagraph ( double PVal );
__declspec(implementation_key(1256)) double ITextLine::GetLeftEdge ( );
__declspec(implementation_key(1257)) void ITextLine::PutLeftEdge ( double PVal );
__declspec(implementation_key(1258)) double ITextLine::GetRightEdge ( );
__declspec(implementation_key(1259)) void ITextLine::PutRightEdge ( double PVal );
__declspec(implementation_key(1260)) ITabulatorsPtr ITextLine::GetTabulators ( );
__declspec(implementation_key(1261)) long ITextLine::GetLevel ( );
__declspec(implementation_key(1262)) void ITextLine::PutLevel ( long Result );
__declspec(implementation_key(1263)) enum ksTextNumberingEnum ITextLine::GetNumbering ( );
__declspec(implementation_key(1264)) void ITextLine::PutNumbering ( enum ksTextNumberingEnum Result );
__declspec(implementation_key(1265)) VARIANT_BOOL ITextLine::Delete ( );
__declspec(implementation_key(1266)) enum ksTextLineType ITextLine::GetTextLineType ( );
__declspec(implementation_key(1267)) IKompasAPIObjectPtr ITextLine::GetTextLineData ( );
__declspec(implementation_key(1268)) VARIANT_BOOL ITextLine::GetNewPage ( );
__declspec(implementation_key(1269)) void ITextLine::PutNewPage ( VARIANT_BOOL Result );
__declspec(implementation_key(1270)) VARIANT_BOOL ITextLine::Assign ( struct ITextLine * Other );
__declspec(implementation_key(1271)) ITextItemPtr ITextLine::InsertHypertextReference ( long TextItemIndex, struct IKompasAPIObject * Object, enum ksHypertextTypeEnum Type, VARIANT_BOOL Brackets, long TextLineIndex, long Precision, double PropertyId );
__declspec(implementation_key(1272)) VARIANT_BOOL ITextLine::Edit ( OLE_HANDLE HWnd );
__declspec(implementation_key(1273)) VARIANT_BOOL ITextLine::GetNewSection ( );
__declspec(implementation_key(1274)) void ITextLine::PutNewSection ( VARIANT_BOOL Result );
__declspec(implementation_key(1275)) long ITextLine::GetBlockIndex ( );
__declspec(implementation_key(1276)) long ITextLine::GetSectionBlockIndex ( );
__declspec(implementation_key(1277)) VARIANT_BOOL ITextLine::ReplaceStr ( __int64 StartPosition, _bstr_t SrcText, _bstr_t NewText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly, VARIANT_BOOL ReplaceAll );
__declspec(implementation_key(1278)) __int64 ITextLine::Find ( __int64 StartPosition, _bstr_t SrcText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly );
__declspec(implementation_key(1279)) void ITextTable::PutFixedCellsSize ( VARIANT_BOOL PVal );
__declspec(implementation_key(1280)) VARIANT_BOOL ITextTable::GetFixedCellsSize ( );
__declspec(implementation_key(1281)) void ITextTable::PutFixedRowCount ( VARIANT_BOOL PVal );
__declspec(implementation_key(1282)) VARIANT_BOOL ITextTable::GetFixedRowCount ( );
__declspec(implementation_key(1283)) void ITextTable::PutFixedColumnCount ( VARIANT_BOOL PVal );
__declspec(implementation_key(1284)) VARIANT_BOOL ITextTable::GetFixedColumnCount ( );
__declspec(implementation_key(1285)) VARIANT_BOOL ITextTable::Save ( _bstr_t FileName );
__declspec(implementation_key(1286)) long IText::GetStyle ( );
__declspec(implementation_key(1287)) void IText::PutStyle ( long Result );
__declspec(implementation_key(1288)) _variant_t IText::GetTextLines ( );
__declspec(implementation_key(1289)) long IText::GetCount ( );
__declspec(implementation_key(1290)) ITextLinePtr IText::GetTextLine ( long Index );
__declspec(implementation_key(1291)) ITextLinePtr IText::Add ( );
__declspec(implementation_key(1292)) ITextLinePtr IText::AddBefore ( long Index );
__declspec(implementation_key(1293)) _bstr_t IText::GetStr ( );
__declspec(implementation_key(1294)) void IText::PutStr ( _bstr_t PVal );
__declspec(implementation_key(1295)) VARIANT_BOOL IText::Clear ( );
__declspec(implementation_key(1296)) ITextLinePtr IText::AddTextLine ( enum ksTextLineType Type, _bstr_t FileName );
__declspec(implementation_key(1297)) ITextLinePtr IText::AddTextLineBefore ( enum ksTextLineType Type, long Index, _bstr_t FileName );
__declspec(implementation_key(1298)) VARIANT_BOOL IText::Replace ( _bstr_t SrcText, _bstr_t NewText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly, VARIANT_BOOL ReplaceAll );
__declspec(implementation_key(1299)) VARIANT_BOOL IText::Assign ( struct IText * Other );
__declspec(implementation_key(1300)) ITextTablePtr IText::AddTable ( long IndexAt, long RowsCount, long ColumnsCount, double RowHeigh, double ColumnsWidth, enum ksTableTileLayoutEnum TitlePos );
__declspec(implementation_key(1301)) VARIANT_BOOL IText::Edit ( OLE_HANDLE HWnd );
__declspec(implementation_key(1302)) __int64 IText::Find ( __int64 StartPosition, _bstr_t SrcText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly );
__declspec(implementation_key(1303)) VARIANT_BOOL IText::ReplaceStr ( __int64 StartPosition, _bstr_t SrcText, _bstr_t NewText, VARIANT_BOOL Case, VARIANT_BOOL WordOnly, VARIANT_BOOL ReplaceAll );
__declspec(implementation_key(1304)) enum ksSpecificationColumnTypeEnum ISpecificationColumn::GetColumnType ( );
__declspec(implementation_key(1305)) long ISpecificationColumn::GetColumnTypeNumber ( );
__declspec(implementation_key(1306)) long ISpecificationColumn::GetBlockNumber ( );
__declspec(implementation_key(1307)) long ISpecificationColumn::GetNumber ( );
__declspec(implementation_key(1308)) enum ksValueTypeEnum ISpecificationColumn::GetValueType ( );
__declspec(implementation_key(1309)) ISpecificationColumnItemsPtr ISpecificationColumn::GetColumnItems ( );
__declspec(implementation_key(1310)) double ISpecificationColumn::GetAttributeNumber ( );
__declspec(implementation_key(1311)) void ISpecificationColumn::PutAttributeNumber ( double PVal );
__declspec(implementation_key(1312)) ITextPtr ISpecificationColumn::GetText ( );
__declspec(implementation_key(1313)) _bstr_t ISpecificationColumn::GetColumnName ( );
__declspec(implementation_key(1314)) long ISpecificationColumn::GetCountUniteCells ( );
__declspec(implementation_key(1315)) void ISpecificationColumn::PutCountUniteCells ( long PVal );
__declspec(implementation_key(1316)) ISpecificationColumnPtr ISpecificationColumns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1317)) ISpecificationColumnPtr ISpecificationColumns::GetColumn ( enum ksSpecificationColumnTypeEnum ColumnType, long ColumnNumber, long BlockNumber );
__declspec(implementation_key(1318)) _bstr_t IAttachedDocument::GetName ( );
__declspec(implementation_key(1319)) VARIANT_BOOL IAttachedDocument::GetTransmit ( );
__declspec(implementation_key(1320)) void IAttachedDocument::PutTransmit ( VARIANT_BOOL PVal );
__declspec(implementation_key(1321)) _bstr_t IAttachedDocument::GetComment ( );
__declspec(implementation_key(1322)) void IAttachedDocument::PutComment ( _bstr_t PVal );
__declspec(implementation_key(1323)) VARIANT_BOOL IAttachedDocument::Delete ( );
__declspec(implementation_key(1324)) VARIANT_BOOL IAttachedDocument::GetFormatTransmit ( );
__declspec(implementation_key(1325)) void IAttachedDocument::PutFormatTransmit ( VARIANT_BOOL PVal );
__declspec(implementation_key(1326)) _bstr_t IAttachedDocument::GetFormat ( );
__declspec(implementation_key(1327)) _bstr_t IAttachedDocument::GetMarking ( );
__declspec(implementation_key(1328)) IAttachedDocumentPtr IAttachedDocuments::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1329)) IAttachedDocumentPtr IAttachedDocuments::Add ( _bstr_t Name, VARIANT_BOOL Transmit );
__declspec(implementation_key(1330)) IAttachedDocumentPtr IAttachedDocuments::AddDocument ( _bstr_t Name, VARIANT_BOOL Transmit, VARIANT_BOOL FillText, _bstr_t EmbodimentMarking );
__declspec(implementation_key(1331)) enum ksSpecificationObjectTypeEnum ISpecificationObject::GetObjectType ( );
__declspec(implementation_key(1332)) long ISpecificationObject::GetSection ( );
__declspec(implementation_key(1333)) long ISpecificationObject::GetSubsection ( );
__declspec(implementation_key(1334)) void ISpecificationObject::PutSubsection ( long PVal );
__declspec(implementation_key(1335)) long ISpecificationObject::GetAdditionalSection ( );
__declspec(implementation_key(1336)) void ISpecificationObject::PutAdditionalSection ( long PVal );
__declspec(implementation_key(1337)) long ISpecificationObject::GetAdditionalBlock ( );
__declspec(implementation_key(1338)) void ISpecificationObject::PutAdditionalBlock ( long PVal );
__declspec(implementation_key(1339)) long ISpecificationObject::GetNestedSection ( );
__declspec(implementation_key(1340)) void ISpecificationObject::PutNestedSection ( long PVal );
__declspec(implementation_key(1341)) long ISpecificationObject::GetNestedBlock ( );
__declspec(implementation_key(1342)) void ISpecificationObject::PutNestedBlock ( long PVal );
__declspec(implementation_key(1343)) long ISpecificationObject::GetBlockNumberByIndex ( long Val );
__declspec(implementation_key(1344)) double ISpecificationObject::GetUniqueNumber ( );
__declspec(implementation_key(1345)) enum ksSpecificationObjectStateEnum ISpecificationObject::GetState ( );
__declspec(implementation_key(1346)) VARIANT_BOOL ISpecificationObject::GetFirstOnSheet ( );
__declspec(implementation_key(1347)) void ISpecificationObject::PutFirstOnSheet ( VARIANT_BOOL PVal );
__declspec(implementation_key(1348)) VARIANT_BOOL ISpecificationObject::GetIncrementPosition ( );
__declspec(implementation_key(1349)) void ISpecificationObject::PutIncrementPosition ( VARIANT_BOOL PVal );
__declspec(implementation_key(1350)) ISpecificationColumnsPtr ISpecificationObject::GetColumns ( );
__declspec(implementation_key(1351)) ISpecificationColumnsPtr ISpecificationObject::GetAdditionalColumns ( );
__declspec(implementation_key(1352)) IAttachedDocumentsPtr ISpecificationObject::GetAttachedDocuments ( );
__declspec(implementation_key(1353)) VARIANT_BOOL ISpecificationObject::Update ( );
__declspec(implementation_key(1354)) VARIANT_BOOL ISpecificationObject::Delete ( );
__declspec(implementation_key(1355)) VARIANT_BOOL ISpecificationObject::Edit ( );
__declspec(implementation_key(1356)) long ISpecificationObjectCreateParam::GetSection ( );
__declspec(implementation_key(1357)) void ISpecificationObjectCreateParam::PutSection ( long PVal );
__declspec(implementation_key(1358)) long ISpecificationObjectCreateParam::GetSubsection ( );
__declspec(implementation_key(1359)) void ISpecificationObjectCreateParam::PutSubsection ( long PVal );
__declspec(implementation_key(1360)) long ISpecificationObjectCreateParam::GetAdditionalSection ( );
__declspec(implementation_key(1361)) void ISpecificationObjectCreateParam::PutAdditionalSection ( long PVal );
__declspec(implementation_key(1362)) long ISpecificationObjectCreateParam::GetAdditionalBlock ( );
__declspec(implementation_key(1363)) void ISpecificationObjectCreateParam::PutAdditionalBlock ( long PVal );
__declspec(implementation_key(1364)) long ISpecificationObjectCreateParam::GetNestedSection ( );
__declspec(implementation_key(1365)) void ISpecificationObjectCreateParam::PutNestedSection ( long PVal );
__declspec(implementation_key(1366)) long ISpecificationObjectCreateParam::GetNestedBlock ( );
__declspec(implementation_key(1367)) void ISpecificationObjectCreateParam::PutNestedBlock ( long PVal );
__declspec(implementation_key(1368)) double ISpecificationObjectCreateParam::GetAttributeNumber ( );
__declspec(implementation_key(1369)) void ISpecificationObjectCreateParam::PutAttributeNumber ( double PVal );
__declspec(implementation_key(1370)) VARIANT_BOOL ISpecificationObjectCreateParam::GetFillNameByMaterial ( );
__declspec(implementation_key(1371)) void ISpecificationObjectCreateParam::PutFillNameByMaterial ( VARIANT_BOOL PVal );
__declspec(implementation_key(1372)) void IProperty::PutName ( _bstr_t PVal );
__declspec(implementation_key(1373)) _bstr_t IProperty::GetName ( );
__declspec(implementation_key(1374)) double IProperty::GetId ( );
__declspec(implementation_key(1375)) void IProperty::PutDataType ( enum ksPropertyTypeEnum PVal );
__declspec(implementation_key(1376)) enum ksPropertyTypeEnum IProperty::GetDataType ( );
__declspec(implementation_key(1377)) _variant_t IProperty::GetMinValue ( );
__declspec(implementation_key(1378)) _variant_t IProperty::GetMaxValue ( );
__declspec(implementation_key(1379)) VARIANT_BOOL IProperty::SetValueRange ( const _variant_t & MinVal, const _variant_t & MaxVal );
__declspec(implementation_key(1380)) VARIANT_BOOL IProperty::GetReadOnly ( );
__declspec(implementation_key(1381)) void IProperty::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(1382)) long IProperty::GetSignificantDigitsCount ( );
__declspec(implementation_key(1383)) void IProperty::PutSignificantDigitsCount ( long Result );
__declspec(implementation_key(1384)) _bstr_t IProperty::GetSourceName ( );
__declspec(implementation_key(1385)) void IProperty::PutComment ( _bstr_t PVal );
__declspec(implementation_key(1386)) _bstr_t IProperty::GetComment ( );
__declspec(implementation_key(1387)) void IProperty::PutPropertyTypeId ( _bstr_t PVal );
__declspec(implementation_key(1388)) _bstr_t IProperty::GetPropertyTypeId ( );
__declspec(implementation_key(1389)) void IProperty::PutUnitId ( _bstr_t PVal );
__declspec(implementation_key(1390)) _bstr_t IProperty::GetUnitId ( );
__declspec(implementation_key(1391)) VARIANT_BOOL IProperty::ViewEdit ( OLE_HANDLE Parent, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(1392)) VARIANT_BOOL IProperty::Delete ( );
__declspec(implementation_key(1393)) VARIANT_BOOL IProperty::Update ( );
__declspec(implementation_key(1394)) VARIANT_BOOL IProperty::GetUseListVal ( );
__declspec(implementation_key(1395)) void IProperty::PutUseListVal ( VARIANT_BOOL PVal );
__declspec(implementation_key(1396)) _variant_t IProperty::GetListVal ( );
__declspec(implementation_key(1397)) void IProperty::PutListVal ( const _variant_t & PVal );
__declspec(implementation_key(1398)) VARIANT_BOOL IProperty::GetIsVariable ( );
__declspec(implementation_key(1399)) VARIANT_BOOL IProperty::GetIsAngular ( );
__declspec(implementation_key(1400)) _bstr_t IUserDataStorage::GetName ( _bstr_t Pass );
__declspec(implementation_key(1401)) void IUserDataStorage::PutName ( _bstr_t Pass, _bstr_t PVal );
__declspec(implementation_key(1402)) VARIANT_BOOL IUserDataStorage::SetPassword ( _bstr_t OldPass, _bstr_t NewPass );
__declspec(implementation_key(1403)) long IUserDataStorage::GetVersion ( _bstr_t Pass );
__declspec(implementation_key(1404)) void IUserDataStorage::PutVersion ( _bstr_t Pass, long PVal );
__declspec(implementation_key(1405)) _bstr_t IUserDataStorage::GetObject ( const _variant_t & Index, VARIANT * Object, long * Numb );
__declspec(implementation_key(1406)) long IUserDataStorage::SetObject ( _bstr_t Pass, const _variant_t & Index, const _variant_t & Object, _bstr_t Comment );
__declspec(implementation_key(1407)) long IUserDataStorage::AddObject ( _bstr_t Pass, const _variant_t & Object, _bstr_t Comment );
__declspec(implementation_key(1408)) VARIANT_BOOL IUserDataStorage::Delete ( _bstr_t Pass, const _variant_t & Index );
__declspec(implementation_key(1409)) VARIANT_BOOL IUserDataStorage::Clear ( _bstr_t Pass );
__declspec(implementation_key(1410)) VARIANT_BOOL IUserDataStorage::AddObjects ( _bstr_t Pass, const _variant_t & Objects, const _variant_t & Comments );
__declspec(implementation_key(1411)) IUserDataStoragePtr IUserDataStorages::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1412)) IUserDataStoragePtr IUserDataStorages::Add ( _bstr_t StorageName );
__declspec(implementation_key(1413)) VARIANT_BOOL IUserDataStorages::Delete ( _bstr_t Password, const _variant_t & Index );
__declspec(implementation_key(1414)) IUserDataStoragesPtr IUserDataStoragesMng::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1415)) IUserDataStoragesPtr IUserDataStoragesMng::Add ( struct IKompasAPIObject * Object );
__declspec(implementation_key(1416)) VARIANT_BOOL IUserDataStoragesMng::Delete ( const _variant_t & Index );
__declspec(implementation_key(1417)) VARIANT_BOOL IUserDataStoragesMng::Clear ( );
__declspec(implementation_key(1418)) VARIANT_BOOL IPropertyKeeper::GetPropertyValue ( struct IProperty * Property, VARIANT * Value, VARIANT_BOOL BaseUnit, VARIANT_BOOL * FromSource );
__declspec(implementation_key(1419)) VARIANT_BOOL IPropertyKeeper::SetPropertyValue ( struct IProperty * Property, const _variant_t & Value, VARIANT_BOOL BaseUnit );
__declspec(implementation_key(1420)) IUserDataStoragePtr IPropertyKeeper::GetPropertyAdditionalStorage ( struct IProperty * Property, VARIANT_BOOL Create, VARIANT_BOOL * FromSource );
__declspec(implementation_key(1421)) IUserDataStoragesMngPtr IPropertyKeeper::GetUserDataStoragesManager ( VARIANT_BOOL FromSource );
__declspec(implementation_key(1422)) VARIANT_BOOL IPropertyKeeper::InsertHypertextReference ( struct IProperty * Property, struct IKompasAPIObject * Object, enum ksHypertextTypeEnum Type, VARIANT_BOOL Brackets, long TextLineIndex, long Precision, double PropertyId );
__declspec(implementation_key(1423)) _bstr_t IPropertyKeeper::GetProperties ( );
__declspec(implementation_key(1424)) void IPropertyKeeper::PutProperties ( _bstr_t PVal );
__declspec(implementation_key(1425)) _bstr_t IPropertyKeeper::GetUniqueMetaObjectKey ( );
__declspec(implementation_key(1426)) VARIANT_BOOL IPropertyKeeper::IsComplexPropertyValue ( struct IProperty * Property );
__declspec(implementation_key(1427)) _bstr_t IPropertyKeeper::GetComplexPropertyValue ( struct IProperty * Property, VARIANT_BOOL * FromSource );
__declspec(implementation_key(1428)) VARIANT_BOOL IPropertyKeeper::SetComplexPropertyValue ( struct IProperty * Property, _bstr_t Value );
__declspec(implementation_key(1429)) ITextPtr IStamp::GetText ( long Id );
__declspec(implementation_key(1430)) VARIANT_BOOL IStamp::Update ( );
__declspec(implementation_key(1431)) VARIANT_BOOL IStamp::Clear ( long Id );
__declspec(implementation_key(1432)) long IStamp::GetNextColumnId ( long Id );
__declspec(implementation_key(1433)) VARIANT_BOOL IStamp::GetCrossed ( );
__declspec(implementation_key(1434)) ISheetFormatPtr ILayoutSheet::GetFormat ( );
__declspec(implementation_key(1435)) _bstr_t ILayoutSheet::GetLayoutLibraryFileName ( );
__declspec(implementation_key(1436)) void ILayoutSheet::PutLayoutLibraryFileName ( _bstr_t PVal );
__declspec(implementation_key(1437)) double ILayoutSheet::GetLayoutStyleNumber ( );
__declspec(implementation_key(1438)) void ILayoutSheet::PutLayoutStyleNumber ( double PVal );
__declspec(implementation_key(1439)) VARIANT_BOOL ILayoutSheet::Update ( );
__declspec(implementation_key(1440)) VARIANT_BOOL ILayoutSheet::Delete ( );
__declspec(implementation_key(1441)) IStampPtr ILayoutSheet::GetStamp ( );
__declspec(implementation_key(1442)) enum ksSheetTypeEnum ILayoutSheet::GetSheetType ( );
__declspec(implementation_key(1443)) void ILayoutSheet::PutSheetType ( enum ksSheetTypeEnum PVal );
__declspec(implementation_key(1444)) VARIANT_BOOL ILayoutSheet::GetPlaceInsideFrames ( double * Left, double * Top, double * Right, double * Bottom );
__declspec(implementation_key(1445)) ILayoutSheetPtr ILayoutSheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1446)) ILayoutSheetPtr ILayoutSheets::GetItemByNumber ( long Number );
__declspec(implementation_key(1447)) ILayoutSheetPtr ILayoutSheets::Add ( );
__declspec(implementation_key(1448)) _variant_t ILoadCombinationsParam::GetLoadCombinations ( );
__declspec(implementation_key(1449)) _variant_t ILoadCombinationsParam::GetProtectedFlags ( );
__declspec(implementation_key(1450)) long ILoadCombinationsParam::GetApplyingIndex ( );
__declspec(implementation_key(1451)) void IOpenDocumentParam::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(1452)) VARIANT_BOOL IOpenDocumentParam::GetVisible ( );
__declspec(implementation_key(1453)) void IOpenDocumentParam::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(1454)) VARIANT_BOOL IOpenDocumentParam::GetReadOnly ( );
__declspec(implementation_key(1455)) void IOpenDocumentParam::PutApplyingIndex ( long Result );
__declspec(implementation_key(1456)) long IOpenDocumentParam::GetApplyingIndex ( );
__declspec(implementation_key(1457)) void IOpenDocumentParam::PutPassword ( _bstr_t _arg1 );
__declspec(implementation_key(1458)) void IPropertyControl::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(1459)) VARIANT_BOOL IPropertyControl::GetVisible ( );
__declspec(implementation_key(1460)) void IPropertyControl::PutName ( _bstr_t PVal );
__declspec(implementation_key(1461)) _bstr_t IPropertyControl::GetName ( );
__declspec(implementation_key(1462)) enum ControlTypeEnum IPropertyControl::GetControlType ( );
__declspec(implementation_key(1463)) void IPropertyControl::PutId ( long PVal );
__declspec(implementation_key(1464)) long IPropertyControl::GetId ( );
__declspec(implementation_key(1465)) void IPropertyControl::PutEnable ( VARIANT_BOOL PVal );
__declspec(implementation_key(1466)) VARIANT_BOOL IPropertyControl::GetEnable ( );
__declspec(implementation_key(1467)) void IPropertyControl::PutValue ( const _variant_t & PVal );
__declspec(implementation_key(1468)) _variant_t IPropertyControl::GetValue ( );
__declspec(implementation_key(1469)) void IPropertyControl::PutNameVisibility ( enum PropertyControlNameVisibility PVal );
__declspec(implementation_key(1470)) enum PropertyControlNameVisibility IPropertyControl::GetNameVisibility ( );
__declspec(implementation_key(1471)) void IPropertyControl::PutHint ( _bstr_t PVal );
__declspec(implementation_key(1472)) _bstr_t IPropertyControl::GetHint ( );
__declspec(implementation_key(1473)) void IPropertyControl::PutTips ( _bstr_t PVal );
__declspec(implementation_key(1474)) _bstr_t IPropertyControl::GetTips ( );
__declspec(implementation_key(1475)) IPropertyControlPtr IPropertyControls::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1476)) IPropertyControlPtr IPropertyControls::Add ( enum ControlTypeEnum Type );
__declspec(implementation_key(1477)) VARIANT_BOOL IPropertyControls::Delete ( const _variant_t & Index );
__declspec(implementation_key(1478)) void IPropertyTab::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(1479)) VARIANT_BOOL IPropertyTab::GetVisible ( );
__declspec(implementation_key(1480)) void IPropertyTab::PutCaption ( _bstr_t PVal );
__declspec(implementation_key(1481)) _bstr_t IPropertyTab::GetCaption ( );
__declspec(implementation_key(1482)) void IPropertyTab::PutActive ( VARIANT_BOOL PVal );
__declspec(implementation_key(1483)) VARIANT_BOOL IPropertyTab::GetActive ( );
__declspec(implementation_key(1484)) IPropertyControlsPtr IPropertyTab::GetPropertyControls ( );
__declspec(implementation_key(1485)) void IPropertyTab::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(1486)) _variant_t IPropertyTab::GetResModule ( );
__declspec(implementation_key(1487)) void IPropertyTab::PutImage ( const _variant_t & Bmp );
__declspec(implementation_key(1488)) _variant_t IPropertyTab::GetImage ( );
__declspec(implementation_key(1489)) void IPropertyTab::PutExpanded ( VARIANT_BOOL PVal );
__declspec(implementation_key(1490)) VARIANT_BOOL IPropertyTab::GetExpanded ( );
__declspec(implementation_key(1491)) IPropertyTabPtr IPropertyTabs::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1492)) IPropertyTabPtr IPropertyTabs::Add ( _bstr_t Caption );
__declspec(implementation_key(1493)) VARIANT_BOOL IPropertyTabs::Delete ( const _variant_t & Index );
__declspec(implementation_key(1494)) IPropertyTabPtr IPropertyTabs::GetActive ( );
__declspec(implementation_key(1495)) IPropertyTabPtr IPropertyTabs::GetSystemTab ( );
__declspec(implementation_key(1496)) void IProcessParam::PutCaption ( _bstr_t PVal );
__declspec(implementation_key(1497)) _bstr_t IProcessParam::GetCaption ( );
__declspec(implementation_key(1498)) IPropertyTabsPtr IProcessParam::GetPropertyTabs ( );
__declspec(implementation_key(1499)) void IProcessParam::PutSpecToolbar ( enum SpecPropertyToolBarEnum PVal );
__declspec(implementation_key(1500)) enum SpecPropertyToolBarEnum IProcessParam::GetSpecToolbar ( );
__declspec(implementation_key(1501)) void IProcessParam::PutAutoReduce ( VARIANT_BOOL PVal );
__declspec(implementation_key(1502)) VARIANT_BOOL IProcessParam::GetAutoReduce ( );
__declspec(implementation_key(1503)) void IProcessParam::PutDefaultControlFix ( enum DefaultFixTypeEnum PVal );
__declspec(implementation_key(1504)) enum DefaultFixTypeEnum IProcessParam::GetDefaultControlFix ( );
__declspec(implementation_key(1505)) void IProcessParam::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(1506)) _variant_t IProcessParam::GetResModule ( );
__declspec(implementation_key(1507)) void IProcessParam::PutSpecToolbarEx ( long PVal );
__declspec(implementation_key(1508)) long IProcessParam::GetSpecToolbarEx ( );
__declspec(implementation_key(1509)) void IProcessParam::PutBmpBeginId ( enum ksBmpSizeEnum Size, long PVal );
__declspec(implementation_key(1510)) long IProcessParam::GetBmpBeginId ( enum ksBmpSizeEnum Size );
__declspec(implementation_key(1511)) enum PropertyManagerLayout IProcessParam::GetLayout ( );
__declspec(implementation_key(1512)) HRESULT IProcessParam::GetGabaritRect ( long * Left, long * Top, long * Right, long * Bottom );
__declspec(implementation_key(1513)) void IProcessParam::PutShowContextMenuOfSnap ( VARIANT_BOOL PVal );
__declspec(implementation_key(1514)) VARIANT_BOOL IProcessParam::GetShowContextMenuOfSnap ( );
__declspec(implementation_key(1515)) void IProcessParam::PutShowContextMenuOfGeomCalculator ( VARIANT_BOOL PVal );
__declspec(implementation_key(1516)) VARIANT_BOOL IProcessParam::GetShowContextMenuOfGeomCalculator ( );
__declspec(implementation_key(1517)) void IProcessParam::PutShowCommandWindow ( VARIANT_BOOL PVal );
__declspec(implementation_key(1518)) VARIANT_BOOL IProcessParam::GetShowCommandWindow ( );
__declspec(implementation_key(1519)) VARIANT_BOOL IProcessParam::AddSpecToolbarButton ( long BtnID, const _variant_t & Bmp, _bstr_t Tips, _bstr_t IconFont );
__declspec(implementation_key(1520)) VARIANT_BOOL IProcessParam::PushProcessName ( _bstr_t Name );
__declspec(implementation_key(1521)) VARIANT_BOOL IProcessParam::PopProcessName ( );
__declspec(implementation_key(1522)) void IProcessParam::PutEnableUndoRedo ( VARIANT_BOOL PVal );
__declspec(implementation_key(1523)) VARIANT_BOOL IProcessParam::GetEnableUndoRedo ( );
__declspec(implementation_key(1524)) VARIANT_BOOL IProcessParam::AddSetupMenuCommand ( _bstr_t Title, long Command, VARIANT_BOOL Checable );
__declspec(implementation_key(1525)) VARIANT_BOOL IProcessParam::SetSetupMenuCommandState ( long Command, VARIANT_BOOL Visible, VARIANT_BOOL Enable, VARIANT_BOOL Checked );
__declspec(implementation_key(1526)) void IProcessParam::PutEnterButtonIconType ( enum ksEnterButtonIconTypeEnum PVal );
__declspec(implementation_key(1527)) enum ksEnterButtonIconTypeEnum IProcessParam::GetEnterButtonIconType ( );
__declspec(implementation_key(1528)) VARIANT_BOOL IProcessParam::ClearSpecToolbar ( );
__declspec(implementation_key(1529)) void IPropertyManager::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(1530)) VARIANT_BOOL IPropertyManager::GetVisible ( );
__declspec(implementation_key(1531)) void IPropertyManager::PutCaption ( _bstr_t PVal );
__declspec(implementation_key(1532)) _bstr_t IPropertyManager::GetCaption ( );
__declspec(implementation_key(1533)) void IPropertyManager::PutLayout ( enum PropertyManagerLayout PVal );
__declspec(implementation_key(1534)) enum PropertyManagerLayout IPropertyManager::GetLayout ( );
__declspec(implementation_key(1535)) IPropertyTabsPtr IPropertyManager::GetPropertyTabs ( );
__declspec(implementation_key(1536)) HRESULT IPropertyManager::SetGabaritRect ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(1537)) HRESULT IPropertyManager::GetGabaritRect ( long * Left, long * Top, long * Right, long * Bottom );
__declspec(implementation_key(1538)) VARIANT_BOOL IPropertyManager::ShowTabs ( );
__declspec(implementation_key(1539)) VARIANT_BOOL IPropertyManager::UpdateTabs ( );
__declspec(implementation_key(1540)) VARIANT_BOOL IPropertyManager::HideTabs ( );
__declspec(implementation_key(1541)) void IPropertyManager::PutSpecToolbar ( enum SpecPropertyToolBarEnum PVal );
__declspec(implementation_key(1542)) enum SpecPropertyToolBarEnum IPropertyManager::GetSpecToolbar ( );
__declspec(implementation_key(1543)) VARIANT_BOOL IPropertyManager::RepeatCommand ( );
__declspec(implementation_key(1544)) void IPropertyManager::PutAutoHideMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(1545)) VARIANT_BOOL IPropertyManager::GetAutoHideMode ( );
__declspec(implementation_key(1546)) void IPropertyManager::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(1547)) _variant_t IPropertyManager::GetResModule ( );
__declspec(implementation_key(1548)) void IPropertyManager::PutSpecToolbarEx ( long PVal );
__declspec(implementation_key(1549)) long IPropertyManager::GetSpecToolbarEx ( );
__declspec(implementation_key(1550)) VARIANT_BOOL IPropertyManager::AddSpecToolbarButton ( long BtnID, const _variant_t & Bmp, _bstr_t Tips, _bstr_t IconFont );
__declspec(implementation_key(1551)) VARIANT_BOOL IPropertyManager::AddSetupMenuCommand ( _bstr_t Title, long Command, VARIANT_BOOL Checable );
__declspec(implementation_key(1552)) VARIANT_BOOL IPropertyManager::SetSetupMenuCommandState ( long Command, VARIANT_BOOL Visible, VARIANT_BOOL Enable, VARIANT_BOOL Checked );
__declspec(implementation_key(1553)) void IPropertyManager::PutEnterButtonIconType ( enum ksEnterButtonIconTypeEnum PVal );
__declspec(implementation_key(1554)) enum ksEnterButtonIconTypeEnum IPropertyManager::GetEnterButtonIconType ( );
__declspec(implementation_key(1555)) void IPropertyManager::PutStatusMessage ( _bstr_t PVal );
__declspec(implementation_key(1556)) _bstr_t IPropertyManager::GetStatusMessage ( );
__declspec(implementation_key(1557)) void IPropertyManager::PutLabel ( _bstr_t PVal );
__declspec(implementation_key(1558)) _bstr_t IPropertyManager::GetLabel ( );
__declspec(implementation_key(1559)) VARIANT_BOOL IPropertyManager::ClearSpecToolbar ( );
__declspec(implementation_key(1560)) VARIANT_BOOL IPropertyManager::SetIcon ( long Icon, _bstr_t IconFont );
__declspec(implementation_key(1561)) _bstr_t ILibrary::GetLibraryManagerFolder ( );
__declspec(implementation_key(1562)) VARIANT_BOOL ILibrary::GetAttach ( );
__declspec(implementation_key(1563)) void ILibrary::PutAttach ( VARIANT_BOOL PVal );
__declspec(implementation_key(1564)) enum ksLibraryTypeEnum ILibrary::GetLibraryType ( );
__declspec(implementation_key(1565)) _bstr_t ILibrary::GetName ( );
__declspec(implementation_key(1566)) _bstr_t ILibrary::GetPathName ( );
__declspec(implementation_key(1567)) VARIANT_BOOL ILibrary::GetEnable ( );
__declspec(implementation_key(1568)) VARIANT_BOOL ILibrary::Execute ( long Command, IDispatch * External, VARIANT_BOOL Post );
__declspec(implementation_key(1569)) _bstr_t IProcedure::GetName ( );
__declspec(implementation_key(1570)) _bstr_t IProcedure::GetLibraryFolder ( );
__declspec(implementation_key(1571)) long IProcedure::GetId ( );
__declspec(implementation_key(1572)) VARIANT_BOOL IProcedure::Execute ( IDispatch * External, VARIANT_BOOL Post );
__declspec(implementation_key(1573)) IProcedurePtr IProcedures::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1574)) IProcedurePtr IProcedures::GetItemByID ( long Id );
__declspec(implementation_key(1575)) enum ksLibraryStyleEnum IProceduresLibrary::GetStyle ( );
__declspec(implementation_key(1576)) void IProceduresLibrary::PutStyle ( enum ksLibraryStyleEnum PVal );
__declspec(implementation_key(1577)) IProceduresPtr IProceduresLibrary::GetProcedures ( );
__declspec(implementation_key(1578)) long IProceduresLibrary::GetCurrentCommand ( );
__declspec(implementation_key(1579)) VARIANT_BOOL IProceduresLibrary::SystemControlStop ( );
__declspec(implementation_key(1580)) enum ksSystemControlStartEnum IProceduresLibrary::SystemControlStart ( _bstr_t menuCommand );
__declspec(implementation_key(1581)) long IProceduresLibrary::GetUniqueId ( );
__declspec(implementation_key(1582)) VARIANT_BOOL IProceduresLibrary::GetExecutable ( );
__declspec(implementation_key(1583)) VARIANT_BOOL IProceduresLibrary::GetAddIns ( );
__declspec(implementation_key(1584)) IDispatchPtr IProceduresLibrary::GetExternalInterface ( );
__declspec(implementation_key(1585)) _bstr_t IProceduresLibrary::GetLibraryName ( );
__declspec(implementation_key(1586)) _bstr_t IProceduresLibrary::GetIconsFont ( );
__declspec(implementation_key(1587)) VARIANT_BOOL IProceduresLibrary::Delete ( );
__declspec(implementation_key(1588)) IProceduresLibraryPtr IProceduresLibraries::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1589)) IProceduresLibraryPtr IProceduresLibraries::Add ( _bstr_t PathName, _bstr_t LibManagerFolder );
__declspec(implementation_key(1590)) long IKompasError::GetCode ( );
__declspec(implementation_key(1591)) _bstr_t IKompasError::GetDescription ( );
__declspec(implementation_key(1592)) VARIANT_BOOL IKompasError::GetError3D ( );
__declspec(implementation_key(1593)) HRESULT IKompasError::Report ( );
__declspec(implementation_key(1594)) HRESULT IKompasError::Clear ( );
__declspec(implementation_key(1595)) IUnknownPtr IConverter::ConverterParameters ( long Command );
__declspec(implementation_key(1596)) _bstr_t IConverter::GetFilter ( long DocType, VARIANT_BOOL SaveAs, long * Command );
__declspec(implementation_key(1597)) long IConverter::Convert ( _bstr_t InputFile, _bstr_t Outfile, long Command, VARIANT_BOOL ShowParam );
__declspec(implementation_key(1598)) VARIANT_BOOL IConverter::VisualEditConvertParam ( OLE_HANDLE ParentHwnd, long Command );
__declspec(implementation_key(1599)) HRESULT ICheckSum::Add ( const _variant_t & Value, VARIANT_BOOL Com );
__declspec(implementation_key(1600)) _variant_t ICheckSum::GetResult ( );
__declspec(implementation_key(1601)) _bstr_t ICheckSum::GetStrResult ( );
__declspec(implementation_key(1602)) VARIANT_BOOL ICheckSum::AddInterface ( IUnknown * Object, VARIANT_BOOL Com );
__declspec(implementation_key(1603)) VARIANT_BOOL ICheckSum::AddReference ( long Object, long Doc, VARIANT_BOOL Com );
__declspec(implementation_key(1604)) HRESULT ICheckSum::Clear ( );
__declspec(implementation_key(1605)) long ICheckSum::GetVersion ( );
__declspec(implementation_key(1606)) void ICheckSum::PutVersion ( long PVal );
__declspec(implementation_key(1607)) HRESULT IProgressBarIndicator::Start ( long MinVal, long MaxVal, _bstr_t TextVal, VARIANT_BOOL ResetVal );
__declspec(implementation_key(1608)) HRESULT IProgressBarIndicator::SetProgress ( long CurrentVal, _bstr_t TextVal, VARIANT_BOOL ResetVal );
__declspec(implementation_key(1609)) HRESULT IProgressBarIndicator::SetText ( _bstr_t TextVal );
__declspec(implementation_key(1610)) HRESULT IProgressBarIndicator::Stop ( _bstr_t TextVal, VARIANT_BOOL ResetVal );
__declspec(implementation_key(1611)) long ILibArraySettings::GetLibraryCount ( );
__declspec(implementation_key(1612)) _bstr_t ILibArraySettings::GetLibrary ( long Index, VARIANT_BOOL * Use );
__declspec(implementation_key(1613)) VARIANT_BOOL ILibArraySettings::SetLibraryUse ( const _variant_t & Index, VARIANT_BOOL Use );
__declspec(implementation_key(1614)) VARIANT_BOOL ILibArraySettings::GetLibrarys ( VARIANT * FileNames, VARIANT * Uses );
__declspec(implementation_key(1615)) VARIANT_BOOL ILibArraySettings::AddLibrary ( _bstr_t FileName, VARIANT_BOOL Use );
__declspec(implementation_key(1616)) VARIANT_BOOL ILibArraySettings::RemoveLibrary ( const _variant_t & Index );
__declspec(implementation_key(1617)) _bstr_t IThreadPattern::GetTableName ( );
__declspec(implementation_key(1618)) _bstr_t IThreadPattern::GetStandart ( );
__declspec(implementation_key(1619)) double IThreadPattern::GetConeAngle ( );
__declspec(implementation_key(1620)) double IThreadPattern::GetHoleKoeff ( );
__declspec(implementation_key(1621)) long IThreadPattern::GetPatternsCount ( );
__declspec(implementation_key(1622)) double IThreadPattern::GetNominalDiameter ( long Index );
__declspec(implementation_key(1623)) double IThreadPattern::GetP ( long Index );
__declspec(implementation_key(1624)) double IThreadPattern::GetConeL1 ( long Index );
__declspec(implementation_key(1625)) double IThreadPattern::GetConeL2 ( long Index );
__declspec(implementation_key(1626)) double IThreadPattern::GetLenght ( long Index );
__declspec(implementation_key(1627)) _bstr_t IThreadPattern::GetDesignation ( long Index );
__declspec(implementation_key(1628)) _variant_t IThreadPattern::SelectDiameters ( );
__declspec(implementation_key(1629)) _variant_t IThreadPattern::SelectP ( double NominalDiameter );
__declspec(implementation_key(1630)) _bstr_t IThreadPattern::GetParameters ( long Index, double * NominalDiameter, double * P, double * L, double * L1, double * L2 );
__declspec(implementation_key(1631)) _bstr_t IThreadPattern::SelectParameters ( double NominalDiameter, double P, double * L, double * L1, double * L2 );
__declspec(implementation_key(1632)) void ISystemSettings::PutFilesAutoSaveSwitchOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(1633)) VARIANT_BOOL ISystemSettings::GetFilesAutoSaveSwitchOn ( );
__declspec(implementation_key(1634)) void ISystemSettings::PutFilesBackupPrevCopySwitchOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(1635)) VARIANT_BOOL ISystemSettings::GetFilesBackupPrevCopySwitchOn ( );
__declspec(implementation_key(1636)) void ISystemSettings::PutModelLocalCSCreateInAbsoluteCS ( VARIANT_BOOL PVal );
__declspec(implementation_key(1637)) VARIANT_BOOL ISystemSettings::GetModelLocalCSCreateInAbsoluteCS ( );
__declspec(implementation_key(1638)) void ISystemSettings::PutModelLocalCSSetActive ( VARIANT_BOOL PVal );
__declspec(implementation_key(1639)) VARIANT_BOOL ISystemSettings::GetModelLocalCSSetActive ( );
__declspec(implementation_key(1640)) void ISystemSettings::PutModelSmoothMotion ( VARIANT_BOOL PVal );
__declspec(implementation_key(1641)) VARIANT_BOOL ISystemSettings::GetModelSmoothMotion ( );
__declspec(implementation_key(1642)) ILibArraySettingsPtr ISystemSettings::GetReportStyleListSettings ( );
__declspec(implementation_key(1643)) void ISystemSettings::PutObjectsFilter3D ( enum ksObjectsFilter3DEnum Type, VARIANT_BOOL PVal );
__declspec(implementation_key(1644)) VARIANT_BOOL ISystemSettings::GetObjectsFilter3D ( enum ksObjectsFilter3DEnum Type );
__declspec(implementation_key(1645)) IKompasAPIObjectPtr ISystemSettings::GetNewDocumentSettings ( enum ksNewDocumentSettingsTypeEnum SettingsType );
__declspec(implementation_key(1646)) void ISystemSettings::PutEnablesAddSystemDelimersInMarking ( VARIANT_BOOL PVal );
__declspec(implementation_key(1647)) VARIANT_BOOL ISystemSettings::GetEnablesAddSystemDelimersInMarking ( );
__declspec(implementation_key(1648)) ILibArraySettingsPtr ISystemSettings::GetStandardsThreadsListSettings ( );
__declspec(implementation_key(1649)) void ISystemSettings::PutModelEditColor ( enum ksEditColorTypeEnum ColorType, long PVal );
__declspec(implementation_key(1650)) long ISystemSettings::GetModelEditColor ( enum ksEditColorTypeEnum ColorType );
__declspec(implementation_key(1651)) void ISystemSettings::PutModelFillChooseFace ( VARIANT_BOOL PVal );
__declspec(implementation_key(1652)) VARIANT_BOOL ISystemSettings::GetModelFillChooseFace ( );
__declspec(implementation_key(1653)) void ISystemSettings::PutModelInverseInDynamicSelect ( VARIANT_BOOL PVal );
__declspec(implementation_key(1654)) VARIANT_BOOL ISystemSettings::GetModelInverseInDynamicSelect ( );
__declspec(implementation_key(1655)) void ISystemSettings::PutModelUsePartColorForEdit ( VARIANT_BOOL PVal );
__declspec(implementation_key(1656)) VARIANT_BOOL ISystemSettings::GetModelUsePartColorForEdit ( );
__declspec(implementation_key(1657)) void ISystemSettings::PutModelUseOpenGLSearch ( VARIANT_BOOL PVal );
__declspec(implementation_key(1658)) VARIANT_BOOL ISystemSettings::GetModelUseOpenGLSearch ( );
__declspec(implementation_key(1659)) IThreadPatternPtr ISystemSettings::GetThreadPattern ( _bstr_t ThreadTableName );
__declspec(implementation_key(1660)) _bstr_t ISystemSettings::GetLanguage ( );
__declspec(implementation_key(1661)) void ISystemSettings::PutAssociationViewRebuildParallel ( VARIANT_BOOL PVal );
__declspec(implementation_key(1662)) VARIANT_BOOL ISystemSettings::GetAssociationViewRebuildParallel ( );
__declspec(implementation_key(1663)) void ISystemSettings::PutAssociationViewRebuildParallelLowPriority ( VARIANT_BOOL PVal );
__declspec(implementation_key(1664)) VARIANT_BOOL ISystemSettings::GetAssociationViewRebuildParallelLowPriority ( );
__declspec(implementation_key(1665)) void ISystemSettings::PutAssociationViewAutoSaveBeforeRebuild ( VARIANT_BOOL PVal );
__declspec(implementation_key(1666)) VARIANT_BOOL ISystemSettings::GetAssociationViewAutoSaveBeforeRebuild ( );
__declspec(implementation_key(1667)) enum ksThemeEnum ISystemSettings::GetTheme ( );
__declspec(implementation_key(1668)) VARIANT_BOOL ISystemSettings::GetUseHardwareAcceleration ( );
__declspec(implementation_key(1669)) enum ksModelRenderTypeEnum ISystemSettings::GetModelRenderType ( );
__declspec(implementation_key(1670)) void ISystemSettings::PutModelRenderType ( enum ksModelRenderTypeEnum PVal );
__declspec(implementation_key(1671)) double ISystemSettings::GetModelStepMoveDetail ( );
__declspec(implementation_key(1672)) void ISystemSettings::PutModelStepMoveDetail ( double PVal );
__declspec(implementation_key(1673)) double ISystemSettings::GetModelStepRotateDetail ( );
__declspec(implementation_key(1674)) void ISystemSettings::PutModelStepRotateDetail ( double PVal );
__declspec(implementation_key(1675)) double ISystemSettings::GetModelScaleFactor ( );
__declspec(implementation_key(1676)) void ISystemSettings::PutModelScaleFactor ( double PVal );
__declspec(implementation_key(1677)) enum ksModelPerformanceLevelEnum ISystemSettings::GetModelPerformanceLevel ( );
__declspec(implementation_key(1678)) void ISystemSettings::PutModelPerformanceLevel ( enum ksModelPerformanceLevelEnum PVal );
__declspec(implementation_key(1679)) enum ksModelTransparencyTypeEnum ISystemSettings::GetModelTransparencyType ( );
__declspec(implementation_key(1680)) void ISystemSettings::PutModelTransparencyType ( enum ksModelTransparencyTypeEnum PVal );
__declspec(implementation_key(1681)) void ISystemSettings::PutEnableAddFilesToRecentList ( VARIANT_BOOL PVal );
__declspec(implementation_key(1682)) VARIANT_BOOL ISystemSettings::GetEnableAddFilesToRecentList ( );
__declspec(implementation_key(1683)) void ISystemSettings::PutJtAutoSaveSwitchOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(1684)) VARIANT_BOOL ISystemSettings::GetJtAutoSaveSwitchOn ( );
__declspec(implementation_key(1685)) _variant_t ICurve2D::Intersect ( struct ICurve2D * Curve2 );
__declspec(implementation_key(1686)) VARIANT_BOOL ICurve2D::Tangent ( struct ICurve2D * Curve2, VARIANT * Curve1Points, VARIANT * Curve2Points );
__declspec(implementation_key(1687)) _variant_t ICurve2D::TangentLinePoint ( double X, double Y );
__declspec(implementation_key(1688)) _variant_t ICurve2D::CouplingCurvCurv ( struct ICurve2D * Curve2, double Radius );
__declspec(implementation_key(1689)) VARIANT_BOOL ICurve2D::PointProjection ( double X, double Y, double * Kx, double * Ky, double * T, double * Angle );
__declspec(implementation_key(1690)) _variant_t ICurve2D::CalculatePolygonByStep ( double Step );
__declspec(implementation_key(1691)) VARIANT_BOOL ICurve2D::MovePoint ( double * X, double * Y, double Lenght, VARIANT_BOOL Direction );
__declspec(implementation_key(1692)) double ICurve2D::GetLength ( );
__declspec(implementation_key(1693)) double ICurve2D::GetDistancePointPoint ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(1694)) double ICurve2D::GetDistanceToPoint ( double X, double Y );
__declspec(implementation_key(1695)) VARIANT_BOOL ICurve2D::PointOn ( double T, double * X, double * Y );
__declspec(implementation_key(1696)) double ICurve2D::GetMetricLength ( double T1, double T2 );
__declspec(implementation_key(1697)) double ICurve2D::GetParamMin ( );
__declspec(implementation_key(1698)) double ICurve2D::GetParamMax ( );
__declspec(implementation_key(1699)) VARIANT_BOOL ICurve2D::GetIsClosed ( );
__declspec(implementation_key(1700)) VARIANT_BOOL ICurve2D::GetNurbsParams ( VARIANT_BOOL Closed, VARIANT * Points, VARIANT * Weights, VARIANT * Knots, double * TMin, double * TMax );
__declspec(implementation_key(1701)) VARIANT_BOOL ICurve2D::GetIsSelfIntersect ( );
__declspec(implementation_key(1702)) enum ksPointLocationTypeEnum ICurve2D::GetPointLocation ( double X, double Y );
__declspec(implementation_key(1703)) ICurve2DPtr IMath2D::Line ( double X, double Y, double Angle );
__declspec(implementation_key(1704)) ICurve2DPtr IMath2D::LineSeg ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(1705)) ICurve2DPtr IMath2D::Arc ( double Xc, double Yc, double Radius, double Angle1, double Angle2, VARIANT_BOOL Direction );
__declspec(implementation_key(1706)) ICurve2DPtr IMath2D::Circle ( double Xc, double Yc, double Radius );
__declspec(implementation_key(1707)) ICurve2DPtr IMath2D::PolyLine ( const _variant_t & Points, VARIANT_BOOL Closed );
__declspec(implementation_key(1708)) ICurve2DPtr IMath2D::Ellipse ( double Xc, double Yc, double A, double B, double Angle );
__declspec(implementation_key(1709)) ICurve2DPtr IMath2D::EllipseArc ( double Xc, double Yc, double A, double B, double Angle, double Angle1, double Angle2, VARIANT_BOOL Direction );
__declspec(implementation_key(1710)) ICurve2DPtr IMath2D::Bezier ( VARIANT_BOOL Closed, VARIANT_BOOL AllPoints, const _variant_t & Points );
__declspec(implementation_key(1711)) ICurve2DPtr IMath2D::Nurbs ( VARIANT_BOOL Closed, long Degree, const _variant_t & Points, const _variant_t & Weights, const _variant_t & Knots );
__declspec(implementation_key(1712)) VARIANT_BOOL IMath2D::Symmetry ( double * X, double * Y, struct ICurve2D * Curve );
__declspec(implementation_key(1713)) VARIANT_BOOL IMath2D::Rotate ( double * X, double * Y, double Xc, double Yc, double Angle );
__declspec(implementation_key(1714)) VARIANT_BOOL IMath2D::MovePoint ( double * X, double * Y, double Angle, double Len );
__declspec(implementation_key(1715)) _bstr_t IPrintJob_Sheet::GetDocumentName ( );
__declspec(implementation_key(1716)) long IPrintJob_Sheet::GetNumber ( );
__declspec(implementation_key(1717)) VARIANT_BOOL IPrintJob_Sheet::GetGabarites ( double * Width, double * Height );
__declspec(implementation_key(1718)) enum ksAngleEnum IPrintJob_Sheet::GetOrientation ( );
__declspec(implementation_key(1719)) void IPrintJob_Sheet::PutOrientation ( enum ksAngleEnum Value );
__declspec(implementation_key(1720)) void IPrintJob_Sheet::PutX ( double PVal );
__declspec(implementation_key(1721)) double IPrintJob_Sheet::GetX ( );
__declspec(implementation_key(1722)) void IPrintJob_Sheet::PutY ( double PVal );
__declspec(implementation_key(1723)) double IPrintJob_Sheet::GetY ( );
__declspec(implementation_key(1724)) void IPrintJob_Sheet::PutScale ( double PVal );
__declspec(implementation_key(1725)) double IPrintJob_Sheet::GetScale ( );
__declspec(implementation_key(1726)) VARIANT_BOOL IPrintJob_Sheet::GetClipFlag ( );
__declspec(implementation_key(1727)) void IPrintJob_Sheet::PutClipFlag ( VARIANT_BOOL Flag );
__declspec(implementation_key(1728)) VARIANT_BOOL IPrintJob_Sheet::GetClipFrameGabarites ( double * Left, double * Bottom, double * Right, double * Top );
__declspec(implementation_key(1729)) VARIANT_BOOL IPrintJob_Sheet::SetClipFrameGabarites ( double Left, double Bottom, double Right, double Top );
__declspec(implementation_key(1730)) VARIANT_BOOL IPrintJob::Clear ( );
__declspec(implementation_key(1731)) VARIANT_BOOL IPrintJob::ShowPreviewWindow ( );
__declspec(implementation_key(1732)) VARIANT_BOOL IPrintJob::Load ( _bstr_t FileName, VARIANT * Errors );
__declspec(implementation_key(1733)) VARIANT_BOOL IPrintJob::Save ( _bstr_t FileName );
__declspec(implementation_key(1734)) VARIANT_BOOL IPrintJob::Execute ( _bstr_t OutputFileName );
__declspec(implementation_key(1735)) VARIANT_BOOL IPrintJob::AddSheets ( _bstr_t FileName, const _variant_t & Sheets, enum ksSheetsRangeEnum Range );
__declspec(implementation_key(1736)) long IPrintJob::GetSheetsCount ( );
__declspec(implementation_key(1737)) IPrintJob_SheetPtr IPrintJob::GetSheet ( long Index );
__declspec(implementation_key(1738)) VARIANT_BOOL IPrintJob::RemoveSheets ( const _variant_t & Index );
__declspec(implementation_key(1739)) long IPrintJob::GetPagesCount ( );
__declspec(implementation_key(1740)) VARIANT_BOOL IPrintJob::GetPageGabarites ( double * Width, double * Height );
__declspec(implementation_key(1741)) VARIANT_BOOL IPrintJob::GetPagesMapGabarites ( long * WPageCount, long * HPageCount );
__declspec(implementation_key(1742)) VARIANT_BOOL IPrintJob::GetPagePrintableFlag ( long WPage, long HPage );
__declspec(implementation_key(1743)) void IPrintJob::PutPagePrintableFlag ( long WPage, long HPage, VARIANT_BOOL Result );
__declspec(implementation_key(1744)) VARIANT_BOOL IPrintJob::SpecialExecute ( _bstr_t OutputFileName );
__declspec(implementation_key(1745)) void IStyle::PutName ( _bstr_t PVal );
__declspec(implementation_key(1746)) _bstr_t IStyle::GetName ( );
__declspec(implementation_key(1747)) long IStyle::GetApiStyleId ( );
__declspec(implementation_key(1748)) long IStyle::GetDisplayStyleId ( );
__declspec(implementation_key(1749)) void IStyle::PutDisplayStyleId ( long PVal );
__declspec(implementation_key(1750)) VARIANT_BOOL IStyle::GetIsExternalStyle ( );
__declspec(implementation_key(1751)) _bstr_t IStyle::GetLibraryPath ( );
__declspec(implementation_key(1752)) long IStyle::GetLibraryStyleId ( );
__declspec(implementation_key(1753)) VARIANT_BOOL IStyle::Update ( );
__declspec(implementation_key(1754)) VARIANT_BOOL IStyle::Delete ( );
__declspec(implementation_key(1755)) IStylePtr IStyles::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1756)) IStylePtr IStyles::GetStyleByApiId ( long Id );
__declspec(implementation_key(1757)) IStylePtr IStyles::Add ( );
__declspec(implementation_key(1758)) IStylePtr IStyles::Copy ( struct IStyle * Style );
__declspec(implementation_key(1759)) IStylePtr IStyles::AddStyleFromLibrary ( _bstr_t LibraryPath, long Id, VARIANT_BOOL External );
__declspec(implementation_key(1760)) IStylePtr IStyles::FindStyleFromLibrary ( _bstr_t LibraryPath, long LibraryStyleId );
__declspec(implementation_key(1761)) enum DrawingObjectTypeEnum IDrawingObject::GetDrawingObjectType ( );
__declspec(implementation_key(1762)) long IDrawingObject::GetLayerNumber ( );
__declspec(implementation_key(1763)) void IDrawingObject::PutLayerNumber ( long PVal );
__declspec(implementation_key(1764)) VARIANT_BOOL IDrawingObject::GetTemp ( );
__declspec(implementation_key(1765)) VARIANT_BOOL IDrawingObject::GetValid ( );
__declspec(implementation_key(1766)) VARIANT_BOOL IDrawingObject::Update ( );
__declspec(implementation_key(1767)) VARIANT_BOOL IDrawingObject::Delete ( );
__declspec(implementation_key(1768)) enum ksDrawingObjectParamTypeEnum IDrawingObject::GetDrawingObjectParamType ( );
__declspec(implementation_key(1769)) void IDrawingObject::PutDrawingObjectParamType ( enum ksDrawingObjectParamTypeEnum PVal );
__declspec(implementation_key(1770)) IDrawingObjectPtr IDrawingObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1771)) void ILayer::PutName ( _bstr_t PVal );
__declspec(implementation_key(1772)) _bstr_t ILayer::GetName ( );
__declspec(implementation_key(1773)) void ILayer::PutBackground ( VARIANT_BOOL PVal );
__declspec(implementation_key(1774)) VARIANT_BOOL ILayer::GetBackground ( );
__declspec(implementation_key(1775)) void ILayer::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(1776)) VARIANT_BOOL ILayer::GetVisible ( );
__declspec(implementation_key(1777)) void ILayer::PutCurrent ( VARIANT_BOOL PVal );
__declspec(implementation_key(1778)) VARIANT_BOOL ILayer::GetCurrent ( );
__declspec(implementation_key(1779)) void ILayer::PutColor ( long PVal );
__declspec(implementation_key(1780)) long ILayer::GetColor ( );
__declspec(implementation_key(1781)) void ILayer::PutComment ( _bstr_t PVal );
__declspec(implementation_key(1782)) _bstr_t ILayer::GetComment ( );
__declspec(implementation_key(1783)) long ILayer::GetObjectCount ( );
__declspec(implementation_key(1784)) void ILayer::PutPrintable ( VARIANT_BOOL PVal );
__declspec(implementation_key(1785)) VARIANT_BOOL ILayer::GetPrintable ( );
__declspec(implementation_key(1786)) ILayerPtr ILayers::GetLayer ( const _variant_t & Index );
__declspec(implementation_key(1787)) ILayerPtr ILayers::GetLayerByNumber ( long Number );
__declspec(implementation_key(1788)) ILayerPtr ILayers::Add ( );
__declspec(implementation_key(1789)) VARIANT_BOOL ILayers::Attach ( struct ILayer * PVal );
__declspec(implementation_key(1790)) VARIANT_BOOL ILayers::Detach ( struct ILayer * PVal );
__declspec(implementation_key(1791)) _bstr_t IVariable7::GetName ( );
__declspec(implementation_key(1792)) void IVariable7::PutNote ( _bstr_t PVal );
__declspec(implementation_key(1793)) _bstr_t IVariable7::GetNote ( );
__declspec(implementation_key(1794)) void IVariable7::PutValue ( double PVal );
__declspec(implementation_key(1795)) double IVariable7::GetValue ( );
__declspec(implementation_key(1796)) void IVariable7::PutExternal ( VARIANT_BOOL PVal );
__declspec(implementation_key(1797)) VARIANT_BOOL IVariable7::GetExternal ( );
__declspec(implementation_key(1798)) void IVariable7::PutInformation ( VARIANT_BOOL PVal );
__declspec(implementation_key(1799)) VARIANT_BOOL IVariable7::GetInformation ( );
__declspec(implementation_key(1800)) void IVariable7::PutExpression ( _bstr_t PVal );
__declspec(implementation_key(1801)) _bstr_t IVariable7::GetExpression ( );
__declspec(implementation_key(1802)) _bstr_t IVariable7::GetParameterNote ( );
__declspec(implementation_key(1803)) _bstr_t IVariable7::GetDisplayName ( );
__declspec(implementation_key(1804)) _bstr_t IVariable7::GetLinkVariableName ( );
__declspec(implementation_key(1805)) _bstr_t IVariable7::GetLinkDocumentName ( );
__declspec(implementation_key(1806)) VARIANT_BOOL IVariable7::SetLink ( _bstr_t DocumentName, _bstr_t VariableName );
__declspec(implementation_key(1807)) VARIANT_BOOL IVariable7::Delete ( );
__declspec(implementation_key(1808)) void IVariable7::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(1809)) VARIANT_BOOL IVariable7::GetReadOnly ( );
__declspec(implementation_key(1810)) _bstr_t IVariable7::GetTolerance ( );
__declspec(implementation_key(1811)) void IVariable7::PutTolerance ( _bstr_t PVal );
__declspec(implementation_key(1812)) double IVariable7::GetHighDeviation ( );
__declspec(implementation_key(1813)) void IVariable7::PutHighDeviation ( double PVal );
__declspec(implementation_key(1814)) double IVariable7::GetLowDeviation ( );
__declspec(implementation_key(1815)) void IVariable7::PutLowDeviation ( double PVal );
__declspec(implementation_key(1816)) VARIANT_BOOL IVariable7::GetHasTolerance ( );
__declspec(implementation_key(1817)) void IVariable7::PutHasTolerance ( VARIANT_BOOL Result );
__declspec(implementation_key(1818)) VARIANT_BOOL IVariable7::GetRectangle ( );
__declspec(implementation_key(1819)) void IVariable7::PutRectangle ( VARIANT_BOOL Result );
__declspec(implementation_key(1820)) IPropertyPtr IVariable7::GetProperty ( );
__declspec(implementation_key(1821)) IPropertyPtr IVariable7::AddProperty ( );
__declspec(implementation_key(1822)) VARIANT_BOOL IVariable7::GetToleranceOn ( );
__declspec(implementation_key(1823)) void IVariable7::PutToleranceOn ( VARIANT_BOOL Result );
__declspec(implementation_key(1824)) VARIANT_BOOL IVariable7::GetDeviationOn ( );
__declspec(implementation_key(1825)) void IVariable7::PutDeviationOn ( VARIANT_BOOL Result );
__declspec(implementation_key(1826)) enum ksDimensionDeviationEnum IVariable7::GetDeviationType ( );
__declspec(implementation_key(1827)) void IVariable7::PutDeviationType ( enum ksDimensionDeviationEnum Result );
__declspec(implementation_key(1828)) VARIANT_BOOL IVariable7::GetIsCreatedDeviationVariables ( );
__declspec(implementation_key(1829)) VARIANT_BOOL IVariable7::CreateDeviationVariables ( );
__declspec(implementation_key(1830)) _bstr_t IVariable7::GetDeviationExpression ( VARIANT_BOOL HighDeviation );
__declspec(implementation_key(1831)) void IVariable7::PutDeviationExpression ( VARIANT_BOOL HighDeviation, _bstr_t Result );
__declspec(implementation_key(1832)) VARIANT_BOOL IVariable7::SetLinkEmbodiment ( _bstr_t DocumentName, _bstr_t VariableName, const _variant_t & Index );
__declspec(implementation_key(1833)) long IVariable7::GetLinkEmbodimentIndex ( );
__declspec(implementation_key(1834)) _bstr_t IVariable7::GetLinkEmbodimentMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer );
__declspec(implementation_key(1835)) long IVariable7::GetVariableID ( );
__declspec(implementation_key(1836)) void IView::PutNumber ( long PVal );
__declspec(implementation_key(1837)) long IView::GetNumber ( );
__declspec(implementation_key(1838)) void IView::PutName ( _bstr_t PVal );
__declspec(implementation_key(1839)) _bstr_t IView::GetName ( );
__declspec(implementation_key(1840)) void IView::PutBackground ( VARIANT_BOOL PVal );
__declspec(implementation_key(1841)) VARIANT_BOOL IView::GetBackground ( );
__declspec(implementation_key(1842)) void IView::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(1843)) VARIANT_BOOL IView::GetVisible ( );
__declspec(implementation_key(1844)) void IView::PutCurrent ( VARIANT_BOOL PVal );
__declspec(implementation_key(1845)) VARIANT_BOOL IView::GetCurrent ( );
__declspec(implementation_key(1846)) void IView::PutColor ( long PVal );
__declspec(implementation_key(1847)) long IView::GetColor ( );
__declspec(implementation_key(1848)) void IView::PutComment ( _bstr_t PVal );
__declspec(implementation_key(1849)) _bstr_t IView::GetComment ( );
__declspec(implementation_key(1850)) long IView::GetObjectCount ( );
__declspec(implementation_key(1851)) void IView::PutX ( double PVal );
__declspec(implementation_key(1852)) double IView::GetX ( );
__declspec(implementation_key(1853)) void IView::PutY ( double PVal );
__declspec(implementation_key(1854)) double IView::GetY ( );
__declspec(implementation_key(1855)) void IView::PutScale ( double PVal );
__declspec(implementation_key(1856)) double IView::GetScale ( );
__declspec(implementation_key(1857)) void IView::PutAngle ( double PVal );
__declspec(implementation_key(1858)) double IView::GetAngle ( );
__declspec(implementation_key(1859)) enum LtViewType IView::GetViewType ( );
__declspec(implementation_key(1860)) ILayersPtr IView::GetLayers ( );
__declspec(implementation_key(1861)) _variant_t IView::GetVariables ( );
__declspec(implementation_key(1862)) IVariable7Ptr IView::GetVariable ( const _variant_t & Index );
__declspec(implementation_key(1863)) long IView::GetVariablesCount ( );
__declspec(implementation_key(1864)) IViewPtr IViews::GetView ( const _variant_t & Index );
__declspec(implementation_key(1865)) IViewPtr IViews::GetViewByNumber ( long Numb );
__declspec(implementation_key(1866)) IViewPtr IViews::Add ( enum LtViewType ViewType );
__declspec(implementation_key(1867)) IViewPtr IViews::GetActiveView ( );
__declspec(implementation_key(1868)) VARIANT_BOOL IViews::AddStandartViews ( _bstr_t FileName, _bstr_t ProjectionName, const _variant_t & ProjectionsTypes, double X, double Y, double Scale, double DX, double DY );
__declspec(implementation_key(1869)) void ILayerFilterCondition::PutNumber ( _bstr_t PVal );
__declspec(implementation_key(1870)) _bstr_t ILayerFilterCondition::GetNumber ( );
__declspec(implementation_key(1871)) void ILayerFilterCondition::PutName ( _bstr_t PVal );
__declspec(implementation_key(1872)) _bstr_t ILayerFilterCondition::GetName ( );
__declspec(implementation_key(1873)) void ILayerFilterCondition::PutBackground ( enum FilterConditionStateEnum PVal );
__declspec(implementation_key(1874)) enum FilterConditionStateEnum ILayerFilterCondition::GetBackground ( );
__declspec(implementation_key(1875)) void ILayerFilterCondition::PutVisible ( enum FilterConditionStateEnum PVal );
__declspec(implementation_key(1876)) enum FilterConditionStateEnum ILayerFilterCondition::GetVisible ( );
__declspec(implementation_key(1877)) void ILayerFilterCondition::PutHaveObjects ( enum FilterConditionStateEnum PVal );
__declspec(implementation_key(1878)) enum FilterConditionStateEnum ILayerFilterCondition::GetHaveObjects ( );
__declspec(implementation_key(1879)) void ILayerFilterCondition::PutColor ( long PVal );
__declspec(implementation_key(1880)) long ILayerFilterCondition::GetColor ( );
__declspec(implementation_key(1881)) void ILayerFilterCondition::PutComment ( _bstr_t PVal );
__declspec(implementation_key(1882)) _bstr_t ILayerFilterCondition::GetComment ( );
__declspec(implementation_key(1883)) void ILayerFilterCondition::PutProjected ( enum FilterConditionStateEnum PVal );
__declspec(implementation_key(1884)) enum FilterConditionStateEnum ILayerFilterCondition::GetProjected ( );
__declspec(implementation_key(1885)) ILayerFilterConditionPtr ILayerFilterConditions::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1886)) ILayerFilterConditionPtr ILayerFilterConditions::Add ( );
__declspec(implementation_key(1887)) _bstr_t IFeature7::GetName ( );
__declspec(implementation_key(1888)) long IFeature7::GetUpdateStamp ( );
__declspec(implementation_key(1889)) IFeature7Ptr IFeature7::GetOwnerFeature ( );
__declspec(implementation_key(1890)) VARIANT_BOOL IFeature7::GetValid ( );
__declspec(implementation_key(1891)) void IFeature7::PutExcluded ( VARIANT_BOOL PVal );
__declspec(implementation_key(1892)) VARIANT_BOOL IFeature7::GetExcluded ( );
__declspec(implementation_key(1893)) _variant_t IFeature7::GetModelObjects ( const _variant_t & ObjType );
__declspec(implementation_key(1894)) ksObj3dTypeEnum IFeature7::GetFeatureType ( );
__declspec(implementation_key(1895)) VARIANT_BOOL IFeature7::Delete ( );
__declspec(implementation_key(1896)) _variant_t IFeature7::GetSubFeatures ( enum ksTreeTypeEnum TreeType, VARIANT_BOOL Through, VARIANT_BOOL LibObject );
__declspec(implementation_key(1897)) _variant_t IFeature7::GetResultBodies ( );
__declspec(implementation_key(1898)) _variant_t IFeature7::GetVariables ( VARIANT_BOOL ExternalOnly, VARIANT_BOOL InSource );
__declspec(implementation_key(1899)) IVariable7Ptr IFeature7::GetVariable ( VARIANT_BOOL External, VARIANT_BOOL InSource, const _variant_t & Index );
__declspec(implementation_key(1900)) long IFeature7::GetVariablesCount ( VARIANT_BOOL External, VARIANT_BOOL InSource );
__declspec(implementation_key(1901)) long IFeature7::GetObjectError ( );
__declspec(implementation_key(1902)) long IFeature7::GetState ( );
__declspec(implementation_key(1903)) _bstr_t IFeature7::GetLabel ( );
__declspec(implementation_key(1904)) _bstr_t IModelObject::GetName ( );
__declspec(implementation_key(1905)) void IModelObject::PutName ( _bstr_t PVal );
__declspec(implementation_key(1906)) void IModelObject::PutHidden ( VARIANT_BOOL PVal );
__declspec(implementation_key(1907)) VARIANT_BOOL IModelObject::GetHidden ( );
__declspec(implementation_key(1908)) VARIANT_BOOL IModelObject::Update ( );
__declspec(implementation_key(1909)) VARIANT_BOOL IModelObject::GetValid ( );
__declspec(implementation_key(1910)) IPart7Ptr IModelObject::GetPart ( );
__declspec(implementation_key(1911)) ksObj3dTypeEnum IModelObject::GetModelObjectType ( );
__declspec(implementation_key(1912)) IFeature7Ptr IModelObject::GetOwner ( );
__declspec(implementation_key(1913)) IModelObjectPtr IModelObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1914)) long IVariableTable::GetRowsCount ( );
__declspec(implementation_key(1915)) long IVariableTable::GetColumnsCount ( );
__declspec(implementation_key(1916)) _bstr_t IVariableTable::GetVarName ( long Column );
__declspec(implementation_key(1917)) void IVariableTable::PutVarName ( long Column, _bstr_t Val );
__declspec(implementation_key(1918)) _variant_t IVariableTable::GetVarNames ( );
__declspec(implementation_key(1919)) void IVariableTable::PutVarNames ( const _variant_t & Val );
__declspec(implementation_key(1920)) _bstr_t IVariableTable::GetComment ( long Val );
__declspec(implementation_key(1921)) void IVariableTable::PutComment ( long Val, _bstr_t BstrVal );
__declspec(implementation_key(1922)) _variant_t IVariableTable::GetTableRow ( const _variant_t & Index );
__declspec(implementation_key(1923)) void IVariableTable::PutTableRow ( const _variant_t & Index, const _variant_t & Val );
__declspec(implementation_key(1924)) double IVariableTable::GetCell ( long RowIndexVal, long ColIndex );
__declspec(implementation_key(1925)) void IVariableTable::PutCell ( long RowIndexVal, long ColIndex, double Val );
__declspec(implementation_key(1926)) VARIANT_BOOL IVariableTable::ApplyVars ( const _variant_t & Index );
__declspec(implementation_key(1927)) long IVariableTable::GetVisualTable ( OLE_HANDLE WinVal, VARIANT_BOOL Select );
__declspec(implementation_key(1928)) long IVariableTable::AddColumn ( _bstr_t Val );
__declspec(implementation_key(1929)) VARIANT_BOOL IVariableTable::DeleteColumn ( const _variant_t & ColVal );
__declspec(implementation_key(1930)) long IVariableTable::AddRow ( _bstr_t Val );
__declspec(implementation_key(1931)) VARIANT_BOOL IVariableTable::DeleteRow ( const _variant_t & RowVal );
__declspec(implementation_key(1932)) VARIANT_BOOL IVariableTable::Clear ( );
__declspec(implementation_key(1933)) long IVariableTable::FindColumnIndex ( _bstr_t Val );
__declspec(implementation_key(1934)) void IPoint3D::PutX ( double PVal );
__declspec(implementation_key(1935)) double IPoint3D::GetX ( );
__declspec(implementation_key(1936)) void IPoint3D::PutY ( double PVal );
__declspec(implementation_key(1937)) double IPoint3D::GetY ( );
__declspec(implementation_key(1938)) void IPoint3D::PutZ ( double PVal );
__declspec(implementation_key(1939)) double IPoint3D::GetZ ( );
__declspec(implementation_key(1940)) VARIANT_BOOL IPoint3D::SetAssociationObject ( struct IModelObject * NewVal );
__declspec(implementation_key(1941)) IModelObjectPtr IPoint3D::GetAssociationObject ( );
__declspec(implementation_key(1942)) void IPoint3D::PutSymbol ( enum ksAnnotationSymbolEnum PVal );
__declspec(implementation_key(1943)) enum ksAnnotationSymbolEnum IPoint3D::GetSymbol ( );
__declspec(implementation_key(1944)) void IPoint3D::PutParameterType ( enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(1945)) enum ksPoint3DTypeEnum IPoint3D::GetParameterType ( );
__declspec(implementation_key(1946)) IKompasAPIObjectPtr IPoint3D::GetParameters ( );
__declspec(implementation_key(1947)) void IVector3D::PutParametersType ( enum ksVector3DParametersTypeEnum PVal );
__declspec(implementation_key(1948)) enum ksVector3DParametersTypeEnum IVector3D::GetParametersType ( );
__declspec(implementation_key(1949)) IKompasAPIObjectPtr IVector3D::GetParameters ( );
__declspec(implementation_key(1950)) VARIANT_BOOL ILocalCoordinateSystem::SetDisplacementByAxis ( ksObj3dTypeEnum Axis, double NewVal );
__declspec(implementation_key(1951)) void ILocalCoordinateSystem::PutOrientationType ( enum ksOrientationTypeEnum Result );
__declspec(implementation_key(1952)) enum ksOrientationTypeEnum ILocalCoordinateSystem::GetOrientationType ( );
__declspec(implementation_key(1953)) VARIANT_BOOL ILocalCoordinateSystem::ReadFromFile ( _bstr_t FileName );
__declspec(implementation_key(1954)) VARIANT_BOOL ILocalCoordinateSystem::WriteToFile ( _bstr_t FileName );
__declspec(implementation_key(1955)) VARIANT_BOOL ILocalCoordinateSystem::SetStartingOrientation ( );
__declspec(implementation_key(1956)) VARIANT_BOOL ILocalCoordinateSystem::GetVector ( ksObj3dTypeEnum Axis, double * X, double * Y, double * Z );
__declspec(implementation_key(1957)) IKompasAPIObjectPtr ILocalCoordinateSystem::GetLocalCSParameters ( );
__declspec(implementation_key(1958)) void ILocalCoordinateSystem::PutCurrent ( VARIANT_BOOL Result );
__declspec(implementation_key(1959)) VARIANT_BOOL ILocalCoordinateSystem::GetCurrent ( );
__declspec(implementation_key(1960)) IModelObjectPtr ILocalCoordinateSystem::GetDefaultObject ( ksObj3dTypeEnum Val );
__declspec(implementation_key(1961)) VARIANT_BOOL ILocalCoordinateSystem::InitByMatrix3D ( const _variant_t & mtr );
__declspec(implementation_key(1962)) IVector3DPtr ILocalCoordinateSystem::GetVector3D ( ksObj3dTypeEnum Axis );
__declspec(implementation_key(1963)) void ILocalCoordinateSystem::PutShowName ( VARIANT_BOOL PVal );
__declspec(implementation_key(1964)) VARIANT_BOOL ILocalCoordinateSystem::GetShowName ( );
__declspec(implementation_key(1965)) VARIANT_BOOL IPlacement3D::GetOrigin ( double * X, double * Y, double * Z );
__declspec(implementation_key(1966)) VARIANT_BOOL IPlacement3D::SetOrigin ( double X, double Y, double Z );
__declspec(implementation_key(1967)) VARIANT_BOOL IPlacement3D::GetVector ( ksObj3dTypeEnum Axis, double * X, double * Y, double * Z );
__declspec(implementation_key(1968)) VARIANT_BOOL IPlacement3D::SetVector ( ksObj3dTypeEnum Axis, double X, double Y, double Z );
__declspec(implementation_key(1969)) VARIANT_BOOL IPlacement3D::InitByMatrix3D ( const _variant_t & mtr );
__declspec(implementation_key(1970)) _variant_t IPlacement3D::GetMatrix3D ( );
__declspec(implementation_key(1971)) VARIANT_BOOL IPlacement3D::GetPointProjectionToXY ( double XIn, double YIn, double ZIn, double * XOut, double * YOut );
__declspec(implementation_key(1972)) VARIANT_BOOL IPlacement3D::GetPoint3D ( double XIn, double YIn, double * XOut, double * YOut, double * ZOut );
__declspec(implementation_key(1973)) VARIANT_BOOL IPlacement3D::Rotate ( double X0, double Y0, double Z0, double AxisZX, double AxisZXY, double AxisZZ, double Angle );
__declspec(implementation_key(1974)) enum ksRoughSignEnum ISpecRough3D::GetSignType ( );
__declspec(implementation_key(1975)) void ISpecRough3D::PutSignType ( enum ksRoughSignEnum Result );
__declspec(implementation_key(1976)) _bstr_t ISpecRough3D::GetText ( );
__declspec(implementation_key(1977)) void ISpecRough3D::PutText ( _bstr_t PVal );
__declspec(implementation_key(1978)) VARIANT_BOOL ISpecRough3D::GetAddSign ( );
__declspec(implementation_key(1979)) void ISpecRough3D::PutAddSign ( VARIANT_BOOL PRes );
__declspec(implementation_key(1980)) VARIANT_BOOL ISpecRough3D::Delete ( );
__declspec(implementation_key(1981)) VARIANT_BOOL ISpecRough3D::GetIsCreated ( );
__declspec(implementation_key(1982)) enum ksSpecRoughPlacementEnum ISpecRough3D::GetPlacement ( );
__declspec(implementation_key(1983)) void ISpecRough3D::PutPlacement ( enum ksSpecRoughPlacementEnum Result );
__declspec(implementation_key(1984)) enum MateConstraintType IMateConstraint3D::GetConstraintType ( );
__declspec(implementation_key(1985)) void IMateConstraint3D::PutBaseObject1 ( struct IModelObject * PVal );
__declspec(implementation_key(1986)) IModelObjectPtr IMateConstraint3D::GetBaseObject1 ( );
__declspec(implementation_key(1987)) void IMateConstraint3D::PutBaseObject2 ( struct IModelObject * PVal );
__declspec(implementation_key(1988)) IModelObjectPtr IMateConstraint3D::GetBaseObject2 ( );
__declspec(implementation_key(1989)) void IMateConstraint3D::PutFixed ( enum ksMateFixedTypeEnum PVal );
__declspec(implementation_key(1990)) enum ksMateFixedTypeEnum IMateConstraint3D::GetFixed ( );
__declspec(implementation_key(1991)) void IMateConstraint3D::PutAlignment ( enum ksMateConstraintAlignmentEnum PVal );
__declspec(implementation_key(1992)) enum ksMateConstraintAlignmentEnum IMateConstraint3D::GetAlignment ( );
__declspec(implementation_key(1993)) void IMateConstraint3D::PutParamValue ( double PVal );
__declspec(implementation_key(1994)) double IMateConstraint3D::GetParamValue ( );
__declspec(implementation_key(1995)) enum ksMateType IMateConstraint3D::GetMateParams ( long Index, VARIANT * Params );
__declspec(implementation_key(1996)) IMateConstraint3DPtr IMateConstraints3D::GetMateConstraint3D ( const _variant_t & Index );
__declspec(implementation_key(1997)) IMateConstraint3DPtr IMateConstraints3D::Add ( enum MateConstraintType Type );
__declspec(implementation_key(1998)) _variant_t IMateConstraints3D::GetObjectConstraints ( struct IModelObject * Object );
__declspec(implementation_key(1999)) IMateConstraint3DPtr IMateConstraints3D::AddUserMate ( enum MateConstraintType Type );
__declspec(implementation_key(2000)) void IMateConstraints3D::PutMatesMultiCreatedMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(2001)) VARIANT_BOOL IMateConstraints3D::GetMatesMultiCreatedMode ( );
__declspec(implementation_key(2002)) VARIANT_BOOL IBody7::GetGabarit ( double * X1, double * Y1, double * Z1, double * X2, double * Y2, double * Z2 );
__declspec(implementation_key(2003)) _bstr_t IBody7::GetMarking ( );
__declspec(implementation_key(2004)) void IBody7::PutMarking ( _bstr_t PVal );
__declspec(implementation_key(2005)) _bstr_t IBody7::GetName ( );
__declspec(implementation_key(2006)) void IBody7::PutName ( _bstr_t PVal );
__declspec(implementation_key(2007)) VARIANT_BOOL IBody7::Update ( );
__declspec(implementation_key(2008)) void IBody7::PutHidden ( VARIANT_BOOL PVal );
__declspec(implementation_key(2009)) VARIANT_BOOL IBody7::GetHidden ( );
__declspec(implementation_key(2010)) IHatchParamPtr IBody7::GetHatchParam ( );
__declspec(implementation_key(2011)) long IBody7::GetLayerNumber ( );
__declspec(implementation_key(2012)) void IBody7::PutLayerNumber ( long PVal );
__declspec(implementation_key(2013)) void IBody7::PutProjected ( enum ksProjectionOptionEnum PVal );
__declspec(implementation_key(2014)) enum ksProjectionOptionEnum IBody7::GetProjected ( );
__declspec(implementation_key(2015)) void IBody7::PutHiddenEx ( enum ksVisibleStateEnum PVal );
__declspec(implementation_key(2016)) enum ksVisibleStateEnum IBody7::GetHiddenEx ( );
__declspec(implementation_key(2017)) void IBody7::PutEditable ( enum ksEditableStateEnum PVal );
__declspec(implementation_key(2018)) enum ksEditableStateEnum IBody7::GetEditable ( );
__declspec(implementation_key(2019)) IUnknownPtr IBody7::GetUserParameters ( _bstr_t Val );
__declspec(implementation_key(2020)) long IBody7::GetBodyId ( );
__declspec(implementation_key(2021)) void IBody7::PutCreateSpcObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(2022)) VARIANT_BOOL IBody7::GetCreateSpcObjects ( );
__declspec(implementation_key(2023)) long IBody7::GetBeginBodyId ( );
__declspec(implementation_key(2024)) long IBody7::GetFinalBodyId ( );
__declspec(implementation_key(2025)) long IBody7::GetOwnerBodyId ( );
__declspec(implementation_key(2026)) IModelObjectPtr IUserFolder::Add ( ksObj3dTypeEnum Type );
__declspec(implementation_key(2027)) _variant_t IUserFolder::GetObjects ( );
__declspec(implementation_key(2028)) VARIANT_BOOL IUserFolder::SetObjects ( const _variant_t & Objects );
__declspec(implementation_key(2029)) IUserFolderPtr IUserFolders::Add ( );
__declspec(implementation_key(2030)) enum ksZoneTypeEnum IZone::GetZoneType ( );
__declspec(implementation_key(2031)) void IZone::PutZoneType ( enum ksZoneTypeEnum PVal );
__declspec(implementation_key(2032)) IKompasAPIObjectPtr IZone::GetParameters ( );
__declspec(implementation_key(2033)) VARIANT_BOOL IZone::GetGabarit ( double * X1, double * Y1, double * Z1, double * X2, double * Y2, double * Z2 );
__declspec(implementation_key(2034)) _variant_t IZone::GetSelectObjects ( enum ksRegionTypeEnum SelectType );
__declspec(implementation_key(2035)) _variant_t IZone::GetSelectParts ( enum ksRegionTypeEnum SelectType );
__declspec(implementation_key(2036)) enum ksZoneDivisionTypeEnum IZoneDivision::GetZoneDivisionType ( );
__declspec(implementation_key(2037)) void IZoneDivision::PutZoneDivisionType ( enum ksZoneDivisionTypeEnum PVal );
__declspec(implementation_key(2038)) IZonePtr IZoneDivision::GetZone ( );
__declspec(implementation_key(2039)) void IZoneDivision::PutZone ( struct IZone * Result );
__declspec(implementation_key(2040)) IKompasAPIObjectPtr IZoneDivision::GetParameters ( );
__declspec(implementation_key(2041)) long IZonesManager::GetZonesCount ( );
__declspec(implementation_key(2042)) IZonePtr IZonesManager::GetZone ( const _variant_t & Index );
__declspec(implementation_key(2043)) IZonePtr IZonesManager::AddZone ( enum ksZoneTypeEnum ZoneType );
__declspec(implementation_key(2044)) long IZonesManager::GetZonesDivisionCount ( );
__declspec(implementation_key(2045)) IZoneDivisionPtr IZonesManager::GetZoneDivision ( const _variant_t & Index );
__declspec(implementation_key(2046)) IZoneDivisionPtr IZonesManager::AddZoneDivision ( enum ksZoneDivisionTypeEnum ZoneType );
__declspec(implementation_key(2047)) IZonePtr IZonesManager::GetCurrentZone ( );
__declspec(implementation_key(2048)) void IZonesManager::PutCurrentZone ( struct IZone * Result );
__declspec(implementation_key(2049)) VARIANT_BOOL IZonesManager::GetZonesVisible ( );
__declspec(implementation_key(2050)) void IZonesManager::PutZonesVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(2051)) VARIANT_BOOL IZonesManager::GetCreateZonesInGlobalCS ( );
__declspec(implementation_key(2052)) void IZonesManager::PutCreateZonesInGlobalCS ( VARIANT_BOOL PVal );
__declspec(implementation_key(2053)) IFeature7Ptr IZonesManager::GetZonesTree ( );
__declspec(implementation_key(2054)) VARIANT_BOOL ISelectionManager::Select ( const _variant_t & Objects );
__declspec(implementation_key(2055)) VARIANT_BOOL ISelectionManager::Unselect ( const _variant_t & Objects );
__declspec(implementation_key(2056)) VARIANT_BOOL ISelectionManager::UnselectAll ( );
__declspec(implementation_key(2057)) VARIANT_BOOL ISelectionManager::IsSelected ( struct IKompasAPIObject * Object );
__declspec(implementation_key(2058)) _variant_t ISelectionManager::GetSelectedObjects ( );
__declspec(implementation_key(2059)) VARIANT_BOOL IChooseManager::Choose ( const _variant_t & Objects );
__declspec(implementation_key(2060)) VARIANT_BOOL IChooseManager::Unchoose ( const _variant_t & Objects );
__declspec(implementation_key(2061)) VARIANT_BOOL IChooseManager::UnchooseAll ( );
__declspec(implementation_key(2062)) VARIANT_BOOL IChooseManager::IsChoosen ( struct IKompasAPIObject * Object );
__declspec(implementation_key(2063)) _variant_t IChooseManager::GetChoosenObjects ( );
__declspec(implementation_key(2064)) enum ksChooseManagerTypeEnum IChooseManager::GetCurrentManagerType ( );
__declspec(implementation_key(2065)) void IChooseManager::PutCurrentManagerType ( enum ksChooseManagerTypeEnum PVal );
__declspec(implementation_key(2066)) enum ksChooseManagerTypeEnum IChooseManager::GetManagerIndex ( struct IKompasAPIObject * Object );
__declspec(implementation_key(2067)) void IColumnInfo::PutCaption ( _bstr_t PVal );
__declspec(implementation_key(2068)) _bstr_t IColumnInfo::GetCaption ( );
__declspec(implementation_key(2069)) void IColumnInfo::PutColType ( enum ksValueTypeEnum PVal );
__declspec(implementation_key(2070)) enum ksValueTypeEnum IColumnInfo::GetColType ( );
__declspec(implementation_key(2071)) void IColumnInfo::PutKey ( long PVal );
__declspec(implementation_key(2072)) long IColumnInfo::GetKey ( );
__declspec(implementation_key(2073)) void IColumnInfo::PutDefValue ( const _variant_t & PVal );
__declspec(implementation_key(2074)) _variant_t IColumnInfo::GetDefValue ( );
__declspec(implementation_key(2075)) void IColumnInfo::PutListValue ( VARIANT_BOOL PVal );
__declspec(implementation_key(2076)) VARIANT_BOOL IColumnInfo::GetListValue ( );
__declspec(implementation_key(2077)) void IColumnInfo::PutSortListValue ( VARIANT_BOOL PVal );
__declspec(implementation_key(2078)) VARIANT_BOOL IColumnInfo::GetSortListValue ( );
__declspec(implementation_key(2079)) void IColumnInfo::PutRange ( const _variant_t & PVal );
__declspec(implementation_key(2080)) _variant_t IColumnInfo::GetRange ( );
__declspec(implementation_key(2081)) IColumnInfoPtr IColumnInfo::GetRecordColumnInfo ( const _variant_t & Index );
__declspec(implementation_key(2082)) IColumnInfoPtr IColumnInfo::AddRecordColumn ( long Index, enum ksValueTypeEnum Type, _bstr_t Name );
__declspec(implementation_key(2083)) VARIANT_BOOL IColumnInfo::Delete ( );
__declspec(implementation_key(2084)) long IColumnInfo::GetRecordColumnsCount ( );
__declspec(implementation_key(2085)) void IAttributeType::PutTypeName ( _bstr_t PVal );
__declspec(implementation_key(2086)) _bstr_t IAttributeType::GetTypeName ( );
__declspec(implementation_key(2087)) void IAttributeType::PutAttrType ( enum ksAttributeTypeEnum PVal );
__declspec(implementation_key(2088)) enum ksAttributeTypeEnum IAttributeType::GetAttrType ( );
__declspec(implementation_key(2089)) VARIANT_BOOL IAttributeType::GetKeysInfo ( long * Key1, long * Key2, long * Key3, long * Key4 );
__declspec(implementation_key(2090)) VARIANT_BOOL IAttributeType::SetKeysInfo ( long Key1, long Key2, long Key3, long Key4 );
__declspec(implementation_key(2091)) double IAttributeType::GetUniqueNumb ( );
__declspec(implementation_key(2092)) VARIANT_BOOL IAttributeType::SetPassword ( _bstr_t OldPassword, _bstr_t NewPassword );
__declspec(implementation_key(2093)) IColumnInfoPtr IAttributeType::GetColumnInfo ( const _variant_t & Index );
__declspec(implementation_key(2094)) IColumnInfoPtr IAttributeType::AddColumn ( long Index, enum ksValueTypeEnum Type, _bstr_t Name );
__declspec(implementation_key(2095)) VARIANT_BOOL IAttributeType::Update ( _bstr_t Password );
__declspec(implementation_key(2096)) VARIANT_BOOL IAttributeType::Delete ( _bstr_t Password );
__declspec(implementation_key(2097)) VARIANT_BOOL IAttributeType::ViewEdit ( OLE_HANDLE Parent, _bstr_t Password, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(2098)) void IAttributeType::PutRowsCount ( long Count );
__declspec(implementation_key(2099)) long IAttributeType::GetRowsCount ( );
__declspec(implementation_key(2100)) _bstr_t IAttributeType::GetFileName ( );
__declspec(implementation_key(2101)) long IAttributeType::GetColumnsCount ( );
__declspec(implementation_key(2102)) void IAttribute::PutObjects ( const _variant_t & Result );
__declspec(implementation_key(2103)) _variant_t IAttribute::GetObjects ( );
__declspec(implementation_key(2104)) _variant_t IAttribute::GetValue ( long RowNumb, long ColumnNumb );
__declspec(implementation_key(2105)) VARIANT_BOOL IAttribute::SetValue ( _bstr_t Password, long RowNumb, long ColumnNumb, const _variant_t & Value );
__declspec(implementation_key(2106)) _variant_t IAttribute::GetValues ( );
__declspec(implementation_key(2107)) VARIANT_BOOL IAttribute::SetValues ( _bstr_t Password, const _variant_t & Values );
__declspec(implementation_key(2108)) _variant_t IAttribute::GetFlagVisible ( );
__declspec(implementation_key(2109)) VARIANT_BOOL IAttribute::SetFlagVisible ( _bstr_t Password, const _variant_t & Values );
__declspec(implementation_key(2110)) _variant_t IAttribute::GetColumnKey ( );
__declspec(implementation_key(2111)) VARIANT_BOOL IAttribute::SetColumnKey ( _bstr_t Password, const _variant_t & Keys );
__declspec(implementation_key(2112)) VARIANT_BOOL IAttribute::SetPassword ( _bstr_t OldPassword, _bstr_t NewPassword );
__declspec(implementation_key(2113)) VARIANT_BOOL IAttribute::AddRow ( _bstr_t Password, long RowNumb );
__declspec(implementation_key(2114)) VARIANT_BOOL IAttribute::DeleteRow ( _bstr_t Password, long RowNumb );
__declspec(implementation_key(2115)) VARIANT_BOOL IAttribute::GetKeysInfo ( long * Key1, long * Key2, long * Key3, long * Key4, double * Numb );
__declspec(implementation_key(2116)) VARIANT_BOOL IAttribute::SetKeysInfo ( _bstr_t Password, long Key1, long Key2, long Key3, long Key4 );
__declspec(implementation_key(2117)) IAttributeTypePtr IAttribute::GetAttributeType ( );
__declspec(implementation_key(2118)) long IAttribute::GetRowsCount ( );
__declspec(implementation_key(2119)) long IAttribute::GetColumnsCount ( );
__declspec(implementation_key(2120)) VARIANT_BOOL IAttribute::Delete ( _bstr_t Password, const _variant_t & Objects );
__declspec(implementation_key(2121)) VARIANT_BOOL IAttribute::ViewEdit ( OLE_HANDLE Parent, _bstr_t Password, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(2122)) _variant_t IAttribute::GetRecordFlagVisible ( long ColumnNumb );
__declspec(implementation_key(2123)) VARIANT_BOOL IAttribute::SetRecordFlagVisible ( _bstr_t Password, long ColumnNumb, const _variant_t & Values );
__declspec(implementation_key(2124)) ITextPtr ITechnicalDemand3D::GetText ( );
__declspec(implementation_key(2125)) VARIANT_BOOL ITechnicalDemand3D::Update ( );
__declspec(implementation_key(2126)) VARIANT_BOOL ITechnicalDemand3D::GetIsCreated ( );
__declspec(implementation_key(2127)) VARIANT_BOOL ITechnicalDemand3D::Delete ( );
__declspec(implementation_key(2128)) void ITechnicalDemand3D::PutHidden ( VARIANT_BOOL PVal );
__declspec(implementation_key(2129)) VARIANT_BOOL ITechnicalDemand3D::GetHidden ( );
__declspec(implementation_key(2130)) void ITechnicalDemand3D::PutEditable ( enum ksEditableStateEnum PVal );
__declspec(implementation_key(2131)) enum ksEditableStateEnum ITechnicalDemand3D::GetEditable ( );
__declspec(implementation_key(2132)) enum ksTechnicalDemand3DPlacementEnum ITechnicalDemand3D::GetPlacement ( );
__declspec(implementation_key(2133)) void ITechnicalDemand3D::PutPlacement ( enum ksTechnicalDemand3DPlacementEnum Result );
__declspec(implementation_key(2134)) VARIANT_BOOL ITechnicalDemand3D::GetGabarit ( long * Left, long * Top, long * Right, long * Bottom );
__declspec(implementation_key(2135)) void IParametriticConstraint::PutConstraintType ( enum ksConstraintTypeEnum PVal );
__declspec(implementation_key(2136)) enum ksConstraintTypeEnum IParametriticConstraint::GetConstraintType ( );
__declspec(implementation_key(2137)) void IParametriticConstraint::PutIndex ( long PVal );
__declspec(implementation_key(2138)) long IParametriticConstraint::GetIndex ( );
__declspec(implementation_key(2139)) void IParametriticConstraint::PutPartner ( const _variant_t & PVal );
__declspec(implementation_key(2140)) _variant_t IParametriticConstraint::GetPartner ( );
__declspec(implementation_key(2141)) void IParametriticConstraint::PutPartnerIndex ( long PVal );
__declspec(implementation_key(2142)) long IParametriticConstraint::GetPartnerIndex ( );
__declspec(implementation_key(2143)) void IParametriticConstraint::PutValue ( double PVal );
__declspec(implementation_key(2144)) double IParametriticConstraint::GetValue ( );
__declspec(implementation_key(2145)) void IParametriticConstraint::PutExpression ( _bstr_t PVal );
__declspec(implementation_key(2146)) _bstr_t IParametriticConstraint::GetExpression ( );
__declspec(implementation_key(2147)) void IParametriticConstraint::PutComment ( _bstr_t PVal );
__declspec(implementation_key(2148)) _bstr_t IParametriticConstraint::GetComment ( );
__declspec(implementation_key(2149)) void IParametriticConstraint::PutVariable ( _bstr_t PVal );
__declspec(implementation_key(2150)) _bstr_t IParametriticConstraint::GetVariable ( );
__declspec(implementation_key(2151)) void IParametriticConstraint::PutDegrees ( long PVal );
__declspec(implementation_key(2152)) long IParametriticConstraint::GetDegrees ( );
__declspec(implementation_key(2153)) void IParametriticConstraint::PutMinutes ( long PVal );
__declspec(implementation_key(2154)) long IParametriticConstraint::GetMinutes ( );
__declspec(implementation_key(2155)) void IParametriticConstraint::PutSeconds ( double PVal );
__declspec(implementation_key(2156)) double IParametriticConstraint::GetSeconds ( );
__declspec(implementation_key(2157)) VARIANT_BOOL IParametriticConstraint::Delete ( );
__declspec(implementation_key(2158)) VARIANT_BOOL IParametriticConstraint::Create ( );
__declspec(implementation_key(2159)) VARIANT_BOOL IParametriticConstraint::GetValid ( );
__declspec(implementation_key(2160)) IDrawingObjectPtr IParametriticConstraint::GetAxis ( );
__declspec(implementation_key(2161)) void IParametriticConstraint::PutAxis ( struct IDrawingObject * PVal );
__declspec(implementation_key(2162)) void IParametriticConstraint::PutBisectorVariant ( enum ksBisectorVariant PVal );
__declspec(implementation_key(2163)) enum ksBisectorVariant IParametriticConstraint::GetBisectorVariant ( );
__declspec(implementation_key(2164)) void IParametriticConstraint::PutSegmentIndex ( long PVal );
__declspec(implementation_key(2165)) long IParametriticConstraint::GetSegmentIndex ( );
__declspec(implementation_key(2166)) void IParametriticConstraint::PutPartnerSegmentIndex ( long PVal );
__declspec(implementation_key(2167)) long IParametriticConstraint::GetPartnerSegmentIndex ( );
__declspec(implementation_key(2168)) void IParametriticConstraint::PutAxisSegmentIndex ( long PVal );
__declspec(implementation_key(2169)) long IParametriticConstraint::GetAxisSegmentIndex ( );
__declspec(implementation_key(2170)) _variant_t IDrawingObject1::GetConstraints ( );
__declspec(implementation_key(2171)) IParametriticConstraintPtr IDrawingObject1::NewConstraint ( );
__declspec(implementation_key(2172)) VARIANT_BOOL IDrawingObject1::Associate ( );
__declspec(implementation_key(2173)) VARIANT_BOOL IDrawingObject1::DeleteConstraints ( );
__declspec(implementation_key(2174)) VARIANT_BOOL IDrawingObject1::GetTransparentBackground ( );
__declspec(implementation_key(2175)) void IDrawingObject1::PutTransparentBackground ( VARIANT_BOOL Value );
__declspec(implementation_key(2176)) VARIANT_BOOL IDrawingObject1::GetAutoTransparentBackground ( );
__declspec(implementation_key(2177)) void IDrawingObject1::PutAutoTransparentBackground ( VARIANT_BOOL Value );
__declspec(implementation_key(2178)) VARIANT_BOOL IDrawingObject1::GetIsGeometryObject ( );
__declspec(implementation_key(2179)) VARIANT_BOOL IDrawingObject1::GetIsAnnotativeObject ( );
__declspec(implementation_key(2180)) VARIANT_BOOL IDrawingObject1::GetIsCurve ( );
__declspec(implementation_key(2181)) _bstr_t IDrawingObject1::GetHyperLinkParam ( enum ksHyperLinkTypeEnum * Type, struct IDrawingObject * * LinkObject, long * Level );
__declspec(implementation_key(2182)) VARIANT_BOOL IDrawingObject1::DeleteHyperLink ( );
__declspec(implementation_key(2183)) ICurve2DPtr IDrawingObject1::GetCurve2D ( );
__declspec(implementation_key(2184)) __int64 IDrawingObject1::GetId ( );
__declspec(implementation_key(2185)) VARIANT_BOOL IDrawingObject1::GetIsInAssociationView ( );
__declspec(implementation_key(2186)) VARIANT_BOOL IDrawingObject1::GetIsVisibleInAssociationView ( );
__declspec(implementation_key(2187)) void IRasterConvertParameters::PutRasterFormat ( enum ksRasterFormatEnum PVal );
__declspec(implementation_key(2188)) enum ksRasterFormatEnum IRasterConvertParameters::GetRasterFormat ( );
__declspec(implementation_key(2189)) void IRasterConvertParameters::PutColorBPP ( enum ksColorBPPEnum PVal );
__declspec(implementation_key(2190)) enum ksColorBPPEnum IRasterConvertParameters::GetColorBPP ( );
__declspec(implementation_key(2191)) void IRasterConvertParameters::PutGreyScale ( VARIANT_BOOL PVal );
__declspec(implementation_key(2192)) VARIANT_BOOL IRasterConvertParameters::GetGreyScale ( );
__declspec(implementation_key(2193)) void IRasterConvertParameters::PutResolution ( long Result );
__declspec(implementation_key(2194)) long IRasterConvertParameters::GetResolution ( );
__declspec(implementation_key(2195)) void IRasterConvertParameters::PutScale ( double Result );
__declspec(implementation_key(2196)) double IRasterConvertParameters::GetScale ( );
__declspec(implementation_key(2197)) void IRasterConvertParameters::PutColorType ( enum ksObjectColorTypeEnum PVal );
__declspec(implementation_key(2198)) enum ksObjectColorTypeEnum IRasterConvertParameters::GetColorType ( );
__declspec(implementation_key(2199)) void IRasterConvertParameters::PutOnlyThinLine ( VARIANT_BOOL PVal );
__declspec(implementation_key(2200)) VARIANT_BOOL IRasterConvertParameters::GetOnlyThinLine ( );
__declspec(implementation_key(2201)) void IRasterConvertParameters::PutSheetsRange ( enum ksSheetsRangeEnum PVal );
__declspec(implementation_key(2202)) enum ksSheetsRangeEnum IRasterConvertParameters::GetSheetsRange ( );
__declspec(implementation_key(2203)) void IRasterConvertParameters::PutSheets ( const _variant_t & PVal );
__declspec(implementation_key(2204)) _variant_t IRasterConvertParameters::GetSheets ( );
__declspec(implementation_key(2205)) void IRasterConvertParameters::PutSaveWorkArea ( VARIANT_BOOL PVal );
__declspec(implementation_key(2206)) VARIANT_BOOL IRasterConvertParameters::GetSaveWorkArea ( );
__declspec(implementation_key(2207)) void IRasterConvertParameters::PutMultiPageOutput ( enum ksMultiPageOutputEnum PVal );
__declspec(implementation_key(2208)) enum ksMultiPageOutputEnum IRasterConvertParameters::GetMultiPageOutput ( );
__declspec(implementation_key(2209)) void IRasterConvertParameters::PutUncompressed ( VARIANT_BOOL PVal );
__declspec(implementation_key(2210)) VARIANT_BOOL IRasterConvertParameters::GetUncompressed ( );
__declspec(implementation_key(2211)) void IRasterConvertParameters::PutReturnResultAsArrayBytes ( VARIANT_BOOL PVal );
__declspec(implementation_key(2212)) VARIANT_BOOL IRasterConvertParameters::GetReturnResultAsArrayBytes ( );
__declspec(implementation_key(2213)) void IRasterConvertParameters::PutResultArrayBytes ( const _variant_t & PVal );
__declspec(implementation_key(2214)) _variant_t IRasterConvertParameters::GetResultArrayBytes ( );
__declspec(implementation_key(2215)) VARIANT_BOOL IRasterConvertParameters::Clear ( );
__declspec(implementation_key(2216)) VARIANT_BOOL IKompasDocument1::Delete ( const _variant_t & Objects );
__declspec(implementation_key(2217)) _variant_t IKompasDocument1::GetAttributes ( long Key1, long Key2, long Key3, long Key4, double Numb, const _variant_t & Objects );
__declspec(implementation_key(2218)) _variant_t IKompasDocument1::GetObjectsByAttr ( long Key1, long Key2, long Key3, long Key4, double Numb, const _variant_t & ObjectType );
__declspec(implementation_key(2219)) IAttributePtr IKompasDocument1::CreateAttr ( double AttrID, _bstr_t Libname, const _variant_t & Objects );
__declspec(implementation_key(2220)) VARIANT_BOOL IKompasDocument1::ViewEditAttr ( OLE_HANDLE HWnd, const _variant_t & Objects );
__declspec(implementation_key(2221)) IKompasAPIObjectPtr IKompasDocument1::GetInterface ( enum KompasAPIObjectTypeEnum Type );
__declspec(implementation_key(2222)) _variant_t IKompasDocument1::GetExternalFilesNames ( VARIANT_BOOL allFiles );
__declspec(implementation_key(2223)) VARIANT_BOOL IKompasDocument1::SaveAsEx ( _bstr_t PathName, long saveMode );
__declspec(implementation_key(2224)) double IKompasDocument1::GetCreationDate ( );
__declspec(implementation_key(2225)) double IKompasDocument1::GetLastChangeDate ( );
__declspec(implementation_key(2226)) VARIANT_BOOL IKompasDocument1::GetExternalFilesNamesEx ( VARIANT_BOOL allFiles, VARIANT * Files, VARIANT * FilesTypes );
__declspec(implementation_key(2227)) _bstr_t IKompasDocument1::GetOrganization ( );
__declspec(implementation_key(2228)) void IKompasDocument1::PutOrganization ( _bstr_t PVal );
__declspec(implementation_key(2229)) VARIANT_BOOL IKompasDocument1::ReportPropertiesMultieditMode ( VARIANT_BOOL On, VARIANT_BOOL UpdateProps );
__declspec(implementation_key(2230)) _bstr_t IKompasDocument1::GetMetadata ( );
__declspec(implementation_key(2231)) void IKompasDocument1::PutMetadata ( _bstr_t PVal );
__declspec(implementation_key(2232)) VARIANT_BOOL IKompasDocument1::WriteMetadataToFile ( _bstr_t FileName );
__declspec(implementation_key(2233)) VARIANT_BOOL IKompasDocument1::ApplyMetadataFromFile ( _bstr_t FileName );
__declspec(implementation_key(2234)) VARIANT_BOOL IKompasDocument1::ActivateToolbarSet ( _bstr_t TolbrSetId );
__declspec(implementation_key(2235)) VARIANT_BOOL IKompasDocument1::RedrawDocument ( enum ksRedrawDocumentModeEnum Mode );
__declspec(implementation_key(2236)) _bstr_t IKompasDocument1::GetAuthor ( );
__declspec(implementation_key(2237)) void IKompasDocument1::PutAuthor ( _bstr_t PVal );
__declspec(implementation_key(2238)) void IKompasDocument1::PutComment ( _bstr_t PVal );
__declspec(implementation_key(2239)) _bstr_t IKompasDocument1::GetComment ( );
__declspec(implementation_key(2240)) void IKompasDocument1::PutDocumentTypeId ( _bstr_t PVal );
__declspec(implementation_key(2241)) _bstr_t IKompasDocument1::GetDocumentTypeId ( );
__declspec(implementation_key(2242)) long IKompasDocument1::GetOpenVersion ( );
__declspec(implementation_key(2243)) VARIANT_BOOL IKompasDocument1::ReplaceExternalFilesNames ( VARIANT_BOOL allFiles, _bstr_t OldFileName, _bstr_t NewFileName );
__declspec(implementation_key(2244)) VARIANT_BOOL IKompasDocument1::SetChanged ( VARIANT_BOOL Changed );
__declspec(implementation_key(2245)) _bstr_t IKompasDocument1::GetObjectId ( struct IKompasAPIObject * Object, struct IKompasAPIObject * Parent );
__declspec(implementation_key(2246)) IKompasAPIObjectPtr IKompasDocument1::FindObjectById ( _bstr_t Id, struct IKompasAPIObject * Parent );
__declspec(implementation_key(2247)) VARIANT_BOOL IKompasDocument1::SaveAsToRasterFormat ( _bstr_t FileName, struct IRasterConvertParameters * Param );
__declspec(implementation_key(2248)) enum ksArrowEnum IBaseLeader::GetArrowType ( );
__declspec(implementation_key(2249)) void IBaseLeader::PutArrowType ( enum ksArrowEnum Result );
__declspec(implementation_key(2250)) IBaseLeaderPtr ILeaders::GetLeader ( const _variant_t & Index );
__declspec(implementation_key(2251)) IBaseLeaderPtr ILeaders::Add ( enum DrawingObjectTypeEnum DimType );
__declspec(implementation_key(2252)) void IFindObjectParameters::PutFindObjectsType ( enum ksFindObjectsTypeEnum PVal );
__declspec(implementation_key(2253)) enum ksFindObjectsTypeEnum IFindObjectParameters::GetFindObjectsType ( );
__declspec(implementation_key(2254)) void IFindObjectParameters::PutDrawingObjectType ( enum DrawingObjectTypeEnum Type );
__declspec(implementation_key(2255)) enum DrawingObjectTypeEnum IFindObjectParameters::GetDrawingObjectType ( );
__declspec(implementation_key(2256)) void IFindObjectParameters::PutFindInBackgroundViewsAndLayers ( VARIANT_BOOL PVal );
__declspec(implementation_key(2257)) VARIANT_BOOL IFindObjectParameters::GetFindInBackgroundViewsAndLayers ( );
__declspec(implementation_key(2258)) void IFindObjectParameters::PutGeometryOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(2259)) VARIANT_BOOL IFindObjectParameters::GetGeometryOnly ( );
__declspec(implementation_key(2260)) void IFindObjectParameters::PutDisabledObjects ( const _variant_t & PVal );
__declspec(implementation_key(2261)) _variant_t IFindObjectParameters::GetDisabledObjects ( );
__declspec(implementation_key(2262)) void IFindObjectParameters::PutDisabledViews ( const _variant_t & PVal );
__declspec(implementation_key(2263)) _variant_t IFindObjectParameters::GetDisabledViews ( );
__declspec(implementation_key(2264)) VARIANT_BOOL IFindObjectParameters::Clear ( );
__declspec(implementation_key(2265)) void IMacroObject::PutLibraryFileName ( _bstr_t PVal );
__declspec(implementation_key(2266)) _bstr_t IMacroObject::GetLibraryFileName ( );
__declspec(implementation_key(2267)) void IMacroObject::PutLibraryName ( _bstr_t PVal );
__declspec(implementation_key(2268)) _bstr_t IMacroObject::GetLibraryName ( );
__declspec(implementation_key(2269)) void IMacroObject::PutCommand ( long PVal );
__declspec(implementation_key(2270)) long IMacroObject::GetCommand ( );
__declspec(implementation_key(2271)) void IMacroObject::PutDoubleClickEditable ( VARIANT_BOOL PVal );
__declspec(implementation_key(2272)) VARIANT_BOOL IMacroObject::GetDoubleClickEditable ( );
__declspec(implementation_key(2273)) void IMacroObject::PutHotPointsEditable ( VARIANT_BOOL PVal );
__declspec(implementation_key(2274)) VARIANT_BOOL IMacroObject::GetHotPointsEditable ( );
__declspec(implementation_key(2275)) void IMacroObject::PutExternalEditable ( VARIANT_BOOL PVal );
__declspec(implementation_key(2276)) VARIANT_BOOL IMacroObject::GetExternalEditable ( );
__declspec(implementation_key(2277)) void IMacroObject::PutUserParams ( const _variant_t & PVal );
__declspec(implementation_key(2278)) _variant_t IMacroObject::GetUserParams ( );
__declspec(implementation_key(2279)) VARIANT_BOOL IMacroObject::AddObjects ( const _variant_t & Objects );
__declspec(implementation_key(2280)) VARIANT_BOOL IMacroObject::GetPlacement ( double * X, double * Y, double * Angle, VARIANT_BOOL * MirrorSymmetry );
__declspec(implementation_key(2281)) VARIANT_BOOL IMacroObject::SetPlacement ( double X, double Y, double Angle, VARIANT_BOOL * MirrorSymmetry, VARIANT_BOOL Relative );
__declspec(implementation_key(2282)) void IMacroObject::PutName ( _bstr_t PVal );
__declspec(implementation_key(2283)) _bstr_t IMacroObject::GetName ( );
__declspec(implementation_key(2284)) ILeadersPtr IMacroObject::GetAttachedLeaders ( );
__declspec(implementation_key(2285)) VARIANT_BOOL IMacroObject::DeleteAttachedLeaders ( );
__declspec(implementation_key(2286)) VARIANT_BOOL IMacroObject::AddDefaultHotPoint ( double X, double Y );
__declspec(implementation_key(2287)) VARIANT_BOOL IMacroObject::DeleteDefaultHotPoint ( );
__declspec(implementation_key(2288)) void IMacroObject::PutPropertyObjectEditable ( VARIANT_BOOL PVal );
__declspec(implementation_key(2289)) VARIANT_BOOL IMacroObject::GetPropertyObjectEditable ( );
__declspec(implementation_key(2290)) void IMacroObject::PutCreateSpcObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(2291)) VARIANT_BOOL IMacroObject::GetCreateSpcObjects ( );
__declspec(implementation_key(2292)) void IMacroObject::PutBreakObjectsEnabled ( VARIANT_BOOL PVal );
__declspec(implementation_key(2293)) VARIANT_BOOL IMacroObject::GetBreakObjectsEnabled ( );
__declspec(implementation_key(2294)) IDrawingObjectPtr IMacroObject::FindObject ( double X, double Y, double Limit, struct IFindObjectParameters * Param );
__declspec(implementation_key(2295)) _bstr_t IMacroObject::GetLabel ( );
__declspec(implementation_key(2296)) VARIANT_BOOL IMacroObject::TransformPointToView ( double * X, double * Y );
__declspec(implementation_key(2297)) VARIANT_BOOL IMacroObject::TransformPointFromView ( double * X, double * Y );
__declspec(implementation_key(2298)) VARIANT_BOOL IMacroObject::TransformAngleToView ( double * Angle );
__declspec(implementation_key(2299)) VARIANT_BOOL IMacroObject::TransformAngleFromView ( double * Angle );
__declspec(implementation_key(2300)) void IDrawingGroup::PutName ( _bstr_t PVal );
__declspec(implementation_key(2301)) _bstr_t IDrawingGroup::GetName ( );
__declspec(implementation_key(2302)) _variant_t IDrawingGroup::GetObjects ( const _variant_t & Type );
__declspec(implementation_key(2303)) VARIANT_BOOL IDrawingGroup::AddObjects ( const _variant_t & Objects );
__declspec(implementation_key(2304)) VARIANT_BOOL IDrawingGroup::DetachObjects ( const _variant_t & Objects, VARIANT_BOOL DeleteTmp );
__declspec(implementation_key(2305)) VARIANT_BOOL IDrawingGroup::Clear ( VARIANT_BOOL DeleteTmp );
__declspec(implementation_key(2306)) VARIANT_BOOL IDrawingGroup::Store ( );
__declspec(implementation_key(2307)) long IDrawingGroup::GetObjectsCount ( );
__declspec(implementation_key(2308)) VARIANT_BOOL IDrawingGroup::ExistObject ( struct IDrawingObject * Object );
__declspec(implementation_key(2309)) VARIANT_BOOL IDrawingGroup::Delete ( );
__declspec(implementation_key(2310)) VARIANT_BOOL IDrawingGroup::AddRegion ( enum ksRegionTypeEnum RegionType, double XMin, double YMin, double XMax, double YMax );
__declspec(implementation_key(2311)) VARIANT_BOOL IDrawingGroup::ReadFragment ( _bstr_t FileName, VARIANT_BOOL CurentLayer, double XBase, double YBase, double Scale, double Angle, VARIANT_BOOL ScaleProjLinesSize );
__declspec(implementation_key(2312)) VARIANT_BOOL IDrawingGroup::WriteFragment ( _bstr_t FileName, _bstr_t Comment, double XBase, double YBase );
__declspec(implementation_key(2313)) VARIANT_BOOL IDrawingGroup::WriteToClip ( VARIANT_BOOL AttrCopy, VARIANT_BOOL SpcObjCopy );
__declspec(implementation_key(2314)) VARIANT_BOOL IDrawingGroup::ReadFromClip ( VARIANT_BOOL AttrCopy, VARIANT_BOOL SpcObjCopy );
__declspec(implementation_key(2315)) VARIANT_BOOL IDrawingGroup::Draw ( OLE_HANDLE HWnd );
__declspec(implementation_key(2316)) VARIANT_BOOL IDrawingGroup::Open ( );
__declspec(implementation_key(2317)) VARIANT_BOOL IDrawingGroup::Close ( );
__declspec(implementation_key(2318)) VARIANT_BOOL IDrawingGroup::GetCurrent ( );
__declspec(implementation_key(2319)) IDrawingGroupPtr IDrawingGroups::GetItem ( const _variant_t & Index );
__declspec(implementation_key(2320)) IDrawingGroupPtr IDrawingGroups::Add ( VARIANT_BOOL Temp, _bstr_t Name );
__declspec(implementation_key(2321)) void ICopyObjectParam::PutXOld ( double PVal );
__declspec(implementation_key(2322)) double ICopyObjectParam::GetXOld ( );
__declspec(implementation_key(2323)) void ICopyObjectParam::PutYOld ( double PVal );
__declspec(implementation_key(2324)) double ICopyObjectParam::GetYOld ( );
__declspec(implementation_key(2325)) void ICopyObjectParam::PutXNew ( double PVal );
__declspec(implementation_key(2326)) double ICopyObjectParam::GetXNew ( );
__declspec(implementation_key(2327)) void ICopyObjectParam::PutYNew ( double PVal );
__declspec(implementation_key(2328)) double ICopyObjectParam::GetYNew ( );
__declspec(implementation_key(2329)) void ICopyObjectParam::PutScale ( double PVal );
__declspec(implementation_key(2330)) double ICopyObjectParam::GetScale ( );
__declspec(implementation_key(2331)) void ICopyObjectParam::PutAngle ( double PVal );
__declspec(implementation_key(2332)) double ICopyObjectParam::GetAngle ( );
__declspec(implementation_key(2333)) void ICopyObjectParam::PutAttributeCopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(2334)) VARIANT_BOOL ICopyObjectParam::GetAttributeCopy ( );
__declspec(implementation_key(2335)) void ICopyObjectParam::PutDimensionLineScale ( VARIANT_BOOL PVal );
__declspec(implementation_key(2336)) VARIANT_BOOL ICopyObjectParam::GetDimensionLineScale ( );
__declspec(implementation_key(2337)) void ICopyObjectParam::PutSpecificationObjectCopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(2338)) VARIANT_BOOL ICopyObjectParam::GetSpecificationObjectCopy ( );
__declspec(implementation_key(2339)) void IPhantom2D::PutPhantomType ( enum ksPhantomTypeEnum PVal );
__declspec(implementation_key(2340)) enum ksPhantomTypeEnum IPhantom2D::GetPhantomType ( );
__declspec(implementation_key(2341)) void IPhantom2D::PutX ( double PVal );
__declspec(implementation_key(2342)) double IPhantom2D::GetX ( );
__declspec(implementation_key(2343)) void IPhantom2D::PutY ( double PVal );
__declspec(implementation_key(2344)) double IPhantom2D::GetY ( );
__declspec(implementation_key(2345)) void IPhantom2D::PutAngle ( double PVal );
__declspec(implementation_key(2346)) double IPhantom2D::GetAngle ( );
__declspec(implementation_key(2347)) void IPhantom2D::PutScale ( double PVal );
__declspec(implementation_key(2348)) double IPhantom2D::GetScale ( );
__declspec(implementation_key(2349)) void IPhantom2D::PutPhantomGroup ( struct IDrawingGroup * PVal );
__declspec(implementation_key(2350)) IDrawingGroupPtr IPhantom2D::GetPhantomGroup ( );
__declspec(implementation_key(2351)) void IPhantom2D::PutHorizontal ( VARIANT_BOOL PVal );
__declspec(implementation_key(2352)) VARIANT_BOOL IPhantom2D::GetHorizontal ( );
__declspec(implementation_key(2353)) VARIANT_BOOL IPhantom2D::Update ( );
__declspec(implementation_key(2354)) VARIANT_BOOL IPhantom2D::Show ( );
__declspec(implementation_key(2355)) VARIANT_BOOL IPhantom2D::Hide ( );
__declspec(implementation_key(2356)) void IProcess2D::PutX ( double PVal );
__declspec(implementation_key(2357)) double IProcess2D::GetX ( );
__declspec(implementation_key(2358)) void IProcess2D::PutY ( double PVal );
__declspec(implementation_key(2359)) double IProcess2D::GetY ( );
__declspec(implementation_key(2360)) void IProcess2D::PutAngle ( double PVal );
__declspec(implementation_key(2361)) double IProcess2D::GetAngle ( );
__declspec(implementation_key(2362)) IPhantom2DPtr IProcess2D::GetPhantom2D ( );
__declspec(implementation_key(2363)) IMacroObjectPtr IKompasDocument2D1::GetEditMacroObject ( );
__declspec(implementation_key(2364)) IDrawingGroupsPtr IKompasDocument2D1::GetDrawingGroups ( );
__declspec(implementation_key(2365)) IDrawingGroupsPtr IKompasDocument2D1::GetNamedGroups ( );
__declspec(implementation_key(2366)) IDrawingGroupPtr IKompasDocument2D1::GetCurrentGroup ( );
__declspec(implementation_key(2367)) ISelectionManagerPtr IKompasDocument2D1::GetSelectionManager ( );
__declspec(implementation_key(2368)) IChooseManagerPtr IKompasDocument2D1::GetChooseManager ( );
__declspec(implementation_key(2369)) _variant_t IKompasDocument2D1::CopyObjects ( const _variant_t & Objects, struct ICopyObjectParam * Params );
__declspec(implementation_key(2370)) _variant_t IKompasDocument2D1::GetVariables ( VARIANT_BOOL ExternalOnly );
__declspec(implementation_key(2371)) IVariable7Ptr IKompasDocument2D1::GetVariable ( VARIANT_BOOL External, const _variant_t & Index );
__declspec(implementation_key(2372)) long IKompasDocument2D1::GetVariablesCount ( VARIANT_BOOL External );
__declspec(implementation_key(2373)) VARIANT_BOOL IKompasDocument2D1::UpdateVariables ( );
__declspec(implementation_key(2374)) IVariableTablePtr IKompasDocument2D1::GetVariableTable ( );
__declspec(implementation_key(2375)) VARIANT_BOOL IKompasDocument2D1::IsVariableNameValid ( _bstr_t Name );
__declspec(implementation_key(2376)) IVariable7Ptr IKompasDocument2D1::AddVariable ( _bstr_t Name, double Value, _bstr_t Note );
__declspec(implementation_key(2377)) VARIANT_BOOL IKompasDocument2D1::RebuildDocument ( );
__declspec(implementation_key(2378)) VARIANT_BOOL IKompasDocument2D1::CreateHyperLink ( const _variant_t & Objects, enum ksHyperLinkTypeEnum Type, _bstr_t Text, struct IDrawingObject * LinkObject, long Level );
__declspec(implementation_key(2379)) _variant_t IKompasDocument2D1::GetHyperLinkObjects ( enum ksHyperLinkTypeEnum Type, struct IDrawingObject * LinkObject, long Level, _bstr_t Text );
__declspec(implementation_key(2380)) VARIANT_BOOL IKompasDocument2D1::DeleteHyperLinks ( const _variant_t & Objects );
__declspec(implementation_key(2381)) VARIANT_BOOL IKompasDocument2D1::GetEditMacroVisibleRegime ( );
__declspec(implementation_key(2382)) IDrawingObjectPtr IKompasDocument2D1::GetObjectById ( __int64 Id );
__declspec(implementation_key(2383)) IProcess2DPtr IKompasDocument2D1::GetLibProcess ( enum ksProcess2DTypeEnum ProcessType );
__declspec(implementation_key(2384)) IDrawingObjectPtr IKompasDocument2D1::FindObject ( double X, double Y, double Limit, struct IFindObjectParameters * Param );
__declspec(implementation_key(2385)) _variant_t IKompasDocument2D1::FindObjects ( double X, double Y, double Limit, struct IFindObjectParameters * Param );
__declspec(implementation_key(2386)) _variant_t IKompasDocument2D1::SelectObjects ( enum ksRegionTypeEnum RegionType, double XMin, double YMin, double XMax, double YMax );
__declspec(implementation_key(2387)) _variant_t IKompasDocument2D1::GetIntervalVariables ( );
__declspec(implementation_key(2388)) IVariable7Ptr IKompasDocument2D1::AddIntervalVariable ( _bstr_t Name, double FirstValue, double SecondValue );
__declspec(implementation_key(2389)) IVariable7Ptr IKompasDocument2D1::GetIntervalVariable ( const _variant_t & Index );
__declspec(implementation_key(2390)) _variant_t IKompasDocument2D1::GetUserFuncVariables ( );
__declspec(implementation_key(2391)) IVariable7Ptr IKompasDocument2D1::AddUserFuncVariable ( _bstr_t Name, _bstr_t Expression );
__declspec(implementation_key(2392)) IVariable7Ptr IKompasDocument2D1::GetUserFuncVariable ( const _variant_t & Index );
__declspec(implementation_key(2393)) VARIANT_BOOL IKompasDocument2D1::ClearUndo ( );
__declspec(implementation_key(2394)) void IKompasDocument2D1::PutEnableUndo ( VARIANT_BOOL PVal );
__declspec(implementation_key(2395)) VARIANT_BOOL IKompasDocument2D1::GetEnableUndo ( );
__declspec(implementation_key(2396)) void IKompasDocument2D1::PutUndoContainer ( VARIANT_BOOL PVal );
__declspec(implementation_key(2397)) VARIANT_BOOL IKompasDocument2D1::GetUndoContainer ( );
__declspec(implementation_key(2398)) VARIANT_BOOL IKompasDocument2D1::CompleteRebuildDocument ( );
__declspec(implementation_key(2399)) void ILayer3D::PutName ( _bstr_t PVal );
__declspec(implementation_key(2400)) _bstr_t ILayer3D::GetName ( );
__declspec(implementation_key(2401)) long ILayer3D::GetNumber ( );
__declspec(implementation_key(2402)) void ILayer3D::PutNumber ( long PVal );
__declspec(implementation_key(2403)) void ILayer3D::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(2404)) VARIANT_BOOL ILayer3D::GetVisible ( );
__declspec(implementation_key(2405)) void ILayer3D::PutCurrent ( VARIANT_BOOL PVal );
__declspec(implementation_key(2406)) VARIANT_BOOL ILayer3D::GetCurrent ( );
__declspec(implementation_key(2407)) void ILayer3D::PutColor ( long PVal );
__declspec(implementation_key(2408)) long ILayer3D::GetColor ( );
__declspec(implementation_key(2409)) void ILayer3D::PutComment ( _bstr_t PVal );
__declspec(implementation_key(2410)) _bstr_t ILayer3D::GetComment ( );
__declspec(implementation_key(2411)) void ILayer3D::PutEditable ( VARIANT_BOOL PVal );
__declspec(implementation_key(2412)) VARIANT_BOOL ILayer3D::GetEditable ( );
__declspec(implementation_key(2413)) void ILayer3D::PutProjected ( VARIANT_BOOL PVal );
__declspec(implementation_key(2414)) VARIANT_BOOL ILayer3D::GetProjected ( );
__declspec(implementation_key(2415)) VARIANT_BOOL ILayer3D::Delete ( );
__declspec(implementation_key(2416)) VARIANT_BOOL ILayer3D::Update ( );
__declspec(implementation_key(2417)) ILayer3DPtr ILayers3D::GetLayer3D ( const _variant_t & Index );
__declspec(implementation_key(2418)) ILayer3DPtr ILayers3D::GetLayer3DByNumber ( long Number );
__declspec(implementation_key(2419)) ILayer3DPtr ILayers3D::Add ( );
__declspec(implementation_key(2420)) VARIANT_BOOL ILayers3D::Attach ( struct ILayer3D * PVal );
__declspec(implementation_key(2421)) VARIANT_BOOL ILayers3D::Detach ( struct ILayer3D * PVal );
__declspec(implementation_key(2422)) enum ksManipulatorTypeEnum IBaseManipulator::GetManipulatorType ( );
__declspec(implementation_key(2423)) long IBaseManipulator::GetId ( );
__declspec(implementation_key(2424)) void IBaseManipulator::PutId ( long PVal );
__declspec(implementation_key(2425)) IPlacement3DPtr IBaseManipulator::GetPlacement ( );
__declspec(implementation_key(2426)) VARIANT_BOOL IBaseManipulator::UpdatePlacement ( VARIANT_BOOL Redraw );
__declspec(implementation_key(2427)) void IBaseManipulator::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(2428)) VARIANT_BOOL IBaseManipulator::GetVisible ( );
__declspec(implementation_key(2429)) void IBaseManipulator::PutActive ( VARIANT_BOOL PVal );
__declspec(implementation_key(2430)) VARIANT_BOOL IBaseManipulator::GetActive ( );
__declspec(implementation_key(2431)) VARIANT_BOOL IBaseManipulator::Create ( );
__declspec(implementation_key(2432)) VARIANT_BOOL IBaseManipulator::Delete ( );
__declspec(implementation_key(2433)) IBaseManipulatorPtr IManipulators::GetItem ( const _variant_t & Index );
__declspec(implementation_key(2434)) IBaseManipulatorPtr IManipulators::GetManipulator ( long Id );
__declspec(implementation_key(2435)) IBaseManipulatorPtr IManipulators::Add ( enum ksManipulatorTypeEnum Type );
__declspec(implementation_key(2436)) IPlacement3DPtr IProcess3D::GetPlacement ( );
__declspec(implementation_key(2437)) IModelObjectPtr IProcess3D::GetPhantomObject ( );
__declspec(implementation_key(2438)) void IProcess3D::PutPhantomObject ( struct IModelObject * PVal );
__declspec(implementation_key(2439)) _variant_t IProcess3D::GetMateConstraintsObjects ( );
__declspec(implementation_key(2440)) void IProcess3D::PutMateConstraintsObjects ( const _variant_t & PVal );
__declspec(implementation_key(2441)) IMateConstraints3DPtr IProcess3D::GetMateConstraints ( );
__declspec(implementation_key(2442)) VARIANT_BOOL IProcess3D::RunTakeCreateObjectProcess ( enum ProcessTypeEnum ProcessType, struct IModelObject * TakeObject, VARIANT_BOOL NeedCreateTakeObj, VARIANT_BOOL LostTakeObj );
__declspec(implementation_key(2443)) IModelObjectPtr IProcess3D::GetTakeProcessObject ( );
__declspec(implementation_key(2444)) void IProcess3D::PutTakeProcessObject ( struct IModelObject * PVal );
__declspec(implementation_key(2445)) IManipulatorsPtr IProcess3D::GetManipulators ( );
__declspec(implementation_key(2446)) void IProcess3D::PutSelectionBandMode ( enum ksSelectionBandMode PVal );
__declspec(implementation_key(2447)) enum ksSelectionBandMode IProcess3D::GetSelectionBandMode ( );
__declspec(implementation_key(2448)) void IProcess3D::PutObjectsFilter3D ( enum ksProcessObjectsFilter3DEnum Type, VARIANT_BOOL PVal );
__declspec(implementation_key(2449)) VARIANT_BOOL IProcess3D::GetObjectsFilter3D ( enum ksProcessObjectsFilter3DEnum Type );
__declspec(implementation_key(2450)) VARIANT_BOOL IProcess3D::GetClearProcessUndo ( );
__declspec(implementation_key(2451)) void IProcess3D::PutClearProcessUndo ( VARIANT_BOOL PVal );
__declspec(implementation_key(2452)) void IFindObject3DParameters::PutModelObjectType ( ksObj3dTypeEnum Type );
__declspec(implementation_key(2453)) ksObj3dTypeEnum IFindObject3DParameters::GetModelObjectType ( );
__declspec(implementation_key(2454)) double ISpecRough::GetX ( );
__declspec(implementation_key(2455)) void ISpecRough::PutX ( double Result );
__declspec(implementation_key(2456)) double ISpecRough::GetY ( );
__declspec(implementation_key(2457)) void ISpecRough::PutY ( double Result );
__declspec(implementation_key(2458)) void ISpecRough::PutAutoPlacement ( VARIANT_BOOL PVal );
__declspec(implementation_key(2459)) VARIANT_BOOL ISpecRough::GetAutoPlacement ( );
__declspec(implementation_key(2460)) enum ksRoughSignEnum ISpecRough::GetSignType ( );
__declspec(implementation_key(2461)) void ISpecRough::PutSignType ( enum ksRoughSignEnum Result );
__declspec(implementation_key(2462)) _bstr_t ISpecRough::GetText ( );
__declspec(implementation_key(2463)) void ISpecRough::PutText ( _bstr_t PVal );
__declspec(implementation_key(2464)) double ISpecRough::GetDistance ( );
__declspec(implementation_key(2465)) void ISpecRough::PutDistance ( double PVal );
__declspec(implementation_key(2466)) VARIANT_BOOL ISpecRough::GetAddSign ( );
__declspec(implementation_key(2467)) void ISpecRough::PutAddSign ( VARIANT_BOOL PRes );
__declspec(implementation_key(2468)) VARIANT_BOOL ISpecRough::Update ( );
__declspec(implementation_key(2469)) VARIANT_BOOL ISpecRough::Delete ( );
__declspec(implementation_key(2470)) VARIANT_BOOL ISpecRough::GetIsCreated ( );
__declspec(implementation_key(2471)) VARIANT_BOOL ISpecRough::GetCrossed ( );
__declspec(implementation_key(2472)) ITextPtr ITechnicalDemand::GetText ( );
__declspec(implementation_key(2473)) _variant_t ITechnicalDemand::GetBlocksGabarits ( );
__declspec(implementation_key(2474)) void ITechnicalDemand::PutBlocksGabarits ( const _variant_t & PVal );
__declspec(implementation_key(2475)) void ITechnicalDemand::PutAutoPlacement ( VARIANT_BOOL PVal );
__declspec(implementation_key(2476)) VARIANT_BOOL ITechnicalDemand::GetAutoPlacement ( );
__declspec(implementation_key(2477)) VARIANT_BOOL ITechnicalDemand::Update ( );
__declspec(implementation_key(2478)) VARIANT_BOOL ITechnicalDemand::Delete ( );
__declspec(implementation_key(2479)) VARIANT_BOOL ITechnicalDemand::GetIsCreated ( );
__declspec(implementation_key(2480)) _variant_t ITechnicalDemand::GetBlocksStartLineNumbers ( );
__declspec(implementation_key(2481)) VARIANT_BOOL ITechnicalDemand::Synchronize ( );
__declspec(implementation_key(2482)) long IDimensionText::GetStyle ( );
__declspec(implementation_key(2483)) void IDimensionText::PutStyle ( long Result );
__declspec(implementation_key(2484)) long IDimensionText::GetSign ( );
__declspec(implementation_key(2485)) void IDimensionText::PutSign ( long Result );
__declspec(implementation_key(2486)) _bstr_t IDimensionText::GetSignFont ( );
__declspec(implementation_key(2487)) void IDimensionText::PutSignFont ( _bstr_t Result );
__declspec(implementation_key(2488)) double IDimensionText::GetNominalValue ( );
__declspec(implementation_key(2489)) void IDimensionText::PutNominalValue ( double Result );
__declspec(implementation_key(2490)) VARIANT_BOOL IDimensionText::GetAutoNominalValue ( );
__declspec(implementation_key(2491)) void IDimensionText::PutAutoNominalValue ( VARIANT_BOOL Result );
__declspec(implementation_key(2492)) VARIANT_BOOL IDimensionText::GetToleranceOn ( );
__declspec(implementation_key(2493)) void IDimensionText::PutToleranceOn ( VARIANT_BOOL Result );
__declspec(implementation_key(2494)) VARIANT_BOOL IDimensionText::GetDeviationOn ( );
__declspec(implementation_key(2495)) void IDimensionText::PutDeviationOn ( VARIANT_BOOL Result );
__declspec(implementation_key(2496)) enum ksDimensionDeviationEnum IDimensionText::GetDeviationType ( );
__declspec(implementation_key(2497)) void IDimensionText::PutDeviationType ( enum ksDimensionDeviationEnum Result );
__declspec(implementation_key(2498)) VARIANT_BOOL IDimensionText::GetRectangle ( );
__declspec(implementation_key(2499)) void IDimensionText::PutRectangle ( VARIANT_BOOL Result );
__declspec(implementation_key(2500)) VARIANT_BOOL IDimensionText::GetUnderline ( );
__declspec(implementation_key(2501)) void IDimensionText::PutUnderline ( VARIANT_BOOL Result );
__declspec(implementation_key(2502)) enum ksDimensionTextBracketsEnum IDimensionText::GetBrackets ( );
__declspec(implementation_key(2503)) void IDimensionText::PutBrackets ( enum ksDimensionTextBracketsEnum Result );
__declspec(implementation_key(2504)) enum ksDimensionTextAlignEnum IDimensionText::GetTextAlign ( );
__declspec(implementation_key(2505)) void IDimensionText::PutTextAlign ( enum ksDimensionTextAlignEnum Result );
__declspec(implementation_key(2506)) ITextLinePtr IDimensionText::GetPrefix ( );
__declspec(implementation_key(2507)) ITextLinePtr IDimensionText::GetNominalText ( );
__declspec(implementation_key(2508)) _bstr_t IDimensionText::GetTolerance ( );
__declspec(implementation_key(2509)) void IDimensionText::PutTolerance ( _bstr_t PVal );
__declspec(implementation_key(2510)) ITextLinePtr IDimensionText::GetHighDeviation ( );
__declspec(implementation_key(2511)) ITextLinePtr IDimensionText::GetLowDeviation ( );
__declspec(implementation_key(2512)) ITextLinePtr IDimensionText::GetUnit ( );
__declspec(implementation_key(2513)) ITextLinePtr IDimensionText::GetSuffix ( );
__declspec(implementation_key(2514)) ITextPtr IDimensionText::GetTextUnder ( );
__declspec(implementation_key(2515)) enum ksDimTextFormatEnum IDimensionText::GetTextFormat ( );
__declspec(implementation_key(2516)) void IDimensionText::PutTextFormat ( enum ksDimTextFormatEnum PVal );
__declspec(implementation_key(2517)) VARIANT_BOOL IDimensionText::GetHasTolerance ( );
__declspec(implementation_key(2518)) void IDimensionText::PutHasTolerance ( VARIANT_BOOL Result );
__declspec(implementation_key(2519)) double IDimensionText::GetHighDeviationValue ( );
__declspec(implementation_key(2520)) double IDimensionText::GetLowDeviationValue ( );
__declspec(implementation_key(2521)) VARIANT_BOOL IDimensionText::InitDeviations ( double HighDeviationValue, double LowDeviationValue );
__declspec(implementation_key(2522)) enum ksAccuracyEnum IDimensionText::GetAccuracy ( );
__declspec(implementation_key(2523)) void IDimensionText::PutAccuracy ( enum ksAccuracyEnum Result );
__declspec(implementation_key(2524)) long IDimensionText::GetAccuracyDecimalsCount ( );
__declspec(implementation_key(2525)) IAttributeTypePtr IAttrTypeMng::CreateAttrType ( const _variant_t & Libname );
__declspec(implementation_key(2526)) IAttributeTypePtr IAttrTypeMng::GetAttrType ( double AttrID, const _variant_t & Libname );
__declspec(implementation_key(2527)) IAttributeTypePtr IAttrTypeMng::ChoiceAttrTypes ( OLE_HANDLE HWnd, const _variant_t & Libname );
__declspec(implementation_key(2528)) _variant_t IAttrTypeMng::GetAttrTypes ( const _variant_t & Libname );
__declspec(implementation_key(2529)) IStylesPtr IStylesManager::GetCurvesStyles ( );
__declspec(implementation_key(2530)) IStylesPtr IStylesManager::GetTextsStyles ( );
__declspec(implementation_key(2531)) IStylesPtr IStylesManager::GetHatchsStyles ( );
__declspec(implementation_key(2532)) void ICurveStyle::PutCurveStyleType ( enum ksCurveStyleTypeEnum PVal );
__declspec(implementation_key(2533)) enum ksCurveStyleTypeEnum ICurveStyle::GetCurveStyleType ( );
__declspec(implementation_key(2534)) void ICurveStyle::PutCurvePenType ( enum ksCurvePenTypeEnum PVal );
__declspec(implementation_key(2535)) enum ksCurvePenTypeEnum ICurveStyle::GetCurvePenType ( );
__declspec(implementation_key(2536)) VARIANT_BOOL ICurveStyle::GetForHatch ( );
__declspec(implementation_key(2537)) void ICurveStyle::PutForHatch ( VARIANT_BOOL PVal );
__declspec(implementation_key(2538)) void ICurveStyle::PutColor ( long PVal );
__declspec(implementation_key(2539)) long ICurveStyle::GetColor ( );
__declspec(implementation_key(2540)) void ICurveStyle::PutPaperWidth ( double PVal );
__declspec(implementation_key(2541)) double ICurveStyle::GetPaperWidth ( );
__declspec(implementation_key(2542)) void ICurveStyle::PutScreenWidth ( long PVal );
__declspec(implementation_key(2543)) long ICurveStyle::GetScreenWidth ( );
__declspec(implementation_key(2544)) VARIANT_BOOL ICurveStyle::GetSmartParts ( );
__declspec(implementation_key(2545)) void ICurveStyle::PutSmartParts ( VARIANT_BOOL PVal );
__declspec(implementation_key(2546)) VARIANT_BOOL ICurveStyle::GetIgnoreFragmentStyle ( );
__declspec(implementation_key(2547)) void ICurveStyle::PutIgnoreFragmentStyle ( VARIANT_BOOL PVal );
__declspec(implementation_key(2548)) long ICurveStyle::GetPatternsCount ( );
__declspec(implementation_key(2549)) VARIANT_BOOL ICurveStyle::AddPattern ( double VisibleSegmentLenght, double invisibleSegmentLenght );
__declspec(implementation_key(2550)) VARIANT_BOOL ICurveStyle::DeletePattern ( long PatternIndex );
__declspec(implementation_key(2551)) VARIANT_BOOL ICurveStyle::ClearPatterns ( );
__declspec(implementation_key(2552)) double ICurveStyle::GetPatternVisibleSegmentLenght ( long PatternIndex );
__declspec(implementation_key(2553)) void ICurveStyle::PutPatternVisibleSegmentLenght ( long PatternIndex, double Result );
__declspec(implementation_key(2554)) double ICurveStyle::GetPatternInvisibleSegmentLenght ( long PatternIndex );
__declspec(implementation_key(2555)) void ICurveStyle::PutPatternInvisibleSegmentLenght ( long PatternIndex, double Result );
__declspec(implementation_key(2556)) double ICurveStyle::GetPatternFragmentDx ( long PatternIndex );
__declspec(implementation_key(2557)) void ICurveStyle::PutPatternFragmentDx ( long PatternIndex, double Result );
__declspec(implementation_key(2558)) double ICurveStyle::GetPatternFragmentDy ( long PatternIndex );
__declspec(implementation_key(2559)) void ICurveStyle::PutPatternFragmentDy ( long PatternIndex, double Result );
__declspec(implementation_key(2560)) long ICurveStyle::GetPatternFragmentPoligonsCount ( long PatternIndex );
__declspec(implementation_key(2561)) void ICurveStyle::PutPatternFragmentPoligon ( long PatternIndex, long PoligonIndex, const _variant_t & PVal );
__declspec(implementation_key(2562)) _variant_t ICurveStyle::GetPatternFragmentPoligon ( long PatternIndex, long PoligonIndex );
__declspec(implementation_key(2563)) VARIANT_BOOL ICurveStyle::AddPatternFragmentPoligon ( long PatternIndex, const _variant_t & Points );
__declspec(implementation_key(2564)) VARIANT_BOOL ICurveStyle::DeletePatternFragmentPoligon ( long PatternIndex, long PoligonIndex );
__declspec(implementation_key(2565)) VARIANT_BOOL ICurveStyle::ClearPatternFragmentPoligons ( long PatternIndex );
__declspec(implementation_key(2566)) long ICurveStyle::GetPatternFragmentFilletsPoligonsCount ( long PatternIndex );
__declspec(implementation_key(2567)) void ICurveStyle::PutPatternFragmentFilletsPoligon ( long PatternIndex, long PoligonIndex, const _variant_t & PVal );
__declspec(implementation_key(2568)) _variant_t ICurveStyle::GetPatternFragmentFilletsPoligon ( long PatternIndex, long PoligonIndex );
__declspec(implementation_key(2569)) VARIANT_BOOL ICurveStyle::AddPatternFragmentFilletsPoligon ( long PatternIndex, const _variant_t & Points );
__declspec(implementation_key(2570)) VARIANT_BOOL ICurveStyle::DeletePatternFragmentFilletsPoligon ( long PatternIndex, long PoligonIndex );
__declspec(implementation_key(2571)) VARIANT_BOOL ICurveStyle::ClearPatternFragmentFilletsPoligons ( long PatternIndex );
__declspec(implementation_key(2572)) VARIANT_BOOL ICurveStyle::LoadPatternFragment ( long PatternIndex, _bstr_t FileName );
__declspec(implementation_key(2573)) VARIANT_BOOL ICurveStyle::SetPatternFragment ( long PatternIndex, const _variant_t & Geom );
__declspec(implementation_key(2574)) double IHatchStyle::GetAngle ( );
__declspec(implementation_key(2575)) void IHatchStyle::PutAngle ( double Result );
__declspec(implementation_key(2576)) VARIANT_BOOL IHatchStyle::GetKeepAngle ( );
__declspec(implementation_key(2577)) void IHatchStyle::PutKeepAngle ( VARIANT_BOOL Result );
__declspec(implementation_key(2578)) double IHatchStyle::GetScale ( );
__declspec(implementation_key(2579)) void IHatchStyle::PutScale ( double Result );
__declspec(implementation_key(2580)) VARIANT_BOOL IHatchStyle::GetKeepScale ( );
__declspec(implementation_key(2581)) void IHatchStyle::PutKeepScale ( VARIANT_BOOL Result );
__declspec(implementation_key(2582)) VARIANT_BOOL IHatchStyle::GetHatchType ( );
__declspec(implementation_key(2583)) void IHatchStyle::PutHatchType ( VARIANT_BOOL Result );
__declspec(implementation_key(2584)) double IHatchStyle::GetWidth ( );
__declspec(implementation_key(2585)) void IHatchStyle::PutWidth ( double Result );
__declspec(implementation_key(2586)) IStylesPtr IHatchStyle::GetCurvesStyles ( );
__declspec(implementation_key(2587)) long IHatchStyle::GetLinesCount ( );
__declspec(implementation_key(2588)) VARIANT_BOOL IHatchStyle::AddLine ( struct ICurveStyle * Style, double X, double Y, double Angle, double DX, double DY );
__declspec(implementation_key(2589)) VARIANT_BOOL IHatchStyle::DeleteLine ( long Index );
__declspec(implementation_key(2590)) VARIANT_BOOL IHatchStyle::ClearLines ( );
__declspec(implementation_key(2591)) ICurveStylePtr IHatchStyle::GetLineStyle ( long Index );
__declspec(implementation_key(2592)) void IHatchStyle::PutLineStyle ( long Index, struct ICurveStyle * Result );
__declspec(implementation_key(2593)) double IHatchStyle::GetLineBeginX ( long Index );
__declspec(implementation_key(2594)) void IHatchStyle::PutLineBeginX ( long Index, double Result );
__declspec(implementation_key(2595)) double IHatchStyle::GetLineBeginY ( long Index );
__declspec(implementation_key(2596)) void IHatchStyle::PutLineBeginY ( long Index, double Result );
__declspec(implementation_key(2597)) double IHatchStyle::GetLineAngle ( long Index );
__declspec(implementation_key(2598)) void IHatchStyle::PutLineAngle ( long Index, double Result );
__declspec(implementation_key(2599)) double IHatchStyle::GetLineDx ( long Index );
__declspec(implementation_key(2600)) void IHatchStyle::PutLineDx ( long Index, double Result );
__declspec(implementation_key(2601)) double IHatchStyle::GetLineDy ( long Index );
__declspec(implementation_key(2602)) void IHatchStyle::PutLineDy ( long Index, double Result );
__declspec(implementation_key(2603)) _bstr_t IReportStyleColumn::GetHeader ( );
__declspec(implementation_key(2604)) void IReportStyleColumn::PutHeader ( _bstr_t PVal );
__declspec(implementation_key(2605)) double IReportStyleColumn::GetId ( );
__declspec(implementation_key(2606)) VARIANT_BOOL IReportStyleColumn::GetUserColumn ( );
__declspec(implementation_key(2607)) IPropertyPtr IReportStyleColumn::GetProperty ( );
__declspec(implementation_key(2608)) void IReportStyleColumn::PutProperty ( struct IProperty * PVal );
__declspec(implementation_key(2609)) double IReportStyleColumn::GetWidth ( );
__declspec(implementation_key(2610)) void IReportStyleColumn::PutWidth ( double PVal );
__declspec(implementation_key(2611)) enum ksGroupeTypeEnum IReportStyleColumn::GetGroupeType ( );
__declspec(implementation_key(2612)) void IReportStyleColumn::PutGroupeType ( enum ksGroupeTypeEnum PVal );
__declspec(implementation_key(2613)) VARIANT_BOOL IReportStyleColumn::GetVisible ( );
__declspec(implementation_key(2614)) void IReportStyleColumn::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(2615)) VARIANT_BOOL IReportStyleColumn::GetWordWrap ( );
__declspec(implementation_key(2616)) void IReportStyleColumn::PutWordWrap ( VARIANT_BOOL PVal );
__declspec(implementation_key(2617)) enum ksAlignEnum IReportStyleColumn::GetTextAlign ( );
__declspec(implementation_key(2618)) void IReportStyleColumn::PutTextAlign ( enum ksAlignEnum PVal );
__declspec(implementation_key(2619)) VARIANT_BOOL IReportStyleColumn::GetCombineCells ( );
__declspec(implementation_key(2620)) void IReportStyleColumn::PutCombineCells ( VARIANT_BOOL PVal );
__declspec(implementation_key(2621)) enum ksValueFormatEnum IReportStyleColumn::GetValueFormat ( );
__declspec(implementation_key(2622)) void IReportStyleColumn::PutValueFormat ( enum ksValueFormatEnum PVal );
__declspec(implementation_key(2623)) _variant_t IReportStyleColumn::GetPropertyLevel ( );
__declspec(implementation_key(2624)) void IReportStyleColumn::PutPropertyLevel ( const _variant_t & PVal );
__declspec(implementation_key(2625)) long IReportStyle::GetColumnsCount ( );
__declspec(implementation_key(2626)) IReportStyleColumnPtr IReportStyle::GetColumn ( const _variant_t & Index );
__declspec(implementation_key(2627)) IReportStyleColumnPtr IReportStyle::AddColumn ( long IndexAt, _bstr_t Name, struct IProperty * Property );
__declspec(implementation_key(2628)) VARIANT_BOOL IReportStyle::SwapColumn ( long Index1, long Index2 );
__declspec(implementation_key(2629)) VARIANT_BOOL IReportStyle::DeleteColumn ( const _variant_t & Index );
__declspec(implementation_key(2630)) VARIANT_BOOL IReportStyle::Clear ( );
__declspec(implementation_key(2631)) long IReportStyle::GetRowsCount ( );
__declspec(implementation_key(2632)) void IReportStyle::PutRowsCount ( long PVal );
__declspec(implementation_key(2633)) VARIANT_BOOL IReportStyle::GetDivideIntoPage ( );
__declspec(implementation_key(2634)) void IReportStyle::PutDivideIntoPage ( VARIANT_BOOL PVal );
__declspec(implementation_key(2635)) long IReportStyle::GetTitleHeight ( );
__declspec(implementation_key(2636)) void IReportStyle::PutTitleHeight ( long PVal );
__declspec(implementation_key(2637)) long IReportStyle::GetRowHeight ( );
__declspec(implementation_key(2638)) void IReportStyle::PutRowHeight ( long PVal );
__declspec(implementation_key(2639)) VARIANT_BOOL IReportStyle::GetShowEmptyRows ( );
__declspec(implementation_key(2640)) void IReportStyle::PutShowEmptyRows ( VARIANT_BOOL PVal );
__declspec(implementation_key(2641)) VARIANT_BOOL IReportStyle::GetShowTitle ( );
__declspec(implementation_key(2642)) void IReportStyle::PutShowTitle ( VARIANT_BOOL PVal );
__declspec(implementation_key(2643)) enum ksRowsNumberingTypeEnum IReportStyle::GetRowsNumberingType ( );
__declspec(implementation_key(2644)) void IReportStyle::PutRowsNumberingType ( enum ksRowsNumberingTypeEnum PVal );
__declspec(implementation_key(2645)) enum ksNumberingTypeEnum IReportStyle::GetColumnNumberingType ( );
__declspec(implementation_key(2646)) void IReportStyle::PutColumnNumberingType ( enum ksNumberingTypeEnum PVal );
__declspec(implementation_key(2647)) long IReportStyle::GetColumnNumberingInitVal ( );
__declspec(implementation_key(2648)) void IReportStyle::PutColumnNumberingInitVal ( long PVal );
__declspec(implementation_key(2649)) VARIANT_BOOL IReportStyle::GetDrawBottom ( );
__declspec(implementation_key(2650)) void IReportStyle::PutDrawBottom ( VARIANT_BOOL PVal );
__declspec(implementation_key(2651)) VARIANT_BOOL IReportStyle::Init ( enum ksReportStyleInitEnum Type );
__declspec(implementation_key(2652)) VARIANT_BOOL IReportStyle::GetSortParameters ( long Level, long * ColumnNumber, enum ksSortTypeEnum * SortType );
__declspec(implementation_key(2653)) VARIANT_BOOL IReportStyle::SetSortParameters ( long Level, long ColumnNumber, enum ksSortTypeEnum SortType );
__declspec(implementation_key(2654)) VARIANT_BOOL IReportStyle::ClearSortParameters ( );
__declspec(implementation_key(2655)) void IReportStyle::PutName ( _bstr_t PVal );
__declspec(implementation_key(2656)) _bstr_t IReportStyle::GetName ( );
__declspec(implementation_key(2657)) double IReportStyle::GetId ( );
__declspec(implementation_key(2658)) long IReportProcess::GetStylesCount ( );
__declspec(implementation_key(2659)) void IReportProcess::PutActiveStyleIndex ( const _variant_t & Index );
__declspec(implementation_key(2660)) _variant_t IReportProcess::GetActiveStyleIndex ( );
__declspec(implementation_key(2661)) IReportFilterPtr IReportProcess::GetReportFilter ( );
__declspec(implementation_key(2662)) void IReportProcess::PutReportFilterUse ( VARIANT_BOOL Index );
__declspec(implementation_key(2663)) VARIANT_BOOL IReportProcess::GetReportFilterUse ( );
__declspec(implementation_key(2664)) _bstr_t INumericGroup::GetName ( );
__declspec(implementation_key(2665)) void INumericGroup::PutName ( _bstr_t PVal );
__declspec(implementation_key(2666)) enum ksNumericGroupTypeEnum INumericGroup::GetNumericGroupType ( );
__declspec(implementation_key(2667)) void INumericGroup::PutNumericGroupType ( enum ksNumericGroupTypeEnum PVal );
__declspec(implementation_key(2668)) VARIANT_BOOL INumericGroup::GetIsSystem ( );
__declspec(implementation_key(2669)) long INumericGroup::GetCount ( );
__declspec(implementation_key(2670)) IKompasAPIObjectPtr INumericGroup::GetItem ( const _variant_t & Index );
__declspec(implementation_key(2671)) _variant_t INumericGroup::GetObjects ( );
__declspec(implementation_key(2672)) void INumericGroup::PutObjects ( const _variant_t & Result );
__declspec(implementation_key(2673)) VARIANT_BOOL INumericGroup::Delete ( );
__declspec(implementation_key(2674)) VARIANT_BOOL INumericGroup::Attach ( struct IKompasAPIObject * Object );
__declspec(implementation_key(2675)) VARIANT_BOOL INumericGroup::Dettach ( struct IKompasAPIObject * Object );
__declspec(implementation_key(2676)) VARIANT_BOOL INumericGroup::IsExist ( struct IKompasAPIObject * Object );
__declspec(implementation_key(2677)) VARIANT_BOOL INumericGroup::IsEnableAdd ( struct IKompasAPIObject * Object );
__declspec(implementation_key(2678)) _bstr_t INumericGroup::GetObjectNumber ( struct IKompasAPIObject * Object, VARIANT_BOOL FullName );
__declspec(implementation_key(2679)) _bstr_t INumericGroup::GetNextName ( struct IKompasAPIObject * Object );
__declspec(implementation_key(2680)) long INumericGroup::GetMinCharsCount ( );
__declspec(implementation_key(2681)) void INumericGroup::PutMinCharsCount ( long Result );
__declspec(implementation_key(2682)) _bstr_t INumericGroup::GetAutoNumerationSymbols ( );
__declspec(implementation_key(2683)) void INumericGroup::PutAutoNumerationSymbols ( _bstr_t Result );
__declspec(implementation_key(2684)) _bstr_t INumericGroup::GetTextBefore ( );
__declspec(implementation_key(2685)) void INumericGroup::PutTextBefore ( _bstr_t Result );
__declspec(implementation_key(2686)) _bstr_t INumericGroup::GetTextAfter ( );
__declspec(implementation_key(2687)) void INumericGroup::PutTextAfter ( _bstr_t Result );
__declspec(implementation_key(2688)) long INumericGroup::GetStartIndex ( );
__declspec(implementation_key(2689)) void INumericGroup::PutStartIndex ( long Result );
__declspec(implementation_key(2690)) VARIANT_BOOL INumericGroup::GetAutoNumerationEnable ( );
__declspec(implementation_key(2691)) void INumericGroup::PutAutoNumerationEnable ( VARIANT_BOOL Result );
__declspec(implementation_key(2692)) VARIANT_BOOL IReportTable::GetDisplayMode ( );
__declspec(implementation_key(2693)) void IReportTable::PutDisplayMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(2694)) long IReportTable::GetRowsCount ( );
__declspec(implementation_key(2695)) long IReportTable::GetColumnsCount ( );
__declspec(implementation_key(2696)) _variant_t IReportTable::GetCellValue ( long NRow, long NCol );
__declspec(implementation_key(2697)) void IReportTable::PutCellValue ( long NRow, long NCol, const _variant_t & PVal );
__declspec(implementation_key(2698)) _bstr_t IReportTable::GetFormatCellValue ( long NRow, long NCol );
__declspec(implementation_key(2699)) ITextPtr IReportTable::GetText ( long NRow, long NCol );
__declspec(implementation_key(2700)) IReportStyleColumnPtr IReportTable::GetStyleColumn ( long NCol );
__declspec(implementation_key(2701)) IPropertyKeeperPtr IReportTable::GetPropertyKeeper ( long RowIndex );
__declspec(implementation_key(2702)) _variant_t IPropertyEdit::GetMinValue ( );
__declspec(implementation_key(2703)) _variant_t IPropertyEdit::GetMaxValue ( );
__declspec(implementation_key(2704)) VARIANT_BOOL IPropertyEdit::SetValueRange ( const _variant_t & MinVal, const _variant_t & MaxVal );
__declspec(implementation_key(2705)) void IPropertyEdit::PutWithCheck ( VARIANT_BOOL PVal );
__declspec(implementation_key(2706)) VARIANT_BOOL IPropertyEdit::GetWithCheck ( );
__declspec(implementation_key(2707)) void IPropertyEdit::PutCheckState ( enum CheckStateEnum PVal );
__declspec(implementation_key(2708)) enum CheckStateEnum IPropertyEdit::GetCheckState ( );
__declspec(implementation_key(2709)) void IPropertyEdit::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(2710)) VARIANT_BOOL IPropertyEdit::GetReadOnly ( );
__declspec(implementation_key(2711)) void IPropertyEdit::PutWidth ( long PVal );
__declspec(implementation_key(2712)) long IPropertyEdit::GetWidth ( );
__declspec(implementation_key(2713)) void IPropertyEdit::PutStep ( double PVal );
__declspec(implementation_key(2714)) double IPropertyEdit::GetStep ( );
__declspec(implementation_key(2715)) void IPropertySeparator::PutSeparatorType ( enum SeparatorTypeEnum PVal );
__declspec(implementation_key(2716)) enum SeparatorTypeEnum IPropertySeparator::GetSeparatorType ( );
__declspec(implementation_key(2717)) VARIANT_BOOL IPropertySeparator::SetImage ( const _variant_t & IdBmp, const _variant_t & HInstance );
__declspec(implementation_key(2718)) _variant_t IPropertyList::GetMinValue ( );
__declspec(implementation_key(2719)) _variant_t IPropertyList::GetMaxValue ( );
__declspec(implementation_key(2720)) VARIANT_BOOL IPropertyList::SetValueRange ( const _variant_t & MinVal, const _variant_t & MaxVal );
__declspec(implementation_key(2721)) void IPropertyList::PutWithCheck ( VARIANT_BOOL PVal );
__declspec(implementation_key(2722)) VARIANT_BOOL IPropertyList::GetWithCheck ( );
__declspec(implementation_key(2723)) void IPropertyList::PutCheckState ( enum CheckStateEnum PVal );
__declspec(implementation_key(2724)) enum CheckStateEnum IPropertyList::GetCheckState ( );
__declspec(implementation_key(2725)) void IPropertyList::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(2726)) VARIANT_BOOL IPropertyList::GetReadOnly ( );
__declspec(implementation_key(2727)) void IPropertyList::PutWidth ( long PVal );
__declspec(implementation_key(2728)) long IPropertyList::GetWidth ( );
__declspec(implementation_key(2729)) HRESULT IPropertyList::ClearList ( );
__declspec(implementation_key(2730)) HRESULT IPropertyList::Add ( const _variant_t & NewVal );
__declspec(implementation_key(2731)) void IPropertyList::PutSort ( VARIANT_BOOL PVal );
__declspec(implementation_key(2732)) VARIANT_BOOL IPropertyList::GetSort ( );
__declspec(implementation_key(2733)) long IPropertyList::Find ( const _variant_t & Val );
__declspec(implementation_key(2734)) VARIANT_BOOL IPropertyList::SetCurrentByIndex ( long Val );
__declspec(implementation_key(2735)) void IPropertyList::PutPrecision ( double PVal );
__declspec(implementation_key(2736)) double IPropertyList::GetPrecision ( );
__declspec(implementation_key(2737)) long IPropertyList::GetCount ( );
__declspec(implementation_key(2738)) void IPropertyList::PutStep ( double PVal );
__declspec(implementation_key(2739)) double IPropertyList::GetStep ( );
__declspec(implementation_key(2740)) HRESULT IPropertyCheckBox::SetCustomBitmaps ( const _variant_t & IdUnchecked, const _variant_t & IdChecked, const _variant_t & IdIndeterminate, const _variant_t & HInstance );
__declspec(implementation_key(2741)) void IPropertyCheckBox::PutVisualStyle ( enum ksCheckBoxVisualStyleEnum PVal );
__declspec(implementation_key(2742)) enum ksCheckBoxVisualStyleEnum IPropertyCheckBox::GetVisualStyle ( );
__declspec(implementation_key(2743)) void IPropertyMultiButton::PutButtonsType ( enum ButtonTypeEnum PVal );
__declspec(implementation_key(2744)) enum ButtonTypeEnum IPropertyMultiButton::GetButtonsType ( );
__declspec(implementation_key(2745)) void IPropertyMultiButton::PutButtonChecked ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(2746)) VARIANT_BOOL IPropertyMultiButton::GetButtonChecked ( long BtnID );
__declspec(implementation_key(2747)) void IPropertyMultiButton::PutButtonEnable ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(2748)) VARIANT_BOOL IPropertyMultiButton::GetButtonEnable ( long BtnID );
__declspec(implementation_key(2749)) HRESULT IPropertyMultiButton::AddButton ( long BtnID, const _variant_t & Bmp, long InsertAt );
__declspec(implementation_key(2750)) void IPropertyMultiButton::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(2751)) _variant_t IPropertyMultiButton::GetResModule ( );
__declspec(implementation_key(2752)) void IPropertyMultiButton::PutButtonTips ( long BtnID, _bstr_t PVal );
__declspec(implementation_key(2753)) _bstr_t IPropertyMultiButton::GetButtonTips ( long BtnID );
__declspec(implementation_key(2754)) void IPropertyMultiButton::PutButtonHint ( long BtnID, _bstr_t PVal );
__declspec(implementation_key(2755)) _bstr_t IPropertyMultiButton::GetButtonHint ( long BtnID );
__declspec(implementation_key(2756)) void IPropertyMultiButton::PutNextCommand ( VARIANT_BOOL PVal );
__declspec(implementation_key(2757)) VARIANT_BOOL IPropertyMultiButton::GetNextCommand ( );
__declspec(implementation_key(2758)) void IPropertyMultiButton::PutButtonVisible ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(2759)) VARIANT_BOOL IPropertyMultiButton::GetButtonVisible ( long BtnID );
__declspec(implementation_key(2760)) void IPropertyMultiButton::PutButtonIconFont ( long BtnID, _bstr_t PVal );
__declspec(implementation_key(2761)) _bstr_t IPropertyMultiButton::GetButtonIconFont ( long BtnID );
__declspec(implementation_key(2762)) void IPropertySlideBox::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(2763)) _variant_t IPropertySlideBox::GetResModule ( );
__declspec(implementation_key(2764)) void IPropertySlideBox::PutSlideType ( enum SlideTypeEnum Type );
__declspec(implementation_key(2765)) enum SlideTypeEnum IPropertySlideBox::GetSlideType ( );
__declspec(implementation_key(2766)) void IPropertySlideBox::PutDrawingSlide ( const _variant_t & Slide );
__declspec(implementation_key(2767)) _variant_t IPropertySlideBox::GetDrawingSlide ( );
__declspec(implementation_key(2768)) void IPropertySlideBox::PutWidth ( long Width );
__declspec(implementation_key(2769)) long IPropertySlideBox::GetWidth ( );
__declspec(implementation_key(2770)) void IPropertySlideBox::PutHeight ( long Height );
__declspec(implementation_key(2771)) long IPropertySlideBox::GetHeight ( );
__declspec(implementation_key(2772)) void IPropertySlideBox::PutCheckBoxVisibility ( VARIANT_BOOL PVal );
__declspec(implementation_key(2773)) VARIANT_BOOL IPropertySlideBox::GetCheckBoxVisibility ( );
__declspec(implementation_key(2774)) HRESULT IPropertySlideBox::UpdateParam ( );
__declspec(implementation_key(2775)) void IPropertyUserControl::PutWidth ( long Width );
__declspec(implementation_key(2776)) long IPropertyUserControl::GetWidth ( );
__declspec(implementation_key(2777)) void IPropertyUserControl::PutHeight ( long Height );
__declspec(implementation_key(2778)) long IPropertyUserControl::GetHeight ( );
__declspec(implementation_key(2779)) HRESULT IPropertyUserControl::SetOCXControl ( _bstr_t ProgID );
__declspec(implementation_key(2780)) void IPropertyUserControl::PutFixHeight ( VARIANT_BOOL PVal );
__declspec(implementation_key(2781)) VARIANT_BOOL IPropertyUserControl::GetFixHeight ( );
__declspec(implementation_key(2782)) void IPropertyUserControl::PutFixWidth ( VARIANT_BOOL PVal );
__declspec(implementation_key(2783)) VARIANT_BOOL IPropertyUserControl::GetFixWidth ( );
__declspec(implementation_key(2784)) void IPropertyUserControl::PutAutoSize ( VARIANT_BOOL PVal );
__declspec(implementation_key(2785)) VARIANT_BOOL IPropertyUserControl::GetAutoSize ( );
__declspec(implementation_key(2786)) void IPropertyGrid::PutColumnCount ( long Count );
__declspec(implementation_key(2787)) long IPropertyGrid::GetColumnCount ( );
__declspec(implementation_key(2788)) void IPropertyGrid::PutRowCount ( long Count );
__declspec(implementation_key(2789)) long IPropertyGrid::GetRowCount ( );
__declspec(implementation_key(2790)) void IPropertyGrid::PutFixedColumnCount ( long Count );
__declspec(implementation_key(2791)) long IPropertyGrid::GetFixedColumnCount ( );
__declspec(implementation_key(2792)) void IPropertyGrid::PutFixedRowCount ( long Count );
__declspec(implementation_key(2793)) long IPropertyGrid::GetFixedRowCount ( );
__declspec(implementation_key(2794)) void IPropertyGrid::PutColumnWidth ( long Index, long Width );
__declspec(implementation_key(2795)) long IPropertyGrid::GetColumnWidth ( long Index );
__declspec(implementation_key(2796)) void IPropertyGrid::PutRowHeight ( long Index, long Height );
__declspec(implementation_key(2797)) long IPropertyGrid::GetRowHeight ( long Index );
__declspec(implementation_key(2798)) void IPropertyGrid::PutEnableEdit ( long NRow, long NCol, VARIANT_BOOL PVal );
__declspec(implementation_key(2799)) VARIANT_BOOL IPropertyGrid::GetEnableEdit ( long NRow, long NCol );
__declspec(implementation_key(2800)) void IPropertyGrid::PutCellText ( long NRow, long NCol, _bstr_t Text );
__declspec(implementation_key(2801)) _bstr_t IPropertyGrid::GetCellText ( long NRow, long NCol );
__declspec(implementation_key(2802)) void IPropertyGrid::PutCellFormat ( long NRow, long NCol, long Format );
__declspec(implementation_key(2803)) long IPropertyGrid::GetCellFormat ( long NRow, long NCol );
__declspec(implementation_key(2804)) void IPropertyGrid::PutWidth ( long Width );
__declspec(implementation_key(2805)) long IPropertyGrid::GetWidth ( );
__declspec(implementation_key(2806)) void IPropertyGrid::PutHeight ( long Height );
__declspec(implementation_key(2807)) long IPropertyGrid::GetHeight ( );
__declspec(implementation_key(2808)) void IPropertyGrid::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(2809)) VARIANT_BOOL IPropertyGrid::GetReadOnly ( );
__declspec(implementation_key(2810)) void IPropertyGrid::PutAutoSizeColumns ( VARIANT_BOOL PVal );
__declspec(implementation_key(2811)) VARIANT_BOOL IPropertyGrid::GetAutoSizeColumns ( );
__declspec(implementation_key(2812)) HRESULT IPropertyGrid::UpdateParam ( );
__declspec(implementation_key(2813)) void IPropertyGrid::PutCurrentColumn ( long Column );
__declspec(implementation_key(2814)) long IPropertyGrid::GetCurrentColumn ( );
__declspec(implementation_key(2815)) void IPropertyGrid::PutCurrentRow ( long Row );
__declspec(implementation_key(2816)) long IPropertyGrid::GetCurrentRow ( );
__declspec(implementation_key(2817)) void IPropertyGrid::PutEnableDeleteRows ( VARIANT_BOOL PVal );
__declspec(implementation_key(2818)) VARIANT_BOOL IPropertyGrid::GetEnableDeleteRows ( );
__declspec(implementation_key(2819)) void IPropertyGrid::PutColumnVisible ( long Index, VARIANT_BOOL Visible );
__declspec(implementation_key(2820)) VARIANT_BOOL IPropertyGrid::GetColumnVisible ( long Index );
__declspec(implementation_key(2821)) HRESULT IPropertyGrid::BringIntoView ( long Index );
__declspec(implementation_key(2822)) _variant_t IPropertySpinEdit::GetMinValue ( );
__declspec(implementation_key(2823)) _variant_t IPropertySpinEdit::GetMaxValue ( );
__declspec(implementation_key(2824)) VARIANT_BOOL IPropertySpinEdit::SetValueRange ( const _variant_t & MinVal, const _variant_t & MaxVal );
__declspec(implementation_key(2825)) void IPropertySpinEdit::PutWithCheck ( VARIANT_BOOL PVal );
__declspec(implementation_key(2826)) VARIANT_BOOL IPropertySpinEdit::GetWithCheck ( );
__declspec(implementation_key(2827)) void IPropertySpinEdit::PutCheckState ( enum CheckStateEnum PVal );
__declspec(implementation_key(2828)) enum CheckStateEnum IPropertySpinEdit::GetCheckState ( );
__declspec(implementation_key(2829)) void IPropertySpinEdit::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(2830)) VARIANT_BOOL IPropertySpinEdit::GetReadOnly ( );
__declspec(implementation_key(2831)) void IPropertySpinEdit::PutWidth ( long PVal );
__declspec(implementation_key(2832)) long IPropertySpinEdit::GetWidth ( );
__declspec(implementation_key(2833)) void IPropertySpinEdit::PutStep ( double PVal );
__declspec(implementation_key(2834)) double IPropertySpinEdit::GetStep ( );
__declspec(implementation_key(2835)) void IPropertyFileName::PutCreateOpenButton ( VARIANT_BOOL PVal );
__declspec(implementation_key(2836)) VARIANT_BOOL IPropertyFileName::GetCreateOpenButton ( );
__declspec(implementation_key(2837)) void IPropertyFileName::PutBitmap ( const _variant_t & _arg1 );
__declspec(implementation_key(2838)) void IPropertyFileName::PutExtension ( _bstr_t PVal );
__declspec(implementation_key(2839)) _bstr_t IPropertyFileName::GetExtension ( );
__declspec(implementation_key(2840)) void IPropertyFileName::PutFilter ( _bstr_t PVal );
__declspec(implementation_key(2841)) _bstr_t IPropertyFileName::GetFilter ( );
__declspec(implementation_key(2842)) void IPropertyFileName::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(2843)) _variant_t IPropertyFileName::GetResModule ( );
__declspec(implementation_key(2844)) void IPropertyFileName::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(2845)) VARIANT_BOOL IPropertyFileName::GetReadOnly ( );
__declspec(implementation_key(2846)) void IPropertyFileName::PutWidth ( long PVal );
__declspec(implementation_key(2847)) long IPropertyFileName::GetWidth ( );
__declspec(implementation_key(2848)) void IPropertyFileName::PutPreview ( VARIANT_BOOL PVal );
__declspec(implementation_key(2849)) VARIANT_BOOL IPropertyFileName::GetPreview ( );
__declspec(implementation_key(2850)) _bstr_t IPropertyFileName::GetDefaultValue ( );
__declspec(implementation_key(2851)) void IPropertyFileName::PutDefaultValue ( _bstr_t PVal );
__declspec(implementation_key(2852)) void IPropertyColor::PutWidth ( long PVal );
__declspec(implementation_key(2853)) long IPropertyColor::GetWidth ( );
__declspec(implementation_key(2854)) void IPropertyColor::PutEnableDefaultButton ( VARIANT_BOOL PVal );
__declspec(implementation_key(2855)) VARIANT_BOOL IPropertyColor::GetEnableDefaultButton ( );
__declspec(implementation_key(2856)) void IPropertyColor::PutDefaultColor ( long PVal );
__declspec(implementation_key(2857)) long IPropertyColor::GetDefaultColor ( );
__declspec(implementation_key(2858)) void IPropertyColor::PutDefaultButtonName ( _bstr_t PVal );
__declspec(implementation_key(2859)) _bstr_t IPropertyColor::GetDefaultButtonName ( );
__declspec(implementation_key(2860)) enum ksEditListTypeEnum IPropertyEditList::GetListType ( );
__declspec(implementation_key(2861)) void IPropertyEditList::PutListType ( enum ksEditListTypeEnum PVal );
__declspec(implementation_key(2862)) VARIANT_BOOL IPropertyEditList::GetItemChecked ( long Index );
__declspec(implementation_key(2863)) void IPropertyEditList::PutItemChecked ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(2864)) VARIANT_BOOL IPropertyEditList::GetMultySelect ( );
__declspec(implementation_key(2865)) void IPropertyEditList::PutMultySelect ( VARIANT_BOOL PVal );
__declspec(implementation_key(2866)) VARIANT_BOOL IPropertyEditList::GetItemSelected ( long Index );
__declspec(implementation_key(2867)) void IPropertyEditList::PutItemSelected ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(2868)) VARIANT_BOOL IPropertyEditList::GetSort ( );
__declspec(implementation_key(2869)) void IPropertyEditList::PutSort ( VARIANT_BOOL PVal );
__declspec(implementation_key(2870)) HRESULT IPropertyEditList::ClearList ( );
__declspec(implementation_key(2871)) HRESULT IPropertyEditList::Add ( _bstr_t NewVal );
__declspec(implementation_key(2872)) HRESULT IPropertyEditList::Delete ( const _variant_t & Index );
__declspec(implementation_key(2873)) long IPropertyEditList::GetItemsCount ( );
__declspec(implementation_key(2874)) void IPropertyEditList::PutItemValue ( const _variant_t & Index, _bstr_t PVal );
__declspec(implementation_key(2875)) _bstr_t IPropertyEditList::GetItemValue ( const _variant_t & Index );
__declspec(implementation_key(2876)) long IPropertyEditList::Find ( const _variant_t & Val );
__declspec(implementation_key(2877)) _bstr_t IPropertyEditList::GetDefaultValue ( );
__declspec(implementation_key(2878)) void IPropertyEditList::PutDefaultValue ( _bstr_t PVal );
__declspec(implementation_key(2879)) VARIANT_BOOL IPropertyEditList::GetItemMissing ( long Index );
__declspec(implementation_key(2880)) void IPropertyEditList::PutItemMissing ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(2881)) VARIANT_BOOL IPropertyEditList::BeginEditItem ( long Index );
__declspec(implementation_key(2882)) void IPropertyEditList::PutCheckState ( enum CheckStateEnum PVal );
__declspec(implementation_key(2883)) enum CheckStateEnum IPropertyEditList::GetCheckState ( );
__declspec(implementation_key(2884)) VARIANT_BOOL IPropertyEditList::GetAllowDelete ( );
__declspec(implementation_key(2885)) void IPropertyEditList::PutAllowDelete ( VARIANT_BOOL PVal );
__declspec(implementation_key(2886)) VARIANT_BOOL IPropertyEditList::GetComputeUniqueNames ( );
__declspec(implementation_key(2887)) void IPropertyEditList::PutComputeUniqueNames ( VARIANT_BOOL PVal );
__declspec(implementation_key(2888)) HRESULT IPropertyEditList::BringIntoView ( long Index );
__declspec(implementation_key(2889)) HRESULT IPropertyBmpList::Add ( _bstr_t NewStr, const _variant_t & NewBmp );
__declspec(implementation_key(2890)) long IPropertyBmpList::GetCount ( );
__declspec(implementation_key(2891)) HRESULT IPropertyBmpList::ClearList ( );
__declspec(implementation_key(2892)) long IPropertyBmpList::Find ( _bstr_t Val );
__declspec(implementation_key(2893)) void IPropertyBmpList::PutCurrentIndex ( long PVal );
__declspec(implementation_key(2894)) long IPropertyBmpList::GetCurrentIndex ( );
__declspec(implementation_key(2895)) void IPropertyBmpList::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(2896)) _variant_t IPropertyBmpList::GetResModule ( );
__declspec(implementation_key(2897)) void IPropertyBmpList::PutIconFont ( long Index, _bstr_t PVal );
__declspec(implementation_key(2898)) _bstr_t IPropertyBmpList::GetIconFont ( long Index );
__declspec(implementation_key(2899)) void IPropertyLibExplorer::PutFileName ( _bstr_t PVal );
__declspec(implementation_key(2900)) _bstr_t IPropertyLibExplorer::GetFileName ( );
__declspec(implementation_key(2901)) void IPropertyLibExplorer::PutRootName ( _bstr_t PVal );
__declspec(implementation_key(2902)) _bstr_t IPropertyLibExplorer::GetRootName ( );
__declspec(implementation_key(2903)) VARIANT_BOOL IPropertyLibExplorer::GetFileValue ( );
__declspec(implementation_key(2904)) VARIANT_BOOL IPropertyStyleList::Add ( const _variant_t & Styles );
__declspec(implementation_key(2905)) long IPropertyStyleList::GetCount ( );
__declspec(implementation_key(2906)) VARIANT_BOOL IPropertyStyleList::ClearList ( );
__declspec(implementation_key(2907)) long IPropertyStyleList::Find ( long Val );
__declspec(implementation_key(2908)) void IPropertyStyleList::PutCurrentIndex ( long PVal );
__declspec(implementation_key(2909)) long IPropertyStyleList::GetCurrentIndex ( );
__declspec(implementation_key(2910)) void IPropertyStyleList::PutAnotherStyleBtnEnable ( VARIANT_BOOL PVal );
__declspec(implementation_key(2911)) VARIANT_BOOL IPropertyStyleList::GetAnotherStyleBtnEnable ( );
__declspec(implementation_key(2912)) VARIANT_BOOL IPropertyGroupBegin::GetExpanding ( );
__declspec(implementation_key(2913)) void IPropertyGroupBegin::PutExpanding ( VARIANT_BOOL PVal );
__declspec(implementation_key(2914)) VARIANT_BOOL IPropertyGroupBegin::GetExpanded ( );
__declspec(implementation_key(2915)) void IPropertyGroupBegin::PutExpanded ( VARIANT_BOOL PVal );
__declspec(implementation_key(2916)) _bstr_t IPropertyTwinSwitcher::GetLabel2 ( );
__declspec(implementation_key(2917)) void IPropertyTwinSwitcher::PutLabel2 ( _bstr_t PVal );
__declspec(implementation_key(2918)) void IPropertyPoint3D::PutPoint3DType ( enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(2919)) enum ksPoint3DTypeEnum IPropertyPoint3D::GetPoint3DType ( );
__declspec(implementation_key(2920)) void IPropertyPoint3D::PutCoordinateValue ( long Index, double PVal );
__declspec(implementation_key(2921)) double IPropertyPoint3D::GetCoordinateValue ( long Index );
__declspec(implementation_key(2922)) void IPropertyPoint3D::PutCoordinateState ( long Index, enum CheckStateEnum PVal );
__declspec(implementation_key(2923)) enum CheckStateEnum IPropertyPoint3D::GetCoordinateState ( long Index );
__declspec(implementation_key(2924)) IPropertyEditPtr IPropertyPoint3D::GetCoordinate ( long Index );
__declspec(implementation_key(2925)) ITextPtr IPropertyPreviewText::GetPreviewText ( );
__declspec(implementation_key(2926)) VARIANT_BOOL IPropertyPreviewText::UpdateParam ( );
__declspec(implementation_key(2927)) void IPropertyPreviewText::PutDoubleSize ( VARIANT_BOOL PVal );
__declspec(implementation_key(2928)) VARIANT_BOOL IPropertyPreviewText::GetDoubleSize ( );
__declspec(implementation_key(2929)) VARIANT_BOOL IPropertyAggregateControl::Add ( struct IPropertyControl * Control );
__declspec(implementation_key(2930)) IPropertyControlPtr IPropertyAggregateControl::GetPropertyControl ( long Index );
__declspec(implementation_key(2931)) VARIANT_BOOL IProcessContextPanel::AddControl ( struct IPropertyControl * PVal );
__declspec(implementation_key(2932)) VARIANT_BOOL IProcessContextPanel::AddAdditionalButtonsFromControl ( struct IPropertyControl * PVal, _bstr_t Title );
__declspec(implementation_key(2933)) VARIANT_BOOL IProcessContextPanel::AddLinkContentButton ( struct IPropertyControl * PVal, _bstr_t Title );
__declspec(implementation_key(2934)) VARIANT_BOOL IProcessContextPanel::AddGeomCalculatorCommands ( struct IPropertyControl * PVal );
__declspec(implementation_key(2935)) VARIANT_BOOL IProcessContextPanel::AddSeparator ( );
__declspec(implementation_key(2936)) VARIANT_BOOL IProcessContextPanel::AddNewSearchButton ( );
__declspec(implementation_key(2937)) VARIANT_BOOL IProcessContextPanel::AddSnapCommands ( );
__declspec(implementation_key(2938)) VARIANT_BOOL IProcessContextPanel::AddGroupBegin ( _bstr_t Title );
__declspec(implementation_key(2939)) VARIANT_BOOL IProcessContextPanel::AddGroupEnd ( );
__declspec(implementation_key(2940)) void IPropertyBasePoint::PutCenterPointVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(2941)) VARIANT_BOOL IPropertyBasePoint::GetCenterPointVisible ( );
__declspec(implementation_key(2942)) _bstr_t IPropertyMarking::GetMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer );
__declspec(implementation_key(2943)) VARIANT_BOOL IPropertyMarking::SetMarking ( enum ksVariantMarkingTypeEnum MarkingType, _bstr_t Marking );
__declspec(implementation_key(2944)) void IPropertyMarking::PutMarkingVisible ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL PVal );
__declspec(implementation_key(2945)) VARIANT_BOOL IPropertyMarking::GetMarkingVisible ( enum ksVariantMarkingTypeEnum MarkingType );
__declspec(implementation_key(2946)) void IPropertyMarking::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(2947)) VARIANT_BOOL IPropertyMarking::GetReadOnly ( );
__declspec(implementation_key(2948)) void IProcess::PutProcessParam ( struct IProcessParam * Param );
__declspec(implementation_key(2949)) IProcessParamPtr IProcess::GetProcessParam ( );
__declspec(implementation_key(2950)) void IProcess::PutCursorId ( const _variant_t & PVal );
__declspec(implementation_key(2951)) _variant_t IProcess::GetCursorId ( );
__declspec(implementation_key(2952)) void IProcess::PutCaption ( _bstr_t PVal );
__declspec(implementation_key(2953)) _bstr_t IProcess::GetCaption ( );
__declspec(implementation_key(2954)) void IProcess::PutPrompt ( _bstr_t PVal );
__declspec(implementation_key(2955)) _bstr_t IProcess::GetPrompt ( );
__declspec(implementation_key(2956)) void IProcess::PutMenu ( const _variant_t & PVal );
__declspec(implementation_key(2957)) _variant_t IProcess::GetMenu ( );
__declspec(implementation_key(2958)) void IProcess::PutResModule ( const _variant_t & HInstance );
__declspec(implementation_key(2959)) _variant_t IProcess::GetResModule ( );
__declspec(implementation_key(2960)) void IProcess::PutDynamic ( VARIANT_BOOL PVal );
__declspec(implementation_key(2961)) VARIANT_BOOL IProcess::GetDynamic ( );
__declspec(implementation_key(2962)) VARIANT_BOOL IProcess::Run ( VARIANT_BOOL Modal, VARIANT_BOOL PostMessage );
__declspec(implementation_key(2963)) VARIANT_BOOL IProcess::Stop ( );
__declspec(implementation_key(2964)) VARIANT_BOOL IProcess::SetCursorText ( _bstr_t PVal );
__declspec(implementation_key(2965)) VARIANT_BOOL IProcess::Update ( );
__declspec(implementation_key(2966)) void IProcess::PutCritical ( VARIANT_BOOL PVal );
__declspec(implementation_key(2967)) VARIANT_BOOL IProcess::GetCritical ( );
__declspec(implementation_key(2968)) void IMouseEnterLeaveParameters7::PutX ( double PVal );
__declspec(implementation_key(2969)) double IMouseEnterLeaveParameters7::GetX ( );
__declspec(implementation_key(2970)) void IMouseEnterLeaveParameters7::PutY ( double PVal );
__declspec(implementation_key(2971)) double IMouseEnterLeaveParameters7::GetY ( );
__declspec(implementation_key(2972)) void IMouseEnterLeaveParameters7::PutOffset ( double PVal );
__declspec(implementation_key(2973)) double IMouseEnterLeaveParameters7::GetOffset ( );
__declspec(implementation_key(2974)) void IMouseEnterLeaveParameters7::PutOffsetAngle ( double PVal );
__declspec(implementation_key(2975)) double IMouseEnterLeaveParameters7::GetOffsetAngle ( );
__declspec(implementation_key(2976)) void IMouseEnterLeaveParameters7::PutSymbol ( long PVal );
__declspec(implementation_key(2977)) long IMouseEnterLeaveParameters7::GetSymbol ( );
__declspec(implementation_key(2978)) void IMouseEnterLeaveParameters7::PutSymbolFont ( _bstr_t PVal );
__declspec(implementation_key(2979)) _bstr_t IMouseEnterLeaveParameters7::GetSymbolFont ( );
__declspec(implementation_key(2980)) void IMouseEnterLeaveParameters7::PutSymbolColor ( long PVal );
__declspec(implementation_key(2981)) long IMouseEnterLeaveParameters7::GetSymbolColor ( );
__declspec(implementation_key(2982)) void IMouseEnterLeaveParameters7::PutSymbolScale ( double PVal );
__declspec(implementation_key(2983)) double IMouseEnterLeaveParameters7::GetSymbolScale ( );
__declspec(implementation_key(2984)) VARIANT_BOOL IPropertyReplaceList::AddItem ( struct IDocumentFrame * Document, _bstr_t Text, _bstr_t FindText, long StartIndex, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(2985)) HRESULT IPropertyReplaceList::Clear ( );
__declspec(implementation_key(2986)) _variant_t IPropertyReplaceList::GetSelection ( );
__declspec(implementation_key(2987)) VARIANT_BOOL IViewDesignation::GetShowName ( );
__declspec(implementation_key(2988)) void IViewDesignation::PutShowName ( VARIANT_BOOL PVal );
__declspec(implementation_key(2989)) VARIANT_BOOL IViewDesignation::GetShowUnfold ( );
__declspec(implementation_key(2990)) void IViewDesignation::PutShowUnfold ( VARIANT_BOOL PVal );
__declspec(implementation_key(2991)) VARIANT_BOOL IViewDesignation::GetShowScale ( );
__declspec(implementation_key(2992)) void IViewDesignation::PutShowScale ( VARIANT_BOOL PVal );
__declspec(implementation_key(2993)) VARIANT_BOOL IViewDesignation::GetShowTurn ( );
__declspec(implementation_key(2994)) void IViewDesignation::PutShowTurn ( VARIANT_BOOL PVal );
__declspec(implementation_key(2995)) VARIANT_BOOL IViewDesignation::GetShowAngle ( );
__declspec(implementation_key(2996)) void IViewDesignation::PutShowAngle ( VARIANT_BOOL PVal );
__declspec(implementation_key(2997)) VARIANT_BOOL IViewDesignation::GetShowPage ( );
__declspec(implementation_key(2998)) void IViewDesignation::PutShowPage ( VARIANT_BOOL PVal );
__declspec(implementation_key(2999)) VARIANT_BOOL IViewDesignation::GetShowZone ( );
__declspec(implementation_key(3000)) void IViewDesignation::PutShowZone ( VARIANT_BOOL PVal );
__declspec(implementation_key(3001)) _bstr_t IViewDesignation::GetDesignation ( );
__declspec(implementation_key(3002)) _variant_t IViewDesignation::GetRefObject ( );
__declspec(implementation_key(3003)) void IViewDesignation::PutRefObject ( const _variant_t & PVal );
__declspec(implementation_key(3004)) IDrawingObjectPtr IViewDesignation::GetDrawingText ( );
__declspec(implementation_key(3005)) long ICutViewParam::AddCut ( _bstr_t Name, long Number, double X, double Y, VARIANT_BOOL ModelCut, struct IDrawingObject * Contour, struct IView * View );
__declspec(implementation_key(3006)) VARIANT_BOOL ICutViewParam::DeleteCut ( long Index );
__declspec(implementation_key(3007)) VARIANT_BOOL ICutViewParam::DeleteAllCuts ( );
__declspec(implementation_key(3008)) VARIANT_BOOL ICutViewParam::SetCutPlanePosition ( long Index, double X, double Y );
__declspec(implementation_key(3009)) VARIANT_BOOL ICutViewParam::GetCutPlanePosition ( long Index, double * X, double * Y );
__declspec(implementation_key(3010)) VARIANT_BOOL ICutViewParam::SetCutParams ( long Index, _bstr_t Name, long Number, VARIANT_BOOL ModelCut );
__declspec(implementation_key(3011)) IDrawingObjectPtr ICutViewParam::GetCutParams ( long Index, BSTR * Name, long * Number, VARIANT_BOOL * ModelCut );
__declspec(implementation_key(3012)) long ICutViewParam::GetCutsCount ( );
__declspec(implementation_key(3013)) VARIANT_BOOL ICutViewParam::GetLocalCut ( long Index );
__declspec(implementation_key(3014)) void ICutViewParam::PutLocalCut ( long Index, VARIANT_BOOL Result );
__declspec(implementation_key(3015)) IHatchParamPtr ICutViewParam::GetHatchParam ( long Index );
__declspec(implementation_key(3016)) void ILocalCoordinateSystem2D::PutName ( _bstr_t Name );
__declspec(implementation_key(3017)) _bstr_t ILocalCoordinateSystem2D::GetName ( );
__declspec(implementation_key(3018)) void ILocalCoordinateSystem2D::PutX ( double X );
__declspec(implementation_key(3019)) double ILocalCoordinateSystem2D::GetX ( );
__declspec(implementation_key(3020)) void ILocalCoordinateSystem2D::PutY ( double Y );
__declspec(implementation_key(3021)) double ILocalCoordinateSystem2D::GetY ( );
__declspec(implementation_key(3022)) void ILocalCoordinateSystem2D::PutAngle ( double A );
__declspec(implementation_key(3023)) double ILocalCoordinateSystem2D::GetAngle ( );
__declspec(implementation_key(3024)) void ILocalCoordinateSystem2D::PutAxisXLabel ( _bstr_t Name );
__declspec(implementation_key(3025)) _bstr_t ILocalCoordinateSystem2D::GetAxisXLabel ( );
__declspec(implementation_key(3026)) void ILocalCoordinateSystem2D::PutAxisYLabel ( _bstr_t Name );
__declspec(implementation_key(3027)) _bstr_t ILocalCoordinateSystem2D::GetAxisYLabel ( );
__declspec(implementation_key(3028)) VARIANT_BOOL ILocalCoordinateSystem2D::Delete ( );
__declspec(implementation_key(3029)) ILocalCoordinateSystem2DPtr ILocalCoordinateSystems2D::GetItem ( const _variant_t & Index );
__declspec(implementation_key(3030)) ILocalCoordinateSystem2DPtr ILocalCoordinateSystems2D::Add ( );
__declspec(implementation_key(3031)) void ILocalCoordinateSystems2D::PutCurrent ( struct ILocalCoordinateSystem2D * Result );
__declspec(implementation_key(3032)) ILocalCoordinateSystem2DPtr ILocalCoordinateSystems2D::GetCurrent ( );
__declspec(implementation_key(3033)) ILocalCoordinateSystems2DPtr IView1::GetLocalCoordinateSystems2D ( );
__declspec(implementation_key(3034)) VARIANT_BOOL IView1::GetEditMacroVisibleRegime ( );
__declspec(implementation_key(3035)) void IView1::PutNumerator ( double N );
__declspec(implementation_key(3036)) double IView1::GetNumerator ( );
__declspec(implementation_key(3037)) void IView1::PutPrintable ( VARIANT_BOOL PVal );
__declspec(implementation_key(3038)) VARIANT_BOOL IView1::GetPrintable ( );
__declspec(implementation_key(3039)) IDrawingObjectPtr IView1::GetBaseObject ( );
__declspec(implementation_key(3040)) void IView1::PutBaseObject ( struct IDrawingObject * Result );
__declspec(implementation_key(3041)) VARIANT_BOOL IView1::GetCrossed ( );
__declspec(implementation_key(3042)) VARIANT_BOOL IView1::GetCrossedTitle ( );
__declspec(implementation_key(3043)) IDrawingObjectPtr IView1::FindObject ( double X, double Y, double Limit, struct IFindObjectParameters * Param );
__declspec(implementation_key(3044)) _variant_t IView1::FindObjects ( double X, double Y, double Limit, struct IFindObjectParameters * Param );
__declspec(implementation_key(3045)) _variant_t IView1::SelectObjects ( enum ksRegionTypeEnum RegionType, double XMin, double YMin, double XMax, double YMax );
__declspec(implementation_key(3046)) VARIANT_BOOL IView1::TransformPointToSheet ( double * X, double * Y );
__declspec(implementation_key(3047)) VARIANT_BOOL IView1::TransformPointFromSheet ( double * X, double * Y );
__declspec(implementation_key(3048)) VARIANT_BOOL IView1::TransformAngleToSheet ( double * Angle );
__declspec(implementation_key(3049)) VARIANT_BOOL IView1::TransformAngleFromSheet ( double * Angle );
__declspec(implementation_key(3050)) long IAutoNumerationManager::GetNumericGroupsCount ( );
__declspec(implementation_key(3051)) INumericGroupPtr IAutoNumerationManager::GetNumericGroup ( const _variant_t & Index );
__declspec(implementation_key(3052)) INumericGroupPtr IAutoNumerationManager::GetCurrentNumericGroup ( );
__declspec(implementation_key(3053)) void IAutoNumerationManager::PutCurrentNumericGroup ( struct INumericGroup * Result );
__declspec(implementation_key(3054)) INumericGroupPtr IAutoNumerationManager::AddNumericGroup ( _bstr_t Name );
__declspec(implementation_key(3055)) void IDocument2DSettings::PutLayersGroupWay ( enum LayersGroupWayEnum PVal );
__declspec(implementation_key(3056)) enum LayersGroupWayEnum IDocument2DSettings::GetLayersGroupWay ( );
__declspec(implementation_key(3057)) void IDocument2DSettings::PutCompositionInherit ( VARIANT_BOOL PVal );
__declspec(implementation_key(3058)) VARIANT_BOOL IDocument2DSettings::GetCompositionInherit ( );
__declspec(implementation_key(3059)) IAutoSortObjectsParametersPtr IDocument2DSettings::GetAutoSortObjectsParameters ( );
__declspec(implementation_key(3060)) void IDocument2DSettings::PutRoughModification ( enum ksRoughModificationEnum PVal );
__declspec(implementation_key(3061)) enum ksRoughModificationEnum IDocument2DSettings::GetRoughModification ( );
__declspec(implementation_key(3062)) void IDocument3DSettings::PutAccuracyModelDisplaying ( double PVal );
__declspec(implementation_key(3063)) double IDocument3DSettings::GetAccuracyModelDisplaying ( );
__declspec(implementation_key(3064)) void IDocument3DSettings::PutAccuracyMassProperties ( double PVal );
__declspec(implementation_key(3065)) double IDocument3DSettings::GetAccuracyMassProperties ( );
__declspec(implementation_key(3066)) void IDocument3DSettings::PutRoughModification ( enum ksRoughModificationEnum PVal );
__declspec(implementation_key(3067)) enum ksRoughModificationEnum IDocument3DSettings::GetRoughModification ( );
__declspec(implementation_key(3068)) _bstr_t IThreadDialogParam::GetStandart ( );
__declspec(implementation_key(3069)) void IThreadDialogParam::PutStandart ( _bstr_t PVal );
__declspec(implementation_key(3070)) VARIANT_BOOL IThreadDialogParam::GetIsConic ( );
__declspec(implementation_key(3071)) void IThreadDialogParam::PutIsConic ( VARIANT_BOOL PVal );
__declspec(implementation_key(3072)) double IThreadDialogParam::GetNominalDiameter ( );
__declspec(implementation_key(3073)) void IThreadDialogParam::PutNominalDiameter ( double PVal );
__declspec(implementation_key(3074)) double IThreadDialogParam::GetP ( );
__declspec(implementation_key(3075)) void IThreadDialogParam::PutP ( double PVal );
__declspec(implementation_key(3076)) _bstr_t IContentDialogParam::GetTitle ( );
__declspec(implementation_key(3077)) void IContentDialogParam::PutTitle ( _bstr_t PVal );
__declspec(implementation_key(3078)) VARIANT_BOOL IContentDialogParam::GetUpperCaseTitle ( );
__declspec(implementation_key(3079)) void IContentDialogParam::PutUpperCaseTitle ( VARIANT_BOOL PVal );
__declspec(implementation_key(3080)) VARIANT_BOOL IContentDialogParam::GetResizable ( );
__declspec(implementation_key(3081)) void IContentDialogParam::PutResizable ( VARIANT_BOOL PVal );
__declspec(implementation_key(3082)) _bstr_t IContentDialogParam::GetPositiveButton ( );
__declspec(implementation_key(3083)) void IContentDialogParam::PutPositiveButton ( _bstr_t PVal );
__declspec(implementation_key(3084)) _bstr_t IContentDialogParam::GetNegativeButton ( );
__declspec(implementation_key(3085)) void IContentDialogParam::PutNegativeButton ( _bstr_t PVal );
__declspec(implementation_key(3086)) _bstr_t IContentDialogParam::GetCancelButton ( );
__declspec(implementation_key(3087)) void IContentDialogParam::PutCancelButton ( _bstr_t PVal );
__declspec(implementation_key(3088)) _bstr_t IContentDialogParam::GetAdditionalButton ( );
__declspec(implementation_key(3089)) void IContentDialogParam::PutAdditionalButton ( _bstr_t PVal );
__declspec(implementation_key(3090)) long IContentDialogParam::GetHelpId ( );
__declspec(implementation_key(3091)) void IContentDialogParam::PutHelpId ( long PVal );
__declspec(implementation_key(3092)) _bstr_t IContentDialogParam::GetHelpFileName ( );
__declspec(implementation_key(3093)) void IContentDialogParam::PutHelpFileName ( _bstr_t PVal );
__declspec(implementation_key(3094)) _bstr_t IContentDialogParam::GetCheckBoxTitle ( );
__declspec(implementation_key(3095)) void IContentDialogParam::PutCheckBoxTitle ( _bstr_t PVal );
__declspec(implementation_key(3096)) VARIANT_BOOL IContentDialogParam::GetCheckBoxChecked ( );
__declspec(implementation_key(3097)) void IContentDialogParam::PutCheckBoxChecked ( VARIANT_BOOL PVal );
__declspec(implementation_key(3098)) double IContentDialogParam::GetWidth ( );
__declspec(implementation_key(3099)) void IContentDialogParam::PutWidth ( double PVal );
__declspec(implementation_key(3100)) double IContentDialogParam::GetHeight ( );
__declspec(implementation_key(3101)) void IContentDialogParam::PutHeight ( double PVal );
__declspec(implementation_key(3102)) double IContentDialogParam::GetMinWidth ( );
__declspec(implementation_key(3103)) void IContentDialogParam::PutMinWidth ( double PVal );
__declspec(implementation_key(3104)) double IContentDialogParam::GetMinHeight ( );
__declspec(implementation_key(3105)) void IContentDialogParam::PutMinHeight ( double PVal );
__declspec(implementation_key(3106)) double IContentDialogParam::GetMaxWidth ( );
__declspec(implementation_key(3107)) void IContentDialogParam::PutMaxWidth ( double PVal );
__declspec(implementation_key(3108)) double IContentDialogParam::GetMaxHeight ( );
__declspec(implementation_key(3109)) void IContentDialogParam::PutMaxHeight ( double PVal );
__declspec(implementation_key(3110)) VARIANT_BOOL IContentDialogParam::AddLeftToolButton ( _bstr_t Header, VARIANT_BOOL HeaderVisible, long CommandID, long IconId, _bstr_t IconFont, enum ButtonTypeEnum ButtonType );
__declspec(implementation_key(3111)) VARIANT_BOOL IContentDialogParam::AddRightToolButton ( _bstr_t Header, VARIANT_BOOL HeaderVisible, long CommandID, long IconId, _bstr_t IconFont, enum ButtonTypeEnum ButtonType );
__declspec(implementation_key(3112)) VARIANT_BOOL IContentDialogParam::AddLeftSeparator ( );
__declspec(implementation_key(3113)) VARIANT_BOOL IContentDialogParam::AddRightSeparator ( );
__declspec(implementation_key(3114)) IKompasAPIObjectPtr IApplicationDialogs::GetDialogParam ( enum KompasAPIObjectTypeEnum ParamType );
__declspec(implementation_key(3115)) VARIANT_BOOL IApplicationDialogs::SelectThread ( OLE_HANDLE ParentHwnd, struct IThreadDialogParam * DialogParam );
__declspec(implementation_key(3116)) long IApplicationDialogs::ShowContentDialog ( OLE_HANDLE ParentHwnd, struct IContentDialogParam * DialogParam );
__declspec(implementation_key(3117)) long IApplicationDialogs::WhatsWrongDlg ( const _variant_t & Objs );
__declspec(implementation_key(3118)) long IFormatLabelRules::GetPropertiesCount ( );
__declspec(implementation_key(3119)) IPropertyPtr IFormatLabelRules::GetProperty ( long Index );
__declspec(implementation_key(3120)) void IFormatLabelRules::PutProperty ( long Index, struct IProperty * Result );
__declspec(implementation_key(3121)) double IFormatLabelRules::GetPropertyId ( long Index );
__declspec(implementation_key(3122)) void IFormatLabelRules::PutPropertyId ( long Index, double Result );
__declspec(implementation_key(3123)) VARIANT_BOOL IFormatLabelRules::GetPropertyUse ( long Index );
__declspec(implementation_key(3124)) void IFormatLabelRules::PutPropertyUse ( long Index, VARIANT_BOOL Result );
__declspec(implementation_key(3125)) _bstr_t IFormatLabelRules::GetPropertyPrefix ( long Index );
__declspec(implementation_key(3126)) void IFormatLabelRules::PutPropertyPrefix ( long Index, _bstr_t Result );
__declspec(implementation_key(3127)) VARIANT_BOOL IFormatLabelRules::Clear ( );
__declspec(implementation_key(3128)) VARIANT_BOOL IFormatLabelRules::AddProperty ( long IndexAt, struct IProperty * Property, VARIANT_BOOL Use, _bstr_t Prefix );
__declspec(implementation_key(3129)) VARIANT_BOOL IFormatLabelRules::AddPropertyById ( long IndexAt, double PropertyId, VARIANT_BOOL Use, _bstr_t Prefix );
__declspec(implementation_key(3130)) VARIANT_BOOL IFormatLabelRules::AddPropertyFromLibrary ( long IndexAt, _bstr_t FileName, double PropertyId, VARIANT_BOOL Use, _bstr_t Prefix );
__declspec(implementation_key(3131)) VARIANT_BOOL IFormatLabelRules::DeleteProperty ( long Index );
__declspec(implementation_key(3132)) VARIANT_BOOL IFormatLabelRules::SwapProperties ( long Index1, long Index2 );
__declspec(implementation_key(3133)) IFormatLabelRulesPtr IDocumentSettings1::GetFormatLabelRules ( );
__declspec(implementation_key(3134)) void IHypertextReferenceParam::PutLinkObject ( struct IKompasAPIObject * PVal );
__declspec(implementation_key(3135)) IKompasAPIObjectPtr IHypertextReferenceParam::GetLinkObject ( );
__declspec(implementation_key(3136)) void IHypertextReferenceParam::PutHypertextType ( enum ksHypertextTypeEnum PVal );
__declspec(implementation_key(3137)) enum ksHypertextTypeEnum IHypertextReferenceParam::GetHypertextType ( );
__declspec(implementation_key(3138)) void IHypertextReferenceParam::PutTextLineIndex ( long PVal );
__declspec(implementation_key(3139)) long IHypertextReferenceParam::GetTextLineIndex ( );
__declspec(implementation_key(3140)) void IHypertextReferenceParam::PutBrackets ( VARIANT_BOOL PVal );
__declspec(implementation_key(3141)) VARIANT_BOOL IHypertextReferenceParam::GetBrackets ( );
__declspec(implementation_key(3142)) void IHypertextReferenceParam::PutPrecission ( long PVal );
__declspec(implementation_key(3143)) long IHypertextReferenceParam::GetPrecission ( );
__declspec(implementation_key(3144)) VARIANT_BOOL IHypertextReferenceParam::Destroy ( );
__declspec(implementation_key(3145)) void IHypertextReferenceParam::PutPropertyId ( double PVal );
__declspec(implementation_key(3146)) double IHypertextReferenceParam::GetPropertyId ( );
__declspec(implementation_key(3147)) IKompasAPIObjectPtr ITableCell::GetText ( );
__declspec(implementation_key(3148)) long ITableCell::GetCellID ( );
__declspec(implementation_key(3149)) long ITableCell::GetRow ( );
__declspec(implementation_key(3150)) long ITableCell::GetColumn ( );
__declspec(implementation_key(3151)) long ITable::GetRowsCount ( );
__declspec(implementation_key(3152)) long ITable::GetColumnsCount ( );
__declspec(implementation_key(3153)) ITableCellPtr ITable::GetCell ( long RowN, long ColN );
__declspec(implementation_key(3154)) ITableCellPtr ITable::GetCellById ( long CellID );
__declspec(implementation_key(3155)) VARIANT_BOOL ITable::AddColumn ( long ColN, VARIANT_BOOL Right );
__declspec(implementation_key(3156)) VARIANT_BOOL ITable::DeleteColumn ( long ColN );
__declspec(implementation_key(3157)) VARIANT_BOOL ITable::AddRow ( long RowN, VARIANT_BOOL Down );
__declspec(implementation_key(3158)) VARIANT_BOOL ITable::DeleteRow ( long RowN );
__declspec(implementation_key(3159)) VARIANT_BOOL ITable::Clear ( );
__declspec(implementation_key(3160)) ITableRangePtr ITable::GetRange ( long BeginRow, long BeginColumn, long EndRow, long EndColumn );
__declspec(implementation_key(3161)) enum ksDocument3DNotifyEnum IKompasDocument3DNotifyResult::GetNotifyType ( );
__declspec(implementation_key(3162)) ksObj3dTypeEnum IKompasDocument3DNotifyResult::GetNotifyObjectType ( );
__declspec(implementation_key(3163)) IKompasAPIObjectPtr IKompasDocument3DNotifyResult::GetNotifyObject ( );
__declspec(implementation_key(3164)) enum ksRequestFilesTypeEnum IKompasDocument3DNotifyResult::GetRequestFilesType ( );
__declspec(implementation_key(3165)) IPoint3DPtr IPoints3D::GetPoint3D ( const _variant_t & Index );
__declspec(implementation_key(3166)) IPoint3DPtr IPoints3D::Add ( );
__declspec(implementation_key(3167)) void IFeaturePattern::PutInitialObjects ( const _variant_t & Objects );
__declspec(implementation_key(3168)) _variant_t IFeaturePattern::GetInitialObjects ( );
__declspec(implementation_key(3169)) void IFeaturePattern::PutInstanceDeletedIndexes ( const _variant_t & PVal );
__declspec(implementation_key(3170)) _variant_t IFeaturePattern::GetInstanceDeletedIndexes ( );
__declspec(implementation_key(3171)) VARIANT_BOOL IFeaturePattern::Destroy ( );
__declspec(implementation_key(3172)) VARIANT_BOOL IFeaturePattern::IsInitialObject ( struct IModelObject * Object );
__declspec(implementation_key(3173)) VARIANT_BOOL IFeaturePattern::AddInitialObjects ( const _variant_t & Objects );
__declspec(implementation_key(3174)) VARIANT_BOOL IFeaturePattern::Clear ( );
__declspec(implementation_key(3175)) VARIANT_BOOL IFeaturePattern::IsSuitableObject ( struct IModelObject * Object );
__declspec(implementation_key(3176)) void IFeaturePattern::PutGeometryPattern ( VARIANT_BOOL PVal );
__declspec(implementation_key(3177)) VARIANT_BOOL IFeaturePattern::GetGeometryPattern ( );
__declspec(implementation_key(3178)) void IFeaturePattern::PutBasePointType ( enum ksPatternBasePointTypeEnum PVal );
__declspec(implementation_key(3179)) enum ksPatternBasePointTypeEnum IFeaturePattern::GetBasePointType ( );
__declspec(implementation_key(3180)) void IFeaturePattern::PutBasePoint ( struct IModelObject * PVal );
__declspec(implementation_key(3181)) IModelObjectPtr IFeaturePattern::GetBasePoint ( );
__declspec(implementation_key(3182)) IModelObjectPtr IFeaturePattern::GetExemplar ( long Index1, long Index2 );
__declspec(implementation_key(3183)) VARIANT_BOOL IFeaturePattern::GetExemplarsCounts ( long * Count1, long * Count2 );
__declspec(implementation_key(3184)) IFeaturePatternPtr IFeaturePatterns::GetFeaturePattern ( const _variant_t & Index );
__declspec(implementation_key(3185)) IFeaturePatternPtr IFeaturePatterns::Add ( ksObj3dTypeEnum Type );
__declspec(implementation_key(3186)) void ISurfaceThickening::PutFaces ( const _variant_t & Faces );
__declspec(implementation_key(3187)) _variant_t ISurfaceThickening::GetFaces ( );
__declspec(implementation_key(3188)) ISurfaceThickeningPtr ISurfaceThickenings::GetSurfaceThickening ( const _variant_t & Index );
__declspec(implementation_key(3189)) ISurfaceThickeningPtr ISurfaceThickenings::Add ( );
__declspec(implementation_key(3190)) void IRotated::PutProfile ( struct IModelObject * Result );
__declspec(implementation_key(3191)) IModelObjectPtr IRotated::GetProfile ( );
__declspec(implementation_key(3192)) void IRotated::PutAxis ( struct IModelObject * Result );
__declspec(implementation_key(3193)) IModelObjectPtr IRotated::GetAxis ( );
__declspec(implementation_key(3194)) void IRotated::PutDirection ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(3195)) ksDirectionTypeEnum IRotated::GetDirection ( );
__declspec(implementation_key(3196)) void IRotated::PutToroidShapeType ( VARIANT_BOOL PVal );
__declspec(implementation_key(3197)) VARIANT_BOOL IRotated::GetToroidShapeType ( );
__declspec(implementation_key(3198)) void IRotated::PutRotatedType ( VARIANT_BOOL Normal, enum ksRotatedTypeEnum PVal );
__declspec(implementation_key(3199)) enum ksRotatedTypeEnum IRotated::GetRotatedType ( VARIANT_BOOL Normal );
__declspec(implementation_key(3200)) void IRotated::PutAngle ( VARIANT_BOOL Normal, double PVal );
__declspec(implementation_key(3201)) double IRotated::GetAngle ( VARIANT_BOOL Normal );
__declspec(implementation_key(3202)) void IRotated::PutAngleObject ( VARIANT_BOOL Normal, struct IModelObject * PVal );
__declspec(implementation_key(3203)) IModelObjectPtr IRotated::GetAngleObject ( VARIANT_BOOL Normal );
__declspec(implementation_key(3204)) void IRotated::PutCutOffByPoint ( VARIANT_BOOL Normal, VARIANT_BOOL PVal );
__declspec(implementation_key(3205)) VARIANT_BOOL IRotated::GetCutOffByPoint ( VARIANT_BOOL Normal );
__declspec(implementation_key(3206)) IRotatedPtr IRotateds::GetRotated ( const _variant_t & Index );
__declspec(implementation_key(3207)) IRotatedPtr IRotateds::Add ( ksObj3dTypeEnum RotatedType );
__declspec(implementation_key(3208)) void IScaling3D::PutShell ( struct IKompasAPIObject * PVal );
__declspec(implementation_key(3209)) IKompasAPIObjectPtr IScaling3D::GetShell ( );
__declspec(implementation_key(3210)) void IScaling3D::PutScale ( double Result );
__declspec(implementation_key(3211)) double IScaling3D::GetScale ( );
__declspec(implementation_key(3212)) void IScaling3D::PutBasePoint ( struct IModelObject * PVal );
__declspec(implementation_key(3213)) IModelObjectPtr IScaling3D::GetBasePoint ( );
__declspec(implementation_key(3214)) void IScaling3D::PutScalingType ( enum ksScalingTypeEnum Result );
__declspec(implementation_key(3215)) enum ksScalingTypeEnum IScaling3D::GetScalingType ( );
__declspec(implementation_key(3216)) void IScaling3D::PutScaleX ( double Result );
__declspec(implementation_key(3217)) double IScaling3D::GetScaleX ( );
__declspec(implementation_key(3218)) void IScaling3D::PutScaleY ( double Result );
__declspec(implementation_key(3219)) double IScaling3D::GetScaleY ( );
__declspec(implementation_key(3220)) void IScaling3D::PutScaleZ ( double Result );
__declspec(implementation_key(3221)) double IScaling3D::GetScaleZ ( );
__declspec(implementation_key(3222)) void IScaling3D::PutCopySolids ( VARIANT_BOOL Result );
__declspec(implementation_key(3223)) VARIANT_BOOL IScaling3D::GetCopySolids ( );
__declspec(implementation_key(3224)) void IScaling3D::PutScalingObjects ( const _variant_t & Result );
__declspec(implementation_key(3225)) _variant_t IScaling3D::GetScalingObjects ( );
__declspec(implementation_key(3226)) VARIANT_BOOL IScaling3D::GetCentrePoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(3227)) VARIANT_BOOL IScaling3D::SetCentrePoint ( double X, double Y, double Z );
__declspec(implementation_key(3228)) void IScaling3D::PutCentrePointBuildingType ( enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(3229)) enum ksPoint3DTypeEnum IScaling3D::GetCentrePointBuildingType ( );
__declspec(implementation_key(3230)) IKompasAPIObjectPtr IScaling3D::GetCentrePointParameters ( );
__declspec(implementation_key(3231)) VARIANT_BOOL IScaling3D::HideCurves ( );
__declspec(implementation_key(3232)) IScaling3DPtr IScalings3D::GetScaling3D ( const _variant_t & Index );
__declspec(implementation_key(3233)) IScaling3DPtr IScalings3D::Add ( );
__declspec(implementation_key(3234)) void IBilletObsolete::PutFileName ( _bstr_t PVal );
__declspec(implementation_key(3235)) _bstr_t IBilletObsolete::GetFileName ( );
__declspec(implementation_key(3236)) IBilletObsoletePtr IBilletsObsoletes::GetBilletObsolete ( const _variant_t & Index );
__declspec(implementation_key(3237)) IBilletObsoletePtr IBilletsObsoletes::Add ( _bstr_t FileName, VARIANT_BOOL Mirror );
__declspec(implementation_key(3238)) void ICollectionGeometry::PutGeometry ( const _variant_t & Objects );
__declspec(implementation_key(3239)) _variant_t ICollectionGeometry::GetGeometry ( );
__declspec(implementation_key(3240)) ICollectionGeometryPtr ICollectionsGeometry::GetCollectionGeometry ( const _variant_t & Index );
__declspec(implementation_key(3241)) ICollectionGeometryPtr ICollectionsGeometry::Add ( );
__declspec(implementation_key(3242)) IUnknownPtr IUserObject3D::GetUserParameters ( );
__declspec(implementation_key(3243)) void IUserObject3D::PutAssociationObject ( long Index, struct IModelObject * PVal );
__declspec(implementation_key(3244)) IModelObjectPtr IUserObject3D::GetAssociationObject ( long Index );
__declspec(implementation_key(3245)) long IUserObject3D::GetAssociationObjectCount ( );
__declspec(implementation_key(3246)) VARIANT_BOOL IUserObject3D::ClearAssociationObject ( );
__declspec(implementation_key(3247)) void IUserObject3D::PutPropertyObjectEditable ( VARIANT_BOOL PVal );
__declspec(implementation_key(3248)) VARIANT_BOOL IUserObject3D::GetPropertyObjectEditable ( );
__declspec(implementation_key(3249)) IUserObject3DPtr IUserObjects3D::GetUserObject3D ( const _variant_t & Index );
__declspec(implementation_key(3250)) IUserObject3DPtr IUserObjects3D::Add ( ksObj3dTypeEnum Type );
__declspec(implementation_key(3251)) IModelObjectPtr IThread::GetBaseObject ( );
__declspec(implementation_key(3252)) void IThread::PutBaseObject ( struct IModelObject * PVal );
__declspec(implementation_key(3253)) IModelObjectPtr IThread::GetInitialBorder ( );
__declspec(implementation_key(3254)) void IThread::PutInitialBorder ( struct IModelObject * PVal );
__declspec(implementation_key(3255)) IModelObjectPtr IThread::GetFinalBorder ( );
__declspec(implementation_key(3256)) void IThread::PutFinalBorder ( struct IModelObject * PVal );
__declspec(implementation_key(3257)) VARIANT_BOOL IThread::GetAutoLenght ( );
__declspec(implementation_key(3258)) void IThread::PutAutoLenght ( VARIANT_BOOL PVal );
__declspec(implementation_key(3259)) double IThread::GetLenght ( );
__declspec(implementation_key(3260)) void IThread::PutLenght ( double PVal );
__declspec(implementation_key(3261)) void IThread::PutAutoDiameter ( VARIANT_BOOL PVal );
__declspec(implementation_key(3262)) VARIANT_BOOL IThread::GetAutoDiameter ( );
__declspec(implementation_key(3263)) VARIANT_BOOL IThread::GetDirection ( );
__declspec(implementation_key(3264)) void IThread::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3265)) VARIANT_BOOL IThread::GetBaseObjectAdjustment ( );
__declspec(implementation_key(3266)) void IThread::PutBaseObjectAdjustment ( VARIANT_BOOL PVal );
__declspec(implementation_key(3267)) VARIANT_BOOL IThread::GetBaseObjectAdjustmentOffset1 ( );
__declspec(implementation_key(3268)) void IThread::PutBaseObjectAdjustmentOffset1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(3269)) VARIANT_BOOL IThread::GetBaseObjectAdjustmentOffset2 ( );
__declspec(implementation_key(3270)) void IThread::PutBaseObjectAdjustmentOffset2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(3271)) VARIANT_BOOL IThread::GetLeftThread ( );
__declspec(implementation_key(3272)) void IThread::PutLeftThread ( VARIANT_BOOL PVal );
__declspec(implementation_key(3273)) double IHole3D::GetDiameter ( );
__declspec(implementation_key(3274)) void IHole3D::PutDiameter ( double PVal );
__declspec(implementation_key(3275)) double IHole3D::GetDepth ( );
__declspec(implementation_key(3276)) void IHole3D::PutDepth ( double PVal );
__declspec(implementation_key(3277)) enum ksDepthTypeEnum IHole3D::GetDepthType ( );
__declspec(implementation_key(3278)) void IHole3D::PutDepthType ( enum ksDepthTypeEnum PVal );
__declspec(implementation_key(3279)) enum ksEndFaceTypeEnum IHole3D::GetEndFaceType ( );
__declspec(implementation_key(3280)) void IHole3D::PutEndFaceType ( enum ksEndFaceTypeEnum PVal );
__declspec(implementation_key(3281)) double IHole3D::GetEndFaceAngle ( );
__declspec(implementation_key(3282)) void IHole3D::PutEndFaceAngle ( double PVal );
__declspec(implementation_key(3283)) enum ksHoleTypeEnum IHole3D::GetHoleType ( );
__declspec(implementation_key(3284)) void IHole3D::PutHoleType ( enum ksHoleTypeEnum PVal );
__declspec(implementation_key(3285)) IModelObjectPtr IHole3D::GetDepthVertex ( );
__declspec(implementation_key(3286)) void IHole3D::PutDepthVertex ( struct IModelObject * PVal );
__declspec(implementation_key(3287)) IModelObjectPtr IHole3D::GetDepthFace ( );
__declspec(implementation_key(3288)) void IHole3D::PutDepthFace ( struct IModelObject * PVal );
__declspec(implementation_key(3289)) VARIANT_BOOL IHole3D::GetAxis ( );
__declspec(implementation_key(3290)) void IHole3D::PutAxis ( VARIANT_BOOL PVal );
__declspec(implementation_key(3291)) IThreadPtr IHole3D::GetThread ( );
__declspec(implementation_key(3292)) IKompasAPIObjectPtr IHole3D::GetHoleParameters ( );
__declspec(implementation_key(3293)) VARIANT_BOOL IHole3D::GetShowThread ( );
__declspec(implementation_key(3294)) void IHole3D::PutShowThread ( VARIANT_BOOL PVal );
__declspec(implementation_key(3295)) IHole3DPtr IHoles3D::GetHole3D ( const _variant_t & Index );
__declspec(implementation_key(3296)) IHole3DPtr IHoles3D::Add ( );
__declspec(implementation_key(3297)) enum ksChamferBuildingTypeEnum IChamfer::GetBuildingType ( );
__declspec(implementation_key(3298)) void IChamfer::PutBuildingType ( enum ksChamferBuildingTypeEnum PVal );
__declspec(implementation_key(3299)) _variant_t IChamfer::GetBaseObjects ( );
__declspec(implementation_key(3300)) void IChamfer::PutBaseObjects ( const _variant_t & PVal );
__declspec(implementation_key(3301)) double IChamfer::GetDistance1 ( );
__declspec(implementation_key(3302)) void IChamfer::PutDistance1 ( double PVal );
__declspec(implementation_key(3303)) double IChamfer::GetDistance2 ( );
__declspec(implementation_key(3304)) void IChamfer::PutDistance2 ( double PVal );
__declspec(implementation_key(3305)) double IChamfer::GetAngle ( );
__declspec(implementation_key(3306)) void IChamfer::PutAngle ( double PVal );
__declspec(implementation_key(3307)) void IChamfer::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3308)) VARIANT_BOOL IChamfer::GetDirection ( );
__declspec(implementation_key(3309)) void IChamfer::PutTangent ( VARIANT_BOOL PVal );
__declspec(implementation_key(3310)) VARIANT_BOOL IChamfer::GetTangent ( );
__declspec(implementation_key(3311)) IChamferPtr IChamfers::GetChamfer ( const _variant_t & Index );
__declspec(implementation_key(3312)) IChamferPtr IChamfers::Add ( );
__declspec(implementation_key(3313)) enum ksFilletBuildingTypeEnum IFillet::GetBuildingType ( );
__declspec(implementation_key(3314)) void IFillet::PutBuildingType ( enum ksFilletBuildingTypeEnum PVal );
__declspec(implementation_key(3315)) _variant_t IFillet::GetBaseObjects ( );
__declspec(implementation_key(3316)) void IFillet::PutBaseObjects ( const _variant_t & PVal );
__declspec(implementation_key(3317)) double IFillet::GetRadius1 ( );
__declspec(implementation_key(3318)) void IFillet::PutRadius1 ( double PVal );
__declspec(implementation_key(3319)) double IFillet::GetRadius2 ( );
__declspec(implementation_key(3320)) void IFillet::PutRadius2 ( double PVal );
__declspec(implementation_key(3321)) double IFillet::GetCoefficient ( );
__declspec(implementation_key(3322)) void IFillet::PutCoefficient ( double PVal );
__declspec(implementation_key(3323)) double IFillet::GetChord ( );
__declspec(implementation_key(3324)) void IFillet::PutChord ( double PVal );
__declspec(implementation_key(3325)) void IFillet::PutTangent ( VARIANT_BOOL PVal );
__declspec(implementation_key(3326)) VARIANT_BOOL IFillet::GetTangent ( );
__declspec(implementation_key(3327)) VARIANT_BOOL IFillet::GetSmoothCorner ( );
__declspec(implementation_key(3328)) void IFillet::PutSmoothCorner ( VARIANT_BOOL PVal );
__declspec(implementation_key(3329)) VARIANT_BOOL IFillet::GetRoundCorners ( );
__declspec(implementation_key(3330)) void IFillet::PutRoundCorners ( VARIANT_BOOL PVal );
__declspec(implementation_key(3331)) void IFillet::PutAutoSaveEdge ( VARIANT_BOOL PVal );
__declspec(implementation_key(3332)) VARIANT_BOOL IFillet::GetAutoSaveEdge ( );
__declspec(implementation_key(3333)) void IFillet::PutSaveEdge ( VARIANT_BOOL PVal );
__declspec(implementation_key(3334)) VARIANT_BOOL IFillet::GetSaveEdge ( );
__declspec(implementation_key(3335)) void IFillet::PutStopFilletOn ( VARIANT_BOOL First, VARIANT_BOOL PVal );
__declspec(implementation_key(3336)) VARIANT_BOOL IFillet::GetStopFilletOn ( VARIANT_BOOL First );
__declspec(implementation_key(3337)) void IFillet::PutStopFilletOffsetMode ( VARIANT_BOOL First, enum ksFilletOffsetModeEnum PVal );
__declspec(implementation_key(3338)) enum ksFilletOffsetModeEnum IFillet::GetStopFilletOffsetMode ( VARIANT_BOOL First );
__declspec(implementation_key(3339)) void IFillet::PutStopFilletOffset ( VARIANT_BOOL First, double PVal );
__declspec(implementation_key(3340)) double IFillet::GetStopFilletOffset ( VARIANT_BOOL First );
__declspec(implementation_key(3341)) void IFillet::PutStopFilletCutObject ( VARIANT_BOOL First, struct IModelObject * PVal );
__declspec(implementation_key(3342)) IModelObjectPtr IFillet::GetStopFilletCutObject ( VARIANT_BOOL First );
__declspec(implementation_key(3343)) void IFillet::PutStopFilletCutByObject ( VARIANT_BOOL First, VARIANT_BOOL PVal );
__declspec(implementation_key(3344)) VARIANT_BOOL IFillet::GetStopFilletCutByObject ( VARIANT_BOOL First );
__declspec(implementation_key(3345)) void IFillet::PutStopFilletCutPointIndex ( VARIANT_BOOL First, long PVal );
__declspec(implementation_key(3346)) long IFillet::GetStopFilletCutPointIndex ( VARIANT_BOOL First );
__declspec(implementation_key(3347)) void IFillet::PutStopFilletDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3348)) VARIANT_BOOL IFillet::GetStopFilletDirection ( );
__declspec(implementation_key(3349)) void IFillet::PutVariableRadiusOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(3350)) VARIANT_BOOL IFillet::GetVariableRadiusOn ( );
__declspec(implementation_key(3351)) long IFillet::GetVariableRadiusCount ( );
__declspec(implementation_key(3352)) VARIANT_BOOL IFillet::AddVariableRadius ( struct IModelObject * PointObject, double Radius, double Position, VARIANT_BOOL PositionType );
__declspec(implementation_key(3353)) VARIANT_BOOL IFillet::VariableRadiusClear ( );
__declspec(implementation_key(3354)) VARIANT_BOOL IFillet::VariableRadiusDelete ( long Index );
__declspec(implementation_key(3355)) void IFillet::PutVariableRadius ( long Index, double PVal );
__declspec(implementation_key(3356)) double IFillet::GetVariableRadius ( long Index );
__declspec(implementation_key(3357)) void IFillet::PutVariableRadiusPosition ( long Index, double PVal );
__declspec(implementation_key(3358)) double IFillet::GetVariableRadiusPosition ( long Index );
__declspec(implementation_key(3359)) void IFillet::PutVariableRadiusPositionLenght ( long Index, double PVal );
__declspec(implementation_key(3360)) double IFillet::GetVariableRadiusPositionLenght ( long Index );
__declspec(implementation_key(3361)) IModelObjectPtr IFillet::GetVariableRadiusEdge ( long Index );
__declspec(implementation_key(3362)) IFilletPtr IFillets::GetFillet ( const _variant_t & Index );
__declspec(implementation_key(3363)) IFilletPtr IFillets::Add ( );
__declspec(implementation_key(3364)) _variant_t IIncline::GetFaces ( );
__declspec(implementation_key(3365)) void IIncline::PutFaces ( const _variant_t & PVal );
__declspec(implementation_key(3366)) double IIncline::GetAngle ( );
__declspec(implementation_key(3367)) void IIncline::PutAngle ( double PVal );
__declspec(implementation_key(3368)) VARIANT_BOOL IIncline::GetDirection ( );
__declspec(implementation_key(3369)) void IIncline::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3370)) IModelObjectPtr IIncline::GetPlane ( );
__declspec(implementation_key(3371)) void IIncline::PutPlane ( struct IModelObject * PVal );
__declspec(implementation_key(3372)) IInclinePtr IInclines::GetIncline ( const _variant_t & Index );
__declspec(implementation_key(3373)) IInclinePtr IInclines::Add ( );
__declspec(implementation_key(3374)) void IShell::PutDeletedFaces ( const _variant_t & PVal );
__declspec(implementation_key(3375)) _variant_t IShell::GetDeletedFaces ( );
__declspec(implementation_key(3376)) void IShell::PutThinType ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(3377)) ksDirectionTypeEnum IShell::GetThinType ( );
__declspec(implementation_key(3378)) void IShell::PutThickness ( double PVal );
__declspec(implementation_key(3379)) double IShell::GetThickness ( );
__declspec(implementation_key(3380)) VARIANT_BOOL IShell::SetFaces ( const _variant_t & Faces, VARIANT_BOOL TangentFaces );
__declspec(implementation_key(3381)) IShellPtr IShells::GetShell ( const _variant_t & Index );
__declspec(implementation_key(3382)) IShellPtr IShells::Add ( );
__declspec(implementation_key(3383)) enum ksBooleanType IBoolean::GetBooleanType ( );
__declspec(implementation_key(3384)) void IBoolean::PutBooleanType ( enum ksBooleanType PVal );
__declspec(implementation_key(3385)) _variant_t IBoolean::GetBodies ( );
__declspec(implementation_key(3386)) void IBoolean::PutBodies ( const _variant_t & PVal );
__declspec(implementation_key(3387)) IKompasAPIObjectPtr IBoolean::GetBaseObject ( );
__declspec(implementation_key(3388)) void IBoolean::PutBaseObject ( struct IKompasAPIObject * PVal );
__declspec(implementation_key(3389)) VARIANT_BOOL IBoolean::GetSaveCopyBaseObject ( );
__declspec(implementation_key(3390)) void IBoolean::PutSaveCopyBaseObject ( VARIANT_BOOL PVal );
__declspec(implementation_key(3391)) _variant_t IBoolean::GetModifyObjects ( );
__declspec(implementation_key(3392)) void IBoolean::PutModifyObjects ( const _variant_t & PVal );
__declspec(implementation_key(3393)) VARIANT_BOOL IBoolean::GetSaveCopyModifyObjects ( );
__declspec(implementation_key(3394)) void IBoolean::PutSaveCopyModifyObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(3395)) IBooleanPtr IBooleans::GetBoolean ( const _variant_t & Index );
__declspec(implementation_key(3396)) IBooleanPtr IBooleans::Add ( );
__declspec(implementation_key(3397)) void ICut::PutCutObject ( struct IModelObject * CurrentObject );
__declspec(implementation_key(3398)) IModelObjectPtr ICut::GetCutObject ( );
__declspec(implementation_key(3399)) void ICut::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3400)) VARIANT_BOOL ICut::GetDirection ( );
__declspec(implementation_key(3401)) void ICut::PutChooseType ( enum ksChooseType CurrentValue );
__declspec(implementation_key(3402)) enum ksChooseType ICut::GetChooseType ( );
__declspec(implementation_key(3403)) void ICut::PutChoosePartsType ( enum ksChoosePartsType CurrentValue );
__declspec(implementation_key(3404)) enum ksChoosePartsType ICut::GetChoosePartsType ( );
__declspec(implementation_key(3405)) void ICut::PutChooseBodies ( const _variant_t & Result );
__declspec(implementation_key(3406)) _variant_t ICut::GetChooseBodies ( );
__declspec(implementation_key(3407)) void ICut::PutChooseParts ( const _variant_t & Result );
__declspec(implementation_key(3408)) _variant_t ICut::GetChooseParts ( );
__declspec(implementation_key(3409)) void ICut::PutBuildingType ( enum ksCutBuildingTypeEnum Value );
__declspec(implementation_key(3410)) enum ksCutBuildingTypeEnum ICut::GetBuildingType ( );
__declspec(implementation_key(3411)) ICutPtr ICuts::GetCut ( const _variant_t & Index );
__declspec(implementation_key(3412)) ICutPtr ICuts::Add ( );
__declspec(implementation_key(3413)) long ICoupling::GetCount ( );
__declspec(implementation_key(3414)) IModelObjectPtr ICoupling::GetSketch ( long Index );
__declspec(implementation_key(3415)) IModelObjectPtr ICoupling::GetPositionObject ( long Index );
__declspec(implementation_key(3416)) void ICoupling::PutPositionObject ( long Index, struct IModelObject * NewObject );
__declspec(implementation_key(3417)) void ICoupling::PutPosition ( long Index, double PVal );
__declspec(implementation_key(3418)) double ICoupling::GetPosition ( long Index );
__declspec(implementation_key(3419)) void ICoupling::PutPositionOffset ( long Index, double PVal );
__declspec(implementation_key(3420)) double ICoupling::GetPositionOffset ( long Index );
__declspec(implementation_key(3421)) VARIANT_BOOL ICoupling::GetPoint ( long Index, double * X, double * Y, double * Z );
__declspec(implementation_key(3422)) VARIANT_BOOL ICoupling::SetPoint ( long Index, double X, double Y, double Z );
__declspec(implementation_key(3423)) VARIANT_BOOL ICoupling::Delete ( );
__declspec(implementation_key(3424)) void ILoft::PutOperationResult ( enum ksOperationResultEnum Result );
__declspec(implementation_key(3425)) enum ksOperationResultEnum ILoft::GetOperationResult ( );
__declspec(implementation_key(3426)) void ILoft::PutSketchs ( const _variant_t & Result );
__declspec(implementation_key(3427)) _variant_t ILoft::GetSketchs ( );
__declspec(implementation_key(3428)) void ILoft::PutAxisLine ( struct IModelObject * PVal );
__declspec(implementation_key(3429)) IModelObjectPtr ILoft::GetAxisLine ( );
__declspec(implementation_key(3430)) void ILoft::PutClosed ( VARIANT_BOOL PVal );
__declspec(implementation_key(3431)) VARIANT_BOOL ILoft::GetClosed ( );
__declspec(implementation_key(3432)) void ILoft::PutBuildingType ( VARIANT_BOOL BeginSection, enum ksLoftBuildingType Result );
__declspec(implementation_key(3433)) enum ksLoftBuildingType ILoft::GetBuildingType ( VARIANT_BOOL BeginSection );
__declspec(implementation_key(3434)) void ILoft::PutBuildingObject ( VARIANT_BOOL BeginSection, struct IModelObject * Result );
__declspec(implementation_key(3435)) IModelObjectPtr ILoft::GetBuildingObject ( VARIANT_BOOL BeginSection );
__declspec(implementation_key(3436)) void ILoft::PutDirectionalLines ( const _variant_t & PVal );
__declspec(implementation_key(3437)) _variant_t ILoft::GetDirectionalLines ( );
__declspec(implementation_key(3438)) ICouplingPtr ILoft::AddCoupling ( );
__declspec(implementation_key(3439)) long ILoft::GetCouplingsCount ( );
__declspec(implementation_key(3440)) ICouplingPtr ILoft::GetCoupling ( long Index );
__declspec(implementation_key(3441)) VARIANT_BOOL ILoft::DeleteCoupling ( long Index );
__declspec(implementation_key(3442)) VARIANT_BOOL ILoft::ClearCouplings ( );
__declspec(implementation_key(3443)) ILoftPtr ILofts::GetLoft ( const _variant_t & Index );
__declspec(implementation_key(3444)) ILoftPtr ILofts::Add ( ksObj3dTypeEnum LoftType );
__declspec(implementation_key(3445)) void IEvolution::PutOperationResult ( enum ksOperationResultEnum Result );
__declspec(implementation_key(3446)) enum ksOperationResultEnum IEvolution::GetOperationResult ( );
__declspec(implementation_key(3447)) void IEvolution::PutSketch ( struct IModelObject * Result );
__declspec(implementation_key(3448)) IModelObjectPtr IEvolution::GetSketch ( );
__declspec(implementation_key(3449)) void IEvolution::PutEdges ( const _variant_t & Result );
__declspec(implementation_key(3450)) _variant_t IEvolution::GetEdges ( );
__declspec(implementation_key(3451)) void IEvolution::PutSketchShiftType ( enum ksEvolutionShiftSketchTypeEnum Result );
__declspec(implementation_key(3452)) enum ksEvolutionShiftSketchTypeEnum IEvolution::GetSketchShiftType ( );
__declspec(implementation_key(3453)) double IEvolution::GetPathLength ( enum ksLengthUnitsEnum Unit );
__declspec(implementation_key(3454)) void IEvolution::PutBySurfaceNormal ( VARIANT_BOOL PVal );
__declspec(implementation_key(3455)) VARIANT_BOOL IEvolution::GetBySurfaceNormal ( );
__declspec(implementation_key(3456)) void IEvolution::PutEvolutionVersion ( enum ksEvolutionVersionEnum Result );
__declspec(implementation_key(3457)) enum ksEvolutionVersionEnum IEvolution::GetEvolutionVersion ( );
__declspec(implementation_key(3458)) IEvolutionPtr IEvolutions::GetEvolution ( const _variant_t & Index );
__declspec(implementation_key(3459)) IEvolutionPtr IEvolutions::Add ( ksObj3dTypeEnum EvolutionType );
__declspec(implementation_key(3460)) void IUnionComponents::PutParts ( const _variant_t & Result );
__declspec(implementation_key(3461)) _variant_t IUnionComponents::GetParts ( );
__declspec(implementation_key(3462)) IUnionComponentsPtr IUnionsComponents::GetUnionComponents ( const _variant_t & Index );
__declspec(implementation_key(3463)) IUnionComponentsPtr IUnionsComponents::Add ( );
__declspec(implementation_key(3464)) void IMoldCavity::PutParts ( const _variant_t & Result );
__declspec(implementation_key(3465)) _variant_t IMoldCavity::GetParts ( );
__declspec(implementation_key(3466)) double IMoldCavity::GetScale ( );
__declspec(implementation_key(3467)) void IMoldCavity::PutScale ( double PVal );
__declspec(implementation_key(3468)) IModelObjectPtr IMoldCavity::GetScaleCentre ( );
__declspec(implementation_key(3469)) void IMoldCavity::PutScaleCentre ( struct IModelObject * PVal );
__declspec(implementation_key(3470)) IMoldCavityPtr IMoldCavities::GetMoldCavity ( const _variant_t & Index );
__declspec(implementation_key(3471)) IMoldCavityPtr IMoldCavities::Add ( );
__declspec(implementation_key(3472)) void IMacroObject3D::PutObjects ( const _variant_t & Result );
__declspec(implementation_key(3473)) _variant_t IMacroObject3D::GetObjects ( );
__declspec(implementation_key(3474)) void IMacroObject3D::PutStaffVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(3475)) VARIANT_BOOL IMacroObject3D::GetStaffVisible ( );
__declspec(implementation_key(3476)) void IMacroObject3D::PutDoubleClickEditable ( VARIANT_BOOL PVal );
__declspec(implementation_key(3477)) VARIANT_BOOL IMacroObject3D::GetDoubleClickEditable ( );
__declspec(implementation_key(3478)) void IMacroObject3D::PutPropertyObjectEditable ( VARIANT_BOOL PVal );
__declspec(implementation_key(3479)) VARIANT_BOOL IMacroObject3D::GetPropertyObjectEditable ( );
__declspec(implementation_key(3480)) void IMacroObject3D::PutAssociationObject ( long Index, struct IKompasAPIObject * PVal );
__declspec(implementation_key(3481)) IKompasAPIObjectPtr IMacroObject3D::GetAssociationObject ( long Index );
__declspec(implementation_key(3482)) long IMacroObject3D::GetAssociationObjectCount ( );
__declspec(implementation_key(3483)) VARIANT_BOOL IMacroObject3D::ClearAssociationObject ( );
__declspec(implementation_key(3484)) VARIANT_BOOL IMacroObject3D::Destroy ( );
__declspec(implementation_key(3485)) IMacroObject3DPtr IMacroObjects3D::GetMacroObject3D ( const _variant_t & Index );
__declspec(implementation_key(3486)) IMacroObject3DPtr IMacroObjects3D::Add ( );
__declspec(implementation_key(3487)) void IBodyReposition::PutRepositionBody ( struct IKompasAPIObject * Result );
__declspec(implementation_key(3488)) IKompasAPIObjectPtr IBodyReposition::GetRepositionBody ( );
__declspec(implementation_key(3489)) IModelObjectPtr IBodyReposition::GetRepositionCentre ( );
__declspec(implementation_key(3490)) void IBodyReposition::PutRepositionCentre ( struct IModelObject * PVal );
__declspec(implementation_key(3491)) VARIANT_BOOL IBodyReposition::GetCopyBoby ( );
__declspec(implementation_key(3492)) void IBodyReposition::PutCopyBoby ( VARIANT_BOOL PVal );
__declspec(implementation_key(3493)) ILocalCoordinateSystemPtr IBodyReposition::GetPosition ( );
__declspec(implementation_key(3494)) IBodyRepositionPtr IBodyRepositions::GetBodyReposition ( const _variant_t & Index );
__declspec(implementation_key(3495)) IBodyRepositionPtr IBodyRepositions::Add ( );
__declspec(implementation_key(3496)) _variant_t IFullFillet::GetSide1Faces ( );
__declspec(implementation_key(3497)) void IFullFillet::PutSide1Faces ( const _variant_t & PVal );
__declspec(implementation_key(3498)) _variant_t IFullFillet::GetSide2Faces ( );
__declspec(implementation_key(3499)) void IFullFillet::PutSide2Faces ( const _variant_t & PVal );
__declspec(implementation_key(3500)) _variant_t IFullFillet::GetCenterFaces ( );
__declspec(implementation_key(3501)) void IFullFillet::PutCenterFaces ( const _variant_t & PVal );
__declspec(implementation_key(3502)) void IFullFillet::PutTangent ( VARIANT_BOOL PVal );
__declspec(implementation_key(3503)) VARIANT_BOOL IFullFillet::GetTangent ( );
__declspec(implementation_key(3504)) IFullFilletPtr IFullFillets::GetFullFillet ( const _variant_t & Index );
__declspec(implementation_key(3505)) IFullFilletPtr IFullFillets::Add ( );
__declspec(implementation_key(3506)) long IWireFrame3D::GetVertexCount ( );
__declspec(implementation_key(3507)) long IWireFrame3D::GetEdgesCount ( );
__declspec(implementation_key(3508)) IModelObjectPtr IWireFrame3D::GetVertex ( long Index );
__declspec(implementation_key(3509)) IModelObjectPtr IWireFrame3D::GetEdge ( long Index );
__declspec(implementation_key(3510)) VARIANT_BOOL IWireFrame3D::AddVertex ( struct IKompasAPIObject * Obj );
__declspec(implementation_key(3511)) VARIANT_BOOL IWireFrame3D::AddVertexByPoint ( double X, double Y, double Z );
__declspec(implementation_key(3512)) VARIANT_BOOL IWireFrame3D::AddEdge ( struct IKompasAPIObject * Obj );
__declspec(implementation_key(3513)) VARIANT_BOOL IWireFrame3D::ClearVertexes ( );
__declspec(implementation_key(3514)) VARIANT_BOOL IWireFrame3D::ClearEdges ( );
__declspec(implementation_key(3515)) IWireFrame3DPtr IWireFrames3D::GetWireFrame3D ( const _variant_t & Index );
__declspec(implementation_key(3516)) IWireFrame3DPtr IWireFrames3D::Add ( );
__declspec(implementation_key(3517)) void ISplitSolid::PutCutObjects ( const _variant_t & Result );
__declspec(implementation_key(3518)) _variant_t ISplitSolid::GetCutObjects ( );
__declspec(implementation_key(3519)) ISplitSolidPtr ISplitSolids::GetSplitSolid ( const _variant_t & Index );
__declspec(implementation_key(3520)) ISplitSolidPtr ISplitSolids::Add ( );
__declspec(implementation_key(3521)) void IExtrusion1::PutProfile ( struct IModelObject * Result );
__declspec(implementation_key(3522)) IModelObjectPtr IExtrusion1::GetProfile ( );
__declspec(implementation_key(3523)) void IExtrusion1::PutDirectionObject ( struct IModelObject * Result );
__declspec(implementation_key(3524)) IModelObjectPtr IExtrusion1::GetDirectionObject ( );
__declspec(implementation_key(3525)) IVector3DPtr IExtrusion1::GetVector3D ( );
__declspec(implementation_key(3526)) void IExtrusion1::PutCutOffByPoint ( VARIANT_BOOL Normal, VARIANT_BOOL PVal );
__declspec(implementation_key(3527)) VARIANT_BOOL IExtrusion1::GetCutOffByPoint ( VARIANT_BOOL Normal );
__declspec(implementation_key(3528)) void IExtrusion1::PutOperationResult ( enum ksOperationResultEnum Result );
__declspec(implementation_key(3529)) enum ksOperationResultEnum IExtrusion1::GetOperationResult ( );
__declspec(implementation_key(3530)) void IExtrusion1::PutProfiles ( const _variant_t & Profiles );
__declspec(implementation_key(3531)) _variant_t IExtrusion1::GetProfiles ( );
__declspec(implementation_key(3532)) void ISheetMetalBend::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3533)) VARIANT_BOOL ISheetMetalBend::GetDirection ( );
__declspec(implementation_key(3534)) void ISheetMetalBend::PutDisposal ( enum ksBendDisposalEnum PVal );
__declspec(implementation_key(3535)) enum ksBendDisposalEnum ISheetMetalBend::GetDisposal ( );
__declspec(implementation_key(3536)) void ISheetMetalBend::PutWidth ( double PVal );
__declspec(implementation_key(3537)) double ISheetMetalBend::GetWidth ( );
__declspec(implementation_key(3538)) void ISheetMetalBend::PutLengthType ( enum ksBendLengthTypeEnum PVal );
__declspec(implementation_key(3539)) enum ksBendLengthTypeEnum ISheetMetalBend::GetLengthType ( );
__declspec(implementation_key(3540)) void ISheetMetalBend::PutInternalLength ( VARIANT_BOOL PVal );
__declspec(implementation_key(3541)) VARIANT_BOOL ISheetMetalBend::GetInternalLength ( );
__declspec(implementation_key(3542)) void ISheetMetalBend::PutLength ( double PVal );
__declspec(implementation_key(3543)) double ISheetMetalBend::GetLength ( );
__declspec(implementation_key(3544)) void ISheetMetalBend::PutAngleType ( VARIANT_BOOL PVal );
__declspec(implementation_key(3545)) VARIANT_BOOL ISheetMetalBend::GetAngleType ( );
__declspec(implementation_key(3546)) void ISheetMetalBend::PutAngle ( double PVal );
__declspec(implementation_key(3547)) double ISheetMetalBend::GetAngle ( );
__declspec(implementation_key(3548)) void ISheetMetalBend::PutOffsetType ( enum ksBendOffsetTypeEnum PVal );
__declspec(implementation_key(3549)) enum ksBendOffsetTypeEnum ISheetMetalBend::GetOffsetType ( );
__declspec(implementation_key(3550)) void ISheetMetalBend::PutOffset ( double PVal );
__declspec(implementation_key(3551)) double ISheetMetalBend::GetOffset ( );
__declspec(implementation_key(3552)) void ISheetMetalBend::PutStraighten ( VARIANT_BOOL PVal );
__declspec(implementation_key(3553)) VARIANT_BOOL ISheetMetalBend::GetStraighten ( );
__declspec(implementation_key(3554)) void ISheetMetalBend::PutLeftSideType ( enum ksBendSideTypeEnum PVal );
__declspec(implementation_key(3555)) enum ksBendSideTypeEnum ISheetMetalBend::GetLeftSideType ( );
__declspec(implementation_key(3556)) void ISheetMetalBend::PutDistanceLeftSide ( double PVal );
__declspec(implementation_key(3557)) double ISheetMetalBend::GetDistanceLeftSide ( );
__declspec(implementation_key(3558)) void ISheetMetalBend::PutLeftSideAngle ( double PVal );
__declspec(implementation_key(3559)) double ISheetMetalBend::GetLeftSideAngle ( );
__declspec(implementation_key(3560)) void ISheetMetalBend::PutDeviationLeftSide ( double PVal );
__declspec(implementation_key(3561)) double ISheetMetalBend::GetDeviationLeftSide ( );
__declspec(implementation_key(3562)) void ISheetMetalBend::PutWideningLeftSide ( double PVal );
__declspec(implementation_key(3563)) double ISheetMetalBend::GetWideningLeftSide ( );
__declspec(implementation_key(3564)) void ISheetMetalBend::PutRightSideType ( enum ksBendSideTypeEnum PVal );
__declspec(implementation_key(3565)) enum ksBendSideTypeEnum ISheetMetalBend::GetRightSideType ( );
__declspec(implementation_key(3566)) void ISheetMetalBend::PutDistanceRightSide ( double PVal );
__declspec(implementation_key(3567)) double ISheetMetalBend::GetDistanceRightSide ( );
__declspec(implementation_key(3568)) void ISheetMetalBend::PutRightSideAngle ( double PVal );
__declspec(implementation_key(3569)) double ISheetMetalBend::GetRightSideAngle ( );
__declspec(implementation_key(3570)) void ISheetMetalBend::PutDeviationRightSide ( double PVal );
__declspec(implementation_key(3571)) double ISheetMetalBend::GetDeviationRightSide ( );
__declspec(implementation_key(3572)) void ISheetMetalBend::PutWideningRightSide ( double PVal );
__declspec(implementation_key(3573)) double ISheetMetalBend::GetWideningRightSide ( );
__declspec(implementation_key(3574)) void ISheetMetalBend::PutWithoutAngleRelease ( VARIANT_BOOL PVal );
__declspec(implementation_key(3575)) VARIANT_BOOL ISheetMetalBend::GetWithoutAngleRelease ( );
__declspec(implementation_key(3576)) void ISheetMetalBend::PutWithoutBendRelease ( VARIANT_BOOL PVal );
__declspec(implementation_key(3577)) VARIANT_BOOL ISheetMetalBend::GetWithoutBendRelease ( );
__declspec(implementation_key(3578)) void ISheetMetalBend::PutDismissalWithWidth ( VARIANT_BOOL PVal );
__declspec(implementation_key(3579)) VARIANT_BOOL ISheetMetalBend::GetDismissalWithWidth ( );
__declspec(implementation_key(3580)) void ISheetMetalBend::PutBendRelease ( enum ksBendReleaseTypeEnum PVal );
__declspec(implementation_key(3581)) enum ksBendReleaseTypeEnum ISheetMetalBend::GetBendRelease ( );
__declspec(implementation_key(3582)) void ISheetMetalBend::PutDismissalWidth ( double PVal );
__declspec(implementation_key(3583)) double ISheetMetalBend::GetDismissalWidth ( );
__declspec(implementation_key(3584)) void ISheetMetalBend::PutDismissalDepth ( double PVal );
__declspec(implementation_key(3585)) double ISheetMetalBend::GetDismissalDepth ( );
__declspec(implementation_key(3586)) void ISheetMetalBend::PutDismissalAngleType ( enum ksBendAngleReleaseTypeEnum PVal );
__declspec(implementation_key(3587)) enum ksBendAngleReleaseTypeEnum ISheetMetalBend::GetDismissalAngleType ( );
__declspec(implementation_key(3588)) void ISheetMetalBend::PutBendObject ( struct IModelObject * Result );
__declspec(implementation_key(3589)) IModelObjectPtr ISheetMetalBend::GetBendObject ( );
__declspec(implementation_key(3590)) void ISheetMetalBend::PutInternalRadius ( VARIANT_BOOL PVal );
__declspec(implementation_key(3591)) VARIANT_BOOL ISheetMetalBend::GetInternalRadius ( );
__declspec(implementation_key(3592)) void ISheetMetalBend::PutRadius ( double PVal );
__declspec(implementation_key(3593)) double ISheetMetalBend::GetRadius ( );
__declspec(implementation_key(3594)) void ISheetMetalBend::PutUnfoldType ( enum ksUnfoldTypeEnum PVal );
__declspec(implementation_key(3595)) enum ksUnfoldTypeEnum ISheetMetalBend::GetUnfoldType ( );
__declspec(implementation_key(3596)) void ISheetMetalBend::PutBendCoefficient ( double PVal );
__declspec(implementation_key(3597)) double ISheetMetalBend::GetBendCoefficient ( );
__declspec(implementation_key(3598)) void ISheetMetalBend::PutBendValue ( double PVal );
__declspec(implementation_key(3599)) double ISheetMetalBend::GetBendValue ( );
__declspec(implementation_key(3600)) void ISheetMetalBend::PutBendReduction ( double PVal );
__declspec(implementation_key(3601)) double ISheetMetalBend::GetBendReduction ( );
__declspec(implementation_key(3602)) _bstr_t ISheetMetalBend::GetBendTablePath ( );
__declspec(implementation_key(3603)) void ISheetMetalBend::PutLengthBy2Sides ( VARIANT_BOOL PVal );
__declspec(implementation_key(3604)) VARIANT_BOOL ISheetMetalBend::GetLengthBy2Sides ( );
__declspec(implementation_key(3605)) void ISheetMetalBend::PutLength1 ( double PVal );
__declspec(implementation_key(3606)) double ISheetMetalBend::GetLength1 ( );
__declspec(implementation_key(3607)) void ISheetMetalBend::PutLength2 ( double PVal );
__declspec(implementation_key(3608)) double ISheetMetalBend::GetLength2 ( );
__declspec(implementation_key(3609)) void ISheetMetalBend::PutLengthObject1 ( struct IModelObject * PVal );
__declspec(implementation_key(3610)) IModelObjectPtr ISheetMetalBend::GetLengthObject1 ( );
__declspec(implementation_key(3611)) void ISheetMetalBend::PutOffsetFromLengthObject1 ( double PVal );
__declspec(implementation_key(3612)) double ISheetMetalBend::GetOffsetFromLengthObject1 ( );
__declspec(implementation_key(3613)) void ISheetMetalBend::PutOffsetDirection1 ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(3614)) ksDirectionTypeEnum ISheetMetalBend::GetOffsetDirection1 ( );
__declspec(implementation_key(3615)) void ISheetMetalBend::PutLengthBuildingType1 ( enum ksLengthBuildingTypeEnum PVal );
__declspec(implementation_key(3616)) enum ksLengthBuildingTypeEnum ISheetMetalBend::GetLengthBuildingType1 ( );
__declspec(implementation_key(3617)) void ISheetMetalBend::PutLengthType1 ( enum ksBendLengthTypeEnum PVal );
__declspec(implementation_key(3618)) enum ksBendLengthTypeEnum ISheetMetalBend::GetLengthType1 ( );
__declspec(implementation_key(3619)) void ISheetMetalBend::PutLengthObject2 ( struct IModelObject * PVal );
__declspec(implementation_key(3620)) IModelObjectPtr ISheetMetalBend::GetLengthObject2 ( );
__declspec(implementation_key(3621)) void ISheetMetalBend::PutOffsetFromLengthObject2 ( double PVal );
__declspec(implementation_key(3622)) double ISheetMetalBend::GetOffsetFromLengthObject2 ( );
__declspec(implementation_key(3623)) void ISheetMetalBend::PutOffsetDirection2 ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(3624)) ksDirectionTypeEnum ISheetMetalBend::GetOffsetDirection2 ( );
__declspec(implementation_key(3625)) void ISheetMetalBend::PutLengthBuildingType2 ( enum ksLengthBuildingTypeEnum PVal );
__declspec(implementation_key(3626)) enum ksLengthBuildingTypeEnum ISheetMetalBend::GetLengthBuildingType2 ( );
__declspec(implementation_key(3627)) void ISheetMetalBend::PutLengthType2 ( enum ksBendLengthTypeEnum PVal );
__declspec(implementation_key(3628)) enum ksBendLengthTypeEnum ISheetMetalBend::GetLengthType2 ( );
__declspec(implementation_key(3629)) void ISheetMetalBend::PutBendObjects ( const _variant_t & Result );
__declspec(implementation_key(3630)) _variant_t ISheetMetalBend::GetBendObjects ( );
__declspec(implementation_key(3631)) ISheetMetalBendPtr ISheetMetalBends::GetSheetMetalBend ( const _variant_t & Index );
__declspec(implementation_key(3632)) ISheetMetalBendPtr ISheetMetalBends::Add ( );
__declspec(implementation_key(3633)) void ISheetMetalLineBend::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3634)) VARIANT_BOOL ISheetMetalLineBend::GetDirection ( );
__declspec(implementation_key(3635)) void ISheetMetalLineBend::PutBendLeftSideFixed ( VARIANT_BOOL PVal );
__declspec(implementation_key(3636)) VARIANT_BOOL ISheetMetalLineBend::GetBendLeftSideFixed ( );
__declspec(implementation_key(3637)) void ISheetMetalLineBend::PutAngleType ( VARIANT_BOOL PVal );
__declspec(implementation_key(3638)) VARIANT_BOOL ISheetMetalLineBend::GetAngleType ( );
__declspec(implementation_key(3639)) void ISheetMetalLineBend::PutAngle ( double PVal );
__declspec(implementation_key(3640)) double ISheetMetalLineBend::GetAngle ( );
__declspec(implementation_key(3641)) void ISheetMetalLineBend::PutBendType ( enum ksBendTypeEnum PVal );
__declspec(implementation_key(3642)) enum ksBendTypeEnum ISheetMetalLineBend::GetBendType ( );
__declspec(implementation_key(3643)) void ISheetMetalLineBend::PutStraighten ( VARIANT_BOOL PVal );
__declspec(implementation_key(3644)) VARIANT_BOOL ISheetMetalLineBend::GetStraighten ( );
__declspec(implementation_key(3645)) void ISheetMetalLineBend::PutDismissalAngleType ( enum ksBendAngleReleaseTypeEnum PVal );
__declspec(implementation_key(3646)) enum ksBendAngleReleaseTypeEnum ISheetMetalLineBend::GetDismissalAngleType ( );
__declspec(implementation_key(3647)) void ISheetMetalLineBend::PutInternalRadius ( VARIANT_BOOL PVal );
__declspec(implementation_key(3648)) VARIANT_BOOL ISheetMetalLineBend::GetInternalRadius ( );
__declspec(implementation_key(3649)) void ISheetMetalLineBend::PutRadius ( double PVal );
__declspec(implementation_key(3650)) double ISheetMetalLineBend::GetRadius ( );
__declspec(implementation_key(3651)) void ISheetMetalLineBend::PutUnfoldType ( enum ksUnfoldTypeEnum PVal );
__declspec(implementation_key(3652)) enum ksUnfoldTypeEnum ISheetMetalLineBend::GetUnfoldType ( );
__declspec(implementation_key(3653)) void ISheetMetalLineBend::PutBendCoefficient ( double PVal );
__declspec(implementation_key(3654)) double ISheetMetalLineBend::GetBendCoefficient ( );
__declspec(implementation_key(3655)) void ISheetMetalLineBend::PutBendValue ( double PVal );
__declspec(implementation_key(3656)) double ISheetMetalLineBend::GetBendValue ( );
__declspec(implementation_key(3657)) void ISheetMetalLineBend::PutBendReduction ( double PVal );
__declspec(implementation_key(3658)) double ISheetMetalLineBend::GetBendReduction ( );
__declspec(implementation_key(3659)) _bstr_t ISheetMetalLineBend::GetBendTablePath ( );
__declspec(implementation_key(3660)) void ISheetMetalLineBend::PutFaces ( const _variant_t & Result );
__declspec(implementation_key(3661)) _variant_t ISheetMetalLineBend::GetFaces ( );
__declspec(implementation_key(3662)) void ISheetMetalLineBend::PutLine ( struct IModelObject * Result );
__declspec(implementation_key(3663)) IModelObjectPtr ISheetMetalLineBend::GetLine ( );
__declspec(implementation_key(3664)) ISheetMetalLineBendPtr ISheetMetalLineBends::GetSheetMetalLineBend ( const _variant_t & Index );
__declspec(implementation_key(3665)) ISheetMetalLineBendPtr ISheetMetalLineBends::Add ( );
__declspec(implementation_key(3666)) void ISheetMetalSketchBend::PutStraighten ( VARIANT_BOOL PVal );
__declspec(implementation_key(3667)) VARIANT_BOOL ISheetMetalSketchBend::GetStraighten ( );
__declspec(implementation_key(3668)) void ISheetMetalSketchBend::PutSketch ( struct IModelObject * PVal );
__declspec(implementation_key(3669)) IModelObjectPtr ISheetMetalSketchBend::GetSketch ( );
__declspec(implementation_key(3670)) _variant_t ISheetMetalSketchBend::GetEdges ( );
__declspec(implementation_key(3671)) void ISheetMetalSketchBend::PutEdges ( const _variant_t & PVal );
__declspec(implementation_key(3672)) enum ksSketchBendBuildingTypeEnum ISheetMetalSketchBend::GetBuildingType ( );
__declspec(implementation_key(3673)) void ISheetMetalSketchBend::PutBuildingType ( enum ksSketchBendBuildingTypeEnum PVal );
__declspec(implementation_key(3674)) void ISheetMetalSketchBend::PutInternalRadius ( VARIANT_BOOL PVal );
__declspec(implementation_key(3675)) VARIANT_BOOL ISheetMetalSketchBend::GetInternalRadius ( );
__declspec(implementation_key(3676)) void ISheetMetalSketchBend::PutRadius ( double PVal );
__declspec(implementation_key(3677)) double ISheetMetalSketchBend::GetRadius ( );
__declspec(implementation_key(3678)) void ISheetMetalSketchBend::PutDirection ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(3679)) ksDirectionTypeEnum ISheetMetalSketchBend::GetDirection ( );
__declspec(implementation_key(3680)) void ISheetMetalSketchBend::PutWidth1 ( double PVal );
__declspec(implementation_key(3681)) double ISheetMetalSketchBend::GetWidth1 ( );
__declspec(implementation_key(3682)) void ISheetMetalSketchBend::PutWidth2 ( double PVal );
__declspec(implementation_key(3683)) double ISheetMetalSketchBend::GetWidth2 ( );
__declspec(implementation_key(3684)) void ISheetMetalSketchBend::PutUnfoldType ( enum ksUnfoldTypeEnum PVal );
__declspec(implementation_key(3685)) enum ksUnfoldTypeEnum ISheetMetalSketchBend::GetUnfoldType ( );
__declspec(implementation_key(3686)) void ISheetMetalSketchBend::PutBendCoefficient ( double PVal );
__declspec(implementation_key(3687)) double ISheetMetalSketchBend::GetBendCoefficient ( );
__declspec(implementation_key(3688)) void ISheetMetalSketchBend::PutBendValue ( double PVal );
__declspec(implementation_key(3689)) double ISheetMetalSketchBend::GetBendValue ( );
__declspec(implementation_key(3690)) void ISheetMetalSketchBend::PutBendReduction ( double PVal );
__declspec(implementation_key(3691)) double ISheetMetalSketchBend::GetBendReduction ( );
__declspec(implementation_key(3692)) _bstr_t ISheetMetalSketchBend::GetBendTablePath ( );
__declspec(implementation_key(3693)) void ISheetMetalSketchBend::PutWithoutAngleRelease ( VARIANT_BOOL PVal );
__declspec(implementation_key(3694)) VARIANT_BOOL ISheetMetalSketchBend::GetWithoutAngleRelease ( );
__declspec(implementation_key(3695)) void ISheetMetalSketchBend::PutWithoutBendRelease ( VARIANT_BOOL PVal );
__declspec(implementation_key(3696)) VARIANT_BOOL ISheetMetalSketchBend::GetWithoutBendRelease ( );
__declspec(implementation_key(3697)) void ISheetMetalSketchBend::PutDismissalWithWidth ( VARIANT_BOOL PVal );
__declspec(implementation_key(3698)) VARIANT_BOOL ISheetMetalSketchBend::GetDismissalWithWidth ( );
__declspec(implementation_key(3699)) void ISheetMetalSketchBend::PutBendRelease ( enum ksBendReleaseTypeEnum PVal );
__declspec(implementation_key(3700)) enum ksBendReleaseTypeEnum ISheetMetalSketchBend::GetBendRelease ( );
__declspec(implementation_key(3701)) void ISheetMetalSketchBend::PutDismissalWidth ( double PVal );
__declspec(implementation_key(3702)) double ISheetMetalSketchBend::GetDismissalWidth ( );
__declspec(implementation_key(3703)) void ISheetMetalSketchBend::PutDismissalDepth ( double PVal );
__declspec(implementation_key(3704)) double ISheetMetalSketchBend::GetDismissalDepth ( );
__declspec(implementation_key(3705)) void ISheetMetalSketchBend::PutDismissalAngleType ( enum ksBendAngleReleaseTypeEnum PVal );
__declspec(implementation_key(3706)) enum ksBendAngleReleaseTypeEnum ISheetMetalSketchBend::GetDismissalAngleType ( );
__declspec(implementation_key(3707)) void ISheetMetalSketchBend::PutClosingEnable ( enum ksClosingTypeEnum Type, VARIANT_BOOL PVal );
__declspec(implementation_key(3708)) VARIANT_BOOL ISheetMetalSketchBend::GetClosingEnable ( enum ksClosingTypeEnum Type );
__declspec(implementation_key(3709)) enum ksClosingClosedTypeEnum ISheetMetalSketchBend::GetClosingClosedType ( enum ksClosingTypeEnum Type );
__declspec(implementation_key(3710)) void ISheetMetalSketchBend::PutClosingClosedType ( enum ksClosingTypeEnum Type, enum ksClosingClosedTypeEnum PVal );
__declspec(implementation_key(3711)) enum ksClosingCorneringEnum ISheetMetalSketchBend::GetClosingCorneringType ( enum ksClosingTypeEnum Type );
__declspec(implementation_key(3712)) void ISheetMetalSketchBend::PutClosingCorneringType ( enum ksClosingTypeEnum Type, enum ksClosingCorneringEnum PVal );
__declspec(implementation_key(3713)) double ISheetMetalSketchBend::GetClosingAngle ( enum ksClosingTypeEnum Type );
__declspec(implementation_key(3714)) void ISheetMetalSketchBend::PutClosingAngle ( enum ksClosingTypeEnum Type, double PVal );
__declspec(implementation_key(3715)) double ISheetMetalSketchBend::GetClosingGapValue ( enum ksClosingTypeEnum Type );
__declspec(implementation_key(3716)) void ISheetMetalSketchBend::PutClosingGapValue ( enum ksClosingTypeEnum Type, double PVal );
__declspec(implementation_key(3717)) enum ksClosingHolePlacementEnum ISheetMetalSketchBend::GetClosingHolePlacement ( );
__declspec(implementation_key(3718)) void ISheetMetalSketchBend::PutClosingHolePlacement ( enum ksClosingHolePlacementEnum PVal );
__declspec(implementation_key(3719)) double ISheetMetalSketchBend::GetClosingHoleDiameter ( );
__declspec(implementation_key(3720)) void ISheetMetalSketchBend::PutClosingHoleDiameter ( double PVal );
__declspec(implementation_key(3721)) double ISheetMetalSketchBend::GetClosingHoleOffset ( );
__declspec(implementation_key(3722)) void ISheetMetalSketchBend::PutClosingHoleOffset ( double PVal );
__declspec(implementation_key(3723)) ISheetMetalSketchBendPtr ISheetMetalSketchBends::GetSheetMetalSketchBend ( const _variant_t & Index );
__declspec(implementation_key(3724)) ISheetMetalSketchBendPtr ISheetMetalSketchBends::Add ( );
__declspec(implementation_key(3725)) _variant_t ISheetMetalClosedCorner::GetCornersObjects ( );
__declspec(implementation_key(3726)) void ISheetMetalClosedCorner::PutCornersObjects ( const _variant_t & PVal );
__declspec(implementation_key(3727)) long ISheetMetalClosedCorner::GetCornersCount ( );
__declspec(implementation_key(3728)) IModelObjectPtr ISheetMetalClosedCorner::GetCornerObject ( long Index );
__declspec(implementation_key(3729)) VARIANT_BOOL ISheetMetalClosedCorner::AddCornerObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3730)) VARIANT_BOOL ISheetMetalClosedCorner::DeleteCornerObject ( long Index );
__declspec(implementation_key(3731)) VARIANT_BOOL ISheetMetalClosedCorner::ClearCornerObjects ( );
__declspec(implementation_key(3732)) long ISheetMetalClosedCorner::GetDefailtParametersIndex ( );
__declspec(implementation_key(3733)) void ISheetMetalClosedCorner::PutDefailtParametersIndex ( long PVal );
__declspec(implementation_key(3734)) enum ksClosingClosedTypeEnum ISheetMetalClosedCorner::GetClosingClosedType ( long Index );
__declspec(implementation_key(3735)) void ISheetMetalClosedCorner::PutClosingClosedType ( long Index, enum ksClosingClosedTypeEnum PVal );
__declspec(implementation_key(3736)) enum ksClosingCorneringEnum ISheetMetalClosedCorner::GetClosingCorneringType ( long Index );
__declspec(implementation_key(3737)) void ISheetMetalClosedCorner::PutClosingCorneringType ( long Index, enum ksClosingCorneringEnum PVal );
__declspec(implementation_key(3738)) double ISheetMetalClosedCorner::GetClosingGapValue ( long Index );
__declspec(implementation_key(3739)) void ISheetMetalClosedCorner::PutClosingGapValue ( long Index, double PVal );
__declspec(implementation_key(3740)) enum ksClosingHolePlacementEnum ISheetMetalClosedCorner::GetClosingHolePlacement ( long Index );
__declspec(implementation_key(3741)) void ISheetMetalClosedCorner::PutClosingHolePlacement ( long Index, enum ksClosingHolePlacementEnum PVal );
__declspec(implementation_key(3742)) double ISheetMetalClosedCorner::GetClosingHoleDiameter ( long Index );
__declspec(implementation_key(3743)) void ISheetMetalClosedCorner::PutClosingHoleDiameter ( long Index, double PVal );
__declspec(implementation_key(3744)) double ISheetMetalClosedCorner::GetClosingHoleOffset ( long Index );
__declspec(implementation_key(3745)) void ISheetMetalClosedCorner::PutClosingHoleOffset ( long Index, double PVal );
__declspec(implementation_key(3746)) VARIANT_BOOL ISheetMetalClosedCorner::GetClosingContinue ( long Index );
__declspec(implementation_key(3747)) void ISheetMetalClosedCorner::PutClosingContinue ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(3748)) VARIANT_BOOL ISheetMetalClosedCorner::GetClosingDirection ( long Index );
__declspec(implementation_key(3749)) void ISheetMetalClosedCorner::PutClosingDirection ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(3750)) ISheetMetalClosedCornerPtr ISheetMetalClosedCorners::GetSheetMetalClosedCorner ( const _variant_t & Index );
__declspec(implementation_key(3751)) ISheetMetalClosedCornerPtr ISheetMetalClosedCorners::Add ( );
__declspec(implementation_key(3752)) void ISheetMetalPlate::PutSketch ( struct IModelObject * PVal );
__declspec(implementation_key(3753)) IModelObjectPtr ISheetMetalPlate::GetSketch ( );
__declspec(implementation_key(3754)) void ISheetMetalPlate::PutThicknessObject ( struct IModelObject * PVal );
__declspec(implementation_key(3755)) IModelObjectPtr ISheetMetalPlate::GetThicknessObject ( );
__declspec(implementation_key(3756)) void ISheetMetalPlate::PutIsUserThickness ( VARIANT_BOOL PVal );
__declspec(implementation_key(3757)) VARIANT_BOOL ISheetMetalPlate::GetIsUserThickness ( );
__declspec(implementation_key(3758)) void ISheetMetalPlate::PutThickness ( double PVal );
__declspec(implementation_key(3759)) double ISheetMetalPlate::GetThickness ( );
__declspec(implementation_key(3760)) ISheetMetalPlatePtr ISheetMetalPlates::GetSheetMetalPlate ( const _variant_t & Index );
__declspec(implementation_key(3761)) ISheetMetalPlatePtr ISheetMetalPlates::Add ( );
__declspec(implementation_key(3762)) void ISheetMetalBendedStraighten::PutFixedFace ( struct IModelObject * PVal );
__declspec(implementation_key(3763)) IModelObjectPtr ISheetMetalBendedStraighten::GetFixedFace ( );
__declspec(implementation_key(3764)) _variant_t ISheetMetalBendedStraighten::GetBendObjects ( );
__declspec(implementation_key(3765)) void ISheetMetalBendedStraighten::PutBendObjects ( const _variant_t & PVal );
__declspec(implementation_key(3766)) VARIANT_BOOL ISheetMetalBendedStraighten::GetFoldLinesEnabled ( );
__declspec(implementation_key(3767)) void ISheetMetalBendedStraighten::PutFoldLinesEnabled ( VARIANT_BOOL PVal );
__declspec(implementation_key(3768)) enum ksCurveStyleEnum ISheetMetalBendedStraighten::GetFoldLinesStyle ( );
__declspec(implementation_key(3769)) void ISheetMetalBendedStraighten::PutFoldLinesStyle ( enum ksCurveStyleEnum Style );
__declspec(implementation_key(3770)) ISheetMetalBendedStraightenPtr ISheetMetalBendedStraightens::GetSheetMetalBendedStraighten ( const _variant_t & Index );
__declspec(implementation_key(3771)) ISheetMetalBendedStraightenPtr ISheetMetalBendedStraightens::Add ( ksObj3dTypeEnum Type );
__declspec(implementation_key(3772)) void ISheetMetalBendUnfoldParameters::PutUnfoldPlane ( struct IModelObject * PVal );
__declspec(implementation_key(3773)) IModelObjectPtr ISheetMetalBendUnfoldParameters::GetUnfoldPlane ( );
__declspec(implementation_key(3774)) void ISheetMetalBendUnfoldParameters::PutFixedFaces ( const _variant_t & PVal );
__declspec(implementation_key(3775)) _variant_t ISheetMetalBendUnfoldParameters::GetFixedFaces ( );
__declspec(implementation_key(3776)) _variant_t ISheetMetalBendUnfoldParameters::GetExcludedBendObjects ( );
__declspec(implementation_key(3777)) void ISheetMetalBendUnfoldParameters::PutExcludedBendObjects ( const _variant_t & PVal );
__declspec(implementation_key(3778)) void ISheetMetalBendUnfoldParameters::PutUnfold ( VARIANT_BOOL PVal );
__declspec(implementation_key(3779)) VARIANT_BOOL ISheetMetalBendUnfoldParameters::GetUnfold ( );
__declspec(implementation_key(3780)) VARIANT_BOOL ISheetMetalBendUnfoldParameters::GetIsCreated ( );
__declspec(implementation_key(3781)) VARIANT_BOOL ISheetMetalBendUnfoldParameters::UpdateParam ( );
__declspec(implementation_key(3782)) VARIANT_BOOL ISheetMetalBendUnfoldParameters::DeleteParam ( );
__declspec(implementation_key(3783)) void ISheetMetalPressForming::PutSketch ( struct IModelObject * PVal );
__declspec(implementation_key(3784)) IModelObjectPtr ISheetMetalPressForming::GetSketch ( );
__declspec(implementation_key(3785)) void ISheetMetalPressForming::PutHeightType ( enum ksPressFormingHeightTypeEnum PVal );
__declspec(implementation_key(3786)) enum ksPressFormingHeightTypeEnum ISheetMetalPressForming::GetHeightType ( );
__declspec(implementation_key(3787)) void ISheetMetalPressForming::PutHeight ( double PVal );
__declspec(implementation_key(3788)) double ISheetMetalPressForming::GetHeight ( );
__declspec(implementation_key(3789)) void ISheetMetalPressForming::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3790)) VARIANT_BOOL ISheetMetalPressForming::GetDirection ( );
__declspec(implementation_key(3791)) void ISheetMetalPressForming::PutThicknessDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3792)) VARIANT_BOOL ISheetMetalPressForming::GetThicknessDirection ( );
__declspec(implementation_key(3793)) void ISheetMetalPressForming::PutSide ( VARIANT_BOOL PVal );
__declspec(implementation_key(3794)) VARIANT_BOOL ISheetMetalPressForming::GetSide ( );
__declspec(implementation_key(3795)) void ISheetMetalPressForming::PutAngle ( double PVal );
__declspec(implementation_key(3796)) double ISheetMetalPressForming::GetAngle ( );
__declspec(implementation_key(3797)) void ISheetMetalPressForming::PutRoundEdges ( VARIANT_BOOL PVal );
__declspec(implementation_key(3798)) VARIANT_BOOL ISheetMetalPressForming::GetRoundEdges ( );
__declspec(implementation_key(3799)) void ISheetMetalPressForming::PutRadius1 ( double PVal );
__declspec(implementation_key(3800)) double ISheetMetalPressForming::GetRadius1 ( );
__declspec(implementation_key(3801)) void ISheetMetalPressForming::PutRound ( VARIANT_BOOL PVal );
__declspec(implementation_key(3802)) VARIANT_BOOL ISheetMetalPressForming::GetRound ( );
__declspec(implementation_key(3803)) void ISheetMetalPressForming::PutRadius2 ( double PVal );
__declspec(implementation_key(3804)) double ISheetMetalPressForming::GetRadius2 ( );
__declspec(implementation_key(3805)) void ISheetMetalPressForming::PutRoundBottom ( VARIANT_BOOL PVal );
__declspec(implementation_key(3806)) VARIANT_BOOL ISheetMetalPressForming::GetRoundBottom ( );
__declspec(implementation_key(3807)) void ISheetMetalPressForming::PutRadius3 ( double PVal );
__declspec(implementation_key(3808)) double ISheetMetalPressForming::GetRadius3 ( );
__declspec(implementation_key(3809)) ISheetMetalPressFormingPtr ISheetMetalPressFormings::GetSheetMetalPressForming ( const _variant_t & Index );
__declspec(implementation_key(3810)) ISheetMetalPressFormingPtr ISheetMetalPressFormings::Add ( ksObj3dTypeEnum Type );
__declspec(implementation_key(3811)) void ISheetMetalShoulder::PutSketch ( struct IModelObject * PVal );
__declspec(implementation_key(3812)) IModelObjectPtr ISheetMetalShoulder::GetSketch ( );
__declspec(implementation_key(3813)) void ISheetMetalShoulder::PutShoulderType ( enum ksShoulderTypeEnum PVal );
__declspec(implementation_key(3814)) enum ksShoulderTypeEnum ISheetMetalShoulder::GetShoulderType ( );
__declspec(implementation_key(3815)) void ISheetMetalShoulder::PutCutingType ( enum ksShoulderCutingTypeEnum PVal );
__declspec(implementation_key(3816)) enum ksShoulderCutingTypeEnum ISheetMetalShoulder::GetCutingType ( );
__declspec(implementation_key(3817)) void ISheetMetalShoulder::PutBuildingType ( enum ksShoulderBuildingTypeEnum PVal );
__declspec(implementation_key(3818)) enum ksShoulderBuildingTypeEnum ISheetMetalShoulder::GetBuildingType ( );
__declspec(implementation_key(3819)) void ISheetMetalShoulder::PutHeight ( double PVal );
__declspec(implementation_key(3820)) double ISheetMetalShoulder::GetHeight ( );
__declspec(implementation_key(3821)) void ISheetMetalShoulder::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3822)) VARIANT_BOOL ISheetMetalShoulder::GetDirection ( );
__declspec(implementation_key(3823)) void ISheetMetalShoulder::PutWidth1 ( double PVal );
__declspec(implementation_key(3824)) double ISheetMetalShoulder::GetWidth1 ( );
__declspec(implementation_key(3825)) void ISheetMetalShoulder::PutWidth2 ( double PVal );
__declspec(implementation_key(3826)) double ISheetMetalShoulder::GetWidth2 ( );
__declspec(implementation_key(3827)) void ISheetMetalShoulder::PutRadius1 ( double PVal );
__declspec(implementation_key(3828)) double ISheetMetalShoulder::GetRadius1 ( );
__declspec(implementation_key(3829)) void ISheetMetalShoulder::PutRound ( VARIANT_BOOL PVal );
__declspec(implementation_key(3830)) VARIANT_BOOL ISheetMetalShoulder::GetRound ( );
__declspec(implementation_key(3831)) void ISheetMetalShoulder::PutRadius2 ( double PVal );
__declspec(implementation_key(3832)) double ISheetMetalShoulder::GetRadius2 ( );
__declspec(implementation_key(3833)) void ISheetMetalShoulder::PutGapValue ( double PVal );
__declspec(implementation_key(3834)) double ISheetMetalShoulder::GetGapValue ( );
__declspec(implementation_key(3835)) ISheetMetalShoulderPtr ISheetMetalShoulders::GetSheetMetalShoulder ( const _variant_t & Index );
__declspec(implementation_key(3836)) ISheetMetalShoulderPtr ISheetMetalShoulders::Add ( );
__declspec(implementation_key(3837)) void ISheetMetalJalousie::PutSketch ( struct IModelObject * PVal );
__declspec(implementation_key(3838)) IModelObjectPtr ISheetMetalJalousie::GetSketch ( );
__declspec(implementation_key(3839)) void ISheetMetalJalousie::PutBuildingType ( enum ksJalousieBuildingTypeEnum PVal );
__declspec(implementation_key(3840)) enum ksJalousieBuildingTypeEnum ISheetMetalJalousie::GetBuildingType ( );
__declspec(implementation_key(3841)) void ISheetMetalJalousie::PutFormEnd ( enum ksJalousieFormEndEnum PVal );
__declspec(implementation_key(3842)) enum ksJalousieFormEndEnum ISheetMetalJalousie::GetFormEnd ( );
__declspec(implementation_key(3843)) void ISheetMetalJalousie::PutHeightType ( enum ksJalousieHeightTypeEnum PVal );
__declspec(implementation_key(3844)) enum ksJalousieHeightTypeEnum ISheetMetalJalousie::GetHeightType ( );
__declspec(implementation_key(3845)) void ISheetMetalJalousie::PutHeight ( double PVal );
__declspec(implementation_key(3846)) double ISheetMetalJalousie::GetHeight ( );
__declspec(implementation_key(3847)) void ISheetMetalJalousie::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3848)) VARIANT_BOOL ISheetMetalJalousie::GetDirection ( );
__declspec(implementation_key(3849)) void ISheetMetalJalousie::PutWidth ( double PVal );
__declspec(implementation_key(3850)) double ISheetMetalJalousie::GetWidth ( );
__declspec(implementation_key(3851)) void ISheetMetalJalousie::PutSide ( VARIANT_BOOL PVal );
__declspec(implementation_key(3852)) VARIANT_BOOL ISheetMetalJalousie::GetSide ( );
__declspec(implementation_key(3853)) void ISheetMetalJalousie::PutRound ( VARIANT_BOOL PVal );
__declspec(implementation_key(3854)) VARIANT_BOOL ISheetMetalJalousie::GetRound ( );
__declspec(implementation_key(3855)) void ISheetMetalJalousie::PutRadius ( double PVal );
__declspec(implementation_key(3856)) double ISheetMetalJalousie::GetRadius ( );
__declspec(implementation_key(3857)) ISheetMetalJalousiePtr ISheetMetalJalousies::GetSheetMetalJalousie ( const _variant_t & Index );
__declspec(implementation_key(3858)) ISheetMetalJalousiePtr ISheetMetalJalousies::Add ( );
__declspec(implementation_key(3859)) IModelObjectPtr ISheetMetalRib::GetBendObject ( );
__declspec(implementation_key(3860)) IModelObjectPtr ISheetMetalRib::GetBendFace ( );
__declspec(implementation_key(3861)) IModelObjectPtr ISheetMetalRib::GetBendEdge ( );
__declspec(implementation_key(3862)) VARIANT_BOOL ISheetMetalRib::InitBendObjects ( struct IModelObject * BendObject, struct IModelObject * BendFace, struct IModelObject * BendEdge );
__declspec(implementation_key(3863)) VARIANT_BOOL ISheetMetalRib::AutoInitBendObjects ( struct IModelObject * InitObject );
__declspec(implementation_key(3864)) VARIANT_BOOL ISheetMetalRib::CalculateOptimalParams ( );
__declspec(implementation_key(3865)) void ISheetMetalRib::PutOffsetType ( enum ksPoint3DCurveParamTypeEnum PVal );
__declspec(implementation_key(3866)) enum ksPoint3DCurveParamTypeEnum ISheetMetalRib::GetOffsetType ( );
__declspec(implementation_key(3867)) void ISheetMetalRib::PutOffset ( double PVal );
__declspec(implementation_key(3868)) double ISheetMetalRib::GetOffset ( );
__declspec(implementation_key(3869)) void ISheetMetalRib::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3870)) VARIANT_BOOL ISheetMetalRib::GetDirection ( );
__declspec(implementation_key(3871)) void ISheetMetalRib::PutBuildingType ( enum ksSHRibBuildingTypeEnum PVal );
__declspec(implementation_key(3872)) enum ksSHRibBuildingTypeEnum ISheetMetalRib::GetBuildingType ( );
__declspec(implementation_key(3873)) void ISheetMetalRib::PutCutingType ( enum ksSHRibCutingTypeEnum PVal );
__declspec(implementation_key(3874)) enum ksSHRibCutingTypeEnum ISheetMetalRib::GetCutingType ( );
__declspec(implementation_key(3875)) void ISheetMetalRib::PutLenght1 ( double PVal );
__declspec(implementation_key(3876)) double ISheetMetalRib::GetLenght1 ( );
__declspec(implementation_key(3877)) void ISheetMetalRib::PutLenght2 ( double PVal );
__declspec(implementation_key(3878)) double ISheetMetalRib::GetLenght2 ( );
__declspec(implementation_key(3879)) void ISheetMetalRib::PutAngle1 ( double PVal );
__declspec(implementation_key(3880)) double ISheetMetalRib::GetAngle1 ( );
__declspec(implementation_key(3881)) void ISheetMetalRib::PutRadius1 ( double PVal );
__declspec(implementation_key(3882)) double ISheetMetalRib::GetRadius1 ( );
__declspec(implementation_key(3883)) void ISheetMetalRib::PutAngle2 ( double PVal );
__declspec(implementation_key(3884)) double ISheetMetalRib::GetAngle2 ( );
__declspec(implementation_key(3885)) void ISheetMetalRib::PutWidth ( double PVal );
__declspec(implementation_key(3886)) double ISheetMetalRib::GetWidth ( );
__declspec(implementation_key(3887)) void ISheetMetalRib::PutRound ( VARIANT_BOOL PVal );
__declspec(implementation_key(3888)) VARIANT_BOOL ISheetMetalRib::GetRound ( );
__declspec(implementation_key(3889)) void ISheetMetalRib::PutRadius2 ( double PVal );
__declspec(implementation_key(3890)) double ISheetMetalRib::GetRadius2 ( );
__declspec(implementation_key(3891)) void ISheetMetalRib::PutArchCreate ( VARIANT_BOOL PVal );
__declspec(implementation_key(3892)) VARIANT_BOOL ISheetMetalRib::GetArchCreate ( );
__declspec(implementation_key(3893)) void ISheetMetalRib::PutArchCoefficient ( double PVal );
__declspec(implementation_key(3894)) double ISheetMetalRib::GetArchCoefficient ( );
__declspec(implementation_key(3895)) void ISheetMetalRib::PutArchRadius ( double PVal );
__declspec(implementation_key(3896)) double ISheetMetalRib::GetArchRadius ( );
__declspec(implementation_key(3897)) void ISheetMetalRib::PutArchMeasure ( enum ksArchMeasureEnum PVal );
__declspec(implementation_key(3898)) enum ksArchMeasureEnum ISheetMetalRib::GetArchMeasure ( );
__declspec(implementation_key(3899)) void ISheetMetalRib::PutArchLength ( double PVal );
__declspec(implementation_key(3900)) double ISheetMetalRib::GetArchLength ( );
__declspec(implementation_key(3901)) ISheetMetalRibPtr ISheetMetalRibs::GetSheetMetalRib ( const _variant_t & Index );
__declspec(implementation_key(3902)) ISheetMetalRibPtr ISheetMetalRibs::Add ( );
__declspec(implementation_key(3903)) void ISheetMetalPunch::PutFace ( struct IModelObject * PVal );
__declspec(implementation_key(3904)) IModelObjectPtr ISheetMetalPunch::GetFace ( );
__declspec(implementation_key(3905)) void ISheetMetalPunch::PutBody ( struct IBody7 * PVal );
__declspec(implementation_key(3906)) IBody7Ptr ISheetMetalPunch::GetBody ( );
__declspec(implementation_key(3907)) void ISheetMetalPunch::PutBodyFaces ( const _variant_t & PVal );
__declspec(implementation_key(3908)) _variant_t ISheetMetalPunch::GetBodyFaces ( );
__declspec(implementation_key(3909)) void ISheetMetalPunch::PutBuildingType ( enum ksSheetMetalPunchBuildingTypeEnum PVal );
__declspec(implementation_key(3910)) enum ksSheetMetalPunchBuildingTypeEnum ISheetMetalPunch::GetBuildingType ( );
__declspec(implementation_key(3911)) void ISheetMetalPunch::PutDeleteBody ( VARIANT_BOOL PVal );
__declspec(implementation_key(3912)) VARIANT_BOOL ISheetMetalPunch::GetDeleteBody ( );
__declspec(implementation_key(3913)) void ISheetMetalPunch::PutRoundOffEdges ( VARIANT_BOOL PVal );
__declspec(implementation_key(3914)) VARIANT_BOOL ISheetMetalPunch::GetRoundOffEdges ( );
__declspec(implementation_key(3915)) void ISheetMetalPunch::PutRoundEdgesRadius ( double PVal );
__declspec(implementation_key(3916)) double ISheetMetalPunch::GetRoundEdgesRadius ( );
__declspec(implementation_key(3917)) void ISheetMetalPunch::PutRound ( VARIANT_BOOL PVal );
__declspec(implementation_key(3918)) VARIANT_BOOL ISheetMetalPunch::GetRound ( );
__declspec(implementation_key(3919)) void ISheetMetalPunch::PutRadius2 ( double PVal );
__declspec(implementation_key(3920)) double ISheetMetalPunch::GetRadius2 ( );
__declspec(implementation_key(3921)) void ISheetMetalPunch::PutThicknessType ( enum ksSheetMetalPunchThicknessTypeEnum PVal );
__declspec(implementation_key(3922)) enum ksSheetMetalPunchThicknessTypeEnum ISheetMetalPunch::GetThicknessType ( );
__declspec(implementation_key(3923)) void ISheetMetalPunch::PutThickness ( double PVal );
__declspec(implementation_key(3924)) double ISheetMetalPunch::GetThickness ( );
__declspec(implementation_key(3925)) ISheetMetalPunchPtr ISheetMetalPunchs::GetSheetMetalPunch ( const _variant_t & Index );
__declspec(implementation_key(3926)) ISheetMetalPunchPtr ISheetMetalPunchs::Add ( );
__declspec(implementation_key(3927)) void IPoint3DParamDisplace::PutDX ( double PVal );
__declspec(implementation_key(3928)) double IPoint3DParamDisplace::GetDX ( );
__declspec(implementation_key(3929)) void IPoint3DParamDisplace::PutDY ( double PVal );
__declspec(implementation_key(3930)) double IPoint3DParamDisplace::GetDY ( );
__declspec(implementation_key(3931)) void IPoint3DParamDisplace::PutDZ ( double PVal );
__declspec(implementation_key(3932)) double IPoint3DParamDisplace::GetDZ ( );
__declspec(implementation_key(3933)) VARIANT_BOOL IPoint3DParamDisplace::SetAssociationVertex ( struct IModelObject * NewVal );
__declspec(implementation_key(3934)) IModelObjectPtr IPoint3DParamDisplace::GetAssociationVertex ( );
__declspec(implementation_key(3935)) VARIANT_BOOL IPoint3DParamDisplace::SetGuidingObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3936)) IModelObjectPtr IPoint3DParamDisplace::GetGuidingObject ( );
__declspec(implementation_key(3937)) void IPoint3DParamDisplace::PutDistance ( double PVal );
__declspec(implementation_key(3938)) double IPoint3DParamDisplace::GetDistance ( );
__declspec(implementation_key(3939)) IVector3DPtr IPoint3DParamDisplace::GetVector3D ( );
__declspec(implementation_key(3940)) VARIANT_BOOL IPoint3DParamIntersect::SetCurveObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3941)) IModelObjectPtr IPoint3DParamIntersect::GetCurveObject ( );
__declspec(implementation_key(3942)) VARIANT_BOOL IPoint3DParamIntersect::SetSurfaceObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3943)) IModelObjectPtr IPoint3DParamIntersect::GetSurfaceObject ( );
__declspec(implementation_key(3944)) _variant_t IPoint3DParamIntersect::GetCartPointArray ( );
__declspec(implementation_key(3945)) void IPoint3DParamIntersect::PutIndex ( long PVal );
__declspec(implementation_key(3946)) long IPoint3DParamIntersect::GetIndex ( );
__declspec(implementation_key(3947)) VARIANT_BOOL IPoint3DParamCenter::SetObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3948)) IModelObjectPtr IPoint3DParamCenter::GetObject ( );
__declspec(implementation_key(3949)) VARIANT_BOOL IPoint3DParamCurve::SetCurveObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3950)) IModelObjectPtr IPoint3DParamCurve::GetCurveObject ( );
__declspec(implementation_key(3951)) void IPoint3DParamCurve::PutOffsetType ( enum ksPoint3DCurveParamTypeEnum PVal );
__declspec(implementation_key(3952)) enum ksPoint3DCurveParamTypeEnum IPoint3DParamCurve::GetOffsetType ( );
__declspec(implementation_key(3953)) void IPoint3DParamCurve::PutOffset ( double PVal );
__declspec(implementation_key(3954)) double IPoint3DParamCurve::GetOffset ( );
__declspec(implementation_key(3955)) void IPoint3DParamCurve::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(3956)) VARIANT_BOOL IPoint3DParamCurve::GetDirection ( );
__declspec(implementation_key(3957)) VARIANT_BOOL IPoint3DParamSurface::SetSurfaceObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3958)) IModelObjectPtr IPoint3DParamSurface::GetSurfaceObject ( );
__declspec(implementation_key(3959)) void IPoint3DParamSurface::PutOffsetType ( enum ksPoint3DSurfaceParamTypeEnum PVal );
__declspec(implementation_key(3960)) enum ksPoint3DSurfaceParamTypeEnum IPoint3DParamSurface::GetOffsetType ( );
__declspec(implementation_key(3961)) void IPoint3DParamSurface::PutOffset1 ( double PVal );
__declspec(implementation_key(3962)) double IPoint3DParamSurface::GetOffset1 ( );
__declspec(implementation_key(3963)) void IPoint3DParamSurface::PutOffset2 ( double PVal );
__declspec(implementation_key(3964)) double IPoint3DParamSurface::GetOffset2 ( );
__declspec(implementation_key(3965)) VARIANT_BOOL IPoint3DParamSurface::SetObject1 ( struct IModelObject * NewVal );
__declspec(implementation_key(3966)) IModelObjectPtr IPoint3DParamSurface::GetObject1 ( );
__declspec(implementation_key(3967)) VARIANT_BOOL IPoint3DParamSurface::SetObject2 ( struct IModelObject * NewVal );
__declspec(implementation_key(3968)) IModelObjectPtr IPoint3DParamSurface::GetObject2 ( );
__declspec(implementation_key(3969)) void IPoint3DParamSurface::PutAllowBoundaries ( VARIANT_BOOL PVal );
__declspec(implementation_key(3970)) VARIANT_BOOL IPoint3DParamSurface::GetAllowBoundaries ( );
__declspec(implementation_key(3971)) VARIANT_BOOL IPoint3DParamProjection::SetAssociationVertex ( struct IModelObject * NewVal );
__declspec(implementation_key(3972)) IModelObjectPtr IPoint3DParamProjection::GetAssociationVertex ( );
__declspec(implementation_key(3973)) VARIANT_BOOL IPoint3DParamProjection::SetSurfaceObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3974)) IModelObjectPtr IPoint3DParamProjection::GetSurfaceObject ( );
__declspec(implementation_key(3975)) VARIANT_BOOL IPoint3DParamProjection::SetGuidingObject ( struct IModelObject * NewVal );
__declspec(implementation_key(3976)) IModelObjectPtr IPoint3DParamProjection::GetGuidingObject ( );
__declspec(implementation_key(3977)) IVector3DPtr IPoint3DParamProjection::GetVector3D ( );
__declspec(implementation_key(3978)) double IBaseLineDimension3D::GetLength ( );
__declspec(implementation_key(3979)) void IBaseLineDimension3D::PutLength ( double PVal );
__declspec(implementation_key(3980)) IModelObjectPtr IBaseLineDimension3D::GetObject1 ( );
__declspec(implementation_key(3981)) void IBaseLineDimension3D::PutObject1 ( struct IModelObject * Object1 );
__declspec(implementation_key(3982)) IModelObjectPtr IBaseLineDimension3D::GetObject2 ( );
__declspec(implementation_key(3983)) void IBaseLineDimension3D::PutObject2 ( struct IModelObject * Object2 );
__declspec(implementation_key(3984)) IBaseLineDimension3DPtr ILineDimensions3D::GetLineDimension3D ( const _variant_t & Index );
__declspec(implementation_key(3985)) IBaseLineDimension3DPtr ILineDimensions3D::Add ( ksObj3dTypeEnum DimType );
__declspec(implementation_key(3986)) IModelObjectPtr IRadialDimension3D::GetObject1 ( );
__declspec(implementation_key(3987)) void IRadialDimension3D::PutObject1 ( struct IModelObject * Object1 );
__declspec(implementation_key(3988)) IModelObjectPtr IRadialDimension3D::GetPlaneObject ( );
__declspec(implementation_key(3989)) void IRadialDimension3D::PutPlaneObject ( struct IModelObject * Object );
__declspec(implementation_key(3990)) VARIANT_BOOL IRadialDimension3D::GetDimensionType ( );
__declspec(implementation_key(3991)) void IRadialDimension3D::PutDimensionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(3992)) double IRadialDimension3D::GetAngle ( );
__declspec(implementation_key(3993)) void IRadialDimension3D::PutAngle ( double PVal );
__declspec(implementation_key(3994)) VARIANT_BOOL IRadialDimension3D::GetSurfacePoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(3995)) VARIANT_BOOL IRadialDimension3D::SetSurfacePoint ( double X, double Y, double Z );
__declspec(implementation_key(3996)) VARIANT_BOOL IRadialDimension3D::GetCenterPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(3997)) VARIANT_BOOL IRadialDimension3D::SetCenterPoint ( double X, double Y, double Z );
__declspec(implementation_key(3998)) IRadialDimension3DPtr IRadialDimensions3D::GetRadialDimension3D ( const _variant_t & Index );
__declspec(implementation_key(3999)) IRadialDimension3DPtr IRadialDimensions3D::Add ( );
__declspec(implementation_key(4000)) IModelObjectPtr IDiametralDimension3D::GetObject1 ( );
__declspec(implementation_key(4001)) void IDiametralDimension3D::PutObject1 ( struct IModelObject * Object1 );
__declspec(implementation_key(4002)) IModelObjectPtr IDiametralDimension3D::GetPlaneObject ( );
__declspec(implementation_key(4003)) void IDiametralDimension3D::PutPlaneObject ( struct IModelObject * Object2 );
__declspec(implementation_key(4004)) VARIANT_BOOL IDiametralDimension3D::GetDimensionType ( );
__declspec(implementation_key(4005)) void IDiametralDimension3D::PutDimensionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(4006)) double IDiametralDimension3D::GetAngle ( );
__declspec(implementation_key(4007)) void IDiametralDimension3D::PutAngle ( double PVal );
__declspec(implementation_key(4008)) VARIANT_BOOL IDiametralDimension3D::GetSurfacePoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4009)) VARIANT_BOOL IDiametralDimension3D::SetSurfacePoint ( double X, double Y, double Z );
__declspec(implementation_key(4010)) VARIANT_BOOL IDiametralDimension3D::GetCenterPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4011)) VARIANT_BOOL IDiametralDimension3D::SetCenterPoint ( double X, double Y, double Z );
__declspec(implementation_key(4012)) IDiametralDimension3DPtr IDiametralDimensions3D::GetDiametralDimension3D ( const _variant_t & Index );
__declspec(implementation_key(4013)) IDiametralDimension3DPtr IDiametralDimensions3D::Add ( );
__declspec(implementation_key(4014)) IModelObjectPtr IAngleDimension3D::GetObject1 ( );
__declspec(implementation_key(4015)) void IAngleDimension3D::PutObject1 ( struct IModelObject * Object1 );
__declspec(implementation_key(4016)) IModelObjectPtr IAngleDimension3D::GetObject2 ( );
__declspec(implementation_key(4017)) void IAngleDimension3D::PutObject2 ( struct IModelObject * Object2 );
__declspec(implementation_key(4018)) double IAngleDimension3D::GetLength ( );
__declspec(implementation_key(4019)) void IAngleDimension3D::PutLength ( double PVal );
__declspec(implementation_key(4020)) enum ksAngleDimTypeEnum IAngleDimension3D::GetDimensionType ( );
__declspec(implementation_key(4021)) void IAngleDimension3D::PutDimensionType ( enum ksAngleDimTypeEnum PVal );
__declspec(implementation_key(4022)) VARIANT_BOOL IAngleDimension3D::Inverse ( );
__declspec(implementation_key(4023)) VARIANT_BOOL IAngleDimension3D::GetCenterPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4024)) VARIANT_BOOL IAngleDimension3D::SetCenterPoint ( double X, double Y, double Z );
__declspec(implementation_key(4025)) IAngleDimension3DPtr IAngleDimensions3D::GetAngleDimension3D ( const _variant_t & Index );
__declspec(implementation_key(4026)) IAngleDimension3DPtr IAngleDimensions3D::Add ( );
__declspec(implementation_key(4027)) ksObj3dTypeEnum IBaseLeader3D::GetBasePlane ( );
__declspec(implementation_key(4028)) void IBaseLeader3D::PutBasePlane ( ksObj3dTypeEnum Val );
__declspec(implementation_key(4029)) IModelObjectPtr IBaseLeader3D::GetPositionObject ( );
__declspec(implementation_key(4030)) void IBaseLeader3D::PutPositionObject ( struct IModelObject * Val );
__declspec(implementation_key(4031)) VARIANT_BOOL IBaseLeader3D::GetPosition ( double * X, double * Y, double * Z );
__declspec(implementation_key(4032)) VARIANT_BOOL IBaseLeader3D::SetPosition ( double X, double Y, double Z );
__declspec(implementation_key(4033)) enum ksArrowEnum IBaseLeader3D::GetArrowType ( );
__declspec(implementation_key(4034)) void IBaseLeader3D::PutArrowType ( enum ksArrowEnum Result );
__declspec(implementation_key(4035)) IBaseLeader3DPtr ILeaders3D::GetLeader3D ( const _variant_t & Index );
__declspec(implementation_key(4036)) IBaseLeader3DPtr ILeaders3D::Add ( ksObj3dTypeEnum DimType );
__declspec(implementation_key(4037)) ksObj3dTypeEnum IRough3D::GetBasePlane ( );
__declspec(implementation_key(4038)) void IRough3D::PutBasePlane ( ksObj3dTypeEnum Val );
__declspec(implementation_key(4039)) IModelObjectPtr IRough3D::GetPositionObject ( );
__declspec(implementation_key(4040)) void IRough3D::PutPositionObject ( struct IModelObject * Val );
__declspec(implementation_key(4041)) VARIANT_BOOL IRough3D::GetPosition ( double * X, double * Y, double * Z );
__declspec(implementation_key(4042)) VARIANT_BOOL IRough3D::SetPosition ( double X, double Y, double Z );
__declspec(implementation_key(4043)) IModelObjectPtr IRough3D::GetBaseObject ( );
__declspec(implementation_key(4044)) VARIANT_BOOL IRough3D::GetBasePosition ( double * X, double * Y, double * Z );
__declspec(implementation_key(4045)) VARIANT_BOOL IRough3D::SetBasePosition ( double X, double Y, double Z, struct IModelObject * Object );
__declspec(implementation_key(4046)) VARIANT_BOOL IRough3D::GetShelfPosition ( double * X, double * Y, double * Z );
__declspec(implementation_key(4047)) VARIANT_BOOL IRough3D::SetShelfPosition ( double X, double Y, double Z );
__declspec(implementation_key(4048)) IRough3DPtr IRoughs3D::GetRough3D ( const _variant_t & Index );
__declspec(implementation_key(4049)) IRough3DPtr IRoughs3D::Add ( );
__declspec(implementation_key(4050)) ksObj3dTypeEnum IBase3D::GetBasePlane ( );
__declspec(implementation_key(4051)) void IBase3D::PutBasePlane ( ksObj3dTypeEnum Val );
__declspec(implementation_key(4052)) IModelObjectPtr IBase3D::GetPositionObject ( );
__declspec(implementation_key(4053)) void IBase3D::PutPositionObject ( struct IModelObject * Val );
__declspec(implementation_key(4054)) VARIANT_BOOL IBase3D::GetPosition ( double * X, double * Y, double * Z );
__declspec(implementation_key(4055)) VARIANT_BOOL IBase3D::SetPosition ( double X, double Y, double Z );
__declspec(implementation_key(4056)) IModelObjectPtr IBase3D::GetBaseObject ( );
__declspec(implementation_key(4057)) VARIANT_BOOL IBase3D::GetDrawType ( );
__declspec(implementation_key(4058)) void IBase3D::PutDrawType ( VARIANT_BOOL Result );
__declspec(implementation_key(4059)) VARIANT_BOOL IBase3D::GetAutoSorted ( );
__declspec(implementation_key(4060)) void IBase3D::PutAutoSorted ( VARIANT_BOOL Result );
__declspec(implementation_key(4061)) ITextPtr IBase3D::GetText ( );
__declspec(implementation_key(4062)) VARIANT_BOOL IBase3D::GetBranchBeginPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4063)) VARIANT_BOOL IBase3D::SetBranchBeginPoint ( double X, double Y, double Z, struct IModelObject * Object );
__declspec(implementation_key(4064)) VARIANT_BOOL IBase3D::GetBranchEndPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4065)) VARIANT_BOOL IBase3D::SetBranchEndPoint ( double X, double Y, double Z );
__declspec(implementation_key(4066)) IBase3DPtr IBases3D::GetBase3D ( const _variant_t & Index );
__declspec(implementation_key(4067)) IBase3DPtr IBases3D::Add ( );
__declspec(implementation_key(4068)) ksObj3dTypeEnum ITolerance3D::GetBasePlane ( );
__declspec(implementation_key(4069)) void ITolerance3D::PutBasePlane ( ksObj3dTypeEnum Val );
__declspec(implementation_key(4070)) IModelObjectPtr ITolerance3D::GetPositionObject ( );
__declspec(implementation_key(4071)) void ITolerance3D::PutPositionObject ( struct IModelObject * Val );
__declspec(implementation_key(4072)) VARIANT_BOOL ITolerance3D::GetPosition ( double * X, double * Y, double * Z );
__declspec(implementation_key(4073)) VARIANT_BOOL ITolerance3D::SetPosition ( double X, double Y, double Z );
__declspec(implementation_key(4074)) VARIANT_BOOL ITolerance3D::GetArrowType ( long Index );
__declspec(implementation_key(4075)) void ITolerance3D::PutArrowType ( long Index, VARIANT_BOOL Result );
__declspec(implementation_key(4076)) enum ksToleranceArrowType ITolerance3D::GetToleranceArrowType ( long Index );
__declspec(implementation_key(4077)) void ITolerance3D::PutToleranceArrowType ( long Index, enum ksToleranceArrowType Result );
__declspec(implementation_key(4078)) enum ksTablePointEnum ITolerance3D::GetBranchPos ( long Index );
__declspec(implementation_key(4079)) void ITolerance3D::PutBranchPos ( long Index, enum ksTablePointEnum Result );
__declspec(implementation_key(4080)) VARIANT_BOOL ITolerance3D::FormatTolerance ( );
__declspec(implementation_key(4081)) ITolerance3DPtr ITolerances3D::GetTolerance3D ( const _variant_t & Index );
__declspec(implementation_key(4082)) ITolerance3DPtr ITolerances3D::Add ( );
__declspec(implementation_key(4083)) IThreadPtr IThreads::GetThread ( const _variant_t & Index );
__declspec(implementation_key(4084)) IThreadPtr IThreads::Add ( );
__declspec(implementation_key(4085)) IModelObjectPtr IArcDimension3D::GetObject ( );
__declspec(implementation_key(4086)) void IArcDimension3D::PutObject ( struct IModelObject * Object );
__declspec(implementation_key(4087)) double IArcDimension3D::GetLength ( );
__declspec(implementation_key(4088)) void IArcDimension3D::PutLength ( double PVal );
__declspec(implementation_key(4089)) IArcDimension3DPtr IArcDimensions3D::GetArcDimension3D ( const _variant_t & Index );
__declspec(implementation_key(4090)) IArcDimension3DPtr IArcDimensions3D::Add ( );
__declspec(implementation_key(4091)) VARIANT_BOOL IModelText::GetPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4092)) VARIANT_BOOL IModelText::SetPoint ( double X, double Y, double Z );
__declspec(implementation_key(4093)) void IModelText::PutAssociationObject ( struct IModelObject * PVal );
__declspec(implementation_key(4094)) IModelObjectPtr IModelText::GetAssociationObject ( );
__declspec(implementation_key(4095)) void IModelText::PutPlane ( struct IModelObject * PVal );
__declspec(implementation_key(4096)) IModelObjectPtr IModelText::GetPlane ( );
__declspec(implementation_key(4097)) void IModelText::PutAngle ( double PVal );
__declspec(implementation_key(4098)) double IModelText::GetAngle ( );
__declspec(implementation_key(4099)) void IModelText::PutPointParameterType ( enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(4100)) enum ksPoint3DTypeEnum IModelText::GetPointParameterType ( );
__declspec(implementation_key(4101)) IKompasAPIObjectPtr IModelText::GetPointParameters ( );
__declspec(implementation_key(4102)) double IModelText::GetHeight ( );
__declspec(implementation_key(4103)) void IModelText::PutHeight ( double Result );
__declspec(implementation_key(4104)) double IModelText::GetWidth ( );
__declspec(implementation_key(4105)) void IModelText::PutWidth ( double Result );
__declspec(implementation_key(4106)) enum ksTextHorizontalFormatEnum IModelText::GetHFormat ( );
__declspec(implementation_key(4107)) void IModelText::PutHFormat ( enum ksTextHorizontalFormatEnum Result );
__declspec(implementation_key(4108)) VARIANT_BOOL IModelText::GetVFormat ( );
__declspec(implementation_key(4109)) void IModelText::PutVFormat ( VARIANT_BOOL Result );
__declspec(implementation_key(4110)) enum ksAllocationEnum IModelText::GetAllocation ( );
__declspec(implementation_key(4111)) void IModelText::PutAllocation ( enum ksAllocationEnum Result );
__declspec(implementation_key(4112)) void IModelText::PutTextObjects ( const _variant_t & Result );
__declspec(implementation_key(4113)) _variant_t IModelText::GetTextObjects ( );
__declspec(implementation_key(4114)) ITextPtr IModelText::GetText ( );
__declspec(implementation_key(4115)) IModelTextPtr IModelTexts::GetModelText ( const _variant_t & Index );
__declspec(implementation_key(4116)) IModelTextPtr IModelTexts::Add ( );
__declspec(implementation_key(4117)) VARIANT_BOOL IModelTable::GetPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4118)) VARIANT_BOOL IModelTable::SetPoint ( double X, double Y, double Z );
__declspec(implementation_key(4119)) void IModelTable::PutAssociationObject ( struct IModelObject * PVal );
__declspec(implementation_key(4120)) IModelObjectPtr IModelTable::GetAssociationObject ( );
__declspec(implementation_key(4121)) void IModelTable::PutPlane ( struct IModelObject * PVal );
__declspec(implementation_key(4122)) IModelObjectPtr IModelTable::GetPlane ( );
__declspec(implementation_key(4123)) void IModelTable::PutAngle ( double PVal );
__declspec(implementation_key(4124)) double IModelTable::GetAngle ( );
__declspec(implementation_key(4125)) void IModelTable::PutPointParameterType ( enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(4126)) enum ksPoint3DTypeEnum IModelTable::GetPointParameterType ( );
__declspec(implementation_key(4127)) IKompasAPIObjectPtr IModelTable::GetPointParameters ( );
__declspec(implementation_key(4128)) void IModelTable::PutFixedCellsSize ( VARIANT_BOOL PVal );
__declspec(implementation_key(4129)) VARIANT_BOOL IModelTable::GetFixedCellsSize ( );
__declspec(implementation_key(4130)) void IModelTable::PutFixedRowCount ( VARIANT_BOOL PVal );
__declspec(implementation_key(4131)) VARIANT_BOOL IModelTable::GetFixedRowCount ( );
__declspec(implementation_key(4132)) void IModelTable::PutFixedColumnCount ( VARIANT_BOOL PVal );
__declspec(implementation_key(4133)) VARIANT_BOOL IModelTable::GetFixedColumnCount ( );
__declspec(implementation_key(4134)) VARIANT_BOOL IModelTable::Save ( _bstr_t FileName );
__declspec(implementation_key(4135)) ITablePtr IModelTable::GetTable ( );
__declspec(implementation_key(4136)) IModelTablePtr IModelTables::GetModelTable ( const _variant_t & Index );
__declspec(implementation_key(4137)) IModelTablePtr IModelTables::Add ( long RowsCount, long ColumnsCount, double RowHeigh, double ColumnsWidth, enum ksTableTileLayoutEnum TitlePos );
__declspec(implementation_key(4138)) IModelTablePtr IModelTables::Load ( _bstr_t FileName );
__declspec(implementation_key(4139)) ILineDimensions3DPtr ISymbols3DContainer::GetLineDimensions3D ( );
__declspec(implementation_key(4140)) IRadialDimensions3DPtr ISymbols3DContainer::GetRadialDimensions3D ( );
__declspec(implementation_key(4141)) IDiametralDimensions3DPtr ISymbols3DContainer::GetDiametralDimensions3D ( );
__declspec(implementation_key(4142)) IAngleDimensions3DPtr ISymbols3DContainer::GetAngleDimensions3D ( );
__declspec(implementation_key(4143)) ILeaders3DPtr ISymbols3DContainer::GetLeaders3D ( );
__declspec(implementation_key(4144)) IRoughs3DPtr ISymbols3DContainer::GetRoughs3D ( );
__declspec(implementation_key(4145)) IBases3DPtr ISymbols3DContainer::GetBases3D ( );
__declspec(implementation_key(4146)) ITolerances3DPtr ISymbols3DContainer::GetTolerances3D ( );
__declspec(implementation_key(4147)) VARIANT_BOOL ISymbols3DContainer::CreateGenerativeDimensions ( const _variant_t & Objects, VARIANT_BOOL CreateZeroDimensions );
__declspec(implementation_key(4148)) IVariable7Ptr ISymbols3DContainer::GetDimensionVariable ( struct IModelObject * Dimension );
__declspec(implementation_key(4149)) IThreadsPtr ISymbols3DContainer::GetThreads ( );
__declspec(implementation_key(4150)) IArcDimensions3DPtr ISymbols3DContainer::GetArcDimensions3D ( );
__declspec(implementation_key(4151)) IModelTextsPtr ISymbols3DContainer::GetModelTexts ( );
__declspec(implementation_key(4152)) IModelTablesPtr ISymbols3DContainer::GetModelTables ( );
__declspec(implementation_key(4153)) IModelObjectPtr ILineDimension3D::GetPlane ( );
__declspec(implementation_key(4154)) void ILineDimension3D::PutPlane ( struct IModelObject * Plane );
__declspec(implementation_key(4155)) void ICurveVertexParam::PutBuildingType ( enum ksLineBuildingType Result );
__declspec(implementation_key(4156)) enum ksLineBuildingType ICurveVertexParam::GetBuildingType ( );
__declspec(implementation_key(4157)) void ICurveVertexParam::PutBuildingObject ( struct IModelObject * Result );
__declspec(implementation_key(4158)) IModelObjectPtr ICurveVertexParam::GetBuildingObject ( );
__declspec(implementation_key(4159)) void ICurveVertexParam::PutAssociationVertex ( struct IModelObject * Result );
__declspec(implementation_key(4160)) IModelObjectPtr ICurveVertexParam::GetAssociationVertex ( );
__declspec(implementation_key(4161)) IModelObjectPtr ICurveVertexParam::GetVertex ( );
__declspec(implementation_key(4162)) int ICurveVertexParam::GetIndex ( );
__declspec(implementation_key(4163)) IKompasAPIObjectPtr ICurveVertexParam::GetPointParameters ( );
__declspec(implementation_key(4164)) void ICurveVertexParam::PutPointType ( enum ksPoint3DTypeEnum Result );
__declspec(implementation_key(4165)) enum ksPoint3DTypeEnum ICurveVertexParam::GetPointType ( );
__declspec(implementation_key(4166)) VARIANT_BOOL ICurveVertexParam::GetParamVertex ( double * X, double * Y, double * Z, double * Value );
__declspec(implementation_key(4167)) VARIANT_BOOL ICurveVertexParam::SetParamVertex ( double X, double Y, double Z, double Value );
__declspec(implementation_key(4168)) VARIANT_BOOL ICurveVertexParam::SetParamByVertex ( struct IModelObject * Obj, double Value );
__declspec(implementation_key(4169)) VARIANT_BOOL ICurveVertexParam::GetParamByDistance ( double * Distance, double * Value );
__declspec(implementation_key(4170)) VARIANT_BOOL ICurveVertexParam::SetParamByDistance ( double Distance, double Value );
__declspec(implementation_key(4171)) IVector3DPtr ICurveVertexParam::GetVector3D ( );
__declspec(implementation_key(4172)) VARIANT_BOOL ICurveVertexParam::Update ( );
__declspec(implementation_key(4173)) void ISpline3D::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(4174)) VARIANT_BOOL ISpline3D::GetClosed ( );
__declspec(implementation_key(4175)) void ISpline3D::PutSplineOnPoles ( VARIANT_BOOL Result );
__declspec(implementation_key(4176)) VARIANT_BOOL ISpline3D::GetSplineOnPoles ( );
__declspec(implementation_key(4177)) void ISpline3D::PutSplineOrder ( long Result );
__declspec(implementation_key(4178)) long ISpline3D::GetSplineOrder ( );
__declspec(implementation_key(4179)) long ISpline3D::GetVertexCount ( );
__declspec(implementation_key(4180)) ICurveVertexParamPtr ISpline3D::GetVertexParams ( long Index );
__declspec(implementation_key(4181)) ICurveVertexParamPtr ISpline3D::AddVertex ( long Index );
__declspec(implementation_key(4182)) VARIANT_BOOL ISpline3D::DeleteVertex ( long Index );
__declspec(implementation_key(4183)) VARIANT_BOOL ISpline3D::Flush ( );
__declspec(implementation_key(4184)) VARIANT_BOOL ISpline3D::ReadFromFile ( _bstr_t FileName );
__declspec(implementation_key(4185)) VARIANT_BOOL ISpline3D::WriteToFile ( _bstr_t FileName );
__declspec(implementation_key(4186)) _variant_t ISpline3D::GetVertexParamsArray ( );
__declspec(implementation_key(4187)) VARIANT_BOOL ISpline3D::GetVertexCoordinatesArray ( VARIANT * Coordinates, VARIANT * Weights );
__declspec(implementation_key(4188)) void ISpline3D::PutKnots ( const _variant_t & PVal );
__declspec(implementation_key(4189)) _variant_t ISpline3D::GetKnots ( );
__declspec(implementation_key(4190)) void ISpline3D::PutSplineTransitionType ( long PointIndex, enum ksSplineTransitionTypeEnum PVal );
__declspec(implementation_key(4191)) enum ksSplineTransitionTypeEnum ISpline3D::GetSplineTransitionType ( long PointIndex );
__declspec(implementation_key(4192)) void ISpline3D::PutConstraintObject ( long PointIndex, struct IModelObject * PVal );
__declspec(implementation_key(4193)) IModelObjectPtr ISpline3D::GetConstraintObject ( long PointIndex );
__declspec(implementation_key(4194)) void ISpline3D::PutConstraintLimitObject ( long PointIndex, struct IModelObject * PVal );
__declspec(implementation_key(4195)) IModelObjectPtr ISpline3D::GetConstraintLimitObject ( long PointIndex );
__declspec(implementation_key(4196)) void ISpline3D::PutConstraintType ( long PointIndex, enum ksNurbsByPointsPointConstraintsEnum PVal );
__declspec(implementation_key(4197)) enum ksNurbsByPointsPointConstraintsEnum ISpline3D::GetConstraintType ( long PointIndex );
__declspec(implementation_key(4198)) void ISpline3D::PutConstraintReverse ( long PointIndex, VARIANT_BOOL PVal );
__declspec(implementation_key(4199)) VARIANT_BOOL ISpline3D::GetConstraintReverse ( long PointIndex );
__declspec(implementation_key(4200)) void ISpline3D::PutTangentVectorLenght ( long PointIndex, double PVal );
__declspec(implementation_key(4201)) double ISpline3D::GetTangentVectorLenght ( long PointIndex );
__declspec(implementation_key(4202)) void ISpline3D::PutCurvatureRadius ( long PointIndex, double PVal );
__declspec(implementation_key(4203)) double ISpline3D::GetCurvatureRadius ( long PointIndex );
__declspec(implementation_key(4204)) void ISpline3D::PutCurvature ( long PointIndex, double PVal );
__declspec(implementation_key(4205)) double ISpline3D::GetCurvature ( long PointIndex );
__declspec(implementation_key(4206)) VARIANT_BOOL ISpline3D::GetVector ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex, double * X, double * Y, double * Z );
__declspec(implementation_key(4207)) VARIANT_BOOL ISpline3D::SetVector ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex, double X, double Y, double Z );
__declspec(implementation_key(4208)) VARIANT_BOOL ISpline3D::InvertVector ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex );
__declspec(implementation_key(4209)) void ISpline3D::PutVectorDirectionObject ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex, struct IModelObject * PVal );
__declspec(implementation_key(4210)) IModelObjectPtr ISpline3D::GetVectorDirectionObject ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex );
__declspec(implementation_key(4211)) void ISpline3D::PutVectorOrientation ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex, VARIANT_BOOL PVal );
__declspec(implementation_key(4212)) VARIANT_BOOL ISpline3D::GetVectorOrientation ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex );
__declspec(implementation_key(4213)) IVector3DPtr ISpline3D::GetDirectionVector ( long PointIndex, enum ksTransitionVectorIndexEnum VectorIndex );
__declspec(implementation_key(4214)) VARIANT_BOOL ISpline3D::GetCenterPoint ( long PointIndex, double * X, double * Y, double * Z );
__declspec(implementation_key(4215)) VARIANT_BOOL ISpline3D::SetCenterPoint ( long PointIndex, double X, double Y, double Z );
__declspec(implementation_key(4216)) IKompasAPIObjectPtr ISpline3D::GetCenterPointParams ( long PointIndex );
__declspec(implementation_key(4217)) void ISpline3D::PutCenterPointType ( long PointIndex, enum ksPoint3DTypeEnum Result );
__declspec(implementation_key(4218)) enum ksPoint3DTypeEnum ISpline3D::GetCenterPointType ( long PointIndex );
__declspec(implementation_key(4219)) void ISpline3D::PutCenterPointAssociationObject ( long PointIndex, struct IModelObject * PVal );
__declspec(implementation_key(4220)) IModelObjectPtr ISpline3D::GetCenterPointAssociationObject ( long PointIndex );
__declspec(implementation_key(4221)) VARIANT_BOOL ISpline3D::DeleteCenterPointParams ( long PointIndex );
__declspec(implementation_key(4222)) VARIANT_BOOL ISpline3D::ClearTangentParameters ( );
__declspec(implementation_key(4223)) ISpline3DPtr ISplines3D::GetSpline3D ( const _variant_t & Index );
__declspec(implementation_key(4224)) ISpline3DPtr ISplines3D::Add ( );
__declspec(implementation_key(4225)) _variant_t ISplines3D::Convert ( const _variant_t & Objects );
__declspec(implementation_key(4226)) ILocalCoordinateSystemPtr ILocalCoordinateSystems::GetLocalCoordinateSystem ( const _variant_t & Index );
__declspec(implementation_key(4227)) ILocalCoordinateSystemPtr ILocalCoordinateSystems::Add ( );
__declspec(implementation_key(4228)) IModelObjectPtr ILocalCoordinateSystems::GetCurrent ( );
__declspec(implementation_key(4229)) VARIANT_BOOL ILocalCoordinateSystems::SetCurrent ( struct ILocalCoordinateSystem * Object );
__declspec(implementation_key(4230)) void IPolyLine::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(4231)) VARIANT_BOOL IPolyLine::GetClosed ( );
__declspec(implementation_key(4232)) void IPolyLine::PutVertexVisible ( VARIANT_BOOL Result );
__declspec(implementation_key(4233)) VARIANT_BOOL IPolyLine::GetVertexVisible ( );
__declspec(implementation_key(4234)) long IPolyLine::GetVertexCount ( );
__declspec(implementation_key(4235)) _variant_t IPolyLine::GetEdges ( );
__declspec(implementation_key(4236)) ICurveVertexParamPtr IPolyLine::GetVertexParams ( long Index );
__declspec(implementation_key(4237)) VARIANT_BOOL IPolyLine::ReadFromFile ( _bstr_t FileName );
__declspec(implementation_key(4238)) VARIANT_BOOL IPolyLine::WriteToFile ( _bstr_t FileName );
__declspec(implementation_key(4239)) ICurveVertexParamPtr IPolyLine::AddVertex ( long Index );
__declspec(implementation_key(4240)) VARIANT_BOOL IPolyLine::DeleteVertex ( long Index );
__declspec(implementation_key(4241)) VARIANT_BOOL IPolyLine::Flush ( );
__declspec(implementation_key(4242)) _variant_t IPolyLine::GetVertexParamsArray ( );
__declspec(implementation_key(4243)) VARIANT_BOOL IPolyLine::GetVertexCoordinatesArray ( VARIANT * Coordinates, VARIANT * Radiuses );
__declspec(implementation_key(4244)) _variant_t IPolyLine::GetErrorIndexes ( );
__declspec(implementation_key(4245)) IPolyLinePtr IPolyLines::GetPolyLine ( const _variant_t & Index );
__declspec(implementation_key(4246)) IPolyLinePtr IPolyLines::Add ( );
__declspec(implementation_key(4247)) void IControlPoint::PutShowName ( VARIANT_BOOL PVal );
__declspec(implementation_key(4248)) VARIANT_BOOL IControlPoint::GetShowName ( );
__declspec(implementation_key(4249)) IControlPointPtr IControlPoints::GetControlPoint ( const _variant_t & Index );
__declspec(implementation_key(4250)) IControlPointPtr IControlPoints::Add ( );
__declspec(implementation_key(4251)) VARIANT_BOOL IConjunctivePoint::SetDirectionObject1 ( struct IModelObject * NewVal );
__declspec(implementation_key(4252)) IModelObjectPtr IConjunctivePoint::GetDirectionObject1 ( );
__declspec(implementation_key(4253)) VARIANT_BOOL IConjunctivePoint::SetDirectionObject2 ( struct IModelObject * NewVal );
__declspec(implementation_key(4254)) IModelObjectPtr IConjunctivePoint::GetDirectionObject2 ( );
__declspec(implementation_key(4255)) VARIANT_BOOL IConjunctivePoint::GetDirection1 ( );
__declspec(implementation_key(4256)) void IConjunctivePoint::PutDirection1 ( VARIANT_BOOL Val );
__declspec(implementation_key(4257)) VARIANT_BOOL IConjunctivePoint::GetDirection2 ( );
__declspec(implementation_key(4258)) void IConjunctivePoint::PutDirection2 ( VARIANT_BOOL Val );
__declspec(implementation_key(4259)) IModelObjectPtr IConjunctivePoint::GetAxis ( ksObj3dTypeEnum Val );
__declspec(implementation_key(4260)) IVector3DPtr IConjunctivePoint::GetVector3D ( VARIANT_BOOL First );
__declspec(implementation_key(4261)) enum ksConjunctivePointTypeEnum IConjunctivePoint::GetBuildingType ( );
__declspec(implementation_key(4262)) void IConjunctivePoint::PutBuildingType ( enum ksConjunctivePointTypeEnum Val );
__declspec(implementation_key(4263)) VARIANT_BOOL IConjunctivePoint::InitByMatrix3D ( const _variant_t & mtr );
__declspec(implementation_key(4264)) VARIANT_BOOL IConjunctivePoint::GetVector ( ksObj3dTypeEnum Axis, double * X, double * Y, double * Z );
__declspec(implementation_key(4265)) void IConjunctivePoint::PutUseDirection2 ( VARIANT_BOOL Result );
__declspec(implementation_key(4266)) VARIANT_BOOL IConjunctivePoint::GetUseDirection2 ( );
__declspec(implementation_key(4267)) void IConjunctivePoint::PutShowName ( VARIANT_BOOL PVal );
__declspec(implementation_key(4268)) VARIANT_BOOL IConjunctivePoint::GetShowName ( );
__declspec(implementation_key(4269)) IConjunctivePointPtr IConjunctivePoints::GetConjunctivePoint ( const _variant_t & Index );
__declspec(implementation_key(4270)) IConjunctivePointPtr IConjunctivePoints::Add ( );
__declspec(implementation_key(4271)) VARIANT_BOOL ISurfacesIntersectionCurve::SetObjects ( const _variant_t & ObjectsArray1, const _variant_t & ObjectsArray2 );
__declspec(implementation_key(4272)) VARIANT_BOOL ISurfacesIntersectionCurve::GetObjects ( VARIANT * ObjectsArray1, VARIANT * ObjectsArray2 );
__declspec(implementation_key(4273)) VARIANT_BOOL ISurfacesIntersectionCurve::AddObjects ( VARIANT_BOOL ForArray1, const _variant_t & Objects );
__declspec(implementation_key(4274)) VARIANT_BOOL ISurfacesIntersectionCurve::Clear ( VARIANT_BOOL ForArray1 );
__declspec(implementation_key(4275)) long ISurfacesIntersectionCurve::GetObjectsCount ( VARIANT_BOOL ForArray1 );
__declspec(implementation_key(4276)) IModelObjectPtr ISurfacesIntersectionCurve::GetObject ( VARIANT_BOOL ForArray1, long Index );
__declspec(implementation_key(4277)) VARIANT_BOOL ISurfacesIntersectionCurve::GetAutoCheck ( );
__declspec(implementation_key(4278)) void ISurfacesIntersectionCurve::PutAutoCheck ( VARIANT_BOOL CheckValue );
__declspec(implementation_key(4279)) _variant_t ISurfacesIntersectionCurve::GetEdgesChecks ( );
__declspec(implementation_key(4280)) void ISurfacesIntersectionCurve::PutEdgesChecks ( const _variant_t & Checks );
__declspec(implementation_key(4281)) long ISurfacesIntersectionCurve::GetEdgesArraysCount ( );
__declspec(implementation_key(4282)) _variant_t ISurfacesIntersectionCurve::GetEdges ( long Index );
__declspec(implementation_key(4283)) VARIANT_BOOL ISurfacesIntersectionCurve::GetEdgesCheck ( long ContourIndex );
__declspec(implementation_key(4284)) void ISurfacesIntersectionCurve::PutEdgesCheck ( long ContourIndex, VARIANT_BOOL CheckValue );
__declspec(implementation_key(4285)) long ISurfacesIntersectionCurve::GetEdgesChecksCount ( );
__declspec(implementation_key(4286)) ISurfacesIntersectionCurvePtr ISurfacesIntersectionCurves::GetSurfacesIntersectionCurve ( const _variant_t & Index );
__declspec(implementation_key(4287)) ISurfacesIntersectionCurvePtr ISurfacesIntersectionCurves::Add ( );
__declspec(implementation_key(4288)) _variant_t IEquidistant3D::GetEdges ( );
__declspec(implementation_key(4289)) void IEquidistant3D::PutEdges ( const _variant_t & PVal );
__declspec(implementation_key(4290)) void IEquidistant3D::PutOnFace ( VARIANT_BOOL PVal );
__declspec(implementation_key(4291)) VARIANT_BOOL IEquidistant3D::GetOnFace ( );
__declspec(implementation_key(4292)) IModelObjectPtr IEquidistant3D::GetBaseObject ( );
__declspec(implementation_key(4293)) void IEquidistant3D::PutBaseObject ( struct IModelObject * Result );
__declspec(implementation_key(4294)) void IEquidistant3D::PutAngle ( double PVal );
__declspec(implementation_key(4295)) double IEquidistant3D::GetAngle ( );
__declspec(implementation_key(4296)) void IEquidistant3D::PutDistance ( double PVal );
__declspec(implementation_key(4297)) double IEquidistant3D::GetDistance ( );
__declspec(implementation_key(4298)) void IEquidistant3D::PutCutMode ( enum ksEquidistant3DCutModeEnum PVal );
__declspec(implementation_key(4299)) enum ksEquidistant3DCutModeEnum IEquidistant3D::GetCutMode ( );
__declspec(implementation_key(4300)) void IEquidistant3D::PutKeepRadius ( VARIANT_BOOL PVal );
__declspec(implementation_key(4301)) VARIANT_BOOL IEquidistant3D::GetKeepRadius ( );
__declspec(implementation_key(4302)) void IEquidistant3D::PutDirFromBegin ( VARIANT_BOOL PVal );
__declspec(implementation_key(4303)) VARIANT_BOOL IEquidistant3D::GetDirFromBegin ( );
__declspec(implementation_key(4304)) IVector3DPtr IEquidistant3D::GetVector3D ( );
__declspec(implementation_key(4305)) VARIANT_BOOL IEquidistant3D::AddEdge ( struct IModelObject * Object );
__declspec(implementation_key(4306)) VARIANT_BOOL IEquidistant3D::RemoveEdge ( long Index );
__declspec(implementation_key(4307)) long IEquidistant3D::GetEdgesCount ( );
__declspec(implementation_key(4308)) IEquidistant3DPtr IEquidistants3D::GetEquidistant3D ( const _variant_t & Index );
__declspec(implementation_key(4309)) IEquidistant3DPtr IEquidistants3D::Add ( );
__declspec(implementation_key(4310)) void ITrimmedCurve::PutCurve ( struct IModelObject * PVal );
__declspec(implementation_key(4311)) IModelObjectPtr ITrimmedCurve::GetCurve ( );
__declspec(implementation_key(4312)) void ITrimmedCurve::PutCutObject1 ( struct IModelObject * PVal );
__declspec(implementation_key(4313)) IModelObjectPtr ITrimmedCurve::GetCutObject1 ( );
__declspec(implementation_key(4314)) void ITrimmedCurve::PutCutObject2 ( struct IModelObject * PVal );
__declspec(implementation_key(4315)) IModelObjectPtr ITrimmedCurve::GetCutObject2 ( );
__declspec(implementation_key(4316)) void ITrimmedCurve::PutUseTwoCutObjecs ( VARIANT_BOOL Result );
__declspec(implementation_key(4317)) VARIANT_BOOL ITrimmedCurve::GetUseTwoCutObjecs ( );
__declspec(implementation_key(4318)) void ITrimmedCurve::PutSense ( VARIANT_BOOL Result );
__declspec(implementation_key(4319)) VARIANT_BOOL ITrimmedCurve::GetSense ( );
__declspec(implementation_key(4320)) void ITrimmedCurve::PutBeginParameter ( double Val );
__declspec(implementation_key(4321)) double ITrimmedCurve::GetBeginParameter ( );
__declspec(implementation_key(4322)) void ITrimmedCurve::PutEndParameter ( double Val );
__declspec(implementation_key(4323)) double ITrimmedCurve::GetEndParameter ( );
__declspec(implementation_key(4324)) VARIANT_BOOL ITrimmedCurve::GetIntersectParameters ( VARIANT * CutPoints1, VARIANT * CutPoints2 );
__declspec(implementation_key(4325)) ITrimmedCurvePtr ITrimmedCurves::GetTrimmedCurve ( const _variant_t & Index );
__declspec(implementation_key(4326)) ITrimmedCurvePtr ITrimmedCurves::Add ( );
__declspec(implementation_key(4327)) void IConnectCurve::PutCurve1 ( struct IModelObject * PVal );
__declspec(implementation_key(4328)) IModelObjectPtr IConnectCurve::GetCurve1 ( );
__declspec(implementation_key(4329)) void IConnectCurve::PutCurve2 ( struct IModelObject * PVal );
__declspec(implementation_key(4330)) IModelObjectPtr IConnectCurve::GetCurve2 ( );
__declspec(implementation_key(4331)) void IConnectCurve::PutCurve1ConnectType ( enum ksConnectTypeEnum PVal );
__declspec(implementation_key(4332)) enum ksConnectTypeEnum IConnectCurve::GetCurve1ConnectType ( );
__declspec(implementation_key(4333)) void IConnectCurve::PutCurve2ConnectType ( enum ksConnectTypeEnum PVal );
__declspec(implementation_key(4334)) enum ksConnectTypeEnum IConnectCurve::GetCurve2ConnectType ( );
__declspec(implementation_key(4335)) void IConnectCurve::PutCurve1ConnectVertex ( VARIANT_BOOL Result );
__declspec(implementation_key(4336)) VARIANT_BOOL IConnectCurve::GetCurve1ConnectVertex ( );
__declspec(implementation_key(4337)) void IConnectCurve::PutCurve2ConnectVertex ( VARIANT_BOOL Result );
__declspec(implementation_key(4338)) VARIANT_BOOL IConnectCurve::GetCurve2ConnectVertex ( );
__declspec(implementation_key(4339)) void IConnectCurve::PutTension ( double Result );
__declspec(implementation_key(4340)) double IConnectCurve::GetTension ( );
__declspec(implementation_key(4341)) IConnectCurvePtr IConnectCurves::GetConnectCurve ( const _variant_t & Index );
__declspec(implementation_key(4342)) IConnectCurvePtr IConnectCurves::Add ( );
__declspec(implementation_key(4343)) void IFilletCurve::PutCurve1 ( struct IModelObject * PVal );
__declspec(implementation_key(4344)) IModelObjectPtr IFilletCurve::GetCurve1 ( );
__declspec(implementation_key(4345)) void IFilletCurve::PutCurve2 ( struct IModelObject * PVal );
__declspec(implementation_key(4346)) IModelObjectPtr IFilletCurve::GetCurve2 ( );
__declspec(implementation_key(4347)) void IFilletCurve::PutTrimCurve1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(4348)) VARIANT_BOOL IFilletCurve::GetTrimCurve1 ( );
__declspec(implementation_key(4349)) void IFilletCurve::PutTrimCurve2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(4350)) VARIANT_BOOL IFilletCurve::GetTrimCurve2 ( );
__declspec(implementation_key(4351)) VARIANT_BOOL IFilletCurve::GetDirection ( );
__declspec(implementation_key(4352)) void IFilletCurve::PutDirection ( VARIANT_BOOL Val );
__declspec(implementation_key(4353)) void IFilletCurve::PutRadius ( double Result );
__declspec(implementation_key(4354)) double IFilletCurve::GetRadius ( );
__declspec(implementation_key(4355)) VARIANT_BOOL IFilletCurve::GetCurve1CutPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4356)) VARIANT_BOOL IFilletCurve::SetCurve1CutPoint ( double X, double Y, double Z );
__declspec(implementation_key(4357)) VARIANT_BOOL IFilletCurve::GetCurve2CutPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4358)) VARIANT_BOOL IFilletCurve::SetCurve2CutPoint ( double X, double Y, double Z );
__declspec(implementation_key(4359)) VARIANT_BOOL IFilletCurve::GetOnSurface ( );
__declspec(implementation_key(4360)) void IFilletCurve::PutOnSurface ( VARIANT_BOOL Val );
__declspec(implementation_key(4361)) IFilletCurvePtr IFilletCurves::GetFilletCurve ( const _variant_t & Index );
__declspec(implementation_key(4362)) IFilletCurvePtr IFilletCurves::Add ( );
__declspec(implementation_key(4363)) void IArc3D::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(4364)) VARIANT_BOOL IArc3D::GetClosed ( );
__declspec(implementation_key(4365)) void IArc3D::PutDirection ( VARIANT_BOOL Result );
__declspec(implementation_key(4366)) VARIANT_BOOL IArc3D::GetDirection ( );
__declspec(implementation_key(4367)) void IArc3D::PutBuildingType ( enum ksArc3DBuildingTypeEnum Result );
__declspec(implementation_key(4368)) enum ksArc3DBuildingTypeEnum IArc3D::GetBuildingType ( );
__declspec(implementation_key(4369)) void IArc3D::PutRadius ( double Result );
__declspec(implementation_key(4370)) double IArc3D::GetRadius ( );
__declspec(implementation_key(4371)) void IArc3D::PutAngle1 ( double Result );
__declspec(implementation_key(4372)) double IArc3D::GetAngle1 ( );
__declspec(implementation_key(4373)) void IArc3D::PutAngle2 ( double Result );
__declspec(implementation_key(4374)) double IArc3D::GetAngle2 ( );
__declspec(implementation_key(4375)) VARIANT_BOOL IArc3D::GetPoint ( enum ksArc3DParameterEnum Index, double * X, double * Y, double * Z );
__declspec(implementation_key(4376)) VARIANT_BOOL IArc3D::SetPoint ( enum ksArc3DParameterEnum Index, double X, double Y, double Z );
__declspec(implementation_key(4377)) void IArc3D::PutAssociationObject ( enum ksArc3DParameterEnum Index, struct IModelObject * PVal );
__declspec(implementation_key(4378)) IModelObjectPtr IArc3D::GetAssociationObject ( enum ksArc3DParameterEnum Index );
__declspec(implementation_key(4379)) void IArc3D::PutBuildingObject ( struct IModelObject * Result );
__declspec(implementation_key(4380)) IModelObjectPtr IArc3D::GetBuildingObject ( );
__declspec(implementation_key(4381)) IVector3DPtr IArc3D::GetBuildingVectorParameters ( );
__declspec(implementation_key(4382)) void IArc3D::PutDirectionPointIndex ( enum ksArc3DParameterEnum Index );
__declspec(implementation_key(4383)) enum ksArc3DParameterEnum IArc3D::GetDirectionPointIndex ( );
__declspec(implementation_key(4384)) void IArc3D::PutPointType ( enum ksArc3DParameterEnum Index, enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(4385)) enum ksPoint3DTypeEnum IArc3D::GetPointType ( enum ksArc3DParameterEnum Index );
__declspec(implementation_key(4386)) IKompasAPIObjectPtr IArc3D::GetPointParameters ( enum ksArc3DParameterEnum Index );
__declspec(implementation_key(4387)) IArc3DPtr IArcs3D::GetArc3D ( const _variant_t & Index );
__declspec(implementation_key(4388)) IArc3DPtr IArcs3D::Add ( );
__declspec(implementation_key(4389)) void ICurveOutLine::PutFaces ( const _variant_t & Faces );
__declspec(implementation_key(4390)) _variant_t ICurveOutLine::GetFaces ( );
__declspec(implementation_key(4391)) IVector3DPtr ICurveOutLine::GetVector3D ( );
__declspec(implementation_key(4392)) VARIANT_BOOL ICurveOutLine::GetAutoCheck ( );
__declspec(implementation_key(4393)) void ICurveOutLine::PutAutoCheck ( VARIANT_BOOL CheckValue );
__declspec(implementation_key(4394)) _variant_t ICurveOutLine::GetEdgesChecks ( );
__declspec(implementation_key(4395)) void ICurveOutLine::PutEdgesChecks ( const _variant_t & Checks );
__declspec(implementation_key(4396)) long ICurveOutLine::GetEdgesArraysCount ( );
__declspec(implementation_key(4397)) _variant_t ICurveOutLine::GetEdges ( long Index );
__declspec(implementation_key(4398)) VARIANT_BOOL ICurveOutLine::GetEdgesCheck ( long ContourIndex );
__declspec(implementation_key(4399)) void ICurveOutLine::PutEdgesCheck ( long ContourIndex, VARIANT_BOOL CheckValue );
__declspec(implementation_key(4400)) long ICurveOutLine::GetEdgesChecksCount ( );
__declspec(implementation_key(4401)) ICurveOutLinePtr ICurveOutLines::GetCurveOutLine ( const _variant_t & Index );
__declspec(implementation_key(4402)) ICurveOutLinePtr ICurveOutLines::Add ( );
__declspec(implementation_key(4403)) void ICurveByLaw::PutPointsType ( enum ksPoint3DTypeEnum Type );
__declspec(implementation_key(4404)) enum ksPoint3DTypeEnum ICurveByLaw::GetPointsType ( );
__declspec(implementation_key(4405)) void ICurveByLaw::PutLawType ( enum ksCoordLawEnum coord, enum ksLawTypeEnum Type );
__declspec(implementation_key(4406)) enum ksLawTypeEnum ICurveByLaw::GetLawType ( enum ksCoordLawEnum coord );
__declspec(implementation_key(4407)) void ICurveByLaw::PutTMin ( enum ksCoordLawEnum coord, double T );
__declspec(implementation_key(4408)) double ICurveByLaw::GetTMin ( enum ksCoordLawEnum coord );
__declspec(implementation_key(4409)) void ICurveByLaw::PutTMax ( enum ksCoordLawEnum coord, double T );
__declspec(implementation_key(4410)) double ICurveByLaw::GetTMax ( enum ksCoordLawEnum coord );
__declspec(implementation_key(4411)) void ICurveByLaw::PutExpression ( enum ksCoordLawEnum coord, _bstr_t PVal );
__declspec(implementation_key(4412)) _bstr_t ICurveByLaw::GetExpression ( enum ksCoordLawEnum coord );
__declspec(implementation_key(4413)) _variant_t ICurveByLaw::GetUserVariables ( );
__declspec(implementation_key(4414)) void ICurveByLaw::PutIntervalExpression ( enum ksCoordLawEnum coord, _bstr_t PVal );
__declspec(implementation_key(4415)) _bstr_t ICurveByLaw::GetIntervalExpression ( enum ksCoordLawEnum coord );
__declspec(implementation_key(4416)) ICurveByLawPtr ICurveByLaws::GetCurveByLaw ( const _variant_t & Index );
__declspec(implementation_key(4417)) ICurveByLawPtr ICurveByLaws::Add ( );
__declspec(implementation_key(4418)) void IIsoparametricCurve::PutSurfaceObject ( struct IModelObject * PVal );
__declspec(implementation_key(4419)) IModelObjectPtr IIsoparametricCurve::GetSurfaceObject ( );
__declspec(implementation_key(4420)) void IIsoparametricCurve::PutU ( double PVal );
__declspec(implementation_key(4421)) double IIsoparametricCurve::GetU ( );
__declspec(implementation_key(4422)) void IIsoparametricCurve::PutV ( double PVal );
__declspec(implementation_key(4423)) double IIsoparametricCurve::GetV ( );
__declspec(implementation_key(4424)) void IIsoparametricCurve::PutAssociationObject ( struct IModelObject * PVal );
__declspec(implementation_key(4425)) IModelObjectPtr IIsoparametricCurve::GetAssociationObject ( );
__declspec(implementation_key(4426)) void IIsoparametricCurve::PutUDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4427)) VARIANT_BOOL IIsoparametricCurve::GetUDirection ( );
__declspec(implementation_key(4428)) VARIANT_BOOL IIsoparametricCurve::GetPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4429)) VARIANT_BOOL IIsoparametricCurve::SetPoint ( double X, double Y, double Z );
__declspec(implementation_key(4430)) IIsoparametricCurvePtr IIsoparametricCurves::GetIsoparametricCurve ( const _variant_t & Index );
__declspec(implementation_key(4431)) IIsoparametricCurvePtr IIsoparametricCurves::Add ( );
__declspec(implementation_key(4432)) void IIsoparametricCurvesSet::PutSurfaceObject ( struct IModelObject * PVal );
__declspec(implementation_key(4433)) IModelObjectPtr IIsoparametricCurvesSet::GetSurfaceObject ( );
__declspec(implementation_key(4434)) void IIsoparametricCurvesSet::PutUCount ( long PVal );
__declspec(implementation_key(4435)) long IIsoparametricCurvesSet::GetUCount ( );
__declspec(implementation_key(4436)) void IIsoparametricCurvesSet::PutVCount ( long PVal );
__declspec(implementation_key(4437)) long IIsoparametricCurvesSet::GetVCount ( );
__declspec(implementation_key(4438)) void IIsoparametricCurvesSet::PutSaveBoundaries ( VARIANT_BOOL PVal );
__declspec(implementation_key(4439)) VARIANT_BOOL IIsoparametricCurvesSet::GetSaveBoundaries ( );
__declspec(implementation_key(4440)) VARIANT_BOOL IIsoparametricCurvesSet::Destroy ( );
__declspec(implementation_key(4441)) IIsoparametricCurvesSetPtr IIsoparametricCurvesSets::GetIsoparametricCurvesSet ( const _variant_t & Index );
__declspec(implementation_key(4442)) IIsoparametricCurvesSetPtr IIsoparametricCurvesSets::Add ( );
__declspec(implementation_key(4443)) void ISplineOnSurface::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(4444)) VARIANT_BOOL ISplineOnSurface::GetClosed ( );
__declspec(implementation_key(4445)) void ISplineOnSurface::PutSplineOnPoles ( VARIANT_BOOL Result );
__declspec(implementation_key(4446)) VARIANT_BOOL ISplineOnSurface::GetSplineOnPoles ( );
__declspec(implementation_key(4447)) void ISplineOnSurface::PutSplineOrder ( long Result );
__declspec(implementation_key(4448)) long ISplineOnSurface::GetSplineOrder ( );
__declspec(implementation_key(4449)) void ISplineOnSurface::PutSurfaceObject ( struct IModelObject * PVal );
__declspec(implementation_key(4450)) IModelObjectPtr ISplineOnSurface::GetSurfaceObject ( );
__declspec(implementation_key(4451)) long ISplineOnSurface::GetVertexCount ( );
__declspec(implementation_key(4452)) VARIANT_BOOL ISplineOnSurface::GetVertex ( long Index, double * U, double * V, double * W );
__declspec(implementation_key(4453)) VARIANT_BOOL ISplineOnSurface::SetVertex ( long Index, double U, double V, double W );
__declspec(implementation_key(4454)) VARIANT_BOOL ISplineOnSurface::AddVertex ( long IndexAt, double U, double V, double W, struct IModelObject * AssociationObject );
__declspec(implementation_key(4455)) VARIANT_BOOL ISplineOnSurface::DeleteVertex ( long Index );
__declspec(implementation_key(4456)) VARIANT_BOOL ISplineOnSurface::Clear ( );
__declspec(implementation_key(4457)) VARIANT_BOOL ISplineOnSurface::GetPoint ( long Index, double * X, double * Y, double * Z, double * W );
__declspec(implementation_key(4458)) VARIANT_BOOL ISplineOnSurface::SetPoint ( long Index, double X, double Y, double Z, double W );
__declspec(implementation_key(4459)) VARIANT_BOOL ISplineOnSurface::AddPoint ( long IndexAt, double X, double Y, double Z, double W, struct IModelObject * AssociationObject );
__declspec(implementation_key(4460)) VARIANT_BOOL ISplineOnSurface::GetVertexParams ( VARIANT * UV, VARIANT * Points, VARIANT * Weights );
__declspec(implementation_key(4461)) void ISplineOnSurface::PutAssociationObject ( long Index, struct IModelObject * PVal );
__declspec(implementation_key(4462)) IModelObjectPtr ISplineOnSurface::GetAssociationObject ( long Index );
__declspec(implementation_key(4463)) void ISplineOnSurface::PutSplineTangent ( long Index, enum ksSplineTangentEnum PVal );
__declspec(implementation_key(4464)) enum ksSplineTangentEnum ISplineOnSurface::GetSplineTangent ( long Index );
__declspec(implementation_key(4465)) VARIANT_BOOL ISplineOnSurface::SetTangentVector ( long Index, double X, double Y, double Z );
__declspec(implementation_key(4466)) VARIANT_BOOL ISplineOnSurface::GetTangentVector ( long Index, double * X, double * Y, double * Z );
__declspec(implementation_key(4467)) VARIANT_BOOL ISplineOnSurface::Invert ( long Index );
__declspec(implementation_key(4468)) void ISplineOnSurface::PutVectorLenght ( long Index, double PVal );
__declspec(implementation_key(4469)) double ISplineOnSurface::GetVectorLenght ( long Index );
__declspec(implementation_key(4470)) void ISplineOnSurface::PutTangentCurve ( long Index, struct IModelObject * PVal );
__declspec(implementation_key(4471)) IModelObjectPtr ISplineOnSurface::GetTangentCurve ( long Index );
__declspec(implementation_key(4472)) VARIANT_BOOL ISplineOnSurface::ClearTangentParameters ( );
__declspec(implementation_key(4473)) void ISplineOnSurface::PutReverse ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(4474)) VARIANT_BOOL ISplineOnSurface::GetReverse ( long Index );
__declspec(implementation_key(4475)) ISplineOnSurfacePtr ISplinesOnSurfaces::GetSplineOnSurface ( const _variant_t & Index );
__declspec(implementation_key(4476)) ISplineOnSurfacePtr ISplinesOnSurfaces::Add ( );
__declspec(implementation_key(4477)) void IProjectionCurve::PutFaces ( const _variant_t & PVal );
__declspec(implementation_key(4478)) _variant_t IProjectionCurve::GetFaces ( );
__declspec(implementation_key(4479)) void IProjectionCurve::PutCurves ( const _variant_t & PVal );
__declspec(implementation_key(4480)) _variant_t IProjectionCurve::GetCurves ( );
__declspec(implementation_key(4481)) enum ksCurveProjectionTypeEnum IProjectionCurve::GetProjectionType ( );
__declspec(implementation_key(4482)) void IProjectionCurve::PutProjectionType ( enum ksCurveProjectionTypeEnum PVal );
__declspec(implementation_key(4483)) IVector3DPtr IProjectionCurve::GetVector3D ( );
__declspec(implementation_key(4484)) VARIANT_BOOL IProjectionCurve::GetTruncationByBounds ( );
__declspec(implementation_key(4485)) void IProjectionCurve::PutTruncationByBounds ( VARIANT_BOOL PVal );
__declspec(implementation_key(4486)) VARIANT_BOOL IProjectionCurve::GetAutoCheck ( );
__declspec(implementation_key(4487)) void IProjectionCurve::PutAutoCheck ( VARIANT_BOOL CheckValue );
__declspec(implementation_key(4488)) _variant_t IProjectionCurve::GetEdgesChecks ( );
__declspec(implementation_key(4489)) void IProjectionCurve::PutEdgesChecks ( const _variant_t & Checks );
__declspec(implementation_key(4490)) long IProjectionCurve::GetEdgesArraysCount ( );
__declspec(implementation_key(4491)) _variant_t IProjectionCurve::GetEdges ( long Index );
__declspec(implementation_key(4492)) VARIANT_BOOL IProjectionCurve::GetEdgesCheck ( long ContourIndex );
__declspec(implementation_key(4493)) void IProjectionCurve::PutEdgesCheck ( long ContourIndex, VARIANT_BOOL CheckValue );
__declspec(implementation_key(4494)) long IProjectionCurve::GetEdgesChecksCount ( );
__declspec(implementation_key(4495)) IProjectionCurvePtr IProjectionCurves::GetProjectionCurve ( const _variant_t & Index );
__declspec(implementation_key(4496)) IProjectionCurvePtr IProjectionCurves::Add ( );
__declspec(implementation_key(4497)) void ICurveBy2Projections::PutProjection1 ( const _variant_t & PVal );
__declspec(implementation_key(4498)) _variant_t ICurveBy2Projections::GetProjection1 ( );
__declspec(implementation_key(4499)) void ICurveBy2Projections::PutProjection2 ( const _variant_t & PVal );
__declspec(implementation_key(4500)) _variant_t ICurveBy2Projections::GetProjection2 ( );
__declspec(implementation_key(4501)) VARIANT_BOOL ICurveBy2Projections::GetAutoCheck ( );
__declspec(implementation_key(4502)) void ICurveBy2Projections::PutAutoCheck ( VARIANT_BOOL CheckValue );
__declspec(implementation_key(4503)) _variant_t ICurveBy2Projections::GetEdgesChecks ( );
__declspec(implementation_key(4504)) void ICurveBy2Projections::PutEdgesChecks ( const _variant_t & Checks );
__declspec(implementation_key(4505)) long ICurveBy2Projections::GetEdgesArraysCount ( );
__declspec(implementation_key(4506)) _variant_t ICurveBy2Projections::GetEdges ( long Index );
__declspec(implementation_key(4507)) VARIANT_BOOL ICurveBy2Projections::GetEdgesCheck ( long ContourIndex );
__declspec(implementation_key(4508)) void ICurveBy2Projections::PutEdgesCheck ( long ContourIndex, VARIANT_BOOL CheckValue );
__declspec(implementation_key(4509)) long ICurveBy2Projections::GetEdgesChecksCount ( );
__declspec(implementation_key(4510)) ICurveBy2ProjectionsPtr ICurvesBy2Projectionses::GetCurveBy2Projections ( const _variant_t & Index );
__declspec(implementation_key(4511)) ICurveBy2ProjectionsPtr ICurvesBy2Projectionses::Add ( );
__declspec(implementation_key(4512)) void IContour3D::PutContour3DType ( enum ksContour3DTypeEnum PVal );
__declspec(implementation_key(4513)) enum ksContour3DTypeEnum IContour3D::GetContour3DType ( );
__declspec(implementation_key(4514)) void IContour3D::PutEdges ( const _variant_t & PVal );
__declspec(implementation_key(4515)) _variant_t IContour3D::GetEdges ( );
__declspec(implementation_key(4516)) void IContour3D::PutCutMode ( enum ksEquidistant3DCutModeEnum PVal );
__declspec(implementation_key(4517)) enum ksEquidistant3DCutModeEnum IContour3D::GetCutMode ( );
__declspec(implementation_key(4518)) void IContour3D::PutRadius ( double PVal );
__declspec(implementation_key(4519)) double IContour3D::GetRadius ( );
__declspec(implementation_key(4520)) void IContour3D::PutEdgesVisibility ( VARIANT_BOOL PVal );
__declspec(implementation_key(4521)) VARIANT_BOOL IContour3D::GetEdgesVisibility ( );
__declspec(implementation_key(4522)) VARIANT_BOOL IContour3D::AddEdge ( struct IModelObject * Object );
__declspec(implementation_key(4523)) VARIANT_BOOL IContour3D::RemoveEdge ( long Index );
__declspec(implementation_key(4524)) long IContour3D::GetEdgesCount ( );
__declspec(implementation_key(4525)) void IContour3D::PutBuildingType ( enum ksContour3DBuildingTypeTypeEnum PVal );
__declspec(implementation_key(4526)) enum ksContour3DBuildingTypeTypeEnum IContour3D::GetBuildingType ( );
__declspec(implementation_key(4527)) IEquidistant3DPtr IContour3D::GetEquidistant ( );
__declspec(implementation_key(4528)) long IContour3D::GetPointsCount ( );
__declspec(implementation_key(4529)) void IContour3D::PutVarRadius ( long PointNum, double PVal );
__declspec(implementation_key(4530)) double IContour3D::GetVarRadius ( long PointNum );
__declspec(implementation_key(4531)) VARIANT_BOOL IContour3D::DelVarRadius ( long PointNum );
__declspec(implementation_key(4532)) VARIANT_BOOL IContour3D::GetIntersectionPoint ( long PointNum, double * X, double * Y, double * Z );
__declspec(implementation_key(4533)) IContour3DPtr IContours3D::GetContour3D ( const _variant_t & Index );
__declspec(implementation_key(4534)) IContour3DPtr IContours3D::Add ( );
__declspec(implementation_key(4535)) VARIANT_BOOL ILineSegment3D::GetPoint ( VARIANT_BOOL Begin, double * X, double * Y, double * Z );
__declspec(implementation_key(4536)) VARIANT_BOOL ILineSegment3D::SetPoint ( VARIANT_BOOL Begin, double X, double Y, double Z );
__declspec(implementation_key(4537)) void ILineSegment3D::PutAssociationObject ( VARIANT_BOOL Begin, struct IModelObject * PVal );
__declspec(implementation_key(4538)) IModelObjectPtr ILineSegment3D::GetAssociationObject ( VARIANT_BOOL Begin );
__declspec(implementation_key(4539)) void ILineSegment3D::PutPointType ( VARIANT_BOOL Begin, enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(4540)) enum ksPoint3DTypeEnum ILineSegment3D::GetPointType ( VARIANT_BOOL Begin );
__declspec(implementation_key(4541)) IKompasAPIObjectPtr ILineSegment3D::GetPointParameters ( VARIANT_BOOL Begin );
__declspec(implementation_key(4542)) double ILineSegment3D::GetLenght ( );
__declspec(implementation_key(4543)) void ILineSegment3D::PutLenght ( double Result );
__declspec(implementation_key(4544)) void ILineSegment3D::PutBuildingType ( enum ksLineSegment3DTypeEnum PVal );
__declspec(implementation_key(4545)) enum ksLineSegment3DTypeEnum ILineSegment3D::GetBuildingType ( );
__declspec(implementation_key(4546)) void ILineSegment3D::PutBasePlane ( struct IModelObject * PVal );
__declspec(implementation_key(4547)) IModelObjectPtr ILineSegment3D::GetBasePlane ( );
__declspec(implementation_key(4548)) void ILineSegment3D::PutAngle ( double Result );
__declspec(implementation_key(4549)) double ILineSegment3D::GetAngle ( );
__declspec(implementation_key(4550)) ILineSegment3DPtr ILineSegments3D::GetLineSegment3D ( const _variant_t & Index );
__declspec(implementation_key(4551)) ILineSegment3DPtr ILineSegments3D::Add ( );
__declspec(implementation_key(4552)) VARIANT_BOOL IUnhistoredCurve3D::Replace ( struct IModelObject * Curve, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(4553)) VARIANT_BOOL IUnhistoredCurve3D::Unwrap ( const _variant_t & Placement, double X, double Y, double Z, double Accuracy );
__declspec(implementation_key(4554)) IUnhistoredCurve3DPtr IUnhistoredCurves3D::GetUnhistoredCurve3D ( const _variant_t & Index );
__declspec(implementation_key(4555)) IUnhistoredCurve3DPtr IUnhistoredCurves3D::Add ( const _variant_t & Points );
__declspec(implementation_key(4556)) _variant_t IUnhistoredCurves3D::Load ( _bstr_t FileName, VARIANT_BOOL SewCurves );
__declspec(implementation_key(4557)) IUnhistoredCurve3DPtr IUnhistoredCurves3D::Convert ( struct IModelObject * Curve, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(4558)) void IPointsArrOnCurve::PutCurve ( struct IModelObject * PVal );
__declspec(implementation_key(4559)) IModelObjectPtr IPointsArrOnCurve::GetCurve ( );
__declspec(implementation_key(4560)) void IPointsArrOnCurve::PutBuildingType ( enum ksPointsArrOnCurveTypeEnum PVal );
__declspec(implementation_key(4561)) enum ksPointsArrOnCurveTypeEnum IPointsArrOnCurve::GetBuildingType ( );
__declspec(implementation_key(4562)) void IPointsArrOnCurve::PutCount ( long PVal );
__declspec(implementation_key(4563)) long IPointsArrOnCurve::GetCount ( );
__declspec(implementation_key(4564)) void IPointsArrOnCurve::PutStep ( double PVal );
__declspec(implementation_key(4565)) double IPointsArrOnCurve::GetStep ( );
__declspec(implementation_key(4566)) void IPointsArrOnCurve::PutByStep ( VARIANT_BOOL PVal );
__declspec(implementation_key(4567)) VARIANT_BOOL IPointsArrOnCurve::GetByStep ( );
__declspec(implementation_key(4568)) void IPointsArrOnCurve::PutReverseDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4569)) VARIANT_BOOL IPointsArrOnCurve::GetReverseDirection ( );
__declspec(implementation_key(4570)) void IPointsArrOnCurve::PutOnOffsets ( VARIANT_BOOL PVal );
__declspec(implementation_key(4571)) VARIANT_BOOL IPointsArrOnCurve::GetOnOffsets ( );
__declspec(implementation_key(4572)) void IPointsArrOnCurve::PutOffsetType ( VARIANT_BOOL FirstPoint, enum ksPoint3DCurveParamTypeEnum PVal );
__declspec(implementation_key(4573)) enum ksPoint3DCurveParamTypeEnum IPointsArrOnCurve::GetOffsetType ( VARIANT_BOOL FirstPoint );
__declspec(implementation_key(4574)) void IPointsArrOnCurve::PutOffset ( VARIANT_BOOL FirstPoint, double PVal );
__declspec(implementation_key(4575)) double IPointsArrOnCurve::GetOffset ( VARIANT_BOOL FirstPoint );
__declspec(implementation_key(4576)) void IPointsArrOnCurve::PutOffsetDirection ( VARIANT_BOOL FirstPoint, VARIANT_BOOL PVal );
__declspec(implementation_key(4577)) VARIANT_BOOL IPointsArrOnCurve::GetOffsetDirection ( VARIANT_BOOL FirstPoint );
__declspec(implementation_key(4578)) void IPointsArrOnCurve::PutSymbol ( enum ksAnnotationSymbolEnum PVal );
__declspec(implementation_key(4579)) enum ksAnnotationSymbolEnum IPointsArrOnCurve::GetSymbol ( );
__declspec(implementation_key(4580)) VARIANT_BOOL IPointsArrOnCurve::Destroy ( );
__declspec(implementation_key(4581)) IPointsArrOnCurvePtr IPointsArrsOnCurves::GetPointsArrOnCurve ( const _variant_t & Index );
__declspec(implementation_key(4582)) IPointsArrOnCurvePtr IPointsArrsOnCurves::Add ( );
__declspec(implementation_key(4583)) void IPointsArrOnSurface::PutFace ( struct IModelObject * PVal );
__declspec(implementation_key(4584)) IModelObjectPtr IPointsArrOnSurface::GetFace ( );
__declspec(implementation_key(4585)) void IPointsArrOnSurface::PutBuildingType ( enum ksPointsArrOnSurfaceTypeEnum PVal );
__declspec(implementation_key(4586)) enum ksPointsArrOnSurfaceTypeEnum IPointsArrOnSurface::GetBuildingType ( );
__declspec(implementation_key(4587)) void IPointsArrOnSurface::PutUCount ( long PVal );
__declspec(implementation_key(4588)) long IPointsArrOnSurface::GetUCount ( );
__declspec(implementation_key(4589)) void IPointsArrOnSurface::PutVCount ( long PVal );
__declspec(implementation_key(4590)) long IPointsArrOnSurface::GetVCount ( );
__declspec(implementation_key(4591)) void IPointsArrOnSurface::PutLinearDeflection ( double PVal );
__declspec(implementation_key(4592)) double IPointsArrOnSurface::GetLinearDeflection ( );
__declspec(implementation_key(4593)) void IPointsArrOnSurface::PutAngularDeflection ( double PVal );
__declspec(implementation_key(4594)) double IPointsArrOnSurface::GetAngularDeflection ( );
__declspec(implementation_key(4595)) void IPointsArrOnSurface::PutAllowBoundaries ( VARIANT_BOOL PVal );
__declspec(implementation_key(4596)) VARIANT_BOOL IPointsArrOnSurface::GetAllowBoundaries ( );
__declspec(implementation_key(4597)) void IPointsArrOnSurface::PutSymbol ( enum ksAnnotationSymbolEnum PVal );
__declspec(implementation_key(4598)) enum ksAnnotationSymbolEnum IPointsArrOnSurface::GetSymbol ( );
__declspec(implementation_key(4599)) VARIANT_BOOL IPointsArrOnSurface::Destroy ( );
__declspec(implementation_key(4600)) IPointsArrOnSurfacePtr IPointsArrsOnSurfaces::GetPointsArrOnSurface ( const _variant_t & Index );
__declspec(implementation_key(4601)) IPointsArrOnSurfacePtr IPointsArrsOnSurfaces::Add ( );
__declspec(implementation_key(4602)) void IPointsArrFromFile::PutPointsType ( enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(4603)) enum ksPoint3DTypeEnum IPointsArrFromFile::GetPointsType ( );
__declspec(implementation_key(4604)) void IPointsArrFromFile::PutFileName ( _bstr_t PVal );
__declspec(implementation_key(4605)) _bstr_t IPointsArrFromFile::GetFileName ( );
__declspec(implementation_key(4606)) void IPointsArrFromFile::PutSymbol ( enum ksAnnotationSymbolEnum PVal );
__declspec(implementation_key(4607)) enum ksAnnotationSymbolEnum IPointsArrFromFile::GetSymbol ( );
__declspec(implementation_key(4608)) VARIANT_BOOL IPointsArrFromFile::Destroy ( );
__declspec(implementation_key(4609)) IPointsArrFromFilePtr IPointsArrsFromFiles::GetPointsArrFromFile ( const _variant_t & Index );
__declspec(implementation_key(4610)) IPointsArrFromFilePtr IPointsArrsFromFiles::Add ( );
__declspec(implementation_key(4611)) VARIANT_BOOL IMathCurve3D::GetPoint ( double ParamT, double * X, double * Y, double * Z );
__declspec(implementation_key(4612)) VARIANT_BOOL IMathCurve3D::GetTangentVector ( double ParamT, double * X, double * Y, double * Z );
__declspec(implementation_key(4613)) VARIANT_BOOL IMathCurve3D::GetNormal ( double ParamT, double * X, double * Y, double * Z );
__declspec(implementation_key(4614)) VARIANT_BOOL IMathCurve3D::GetDerivativeT ( double ParamT, double * X, double * Y, double * Z );
__declspec(implementation_key(4615)) VARIANT_BOOL IMathCurve3D::GetDerivativeTT ( double ParamT, double * X, double * Y, double * Z );
__declspec(implementation_key(4616)) VARIANT_BOOL IMathCurve3D::GetDerivativeTTT ( double ParamT, double * X, double * Y, double * Z );
__declspec(implementation_key(4617)) double IMathCurve3D::GetParamMin ( );
__declspec(implementation_key(4618)) double IMathCurve3D::GetParamMax ( );
__declspec(implementation_key(4619)) VARIANT_BOOL IMathCurve3D::GetClosed ( );
__declspec(implementation_key(4620)) VARIANT_BOOL IMathCurve3D::GetPeriodic ( );
__declspec(implementation_key(4621)) double IMathCurve3D::GetMetricLength ( double StartParam, double EndParam );
__declspec(implementation_key(4622)) VARIANT_BOOL IMathCurve3D::GetGabarit ( double * X1, double * Y1, double * Z1, double * X2, double * Y2, double * Z2 );
__declspec(implementation_key(4623)) VARIANT_BOOL IMathCurve3D::GetDegenerate ( );
__declspec(implementation_key(4624)) enum ksMathCurve3DTypeEnum IMathCurve3D::GetCurveType ( );
__declspec(implementation_key(4625)) double IMathCurve3D::GetLength ( enum ksLengthUnitsEnum BitVector );
__declspec(implementation_key(4626)) VARIANT_BOOL IMathCurve3D::NearPointProjection ( double X, double Y, double Z, double * T, VARIANT_BOOL Ext );
__declspec(implementation_key(4627)) _variant_t IMathCurve3D::CalculatePolygon ( double Step );
__declspec(implementation_key(4628)) VARIANT_BOOL IMathCurve3D::GetCentre ( double * X, double * Y, double * Z );
__declspec(implementation_key(4629)) VARIANT_BOOL IMathCurve3D::GetWeightCentre ( double * X, double * Y, double * Z );
__declspec(implementation_key(4630)) double IMathCurve3D::GetRadius ( );
__declspec(implementation_key(4631)) IMathCurve3DPtr IAxis3D::GetMathCurve ( );
__declspec(implementation_key(4632)) IAxis3DPtr IAxes3D::GetAxis3D ( const _variant_t & Index );
__declspec(implementation_key(4633)) IAxis3DPtr IAxes3D::Add ( ksObj3dTypeEnum Type );
__declspec(implementation_key(4634)) VARIANT_BOOL IMathSurface3D::GetGabarit ( double * X1, double * Y1, double * Z1, double * X2, double * Y2, double * Z2 );
__declspec(implementation_key(4635)) VARIANT_BOOL IMathSurface3D::GetPoint ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4636)) VARIANT_BOOL IMathSurface3D::GetNormal ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4637)) VARIANT_BOOL IMathSurface3D::GetTangentVectorU ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4638)) VARIANT_BOOL IMathSurface3D::GetTangentVectorV ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4639)) VARIANT_BOOL IMathSurface3D::GetDerivativeU ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4640)) VARIANT_BOOL IMathSurface3D::GetDerivativeV ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4641)) VARIANT_BOOL IMathSurface3D::GetDerivativeUU ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4642)) VARIANT_BOOL IMathSurface3D::GetDerivativeVV ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4643)) VARIANT_BOOL IMathSurface3D::GetDerivativeUV ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4644)) VARIANT_BOOL IMathSurface3D::GetDerivativeUUU ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4645)) VARIANT_BOOL IMathSurface3D::GetDerivativeVVV ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4646)) VARIANT_BOOL IMathSurface3D::GetDerivativeUVV ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4647)) VARIANT_BOOL IMathSurface3D::GetDerivativeUUV ( double ParamU, double ParamV, double * X, double * Y, double * Z );
__declspec(implementation_key(4648)) double IMathSurface3D::GetParamUMin ( );
__declspec(implementation_key(4649)) double IMathSurface3D::GetParamUMax ( );
__declspec(implementation_key(4650)) double IMathSurface3D::GetParamVMin ( );
__declspec(implementation_key(4651)) double IMathSurface3D::GetParamVMax ( );
__declspec(implementation_key(4652)) VARIANT_BOOL IMathSurface3D::GetClosedU ( );
__declspec(implementation_key(4653)) VARIANT_BOOL IMathSurface3D::GetClosedV ( );
__declspec(implementation_key(4654)) enum ksMathSurface3DTypeEnum IMathSurface3D::GetSurface3DType ( );
__declspec(implementation_key(4655)) double IMathSurface3D::GetArea ( enum ksLengthUnitsEnum BitVector );
__declspec(implementation_key(4656)) VARIANT_BOOL IMathSurface3D::NearPointProjection ( double X, double Y, double Z, double * ParamU, double * ParamV, VARIANT_BOOL Ext );
__declspec(implementation_key(4657)) VARIANT_BOOL IMathSurface3D::GetBoundaryUVNurbs ( VARIANT_BOOL UV, VARIANT_BOOL Closed, long LoopIndex, long EdgeIndex, long * Degree, VARIANT * Points, VARIANT * Weights, VARIANT * Knots, double * TMin, double * TMax );
__declspec(implementation_key(4658)) long IMathSurface3D::GetBoundaryCount ( );
__declspec(implementation_key(4659)) long IMathSurface3D::GetEdgesCount ( long LoopIndex );
__declspec(implementation_key(4660)) VARIANT_BOOL IMathSurface3D::NearDirectPointProjection ( double X, double Y, double Z, double VX, double VY, double VZ, VARIANT_BOOL Extended, double * U, double * V );
__declspec(implementation_key(4661)) _variant_t IMathSurface3D::PointProjection ( double X, double Y, double Z, double VX, double VY, double VZ, VARIANT_BOOL Extended );
__declspec(implementation_key(4662)) double IMathSurface3D::GetAreaEx ( enum ksLengthUnitsEnum Unit, double AngleTolerance );
__declspec(implementation_key(4663)) IMathSurface3DPtr IPlane3D::GetSurface ( );
__declspec(implementation_key(4664)) IPlane3DPtr IPlanes3D::GetPlane3D ( const _variant_t & Index );
__declspec(implementation_key(4665)) IPlane3DPtr IPlanes3D::Add ( ksObj3dTypeEnum PlaneType );
__declspec(implementation_key(4666)) VARIANT_BOOL ILocalCSAxesDirectionParam::SetDirectingObject ( ksObj3dTypeEnum Axis, struct IModelObject * Object );
__declspec(implementation_key(4667)) IModelObjectPtr ILocalCSAxesDirectionParam::GetDirectingObject ( ksObj3dTypeEnum Axis );
__declspec(implementation_key(4668)) VARIANT_BOOL ILocalCSAxesDirectionParam::RotateAxis ( ksObj3dTypeEnum Axis );
__declspec(implementation_key(4669)) void ILocalCSAxesDirectionParam::PutAngleByOwnAxis ( ksObj3dTypeEnum Axis, double _arg2 );
__declspec(implementation_key(4670)) void ILocalCSEulerParam::PutNutationAngle ( double Result );
__declspec(implementation_key(4671)) double ILocalCSEulerParam::GetNutationAngle ( );
__declspec(implementation_key(4672)) void ILocalCSEulerParam::PutPrecessionAngle ( double Result );
__declspec(implementation_key(4673)) double ILocalCSEulerParam::GetPrecessionAngle ( );
__declspec(implementation_key(4674)) void ILocalCSEulerParam::PutRotationAngle ( double Result );
__declspec(implementation_key(4675)) double ILocalCSEulerParam::GetRotationAngle ( );
__declspec(implementation_key(4676)) enum ksRoughSignEnum IRoughParams::GetSignType ( );
__declspec(implementation_key(4677)) void IRoughParams::PutSignType ( enum ksRoughSignEnum Result );
__declspec(implementation_key(4678)) ITextPtr IRoughParams::GetRoughParamText ( );
__declspec(implementation_key(4679)) ITextPtr IRoughParams::GetProcessText ( );
__declspec(implementation_key(4680)) ITextPtr IRoughParams::GetBaseLengthText ( );
__declspec(implementation_key(4681)) ITextPtr IRoughParams::GetTrendText ( );
__declspec(implementation_key(4682)) VARIANT_BOOL IRoughParams::GetProcessingByContour ( );
__declspec(implementation_key(4683)) void IRoughParams::PutProcessingByContour ( VARIANT_BOOL Result );
__declspec(implementation_key(4684)) enum ksShelfDirectionEnum IRoughParams::GetShelfDirection ( );
__declspec(implementation_key(4685)) void IRoughParams::PutShelfDirection ( enum ksShelfDirectionEnum Result );
__declspec(implementation_key(4686)) double IRoughParams::GetLeaderLength ( );
__declspec(implementation_key(4687)) void IRoughParams::PutLeaderLength ( double Result );
__declspec(implementation_key(4688)) double IRoughParams::GetLeaderAngle ( );
__declspec(implementation_key(4689)) void IRoughParams::PutLeaderAngle ( double Result );
__declspec(implementation_key(4690)) enum ksArrowEnum IRoughParams::GetArrowType ( );
__declspec(implementation_key(4691)) void IRoughParams::PutArrowType ( enum ksArrowEnum Result );
__declspec(implementation_key(4692)) VARIANT_BOOL IRoughParams::GetArrowInside ( );
__declspec(implementation_key(4693)) void IRoughParams::PutArrowInside ( VARIANT_BOOL Result );
__declspec(implementation_key(4694)) long IBranchs3D::GetBranchCount ( );
__declspec(implementation_key(4695)) VARIANT_BOOL IBranchs3D::GetBranchBeginPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(4696)) VARIANT_BOOL IBranchs3D::SetBranchBeginPoint ( double X, double Y, double Z );
__declspec(implementation_key(4697)) VARIANT_BOOL IBranchs3D::GetBranchEndPoint ( long Index, double * X, double * Y, double * Z );
__declspec(implementation_key(4698)) VARIANT_BOOL IBranchs3D::SetBranchEndPoint ( long Index, double X, double Y, double Z );
__declspec(implementation_key(4699)) void IBranchs3D::PutBranchPoints ( long Index, const _variant_t & PVal );
__declspec(implementation_key(4700)) _variant_t IBranchs3D::GetBranchPoints ( long Index );
__declspec(implementation_key(4701)) long IBranchs3D::GetBranchPointsCount ( long Index );
__declspec(implementation_key(4702)) VARIANT_BOOL IBranchs3D::AddBranch ( const _variant_t & Points, struct IModelObject * Object );
__declspec(implementation_key(4703)) VARIANT_BOOL IBranchs3D::AddBranchByPoint ( double X, double Y, double Z, struct IModelObject * Object );
__declspec(implementation_key(4704)) VARIANT_BOOL IBranchs3D::DeleteBranch ( long Index );
__declspec(implementation_key(4705)) IModelObjectPtr IBranchs3D::GetBranchObject ( long Index );
__declspec(implementation_key(4706)) _variant_t IBranchs3D::GetBranchObjects ( );
__declspec(implementation_key(4707)) _variant_t IBranchs3D::GetBranchEndPoints ( );
__declspec(implementation_key(4708)) VARIANT_BOOL ILocalCSOrientByObjectParam::SetOrientationObject ( struct IModelObject * Object );
__declspec(implementation_key(4709)) IModelObjectPtr ILocalCSOrientByObjectParam::GetOrientationObject ( );
__declspec(implementation_key(4710)) void ILocalCSObject::PutModelObjectParamType ( enum ksModelObjectParamTypeEnum PVal );
__declspec(implementation_key(4711)) enum ksModelObjectParamTypeEnum ILocalCSObject::GetModelObjectParamType ( );
__declspec(implementation_key(4712)) ILocalCoordinateSystemPtr ILocalCSObject::GetLocalCoordinateSystem ( );
__declspec(implementation_key(4713)) IModelObjectPtr ILocalCSObject::GetCoordinateSystem ( );
__declspec(implementation_key(4714)) void ILocalCSObject::PutCoordinateSystem ( struct IModelObject * PVal );
__declspec(implementation_key(4715)) _variant_t ISurfacePatch::GetEdges ( );
__declspec(implementation_key(4716)) void ISurfacePatch::PutEdges ( const _variant_t & PVal );
__declspec(implementation_key(4717)) ISurfacePatchPtr ISurfacePatches::GetSurfacePatch ( const _variant_t & Index );
__declspec(implementation_key(4718)) ISurfacePatchPtr ISurfacePatches::Add ( );
__declspec(implementation_key(4719)) _variant_t IFaceRemover::GetFaces ( );
__declspec(implementation_key(4720)) void IFaceRemover::PutFaces ( const _variant_t & PVal );
__declspec(implementation_key(4721)) VARIANT_BOOL IFaceRemover::GetSaveBody ( );
__declspec(implementation_key(4722)) void IFaceRemover::PutSaveBody ( VARIANT_BOOL Result );
__declspec(implementation_key(4723)) IFaceRemoverPtr IFaceRemovers::GetFaceRemover ( const _variant_t & Index );
__declspec(implementation_key(4724)) IFaceRemoverPtr IFaceRemovers::Add ( );
__declspec(implementation_key(4725)) _variant_t ISurfaceSewer::GetShells ( );
__declspec(implementation_key(4726)) void ISurfaceSewer::PutShells ( const _variant_t & PVal );
__declspec(implementation_key(4727)) double ISurfaceSewer::GetPrecision ( );
__declspec(implementation_key(4728)) void ISurfaceSewer::PutPrecision ( double Result );
__declspec(implementation_key(4729)) VARIANT_BOOL ISurfaceSewer::GetCreateBody ( );
__declspec(implementation_key(4730)) void ISurfaceSewer::PutCreateBody ( VARIANT_BOOL Result );
__declspec(implementation_key(4731)) ISurfaceSewerPtr ISurfaceSewers::GetSurfaceSewer ( const _variant_t & Index );
__declspec(implementation_key(4732)) ISurfaceSewerPtr ISurfaceSewers::Add ( );
__declspec(implementation_key(4733)) VARIANT_BOOL INurbsSurface::GetNurbsParams ( VARIANT_BOOL ClosedV, VARIANT_BOOL ClosedU, long * DegreeV, long * DegreeU, long * NPV, long * NPU, VARIANT * Points, VARIANT * Weights, VARIANT * KnotsV, VARIANT * KnotsU );
__declspec(implementation_key(4734)) VARIANT_BOOL INurbsSurface::SetNurbsParams ( VARIANT_BOOL ClosedV, VARIANT_BOOL ClosedU, long DegreeV, long DegreeU, long NPV, long NPU, const _variant_t & Points, const _variant_t & Weights, const _variant_t & KnotsV, const _variant_t & KnotsU );
__declspec(implementation_key(4735)) VARIANT_BOOL INurbsSurface::InitParamByFace ( struct IModelObject * Face );
__declspec(implementation_key(4736)) VARIANT_BOOL INurbsSurface::GetClosedU ( );
__declspec(implementation_key(4737)) void INurbsSurface::PutClosedU ( VARIANT_BOOL PVal );
__declspec(implementation_key(4738)) VARIANT_BOOL INurbsSurface::GetClosedV ( );
__declspec(implementation_key(4739)) void INurbsSurface::PutClosedV ( VARIANT_BOOL PVal );
__declspec(implementation_key(4740)) long INurbsSurface::GetBoundaryCount ( );
__declspec(implementation_key(4741)) VARIANT_BOOL INurbsSurface::AddBoundary ( VARIANT_BOOL UV, VARIANT_BOOL Closed, long Degree, const _variant_t & Points, const _variant_t & Weights, const _variant_t & Knots, double TMin, double TMax );
__declspec(implementation_key(4742)) VARIANT_BOOL INurbsSurface::GetBoundary ( VARIANT_BOOL UV, VARIANT_BOOL Closed, long BoundaryIndex, long * Degree, VARIANT * Points, VARIANT * Weights, VARIANT * Knots, double * TMin, double * TMax );
__declspec(implementation_key(4743)) VARIANT_BOOL INurbsSurface::DeleteBoundary ( long BoundaryIndex );
__declspec(implementation_key(4744)) INurbsSurfacePtr INurbsSurfaces::GetNurbsSurface ( const _variant_t & Index );
__declspec(implementation_key(4745)) INurbsSurfacePtr INurbsSurfaces::Add ( );
__declspec(implementation_key(4746)) void IRuledSurface::PutCurves1 ( const _variant_t & Curves );
__declspec(implementation_key(4747)) _variant_t IRuledSurface::GetCurves1 ( );
__declspec(implementation_key(4748)) void IRuledSurface::PutCurves2 ( const _variant_t & Curves );
__declspec(implementation_key(4749)) _variant_t IRuledSurface::GetCurves2 ( );
__declspec(implementation_key(4750)) void IRuledSurface::PutCheckSelfIntersection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4751)) VARIANT_BOOL IRuledSurface::GetCheckSelfIntersection ( );
__declspec(implementation_key(4752)) void IRuledSurface::PutAutoSegmentation ( VARIANT_BOOL PVal );
__declspec(implementation_key(4753)) VARIANT_BOOL IRuledSurface::GetAutoSegmentation ( );
__declspec(implementation_key(4754)) VARIANT_BOOL IRuledSurface::AddNewEdge ( long IndexAt );
__declspec(implementation_key(4755)) VARIANT_BOOL IRuledSurface::DeleteEdge ( long Index );
__declspec(implementation_key(4756)) long IRuledSurface::GetEdgesCount ( );
__declspec(implementation_key(4757)) VARIANT_BOOL IRuledSurface::SetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double X, double Y, double Z, double * T, struct IModelObject * Segment, struct IModelObject * AssociateVertex );
__declspec(implementation_key(4758)) VARIANT_BOOL IRuledSurface::GetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double * X, double * Y, double * Z, double * T, struct IModelObject * * Segment, struct IModelObject * * AssociateVertex );
__declspec(implementation_key(4759)) VARIANT_BOOL IRuledSurface::GetEdgePointParams ( VARIANT * Points1, VARIANT * T1, VARIANT * Segments1, VARIANT * AssociateVertexes1, VARIANT * Points2, VARIANT * T2, VARIANT * Segments2, VARIANT * AssociateVertexes2 );
__declspec(implementation_key(4760)) void IRuledSurface::PutConsiderComplianceVertices ( VARIANT_BOOL PVal );
__declspec(implementation_key(4761)) VARIANT_BOOL IRuledSurface::GetConsiderComplianceVertices ( );
__declspec(implementation_key(4762)) IRuledSurfacePtr IRuledSurfaces::GetRuledSurface ( const _variant_t & Index );
__declspec(implementation_key(4763)) IRuledSurfacePtr IRuledSurfaces::Add ( );
__declspec(implementation_key(4764)) void IEquidistantSurface::PutBaseSurface ( const _variant_t & Result );
__declspec(implementation_key(4765)) _variant_t IEquidistantSurface::GetBaseSurface ( );
__declspec(implementation_key(4766)) void IEquidistantSurface::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4767)) VARIANT_BOOL IEquidistantSurface::GetDirection ( );
__declspec(implementation_key(4768)) void IEquidistantSurface::PutDistance ( double PVal );
__declspec(implementation_key(4769)) double IEquidistantSurface::GetDistance ( );
__declspec(implementation_key(4770)) IEquidistantSurfacePtr IEquidistantSurfaces::GetEquidistantSurface ( const _variant_t & Index );
__declspec(implementation_key(4771)) IEquidistantSurfacePtr IEquidistantSurfaces::Add ( );
__declspec(implementation_key(4772)) void ITrimmedSurface::PutSurface ( const _variant_t & PVal );
__declspec(implementation_key(4773)) _variant_t ITrimmedSurface::GetSurface ( );
__declspec(implementation_key(4774)) void ITrimmedSurface::PutCutObject ( const _variant_t & PVal );
__declspec(implementation_key(4775)) _variant_t ITrimmedSurface::GetCutObject ( );
__declspec(implementation_key(4776)) void ITrimmedSurface::PutSense ( VARIANT_BOOL Result );
__declspec(implementation_key(4777)) VARIANT_BOOL ITrimmedSurface::GetSense ( );
__declspec(implementation_key(4778)) void ITrimmedSurface::PutOperationResult ( enum ksOperationResultEnum Result );
__declspec(implementation_key(4779)) enum ksOperationResultEnum ITrimmedSurface::GetOperationResult ( );
__declspec(implementation_key(4780)) ITrimmedSurfacePtr ITrimmedSurfaces::GetTrimmedSurface ( const _variant_t & Index );
__declspec(implementation_key(4781)) ITrimmedSurfacePtr ITrimmedSurfaces::Add ( );
__declspec(implementation_key(4782)) _variant_t IExtensionSurface::GetEdges ( );
__declspec(implementation_key(4783)) void IExtensionSurface::PutEdges ( const _variant_t & PVal );
__declspec(implementation_key(4784)) void IExtensionSurface::PutExtensionType ( enum ksExtensionSurfaceTypeEnum PVal );
__declspec(implementation_key(4785)) enum ksExtensionSurfaceTypeEnum IExtensionSurface::GetExtensionType ( );
__declspec(implementation_key(4786)) void IExtensionSurface::PutExtensionLimitType ( enum ksExtensionLimitTypeEnum PVal );
__declspec(implementation_key(4787)) enum ksExtensionLimitTypeEnum IExtensionSurface::GetExtensionLimitType ( );
__declspec(implementation_key(4788)) void IExtensionSurface::PutLength ( double Result );
__declspec(implementation_key(4789)) double IExtensionSurface::GetLength ( );
__declspec(implementation_key(4790)) void IExtensionSurface::PutSideEdges ( VARIANT_BOOL Result );
__declspec(implementation_key(4791)) VARIANT_BOOL IExtensionSurface::GetSideEdges ( );
__declspec(implementation_key(4792)) void IExtensionSurface::PutDirObject ( struct IModelObject * PVal );
__declspec(implementation_key(4793)) IModelObjectPtr IExtensionSurface::GetDirObject ( );
__declspec(implementation_key(4794)) void IExtensionSurface::PutTargetObject ( struct IModelObject * PVal );
__declspec(implementation_key(4795)) IModelObjectPtr IExtensionSurface::GetTargetObject ( );
__declspec(implementation_key(4796)) void IExtensionSurface::PutSense ( VARIANT_BOOL Result );
__declspec(implementation_key(4797)) VARIANT_BOOL IExtensionSurface::GetSense ( );
__declspec(implementation_key(4798)) IVector3DPtr IExtensionSurface::GetBuildingVectorParameters ( );
__declspec(implementation_key(4799)) IExtensionSurfacePtr IExtensionSurfaces::GetExtensionSurface ( const _variant_t & Index );
__declspec(implementation_key(4800)) IExtensionSurfacePtr IExtensionSurfaces::Add ( );
__declspec(implementation_key(4801)) enum ksMeshPointsSurfaceBuildingTypeEnum IMeshPointsSurface::GetBuildingType ( );
__declspec(implementation_key(4802)) void IMeshPointsSurface::PutBuildingType ( enum ksMeshPointsSurfaceBuildingTypeEnum PVal );
__declspec(implementation_key(4803)) VARIANT_BOOL IMeshPointsSurface::GetParams ( VARIANT_BOOL * ClosedV, VARIANT_BOOL * ClosedU, long * DegreeV, long * DegreeU, long * RowsCount, long * ColumsCount, VARIANT * Points, VARIANT * Weights );
__declspec(implementation_key(4804)) VARIANT_BOOL IMeshPointsSurface::SetParams ( VARIANT_BOOL ClosedV, VARIANT_BOOL ClosedU, long DegreeV, long DegreeU, long RowsCount, long ColumsCount, const _variant_t & Points, const _variant_t & Weights );
__declspec(implementation_key(4805)) VARIANT_BOOL IMeshPointsSurface::InitParamByFace ( struct IModelObject * Face );
__declspec(implementation_key(4806)) VARIANT_BOOL IMeshPointsSurface::GetClosedU ( );
__declspec(implementation_key(4807)) void IMeshPointsSurface::PutClosedU ( VARIANT_BOOL PVal );
__declspec(implementation_key(4808)) VARIANT_BOOL IMeshPointsSurface::GetClosedV ( );
__declspec(implementation_key(4809)) void IMeshPointsSurface::PutClosedV ( VARIANT_BOOL PVal );
__declspec(implementation_key(4810)) long IMeshPointsSurface::GetDegreeU ( );
__declspec(implementation_key(4811)) void IMeshPointsSurface::PutDegreeU ( long PVal );
__declspec(implementation_key(4812)) long IMeshPointsSurface::GetDegreeV ( );
__declspec(implementation_key(4813)) void IMeshPointsSurface::PutDegreeV ( long PVal );
__declspec(implementation_key(4814)) VARIANT_BOOL IMeshPointsSurface::BeginPointsSeries ( VARIANT_BOOL AddNewRow, long IndexAt );
__declspec(implementation_key(4815)) IKompasAPIObjectPtr IMeshPointsSurface::AddPoint ( double X, double Y, double Z, double Weight, enum ksPoint3DTypeEnum PointType, struct IModelObject * AssociationObject );
__declspec(implementation_key(4816)) VARIANT_BOOL IMeshPointsSurface::EndPointsSeries ( );
__declspec(implementation_key(4817)) VARIANT_BOOL IMeshPointsSurface::AddPointsSeries ( VARIANT_BOOL AddNewRow, long IndexAt, const _variant_t & Points, const _variant_t & Weights );
__declspec(implementation_key(4818)) VARIANT_BOOL IMeshPointsSurface::DeletePointsSeries ( VARIANT_BOOL DeleteRow, long Index );
__declspec(implementation_key(4819)) VARIANT_BOOL IMeshPointsSurface::ClearPointsSeries ( );
__declspec(implementation_key(4820)) long IMeshPointsSurface::GetRowsCount ( );
__declspec(implementation_key(4821)) long IMeshPointsSurface::GetColumnsCount ( );
__declspec(implementation_key(4822)) void IMeshPointsSurface::PutPointType ( long IRow, long ICol, enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(4823)) enum ksPoint3DTypeEnum IMeshPointsSurface::GetPointType ( long IRow, long ICol );
__declspec(implementation_key(4824)) IKompasAPIObjectPtr IMeshPointsSurface::GetPointParameters ( long IRow, long ICol );
__declspec(implementation_key(4825)) VARIANT_BOOL IMeshPointsSurface::GetPoint ( long IRow, long ICol, double * X, double * Y, double * Z, double * Weight );
__declspec(implementation_key(4826)) VARIANT_BOOL IMeshPointsSurface::SetPoint ( long IRow, long ICol, double X, double Y, double Z, double Weight );
__declspec(implementation_key(4827)) VARIANT_BOOL IMeshPointsSurface::GetCheckSelfIntersection ( );
__declspec(implementation_key(4828)) void IMeshPointsSurface::PutCheckSelfIntersection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4829)) void IMeshPointsSurface::PutAssociationObject ( long IRow, long ICol, struct IModelObject * PVal );
__declspec(implementation_key(4830)) IModelObjectPtr IMeshPointsSurface::GetAssociationObject ( long IRow, long ICol );
__declspec(implementation_key(4831)) IMeshPointsSurfacePtr IMeshPointsSurfaces::GetMeshPointsSurface ( const _variant_t & Index );
__declspec(implementation_key(4832)) IMeshPointsSurfacePtr IMeshPointsSurfaces::Add ( );
__declspec(implementation_key(4833)) IMeshPointsSurfacePtr IMeshPointsSurfaces::Load ( _bstr_t FileName );
__declspec(implementation_key(4834)) enum ksCloudPointsSurfaceBuildingTypeEnum ICloudPointsSurface::GetBuildingType ( );
__declspec(implementation_key(4835)) void ICloudPointsSurface::PutBuildingType ( enum ksCloudPointsSurfaceBuildingTypeEnum PVal );
__declspec(implementation_key(4836)) _variant_t ICloudPointsSurface::GetPoints ( );
__declspec(implementation_key(4837)) void ICloudPointsSurface::PutPoints ( const _variant_t & Points );
__declspec(implementation_key(4838)) long ICloudPointsSurface::GetDegree ( );
__declspec(implementation_key(4839)) void ICloudPointsSurface::PutDegree ( long PVal );
__declspec(implementation_key(4840)) enum ksCloudTypeEnum ICloudPointsSurface::GetCloudType ( );
__declspec(implementation_key(4841)) void ICloudPointsSurface::PutCloudType ( enum ksCloudTypeEnum Type );
__declspec(implementation_key(4842)) ILocalCoordinateSystemPtr ICloudPointsSurface::GetCloudLCS ( );
__declspec(implementation_key(4843)) void ICloudPointsSurface::PutCloudLCS ( struct ILocalCoordinateSystem * Object );
__declspec(implementation_key(4844)) VARIANT_BOOL ICloudPointsSurface::GetFixedPosition ( );
__declspec(implementation_key(4845)) void ICloudPointsSurface::PutFixedPosition ( VARIANT_BOOL PVal );
__declspec(implementation_key(4846)) IKompasAPIObjectPtr ICloudPointsSurface::AddPoint ( double X, double Y, double Z, enum ksPoint3DTypeEnum PVal, struct IModelObject * AssociationObject );
__declspec(implementation_key(4847)) long ICloudPointsSurface::GetPointsCount ( );
__declspec(implementation_key(4848)) void ICloudPointsSurface::PutPointType ( long Index, enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(4849)) enum ksPoint3DTypeEnum ICloudPointsSurface::GetPointType ( long Index );
__declspec(implementation_key(4850)) IKompasAPIObjectPtr ICloudPointsSurface::GetPointParameters ( long Index );
__declspec(implementation_key(4851)) void ICloudPointsSurface::PutAssociationObject ( long Index, struct IModelObject * PVal );
__declspec(implementation_key(4852)) IModelObjectPtr ICloudPointsSurface::GetAssociationObject ( long Index );
__declspec(implementation_key(4853)) VARIANT_BOOL ICloudPointsSurface::GetCheckSelfIntersection ( );
__declspec(implementation_key(4854)) void ICloudPointsSurface::PutCheckSelfIntersection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4855)) VARIANT_BOOL ICloudPointsSurface::ClearPoints ( );
__declspec(implementation_key(4856)) VARIANT_BOOL ICloudPointsSurface::AddPoints ( const _variant_t & Points );
__declspec(implementation_key(4857)) VARIANT_BOOL ICloudPointsSurface::GetPoint ( long Index, double * X, double * Y, double * Z );
__declspec(implementation_key(4858)) VARIANT_BOOL ICloudPointsSurface::SetPoint ( long Index, double X, double Y, double Z );
__declspec(implementation_key(4859)) VARIANT_BOOL ICloudPointsSurface::DeletePoint ( long Index );
__declspec(implementation_key(4860)) ICloudPointsSurfacePtr ICloudPointsSurfaces::GetCloudPointsSurface ( const _variant_t & Index );
__declspec(implementation_key(4861)) ICloudPointsSurfacePtr ICloudPointsSurfaces::Add ( );
__declspec(implementation_key(4862)) ICloudPointsSurfacePtr ICloudPointsSurfaces::Load ( _bstr_t FileName );
__declspec(implementation_key(4863)) _variant_t IImportedSurface::GetPoints ( long * UPCount, long * VPCount );
__declspec(implementation_key(4864)) VARIANT_BOOL IImportedSurface::SetPoints ( long UPCount, long VPCount, const _variant_t & Points );
__declspec(implementation_key(4865)) VARIANT_BOOL IImportedSurface::ClearPointsSeries ( );
__declspec(implementation_key(4866)) VARIANT_BOOL IImportedSurface::BeginPointsSeries ( VARIANT_BOOL UV, long IndexAt );
__declspec(implementation_key(4867)) VARIANT_BOOL IImportedSurface::AddPoint ( double X, double Y, double Z );
__declspec(implementation_key(4868)) VARIANT_BOOL IImportedSurface::EndPointsSeries ( );
__declspec(implementation_key(4869)) VARIANT_BOOL IImportedSurface::AddPointsSeries ( VARIANT_BOOL UV, long IndexAt, const _variant_t & Arr );
__declspec(implementation_key(4870)) long IImportedSurface::GetPointsVCount ( );
__declspec(implementation_key(4871)) long IImportedSurface::GetPointsUCount ( );
__declspec(implementation_key(4872)) VARIANT_BOOL IImportedSurface::GetPoint ( long UIndex, long VIndex, double * X, double * Y, double * Z );
__declspec(implementation_key(4873)) VARIANT_BOOL IImportedSurface::SetPoint ( long UIndex, long VIndex, double X, double Y, double Z );
__declspec(implementation_key(4874)) VARIANT_BOOL IImportedSurface::DeletePointsSeries ( VARIANT_BOOL UV, long Index );
__declspec(implementation_key(4875)) IImportedSurfacePtr IImportedSurfaces::GetImportedSurface ( const _variant_t & Index );
__declspec(implementation_key(4876)) IImportedSurfacePtr IImportedSurfaces::Add ( );
__declspec(implementation_key(4877)) _variant_t IImportedSurfaces::Load ( _bstr_t FileName, VARIANT_BOOL SewSurfaces );
__declspec(implementation_key(4878)) void INurbsSurfaceByCurvesMesh::PutUCurves ( const _variant_t & Curves );
__declspec(implementation_key(4879)) _variant_t INurbsSurfaceByCurvesMesh::GetUCurves ( );
__declspec(implementation_key(4880)) void INurbsSurfaceByCurvesMesh::PutVCurves ( const _variant_t & Curves );
__declspec(implementation_key(4881)) _variant_t INurbsSurfaceByCurvesMesh::GetVCurves ( );
__declspec(implementation_key(4882)) void INurbsSurfaceByCurvesMesh::PutCheckSelfIntersection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4883)) VARIANT_BOOL INurbsSurfaceByCurvesMesh::GetCheckSelfIntersection ( );
__declspec(implementation_key(4884)) void INurbsSurfaceByCurvesMesh::PutUClosed ( VARIANT_BOOL PVal );
__declspec(implementation_key(4885)) VARIANT_BOOL INurbsSurfaceByCurvesMesh::GetUClosed ( );
__declspec(implementation_key(4886)) void INurbsSurfaceByCurvesMesh::PutVClosed ( VARIANT_BOOL PVal );
__declspec(implementation_key(4887)) VARIANT_BOOL INurbsSurfaceByCurvesMesh::GetVClosed ( );
__declspec(implementation_key(4888)) void INurbsSurfaceByCurvesMesh::PutConnectSurface ( long Index, struct IModelObject * PVal );
__declspec(implementation_key(4889)) IModelObjectPtr INurbsSurfaceByCurvesMesh::GetConnectSurface ( long Index );
__declspec(implementation_key(4890)) void INurbsSurfaceByCurvesMesh::PutConnectType ( long Index, enum ksConnectTypeEnum PVal );
__declspec(implementation_key(4891)) enum ksConnectTypeEnum INurbsSurfaceByCurvesMesh::GetConnectType ( long Index );
__declspec(implementation_key(4892)) INurbsSurfaceByCurvesMeshPtr INurbsSurfacesByCurvesMeshs::GetNurbsSurfaceByCurvesMesh ( const _variant_t & Index );
__declspec(implementation_key(4893)) INurbsSurfaceByCurvesMeshPtr INurbsSurfacesByCurvesMeshs::Add ( );
__declspec(implementation_key(4894)) void IJointSurface::PutCurves1 ( const _variant_t & PVal );
__declspec(implementation_key(4895)) _variant_t IJointSurface::GetCurves1 ( );
__declspec(implementation_key(4896)) void IJointSurface::PutCurves2 ( const _variant_t & PVal );
__declspec(implementation_key(4897)) _variant_t IJointSurface::GetCurves2 ( );
__declspec(implementation_key(4898)) void IJointSurface::PutFace1 ( struct IModelObject * PVal );
__declspec(implementation_key(4899)) IModelObjectPtr IJointSurface::GetFace1 ( );
__declspec(implementation_key(4900)) void IJointSurface::PutFace2 ( struct IModelObject * PVal );
__declspec(implementation_key(4901)) IModelObjectPtr IJointSurface::GetFace2 ( );
__declspec(implementation_key(4902)) void IJointSurface::PutFace1ConnectType ( enum ksConnectTypeEnum PVal );
__declspec(implementation_key(4903)) enum ksConnectTypeEnum IJointSurface::GetFace1ConnectType ( );
__declspec(implementation_key(4904)) void IJointSurface::PutFace2ConnectType ( enum ksConnectTypeEnum PVal );
__declspec(implementation_key(4905)) enum ksConnectTypeEnum IJointSurface::GetFace2ConnectType ( );
__declspec(implementation_key(4906)) void IJointSurface::PutSense1 ( VARIANT_BOOL Result );
__declspec(implementation_key(4907)) VARIANT_BOOL IJointSurface::GetSense1 ( );
__declspec(implementation_key(4908)) void IJointSurface::PutSense2 ( VARIANT_BOOL Result );
__declspec(implementation_key(4909)) VARIANT_BOOL IJointSurface::GetSense2 ( );
__declspec(implementation_key(4910)) void IJointSurface::PutTension1 ( double PVal );
__declspec(implementation_key(4911)) double IJointSurface::GetTension1 ( );
__declspec(implementation_key(4912)) void IJointSurface::PutTension2 ( double PVal );
__declspec(implementation_key(4913)) double IJointSurface::GetTension2 ( );
__declspec(implementation_key(4914)) void IJointSurface::PutSideEdges1 ( VARIANT_BOOL Result );
__declspec(implementation_key(4915)) VARIANT_BOOL IJointSurface::GetSideEdges1 ( );
__declspec(implementation_key(4916)) void IJointSurface::PutSideEdges2 ( VARIANT_BOOL Result );
__declspec(implementation_key(4917)) VARIANT_BOOL IJointSurface::GetSideEdges2 ( );
__declspec(implementation_key(4918)) void IJointSurface::PutGeneralTension ( VARIANT_BOOL PVal );
__declspec(implementation_key(4919)) VARIANT_BOOL IJointSurface::GetGeneralTension ( );
__declspec(implementation_key(4920)) void IJointSurface::PutCheckSelfIntersection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4921)) VARIANT_BOOL IJointSurface::GetCheckSelfIntersection ( );
__declspec(implementation_key(4922)) void IJointSurface::PutAutoSegmentation ( VARIANT_BOOL PVal );
__declspec(implementation_key(4923)) VARIANT_BOOL IJointSurface::GetAutoSegmentation ( );
__declspec(implementation_key(4924)) VARIANT_BOOL IJointSurface::AddNewEdge ( long IndexAt );
__declspec(implementation_key(4925)) VARIANT_BOOL IJointSurface::DeleteEdge ( long Index );
__declspec(implementation_key(4926)) long IJointSurface::GetEdgesCount ( );
__declspec(implementation_key(4927)) VARIANT_BOOL IJointSurface::SetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double X, double Y, double Z, double * T, struct IModelObject * AssociateVertex );
__declspec(implementation_key(4928)) VARIANT_BOOL IJointSurface::GetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double * X, double * Y, double * Z, double * T, struct IModelObject * * AssociateVertex );
__declspec(implementation_key(4929)) VARIANT_BOOL IJointSurface::GetEdgePointParams ( VARIANT * Points1, VARIANT * T1, VARIANT * AssociateVertexes1, VARIANT * Points2, VARIANT * T2, VARIANT * AssociateVertexes2 );
__declspec(implementation_key(4930)) IJointSurfacePtr IJointSurfaces::GetJointSurface ( const _variant_t & Index );
__declspec(implementation_key(4931)) IJointSurfacePtr IJointSurfaces::Add ( );
__declspec(implementation_key(4932)) void IRestoredSurface::PutFace ( struct IModelObject * PVal );
__declspec(implementation_key(4933)) IModelObjectPtr IRestoredSurface::GetFace ( );
__declspec(implementation_key(4934)) IRestoredSurfacePtr IRestoredSurfaces::GetRestoredSurface ( const _variant_t & Index );
__declspec(implementation_key(4935)) IRestoredSurfacePtr IRestoredSurfaces::Add ( );
__declspec(implementation_key(4936)) _variant_t IFaceMover::GetFaces ( );
__declspec(implementation_key(4937)) VARIANT_BOOL IFaceMover::SetFaces ( const _variant_t & Faces, VARIANT_BOOL TangentFaces );
__declspec(implementation_key(4938)) void IFaceMover::PutOffset ( double PVal );
__declspec(implementation_key(4939)) double IFaceMover::GetOffset ( );
__declspec(implementation_key(4940)) void IFaceMover::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(4941)) VARIANT_BOOL IFaceMover::GetDirection ( );
__declspec(implementation_key(4942)) IFaceMoverPtr IFaceMovers::GetFaceMover ( const _variant_t & Index );
__declspec(implementation_key(4943)) IFaceMoverPtr IFaceMovers::Add ( );
__declspec(implementation_key(4944)) void ILinearPattern::PutAxis1 ( struct IModelObject * PVal );
__declspec(implementation_key(4945)) IModelObjectPtr ILinearPattern::GetAxis1 ( );
__declspec(implementation_key(4946)) IVector3DPtr ILinearPattern::GetVector1 ( );
__declspec(implementation_key(4947)) void ILinearPattern::PutAngle1 ( double Val );
__declspec(implementation_key(4948)) double ILinearPattern::GetAngle1 ( );
__declspec(implementation_key(4949)) void ILinearPattern::PutDirection1 ( VARIANT_BOOL Val );
__declspec(implementation_key(4950)) VARIANT_BOOL ILinearPattern::GetDirection1 ( );
__declspec(implementation_key(4951)) void ILinearPattern::PutStep1 ( double PVal );
__declspec(implementation_key(4952)) double ILinearPattern::GetStep1 ( );
__declspec(implementation_key(4953)) void ILinearPattern::PutBoundaryInstancesStepFactor1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(4954)) VARIANT_BOOL ILinearPattern::GetBoundaryInstancesStepFactor1 ( );
__declspec(implementation_key(4955)) void ILinearPattern::PutCount1 ( long Val );
__declspec(implementation_key(4956)) long ILinearPattern::GetCount1 ( );
__declspec(implementation_key(4957)) void ILinearPattern::PutAxis2 ( struct IModelObject * PVal );
__declspec(implementation_key(4958)) IModelObjectPtr ILinearPattern::GetAxis2 ( );
__declspec(implementation_key(4959)) IVector3DPtr ILinearPattern::GetVector2 ( );
__declspec(implementation_key(4960)) void ILinearPattern::PutAngle2 ( double PVal );
__declspec(implementation_key(4961)) double ILinearPattern::GetAngle2 ( );
__declspec(implementation_key(4962)) void ILinearPattern::PutDirection2 ( VARIANT_BOOL Val );
__declspec(implementation_key(4963)) VARIANT_BOOL ILinearPattern::GetDirection2 ( );
__declspec(implementation_key(4964)) void ILinearPattern::PutStep2 ( double PVal );
__declspec(implementation_key(4965)) double ILinearPattern::GetStep2 ( );
__declspec(implementation_key(4966)) void ILinearPattern::PutBoundaryInstancesStepFactor2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(4967)) VARIANT_BOOL ILinearPattern::GetBoundaryInstancesStepFactor2 ( );
__declspec(implementation_key(4968)) void ILinearPattern::PutCount2 ( long PVal );
__declspec(implementation_key(4969)) long ILinearPattern::GetCount2 ( );
__declspec(implementation_key(4970)) void ILinearPattern::PutBuildingType ( enum ksLinearPatternBuildingTypeEnum PVal );
__declspec(implementation_key(4971)) enum ksLinearPatternBuildingTypeEnum ILinearPattern::GetBuildingType ( );
__declspec(implementation_key(4972)) VARIANT_BOOL ILinearPattern::SetBaseExemplarPlacement ( long Index1, long Index2 );
__declspec(implementation_key(4973)) VARIANT_BOOL ILinearPattern::GetBaseExemplarPlacement ( long * Index1, long * Index2 );
__declspec(implementation_key(4974)) void IPointDrivenPattern::PutDrivenObjects ( const _variant_t & Objects );
__declspec(implementation_key(4975)) _variant_t IPointDrivenPattern::GetDrivenObjects ( );
__declspec(implementation_key(4976)) VARIANT_BOOL IPointDrivenPattern::IsSuitableDrivenObject ( struct IModelObject * Object );
__declspec(implementation_key(4977)) VARIANT_BOOL IPointDrivenPattern::ClearDrivenObjects ( );
__declspec(implementation_key(4978)) void IPointDrivenPattern::PutProjectionPoints ( VARIANT_BOOL PVal );
__declspec(implementation_key(4979)) VARIANT_BOOL IPointDrivenPattern::GetProjectionPoints ( );
__declspec(implementation_key(4980)) void IPointDrivenPattern::PutSaveInitialOrientation ( VARIANT_BOOL PVal );
__declspec(implementation_key(4981)) VARIANT_BOOL IPointDrivenPattern::GetSaveInitialOrientation ( );
__declspec(implementation_key(4982)) void IPointDrivenPattern::PutOrientationType ( enum ksPatternExemplarsOrientationTypeEnum PVal );
__declspec(implementation_key(4983)) enum ksPatternExemplarsOrientationTypeEnum IPointDrivenPattern::GetOrientationType ( );
__declspec(implementation_key(4984)) void IPointDrivenPattern::PutOrientationObject ( struct IModelObject * PVal );
__declspec(implementation_key(4985)) IModelObjectPtr IPointDrivenPattern::GetOrientationObject ( );
__declspec(implementation_key(4986)) void ICircularPattern::PutAxis ( struct IModelObject * PVal );
__declspec(implementation_key(4987)) IModelObjectPtr ICircularPattern::GetAxis ( );
__declspec(implementation_key(4988)) void ICircularPattern::PutStep1 ( double PVal );
__declspec(implementation_key(4989)) double ICircularPattern::GetStep1 ( );
__declspec(implementation_key(4990)) void ICircularPattern::PutBoundaryInstancesStepFactor1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(4991)) VARIANT_BOOL ICircularPattern::GetBoundaryInstancesStepFactor1 ( );
__declspec(implementation_key(4992)) void ICircularPattern::PutCount1 ( long Val );
__declspec(implementation_key(4993)) long ICircularPattern::GetCount1 ( );
__declspec(implementation_key(4994)) void ICircularPattern::PutStep2 ( double PVal );
__declspec(implementation_key(4995)) double ICircularPattern::GetStep2 ( );
__declspec(implementation_key(4996)) void ICircularPattern::PutBoundaryInstancesStepFactor2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(4997)) VARIANT_BOOL ICircularPattern::GetBoundaryInstancesStepFactor2 ( );
__declspec(implementation_key(4998)) void ICircularPattern::PutCount2 ( long PVal );
__declspec(implementation_key(4999)) long ICircularPattern::GetCount2 ( );
__declspec(implementation_key(5000)) void ICircularPattern::PutSaveInitialOrientation ( VARIANT_BOOL PVal );
__declspec(implementation_key(5001)) VARIANT_BOOL ICircularPattern::GetSaveInitialOrientation ( );
__declspec(implementation_key(5002)) void ICircularPattern::PutReverseDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5003)) VARIANT_BOOL ICircularPattern::GetReverseDirection ( );
__declspec(implementation_key(5004)) VARIANT_BOOL ICircularPattern::SetBaseExemplarPlacement ( long Index1, long Index2 );
__declspec(implementation_key(5005)) VARIANT_BOOL ICircularPattern::GetBaseExemplarPlacement ( long * Index1, long * Index2 );
__declspec(implementation_key(5006)) void ICircularPattern::PutBuildingType ( enum ksCircularPatternBuildingTypeEnum PVal );
__declspec(implementation_key(5007)) enum ksCircularPatternBuildingTypeEnum ICircularPattern::GetBuildingType ( );
__declspec(implementation_key(5008)) void ICircularPattern::PutStepByAxis ( double PVal );
__declspec(implementation_key(5009)) double ICircularPattern::GetStepByAxis ( );
__declspec(implementation_key(5010)) void IPathPattern::PutCurves ( const _variant_t & Curves );
__declspec(implementation_key(5011)) _variant_t IPathPattern::GetCurves ( );
__declspec(implementation_key(5012)) void IPathPattern::PutCount ( long PVal );
__declspec(implementation_key(5013)) long IPathPattern::GetCount ( );
__declspec(implementation_key(5014)) void IPathPattern::PutStartingPoint ( struct IModelObject * Object );
__declspec(implementation_key(5015)) IModelObjectPtr IPathPattern::GetStartingPoint ( );
__declspec(implementation_key(5016)) void IPathPattern::PutByStep ( VARIANT_BOOL PVal );
__declspec(implementation_key(5017)) VARIANT_BOOL IPathPattern::GetByStep ( );
__declspec(implementation_key(5018)) void IPathPattern::PutStep ( double PVal );
__declspec(implementation_key(5019)) double IPathPattern::GetStep ( );
__declspec(implementation_key(5020)) void IPathPattern::PutBoundaryInstancesStepFactor ( VARIANT_BOOL PVal );
__declspec(implementation_key(5021)) VARIANT_BOOL IPathPattern::GetBoundaryInstancesStepFactor ( );
__declspec(implementation_key(5022)) void IPathPattern::PutSaveInitialOrientation ( VARIANT_BOOL PVal );
__declspec(implementation_key(5023)) VARIANT_BOOL IPathPattern::GetSaveInitialOrientation ( );
__declspec(implementation_key(5024)) void IPathPattern::PutReverseDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5025)) VARIANT_BOOL IPathPattern::GetReverseDirection ( );
__declspec(implementation_key(5026)) void IDerivedPattern::PutMasterPattern ( struct IModelObject * Object );
__declspec(implementation_key(5027)) IModelObjectPtr IDerivedPattern::GetMasterPattern ( );
__declspec(implementation_key(5028)) void IDerivedPattern::PutOrientBySample ( VARIANT_BOOL PVal );
__declspec(implementation_key(5029)) VARIANT_BOOL IDerivedPattern::GetOrientBySample ( );
__declspec(implementation_key(5030)) void IDerivedPattern::PutSampleExemplar ( struct IModelObject * Object );
__declspec(implementation_key(5031)) IModelObjectPtr IDerivedPattern::GetSampleExemplar ( );
__declspec(implementation_key(5032)) void IDerivedPattern::PutAllowNesting ( VARIANT_BOOL PVal );
__declspec(implementation_key(5033)) VARIANT_BOOL IDerivedPattern::GetAllowNesting ( );
__declspec(implementation_key(5034)) void IDerivedPattern::PutAllowDeleted ( VARIANT_BOOL PVal );
__declspec(implementation_key(5035)) VARIANT_BOOL IDerivedPattern::GetAllowDeleted ( );
__declspec(implementation_key(5036)) void IVector3DBy2VertexesParameters::PutVertex1 ( struct IModelObject * PVal );
__declspec(implementation_key(5037)) IModelObjectPtr IVector3DBy2VertexesParameters::GetVertex1 ( );
__declspec(implementation_key(5038)) void IVector3DBy2VertexesParameters::PutVertex2 ( struct IModelObject * PVal );
__declspec(implementation_key(5039)) IModelObjectPtr IVector3DBy2VertexesParameters::GetVertex2 ( );
__declspec(implementation_key(5040)) void IVector3DBy2VertexesParameters::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5041)) VARIANT_BOOL IVector3DBy2VertexesParameters::GetDirection ( );
__declspec(implementation_key(5042)) void IMirrorPattern::PutPlane ( struct IModelObject * Object );
__declspec(implementation_key(5043)) IModelObjectPtr IMirrorPattern::GetPlane ( );
__declspec(implementation_key(5044)) void IMirrorPattern::PutSaveInitialObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(5045)) VARIANT_BOOL IMirrorPattern::GetSaveInitialObjects ( );
__declspec(implementation_key(5046)) void IVector3DByCoefficientsParameters::PutLocalCS ( struct ILocalCoordinateSystem * PVal );
__declspec(implementation_key(5047)) ILocalCoordinateSystemPtr IVector3DByCoefficientsParameters::GetLocalCS ( );
__declspec(implementation_key(5048)) void IVector3DByCoefficientsParameters::PutCoefficientByX ( double PVal );
__declspec(implementation_key(5049)) double IVector3DByCoefficientsParameters::GetCoefficientByX ( );
__declspec(implementation_key(5050)) void IVector3DByCoefficientsParameters::PutCoefficientByY ( double PVal );
__declspec(implementation_key(5051)) double IVector3DByCoefficientsParameters::GetCoefficientByY ( );
__declspec(implementation_key(5052)) void IVector3DByCoefficientsParameters::PutCoefficientByZ ( double PVal );
__declspec(implementation_key(5053)) double IVector3DByCoefficientsParameters::GetCoefficientByZ ( );
__declspec(implementation_key(5054)) void IVector3DBy2AnglesParameters::PutLocalCS ( struct ILocalCoordinateSystem * PVal );
__declspec(implementation_key(5055)) ILocalCoordinateSystemPtr IVector3DBy2AnglesParameters::GetLocalCS ( );
__declspec(implementation_key(5056)) void IVector3DBy2AnglesParameters::PutAngleA ( double PVal );
__declspec(implementation_key(5057)) double IVector3DBy2AnglesParameters::GetAngleA ( );
__declspec(implementation_key(5058)) void IVector3DBy2AnglesParameters::PutAngleB ( double PVal );
__declspec(implementation_key(5059)) double IVector3DBy2AnglesParameters::GetAngleB ( );
__declspec(implementation_key(5060)) void IVector3DByLocalCSParameters::PutLocalCS ( struct ILocalCoordinateSystem * PVal );
__declspec(implementation_key(5061)) ILocalCoordinateSystemPtr IVector3DByLocalCSParameters::GetLocalCS ( );
__declspec(implementation_key(5062)) void IVector3DByLocalCSParameters::PutAxisType ( ksObj3dTypeEnum PVal );
__declspec(implementation_key(5063)) ksObj3dTypeEnum IVector3DByLocalCSParameters::GetAxisType ( );
__declspec(implementation_key(5064)) void IVector3DByLocalCSParameters::PutAngle ( double PVal );
__declspec(implementation_key(5065)) double IVector3DByLocalCSParameters::GetAngle ( );
__declspec(implementation_key(5066)) void IVector3DByLocalCSParameters::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5067)) VARIANT_BOOL IVector3DByLocalCSParameters::GetDirection ( );
__declspec(implementation_key(5068)) void IVector3DByObjectParameters::PutBaseObject ( struct IModelObject * PVal );
__declspec(implementation_key(5069)) IModelObjectPtr IVector3DByObjectParameters::GetBaseObject ( );
__declspec(implementation_key(5070)) void IVector3DByObjectParameters::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5071)) VARIANT_BOOL IVector3DByObjectParameters::GetDirection ( );
__declspec(implementation_key(5072)) void IVector3DAlongSurfaceNormalParameters::PutBaseObject ( struct IModelObject * PVal );
__declspec(implementation_key(5073)) IModelObjectPtr IVector3DAlongSurfaceNormalParameters::GetBaseObject ( );
__declspec(implementation_key(5074)) void IVector3DAlongSurfaceNormalParameters::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5075)) VARIANT_BOOL IVector3DAlongSurfaceNormalParameters::GetDirection ( );
__declspec(implementation_key(5076)) void IVector3DAlongSurfaceNormalParameters::PutU ( double PVal );
__declspec(implementation_key(5077)) double IVector3DAlongSurfaceNormalParameters::GetU ( );
__declspec(implementation_key(5078)) void IVector3DAlongSurfaceNormalParameters::PutV ( double PVal );
__declspec(implementation_key(5079)) double IVector3DAlongSurfaceNormalParameters::GetV ( );
__declspec(implementation_key(5080)) void IVector3DByCurveParameters::PutCurve ( struct IModelObject * PVal );
__declspec(implementation_key(5081)) IModelObjectPtr IVector3DByCurveParameters::GetCurve ( );
__declspec(implementation_key(5082)) void IVector3DByCurveParameters::PutOffset ( double PVal );
__declspec(implementation_key(5083)) double IVector3DByCurveParameters::GetOffset ( );
__declspec(implementation_key(5084)) void IVector3DByCurveParameters::PutVectorType ( enum ksBasisVectorTypeEnum PVal );
__declspec(implementation_key(5085)) enum ksBasisVectorTypeEnum IVector3DByCurveParameters::GetVectorType ( );
__declspec(implementation_key(5086)) void IVector3DByCurveParameters::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5087)) VARIANT_BOOL IVector3DByCurveParameters::GetDirection ( );
__declspec(implementation_key(5088)) void IVector3DByScreenNormalParameters::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5089)) VARIANT_BOOL IVector3DByScreenNormalParameters::GetDirection ( );
__declspec(implementation_key(5090)) void IVector3DByScreenNormalParameters::PutFix ( VARIANT_BOOL PVal );
__declspec(implementation_key(5091)) VARIANT_BOOL IVector3DByScreenNormalParameters::GetFix ( );
__declspec(implementation_key(5092)) void ICutRotated::PutCut ( VARIANT_BOOL PVal );
__declspec(implementation_key(5093)) VARIANT_BOOL ICutRotated::GetCut ( );
__declspec(implementation_key(5094)) void IRotatedSurface::PutClosedShell ( VARIANT_BOOL PVal );
__declspec(implementation_key(5095)) VARIANT_BOOL IRotatedSurface::GetClosedShell ( );
__declspec(implementation_key(5096)) void IPoint3DParamBySphere::PutR ( double PVal );
__declspec(implementation_key(5097)) double IPoint3DParamBySphere::GetR ( );
__declspec(implementation_key(5098)) void IPoint3DParamBySphere::PutA ( double PVal );
__declspec(implementation_key(5099)) double IPoint3DParamBySphere::GetA ( );
__declspec(implementation_key(5100)) void IPoint3DParamBySphere::PutB ( double PVal );
__declspec(implementation_key(5101)) double IPoint3DParamBySphere::GetB ( );
__declspec(implementation_key(5102)) void IPoint3DParamBySphere::PutAssociationObject ( struct IModelObject * Result );
__declspec(implementation_key(5103)) IModelObjectPtr IPoint3DParamBySphere::GetAssociationObject ( );
__declspec(implementation_key(5104)) void IPoint3DParamBySphere::PutRadiusObject ( struct IModelObject * Result );
__declspec(implementation_key(5105)) IModelObjectPtr IPoint3DParamBySphere::GetRadiusObject ( );
__declspec(implementation_key(5106)) void IPoint3DParamByCylinder::PutR ( double PVal );
__declspec(implementation_key(5107)) double IPoint3DParamByCylinder::GetR ( );
__declspec(implementation_key(5108)) void IPoint3DParamByCylinder::PutA ( double PVal );
__declspec(implementation_key(5109)) double IPoint3DParamByCylinder::GetA ( );
__declspec(implementation_key(5110)) void IPoint3DParamByCylinder::PutZ ( double PVal );
__declspec(implementation_key(5111)) double IPoint3DParamByCylinder::GetZ ( );
__declspec(implementation_key(5112)) void IPoint3DParamByCylinder::PutAssociationObject ( struct IModelObject * Result );
__declspec(implementation_key(5113)) IModelObjectPtr IPoint3DParamByCylinder::GetAssociationObject ( );
__declspec(implementation_key(5114)) void IPoint3DParamByCylinder::PutRadiusObject ( struct IModelObject * Result );
__declspec(implementation_key(5115)) IModelObjectPtr IPoint3DParamByCylinder::GetRadiusObject ( );
__declspec(implementation_key(5116)) void IMeshAroundPointParam::PutMeshType ( enum ksMeshAroundPointTypeEnum PVal );
__declspec(implementation_key(5117)) enum ksMeshAroundPointTypeEnum IMeshAroundPointParam::GetMeshType ( );
__declspec(implementation_key(5118)) void IMeshAroundPointParam::PutOffsetU ( double PVal );
__declspec(implementation_key(5119)) double IMeshAroundPointParam::GetOffsetU ( );
__declspec(implementation_key(5120)) void IMeshAroundPointParam::PutOffsetV ( double PVal );
__declspec(implementation_key(5121)) double IMeshAroundPointParam::GetOffsetV ( );
__declspec(implementation_key(5122)) void IMeshAroundPointParam::PutAssociationObject ( struct IModelObject * PVal );
__declspec(implementation_key(5123)) IModelObjectPtr IMeshAroundPointParam::GetAssociationObject ( );
__declspec(implementation_key(5124)) VARIANT_BOOL IMeshAroundPointParam::GetOffsetPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(5125)) VARIANT_BOOL IMeshAroundPointParam::SetOffsetPoint ( double X, double Y, double Z );
__declspec(implementation_key(5126)) void IMeshAroundPointParam::PutStep1 ( double PVal );
__declspec(implementation_key(5127)) double IMeshAroundPointParam::GetStep1 ( );
__declspec(implementation_key(5128)) void IMeshAroundPointParam::PutStep2 ( double PVal );
__declspec(implementation_key(5129)) double IMeshAroundPointParam::GetStep2 ( );
__declspec(implementation_key(5130)) void IMeshAroundPointParam::PutStepU ( double PVal );
__declspec(implementation_key(5131)) double IMeshAroundPointParam::GetStepU ( );
__declspec(implementation_key(5132)) void IMeshAroundPointParam::PutStepV ( double PVal );
__declspec(implementation_key(5133)) double IMeshAroundPointParam::GetStepV ( );
__declspec(implementation_key(5134)) void IMeshAroundPointParam::PutStep ( double PVal );
__declspec(implementation_key(5135)) double IMeshAroundPointParam::GetStep ( );
__declspec(implementation_key(5136)) void IMeshAroundPointParam::PutRayCount ( long PVal );
__declspec(implementation_key(5137)) long IMeshAroundPointParam::GetRayCount ( );
__declspec(implementation_key(5138)) void IMeshAroundPointParam::PutRadialStep ( double PVal );
__declspec(implementation_key(5139)) double IMeshAroundPointParam::GetRadialStep ( );
__declspec(implementation_key(5140)) void IMeshAroundPointParam::PutMeshAngle ( double PVal );
__declspec(implementation_key(5141)) double IMeshAroundPointParam::GetMeshAngle ( );
__declspec(implementation_key(5142)) void IAxis3DBy2Points::PutPoint1 ( struct IModelObject * PVal );
__declspec(implementation_key(5143)) IModelObjectPtr IAxis3DBy2Points::GetPoint1 ( );
__declspec(implementation_key(5144)) void IAxis3DBy2Points::PutPoint2 ( struct IModelObject * PVal );
__declspec(implementation_key(5145)) IModelObjectPtr IAxis3DBy2Points::GetPoint2 ( );
__declspec(implementation_key(5146)) void IAxis3DBy2Planes::PutPlane1 ( struct IModelObject * PVal );
__declspec(implementation_key(5147)) IModelObjectPtr IAxis3DBy2Planes::GetPlane1 ( );
__declspec(implementation_key(5148)) void IAxis3DBy2Planes::PutPlane2 ( struct IModelObject * PVal );
__declspec(implementation_key(5149)) IModelObjectPtr IAxis3DBy2Planes::GetPlane2 ( );
__declspec(implementation_key(5150)) void IAxis3DByConeface::PutFace ( struct IModelObject * PVal );
__declspec(implementation_key(5151)) IModelObjectPtr IAxis3DByConeface::GetFace ( );
__declspec(implementation_key(5152)) void IAxis3DByEdge::PutEdge ( struct IModelObject * PVal );
__declspec(implementation_key(5153)) IModelObjectPtr IAxis3DByEdge::GetEdge ( );
__declspec(implementation_key(5154)) void IAxis3DByPointAndObject::PutPoint ( struct IModelObject * PVal );
__declspec(implementation_key(5155)) IModelObjectPtr IAxis3DByPointAndObject::GetPoint ( );
__declspec(implementation_key(5156)) void IAxis3DByPointAndObject::PutDirectObject ( struct IModelObject * PVal );
__declspec(implementation_key(5157)) IModelObjectPtr IAxis3DByPointAndObject::GetDirectObject ( );
__declspec(implementation_key(5158)) IVector3DPtr IAxis3DByPointAndObject::GetVector3D ( );
__declspec(implementation_key(5159)) void IAxis3DByPointAndObject::PutParallel ( VARIANT_BOOL PVal );
__declspec(implementation_key(5160)) VARIANT_BOOL IAxis3DByPointAndObject::GetParallel ( );
__declspec(implementation_key(5161)) void IAxis3DByOperation::PutOperation ( struct IModelObject * PVal );
__declspec(implementation_key(5162)) IModelObjectPtr IAxis3DByOperation::GetOperation ( );
__declspec(implementation_key(5163)) void IPlane3DByPlaneCurve::PutCurve ( struct IModelObject * PVal );
__declspec(implementation_key(5164)) IModelObjectPtr IPlane3DByPlaneCurve::GetCurve ( );
__declspec(implementation_key(5165)) void IPlane3DTangentToFaceInPoint::PutFace ( struct IModelObject * PVal );
__declspec(implementation_key(5166)) IModelObjectPtr IPlane3DTangentToFaceInPoint::GetFace ( );
__declspec(implementation_key(5167)) void IPlane3DTangentToFaceInPoint::PutPoint ( struct IModelObject * PVal );
__declspec(implementation_key(5168)) IModelObjectPtr IPlane3DTangentToFaceInPoint::GetPoint ( );
__declspec(implementation_key(5169)) void IPlane3DTangentToFaceInPoint::PutParamU ( double PVal );
__declspec(implementation_key(5170)) double IPlane3DTangentToFaceInPoint::GetParamU ( );
__declspec(implementation_key(5171)) void IPlane3DTangentToFaceInPoint::PutParamV ( double PVal );
__declspec(implementation_key(5172)) double IPlane3DTangentToFaceInPoint::GetParamV ( );
__declspec(implementation_key(5173)) void IPlane3DByOffset::PutOffset ( double PVal );
__declspec(implementation_key(5174)) double IPlane3DByOffset::GetOffset ( );
__declspec(implementation_key(5175)) void IPlane3DByOffset::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5176)) VARIANT_BOOL IPlane3DByOffset::GetDirection ( );
__declspec(implementation_key(5177)) void IPlane3DByOffset::PutBasePlane ( struct IModelObject * Result );
__declspec(implementation_key(5178)) IModelObjectPtr IPlane3DByOffset::GetBasePlane ( );
__declspec(implementation_key(5179)) void IPlane3DBy3Points::PutPoint1 ( struct IModelObject * PVal );
__declspec(implementation_key(5180)) IModelObjectPtr IPlane3DBy3Points::GetPoint1 ( );
__declspec(implementation_key(5181)) void IPlane3DBy3Points::PutPoint2 ( struct IModelObject * PVal );
__declspec(implementation_key(5182)) IModelObjectPtr IPlane3DBy3Points::GetPoint2 ( );
__declspec(implementation_key(5183)) void IPlane3DBy3Points::PutPoint3 ( struct IModelObject * PVal );
__declspec(implementation_key(5184)) IModelObjectPtr IPlane3DBy3Points::GetPoint3 ( );
__declspec(implementation_key(5185)) void IPlane3DByAngle::PutAngle ( double PVal );
__declspec(implementation_key(5186)) double IPlane3DByAngle::GetAngle ( );
__declspec(implementation_key(5187)) void IPlane3DByAngle::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5188)) VARIANT_BOOL IPlane3DByAngle::GetDirection ( );
__declspec(implementation_key(5189)) void IPlane3DByAngle::PutBasePlane ( struct IModelObject * Result );
__declspec(implementation_key(5190)) IModelObjectPtr IPlane3DByAngle::GetBasePlane ( );
__declspec(implementation_key(5191)) void IPlane3DByAngle::PutBaseLine ( struct IModelObject * Result );
__declspec(implementation_key(5192)) IModelObjectPtr IPlane3DByAngle::GetBaseLine ( );
__declspec(implementation_key(5193)) void IPlane3DByEdgeAndPoint::PutPoint ( struct IModelObject * Result );
__declspec(implementation_key(5194)) IModelObjectPtr IPlane3DByEdgeAndPoint::GetPoint ( );
__declspec(implementation_key(5195)) void IPlane3DByEdgeAndPoint::PutEdge ( struct IModelObject * Result );
__declspec(implementation_key(5196)) IModelObjectPtr IPlane3DByEdgeAndPoint::GetEdge ( );
__declspec(implementation_key(5197)) void IPlane3DParallelByPoint::PutPoint ( struct IModelObject * Result );
__declspec(implementation_key(5198)) IModelObjectPtr IPlane3DParallelByPoint::GetPoint ( );
__declspec(implementation_key(5199)) void IPlane3DParallelByPoint::PutPlane ( struct IModelObject * Result );
__declspec(implementation_key(5200)) IModelObjectPtr IPlane3DParallelByPoint::GetPlane ( );
__declspec(implementation_key(5201)) void IPlane3DPerpendicularByEdge::PutPoint ( struct IModelObject * Result );
__declspec(implementation_key(5202)) IModelObjectPtr IPlane3DPerpendicularByEdge::GetPoint ( );
__declspec(implementation_key(5203)) void IPlane3DPerpendicularByEdge::PutEdge ( struct IModelObject * Result );
__declspec(implementation_key(5204)) IModelObjectPtr IPlane3DPerpendicularByEdge::GetEdge ( );
__declspec(implementation_key(5205)) IVector3DPtr IPlane3DPerpendicularByEdge::GetVector3D ( );
__declspec(implementation_key(5206)) void IPlane3DNormalToSurface::PutAngle ( double PVal );
__declspec(implementation_key(5207)) double IPlane3DNormalToSurface::GetAngle ( );
__declspec(implementation_key(5208)) void IPlane3DNormalToSurface::PutPlane ( struct IModelObject * Result );
__declspec(implementation_key(5209)) IModelObjectPtr IPlane3DNormalToSurface::GetPlane ( );
__declspec(implementation_key(5210)) void IPlane3DNormalToSurface::PutFace ( struct IModelObject * Result );
__declspec(implementation_key(5211)) IModelObjectPtr IPlane3DNormalToSurface::GetFace ( );
__declspec(implementation_key(5212)) void IPlane3DNormalToSurface::PutAngleDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5213)) VARIANT_BOOL IPlane3DNormalToSurface::GetAngleDirection ( );
__declspec(implementation_key(5214)) void IPlane3DMiddle::PutObject1 ( struct IModelObject * PVal );
__declspec(implementation_key(5215)) IModelObjectPtr IPlane3DMiddle::GetObject1 ( );
__declspec(implementation_key(5216)) void IPlane3DMiddle::PutObject2 ( struct IModelObject * PVal );
__declspec(implementation_key(5217)) IModelObjectPtr IPlane3DMiddle::GetObject2 ( );
__declspec(implementation_key(5218)) void IPlane3DMiddle::PutOriention ( VARIANT_BOOL PVal );
__declspec(implementation_key(5219)) VARIANT_BOOL IPlane3DMiddle::GetOriention ( );
__declspec(implementation_key(5220)) void IPlane3DByEdgeAndPlane::PutPlane ( struct IModelObject * PVal );
__declspec(implementation_key(5221)) IModelObjectPtr IPlane3DByEdgeAndPlane::GetPlane ( );
__declspec(implementation_key(5222)) void IPlane3DByEdgeAndPlane::PutEdge ( struct IModelObject * PVal );
__declspec(implementation_key(5223)) IModelObjectPtr IPlane3DByEdgeAndPlane::GetEdge ( );
__declspec(implementation_key(5224)) void IPlane3DByEdgeAndPlane::PutParallel ( VARIANT_BOOL PVal );
__declspec(implementation_key(5225)) VARIANT_BOOL IPlane3DByEdgeAndPlane::GetParallel ( );
__declspec(implementation_key(5226)) void IPlane3DBy2Edge::PutEdge1 ( struct IModelObject * PVal );
__declspec(implementation_key(5227)) IModelObjectPtr IPlane3DBy2Edge::GetEdge1 ( );
__declspec(implementation_key(5228)) void IPlane3DBy2Edge::PutEdge2 ( struct IModelObject * PVal );
__declspec(implementation_key(5229)) IModelObjectPtr IPlane3DBy2Edge::GetEdge2 ( );
__declspec(implementation_key(5230)) void IPlane3DBy2Edge::PutParallel ( VARIANT_BOOL PVal );
__declspec(implementation_key(5231)) VARIANT_BOOL IPlane3DBy2Edge::GetParallel ( );
__declspec(implementation_key(5232)) void IPlane3DTangentToFace::PutFace ( struct IModelObject * PVal );
__declspec(implementation_key(5233)) IModelObjectPtr IPlane3DTangentToFace::GetFace ( );
__declspec(implementation_key(5234)) void IPlane3DTangentToFace::PutPlane ( struct IModelObject * PVal );
__declspec(implementation_key(5235)) IModelObjectPtr IPlane3DTangentToFace::GetPlane ( );
__declspec(implementation_key(5236)) void IPlane3DTangentToFace::PutAngle ( double PVal );
__declspec(implementation_key(5237)) double IPlane3DTangentToFace::GetAngle ( );
__declspec(implementation_key(5238)) void IPlane3DTangentToFace::PutOrientation ( VARIANT_BOOL PVal );
__declspec(implementation_key(5239)) VARIANT_BOOL IPlane3DTangentToFace::GetOrientation ( );
__declspec(implementation_key(5240)) void IToleranceRecalc::PutName ( _bstr_t PVal );
__declspec(implementation_key(5241)) _bstr_t IToleranceRecalc::GetName ( );
__declspec(implementation_key(5242)) void IToleranceRecalc::PutCurrent ( VARIANT_BOOL PVal );
__declspec(implementation_key(5243)) VARIANT_BOOL IToleranceRecalc::GetCurrent ( );
__declspec(implementation_key(5244)) long IToleranceRecalc::GetItemsCount ( );
__declspec(implementation_key(5245)) IKompasAPIObjectPtr IToleranceRecalc::GetItem ( const _variant_t & Index );
__declspec(implementation_key(5246)) VARIANT_BOOL IToleranceRecalc::AddItems ( struct IKompasAPIObject * Object );
__declspec(implementation_key(5247)) VARIANT_BOOL IToleranceRecalc::AddAllVariables ( );
__declspec(implementation_key(5248)) VARIANT_BOOL IToleranceRecalc::DeleteItem ( const _variant_t & Index );
__declspec(implementation_key(5249)) void IToleranceRecalc::PutRecalcType ( const _variant_t & Index, enum ksToleranceRecalcsEnum PVal );
__declspec(implementation_key(5250)) enum ksToleranceRecalcsEnum IToleranceRecalc::GetRecalcType ( const _variant_t & Index );
__declspec(implementation_key(5251)) void IToleranceRecalc::PutRecalcUserType ( const _variant_t & Index, _bstr_t PVal );
__declspec(implementation_key(5252)) _bstr_t IToleranceRecalc::GetRecalcUserType ( const _variant_t & Index );
__declspec(implementation_key(5253)) void IToleranceRecalc::PutCoefficient ( const _variant_t & Index, double PVal );
__declspec(implementation_key(5254)) double IToleranceRecalc::GetCoefficient ( const _variant_t & Index );
__declspec(implementation_key(5255)) long IToleranceRecalc::GetId ( );
__declspec(implementation_key(5256)) long IToleranceRecalcsManager::GetRecalcsCount ( );
__declspec(implementation_key(5257)) IToleranceRecalcPtr IToleranceRecalcsManager::AddRecalc ( );
__declspec(implementation_key(5258)) IToleranceRecalcPtr IToleranceRecalcsManager::AddRecalcCopy ( struct IToleranceRecalc * Source );
__declspec(implementation_key(5259)) IToleranceRecalcPtr IToleranceRecalcsManager::GetRecalc ( const _variant_t & Index );
__declspec(implementation_key(5260)) void IToleranceRecalcsManager::PutToleranceMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(5261)) VARIANT_BOOL IToleranceRecalcsManager::GetToleranceMode ( );
__declspec(implementation_key(5262)) VARIANT_BOOL IToleranceRecalcsManager::SaveRecalcModel ( _bstr_t FileName );
__declspec(implementation_key(5263)) IToleranceRecalcPtr IToleranceRecalcsManager::GetCurrentRecalc ( );
__declspec(implementation_key(5264)) void IMate3DByAngle::PutAngle3D ( VARIANT_BOOL PVal );
__declspec(implementation_key(5265)) VARIANT_BOOL IMate3DByAngle::GetAngle3D ( );
__declspec(implementation_key(5266)) void IMate3DByAngle::PutAxis ( struct IModelObject * PVal );
__declspec(implementation_key(5267)) IModelObjectPtr IMate3DByAngle::GetAxis ( );
__declspec(implementation_key(5268)) void IMate3DByTangent::PutTangentType ( enum ksMateTangentTypeEnum PVal );
__declspec(implementation_key(5269)) enum ksMateTangentTypeEnum IMate3DByTangent::GetTangentType ( );
__declspec(implementation_key(5270)) void IMate3DSymmetry::PutPlane ( struct IModelObject * PVal );
__declspec(implementation_key(5271)) IModelObjectPtr IMate3DSymmetry::GetPlane ( );
__declspec(implementation_key(5272)) void IMate3DTransmission::PutMotionType1 ( enum ksMateMotionTypeEnum PVal );
__declspec(implementation_key(5273)) enum ksMateMotionTypeEnum IMate3DTransmission::GetMotionType1 ( );
__declspec(implementation_key(5274)) void IMate3DTransmission::PutMotionType2 ( enum ksMateMotionTypeEnum PVal );
__declspec(implementation_key(5275)) enum ksMateMotionTypeEnum IMate3DTransmission::GetMotionType2 ( );
__declspec(implementation_key(5276)) void IMate3DTransmission::PutRotationAxis1 ( struct IModelObject * PVal );
__declspec(implementation_key(5277)) IModelObjectPtr IMate3DTransmission::GetRotationAxis1 ( );
__declspec(implementation_key(5278)) void IMate3DTransmission::PutRotationAxis2 ( struct IModelObject * PVal );
__declspec(implementation_key(5279)) IModelObjectPtr IMate3DTransmission::GetRotationAxis2 ( );
__declspec(implementation_key(5280)) void IMate3DTransmission::PutTrajectory1 ( struct IModelObject * PVal );
__declspec(implementation_key(5281)) IModelObjectPtr IMate3DTransmission::GetTrajectory1 ( );
__declspec(implementation_key(5282)) void IMate3DTransmission::PutTrajectory2 ( struct IModelObject * PVal );
__declspec(implementation_key(5283)) IModelObjectPtr IMate3DTransmission::GetTrajectory2 ( );
__declspec(implementation_key(5284)) void IMate3DTransmission::PutDirection1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(5285)) VARIANT_BOOL IMate3DTransmission::GetDirection1 ( );
__declspec(implementation_key(5286)) void IMate3DTransmission::PutDirection2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(5287)) VARIANT_BOOL IMate3DTransmission::GetDirection2 ( );
__declspec(implementation_key(5288)) double IMate3DTransmission::GetScale1 ( );
__declspec(implementation_key(5289)) double IMate3DTransmission::GetScale2 ( );
__declspec(implementation_key(5290)) VARIANT_BOOL IMate3DTransmission::SetScale ( double Scale1, double Scale2 );
__declspec(implementation_key(5291)) void IMate3DCamGear::PutCamFaces ( const _variant_t & PVal );
__declspec(implementation_key(5292)) _variant_t IMate3DCamGear::GetCamFaces ( );
__declspec(implementation_key(5293)) void IMate3DCamGear::PutRotationAxis ( struct IModelObject * PVal );
__declspec(implementation_key(5294)) IModelObjectPtr IMate3DCamGear::GetRotationAxis ( );
__declspec(implementation_key(5295)) void IMate3DCamGear::PutFollowerFace ( struct IModelObject * PVal );
__declspec(implementation_key(5296)) IModelObjectPtr IMate3DCamGear::GetFollowerFace ( );
__declspec(implementation_key(5297)) void IMate3DCamGear::PutTrajectory ( struct IModelObject * PVal );
__declspec(implementation_key(5298)) IModelObjectPtr IMate3DCamGear::GetTrajectory ( );
__declspec(implementation_key(5299)) enum ksCountersinkTypeEnum ICountersinkHoleParameters::GetCountersinkType ( );
__declspec(implementation_key(5300)) void ICountersinkHoleParameters::PutCountersinkType ( enum ksCountersinkTypeEnum PVal );
__declspec(implementation_key(5301)) double ICountersinkHoleParameters::GetCountersinkDiameter ( );
__declspec(implementation_key(5302)) void ICountersinkHoleParameters::PutCountersinkDiameter ( double PVal );
__declspec(implementation_key(5303)) double ICountersinkHoleParameters::GetCountersinkAngle ( );
__declspec(implementation_key(5304)) void ICountersinkHoleParameters::PutCountersinkAngle ( double PVal );
__declspec(implementation_key(5305)) double ICountersinkHoleParameters::GetCountersinkDepth ( );
__declspec(implementation_key(5306)) void ICountersinkHoleParameters::PutCountersinkDepth ( double PVal );
__declspec(implementation_key(5307)) double ISpotfacingHoleParameters::GetSpotfacingDiameter ( );
__declspec(implementation_key(5308)) void ISpotfacingHoleParameters::PutSpotfacingDiameter ( double PVal );
__declspec(implementation_key(5309)) double ISpotfacingHoleParameters::GetSpotfacingDepth ( );
__declspec(implementation_key(5310)) void ISpotfacingHoleParameters::PutSpotfacingDepth ( double PVal );
__declspec(implementation_key(5311)) double ICountersinkSpotfacingHoleParameters::GetSpotfacingCountersinkDiameter ( );
__declspec(implementation_key(5312)) void ICountersinkSpotfacingHoleParameters::PutSpotfacingCountersinkDiameter ( double PVal );
__declspec(implementation_key(5313)) double ICountersinkSpotfacingHoleParameters::GetSpotfacingDepth ( );
__declspec(implementation_key(5314)) void ICountersinkSpotfacingHoleParameters::PutSpotfacingDepth ( double PVal );
__declspec(implementation_key(5315)) double ICountersinkSpotfacingHoleParameters::GetCountersinkAngle ( );
__declspec(implementation_key(5316)) void ICountersinkSpotfacingHoleParameters::PutCountersinkAngle ( double PVal );
__declspec(implementation_key(5317)) enum ksConicTypeEnum IConicHoleParameters::GetConicType ( );
__declspec(implementation_key(5318)) void IConicHoleParameters::PutConicType ( enum ksConicTypeEnum PVal );
__declspec(implementation_key(5319)) double IConicHoleParameters::GetConicDiameter ( );
__declspec(implementation_key(5320)) void IConicHoleParameters::PutConicDiameter ( double PVal );
__declspec(implementation_key(5321)) double IConicHoleParameters::GetConicAngle ( );
__declspec(implementation_key(5322)) void IConicHoleParameters::PutConicAngle ( double PVal );
__declspec(implementation_key(5323)) IModelObjectPtr IHoleDisposal::GetBaseSurface ( );
__declspec(implementation_key(5324)) void IHoleDisposal::PutBaseSurface ( struct IModelObject * PVal );
__declspec(implementation_key(5325)) enum ksPoint3DSurfaceParamTypeEnum IHoleDisposal::GetOffsetType ( );
__declspec(implementation_key(5326)) void IHoleDisposal::PutOffsetType ( enum ksPoint3DSurfaceParamTypeEnum PVal );
__declspec(implementation_key(5327)) IKompasAPIObjectPtr IHoleDisposal::GetPoint3DParamSurface ( );
__declspec(implementation_key(5328)) IModelObjectPtr IHoleDisposal::GetAssociationVertex ( );
__declspec(implementation_key(5329)) void IHoleDisposal::PutAssociationVertex ( struct IModelObject * PVal );
__declspec(implementation_key(5330)) VARIANT_BOOL IHoleDisposal::GetPerpendicular ( );
__declspec(implementation_key(5331)) void IHoleDisposal::PutPerpendicular ( VARIANT_BOOL PVal );
__declspec(implementation_key(5332)) VARIANT_BOOL IHoleDisposal::GetDirection ( );
__declspec(implementation_key(5333)) void IHoleDisposal::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5334)) VARIANT_BOOL IHoleDisposal::GetProcessCanopy ( );
__declspec(implementation_key(5335)) void IHoleDisposal::PutProcessCanopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(5336)) IVector3DPtr IHoleDisposal::GetVector ( );
__declspec(implementation_key(5337)) IModelObjectPtr IHoleDisposal::GetDirectionObject ( );
__declspec(implementation_key(5338)) void IHoleDisposal::PutDirectionObject ( struct IModelObject * PVal );
__declspec(implementation_key(5339)) VARIANT_BOOL IVertex::GetPoint ( double * X, double * Y, double * Z );
__declspec(implementation_key(5340)) VARIANT_BOOL IVertex::GetIsFreeVertex ( );
__declspec(implementation_key(5341)) VARIANT_BOOL IVertex::GetIsTopologyVertex ( );
__declspec(implementation_key(5342)) VARIANT_BOOL IVertex::GetIsSketchVertex ( );
__declspec(implementation_key(5343)) enum ksMathSurface3DTypeEnum IFace::GetSurface3DType ( );
__declspec(implementation_key(5344)) enum ksMathSurface3DTypeEnum IFace::GetBaseSurface3DType ( );
__declspec(implementation_key(5345)) IMathSurface3DPtr IFace::GetMathSurface ( );
__declspec(implementation_key(5346)) VARIANT_BOOL IFace::GetNormalOrientation ( );
__declspec(implementation_key(5347)) _variant_t IFace::GetLoops ( );
__declspec(implementation_key(5348)) _variant_t IFace::GetConnectedFaces ( );
__declspec(implementation_key(5349)) _variant_t IFace::GetLimitingEdges ( );
__declspec(implementation_key(5350)) VARIANT_BOOL IFace::IsConnectedWith ( struct IFace * OtherFace );
__declspec(implementation_key(5351)) double IFace::GetRadius ( );
__declspec(implementation_key(5352)) VARIANT_BOOL IFace::GetConeParam ( double * Height, double * Angle, double * Radius );
__declspec(implementation_key(5353)) double IFace::GetArea ( enum ksLengthUnitsEnum Unit );
__declspec(implementation_key(5354)) ITessellation7Ptr IFace::GetTessellation ( );
__declspec(implementation_key(5355)) double IFace::GetAreaEx ( enum ksLengthUnitsEnum Unit, double AngleTolerance );
__declspec(implementation_key(5356)) enum ksMathCurve3DTypeEnum IEdge::GetCurve3DType ( );
__declspec(implementation_key(5357)) enum ksMathCurve3DTypeEnum IEdge::GetBaseCurve3DType ( );
__declspec(implementation_key(5358)) IMathCurve3DPtr IEdge::GetMathCurve ( );
__declspec(implementation_key(5359)) VARIANT_BOOL IEdge::GetIsPeriodic ( );
__declspec(implementation_key(5360)) VARIANT_BOOL IEdge::GetIsStraight ( );
__declspec(implementation_key(5361)) IFacePtr IEdge::GetAdjacentFace ( VARIANT_BOOL FacePlus );
__declspec(implementation_key(5362)) IVertexPtr IEdge::GetVertex ( VARIANT_BOOL Start );
__declspec(implementation_key(5363)) VARIANT_BOOL IEdge::GetPoint ( VARIANT_BOOL Start, double * X, double * Y, double * Z );
__declspec(implementation_key(5364)) _variant_t IEdge::GetEdges ( VARIANT_BOOL Start );
__declspec(implementation_key(5365)) _variant_t IEdge::GetOrientedEdges ( );
__declspec(implementation_key(5366)) double IEdge::GetLength ( enum ksLengthUnitsEnum BitVector );
__declspec(implementation_key(5367)) VARIANT_BOOL IEdge::GetIsSketchEdge ( );
__declspec(implementation_key(5368)) _variant_t ILoop7::GetOrientedEdges ( );
__declspec(implementation_key(5369)) _variant_t ILoop7::GetEdges ( );
__declspec(implementation_key(5370)) VARIANT_BOOL ILoop7::GetIsOuter ( );
__declspec(implementation_key(5371)) double ILoop7::GetLength ( enum ksLengthUnitsEnum Unit );
__declspec(implementation_key(5372)) VARIANT_BOOL IOrientedEdge7::GetOrientation ( );
__declspec(implementation_key(5373)) VARIANT_BOOL IOrientedEdge7::GetSameSense ( );
__declspec(implementation_key(5374)) IModelObjectPtr IOrientedEdge7::GetEdge ( );
__declspec(implementation_key(5375)) IOrientedEdge7Ptr IOrientedEdge7::GetNext ( );
__declspec(implementation_key(5376)) IFacePtr IOrientedEdge7::GetAdjacentFace ( VARIANT_BOOL FacePlus );
__declspec(implementation_key(5377)) VARIANT_BOOL IOrientedEdge7::GetIsStraight ( );
__declspec(implementation_key(5378)) VARIANT_BOOL IOrientedEdge7::GetIsSeam ( );
__declspec(implementation_key(5379)) VARIANT_BOOL IOrientedEdge7::GetIsPole ( );
__declspec(implementation_key(5380)) IModelObjectPtr IDistanceAngleMeasurement3D::GetObject1 ( );
__declspec(implementation_key(5381)) void IDistanceAngleMeasurement3D::PutObject1 ( struct IModelObject * Result );
__declspec(implementation_key(5382)) IModelObjectPtr IDistanceAngleMeasurement3D::GetObject2 ( );
__declspec(implementation_key(5383)) void IDistanceAngleMeasurement3D::PutObject2 ( struct IModelObject * Result );
__declspec(implementation_key(5384)) VARIANT_BOOL IDistanceAngleMeasurement3D::GetBriefly ( );
__declspec(implementation_key(5385)) void IDistanceAngleMeasurement3D::PutBriefly ( VARIANT_BOOL Result );
__declspec(implementation_key(5386)) enum ksMeasureResultEnum IDistanceAngleMeasurement3D::GetMeasureResult ( );
__declspec(implementation_key(5387)) double IDistanceAngleMeasurement3D::GetLmin ( );
__declspec(implementation_key(5388)) double IDistanceAngleMeasurement3D::GetLmax ( );
__declspec(implementation_key(5389)) double IDistanceAngleMeasurement3D::GetLNormal ( );
__declspec(implementation_key(5390)) VARIANT_BOOL IDistanceAngleMeasurement3D::GetIsAngleValid ( );
__declspec(implementation_key(5391)) double IDistanceAngleMeasurement3D::GetAngle ( );
__declspec(implementation_key(5392)) VARIANT_BOOL IDistanceAngleMeasurement3D::GetMinPoint1 ( double * X, double * Y, double * Z );
__declspec(implementation_key(5393)) VARIANT_BOOL IDistanceAngleMeasurement3D::GetMinPoint2 ( double * X, double * Y, double * Z );
__declspec(implementation_key(5394)) VARIANT_BOOL IDistanceAngleMeasurement3D::GetMaxPoint1 ( double * X, double * Y, double * Z );
__declspec(implementation_key(5395)) VARIANT_BOOL IDistanceAngleMeasurement3D::GetMaxPoint2 ( double * X, double * Y, double * Z );
__declspec(implementation_key(5396)) VARIANT_BOOL IDistanceAngleMeasurement3D::GetNormalPoint1 ( double * X, double * Y, double * Z );
__declspec(implementation_key(5397)) VARIANT_BOOL IDistanceAngleMeasurement3D::GetNormalPoint2 ( double * X, double * Y, double * Z );
__declspec(implementation_key(5398)) IDistanceAngleMeasurement3DPtr IDistanceAngleMeasurements3D::GetDistanceAngleMeasurement3D ( const _variant_t & Index );
__declspec(implementation_key(5399)) IDistanceAngleMeasurement3DPtr IDistanceAngleMeasurements3D::Add ( );
__declspec(implementation_key(5400)) _variant_t IEdgeLengthMeasurement3D::GetEdges ( );
__declspec(implementation_key(5401)) void IEdgeLengthMeasurement3D::PutEdges ( const _variant_t & Result );
__declspec(implementation_key(5402)) _variant_t IEdgeLengthMeasurement3D::GetLengths ( );
__declspec(implementation_key(5403)) double IEdgeLengthMeasurement3D::GetSum ( );
__declspec(implementation_key(5404)) IEdgeLengthMeasurement3DPtr IEdgeLengthMeasurements3D::GetEdgeLengthMeasurement3D ( const _variant_t & Index );
__declspec(implementation_key(5405)) IEdgeLengthMeasurement3DPtr IEdgeLengthMeasurements3D::Add ( );
__declspec(implementation_key(5406)) _variant_t IAreaMeasurement3D::GetFaces ( );
__declspec(implementation_key(5407)) void IAreaMeasurement3D::PutFaces ( const _variant_t & Result );
__declspec(implementation_key(5408)) _variant_t IAreaMeasurement3D::GetAreas ( );
__declspec(implementation_key(5409)) double IAreaMeasurement3D::GetSum ( );
__declspec(implementation_key(5410)) IAreaMeasurement3DPtr IAreaMeasurements3D::GetAreaMeasurement3D ( const _variant_t & Index );
__declspec(implementation_key(5411)) IAreaMeasurement3DPtr IAreaMeasurements3D::Add ( );
__declspec(implementation_key(5412)) IDistanceAngleMeasurements3DPtr IMeasurementContainer::GetDistanceAngleMeasurements3D ( );
__declspec(implementation_key(5413)) IEdgeLengthMeasurements3DPtr IMeasurementContainer::GetEdgeLengthMeasurements3D ( );
__declspec(implementation_key(5414)) IAreaMeasurements3DPtr IMeasurementContainer::GetAreaMeasurements3D ( );
__declspec(implementation_key(5415)) VARIANT_BOOL IUserDesignationCompObj::SetObjects ( const _variant_t & Objects );
__declspec(implementation_key(5416)) _bstr_t ILibraryHoleParameters::GetFileName ( );
__declspec(implementation_key(5417)) void ILibraryHoleParameters::PutFileName ( _bstr_t PVal );
__declspec(implementation_key(5418)) _variant_t ILibraryHoleParameters::GetVariables ( );
__declspec(implementation_key(5419)) IVariable7Ptr ILibraryHoleParameters::GetVariable ( const _variant_t & Index );
__declspec(implementation_key(5420)) long ILibraryHoleParameters::GetVariablesCount ( );
__declspec(implementation_key(5421)) _variant_t IZoneParametersByObjects::GetBaseObjects ( );
__declspec(implementation_key(5422)) void IZoneParametersByObjects::PutBaseObjects ( const _variant_t & Result );
__declspec(implementation_key(5423)) long IZoneDivisionParametersRegular::GetXCount ( );
__declspec(implementation_key(5424)) void IZoneDivisionParametersRegular::PutXCount ( long PVal );
__declspec(implementation_key(5425)) long IZoneDivisionParametersRegular::GetYCount ( );
__declspec(implementation_key(5426)) void IZoneDivisionParametersRegular::PutYCount ( long PVal );
__declspec(implementation_key(5427)) long IZoneDivisionParametersRegular::GetZCount ( );
__declspec(implementation_key(5428)) void IZoneDivisionParametersRegular::PutZCount ( long PVal );
__declspec(implementation_key(5429)) _variant_t IZoneDivisionParametersByPlanes::GetPlanes ( );
__declspec(implementation_key(5430)) void IZoneDivisionParametersByPlanes::PutPlanes ( const _variant_t & Result );
__declspec(implementation_key(5431)) enum ksDynamicCrossSectionStepBuildingTypeEnum IDynamicCrossSectionStep::GetBuildingType ( );
__declspec(implementation_key(5432)) void IDynamicCrossSectionStep::PutBuildingType ( enum ksDynamicCrossSectionStepBuildingTypeEnum PVal );
__declspec(implementation_key(5433)) IKompasAPIObjectPtr IDynamicCrossSectionStep::GetParameters ( );
__declspec(implementation_key(5434)) VARIANT_BOOL IDynamicCrossSectionStep::Delete ( );
__declspec(implementation_key(5435)) VARIANT_BOOL IDynamicCrossSection::GetFillCutPlanes ( );
__declspec(implementation_key(5436)) void IDynamicCrossSection::PutFillCutPlanes ( VARIANT_BOOL Result );
__declspec(implementation_key(5437)) long IDynamicCrossSection::GetStepsCount ( );
__declspec(implementation_key(5438)) IDynamicCrossSectionStepPtr IDynamicCrossSection::AddStep ( enum ksDynamicCrossSectionStepBuildingTypeEnum BuildingType );
__declspec(implementation_key(5439)) IDynamicCrossSectionStepPtr IDynamicCrossSection::GetStep ( long Index );
__declspec(implementation_key(5440)) VARIANT_BOOL IDynamicCrossSection::Delete ( );
__declspec(implementation_key(5441)) long IDynamicCrossSectionsManager::GetDynamicCrossSectionsCount ( );
__declspec(implementation_key(5442)) IDynamicCrossSectionPtr IDynamicCrossSectionsManager::GetDynamicCrossSection ( const _variant_t & Index );
__declspec(implementation_key(5443)) IDynamicCrossSectionPtr IDynamicCrossSectionsManager::AddDynamicCrossSection ( );
__declspec(implementation_key(5444)) IDynamicCrossSectionPtr IDynamicCrossSectionsManager::GetCurrentDynamicCrossSection ( );
__declspec(implementation_key(5445)) void IDynamicCrossSectionsManager::PutCurrentDynamicCrossSection ( struct IDynamicCrossSection * Result );
__declspec(implementation_key(5446)) VARIANT_BOOL IDynamicCrossSectionsManager::GetDynamicCrossSectionModeOn ( );
__declspec(implementation_key(5447)) void IDynamicCrossSectionsManager::PutDynamicCrossSectionModeOn ( VARIANT_BOOL Result );
__declspec(implementation_key(5448)) ILocalCoordinateSystemPtr IDynamicCrossSectionStepParametersByFreePlane::GetLocalCoordinateSystem ( );
__declspec(implementation_key(5449)) VARIANT_BOOL IDynamicCrossSectionStepParametersByFreePlane::ReverseDirection ( );
__declspec(implementation_key(5450)) IPlane3DByOffsetPtr IDynamicCrossSectionStepParametersByOffsetPlane::GetOffsetPlane ( );
__declspec(implementation_key(5451)) enum ksCrossSectionPlaneBuildingTypeEnum IDynamicCrossSectionStepParametersByOffsetPlane::GetPlaneBuildingType ( );
__declspec(implementation_key(5452)) void IDynamicCrossSectionStepParametersByOffsetPlane::PutPlaneBuildingType ( enum ksCrossSectionPlaneBuildingTypeEnum PVal );
__declspec(implementation_key(5453)) IDynamicCrossSectionStepPtr IDynamicCrossSectionStepParametersByOffsetPlane::GetBaseStep ( );
__declspec(implementation_key(5454)) void IDynamicCrossSectionStepParametersByOffsetPlane::PutBaseStep ( struct IDynamicCrossSectionStep * PVal );
__declspec(implementation_key(5455)) VARIANT_BOOL IDynamicCrossSectionStepParametersByOffsetPlane::ReverseDirection ( );
__declspec(implementation_key(5456)) IPlane3DByAnglePtr IDynamicCrossSectionStepParametersByRotatedPlane::GetPlane ( );
__declspec(implementation_key(5457)) enum ksCrossSectionPlaneBuildingTypeEnum IDynamicCrossSectionStepParametersByRotatedPlane::GetPlaneBuildingType ( );
__declspec(implementation_key(5458)) void IDynamicCrossSectionStepParametersByRotatedPlane::PutPlaneBuildingType ( enum ksCrossSectionPlaneBuildingTypeEnum PVal );
__declspec(implementation_key(5459)) IDynamicCrossSectionStepPtr IDynamicCrossSectionStepParametersByRotatedPlane::GetBaseStep ( );
__declspec(implementation_key(5460)) void IDynamicCrossSectionStepParametersByRotatedPlane::PutBaseStep ( struct IDynamicCrossSectionStep * PVal );
__declspec(implementation_key(5461)) VARIANT_BOOL IDynamicCrossSectionStepParametersByRotatedPlane::ReverseDirection ( );
__declspec(implementation_key(5462)) IZonePtr IDynamicCrossSectionStepParametersByZone::GetZone ( );
__declspec(implementation_key(5463)) void IDynamicCrossSectionStepParametersByZone::PutZone ( struct IZone * PVal );
__declspec(implementation_key(5464)) IModelObjectPtr IAxisLine3D::GetObject1 ( );
__declspec(implementation_key(5465)) void IAxisLine3D::PutObject1 ( struct IModelObject * PVal );
__declspec(implementation_key(5466)) IModelObjectPtr IAxisLine3D::GetObject2 ( );
__declspec(implementation_key(5467)) void IAxisLine3D::PutObject2 ( struct IModelObject * PVal );
__declspec(implementation_key(5468)) _variant_t IDismantleStep::GetParts ( );
__declspec(implementation_key(5469)) void IDismantleStep::PutParts ( const _variant_t & Result );
__declspec(implementation_key(5470)) double IDismantleStep::GetDistance ( );
__declspec(implementation_key(5471)) void IDismantleStep::PutDistance ( double Result );
__declspec(implementation_key(5472)) IVector3DPtr IDismantleStep::GetVector ( );
__declspec(implementation_key(5473)) IModelObjectPtr IDismantleStep::GetDirectionObject ( );
__declspec(implementation_key(5474)) void IDismantleStep::PutDirectionObject ( struct IModelObject * Result );
__declspec(implementation_key(5475)) long IDismantleStep::Update ( );
__declspec(implementation_key(5476)) long IDismantleParameters::GetDismantleStepsCount ( );
__declspec(implementation_key(5477)) IDismantleStepPtr IDismantleParameters::GetDismantleStep ( long Index );
__declspec(implementation_key(5478)) IDismantleStepPtr IDismantleParameters::AddDismantleStep ( );
__declspec(implementation_key(5479)) VARIANT_BOOL IDismantleParameters::ClearDismantleParameters ( );
__declspec(implementation_key(5480)) VARIANT_BOOL IDismantleParameters::DeleteDismantleStep ( long Index );
__declspec(implementation_key(5481)) double IDrawingText::GetX ( );
__declspec(implementation_key(5482)) void IDrawingText::PutX ( double Result );
__declspec(implementation_key(5483)) double IDrawingText::GetY ( );
__declspec(implementation_key(5484)) void IDrawingText::PutY ( double Result );
__declspec(implementation_key(5485)) void IDrawingText::PutAngle ( double PVal );
__declspec(implementation_key(5486)) double IDrawingText::GetAngle ( );
__declspec(implementation_key(5487)) double IDrawingText::GetHeight ( );
__declspec(implementation_key(5488)) void IDrawingText::PutHeight ( double Result );
__declspec(implementation_key(5489)) double IDrawingText::GetWidth ( );
__declspec(implementation_key(5490)) void IDrawingText::PutWidth ( double Result );
__declspec(implementation_key(5491)) enum ksTextHorizontalFormatEnum IDrawingText::GetHFormat ( );
__declspec(implementation_key(5492)) void IDrawingText::PutHFormat ( enum ksTextHorizontalFormatEnum Result );
__declspec(implementation_key(5493)) VARIANT_BOOL IDrawingText::GetVFormat ( );
__declspec(implementation_key(5494)) void IDrawingText::PutVFormat ( VARIANT_BOOL Result );
__declspec(implementation_key(5495)) enum ksAllocationEnum IDrawingText::GetAllocation ( );
__declspec(implementation_key(5496)) void IDrawingText::PutAllocation ( enum ksAllocationEnum Result );
__declspec(implementation_key(5497)) VARIANT_BOOL IDrawingText::GetMirrorSymmetry ( );
__declspec(implementation_key(5498)) void IDrawingText::PutMirrorSymmetry ( VARIANT_BOOL Result );
__declspec(implementation_key(5499)) VARIANT_BOOL IDrawingText::GetIsTextMark ( );
__declspec(implementation_key(5500)) IDrawingTextPtr IDrawingTexts::GetDrawingText ( const _variant_t & Index );
__declspec(implementation_key(5501)) IDrawingTextPtr IDrawingTexts::Add ( );
__declspec(implementation_key(5502)) IDrawingTextPtr IDrawingTexts::AddTextMark ( struct IDrawingObject * Object );
__declspec(implementation_key(5503)) IDrawingTextPtr IDrawingTexts::FindTextMark ( struct IDrawingObject * Object );
__declspec(implementation_key(5504)) IDrawingObjectPtr IDrawingTexts::FindTextMarkObject ( struct IDrawingText * Mark );
__declspec(implementation_key(5505)) VARIANT_BOOL IDrawingTexts::DeleteTextMark ( struct IDrawingObject * Object );
__declspec(implementation_key(5506)) void ILineSegment::PutX1 ( double PVal );
__declspec(implementation_key(5507)) double ILineSegment::GetX1 ( );
__declspec(implementation_key(5508)) void ILineSegment::PutY1 ( double PVal );
__declspec(implementation_key(5509)) double ILineSegment::GetY1 ( );
__declspec(implementation_key(5510)) void ILineSegment::PutX2 ( double PVal );
__declspec(implementation_key(5511)) double ILineSegment::GetX2 ( );
__declspec(implementation_key(5512)) void ILineSegment::PutY2 ( double PVal );
__declspec(implementation_key(5513)) double ILineSegment::GetY2 ( );
__declspec(implementation_key(5514)) void ILineSegment::PutLength ( double PVal );
__declspec(implementation_key(5515)) double ILineSegment::GetLength ( );
__declspec(implementation_key(5516)) void ILineSegment::PutAngle ( double PVal );
__declspec(implementation_key(5517)) double ILineSegment::GetAngle ( );
__declspec(implementation_key(5518)) long ILineSegment::GetStyle ( );
__declspec(implementation_key(5519)) void ILineSegment::PutStyle ( long Result );
__declspec(implementation_key(5520)) ILineSegmentPtr ILineSegments::GetLineSegment ( const _variant_t & Index );
__declspec(implementation_key(5521)) ILineSegmentPtr ILineSegments::Add ( );
__declspec(implementation_key(5522)) void IArc::PutRadius ( double PVal );
__declspec(implementation_key(5523)) double IArc::GetRadius ( );
__declspec(implementation_key(5524)) void IArc::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5525)) VARIANT_BOOL IArc::GetDirection ( );
__declspec(implementation_key(5526)) void IArc::PutXc ( double PVal );
__declspec(implementation_key(5527)) double IArc::GetXc ( );
__declspec(implementation_key(5528)) void IArc::PutYc ( double PVal );
__declspec(implementation_key(5529)) double IArc::GetYc ( );
__declspec(implementation_key(5530)) void IArc::PutX1 ( double PVal );
__declspec(implementation_key(5531)) double IArc::GetX1 ( );
__declspec(implementation_key(5532)) void IArc::PutY1 ( double PVal );
__declspec(implementation_key(5533)) double IArc::GetY1 ( );
__declspec(implementation_key(5534)) void IArc::PutX2 ( double PVal );
__declspec(implementation_key(5535)) double IArc::GetX2 ( );
__declspec(implementation_key(5536)) void IArc::PutY2 ( double PVal );
__declspec(implementation_key(5537)) double IArc::GetY2 ( );
__declspec(implementation_key(5538)) void IArc::PutX3 ( double PVal );
__declspec(implementation_key(5539)) double IArc::GetX3 ( );
__declspec(implementation_key(5540)) void IArc::PutY3 ( double PVal );
__declspec(implementation_key(5541)) double IArc::GetY3 ( );
__declspec(implementation_key(5542)) void IArc::PutAngle1 ( double PVal );
__declspec(implementation_key(5543)) double IArc::GetAngle1 ( );
__declspec(implementation_key(5544)) void IArc::PutAngle2 ( double PVal );
__declspec(implementation_key(5545)) double IArc::GetAngle2 ( );
__declspec(implementation_key(5546)) long IArc::GetStyle ( );
__declspec(implementation_key(5547)) void IArc::PutStyle ( long Result );
__declspec(implementation_key(5548)) IArcPtr IArcs::GetArc ( const _variant_t & Index );
__declspec(implementation_key(5549)) IArcPtr IArcs::Add ( );
__declspec(implementation_key(5550)) void IContour::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(5551)) VARIANT_BOOL IContour::GetClosed ( );
__declspec(implementation_key(5552)) IKompasAPIObjectPtr IContour::AddSegment ( enum ksContourSegmentEnum Type );
__declspec(implementation_key(5553)) IKompasAPIObjectPtr IContour::GetSegment ( long Index );
__declspec(implementation_key(5554)) VARIANT_BOOL IContour::CopyCurve ( struct IDrawingObject * Curve, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(5555)) long IContour::GetCount ( );
__declspec(implementation_key(5556)) _variant_t IContour::GetTmpObjects ( );
__declspec(implementation_key(5557)) VARIANT_BOOL IContour::CopySegments ( const _variant_t & Val, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(5558)) VARIANT_BOOL IContour::Clear ( );
__declspec(implementation_key(5559)) VARIANT_BOOL IContour::RemoveContourGaps ( double Accuracy, VARIANT_BOOL CanInsert, VARIANT_BOOL CanReplace );
__declspec(implementation_key(5560)) void IMultiline::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(5561)) VARIANT_BOOL IMultiline::GetClosed ( );
__declspec(implementation_key(5562)) IContourPtr IMultiline::GetBaseContour ( );
__declspec(implementation_key(5563)) enum ksMlVertexTrackingEnum IMultiline::GetTrackingType ( long VertexIndex );
__declspec(implementation_key(5564)) void IMultiline::PutTrackingType ( long VertexIndex, enum ksMlVertexTrackingEnum Val );
__declspec(implementation_key(5565)) enum ksMlVertexLimiterEnum IMultiline::GetVertexLimiter ( long VertexIndex );
__declspec(implementation_key(5566)) void IMultiline::PutVertexLimiter ( long VertexIndex, enum ksMlVertexLimiterEnum PVal );
__declspec(implementation_key(5567)) VARIANT_BOOL IMultiline::GetVertexDirection ( long VertexIndex );
__declspec(implementation_key(5568)) void IMultiline::PutVertexDirection ( long VertexIndex, VARIANT_BOOL PVal );
__declspec(implementation_key(5569)) void IMultiline::PutVertexRadius ( long VertexIndex, double PVal );
__declspec(implementation_key(5570)) double IMultiline::GetVertexRadius ( long VertexIndex );
__declspec(implementation_key(5571)) long IMultiline::GetVertexStyle ( long VertexIndex );
__declspec(implementation_key(5572)) void IMultiline::PutVertexStyle ( long VertexIndex, long Result );
__declspec(implementation_key(5573)) long IMultiline::GetVertexCount ( );
__declspec(implementation_key(5574)) enum ksMlEndLimiterEnum IMultiline::GetEndLimiter ( VARIANT_BOOL First );
__declspec(implementation_key(5575)) void IMultiline::PutEndLimiter ( VARIANT_BOOL First, enum ksMlEndLimiterEnum PVal );
__declspec(implementation_key(5576)) void IMultiline::PutEndParameter ( VARIANT_BOOL First, double PVal );
__declspec(implementation_key(5577)) double IMultiline::GetEndParameter ( VARIANT_BOOL First );
__declspec(implementation_key(5578)) long IMultiline::GetEndStyle ( VARIANT_BOOL First );
__declspec(implementation_key(5579)) void IMultiline::PutEndStyle ( VARIANT_BOOL First, long Result );
__declspec(implementation_key(5580)) VARIANT_BOOL IMultiline::AddLine ( double Offset, long Style );
__declspec(implementation_key(5581)) VARIANT_BOOL IMultiline::DeleteLine ( long LineIndex );
__declspec(implementation_key(5582)) long IMultiline::GetLineCount ( );
__declspec(implementation_key(5583)) void IMultiline::PutLineOffset ( long LineIndex, double PVal );
__declspec(implementation_key(5584)) double IMultiline::GetLineOffset ( long LineIndex );
__declspec(implementation_key(5585)) long IMultiline::GetLineStyle ( long LineIndex );
__declspec(implementation_key(5586)) void IMultiline::PutLineStyle ( long LineIndex, long Result );
__declspec(implementation_key(5587)) long IMultiline::FindLine ( double Offset );
__declspec(implementation_key(5588)) _variant_t IMultiline::GetLineOffsets ( );
__declspec(implementation_key(5589)) IMultilinePtr IMultilines::GetMultiline ( const _variant_t & Index );
__declspec(implementation_key(5590)) IMultilinePtr IMultilines::Add ( );
__declspec(implementation_key(5591)) long IDrawingContour::GetStyle ( );
__declspec(implementation_key(5592)) void IDrawingContour::PutStyle ( long Result );
__declspec(implementation_key(5593)) IDrawingContourPtr IDrawingContours::GetDrawingContour ( const _variant_t & Index );
__declspec(implementation_key(5594)) IDrawingContourPtr IDrawingContours::Add ( );
__declspec(implementation_key(5595)) _variant_t IDrawingContours::AddBooleanResultContours ( struct IDrawingObject * Contour1, struct IDrawingObject * Contour2, enum ksBooleanType BooleanType );
__declspec(implementation_key(5596)) void ICircle::PutXc ( double PVal );
__declspec(implementation_key(5597)) double ICircle::GetXc ( );
__declspec(implementation_key(5598)) void ICircle::PutYc ( double PVal );
__declspec(implementation_key(5599)) double ICircle::GetYc ( );
__declspec(implementation_key(5600)) void ICircle::PutX ( double PVal );
__declspec(implementation_key(5601)) double ICircle::GetX ( );
__declspec(implementation_key(5602)) void ICircle::PutY ( double PVal );
__declspec(implementation_key(5603)) double ICircle::GetY ( );
__declspec(implementation_key(5604)) void ICircle::PutRadius ( double PVal );
__declspec(implementation_key(5605)) double ICircle::GetRadius ( );
__declspec(implementation_key(5606)) long ICircle::GetStyle ( );
__declspec(implementation_key(5607)) void ICircle::PutStyle ( long Result );
__declspec(implementation_key(5608)) ICirclePtr ICircles::GetCircle ( const _variant_t & Index );
__declspec(implementation_key(5609)) ICirclePtr ICircles::Add ( );
__declspec(implementation_key(5610)) void IPoint::PutX ( double PVal );
__declspec(implementation_key(5611)) double IPoint::GetX ( );
__declspec(implementation_key(5612)) void IPoint::PutY ( double PVal );
__declspec(implementation_key(5613)) double IPoint::GetY ( );
__declspec(implementation_key(5614)) void IPoint::PutAngle ( double PVal );
__declspec(implementation_key(5615)) double IPoint::GetAngle ( );
__declspec(implementation_key(5616)) long IPoint::GetStyle ( );
__declspec(implementation_key(5617)) void IPoint::PutStyle ( long PVal );
__declspec(implementation_key(5618)) IPointPtr IPoints::GetPoint ( const _variant_t & Index );
__declspec(implementation_key(5619)) IPointPtr IPoints::Add ( );
__declspec(implementation_key(5620)) void IBezier::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(5621)) VARIANT_BOOL IBezier::GetClosed ( );
__declspec(implementation_key(5622)) long IBezier::GetPointsCount ( );
__declspec(implementation_key(5623)) void IBezier::PutPoints ( VARIANT_BOOL AllPoints, const _variant_t & Points );
__declspec(implementation_key(5624)) _variant_t IBezier::GetPoints ( VARIANT_BOOL AllPoints );
__declspec(implementation_key(5625)) VARIANT_BOOL IBezier::AddPoint ( long Index, double XBase, double YBase, double * XLeft, double * YLeft, double * XRight, double * YRight );
__declspec(implementation_key(5626)) VARIANT_BOOL IBezier::GetPoint ( long Index, double * XBase, double * YBase, double * XLeft, double * YLeft, double * XRight, double * YRight );
__declspec(implementation_key(5627)) VARIANT_BOOL IBezier::DeletePoint ( long Index );
__declspec(implementation_key(5628)) VARIANT_BOOL IBezier::Clear ( );
__declspec(implementation_key(5629)) long IBezier::GetStyle ( );
__declspec(implementation_key(5630)) void IBezier::PutStyle ( long Result );
__declspec(implementation_key(5631)) VARIANT_BOOL IBezier::ReadFromFile ( _bstr_t FileName );
__declspec(implementation_key(5632)) VARIANT_BOOL IBezier::WriteToFile ( _bstr_t FileName );
__declspec(implementation_key(5633)) IBezierPtr IBeziers::GetBezier ( const _variant_t & Index );
__declspec(implementation_key(5634)) IBezierPtr IBeziers::Add ( );
__declspec(implementation_key(5635)) IMacroObjectPtr IMacroObjects::GetMacroObject ( const _variant_t & Index );
__declspec(implementation_key(5636)) IMacroObjectPtr IMacroObjects::Add ( VARIANT_BOOL MultiLayer );
__declspec(implementation_key(5637)) void ILine::PutX1 ( double PVal );
__declspec(implementation_key(5638)) double ILine::GetX1 ( );
__declspec(implementation_key(5639)) void ILine::PutY1 ( double PVal );
__declspec(implementation_key(5640)) double ILine::GetY1 ( );
__declspec(implementation_key(5641)) void ILine::PutX2 ( double PVal );
__declspec(implementation_key(5642)) double ILine::GetX2 ( );
__declspec(implementation_key(5643)) void ILine::PutY2 ( double PVal );
__declspec(implementation_key(5644)) double ILine::GetY2 ( );
__declspec(implementation_key(5645)) void ILine::PutAngle ( double PVal );
__declspec(implementation_key(5646)) double ILine::GetAngle ( );
__declspec(implementation_key(5647)) ILinePtr ILines::GetLine ( const _variant_t & Index );
__declspec(implementation_key(5648)) ILinePtr ILines::Add ( );
__declspec(implementation_key(5649)) void IPolyLine2D::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(5650)) VARIANT_BOOL IPolyLine2D::GetClosed ( );
__declspec(implementation_key(5651)) long IPolyLine2D::GetPointsCount ( );
__declspec(implementation_key(5652)) void IPolyLine2D::PutPoints ( const _variant_t & Points );
__declspec(implementation_key(5653)) _variant_t IPolyLine2D::GetPoints ( );
__declspec(implementation_key(5654)) VARIANT_BOOL IPolyLine2D::AddPoint ( long Index, double X, double Y );
__declspec(implementation_key(5655)) VARIANT_BOOL IPolyLine2D::GetPoint ( long Index, double * X, double * Y );
__declspec(implementation_key(5656)) VARIANT_BOOL IPolyLine2D::DeletePoint ( long Index );
__declspec(implementation_key(5657)) VARIANT_BOOL IPolyLine2D::Clear ( );
__declspec(implementation_key(5658)) long IPolyLine2D::GetStyle ( );
__declspec(implementation_key(5659)) void IPolyLine2D::PutStyle ( long Result );
__declspec(implementation_key(5660)) VARIANT_BOOL IPolyLine2D::ReadFromFile ( _bstr_t FileName );
__declspec(implementation_key(5661)) VARIANT_BOOL IPolyLine2D::WriteToFile ( _bstr_t FileName );
__declspec(implementation_key(5662)) IPolyLine2DPtr IPolyLines2D::GetPolyLine2D ( const _variant_t & Index );
__declspec(implementation_key(5663)) IPolyLine2DPtr IPolyLines2D::Add ( );
__declspec(implementation_key(5664)) void INurbs::PutClosed ( VARIANT_BOOL Result );
__declspec(implementation_key(5665)) VARIANT_BOOL INurbs::GetClosed ( );
__declspec(implementation_key(5666)) void INurbs::PutDegree ( long Result );
__declspec(implementation_key(5667)) long INurbs::GetDegree ( );
__declspec(implementation_key(5668)) VARIANT_BOOL INurbs::GetPeriodic ( );
__declspec(implementation_key(5669)) long INurbs::GetPointsCount ( );
__declspec(implementation_key(5670)) VARIANT_BOOL INurbs::SetNurbsParams ( const _variant_t & Points, const _variant_t & Weight, const _variant_t & Knots, long Degree, VARIANT_BOOL Closed );
__declspec(implementation_key(5671)) VARIANT_BOOL INurbs::GetNurbsParams ( VARIANT * Points, VARIANT * Weight, VARIANT * Knots );
__declspec(implementation_key(5672)) VARIANT_BOOL INurbs::AddPoint ( long Index, double X, double Y, double Weight );
__declspec(implementation_key(5673)) VARIANT_BOOL INurbs::GetPoint ( long Index, double * X, double * Y, double * Weight );
__declspec(implementation_key(5674)) VARIANT_BOOL INurbs::DeletePoint ( long Index );
__declspec(implementation_key(5675)) VARIANT_BOOL INurbs::Clear ( );
__declspec(implementation_key(5676)) long INurbs::GetStyle ( );
__declspec(implementation_key(5677)) void INurbs::PutStyle ( long Result );
__declspec(implementation_key(5678)) VARIANT_BOOL INurbs::ReadFromFile ( _bstr_t FileName );
__declspec(implementation_key(5679)) VARIANT_BOOL INurbs::WriteToFile ( _bstr_t FileName );
__declspec(implementation_key(5680)) INurbsPtr INurbses::GetNurbs ( const _variant_t & Index );
__declspec(implementation_key(5681)) INurbsPtr INurbses::Add ( );
__declspec(implementation_key(5682)) INurbsPtr INurbses::Convert ( struct IDrawingObject * Curve );
__declspec(implementation_key(5683)) INurbsPtr INurbses::ConvertEx ( struct IDrawingObject * Curve, enum ksNurbsByPointsAproximationTypeEnum AproximationType, double Step );
__declspec(implementation_key(5684)) VARIANT_BOOL IRaster::GetPlacement ( double * X, double * Y, double * Angle, VARIANT_BOOL * MirrorSymmetry );
__declspec(implementation_key(5685)) VARIANT_BOOL IRaster::SetPlacement ( double X, double Y, double Angle, VARIANT_BOOL MirrorSymmetry );
__declspec(implementation_key(5686)) void IRaster::PutScale ( double PVal );
__declspec(implementation_key(5687)) double IRaster::GetScale ( );
__declspec(implementation_key(5688)) void IRaster::PutFileName ( _bstr_t PVal );
__declspec(implementation_key(5689)) _bstr_t IRaster::GetFileName ( );
__declspec(implementation_key(5690)) void IRaster::PutInsertionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(5691)) VARIANT_BOOL IRaster::GetInsertionType ( );
__declspec(implementation_key(5692)) void IRaster::PutResolution ( double PVal );
__declspec(implementation_key(5693)) double IRaster::GetResolution ( );
__declspec(implementation_key(5694)) void IRaster::PutDisplayModePartial ( VARIANT_BOOL PVal );
__declspec(implementation_key(5695)) VARIANT_BOOL IRaster::GetDisplayModePartial ( );
__declspec(implementation_key(5696)) double IRaster::GetHeight ( );
__declspec(implementation_key(5697)) void IRaster::PutHeight ( double PVal );
__declspec(implementation_key(5698)) double IRaster::GetWidth ( );
__declspec(implementation_key(5699)) void IRaster::PutWidth ( double PVal );
__declspec(implementation_key(5700)) double IRaster::GetSourceHeight ( );
__declspec(implementation_key(5701)) double IRaster::GetSourceWidth ( );
__declspec(implementation_key(5702)) long IRaster::GetPalette ( );
__declspec(implementation_key(5703)) VARIANT_BOOL IRaster::GetIsEnableChangeResolution ( );
__declspec(implementation_key(5704)) VARIANT_BOOL IRaster::GetIsCutBoundarySet ( );
__declspec(implementation_key(5705)) IRasterPtr IRasters::GetRaster ( const _variant_t & Index );
__declspec(implementation_key(5706)) IRasterPtr IRasters::Add ( );
__declspec(implementation_key(5707)) VARIANT_BOOL IOleDrawingObject::GetPlacement ( double * X, double * Y, double * Angle, VARIANT_BOOL * MirrorSymmetry );
__declspec(implementation_key(5708)) VARIANT_BOOL IOleDrawingObject::SetPlacement ( double X, double Y, double Angle, VARIANT_BOOL MirrorSymmetry );
__declspec(implementation_key(5709)) void IOleDrawingObject::PutScale ( double PVal );
__declspec(implementation_key(5710)) double IOleDrawingObject::GetScale ( );
__declspec(implementation_key(5711)) void IOleDrawingObject::PutClassId ( _bstr_t PVal );
__declspec(implementation_key(5712)) _bstr_t IOleDrawingObject::GetClassId ( );
__declspec(implementation_key(5713)) void IOleDrawingObject::PutFileName ( _bstr_t PVal );
__declspec(implementation_key(5714)) _bstr_t IOleDrawingObject::GetFileName ( );
__declspec(implementation_key(5715)) void IOleDrawingObject::PutLink ( VARIANT_BOOL PVal );
__declspec(implementation_key(5716)) VARIANT_BOOL IOleDrawingObject::GetLink ( );
__declspec(implementation_key(5717)) void IOleDrawingObject::PutInsertionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(5718)) VARIANT_BOOL IOleDrawingObject::GetInsertionType ( );
__declspec(implementation_key(5719)) IDispatchPtr IOleDrawingObject::DoVerb ( long iVerb );
__declspec(implementation_key(5720)) VARIANT_BOOL IOleDrawingObject::Close ( VARIANT_BOOL Save );
__declspec(implementation_key(5721)) IOleDrawingObjectPtr IOleDrawingObjects::GetOleDrawingObject ( const _variant_t & Index );
__declspec(implementation_key(5722)) IOleDrawingObjectPtr IOleDrawingObjects::Add ( );
__declspec(implementation_key(5723)) void IEllipse::PutXc ( double PVal );
__declspec(implementation_key(5724)) double IEllipse::GetXc ( );
__declspec(implementation_key(5725)) void IEllipse::PutYc ( double PVal );
__declspec(implementation_key(5726)) double IEllipse::GetYc ( );
__declspec(implementation_key(5727)) void IEllipse::PutX1 ( double PVal );
__declspec(implementation_key(5728)) double IEllipse::GetX1 ( );
__declspec(implementation_key(5729)) void IEllipse::PutY1 ( double PVal );
__declspec(implementation_key(5730)) double IEllipse::GetY1 ( );
__declspec(implementation_key(5731)) void IEllipse::PutX2 ( double PVal );
__declspec(implementation_key(5732)) double IEllipse::GetX2 ( );
__declspec(implementation_key(5733)) void IEllipse::PutY2 ( double PVal );
__declspec(implementation_key(5734)) double IEllipse::GetY2 ( );
__declspec(implementation_key(5735)) void IEllipse::PutSemiAxisA ( double PVal );
__declspec(implementation_key(5736)) double IEllipse::GetSemiAxisA ( );
__declspec(implementation_key(5737)) void IEllipse::PutSemiAxisB ( double PVal );
__declspec(implementation_key(5738)) double IEllipse::GetSemiAxisB ( );
__declspec(implementation_key(5739)) void IEllipse::PutAngle ( double PVal );
__declspec(implementation_key(5740)) double IEllipse::GetAngle ( );
__declspec(implementation_key(5741)) long IEllipse::GetStyle ( );
__declspec(implementation_key(5742)) void IEllipse::PutStyle ( long Result );
__declspec(implementation_key(5743)) IEllipsePtr IEllipses::GetEllipse ( const _variant_t & Index );
__declspec(implementation_key(5744)) IEllipsePtr IEllipses::Add ( );
__declspec(implementation_key(5745)) void IEllipseArc::PutXc ( double PVal );
__declspec(implementation_key(5746)) double IEllipseArc::GetXc ( );
__declspec(implementation_key(5747)) void IEllipseArc::PutYc ( double PVal );
__declspec(implementation_key(5748)) double IEllipseArc::GetYc ( );
__declspec(implementation_key(5749)) void IEllipseArc::PutT1 ( double PVal );
__declspec(implementation_key(5750)) double IEllipseArc::GetT1 ( );
__declspec(implementation_key(5751)) void IEllipseArc::PutT2 ( double PVal );
__declspec(implementation_key(5752)) double IEllipseArc::GetT2 ( );
__declspec(implementation_key(5753)) void IEllipseArc::PutAngle1 ( double PVal );
__declspec(implementation_key(5754)) double IEllipseArc::GetAngle1 ( );
__declspec(implementation_key(5755)) void IEllipseArc::PutAngle2 ( double PVal );
__declspec(implementation_key(5756)) double IEllipseArc::GetAngle2 ( );
__declspec(implementation_key(5757)) void IEllipseArc::PutSemiAxisA ( double PVal );
__declspec(implementation_key(5758)) double IEllipseArc::GetSemiAxisA ( );
__declspec(implementation_key(5759)) void IEllipseArc::PutSemiAxisB ( double PVal );
__declspec(implementation_key(5760)) double IEllipseArc::GetSemiAxisB ( );
__declspec(implementation_key(5761)) void IEllipseArc::PutAngle ( double PVal );
__declspec(implementation_key(5762)) double IEllipseArc::GetAngle ( );
__declspec(implementation_key(5763)) VARIANT_BOOL IEllipseArc::GetDirection ( );
__declspec(implementation_key(5764)) void IEllipseArc::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5765)) long IEllipseArc::GetStyle ( );
__declspec(implementation_key(5766)) void IEllipseArc::PutStyle ( long Result );
__declspec(implementation_key(5767)) IEllipseArcPtr IEllipseArcs::GetEllipseArc ( const _variant_t & Index );
__declspec(implementation_key(5768)) IEllipseArcPtr IEllipseArcs::Add ( );
__declspec(implementation_key(5769)) void IRectangle::PutX ( double PVal );
__declspec(implementation_key(5770)) double IRectangle::GetX ( );
__declspec(implementation_key(5771)) void IRectangle::PutY ( double PVal );
__declspec(implementation_key(5772)) double IRectangle::GetY ( );
__declspec(implementation_key(5773)) void IRectangle::PutAngle ( double PVal );
__declspec(implementation_key(5774)) double IRectangle::GetAngle ( );
__declspec(implementation_key(5775)) void IRectangle::PutHeight ( double PVal );
__declspec(implementation_key(5776)) double IRectangle::GetHeight ( );
__declspec(implementation_key(5777)) void IRectangle::PutWidth ( double PVal );
__declspec(implementation_key(5778)) double IRectangle::GetWidth ( );
__declspec(implementation_key(5779)) long IRectangle::GetStyle ( );
__declspec(implementation_key(5780)) void IRectangle::PutStyle ( long Result );
__declspec(implementation_key(5781)) VARIANT_BOOL IRectangle::GetCorner ( long Index, enum ksCornerTypeEnum * Type, double * L1, double * L2 );
__declspec(implementation_key(5782)) VARIANT_BOOL IRectangle::SetCorner ( long Index, enum ksCornerTypeEnum Type, double L1, double L2 );
__declspec(implementation_key(5783)) _variant_t IRectangle::GetContourSegmentsPoints ( );
__declspec(implementation_key(5784)) IRectanglePtr IRectangles::GetRectangle ( const _variant_t & Index );
__declspec(implementation_key(5785)) IRectanglePtr IRectangles::Add ( );
__declspec(implementation_key(5786)) void IRegularPolygon::PutCount ( long PVal );
__declspec(implementation_key(5787)) long IRegularPolygon::GetCount ( );
__declspec(implementation_key(5788)) void IRegularPolygon::PutXc ( double PVal );
__declspec(implementation_key(5789)) double IRegularPolygon::GetXc ( );
__declspec(implementation_key(5790)) void IRegularPolygon::PutYc ( double PVal );
__declspec(implementation_key(5791)) double IRegularPolygon::GetYc ( );
__declspec(implementation_key(5792)) void IRegularPolygon::PutAngle ( double PVal );
__declspec(implementation_key(5793)) double IRegularPolygon::GetAngle ( );
__declspec(implementation_key(5794)) void IRegularPolygon::PutRadius ( double PVal );
__declspec(implementation_key(5795)) double IRegularPolygon::GetRadius ( );
__declspec(implementation_key(5796)) void IRegularPolygon::PutDescribe ( VARIANT_BOOL PVal );
__declspec(implementation_key(5797)) VARIANT_BOOL IRegularPolygon::GetDescribe ( );
__declspec(implementation_key(5798)) long IRegularPolygon::GetStyle ( );
__declspec(implementation_key(5799)) void IRegularPolygon::PutStyle ( long Result );
__declspec(implementation_key(5800)) VARIANT_BOOL IRegularPolygon::GetCorner ( long Index, enum ksCornerTypeEnum * Type, double * L1, double * L2 );
__declspec(implementation_key(5801)) VARIANT_BOOL IRegularPolygon::SetCorner ( long Index, enum ksCornerTypeEnum Type, double L1, double L2 );
__declspec(implementation_key(5802)) _variant_t IRegularPolygon::GetContourSegmentsPoints ( );
__declspec(implementation_key(5803)) IRegularPolygonPtr IRegularPolygons::GetRegularPolygon ( const _variant_t & Index );
__declspec(implementation_key(5804)) IRegularPolygonPtr IRegularPolygons::Add ( );
__declspec(implementation_key(5805)) IDrawingObjectPtr IEquidistant::GetBaseObject ( );
__declspec(implementation_key(5806)) void IEquidistant::PutBaseObject ( struct IDrawingObject * Result );
__declspec(implementation_key(5807)) void IEquidistant::PutSide ( enum ksEquidistantTypeEnum PVal );
__declspec(implementation_key(5808)) enum ksEquidistantTypeEnum IEquidistant::GetSide ( );
__declspec(implementation_key(5809)) void IEquidistant::PutCutMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(5810)) VARIANT_BOOL IEquidistant::GetCutMode ( );
__declspec(implementation_key(5811)) void IEquidistant::PutDegenerateSegment ( VARIANT_BOOL PVal );
__declspec(implementation_key(5812)) VARIANT_BOOL IEquidistant::GetDegenerateSegment ( );
__declspec(implementation_key(5813)) void IEquidistant::PutLeftRadius ( double PVal );
__declspec(implementation_key(5814)) double IEquidistant::GetLeftRadius ( );
__declspec(implementation_key(5815)) void IEquidistant::PutRightRadius ( double PVal );
__declspec(implementation_key(5816)) double IEquidistant::GetRightRadius ( );
__declspec(implementation_key(5817)) long IEquidistant::GetStyle ( );
__declspec(implementation_key(5818)) void IEquidistant::PutStyle ( long Result );
__declspec(implementation_key(5819)) IEquidistantPtr IEquidistants::GetEquidistant ( const _variant_t & Index );
__declspec(implementation_key(5820)) IEquidistantPtr IEquidistants::Add ( );
__declspec(implementation_key(5821)) double IHatch::GetX ( );
__declspec(implementation_key(5822)) void IHatch::PutX ( double Result );
__declspec(implementation_key(5823)) double IHatch::GetY ( );
__declspec(implementation_key(5824)) void IHatch::PutY ( double Result );
__declspec(implementation_key(5825)) VARIANT_BOOL IHatch::GetSide ( );
__declspec(implementation_key(5826)) void IHatch::PutSide ( VARIANT_BOOL Result );
__declspec(implementation_key(5827)) IHatchPtr IHatches::GetHatch ( const _variant_t & Index );
__declspec(implementation_key(5828)) IHatchPtr IHatches::Add ( );
__declspec(implementation_key(5829)) enum ksColouringTypeEnum IColouring::GetColouringType ( );
__declspec(implementation_key(5830)) void IColouring::PutColouringType ( enum ksColouringTypeEnum Result );
__declspec(implementation_key(5831)) long IColouring::GetColor1 ( );
__declspec(implementation_key(5832)) void IColouring::PutColor1 ( long Result );
__declspec(implementation_key(5833)) long IColouring::GetColor2 ( );
__declspec(implementation_key(5834)) void IColouring::PutColor2 ( long Result );
__declspec(implementation_key(5835)) long IColouring::GetTransparency1 ( );
__declspec(implementation_key(5836)) void IColouring::PutTransparency1 ( long PVal );
__declspec(implementation_key(5837)) long IColouring::GetTransparency2 ( );
__declspec(implementation_key(5838)) void IColouring::PutTransparency2 ( long PVal );
__declspec(implementation_key(5839)) VARIANT_BOOL IColouring::GetGradientType ( );
__declspec(implementation_key(5840)) void IColouring::PutGradientType ( VARIANT_BOOL Result );
__declspec(implementation_key(5841)) long IColouring::GetGradientCount ( );
__declspec(implementation_key(5842)) void IColouring::PutGradientCount ( long Result );
__declspec(implementation_key(5843)) double IColouring::GetGradientAngle ( );
__declspec(implementation_key(5844)) void IColouring::PutGradientAngle ( double Result );
__declspec(implementation_key(5845)) double IColouring::GetXc ( );
__declspec(implementation_key(5846)) void IColouring::PutXc ( double Result );
__declspec(implementation_key(5847)) double IColouring::GetYc ( );
__declspec(implementation_key(5848)) void IColouring::PutYc ( double Result );
__declspec(implementation_key(5849)) VARIANT_BOOL IColouring::GetGradations ( VARIANT * Positions, VARIANT * Colors, VARIANT * Transparences, VARIANT * Interpolations );
__declspec(implementation_key(5850)) VARIANT_BOOL IColouring::SetGradations ( const _variant_t & Positions, const _variant_t & Colors, const _variant_t & Transparences, const _variant_t & Interpolations );
__declspec(implementation_key(5851)) long IColouring::AddGradation ( long Position, long Color, long Transparency, VARIANT_BOOL Interpolation );
__declspec(implementation_key(5852)) VARIANT_BOOL IColouring::ClearGradations ( );
__declspec(implementation_key(5853)) long IColouring::GetGradationsCount ( );
__declspec(implementation_key(5854)) VARIANT_BOOL IColouring::GetGradation ( long Index, long * Position, long * Color, long * Transparency, VARIANT_BOOL * Interpolation );
__declspec(implementation_key(5855)) long IColouring::SetGradation ( long Index, long Position, long Color, long Transparency, VARIANT_BOOL Interpolation );
__declspec(implementation_key(5856)) VARIANT_BOOL IColouring::DeleteGradation ( long Index );
__declspec(implementation_key(5857)) long IColouring::FindPosition ( long Position );
__declspec(implementation_key(5858)) IColouringPtr IColourings::GetColouring ( const _variant_t & Index );
__declspec(implementation_key(5859)) IColouringPtr IColourings::Add ( );
__declspec(implementation_key(5860)) VARIANT_BOOL IConicCurve::GetPoint ( enum ksConicCurvePontIndexEnum PointIndex, double * X, double * Y );
__declspec(implementation_key(5861)) VARIANT_BOOL IConicCurve::SetPoint ( enum ksConicCurvePontIndexEnum PointIndex, double X, double Y );
__declspec(implementation_key(5862)) double IConicCurve::GetHeight ( );
__declspec(implementation_key(5863)) void IConicCurve::PutHeight ( double PVal );
__declspec(implementation_key(5864)) double IConicCurve::GetCoefficient ( );
__declspec(implementation_key(5865)) void IConicCurve::PutCoefficient ( double PVal );
__declspec(implementation_key(5866)) double IConicCurve::GetAngle1 ( );
__declspec(implementation_key(5867)) void IConicCurve::PutAngle1 ( double PVal );
__declspec(implementation_key(5868)) double IConicCurve::GetAngle2 ( );
__declspec(implementation_key(5869)) void IConicCurve::PutAngle2 ( double PVal );
__declspec(implementation_key(5870)) long IConicCurve::GetStyle ( );
__declspec(implementation_key(5871)) void IConicCurve::PutStyle ( long Result );
__declspec(implementation_key(5872)) IConicCurvePtr IConicCurves::GetConicCurve ( const _variant_t & Index );
__declspec(implementation_key(5873)) IConicCurvePtr IConicCurves::Add ( );
__declspec(implementation_key(5874)) double IMark::GetX ( );
__declspec(implementation_key(5875)) void IMark::PutX ( double Result );
__declspec(implementation_key(5876)) double IMark::GetY ( );
__declspec(implementation_key(5877)) void IMark::PutY ( double Result );
__declspec(implementation_key(5878)) VARIANT_BOOL IMark::GetAutoNumber ( );
__declspec(implementation_key(5879)) void IMark::PutAutoNumber ( VARIANT_BOOL Result );
__declspec(implementation_key(5880)) ITextPtr IMark::GetName ( );
__declspec(implementation_key(5881)) ITextPtr IMark::GetNumber ( );
__declspec(implementation_key(5882)) ITextPtr IMark::GetTextBefore ( );
__declspec(implementation_key(5883)) ITextPtr IMark::GetTextAfter ( );
__declspec(implementation_key(5884)) ITextPtr IMark::GetTextUnder ( );
__declspec(implementation_key(5885)) _bstr_t IMark::GetComment ( );
__declspec(implementation_key(5886)) void IMark::PutComment ( _bstr_t Result );
__declspec(implementation_key(5887)) IMarkPtr IMarks::GetMark ( const _variant_t & Index );
__declspec(implementation_key(5888)) IMarkPtr IMarks::Add ( enum DrawingObjectTypeEnum MarkType );
__declspec(implementation_key(5889)) double IMarkInsideForm::GetAngle ( );
__declspec(implementation_key(5890)) void IMarkInsideForm::PutAngle ( double Result );
__declspec(implementation_key(5891)) void IMarkInsideForm::PutForm ( enum ksMarkInsideFormEnum NewVal );
__declspec(implementation_key(5892)) enum ksMarkInsideFormEnum IMarkInsideForm::GetForm ( );
__declspec(implementation_key(5893)) void IMarkInsideForm::PutFormGabarit ( double PVal );
__declspec(implementation_key(5894)) double IMarkInsideForm::GetFormGabarit ( );
__declspec(implementation_key(5895)) void IMarkInsideForm::PutFormHeight ( double PVal );
__declspec(implementation_key(5896)) double IMarkInsideForm::GetFormHeight ( );
__declspec(implementation_key(5897)) void IMarkInsideForm::PutFormStyle ( long PVal );
__declspec(implementation_key(5898)) long IMarkInsideForm::GetFormStyle ( );
__declspec(implementation_key(5899)) enum ksMarkOnLinePosTypeEnum IMarkOnLine::GetPosition ( );
__declspec(implementation_key(5900)) void IMarkOnLine::PutPosition ( enum ksMarkOnLinePosTypeEnum Result );
__declspec(implementation_key(5901)) IDrawingObjectPtr IMarkOnLine::GetLine ( );
__declspec(implementation_key(5902)) void IMarkOnLine::PutLine ( struct IDrawingObject * Result );
__declspec(implementation_key(5903)) enum ksArrowEnum IMarkOnLeader::GetArrowType ( );
__declspec(implementation_key(5904)) void IMarkOnLeader::PutArrowType ( enum ksArrowEnum PVal );
__declspec(implementation_key(5905)) enum ksShelfDirectionEnum IMarkOnLeader::GetShelfDirection ( );
__declspec(implementation_key(5906)) void IMarkOnLeader::PutShelfDirection ( enum ksShelfDirectionEnum PVal );
__declspec(implementation_key(5907)) VARIANT_BOOL IMarkOnLeader::GetParallelBranch ( );
__declspec(implementation_key(5908)) void IMarkOnLeader::PutParallelBranch ( VARIANT_BOOL PVal );
__declspec(implementation_key(5909)) long IMarkOnLeader::GetBranchCount ( );
__declspec(implementation_key(5910)) void IMarkOnLeader::PutBranchPoints ( long Index, const _variant_t & PVal );
__declspec(implementation_key(5911)) _variant_t IMarkOnLeader::GetBranchPoints ( long Index );
__declspec(implementation_key(5912)) void IMarkOnLeader::PutBranchBegin ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(5913)) VARIANT_BOOL IMarkOnLeader::GetBranchBegin ( long Index );
__declspec(implementation_key(5914)) void IMarkOnLeader::PutBranchX ( long Index, double PVal );
__declspec(implementation_key(5915)) double IMarkOnLeader::GetBranchX ( long Index );
__declspec(implementation_key(5916)) void IMarkOnLeader::PutBranchY ( long Index, double PVal );
__declspec(implementation_key(5917)) double IMarkOnLeader::GetBranchY ( long Index );
__declspec(implementation_key(5918)) long IMarkOnLeader::GetBranchPointsCount ( long Index );
__declspec(implementation_key(5919)) VARIANT_BOOL IMarkOnLeader::AddBranch ( long Index, VARIANT_BOOL Begin, const _variant_t & Points );
__declspec(implementation_key(5920)) VARIANT_BOOL IMarkOnLeader::AddBranchByPoint ( long Index, VARIANT_BOOL Begin, double X, double Y );
__declspec(implementation_key(5921)) VARIANT_BOOL IMarkOnLeader::DeleteBranch ( long Index );
__declspec(implementation_key(5922)) void IAxisJut::PutLength ( double PVal );
__declspec(implementation_key(5923)) double IAxisJut::GetLength ( );
__declspec(implementation_key(5924)) void IAxisJut::PutMarkOffset ( double PVal );
__declspec(implementation_key(5925)) double IAxisJut::GetMarkOffset ( );
__declspec(implementation_key(5926)) void IAxisJut::PutBreakOffset ( double PVal );
__declspec(implementation_key(5927)) double IAxisJut::GetBreakOffset ( );
__declspec(implementation_key(5928)) void IAxisJut::PutBreakDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(5929)) VARIANT_BOOL IAxisJut::GetBreakDirection ( );
__declspec(implementation_key(5930)) void IAxisJut::PutMarkOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(5931)) VARIANT_BOOL IAxisJut::GetMarkOn ( );
__declspec(implementation_key(5932)) long ICutUnitMarking::GetStrokeCount ( );
__declspec(implementation_key(5933)) void ICutUnitMarking::PutStrokeX ( long Index, double PVal );
__declspec(implementation_key(5934)) double ICutUnitMarking::GetStrokeX ( long Index );
__declspec(implementation_key(5935)) void ICutUnitMarking::PutStrokeY ( long Index, double PVal );
__declspec(implementation_key(5936)) double ICutUnitMarking::GetStrokeY ( long Index );
__declspec(implementation_key(5937)) void ICutUnitMarking::PutStroke ( long Index, double PVal );
__declspec(implementation_key(5938)) double ICutUnitMarking::GetStroke ( long Index );
__declspec(implementation_key(5939)) double ICutUnitMarking::GetAngle ( );
__declspec(implementation_key(5940)) void ICutUnitMarking::PutAngle ( double Result );
__declspec(implementation_key(5941)) enum ksShelfDirectionEnum ICutUnitMarking::GetShelfDirection ( );
__declspec(implementation_key(5942)) void ICutUnitMarking::PutShelfDirection ( enum ksShelfDirectionEnum Result );
__declspec(implementation_key(5943)) double ICutUnitMarking::GetShelfX ( );
__declspec(implementation_key(5944)) void ICutUnitMarking::PutShelfX ( double Result );
__declspec(implementation_key(5945)) double ICutUnitMarking::GetShelfY ( );
__declspec(implementation_key(5946)) void ICutUnitMarking::PutShelfY ( double Result );
__declspec(implementation_key(5947)) ITextPtr ICutUnitMarking::GetTextUp ( );
__declspec(implementation_key(5948)) ITextPtr ICutUnitMarking::GetTextDown ( );
__declspec(implementation_key(5949)) VARIANT_BOOL ICutUnitMarking::AddStroke ( double X, double Y, double Length );
__declspec(implementation_key(5950)) VARIANT_BOOL ICutUnitMarking::DeleteStroke ( long Index );
__declspec(implementation_key(5951)) ICutUnitMarkingPtr ICutUnitMarkings::GetCutUnitMarking ( const _variant_t & Index );
__declspec(implementation_key(5952)) ICutUnitMarkingPtr ICutUnitMarkings::Add ( );
__declspec(implementation_key(5953)) double IUnitMarking::GetXc ( );
__declspec(implementation_key(5954)) void IUnitMarking::PutXc ( double Result );
__declspec(implementation_key(5955)) double IUnitMarking::GetYc ( );
__declspec(implementation_key(5956)) void IUnitMarking::PutYc ( double Result );
__declspec(implementation_key(5957)) double IUnitMarking::GetRadius ( );
__declspec(implementation_key(5958)) void IUnitMarking::PutRadius ( double Result );
__declspec(implementation_key(5959)) double IUnitMarking::GetHeight ( );
__declspec(implementation_key(5960)) void IUnitMarking::PutHeight ( double Result );
__declspec(implementation_key(5961)) double IUnitMarking::GetWidth ( );
__declspec(implementation_key(5962)) void IUnitMarking::PutWidth ( double Result );
__declspec(implementation_key(5963)) enum ksShelfDirectionEnum IUnitMarking::GetShelfDirection ( );
__declspec(implementation_key(5964)) void IUnitMarking::PutShelfDirection ( enum ksShelfDirectionEnum Result );
__declspec(implementation_key(5965)) double IUnitMarking::GetShelfX ( );
__declspec(implementation_key(5966)) void IUnitMarking::PutShelfX ( double Result );
__declspec(implementation_key(5967)) double IUnitMarking::GetShelfY ( );
__declspec(implementation_key(5968)) void IUnitMarking::PutShelfY ( double Result );
__declspec(implementation_key(5969)) enum ksContourFormEnum IUnitMarking::GetForm ( );
__declspec(implementation_key(5970)) void IUnitMarking::PutForm ( enum ksContourFormEnum Result );
__declspec(implementation_key(5971)) ITextPtr IUnitMarking::GetTextUp ( );
__declspec(implementation_key(5972)) ITextPtr IUnitMarking::GetTextDown ( );
__declspec(implementation_key(5973)) double IUnitMarking::GetFilletRadius ( );
__declspec(implementation_key(5974)) void IUnitMarking::PutFilletRadius ( double Result );
__declspec(implementation_key(5975)) IUnitMarkingPtr IUnitMarkings::GetUnitMarking ( const _variant_t & Index );
__declspec(implementation_key(5976)) IUnitMarkingPtr IUnitMarkings::Add ( );
__declspec(implementation_key(5977)) enum ksArrowEnum IMultiTextLeader::GetArrowType ( );
__declspec(implementation_key(5978)) void IMultiTextLeader::PutArrowType ( enum ksArrowEnum Result );
__declspec(implementation_key(5979)) long IMultiTextLeader::GetBranchCount ( );
__declspec(implementation_key(5980)) void IMultiTextLeader::PutBranchPoints ( long Index, const _variant_t & PVal );
__declspec(implementation_key(5981)) _variant_t IMultiTextLeader::GetBranchPoints ( long Index );
__declspec(implementation_key(5982)) long IMultiTextLeader::GetBranchPointsCount ( long Index );
__declspec(implementation_key(5983)) void IMultiTextLeader::PutBranchX ( long Index, double PVal );
__declspec(implementation_key(5984)) double IMultiTextLeader::GetBranchX ( long Index );
__declspec(implementation_key(5985)) void IMultiTextLeader::PutBranchY ( long Index, double PVal );
__declspec(implementation_key(5986)) double IMultiTextLeader::GetBranchY ( long Index );
__declspec(implementation_key(5987)) VARIANT_BOOL IMultiTextLeader::AddBranch ( long Index, const _variant_t & Points );
__declspec(implementation_key(5988)) VARIANT_BOOL IMultiTextLeader::AddBranchByPoint ( long Index, double X, double Y );
__declspec(implementation_key(5989)) VARIANT_BOOL IMultiTextLeader::DeleteBranch ( long Index );
__declspec(implementation_key(5990)) double IMultiTextLeader::GetShelfX ( );
__declspec(implementation_key(5991)) void IMultiTextLeader::PutShelfX ( double Result );
__declspec(implementation_key(5992)) double IMultiTextLeader::GetShelfY ( );
__declspec(implementation_key(5993)) void IMultiTextLeader::PutShelfY ( double Result );
__declspec(implementation_key(5994)) enum ksShelfDirectionEnum IMultiTextLeader::GetShelfDirection ( );
__declspec(implementation_key(5995)) void IMultiTextLeader::PutShelfDirection ( enum ksShelfDirectionEnum Result );
__declspec(implementation_key(5996)) VARIANT_BOOL IMultiTextLeader::GetTextDirection ( );
__declspec(implementation_key(5997)) void IMultiTextLeader::PutTextDirection ( VARIANT_BOOL Result );
__declspec(implementation_key(5998)) VARIANT_BOOL IMultiTextLeader::GetForm ( );
__declspec(implementation_key(5999)) void IMultiTextLeader::PutForm ( VARIANT_BOOL Result );
__declspec(implementation_key(6000)) VARIANT_BOOL IMultiTextLeader::GetAlign ( );
__declspec(implementation_key(6001)) void IMultiTextLeader::PutAlign ( VARIANT_BOOL Result );
__declspec(implementation_key(6002)) ITextPtr IMultiTextLeader::GetText ( );
__declspec(implementation_key(6003)) IMultiTextLeaderPtr IMultiTextLeaders::GetMultiTextLeader ( const _variant_t & Index );
__declspec(implementation_key(6004)) IMultiTextLeaderPtr IMultiTextLeaders::Add ( );
__declspec(implementation_key(6005)) double IUnitNumber::GetX ( );
__declspec(implementation_key(6006)) void IUnitNumber::PutX ( double Result );
__declspec(implementation_key(6007)) double IUnitNumber::GetY ( );
__declspec(implementation_key(6008)) void IUnitNumber::PutY ( double Result );
__declspec(implementation_key(6009)) ITextPtr IUnitNumber::GetTextUp ( );
__declspec(implementation_key(6010)) ITextPtr IUnitNumber::GetTextDown ( );
__declspec(implementation_key(6011)) IUnitNumberPtr IUnitNumbers::GetUnitNumber ( const _variant_t & Index );
__declspec(implementation_key(6012)) IUnitNumberPtr IUnitNumbers::Add ( );
__declspec(implementation_key(6013)) void IBrace::PutX1 ( double PVal );
__declspec(implementation_key(6014)) double IBrace::GetX1 ( );
__declspec(implementation_key(6015)) void IBrace::PutY1 ( double PVal );
__declspec(implementation_key(6016)) double IBrace::GetY1 ( );
__declspec(implementation_key(6017)) void IBrace::PutX2 ( double PVal );
__declspec(implementation_key(6018)) double IBrace::GetX2 ( );
__declspec(implementation_key(6019)) void IBrace::PutY2 ( double PVal );
__declspec(implementation_key(6020)) double IBrace::GetY2 ( );
__declspec(implementation_key(6021)) void IBrace::PutLength ( double PVal );
__declspec(implementation_key(6022)) double IBrace::GetLength ( );
__declspec(implementation_key(6023)) void IBrace::PutAngle ( double PVal );
__declspec(implementation_key(6024)) double IBrace::GetAngle ( );
__declspec(implementation_key(6025)) double IBrace::GetRadius ( );
__declspec(implementation_key(6026)) void IBrace::PutRadius ( double Result );
__declspec(implementation_key(6027)) enum ksShelfDirectionEnum IBrace::GetShelfDirection ( );
__declspec(implementation_key(6028)) void IBrace::PutShelfDirection ( enum ksShelfDirectionEnum Result );
__declspec(implementation_key(6029)) double IBrace::GetShelfX ( );
__declspec(implementation_key(6030)) void IBrace::PutShelfX ( double Result );
__declspec(implementation_key(6031)) double IBrace::GetShelfY ( );
__declspec(implementation_key(6032)) void IBrace::PutShelfY ( double Result );
__declspec(implementation_key(6033)) VARIANT_BOOL IBrace::GetDirection ( );
__declspec(implementation_key(6034)) void IBrace::PutDirection ( VARIANT_BOOL Result );
__declspec(implementation_key(6035)) enum ksAlignmentTypeEnum IBrace::GetAlignment ( );
__declspec(implementation_key(6036)) void IBrace::PutAlignment ( enum ksAlignmentTypeEnum Result );
__declspec(implementation_key(6037)) long IBrace::GetStyle ( );
__declspec(implementation_key(6038)) void IBrace::PutStyle ( long Result );
__declspec(implementation_key(6039)) ITextPtr IBrace::GetText ( );
__declspec(implementation_key(6040)) void IBrace::PutShelfPoints ( const _variant_t & PVal );
__declspec(implementation_key(6041)) _variant_t IBrace::GetShelfPoints ( );
__declspec(implementation_key(6042)) IBracePtr IBraces::GetBrace ( const _variant_t & Index );
__declspec(implementation_key(6043)) IBracePtr IBraces::Add ( );
__declspec(implementation_key(6044)) VARIANT_BOOL ICutLine::GetArrowPos ( );
__declspec(implementation_key(6045)) void ICutLine::PutArrowPos ( VARIANT_BOOL Result );
__declspec(implementation_key(6046)) double ICutLine::GetX1 ( );
__declspec(implementation_key(6047)) void ICutLine::PutX1 ( double Result );
__declspec(implementation_key(6048)) double ICutLine::GetY1 ( );
__declspec(implementation_key(6049)) void ICutLine::PutY1 ( double Result );
__declspec(implementation_key(6050)) double ICutLine::GetX2 ( );
__declspec(implementation_key(6051)) void ICutLine::PutX2 ( double Result );
__declspec(implementation_key(6052)) double ICutLine::GetY2 ( );
__declspec(implementation_key(6053)) void ICutLine::PutY2 ( double Result );
__declspec(implementation_key(6054)) void ICutLine::PutPoints ( const _variant_t & PVal );
__declspec(implementation_key(6055)) _variant_t ICutLine::GetPoints ( );
__declspec(implementation_key(6056)) VARIANT_BOOL ICutLine::GetAutoSorted ( );
__declspec(implementation_key(6057)) void ICutLine::PutAutoSorted ( VARIANT_BOOL Result );
__declspec(implementation_key(6058)) ITextPtr ICutLine::GetText ( );
__declspec(implementation_key(6059)) ITextPtr ICutLine::GetAdditionalText ( );
__declspec(implementation_key(6060)) VARIANT_BOOL ICutLine::GetAutoSheet ( );
__declspec(implementation_key(6061)) void ICutLine::PutAutoSheet ( VARIANT_BOOL Result );
__declspec(implementation_key(6062)) VARIANT_BOOL ICutLine::GetAutoZone ( );
__declspec(implementation_key(6063)) void ICutLine::PutAutoZone ( VARIANT_BOOL Result );
__declspec(implementation_key(6064)) VARIANT_BOOL ICutLine::GetAdditionalTextPos ( );
__declspec(implementation_key(6065)) void ICutLine::PutAdditionalTextPos ( VARIANT_BOOL Result );
__declspec(implementation_key(6066)) enum ksArrowEnum ICutLine::GetArrowType ( );
__declspec(implementation_key(6067)) void ICutLine::PutArrowType ( enum ksArrowEnum PVal );
__declspec(implementation_key(6068)) ICutLinePtr ICutLines::GetCutLine ( const _variant_t & Index );
__declspec(implementation_key(6069)) ICutLinePtr ICutLines::Add ( );
__declspec(implementation_key(6070)) double ILineDimension::GetX1 ( );
__declspec(implementation_key(6071)) void ILineDimension::PutX1 ( double PVal );
__declspec(implementation_key(6072)) double ILineDimension::GetY1 ( );
__declspec(implementation_key(6073)) void ILineDimension::PutY1 ( double PVal );
__declspec(implementation_key(6074)) double ILineDimension::GetX2 ( );
__declspec(implementation_key(6075)) void ILineDimension::PutX2 ( double PVal );
__declspec(implementation_key(6076)) double ILineDimension::GetY2 ( );
__declspec(implementation_key(6077)) void ILineDimension::PutY2 ( double PVal );
__declspec(implementation_key(6078)) double ILineDimension::GetX3 ( );
__declspec(implementation_key(6079)) void ILineDimension::PutX3 ( double PVal );
__declspec(implementation_key(6080)) double ILineDimension::GetY3 ( );
__declspec(implementation_key(6081)) void ILineDimension::PutY3 ( double PVal );
__declspec(implementation_key(6082)) double ILineDimension::GetShelfX ( );
__declspec(implementation_key(6083)) void ILineDimension::PutShelfX ( double PVal );
__declspec(implementation_key(6084)) double ILineDimension::GetShelfY ( );
__declspec(implementation_key(6085)) void ILineDimension::PutShelfY ( double PVal );
__declspec(implementation_key(6086)) enum ksLineDimensionOrientationEnum ILineDimension::GetOrientation ( );
__declspec(implementation_key(6087)) void ILineDimension::PutOrientation ( enum ksLineDimensionOrientationEnum PVal );
__declspec(implementation_key(6088)) double ILineDimension::GetAngle ( );
__declspec(implementation_key(6089)) void ILineDimension::PutAngle ( double PVal );
__declspec(implementation_key(6090)) ILineDimensionPtr ILineDimensions::GetLineDimension ( const _variant_t & Index );
__declspec(implementation_key(6091)) ILineDimensionPtr ILineDimensions::Add ( );
__declspec(implementation_key(6092)) ILineDimensionPtr ILineDimensions::AddLineSegmentAndPointDimension ( );
__declspec(implementation_key(6093)) double IRadialDimension::GetXc ( );
__declspec(implementation_key(6094)) void IRadialDimension::PutXc ( double PVal );
__declspec(implementation_key(6095)) double IRadialDimension::GetYc ( );
__declspec(implementation_key(6096)) void IRadialDimension::PutYc ( double PVal );
__declspec(implementation_key(6097)) double IRadialDimension::GetRadius ( );
__declspec(implementation_key(6098)) void IRadialDimension::PutRadius ( double PVal );
__declspec(implementation_key(6099)) VARIANT_BOOL IRadialDimension::GetDimensionType ( );
__declspec(implementation_key(6100)) void IRadialDimension::PutDimensionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(6101)) IDrawingObjectPtr IRadialDimension::GetBaseObject ( );
__declspec(implementation_key(6102)) void IRadialDimension::PutBaseObject ( struct IDrawingObject * Object1 );
__declspec(implementation_key(6103)) double IRadialDimension::GetAngle ( );
__declspec(implementation_key(6104)) void IRadialDimension::PutAngle ( double PVal );
__declspec(implementation_key(6105)) VARIANT_BOOL IRadialDimension::AddBranch ( VARIANT_BOOL BranchBegin, struct IDrawingObject * BranchObject );
__declspec(implementation_key(6106)) VARIANT_BOOL IRadialDimension::AddBranchByArcParam ( VARIANT_BOOL BranchBegin, double Xc, double Yc, double Radius, double Angle1, double Angle2, VARIANT_BOOL Direction );
__declspec(implementation_key(6107)) long IRadialDimension::GetBranchsCount ( );
__declspec(implementation_key(6108)) IDrawingObjectPtr IRadialDimension::GetBranchObject ( long Index );
__declspec(implementation_key(6109)) void IRadialDimension::PutBranchObject ( long Index, struct IDrawingObject * BranchObject );
__declspec(implementation_key(6110)) VARIANT_BOOL IRadialDimension::DeleteBranch ( long Index );
__declspec(implementation_key(6111)) VARIANT_BOOL IRadialDimension::GetBranchParam ( long Index, double * Xc, double * Yc, double * Angle1, double * Angle2, VARIANT_BOOL * Direction );
__declspec(implementation_key(6112)) VARIANT_BOOL IRadialDimension::SetBranchParam ( long Index, double Xc, double Yc, double Angle1, double Angle2, VARIANT_BOOL Direction );
__declspec(implementation_key(6113)) VARIANT_BOOL IRadialDimension::GetBranchBegin ( long Index );
__declspec(implementation_key(6114)) void IRadialDimension::PutBranchBegin ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(6115)) double IRadialDimension::GetShelfX ( );
__declspec(implementation_key(6116)) void IRadialDimension::PutShelfX ( double PVal );
__declspec(implementation_key(6117)) double IRadialDimension::GetShelfY ( );
__declspec(implementation_key(6118)) void IRadialDimension::PutShelfY ( double PVal );
__declspec(implementation_key(6119)) IRadialDimensionPtr IRadialDimensions::GetRadialDimension ( const _variant_t & Index );
__declspec(implementation_key(6120)) IRadialDimensionPtr IRadialDimensions::Add ( );
__declspec(implementation_key(6121)) double IDiametralDimension::GetXc ( );
__declspec(implementation_key(6122)) void IDiametralDimension::PutXc ( double PVal );
__declspec(implementation_key(6123)) double IDiametralDimension::GetYc ( );
__declspec(implementation_key(6124)) void IDiametralDimension::PutYc ( double PVal );
__declspec(implementation_key(6125)) double IDiametralDimension::GetRadius ( );
__declspec(implementation_key(6126)) void IDiametralDimension::PutRadius ( double PVal );
__declspec(implementation_key(6127)) VARIANT_BOOL IDiametralDimension::GetDimensionType ( );
__declspec(implementation_key(6128)) void IDiametralDimension::PutDimensionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(6129)) IDrawingObjectPtr IDiametralDimension::GetBaseObject ( );
__declspec(implementation_key(6130)) void IDiametralDimension::PutBaseObject ( struct IDrawingObject * Object1 );
__declspec(implementation_key(6131)) double IDiametralDimension::GetAngle ( );
__declspec(implementation_key(6132)) void IDiametralDimension::PutAngle ( double PVal );
__declspec(implementation_key(6133)) IDiametralDimensionPtr IDiametralDimensions::GetDiametralDimension ( const _variant_t & Index );
__declspec(implementation_key(6134)) IDiametralDimensionPtr IDiametralDimensions::Add ( );
__declspec(implementation_key(6135)) double IAngleDimension::GetXc ( );
__declspec(implementation_key(6136)) void IAngleDimension::PutXc ( double PVal );
__declspec(implementation_key(6137)) double IAngleDimension::GetYc ( );
__declspec(implementation_key(6138)) void IAngleDimension::PutYc ( double PVal );
__declspec(implementation_key(6139)) void IAngleDimension::PutRadius ( double PVal );
__declspec(implementation_key(6140)) double IAngleDimension::GetRadius ( );
__declspec(implementation_key(6141)) void IAngleDimension::PutAngle1 ( double PVal );
__declspec(implementation_key(6142)) double IAngleDimension::GetAngle1 ( );
__declspec(implementation_key(6143)) void IAngleDimension::PutAngle2 ( double PVal );
__declspec(implementation_key(6144)) double IAngleDimension::GetAngle2 ( );
__declspec(implementation_key(6145)) void IAngleDimension::PutX1 ( double PVal );
__declspec(implementation_key(6146)) double IAngleDimension::GetX1 ( );
__declspec(implementation_key(6147)) void IAngleDimension::PutY1 ( double PVal );
__declspec(implementation_key(6148)) double IAngleDimension::GetY1 ( );
__declspec(implementation_key(6149)) void IAngleDimension::PutX2 ( double PVal );
__declspec(implementation_key(6150)) double IAngleDimension::GetX2 ( );
__declspec(implementation_key(6151)) void IAngleDimension::PutY2 ( double PVal );
__declspec(implementation_key(6152)) double IAngleDimension::GetY2 ( );
__declspec(implementation_key(6153)) IDrawingObjectPtr IAngleDimension::GetBaseObject1 ( );
__declspec(implementation_key(6154)) void IAngleDimension::PutBaseObject1 ( struct IDrawingObject * Object1 );
__declspec(implementation_key(6155)) IDrawingObjectPtr IAngleDimension::GetBaseObject2 ( );
__declspec(implementation_key(6156)) void IAngleDimension::PutBaseObject2 ( struct IDrawingObject * Object1 );
__declspec(implementation_key(6157)) enum ksAngleDimTypeEnum IAngleDimension::GetDimensionType ( );
__declspec(implementation_key(6158)) void IAngleDimension::PutDimensionType ( enum ksAngleDimTypeEnum PVal );
__declspec(implementation_key(6159)) double IAngleDimension::GetShelfX ( );
__declspec(implementation_key(6160)) void IAngleDimension::PutShelfX ( double PVal );
__declspec(implementation_key(6161)) double IAngleDimension::GetShelfY ( );
__declspec(implementation_key(6162)) void IAngleDimension::PutShelfY ( double PVal );
__declspec(implementation_key(6163)) void IAngleDimension::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(6164)) VARIANT_BOOL IAngleDimension::GetDirection ( );
__declspec(implementation_key(6165)) void IAngleDimension::PutX3 ( double PVal );
__declspec(implementation_key(6166)) double IAngleDimension::GetX3 ( );
__declspec(implementation_key(6167)) void IAngleDimension::PutY3 ( double PVal );
__declspec(implementation_key(6168)) double IAngleDimension::GetY3 ( );
__declspec(implementation_key(6169)) IAngleDimensionPtr IAngleDimensions::GetAngleDimension ( const _variant_t & Index );
__declspec(implementation_key(6170)) IAngleDimensionPtr IAngleDimensions::Add ( enum DrawingObjectTypeEnum DimType );
__declspec(implementation_key(6171)) double IBreakLineDimension::GetX1 ( );
__declspec(implementation_key(6172)) void IBreakLineDimension::PutX1 ( double PVal );
__declspec(implementation_key(6173)) double IBreakLineDimension::GetY1 ( );
__declspec(implementation_key(6174)) void IBreakLineDimension::PutY1 ( double PVal );
__declspec(implementation_key(6175)) double IBreakLineDimension::GetX2 ( );
__declspec(implementation_key(6176)) void IBreakLineDimension::PutX2 ( double PVal );
__declspec(implementation_key(6177)) double IBreakLineDimension::GetY2 ( );
__declspec(implementation_key(6178)) void IBreakLineDimension::PutY2 ( double PVal );
__declspec(implementation_key(6179)) double IBreakLineDimension::GetX3 ( );
__declspec(implementation_key(6180)) void IBreakLineDimension::PutX3 ( double PVal );
__declspec(implementation_key(6181)) double IBreakLineDimension::GetY3 ( );
__declspec(implementation_key(6182)) void IBreakLineDimension::PutY3 ( double PVal );
__declspec(implementation_key(6183)) double IBreakLineDimension::GetShelfX ( );
__declspec(implementation_key(6184)) void IBreakLineDimension::PutShelfX ( double PVal );
__declspec(implementation_key(6185)) double IBreakLineDimension::GetShelfY ( );
__declspec(implementation_key(6186)) void IBreakLineDimension::PutShelfY ( double PVal );
__declspec(implementation_key(6187)) IDrawingObjectPtr IBreakLineDimension::GetBaseObject ( );
__declspec(implementation_key(6188)) void IBreakLineDimension::PutBaseObject ( struct IDrawingObject * Object1 );
__declspec(implementation_key(6189)) IBreakLineDimensionPtr IBreakLineDimensions::GetBreakLineDimension ( const _variant_t & Index );
__declspec(implementation_key(6190)) IBreakLineDimensionPtr IBreakLineDimensions::Add ( );
__declspec(implementation_key(6191)) enum ksHeightDimTypeEnum IHeightDimension::GetDimensionType ( );
__declspec(implementation_key(6192)) void IHeightDimension::PutDimensionType ( enum ksHeightDimTypeEnum PVal );
__declspec(implementation_key(6193)) double IHeightDimension::GetX ( );
__declspec(implementation_key(6194)) void IHeightDimension::PutX ( double PVal );
__declspec(implementation_key(6195)) double IHeightDimension::GetY ( );
__declspec(implementation_key(6196)) void IHeightDimension::PutY ( double PVal );
__declspec(implementation_key(6197)) double IHeightDimension::GetX1 ( );
__declspec(implementation_key(6198)) void IHeightDimension::PutX1 ( double PVal );
__declspec(implementation_key(6199)) double IHeightDimension::GetY1 ( );
__declspec(implementation_key(6200)) void IHeightDimension::PutY1 ( double PVal );
__declspec(implementation_key(6201)) double IHeightDimension::GetX2 ( );
__declspec(implementation_key(6202)) void IHeightDimension::PutX2 ( double PVal );
__declspec(implementation_key(6203)) double IHeightDimension::GetY2 ( );
__declspec(implementation_key(6204)) void IHeightDimension::PutY2 ( double PVal );
__declspec(implementation_key(6205)) IHeightDimensionPtr IHeightDimensions::GetHeightDimension ( const _variant_t & Index );
__declspec(implementation_key(6206)) IHeightDimensionPtr IHeightDimensions::Add ( );
__declspec(implementation_key(6207)) IDrawingObjectPtr IArcDimension::GetBaseObject ( );
__declspec(implementation_key(6208)) void IArcDimension::PutBaseObject ( struct IDrawingObject * Object1 );
__declspec(implementation_key(6209)) double IArcDimension::GetXc ( );
__declspec(implementation_key(6210)) void IArcDimension::PutXc ( double PVal );
__declspec(implementation_key(6211)) double IArcDimension::GetYc ( );
__declspec(implementation_key(6212)) void IArcDimension::PutYc ( double PVal );
__declspec(implementation_key(6213)) double IArcDimension::GetX1 ( );
__declspec(implementation_key(6214)) void IArcDimension::PutX1 ( double PVal );
__declspec(implementation_key(6215)) double IArcDimension::GetY1 ( );
__declspec(implementation_key(6216)) void IArcDimension::PutY1 ( double PVal );
__declspec(implementation_key(6217)) double IArcDimension::GetX2 ( );
__declspec(implementation_key(6218)) void IArcDimension::PutX2 ( double PVal );
__declspec(implementation_key(6219)) double IArcDimension::GetY2 ( );
__declspec(implementation_key(6220)) void IArcDimension::PutY2 ( double PVal );
__declspec(implementation_key(6221)) double IArcDimension::GetX3 ( );
__declspec(implementation_key(6222)) void IArcDimension::PutX3 ( double PVal );
__declspec(implementation_key(6223)) double IArcDimension::GetY3 ( );
__declspec(implementation_key(6224)) void IArcDimension::PutY3 ( double PVal );
__declspec(implementation_key(6225)) double IArcDimension::GetShelfX ( );
__declspec(implementation_key(6226)) void IArcDimension::PutShelfX ( double PVal );
__declspec(implementation_key(6227)) double IArcDimension::GetShelfY ( );
__declspec(implementation_key(6228)) void IArcDimension::PutShelfY ( double PVal );
__declspec(implementation_key(6229)) void IArcDimension::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(6230)) VARIANT_BOOL IArcDimension::GetDirection ( );
__declspec(implementation_key(6231)) VARIANT_BOOL IArcDimension::GetDimensionType ( );
__declspec(implementation_key(6232)) void IArcDimension::PutDimensionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(6233)) VARIANT_BOOL IArcDimension::GetTextPointer ( );
__declspec(implementation_key(6234)) void IArcDimension::PutTextPointer ( VARIANT_BOOL PVal );
__declspec(implementation_key(6235)) IArcDimensionPtr IArcDimensions::GetArcDimension ( const _variant_t & Index );
__declspec(implementation_key(6236)) IArcDimensionPtr IArcDimensions::Add ( );
__declspec(implementation_key(6237)) double IBreakRadialDimension::GetXc ( );
__declspec(implementation_key(6238)) void IBreakRadialDimension::PutXc ( double PVal );
__declspec(implementation_key(6239)) double IBreakRadialDimension::GetYc ( );
__declspec(implementation_key(6240)) void IBreakRadialDimension::PutYc ( double PVal );
__declspec(implementation_key(6241)) double IBreakRadialDimension::GetRadius ( );
__declspec(implementation_key(6242)) void IBreakRadialDimension::PutRadius ( double PVal );
__declspec(implementation_key(6243)) IDrawingObjectPtr IBreakRadialDimension::GetBaseObject ( );
__declspec(implementation_key(6244)) void IBreakRadialDimension::PutBaseObject ( struct IDrawingObject * Object1 );
__declspec(implementation_key(6245)) double IBreakRadialDimension::GetAngle ( );
__declspec(implementation_key(6246)) void IBreakRadialDimension::PutAngle ( double PVal );
__declspec(implementation_key(6247)) double IBreakRadialDimension::GetBreakLength ( );
__declspec(implementation_key(6248)) void IBreakRadialDimension::PutBreakLength ( double PVal );
__declspec(implementation_key(6249)) enum ksDimensionTextPosEnum IBreakRadialDimension::GetTextOnLine ( );
__declspec(implementation_key(6250)) void IBreakRadialDimension::PutTextOnLine ( enum ksDimensionTextPosEnum PVal );
__declspec(implementation_key(6251)) double IBreakRadialDimension::GetBreakAngle ( );
__declspec(implementation_key(6252)) void IBreakRadialDimension::PutBreakAngle ( double PVal );
__declspec(implementation_key(6253)) double IBreakRadialDimension::GetBreakX1 ( );
__declspec(implementation_key(6254)) void IBreakRadialDimension::PutBreakX1 ( double PVal );
__declspec(implementation_key(6255)) double IBreakRadialDimension::GetBreakY1 ( );
__declspec(implementation_key(6256)) void IBreakRadialDimension::PutBreakY1 ( double PVal );
__declspec(implementation_key(6257)) double IBreakRadialDimension::GetBreakX2 ( );
__declspec(implementation_key(6258)) void IBreakRadialDimension::PutBreakX2 ( double PVal );
__declspec(implementation_key(6259)) double IBreakRadialDimension::GetBreakY2 ( );
__declspec(implementation_key(6260)) void IBreakRadialDimension::PutBreakY2 ( double PVal );
__declspec(implementation_key(6261)) IBreakRadialDimensionPtr IBreakRadialDimensions::GetBreakRadialDimension ( const _variant_t & Index );
__declspec(implementation_key(6262)) IBreakRadialDimensionPtr IBreakRadialDimensions::Add ( );
__declspec(implementation_key(6263)) IDrawingObjectPtr IRough::GetBaseObject ( );
__declspec(implementation_key(6264)) void IRough::PutBaseObject ( struct IDrawingObject * NewObject );
__declspec(implementation_key(6265)) double IRough::GetBranchX0 ( );
__declspec(implementation_key(6266)) void IRough::PutBranchX0 ( double Result );
__declspec(implementation_key(6267)) double IRough::GetBranchY0 ( );
__declspec(implementation_key(6268)) void IRough::PutBranchY0 ( double Result );
__declspec(implementation_key(6269)) double IRough::GetShelfX ( );
__declspec(implementation_key(6270)) void IRough::PutShelfX ( double Result );
__declspec(implementation_key(6271)) double IRough::GetShelfY ( );
__declspec(implementation_key(6272)) void IRough::PutShelfY ( double Result );
__declspec(implementation_key(6273)) enum ksArrowEnum IRough::GetBranchArrowType ( long Index );
__declspec(implementation_key(6274)) void IRough::PutBranchArrowType ( long Index, enum ksArrowEnum Result );
__declspec(implementation_key(6275)) VARIANT_BOOL IRough::GetBranchArrowInside ( long Index );
__declspec(implementation_key(6276)) void IRough::PutBranchArrowInside ( long Index, VARIANT_BOOL Result );
__declspec(implementation_key(6277)) IRoughPtr IRoughs::GetRough ( const _variant_t & Index );
__declspec(implementation_key(6278)) IRoughPtr IRoughs::Add ( );
__declspec(implementation_key(6279)) IDrawingObjectPtr IBase::GetBaseObject ( );
__declspec(implementation_key(6280)) void IBase::PutBaseObject ( struct IDrawingObject * Object1 );
__declspec(implementation_key(6281)) double IBase::GetX0 ( );
__declspec(implementation_key(6282)) void IBase::PutX0 ( double Result );
__declspec(implementation_key(6283)) double IBase::GetY0 ( );
__declspec(implementation_key(6284)) void IBase::PutY0 ( double Result );
__declspec(implementation_key(6285)) double IBase::GetBranchX ( );
__declspec(implementation_key(6286)) void IBase::PutBranchX ( double Result );
__declspec(implementation_key(6287)) double IBase::GetBranchY ( );
__declspec(implementation_key(6288)) void IBase::PutBranchY ( double Result );
__declspec(implementation_key(6289)) VARIANT_BOOL IBase::GetDrawType ( );
__declspec(implementation_key(6290)) void IBase::PutDrawType ( VARIANT_BOOL Result );
__declspec(implementation_key(6291)) VARIANT_BOOL IBase::GetAutoSorted ( );
__declspec(implementation_key(6292)) void IBase::PutAutoSorted ( VARIANT_BOOL Result );
__declspec(implementation_key(6293)) ITextPtr IBase::GetText ( );
__declspec(implementation_key(6294)) IBasePtr IBases::GetBase ( const _variant_t & Index );
__declspec(implementation_key(6295)) IBasePtr IBases::Add ( );
__declspec(implementation_key(6296)) VARIANT_BOOL ITolerance::GetArrowType ( long Index );
__declspec(implementation_key(6297)) void ITolerance::PutArrowType ( long Index, VARIANT_BOOL Result );
__declspec(implementation_key(6298)) enum ksTablePointEnum ITolerance::GetBranchPos ( long Index );
__declspec(implementation_key(6299)) void ITolerance::PutBranchPos ( long Index, enum ksTablePointEnum Result );
__declspec(implementation_key(6300)) enum ksToleranceArrowType ITolerance::GetToleranceArrowType ( long Index );
__declspec(implementation_key(6301)) void ITolerance::PutToleranceArrowType ( long Index, enum ksToleranceArrowType Result );
__declspec(implementation_key(6302)) VARIANT_BOOL ITolerance::FormatTolerance ( );
__declspec(implementation_key(6303)) ITolerancePtr ITolerances::GetTolerance ( const _variant_t & Index );
__declspec(implementation_key(6304)) ITolerancePtr ITolerances::Add ( );
__declspec(implementation_key(6305)) double IDrawingTable::GetX ( );
__declspec(implementation_key(6306)) void IDrawingTable::PutX ( double Result );
__declspec(implementation_key(6307)) double IDrawingTable::GetY ( );
__declspec(implementation_key(6308)) void IDrawingTable::PutY ( double Result );
__declspec(implementation_key(6309)) void IDrawingTable::PutAngle ( double PVal );
__declspec(implementation_key(6310)) double IDrawingTable::GetAngle ( );
__declspec(implementation_key(6311)) void IDrawingTable::PutFixedCellsSize ( VARIANT_BOOL PVal );
__declspec(implementation_key(6312)) VARIANT_BOOL IDrawingTable::GetFixedCellsSize ( );
__declspec(implementation_key(6313)) void IDrawingTable::PutFixedRowCount ( VARIANT_BOOL PVal );
__declspec(implementation_key(6314)) VARIANT_BOOL IDrawingTable::GetFixedRowCount ( );
__declspec(implementation_key(6315)) void IDrawingTable::PutFixedColumnCount ( VARIANT_BOOL PVal );
__declspec(implementation_key(6316)) VARIANT_BOOL IDrawingTable::GetFixedColumnCount ( );
__declspec(implementation_key(6317)) VARIANT_BOOL IDrawingTable::Save ( _bstr_t FileName );
__declspec(implementation_key(6318)) ITextPtr IDrawingTable::GetTitle ( );
__declspec(implementation_key(6319)) INumericGroupPtr IDrawingTable::GetNumericGroup ( );
__declspec(implementation_key(6320)) void IDrawingTable::PutNumericGroup ( struct INumericGroup * Result );
__declspec(implementation_key(6321)) IDrawingTablePtr IDrawingTables::GetDrawingTable ( const _variant_t & Index );
__declspec(implementation_key(6322)) IDrawingTablePtr IDrawingTables::Add ( long RowsCount, long ColumnsCount, double RowHeigh, double ColumnsWidth, enum ksTableTileLayoutEnum TitlePos );
__declspec(implementation_key(6323)) IDrawingTablePtr IDrawingTables::Load ( _bstr_t FileName );
__declspec(implementation_key(6324)) double IViewPointer::GetX1 ( );
__declspec(implementation_key(6325)) void IViewPointer::PutX1 ( double Result );
__declspec(implementation_key(6326)) double IViewPointer::GetY1 ( );
__declspec(implementation_key(6327)) void IViewPointer::PutY1 ( double Result );
__declspec(implementation_key(6328)) double IViewPointer::GetX2 ( );
__declspec(implementation_key(6329)) void IViewPointer::PutX2 ( double Result );
__declspec(implementation_key(6330)) double IViewPointer::GetY2 ( );
__declspec(implementation_key(6331)) void IViewPointer::PutY2 ( double Result );
__declspec(implementation_key(6332)) double IViewPointer::GetTextX ( );
__declspec(implementation_key(6333)) void IViewPointer::PutTextX ( double Result );
__declspec(implementation_key(6334)) double IViewPointer::GetTextY ( );
__declspec(implementation_key(6335)) void IViewPointer::PutTextY ( double Result );
__declspec(implementation_key(6336)) VARIANT_BOOL IViewPointer::GetAutoSorted ( );
__declspec(implementation_key(6337)) void IViewPointer::PutAutoSorted ( VARIANT_BOOL Result );
__declspec(implementation_key(6338)) VARIANT_BOOL IViewPointer::GetAutoSheet ( );
__declspec(implementation_key(6339)) void IViewPointer::PutAutoSheet ( VARIANT_BOOL Result );
__declspec(implementation_key(6340)) VARIANT_BOOL IViewPointer::GetAutoZone ( );
__declspec(implementation_key(6341)) void IViewPointer::PutAutoZone ( VARIANT_BOOL Result );
__declspec(implementation_key(6342)) ITextPtr IViewPointer::GetText ( );
__declspec(implementation_key(6343)) ITextPtr IViewPointer::GetAdditionalText ( );
__declspec(implementation_key(6344)) enum ksArrowEnum IViewPointer::GetArrowType ( );
__declspec(implementation_key(6345)) void IViewPointer::PutArrowType ( enum ksArrowEnum PVal );
__declspec(implementation_key(6346)) IViewPointerPtr IViewPointers::GetViewPointer ( const _variant_t & Index );
__declspec(implementation_key(6347)) IViewPointerPtr IViewPointers::Add ( );
__declspec(implementation_key(6348)) IDrawingObjectPtr ICentreMarker::GetBaseObject ( );
__declspec(implementation_key(6349)) void ICentreMarker::PutBaseObject ( struct IDrawingObject * Result );
__declspec(implementation_key(6350)) void ICentreMarker::PutX ( double PVal );
__declspec(implementation_key(6351)) double ICentreMarker::GetX ( );
__declspec(implementation_key(6352)) void ICentreMarker::PutY ( double PVal );
__declspec(implementation_key(6353)) double ICentreMarker::GetY ( );
__declspec(implementation_key(6354)) void ICentreMarker::PutAngle ( double PVal );
__declspec(implementation_key(6355)) double ICentreMarker::GetAngle ( );
__declspec(implementation_key(6356)) void ICentreMarker::PutSignType ( enum ksCentreMarkerEnum PVal );
__declspec(implementation_key(6357)) enum ksCentreMarkerEnum ICentreMarker::GetSignType ( );
__declspec(implementation_key(6358)) void ICentreMarker::PutSemiAxisAutoLength ( enum ksSemiAxisTypeEnum AxisType, VARIANT_BOOL PVal );
__declspec(implementation_key(6359)) VARIANT_BOOL ICentreMarker::GetSemiAxisAutoLength ( enum ksSemiAxisTypeEnum AxisType );
__declspec(implementation_key(6360)) void ICentreMarker::PutSemiAxisLength ( enum ksSemiAxisTypeEnum AxisType, double PVal );
__declspec(implementation_key(6361)) double ICentreMarker::GetSemiAxisLength ( enum ksSemiAxisTypeEnum AxisType );
__declspec(implementation_key(6362)) void ICentreMarker::PutCrosshairSize ( double PVal );
__declspec(implementation_key(6363)) double ICentreMarker::GetCrosshairSize ( );
__declspec(implementation_key(6364)) void ICentreMarker::PutCrosshairSizeModify ( VARIANT_BOOL PVal );
__declspec(implementation_key(6365)) VARIANT_BOOL ICentreMarker::GetCrosshairSizeModify ( );
__declspec(implementation_key(6366)) ICentreMarkerPtr ICentreMarkers::GetCentreMarker ( const _variant_t & Index );
__declspec(implementation_key(6367)) ICentreMarkerPtr ICentreMarkers::Add ( );
__declspec(implementation_key(6368)) VARIANT_BOOL IRemoteElement::GetAutoSorted ( );
__declspec(implementation_key(6369)) void IRemoteElement::PutAutoSorted ( VARIANT_BOOL Result );
__declspec(implementation_key(6370)) VARIANT_BOOL IRemoteElement::GetAutoSheet ( );
__declspec(implementation_key(6371)) void IRemoteElement::PutAutoSheet ( VARIANT_BOOL Result );
__declspec(implementation_key(6372)) VARIANT_BOOL IRemoteElement::GetAutoZone ( );
__declspec(implementation_key(6373)) void IRemoteElement::PutAutoZone ( VARIANT_BOOL Result );
__declspec(implementation_key(6374)) ITextPtr IRemoteElement::GetAdditionalText ( );
__declspec(implementation_key(6375)) IRemoteElementPtr IRemoteElements::GetRemoteElement ( const _variant_t & Index );
__declspec(implementation_key(6376)) IRemoteElementPtr IRemoteElements::Add ( );
__declspec(implementation_key(6377)) void IAxisLine::PutX1 ( double PVal );
__declspec(implementation_key(6378)) double IAxisLine::GetX1 ( );
__declspec(implementation_key(6379)) void IAxisLine::PutY1 ( double PVal );
__declspec(implementation_key(6380)) double IAxisLine::GetY1 ( );
__declspec(implementation_key(6381)) void IAxisLine::PutX2 ( double PVal );
__declspec(implementation_key(6382)) double IAxisLine::GetX2 ( );
__declspec(implementation_key(6383)) void IAxisLine::PutY2 ( double PVal );
__declspec(implementation_key(6384)) double IAxisLine::GetY2 ( );
__declspec(implementation_key(6385)) void IAxisLine::PutAngle ( double PVal );
__declspec(implementation_key(6386)) double IAxisLine::GetAngle ( );
__declspec(implementation_key(6387)) void IAxisLine::PutLength ( double PVal );
__declspec(implementation_key(6388)) double IAxisLine::GetLength ( );
__declspec(implementation_key(6389)) IAxisLinePtr IAxisLines::GetAxisLine ( const _variant_t & Index );
__declspec(implementation_key(6390)) IAxisLinePtr IAxisLines::Add ( );
__declspec(implementation_key(6391)) void IWaveLine::PutX1 ( double PVal );
__declspec(implementation_key(6392)) double IWaveLine::GetX1 ( );
__declspec(implementation_key(6393)) void IWaveLine::PutY1 ( double PVal );
__declspec(implementation_key(6394)) double IWaveLine::GetY1 ( );
__declspec(implementation_key(6395)) void IWaveLine::PutX2 ( double PVal );
__declspec(implementation_key(6396)) double IWaveLine::GetX2 ( );
__declspec(implementation_key(6397)) void IWaveLine::PutY2 ( double PVal );
__declspec(implementation_key(6398)) double IWaveLine::GetY2 ( );
__declspec(implementation_key(6399)) void IWaveLine::PutAngle ( double PVal );
__declspec(implementation_key(6400)) double IWaveLine::GetAngle ( );
__declspec(implementation_key(6401)) void IWaveLine::PutLength ( double PVal );
__declspec(implementation_key(6402)) double IWaveLine::GetLength ( );
__declspec(implementation_key(6403)) long IWaveLine::GetStyle ( );
__declspec(implementation_key(6404)) void IWaveLine::PutStyle ( long Result );
__declspec(implementation_key(6405)) void IWaveLine::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(6406)) VARIANT_BOOL IWaveLine::GetDirection ( );
__declspec(implementation_key(6407)) void IWaveLine::PutHalfWavesCount ( long PVal );
__declspec(implementation_key(6408)) long IWaveLine::GetHalfWavesCount ( );
__declspec(implementation_key(6409)) void IWaveLine::PutWaveLength ( double PVal );
__declspec(implementation_key(6410)) double IWaveLine::GetWaveLength ( );
__declspec(implementation_key(6411)) VARIANT_BOOL IWaveLine::SetWavesAmplitude ( VARIANT_BOOL Representation, double NewVal );
__declspec(implementation_key(6412)) double IWaveLine::GetWavesAmplitude ( );
__declspec(implementation_key(6413)) VARIANT_BOOL IWaveLine::GetWavesAmplitudeRepresentation ( );
__declspec(implementation_key(6414)) void IWaveLine::PutAutoWavesAmplitude ( VARIANT_BOOL PVal );
__declspec(implementation_key(6415)) VARIANT_BOOL IWaveLine::GetAutoWavesAmplitude ( );
__declspec(implementation_key(6416)) IWaveLinePtr IWaveLines::GetWaveLine ( const _variant_t & Index );
__declspec(implementation_key(6417)) IWaveLinePtr IWaveLines::Add ( );
__declspec(implementation_key(6418)) void IBrokenLine::PutX1 ( double PVal );
__declspec(implementation_key(6419)) double IBrokenLine::GetX1 ( );
__declspec(implementation_key(6420)) void IBrokenLine::PutY1 ( double PVal );
__declspec(implementation_key(6421)) double IBrokenLine::GetY1 ( );
__declspec(implementation_key(6422)) void IBrokenLine::PutX2 ( double PVal );
__declspec(implementation_key(6423)) double IBrokenLine::GetX2 ( );
__declspec(implementation_key(6424)) void IBrokenLine::PutY2 ( double PVal );
__declspec(implementation_key(6425)) double IBrokenLine::GetY2 ( );
__declspec(implementation_key(6426)) void IBrokenLine::PutLength ( double PVal );
__declspec(implementation_key(6427)) double IBrokenLine::GetLength ( );
__declspec(implementation_key(6428)) void IBrokenLine::PutAngle ( double PVal );
__declspec(implementation_key(6429)) double IBrokenLine::GetAngle ( );
__declspec(implementation_key(6430)) long IBrokenLine::GetStyle ( );
__declspec(implementation_key(6431)) void IBrokenLine::PutStyle ( long Result );
__declspec(implementation_key(6432)) void IBrokenLine::PutJutValue ( double PVal );
__declspec(implementation_key(6433)) double IBrokenLine::GetJutValue ( );
__declspec(implementation_key(6434)) void IBrokenLine::PutAutoJutValue ( VARIANT_BOOL PVal );
__declspec(implementation_key(6435)) VARIANT_BOOL IBrokenLine::GetAutoJutValue ( );
__declspec(implementation_key(6436)) void IBrokenLine::PutBreaksCount ( long PVal );
__declspec(implementation_key(6437)) long IBrokenLine::GetBreaksCount ( );
__declspec(implementation_key(6438)) void IBrokenLine::PutBreakAmplitude ( double PVal );
__declspec(implementation_key(6439)) double IBrokenLine::GetBreakAmplitude ( );
__declspec(implementation_key(6440)) void IBrokenLine::PutAutoBreakAmplitude ( VARIANT_BOOL PVal );
__declspec(implementation_key(6441)) VARIANT_BOOL IBrokenLine::GetAutoBreakAmplitude ( );
__declspec(implementation_key(6442)) void IBrokenLine::PutBreakDisplacement ( double PVal );
__declspec(implementation_key(6443)) double IBrokenLine::GetBreakDisplacement ( );
__declspec(implementation_key(6444)) void IBrokenLine::PutType1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(6445)) VARIANT_BOOL IBrokenLine::GetType1 ( );
__declspec(implementation_key(6446)) IBrokenLinePtr IBrokenLines::GetBrokenLine ( const _variant_t & Index );
__declspec(implementation_key(6447)) IBrokenLinePtr IBrokenLines::Add ( );
__declspec(implementation_key(6448)) _variant_t ICircularCentres::GetBaseObjects ( );
__declspec(implementation_key(6449)) void ICircularCentres::PutBaseObjects ( const _variant_t & Result );
__declspec(implementation_key(6450)) void ICircularCentres::PutX0 ( double PVal );
__declspec(implementation_key(6451)) double ICircularCentres::GetX0 ( );
__declspec(implementation_key(6452)) void ICircularCentres::PutY0 ( double PVal );
__declspec(implementation_key(6453)) double ICircularCentres::GetY0 ( );
__declspec(implementation_key(6454)) void ICircularCentres::PutWithCenter ( VARIANT_BOOL PVal );
__declspec(implementation_key(6455)) VARIANT_BOOL ICircularCentres::GetWithCenter ( );
__declspec(implementation_key(6456)) void ICircularCentres::PutClosed ( VARIANT_BOOL PVal );
__declspec(implementation_key(6457)) VARIANT_BOOL ICircularCentres::GetClosed ( );
__declspec(implementation_key(6458)) _variant_t ICircularCentres::GetCentres ( );
__declspec(implementation_key(6459)) _variant_t ICircularCentres::GetRadiuses ( );
__declspec(implementation_key(6460)) VARIANT_BOOL ICircularCentres::AddCentre ( double X, double Y, double Radius );
__declspec(implementation_key(6461)) VARIANT_BOOL ICircularCentres::AddCentreByObject ( struct IKompasAPIObject * Object );
__declspec(implementation_key(6462)) VARIANT_BOOL ICircularCentres::Clear ( );
__declspec(implementation_key(6463)) VARIANT_BOOL ICircularCentres::DeleteCentre ( long Index );
__declspec(implementation_key(6464)) VARIANT_BOOL ICircularCentres::DeleteCentreByPoint ( double X, double Y );
__declspec(implementation_key(6465)) long ICircularCentres::GetAxisesCount ( VARIANT_BOOL WithCenter );
__declspec(implementation_key(6466)) void ICircularCentres::PutSemiAxisAutoLength ( VARIANT_BOOL WithCenter, long Index, enum ksSemiAxisTypeEnum AxisType, VARIANT_BOOL PVal );
__declspec(implementation_key(6467)) VARIANT_BOOL ICircularCentres::GetSemiAxisAutoLength ( VARIANT_BOOL WithCenter, long Index, enum ksSemiAxisTypeEnum AxisType );
__declspec(implementation_key(6468)) void ICircularCentres::PutSemiAxisLength ( VARIANT_BOOL WithCenter, long Index, enum ksSemiAxisTypeEnum AxisType, double PVal );
__declspec(implementation_key(6469)) double ICircularCentres::GetSemiAxisLength ( VARIANT_BOOL WithCenter, long Index, enum ksSemiAxisTypeEnum AxisType );
__declspec(implementation_key(6470)) ICircularCentresPtr ICircularsCentries::GetCircularCentres ( const _variant_t & Index );
__declspec(implementation_key(6471)) ICircularCentresPtr ICircularsCentries::Add ( const _variant_t & BaseObjects, VARIANT_BOOL AutoFindOtherObjects, VARIANT_BOOL Closed, VARIANT_BOOL WithCenter );
__declspec(implementation_key(6472)) ICircularCentresPtr ICircularsCentries::AddByPoint ( double X0, double Y0, const _variant_t & BaseObjects, VARIANT_BOOL AutoFindOtherObjects, VARIANT_BOOL Closed, VARIANT_BOOL WithCenter );
__declspec(implementation_key(6473)) _variant_t ILinearCentres::GetBaseObjects ( );
__declspec(implementation_key(6474)) void ILinearCentres::PutBaseObjects ( const _variant_t & Result );
__declspec(implementation_key(6475)) void ILinearCentres::PutHasBreaks ( VARIANT_BOOL PVal );
__declspec(implementation_key(6476)) VARIANT_BOOL ILinearCentres::GetHasBreaks ( );
__declspec(implementation_key(6477)) void ILinearCentres::PutAxisAngle ( double PVal );
__declspec(implementation_key(6478)) double ILinearCentres::GetAxisAngle ( );
__declspec(implementation_key(6479)) void ILinearCentres::PutTurnAngle ( double PVal );
__declspec(implementation_key(6480)) double ILinearCentres::GetTurnAngle ( );
__declspec(implementation_key(6481)) _variant_t ILinearCentres::GetCentres ( );
__declspec(implementation_key(6482)) _variant_t ILinearCentres::GetRadiuses ( );
__declspec(implementation_key(6483)) VARIANT_BOOL ILinearCentres::AddCentre ( double X, double Y, double Radius );
__declspec(implementation_key(6484)) VARIANT_BOOL ILinearCentres::AddCentreByObject ( struct IKompasAPIObject * Object );
__declspec(implementation_key(6485)) VARIANT_BOOL ILinearCentres::Clear ( );
__declspec(implementation_key(6486)) VARIANT_BOOL ILinearCentres::DeleteCentre ( long Index );
__declspec(implementation_key(6487)) VARIANT_BOOL ILinearCentres::DeleteCentreByPoint ( double X, double Y );
__declspec(implementation_key(6488)) ILinearCentresPtr ILinearsCentries::GetLinearCentres ( const _variant_t & Index );
__declspec(implementation_key(6489)) ILinearCentresPtr ILinearsCentries::Add ( const _variant_t & BaseObjects, VARIANT_BOOL AutoFindOtherObjects, VARIANT_BOOL HasBreaks, double AxisAngle, double TurnAngle );
__declspec(implementation_key(6490)) VARIANT_BOOL IConditionIntersect::GetIntersectPoint ( double * X, double * Y );
__declspec(implementation_key(6491)) VARIANT_BOOL IConditionIntersect::GetCurvePoint ( VARIANT_BOOL FirstCurve, double * X, double * Y );
__declspec(implementation_key(6492)) void IConditionIntersect::PutRemoteLine1Visible ( VARIANT_BOOL PVal );
__declspec(implementation_key(6493)) VARIANT_BOOL IConditionIntersect::GetRemoteLine1Visible ( );
__declspec(implementation_key(6494)) void IConditionIntersect::PutRemoteLine2Visible ( VARIANT_BOOL PVal );
__declspec(implementation_key(6495)) VARIANT_BOOL IConditionIntersect::GetRemoteLine2Visible ( );
__declspec(implementation_key(6496)) VARIANT_BOOL IConditionIntersect::GetGap ( );
__declspec(implementation_key(6497)) void IConditionIntersect::PutGap ( VARIANT_BOOL PVal );
__declspec(implementation_key(6498)) double IConditionIntersect::GetGapValue ( );
__declspec(implementation_key(6499)) void IConditionIntersect::PutGapValue ( double PVal );
__declspec(implementation_key(6500)) void IConditionIntersect::PutPointVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(6501)) VARIANT_BOOL IConditionIntersect::GetPointVisible ( );
__declspec(implementation_key(6502)) void IConditionIntersect::PutPointStyle ( enum ksAnnotationSymbolEnum PVal );
__declspec(implementation_key(6503)) enum ksAnnotationSymbolEnum IConditionIntersect::GetPointStyle ( );
__declspec(implementation_key(6504)) VARIANT_BOOL IConditionIntersect::InitByObjects ( struct IKompasAPIObject * Curve1, struct IKompasAPIObject * Curve2, double * X1, double * Y1, double * X2, double * Y2, VARIANT_BOOL RemoteLine1Visible, VARIANT_BOOL RemoteLine2Visible );
__declspec(implementation_key(6505)) IDrawingObjectPtr IConditionIntersect::GetAssociationObject ( VARIANT_BOOL First );
__declspec(implementation_key(6506)) IConditionIntersectPtr IConditionIntersects::GetConditionIntersect ( const _variant_t & Index );
__declspec(implementation_key(6507)) IConditionIntersectPtr IConditionIntersects::Add ( );
__declspec(implementation_key(6508)) enum ksShelfDirectionEnum ILeader::GetShelfDirection ( );
__declspec(implementation_key(6509)) void ILeader::PutShelfDirection ( enum ksShelfDirectionEnum Result );
__declspec(implementation_key(6510)) enum ksLeaderSignEnum ILeader::GetSignType ( );
__declspec(implementation_key(6511)) void ILeader::PutSignType ( enum ksLeaderSignEnum Result );
__declspec(implementation_key(6512)) VARIANT_BOOL ILeader::GetArround ( );
__declspec(implementation_key(6513)) void ILeader::PutArround ( VARIANT_BOOL Result );
__declspec(implementation_key(6514)) ITextPtr ILeader::GetTextOnShelf ( );
__declspec(implementation_key(6515)) ITextPtr ILeader::GetTextUnderShelf ( );
__declspec(implementation_key(6516)) ITextPtr ILeader::GetTextOnBranch ( );
__declspec(implementation_key(6517)) ITextPtr ILeader::GetTextUnderBranch ( );
__declspec(implementation_key(6518)) ITextPtr ILeader::GetTextAfterShelf ( );
__declspec(implementation_key(6519)) void ILeader::PutBranchBegin ( long Index, VARIANT_BOOL PVal );
__declspec(implementation_key(6520)) VARIANT_BOOL ILeader::GetBranchBegin ( long Index );
__declspec(implementation_key(6521)) VARIANT_BOOL ILeader::GetParallelBranch ( );
__declspec(implementation_key(6522)) void ILeader::PutParallelBranch ( VARIANT_BOOL PVal );
__declspec(implementation_key(6523)) VARIANT_BOOL ILeader::GetAutoSorted ( );
__declspec(implementation_key(6524)) void ILeader::PutAutoSorted ( VARIANT_BOOL Result );
__declspec(implementation_key(6525)) ITextPtr IMarkLeader::GetTextOnBranch ( );
__declspec(implementation_key(6526)) ITextPtr IMarkLeader::GetTextUnderBranch ( );
__declspec(implementation_key(6527)) ITextPtr IMarkLeader::GetDesignation ( );
__declspec(implementation_key(6528)) enum ksShelfDirectionEnum IPositionLeader::GetShelfDirection ( );
__declspec(implementation_key(6529)) void IPositionLeader::PutShelfDirection ( enum ksShelfDirectionEnum Result );
__declspec(implementation_key(6530)) VARIANT_BOOL IPositionLeader::GetShelfVisible ( );
__declspec(implementation_key(6531)) void IPositionLeader::PutShelfVisible ( VARIANT_BOOL Result );
__declspec(implementation_key(6532)) VARIANT_BOOL IPositionLeader::GetTextDirection ( );
__declspec(implementation_key(6533)) void IPositionLeader::PutTextDirection ( VARIANT_BOOL Result );
__declspec(implementation_key(6534)) enum ksPositionLederFormEnum IPositionLeader::GetForm ( );
__declspec(implementation_key(6535)) void IPositionLeader::PutForm ( enum ksPositionLederFormEnum Result );
__declspec(implementation_key(6536)) ITextPtr IPositionLeader::GetPositions ( );
__declspec(implementation_key(6537)) ITextPtr IPositionLeader::GetUnderPositionText ( );
__declspec(implementation_key(6538)) VARIANT_BOOL IPositionLeader::GetHorizontally ( );
__declspec(implementation_key(6539)) void IPositionLeader::PutHorizontally ( VARIANT_BOOL Result );
__declspec(implementation_key(6540)) enum ksChangeLeaderSignEnum IChangeLeader::GetSignType ( );
__declspec(implementation_key(6541)) void IChangeLeader::PutSignType ( enum ksChangeLeaderSignEnum Result );
__declspec(implementation_key(6542)) double IChangeLeader::GetSignHeight ( );
__declspec(implementation_key(6543)) void IChangeLeader::PutSignHeight ( double Result );
__declspec(implementation_key(6544)) double IChangeLeader::GetLeaderLength ( );
__declspec(implementation_key(6545)) void IChangeLeader::PutLeaderLength ( double Result );
__declspec(implementation_key(6546)) VARIANT_BOOL IChangeLeader::GetFullLeaderLength ( );
__declspec(implementation_key(6547)) void IChangeLeader::PutFullLeaderLength ( VARIANT_BOOL Result );
__declspec(implementation_key(6548)) ITextPtr IChangeLeader::GetDesignation ( );
__declspec(implementation_key(6549)) INumericGroupPtr IChangeLeader::GetNumericGroup ( );
__declspec(implementation_key(6550)) void IChangeLeader::PutNumericGroup ( struct INumericGroup * Result );
__declspec(implementation_key(6551)) ITextPtr IBrandLeader::GetTextOnBranch ( );
__declspec(implementation_key(6552)) ITextPtr IBrandLeader::GetTextUnderBranch ( );
__declspec(implementation_key(6553)) ITextPtr IBrandLeader::GetDesignation ( );
__declspec(implementation_key(6554)) VARIANT_BOOL IBrandLeader::GetDirection ( );
__declspec(implementation_key(6555)) void IBrandLeader::PutDirection ( VARIANT_BOOL Result );
__declspec(implementation_key(6556)) enum ksTablePointEnum IToleranceParam::GetBasePointPos ( );
__declspec(implementation_key(6557)) void IToleranceParam::PutBasePointPos ( enum ksTablePointEnum Result );
__declspec(implementation_key(6558)) VARIANT_BOOL IToleranceParam::GetVertical ( );
__declspec(implementation_key(6559)) void IToleranceParam::PutVertical ( VARIANT_BOOL Result );
__declspec(implementation_key(6560)) ITablePtr IToleranceParam::GetTable ( );
__declspec(implementation_key(6561)) long IToleranceParam::GetSign ( );
__declspec(implementation_key(6562)) void IToleranceParam::PutSign ( long Result );
__declspec(implementation_key(6563)) enum ksTolerancePrefixSignEnum IToleranceParam::GetPrefixSign ( );
__declspec(implementation_key(6564)) void IToleranceParam::PutPrefixSign ( enum ksTolerancePrefixSignEnum Result );
__declspec(implementation_key(6565)) _bstr_t IToleranceParam::GetValue ( );
__declspec(implementation_key(6566)) void IToleranceParam::PutValue ( _bstr_t PVal );
__declspec(implementation_key(6567)) enum ksToleranceSuffixSignEnum IToleranceParam::GetSuffixSign ( );
__declspec(implementation_key(6568)) void IToleranceParam::PutSuffixSign ( enum ksToleranceSuffixSignEnum Result );
__declspec(implementation_key(6569)) ITextLinePtr IToleranceParam::GetBaseValue1 ( );
__declspec(implementation_key(6570)) enum ksToleranceSuffixSignEnum IToleranceParam::GetBaseSign1 ( );
__declspec(implementation_key(6571)) void IToleranceParam::PutBaseSign1 ( enum ksToleranceSuffixSignEnum Result );
__declspec(implementation_key(6572)) ITextLinePtr IToleranceParam::GetBaseValue2 ( );
__declspec(implementation_key(6573)) enum ksToleranceSuffixSignEnum IToleranceParam::GetBaseSign2 ( );
__declspec(implementation_key(6574)) void IToleranceParam::PutBaseSign2 ( enum ksToleranceSuffixSignEnum Result );
__declspec(implementation_key(6575)) enum ksContourSegmentEnum IContourSegment::GetSegmentType ( );
__declspec(implementation_key(6576)) ICurve2DPtr IContourSegment::GetCurve2D ( );
__declspec(implementation_key(6577)) void IContourLineSegment::PutX1 ( double PVal );
__declspec(implementation_key(6578)) double IContourLineSegment::GetX1 ( );
__declspec(implementation_key(6579)) void IContourLineSegment::PutY1 ( double PVal );
__declspec(implementation_key(6580)) double IContourLineSegment::GetY1 ( );
__declspec(implementation_key(6581)) void IContourLineSegment::PutX2 ( double PVal );
__declspec(implementation_key(6582)) double IContourLineSegment::GetX2 ( );
__declspec(implementation_key(6583)) void IContourLineSegment::PutY2 ( double PVal );
__declspec(implementation_key(6584)) double IContourLineSegment::GetY2 ( );
__declspec(implementation_key(6585)) void IContourLineSegment::PutLength ( double PVal );
__declspec(implementation_key(6586)) double IContourLineSegment::GetLength ( );
__declspec(implementation_key(6587)) void IContourLineSegment::PutAngle ( double PVal );
__declspec(implementation_key(6588)) double IContourLineSegment::GetAngle ( );
__declspec(implementation_key(6589)) void IContourArc::PutRadius ( double PVal );
__declspec(implementation_key(6590)) double IContourArc::GetRadius ( );
__declspec(implementation_key(6591)) void IContourArc::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(6592)) VARIANT_BOOL IContourArc::GetDirection ( );
__declspec(implementation_key(6593)) void IContourArc::PutXc ( double PVal );
__declspec(implementation_key(6594)) double IContourArc::GetXc ( );
__declspec(implementation_key(6595)) void IContourArc::PutYc ( double PVal );
__declspec(implementation_key(6596)) double IContourArc::GetYc ( );
__declspec(implementation_key(6597)) void IContourArc::PutX1 ( double PVal );
__declspec(implementation_key(6598)) double IContourArc::GetX1 ( );
__declspec(implementation_key(6599)) void IContourArc::PutY1 ( double PVal );
__declspec(implementation_key(6600)) double IContourArc::GetY1 ( );
__declspec(implementation_key(6601)) void IContourArc::PutX2 ( double PVal );
__declspec(implementation_key(6602)) double IContourArc::GetX2 ( );
__declspec(implementation_key(6603)) void IContourArc::PutY2 ( double PVal );
__declspec(implementation_key(6604)) double IContourArc::GetY2 ( );
__declspec(implementation_key(6605)) void IContourArc::PutX3 ( double PVal );
__declspec(implementation_key(6606)) double IContourArc::GetX3 ( );
__declspec(implementation_key(6607)) void IContourArc::PutY3 ( double PVal );
__declspec(implementation_key(6608)) double IContourArc::GetY3 ( );
__declspec(implementation_key(6609)) void IContourArc::PutAngle1 ( double PVal );
__declspec(implementation_key(6610)) double IContourArc::GetAngle1 ( );
__declspec(implementation_key(6611)) void IContourArc::PutAngle2 ( double PVal );
__declspec(implementation_key(6612)) double IContourArc::GetAngle2 ( );
__declspec(implementation_key(6613)) IAnnotativeObjectPtr IAnnotativeContainer::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6614)) long IAnnotativeContainer::GetCount ( );
__declspec(implementation_key(6615)) IAnnotativeObjectPtr IAnnotativeContainer::Add ( enum DrawingObjectTypeEnum Type );
__declspec(implementation_key(6616)) IAnnotativeObjectPtr IAnnotativeContainer::CreateByGeomObject ( struct IDrawingObject * Obj );
__declspec(implementation_key(6617)) void ICurveCopyObjectParam::PutBaseCurve ( struct IDrawingObject * Curve );
__declspec(implementation_key(6618)) IDrawingObjectPtr ICurveCopyObjectParam::GetBaseCurve ( );
__declspec(implementation_key(6619)) void ICurveCopyObjectParam::PutStep ( double PVal );
__declspec(implementation_key(6620)) double ICurveCopyObjectParam::GetStep ( );
__declspec(implementation_key(6621)) void ICurveCopyObjectParam::PutCount ( long PVal );
__declspec(implementation_key(6622)) long ICurveCopyObjectParam::GetCount ( );
__declspec(implementation_key(6623)) void ICurveCopyObjectParam::PutTurnToNormal ( VARIANT_BOOL PVal );
__declspec(implementation_key(6624)) VARIANT_BOOL ICurveCopyObjectParam::GetTurnToNormal ( );
__declspec(implementation_key(6625)) void ICurveCopyObjectParam::PutPositiveDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(6626)) VARIANT_BOOL ICurveCopyObjectParam::GetPositiveDirection ( );
__declspec(implementation_key(6627)) void ICurveCopyObjectParam::PutStepFactor ( VARIANT_BOOL PVal );
__declspec(implementation_key(6628)) VARIANT_BOOL ICurveCopyObjectParam::GetStepFactor ( );
__declspec(implementation_key(6629)) void ICircleCopyObjectParam::PutXc ( double Val );
__declspec(implementation_key(6630)) double ICircleCopyObjectParam::GetXc ( );
__declspec(implementation_key(6631)) void ICircleCopyObjectParam::PutYc ( double Val );
__declspec(implementation_key(6632)) double ICircleCopyObjectParam::GetYc ( );
__declspec(implementation_key(6633)) void ICircleCopyObjectParam::PutStep ( double PVal );
__declspec(implementation_key(6634)) double ICircleCopyObjectParam::GetStep ( );
__declspec(implementation_key(6635)) void ICircleCopyObjectParam::PutCount ( long PVal );
__declspec(implementation_key(6636)) long ICircleCopyObjectParam::GetCount ( );
__declspec(implementation_key(6637)) void ICircleCopyObjectParam::PutByStep ( VARIANT_BOOL PVal );
__declspec(implementation_key(6638)) VARIANT_BOOL ICircleCopyObjectParam::GetByStep ( );
__declspec(implementation_key(6639)) void ICircleCopyObjectParam::PutPositiveDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(6640)) VARIANT_BOOL ICircleCopyObjectParam::GetPositiveDirection ( );
__declspec(implementation_key(6641)) void INurbsByPoints::PutPointsBuildingType ( enum ksNurbsByPointsBuildingTypeEnum PVal );
__declspec(implementation_key(6642)) enum ksNurbsByPointsBuildingTypeEnum INurbsByPoints::GetPointsBuildingType ( );
__declspec(implementation_key(6643)) VARIANT_BOOL INurbsByPoints::AddPointByParam ( long Index, double X, double Y, enum ksNurbsByPointsPointConstraintsEnum ConstraintsType, double * DerivativeLenght, double * DerivativeAngle, double * Curvature );
__declspec(implementation_key(6644)) VARIANT_BOOL INurbsByPoints::GetPointParam ( long Index, double * X, double * Y, enum ksNurbsByPointsPointConstraintsEnum * ConstraintsType, double * DerivativeLenght, double * DerivativeAngle, double * Curvature );
__declspec(implementation_key(6645)) void INurbsByPoints::PutPointConstraints ( long PointIndex, enum ksNurbsByPointsPointConstraintsEnum PVal );
__declspec(implementation_key(6646)) enum ksNurbsByPointsPointConstraintsEnum INurbsByPoints::GetPointConstraints ( long PointIndex );
__declspec(implementation_key(6647)) void INurbsByPoints::PutDerivativeLenghtInPoint ( long PointIndex, double PVal );
__declspec(implementation_key(6648)) double INurbsByPoints::GetDerivativeLenghtInPoint ( long PointIndex );
__declspec(implementation_key(6649)) void INurbsByPoints::PutDerivativeAngleInPoint ( long PointIndex, double PVal );
__declspec(implementation_key(6650)) double INurbsByPoints::GetDerivativeAngleInPoint ( long PointIndex );
__declspec(implementation_key(6651)) void INurbsByPoints::PutCurvatureInPoint ( long PointIndex, double PVal );
__declspec(implementation_key(6652)) double INurbsByPoints::GetCurvatureInPoint ( long PointIndex );
__declspec(implementation_key(6653)) ISheetFormatPtr ITextDocumentSection::GetFormat ( );
__declspec(implementation_key(6654)) _bstr_t ITextDocumentSection::GetLayoutLibraryFileName ( );
__declspec(implementation_key(6655)) void ITextDocumentSection::PutLayoutLibraryFileName ( LPWSTR PVal );
__declspec(implementation_key(6656)) double ITextDocumentSection::GetLayoutStyleNumber ( );
__declspec(implementation_key(6657)) void ITextDocumentSection::PutLayoutStyleNumber ( double PVal );
__declspec(implementation_key(6658)) _bstr_t ITextDocumentSection::GetEvenLayoutLibraryFileName ( );
__declspec(implementation_key(6659)) void ITextDocumentSection::PutEvenLayoutLibraryFileName ( LPWSTR PVal );
__declspec(implementation_key(6660)) double ITextDocumentSection::GetEvenLayoutStyleNumber ( );
__declspec(implementation_key(6661)) void ITextDocumentSection::PutEvenLayoutStyleNumber ( double PVal );
__declspec(implementation_key(6662)) _bstr_t ITextDocumentSection::GetOddLayoutLibraryFileName ( );
__declspec(implementation_key(6663)) void ITextDocumentSection::PutOddLayoutLibraryFileName ( LPWSTR PVal );
__declspec(implementation_key(6664)) double ITextDocumentSection::GetOddLayoutStyleNumber ( );
__declspec(implementation_key(6665)) void ITextDocumentSection::PutOddLayoutStyleNumber ( double PVal );
__declspec(implementation_key(6666)) VARIANT_BOOL ITextDocumentSection::Update ( );
__declspec(implementation_key(6667)) VARIANT_BOOL ITextDocumentSection::Delete ( );
__declspec(implementation_key(6668)) ITextDocumentSectionPtr ITextDocumentSectionsManager::AddSection ( );
__declspec(implementation_key(6669)) ITextDocumentSectionPtr ITextDocumentSectionsManager::AddSectionAt ( long Index );
__declspec(implementation_key(6670)) long ITextDocumentSectionsManager::GetSectionsCount ( );
__declspec(implementation_key(6671)) ITextDocumentSectionPtr ITextDocumentSectionsManager::GetSection ( long Index );
__declspec(implementation_key(6672)) ITextDocumentSectionPtr ITextDocumentSectionsManager::GetSectionByTextLine ( long LineIndex );
__declspec(implementation_key(6673)) VARIANT_BOOL ITextDocumentSectionsManager::MoveSection ( long SectionIndex, long NewSectionIndex );
__declspec(implementation_key(6674)) long ITextDocumentSectionsManager::GetSectionLineIndexes ( long SectionIndex, long * FirstLineIndex, long * LastLineIndex );
__declspec(implementation_key(6675)) VARIANT_BOOL ITextDocumentSectionsManager::MoveLinesToSection ( struct ITextDocumentSection * Section, long FirstLineIndex, long LastLineIndex );
__declspec(implementation_key(6676)) long IExternalTessellationObject::GetObjectID ( );
__declspec(implementation_key(6677)) VARIANT_BOOL IExternalTessellationObject::SetTessellation ( const _variant_t & Points, const _variant_t & Indexes, const _variant_t & Normals, const _variant_t & Colors );
__declspec(implementation_key(6678)) void IExternalTessellationObject::PutVisible ( struct IDocumentFrame * Frame, VARIANT_BOOL _arg2 );
__declspec(implementation_key(6679)) VARIANT_BOOL IExternalTessellationObject::Delete ( );
__declspec(implementation_key(6680)) VARIANT_BOOL IExternalTessellationObject::SetAdvancedColor ( long Color, double Ambient, double Diffuse, double Specularity, double Shininess, double Transparency, double Emission );
__declspec(implementation_key(6681)) VARIANT_BOOL IExternalTessellationObject::SetEdges ( const _variant_t & Points, const _variant_t & Edges, const _variant_t & Colors );
__declspec(implementation_key(6682)) VARIANT_BOOL IExternalTessellationObject::SetPlaces ( const _variant_t & Places );
__declspec(implementation_key(6683)) VARIANT_BOOL IExternalTessellationObject::SetEdgeStyles ( const _variant_t & Styles );
__declspec(implementation_key(6684)) VARIANT_BOOL IExternalTessellationObject::SetEdgeWidths ( const _variant_t & Widths );
__declspec(implementation_key(6685)) VARIANT_BOOL IExternalTessellationObject::SetTextureImage ( long Width, long Heigh, VARIANT_BOOL RGBA, VARIANT_BOOL WrapMode, VARIANT_BOOL FiltMode, const _variant_t & ImageData );
__declspec(implementation_key(6686)) VARIANT_BOOL IExternalTessellationObject::SetTexturePoints ( VARIANT_BOOL Image2D, const _variant_t & ImagePoints );
__declspec(implementation_key(6687)) VARIANT_BOOL IExternalTessellationObject::SetFacetMode ( VARIANT_BOOL SideMode, enum ksFacetCullingMode CullingMode );
__declspec(implementation_key(6688)) VARIANT_BOOL IExternalTessellationObject::GetDisableDepthTest ( );
__declspec(implementation_key(6689)) void IExternalTessellationObject::PutDisableDepthTest ( VARIANT_BOOL PVal );
__declspec(implementation_key(6690)) VARIANT_BOOL IExternalTessellationObject::GetNonScalableX ( );
__declspec(implementation_key(6691)) void IExternalTessellationObject::PutNonScalableX ( VARIANT_BOOL PVal );
__declspec(implementation_key(6692)) VARIANT_BOOL IExternalTessellationObject::GetNonScalableY ( );
__declspec(implementation_key(6693)) void IExternalTessellationObject::PutNonScalableY ( VARIANT_BOOL PVal );
__declspec(implementation_key(6694)) VARIANT_BOOL IExternalTessellationObject::GetNonScalableZ ( );
__declspec(implementation_key(6695)) void IExternalTessellationObject::PutNonScalableZ ( VARIANT_BOOL PVal );
__declspec(implementation_key(6696)) enum ksDrawInScreenPlaneEnum IExternalTessellationObject::GetAlwaysDrawInScreenPlane ( );
__declspec(implementation_key(6697)) void IExternalTessellationObject::PutAlwaysDrawInScreenPlane ( enum ksDrawInScreenPlaneEnum PVal );
__declspec(implementation_key(6698)) VARIANT_BOOL IExternalTessellationObject::GetNonGeometry ( );
__declspec(implementation_key(6699)) void IExternalTessellationObject::PutNonGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(6700)) VARIANT_BOOL IExternalTessellationObject::SelectTextureImage ( long TexImgId );
__declspec(implementation_key(6701)) VARIANT_BOOL IExternalTessellationObject::GetNonPickable ( );
__declspec(implementation_key(6702)) void IExternalTessellationObject::PutNonPickable ( VARIANT_BOOL PVal );
__declspec(implementation_key(6703)) VARIANT_BOOL IExternalTessellationObject::SetEdgeColors ( const _variant_t & Colors );
__declspec(implementation_key(6704)) long IExternalGDIObject::GetObjectID ( );
__declspec(implementation_key(6705)) VARIANT_BOOL IExternalGDIObject::SetTexts ( const _variant_t & Texts, const _variant_t & Points, const _variant_t & Colors, const _variant_t & Fonts, VARIANT_BOOL Is3DPoints );
__declspec(implementation_key(6706)) void IExternalGDIObject::PutVisible ( struct IDocumentFrame * Frame, VARIANT_BOOL _arg2 );
__declspec(implementation_key(6707)) VARIANT_BOOL IExternalGDIObject::Delete ( );
__declspec(implementation_key(6708)) VARIANT_BOOL IExternalGDIObject::SetPlace ( const _variant_t & Place );
__declspec(implementation_key(6709)) VARIANT_BOOL IExternalGDIObject::GetNonScalableX ( );
__declspec(implementation_key(6710)) void IExternalGDIObject::PutNonScalableX ( VARIANT_BOOL PVal );
__declspec(implementation_key(6711)) VARIANT_BOOL IExternalGDIObject::GetNonScalableY ( );
__declspec(implementation_key(6712)) void IExternalGDIObject::PutNonScalableY ( VARIANT_BOOL PVal );
__declspec(implementation_key(6713)) VARIANT_BOOL IExternalGDIObject::GetNonScalableZ ( );
__declspec(implementation_key(6714)) void IExternalGDIObject::PutNonScalableZ ( VARIANT_BOOL PVal );
__declspec(implementation_key(6715)) enum ksDrawInScreenPlaneEnum IExternalGDIObject::GetAlwaysDrawInScreenPlane ( );
__declspec(implementation_key(6716)) void IExternalGDIObject::PutAlwaysDrawInScreenPlane ( enum ksDrawInScreenPlaneEnum PVal );
__declspec(implementation_key(6717)) VARIANT_BOOL IExternalGDIObject::SetTextsAlign ( const _variant_t & TextsAlign );
__declspec(implementation_key(6718)) VARIANT_BOOL IExternalGDIObject::SetBkColors ( const _variant_t & BkColors );
__declspec(implementation_key(6719)) VARIANT_BOOL IExternalGDIObject::GetNonPickable ( );
__declspec(implementation_key(6720)) void IExternalGDIObject::PutNonPickable ( VARIANT_BOOL PVal );
__declspec(implementation_key(6721)) VARIANT_BOOL IExternalGDIObject::SetTextColors ( const _variant_t & textColors );
__declspec(implementation_key(6722)) VARIANT_BOOL IExternalGDIObject::SetTextOrientation ( const _variant_t & textOrients );
__declspec(implementation_key(6723)) VARIANT_BOOL IExternalGDIObject::GetScalableText ( );
__declspec(implementation_key(6724)) void IExternalGDIObject::PutScalableText ( VARIANT_BOOL PVal );
__declspec(implementation_key(6725)) IExternalTessellationObjectPtr IExternalTessellationManager::Add ( );
__declspec(implementation_key(6726)) IExternalTessellationObjectPtr IExternalTessellationManager::GetTessellationObject ( long Id );
__declspec(implementation_key(6727)) void IExternalTessellationManager::PutObjectsVisible ( const _variant_t & Ids, struct IDocumentFrame * Frame, VARIANT_BOOL _arg3 );
__declspec(implementation_key(6728)) VARIANT_BOOL IExternalTessellationManager::DeleteObjects ( const _variant_t & Id );
__declspec(implementation_key(6729)) VARIANT_BOOL IExternalTessellationManager::Clear ( );
__declspec(implementation_key(6730)) IExternalGDIObjectPtr IExternalTessellationManager::AddGDIObject ( );
__declspec(implementation_key(6731)) IExternalGDIObjectPtr IExternalTessellationManager::GetGDIObject ( long Id );
__declspec(implementation_key(6732)) long IExternalTessellationManager::CreateTextureImage ( long Width, long Heigh, VARIANT_BOOL RGBA, VARIANT_BOOL WrapMode, VARIANT_BOOL FiltMode, const _variant_t & ImageData );
__declspec(implementation_key(6733)) VARIANT_BOOL IExternalTessellationManager::DeleteTextureImage ( long TexImgId );
__declspec(implementation_key(6734)) VARIANT_BOOL IExternalTessellationManager::PickObjects ( struct IDocumentFrame * Frame, const _variant_t & PickRay, VARIANT_BOOL Visible, VARIANT * PickedObjs, VARIANT * PickedPars );
__declspec(implementation_key(6735)) VARIANT_BOOL IExternalTessellationManager::DisableModelDrawing ( long ForElements );
__declspec(implementation_key(6736)) VARIANT_BOOL IExternalTessellationManager::EnableModelDrawing ( );
__declspec(implementation_key(6737)) VARIANT_BOOL IExternalTessellationManager::IsModelDrawingEnabled ( long ForElements );
__declspec(implementation_key(6738)) void IExternalTessellationManager::PutDisableModelRotation ( VARIANT_BOOL Result );
__declspec(implementation_key(6739)) VARIANT_BOOL IExternalTessellationManager::GetDisableModelRotation ( );
__declspec(implementation_key(6740)) void ICircularCopyObjectParam::PutRadius ( double Val );
__declspec(implementation_key(6741)) double ICircularCopyObjectParam::GetRadius ( );
__declspec(implementation_key(6742)) void ICircularCopyObjectParam::PutStep1 ( double PVal );
__declspec(implementation_key(6743)) double ICircularCopyObjectParam::GetStep1 ( );
__declspec(implementation_key(6744)) void ICircularCopyObjectParam::PutStepFactor1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(6745)) VARIANT_BOOL ICircularCopyObjectParam::GetStepFactor1 ( );
__declspec(implementation_key(6746)) void ICircularCopyObjectParam::PutCount1 ( long Val );
__declspec(implementation_key(6747)) long ICircularCopyObjectParam::GetCount1 ( );
__declspec(implementation_key(6748)) void ICircularCopyObjectParam::PutAngle2 ( double PVal );
__declspec(implementation_key(6749)) double ICircularCopyObjectParam::GetAngle2 ( );
__declspec(implementation_key(6750)) void ICircularCopyObjectParam::PutStep2 ( double PVal );
__declspec(implementation_key(6751)) double ICircularCopyObjectParam::GetStep2 ( );
__declspec(implementation_key(6752)) void ICircularCopyObjectParam::PutStepFactor2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(6753)) VARIANT_BOOL ICircularCopyObjectParam::GetStepFactor2 ( );
__declspec(implementation_key(6754)) void ICircularCopyObjectParam::PutCount2 ( long PVal );
__declspec(implementation_key(6755)) long ICircularCopyObjectParam::GetCount2 ( );
__declspec(implementation_key(6756)) void ICircularCopyObjectParam::PutSaveCentreCopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(6757)) VARIANT_BOOL ICircularCopyObjectParam::GetSaveCentreCopy ( );
__declspec(implementation_key(6758)) void ICircularCopyObjectParam::PutTurnObject ( VARIANT_BOOL PVal );
__declspec(implementation_key(6759)) VARIANT_BOOL ICircularCopyObjectParam::GetTurnObject ( );
__declspec(implementation_key(6760)) void IMeshCopyObjectParam::PutAngle1 ( double Val );
__declspec(implementation_key(6761)) double IMeshCopyObjectParam::GetAngle1 ( );
__declspec(implementation_key(6762)) void IMeshCopyObjectParam::PutStep1 ( double PVal );
__declspec(implementation_key(6763)) double IMeshCopyObjectParam::GetStep1 ( );
__declspec(implementation_key(6764)) void IMeshCopyObjectParam::PutStepFactor1 ( VARIANT_BOOL PVal );
__declspec(implementation_key(6765)) VARIANT_BOOL IMeshCopyObjectParam::GetStepFactor1 ( );
__declspec(implementation_key(6766)) void IMeshCopyObjectParam::PutCount1 ( long Val );
__declspec(implementation_key(6767)) long IMeshCopyObjectParam::GetCount1 ( );
__declspec(implementation_key(6768)) void IMeshCopyObjectParam::PutAngle2 ( double PVal );
__declspec(implementation_key(6769)) double IMeshCopyObjectParam::GetAngle2 ( );
__declspec(implementation_key(6770)) void IMeshCopyObjectParam::PutStep2 ( double PVal );
__declspec(implementation_key(6771)) double IMeshCopyObjectParam::GetStep2 ( );
__declspec(implementation_key(6772)) void IMeshCopyObjectParam::PutStepFactor2 ( VARIANT_BOOL PVal );
__declspec(implementation_key(6773)) VARIANT_BOOL IMeshCopyObjectParam::GetStepFactor2 ( );
__declspec(implementation_key(6774)) void IMeshCopyObjectParam::PutCount2 ( long PVal );
__declspec(implementation_key(6775)) long IMeshCopyObjectParam::GetCount2 ( );
__declspec(implementation_key(6776)) void IMeshCopyObjectParam::PutSaveCornersCopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(6777)) VARIANT_BOOL IMeshCopyObjectParam::GetSaveCornersCopy ( );
__declspec(implementation_key(6778)) void IMeshCopyObjectParam::PutSaveCentreCopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(6779)) VARIANT_BOOL IMeshCopyObjectParam::GetSaveCentreCopy ( );
__declspec(implementation_key(6780)) IColorParam7Ptr IPropertyOpticalProps::GetColorParam ( );
__declspec(implementation_key(6781)) VARIANT_BOOL IPropertyOpticalProps::Init ( struct IColorParam7 * PVal );
__declspec(implementation_key(6782)) VARIANT_BOOL IPropertyOpticalProps::GetEnableAmbient ( );
__declspec(implementation_key(6783)) void IPropertyOpticalProps::PutEnableAmbient ( VARIANT_BOOL PVal );
__declspec(implementation_key(6784)) VARIANT_BOOL IPropertyOpticalProps::GetEnableDiffuse ( );
__declspec(implementation_key(6785)) void IPropertyOpticalProps::PutEnableDiffuse ( VARIANT_BOOL PVal );
__declspec(implementation_key(6786)) VARIANT_BOOL IPropertyOpticalProps::GetEnableSpecularity ( );
__declspec(implementation_key(6787)) void IPropertyOpticalProps::PutEnableSpecularity ( VARIANT_BOOL PVal );
__declspec(implementation_key(6788)) VARIANT_BOOL IPropertyOpticalProps::GetEnableShininess ( );
__declspec(implementation_key(6789)) void IPropertyOpticalProps::PutEnableShininess ( VARIANT_BOOL PVal );
__declspec(implementation_key(6790)) VARIANT_BOOL IPropertyOpticalProps::GetEnableTransparency ( );
__declspec(implementation_key(6791)) void IPropertyOpticalProps::PutEnableTransparency ( VARIANT_BOOL PVal );
__declspec(implementation_key(6792)) VARIANT_BOOL IPropertyOpticalProps::GetEnableEmission ( );
__declspec(implementation_key(6793)) void IPropertyOpticalProps::PutEnableEmission ( VARIANT_BOOL PVal );
__declspec(implementation_key(6794)) void ITablePattern::PutFileName ( _bstr_t Name );
__declspec(implementation_key(6795)) _bstr_t ITablePattern::GetFileName ( );
__declspec(implementation_key(6796)) void ITablePattern::PutPointsType ( enum ksPoint3DTypeEnum Type );
__declspec(implementation_key(6797)) enum ksPoint3DTypeEnum ITablePattern::GetPointsType ( );
__declspec(implementation_key(6798)) void ITablePattern::PutSaveInitialOrientation ( VARIANT_BOOL PVal );
__declspec(implementation_key(6799)) VARIANT_BOOL ITablePattern::GetSaveInitialOrientation ( );
__declspec(implementation_key(6800)) void ITablePattern::PutOrientationType ( enum ksPatternExemplarsOrientationTypeEnum PVal );
__declspec(implementation_key(6801)) enum ksPatternExemplarsOrientationTypeEnum ITablePattern::GetOrientationType ( );
__declspec(implementation_key(6802)) void ITablePattern::PutOrientationObject ( struct IModelObject * PVal );
__declspec(implementation_key(6803)) IModelObjectPtr ITablePattern::GetOrientationObject ( );
__declspec(implementation_key(6804)) _variant_t IModelObject1::GetParents ( enum ksRelationTypeEnum RelType );
__declspec(implementation_key(6805)) _variant_t IModelObject1::GetChildrens ( enum ksRelationTypeEnum RelType );
__declspec(implementation_key(6806)) _variant_t IModelObject1::GetLinks ( );
__declspec(implementation_key(6807)) VARIANT_BOOL IModelObject1::IsMyLink ( enum ksRelationTypeEnum RelType, struct IModelObject * Primitive );
__declspec(implementation_key(6808)) long IModelObject1::GetLayerNumber ( );
__declspec(implementation_key(6809)) void IModelObject1::PutLayerNumber ( long PVal );
__declspec(implementation_key(6810)) void IModelObject1::PutProjected ( enum ksProjectionOptionEnum PVal );
__declspec(implementation_key(6811)) enum ksProjectionOptionEnum IModelObject1::GetProjected ( );
__declspec(implementation_key(6812)) void IModelObject1::PutHiddenEx ( enum ksVisibleStateEnum PVal );
__declspec(implementation_key(6813)) enum ksVisibleStateEnum IModelObject1::GetHiddenEx ( );
__declspec(implementation_key(6814)) void IModelObject1::PutEditable ( enum ksEditableStateEnum PVal );
__declspec(implementation_key(6815)) enum ksEditableStateEnum IModelObject1::GetEditable ( );
__declspec(implementation_key(6816)) VARIANT_BOOL IModelObject1::Reset ( );
__declspec(implementation_key(6817)) IKompasAPIObjectPtr IModelObject1::GetMathObject ( );
__declspec(implementation_key(6818)) void IModelObject1::PutConnectedWithInitialEmbodiment ( VARIANT_BOOL PVal );
__declspec(implementation_key(6819)) VARIANT_BOOL IModelObject1::GetConnectedWithInitialEmbodiment ( );
__declspec(implementation_key(6820)) VARIANT_BOOL IModelObject1::GetIsEditableObject ( );
__declspec(implementation_key(6821)) VARIANT_BOOL IModelObject1::GetIsExternalObject ( );
__declspec(implementation_key(6822)) VARIANT_BOOL IPropertyLinkButton::AddButton ( long BtnID, _bstr_t Lebel );
__declspec(implementation_key(6823)) void IPropertyLinkButton::PutButtonChecked ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(6824)) VARIANT_BOOL IPropertyLinkButton::GetButtonChecked ( long BtnID );
__declspec(implementation_key(6825)) void IPropertyLinkButton::PutButtonEnable ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(6826)) VARIANT_BOOL IPropertyLinkButton::GetButtonEnable ( long BtnID );
__declspec(implementation_key(6827)) void IPropertyLinkButton::PutButtonVisible ( long BtnID, VARIANT_BOOL PVal );
__declspec(implementation_key(6828)) VARIANT_BOOL IPropertyLinkButton::GetButtonVisible ( long BtnID );
__declspec(implementation_key(6829)) _variant_t IProductDataManager::GetProductObjects ( long Filter );
__declspec(implementation_key(6830)) IPropertyKeeperPtr IProductDataManager::GetProductObject ( _bstr_t UniqueMetaObjectKey );
__declspec(implementation_key(6831)) IPropertyKeeperPtr IProductDataManager::AddProductObject ( struct IPropertyKeeper * Parent, _bstr_t Name, enum ksProductObjectTypeEnum ObjectType );
__declspec(implementation_key(6832)) VARIANT_BOOL IProductDataManager::DeleteProductObject ( _bstr_t UniqueMetaObjectKey );
__declspec(implementation_key(6833)) _variant_t IProductDataManager::GetGeometry ( struct IPropertyKeeper * PropObject );
__declspec(implementation_key(6834)) void IProductDataManager::PutGeometry ( struct IPropertyKeeper * PropObject, const _variant_t & PVal );
__declspec(implementation_key(6835)) _variant_t IProductDataManager::GetObjectAttachedDocuments ( struct IPropertyKeeper * PropObject );
__declspec(implementation_key(6836)) void IProductDataManager::PutObjectAttachedDocuments ( struct IPropertyKeeper * PropObject, const _variant_t & PVal );
__declspec(implementation_key(6837)) _bstr_t IProductDataManager::GetMetaProductInfo ( );
__declspec(implementation_key(6838)) void IProductDataManager::PutMetaProductInfo ( _bstr_t PVal );
__declspec(implementation_key(6839)) _bstr_t IProductDataManager::GetObjectMetaProductInfo ( struct IPropertyKeeper * PropObject );
__declspec(implementation_key(6840)) void IProductDataManager::PutObjectMetaProductInfo ( struct IPropertyKeeper * PropObject, _bstr_t PVal );
__declspec(implementation_key(6841)) _bstr_t IProductDataManager::GetReferenceData ( );
__declspec(implementation_key(6842)) void IProductDataManager::PutReferenceData ( _bstr_t PVal );
__declspec(implementation_key(6843)) _variant_t IProductDataManager::GetReferenceDataIds ( _bstr_t ReferenceDataType );
__declspec(implementation_key(6844)) _bstr_t IProductDataManager::GetReferenceDataInfo ( _bstr_t ReferenceDataType, _bstr_t ReferenceDataId );
__declspec(implementation_key(6845)) void IProductDataManager::PutReferenceDataInfo ( _bstr_t ReferenceDataType, _bstr_t ReferenceDataId, _bstr_t PVal );
__declspec(implementation_key(6846)) _bstr_t IProductDataManager::AddReferenceData ( _bstr_t ReferenceDataType, _bstr_t ReferenceDataInfo );
__declspec(implementation_key(6847)) VARIANT_BOOL IProductDataManager::DeleteReferenceData ( _bstr_t ReferenceDataType, _bstr_t ReferenceDataId );
__declspec(implementation_key(6848)) VARIANT_BOOL IMeshObject3D::InitByObjects ( const _variant_t & Objects );
__declspec(implementation_key(6849)) enum ksGabaritBuildingTypeEnum IZoneParametersByBorderPoints::GetBuildingType ( );
__declspec(implementation_key(6850)) void IZoneParametersByBorderPoints::PutBuildingType ( enum ksGabaritBuildingTypeEnum PVal );
__declspec(implementation_key(6851)) VARIANT_BOOL IZoneParametersByBorderPoints::GetPoint ( VARIANT_BOOL First, double * X, double * Y, double * Z );
__declspec(implementation_key(6852)) VARIANT_BOOL IZoneParametersByBorderPoints::SetPoint ( VARIANT_BOOL First, double X, double Y, double Z );
__declspec(implementation_key(6853)) void IZoneParametersByBorderPoints::PutAssociationObject ( VARIANT_BOOL First, struct IModelObject * PVal );
__declspec(implementation_key(6854)) IModelObjectPtr IZoneParametersByBorderPoints::GetAssociationObject ( VARIANT_BOOL First );
__declspec(implementation_key(6855)) void IZoneParametersByBorderPoints::PutPointType ( VARIANT_BOOL First, enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(6856)) enum ksPoint3DTypeEnum IZoneParametersByBorderPoints::GetPointType ( VARIANT_BOOL First );
__declspec(implementation_key(6857)) IKompasAPIObjectPtr IZoneParametersByBorderPoints::GetPointParameters ( VARIANT_BOOL First );
__declspec(implementation_key(6858)) enum ksGabaritBuildingTypeEnum IDynamicCrossSectionStepParametersByBorderPoints::GetBuildingType ( );
__declspec(implementation_key(6859)) void IDynamicCrossSectionStepParametersByBorderPoints::PutBuildingType ( enum ksGabaritBuildingTypeEnum PVal );
__declspec(implementation_key(6860)) VARIANT_BOOL IDynamicCrossSectionStepParametersByBorderPoints::GetPoint ( VARIANT_BOOL First, double * X, double * Y, double * Z );
__declspec(implementation_key(6861)) VARIANT_BOOL IDynamicCrossSectionStepParametersByBorderPoints::SetPoint ( VARIANT_BOOL First, double X, double Y, double Z );
__declspec(implementation_key(6862)) void IDynamicCrossSectionStepParametersByBorderPoints::PutAssociationObject ( VARIANT_BOOL First, struct IModelObject * PVal );
__declspec(implementation_key(6863)) IModelObjectPtr IDynamicCrossSectionStepParametersByBorderPoints::GetAssociationObject ( VARIANT_BOOL First );
__declspec(implementation_key(6864)) void IDynamicCrossSectionStepParametersByBorderPoints::PutPointType ( VARIANT_BOOL First, enum ksPoint3DTypeEnum PVal );
__declspec(implementation_key(6865)) enum ksPoint3DTypeEnum IDynamicCrossSectionStepParametersByBorderPoints::GetPointType ( VARIANT_BOOL First );
__declspec(implementation_key(6866)) IKompasAPIObjectPtr IDynamicCrossSectionStepParametersByBorderPoints::GetPointParameters ( VARIANT_BOOL First );
__declspec(implementation_key(6867)) VARIANT_BOOL IProcessWithVariables::SetControlExpression ( struct IPropertyControl * Control, _bstr_t VariableName, _bstr_t Expression );
__declspec(implementation_key(6868)) _bstr_t IProcessWithVariables::GetControlExpression ( struct IPropertyControl * Control );
__declspec(implementation_key(6869)) _bstr_t IProcessWithVariables::GetControlVariableName ( struct IPropertyControl * Control );
__declspec(implementation_key(6870)) VARIANT_BOOL IProcessWithVariables::ClearExpressions ( );
__declspec(implementation_key(6871)) VARIANT_BOOL IProcessWithVariables::UpdateExpressionsControls ( );
__declspec(implementation_key(6872)) VARIANT_BOOL ILineSegmentAndPointDimension::GetBaseObjectPoint ( long PointIndex, double * X, double * Y );
__declspec(implementation_key(6873)) VARIANT_BOOL ILineSegmentAndPointDimension::SetBaseObjectPoint ( long PointIndex, double X, double Y );
__declspec(implementation_key(6874)) IDrawingObjectPtr ILineSegmentAndPointDimension::GetBaseObject ( long Index );
__declspec(implementation_key(6875)) VARIANT_BOOL ILineSegmentAndPointDimension::SetBaseObject ( long Index, struct IDrawingObject * NewObject, long SegmentIndex );
__declspec(implementation_key(6876)) void IAdditionConvertParameters::PutFormat ( enum ksKOMPASConverterEnum PVal );
__declspec(implementation_key(6877)) enum ksKOMPASConverterEnum IAdditionConvertParameters::GetFormat ( );
__declspec(implementation_key(6878)) void IAdditionConvertParameters::PutFormatBinary ( VARIANT_BOOL PVal );
__declspec(implementation_key(6879)) VARIANT_BOOL IAdditionConvertParameters::GetFormatBinary ( );
__declspec(implementation_key(6880)) void IAdditionConvertParameters::PutTopolgyIncluded ( VARIANT_BOOL PVal );
__declspec(implementation_key(6881)) VARIANT_BOOL IAdditionConvertParameters::GetTopolgyIncluded ( );
__declspec(implementation_key(6882)) void IAdditionConvertParameters::PutTextExportForm ( enum ksTextExportFormEnum PVal );
__declspec(implementation_key(6883)) enum ksTextExportFormEnum IAdditionConvertParameters::GetTextExportForm ( );
__declspec(implementation_key(6884)) void IAdditionConvertParameters::PutStepType ( enum ksStepTypeEnum Result );
__declspec(implementation_key(6885)) enum ksStepTypeEnum IAdditionConvertParameters::GetStepType ( );
__declspec(implementation_key(6886)) void IAdditionConvertParameters::PutStep ( double Result );
__declspec(implementation_key(6887)) double IAdditionConvertParameters::GetStep ( );
__declspec(implementation_key(6888)) void IAdditionConvertParameters::PutAngle ( double Result );
__declspec(implementation_key(6889)) double IAdditionConvertParameters::GetAngle ( );
__declspec(implementation_key(6890)) void IAdditionConvertParameters::PutLength ( double Result );
__declspec(implementation_key(6891)) double IAdditionConvertParameters::GetLength ( );
__declspec(implementation_key(6892)) void IAdditionConvertParameters::PutMaxTeselationCellCount ( long Result );
__declspec(implementation_key(6893)) long IAdditionConvertParameters::GetMaxTeselationCellCount ( );
__declspec(implementation_key(6894)) void IAdditionConvertParameters::PutLengthUnits ( enum ksLengthUnitsEnum Result );
__declspec(implementation_key(6895)) enum ksLengthUnitsEnum IAdditionConvertParameters::GetLengthUnits ( );
__declspec(implementation_key(6896)) void IAdditionConvertParameters::PutStitchSurfaces ( VARIANT_BOOL PVal );
__declspec(implementation_key(6897)) VARIANT_BOOL IAdditionConvertParameters::GetStitchSurfaces ( );
__declspec(implementation_key(6898)) void IAdditionConvertParameters::PutStitchPrecision ( double Result );
__declspec(implementation_key(6899)) double IAdditionConvertParameters::GetStitchPrecision ( );
__declspec(implementation_key(6900)) void IAdditionConvertParameters::PutNeedCreateComponentsFiles ( VARIANT_BOOL PVal );
__declspec(implementation_key(6901)) VARIANT_BOOL IAdditionConvertParameters::GetNeedCreateComponentsFiles ( );
__declspec(implementation_key(6902)) void IAdditionConvertParameters::PutSaveResultDocument ( VARIANT_BOOL PVal );
__declspec(implementation_key(6903)) VARIANT_BOOL IAdditionConvertParameters::GetSaveResultDocument ( );
__declspec(implementation_key(6904)) void IAdditionConvertParameters::PutConfiguration ( const _variant_t & PVal );
__declspec(implementation_key(6905)) _variant_t IAdditionConvertParameters::GetConfiguration ( );
__declspec(implementation_key(6906)) void IAdditionConvertParameters::PutAuthor ( _bstr_t PVal );
__declspec(implementation_key(6907)) _bstr_t IAdditionConvertParameters::GetAuthor ( );
__declspec(implementation_key(6908)) void IAdditionConvertParameters::PutOrganization ( _bstr_t PVal );
__declspec(implementation_key(6909)) _bstr_t IAdditionConvertParameters::GetOrganization ( );
__declspec(implementation_key(6910)) void IAdditionConvertParameters::PutComment ( _bstr_t PVal );
__declspec(implementation_key(6911)) _bstr_t IAdditionConvertParameters::GetComment ( );
__declspec(implementation_key(6912)) void IAdditionConvertParameters::PutPassword ( _bstr_t PVal );
__declspec(implementation_key(6913)) _bstr_t IAdditionConvertParameters::GetPassword ( );
__declspec(implementation_key(6914)) void IAdditionConvertParameters::PutObjectsOptions ( enum ksD3ConverterOptionsEnum Option, VARIANT_BOOL PVal );
__declspec(implementation_key(6915)) VARIANT_BOOL IAdditionConvertParameters::GetObjectsOptions ( enum ksD3ConverterOptionsEnum Option );
__declspec(implementation_key(6916)) IPlacement3DPtr IAdditionConvertParameters::GetPlacement ( );
__declspec(implementation_key(6917)) void IAdditionConvertParameters::PutConfigurationFileName ( _bstr_t PVal );
__declspec(implementation_key(6918)) _bstr_t IAdditionConvertParameters::GetConfigurationFileName ( );
__declspec(implementation_key(6919)) VARIANT_BOOL IAdditionConvertParameters::SaveConfigurationFile ( _bstr_t FileName );
__declspec(implementation_key(6920)) VARIANT_BOOL IAdditionConvertParameters::LoadConfigurationFile ( _bstr_t FileName );
__declspec(implementation_key(6921)) VARIANT_BOOL IAdditionConvertParameters::Clear ( );
__declspec(implementation_key(6922)) void IApplication::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(6923)) VARIANT_BOOL IApplication::GetVisible ( );
__declspec(implementation_key(6924)) IDocumentsPtr IApplication::GetDocuments ( );
__declspec(implementation_key(6925)) HRESULT IApplication::Quit ( );
__declspec(implementation_key(6926)) IProcessParamPtr IApplication::CreateProcessParam ( );
__declspec(implementation_key(6927)) HRESULT IApplication::StopCurrentProcess ( VARIANT_BOOL PostMessage, struct IKompasDocument * PDoc );
__declspec(implementation_key(6928)) IPropertyManagerPtr IApplication::CreatePropertyManager ( VARIANT_BOOL NewManager );
__declspec(implementation_key(6929)) void IApplication::PutActiveDocument ( struct IKompasDocument * PDoc );
__declspec(implementation_key(6930)) IKompasDocumentPtr IApplication::GetActiveDocument ( );
__declspec(implementation_key(6931)) ILibraryManagerPtr IApplication::GetLibraryManager ( );
__declspec(implementation_key(6932)) IKompasErrorPtr IApplication::GetKompasError ( );
__declspec(implementation_key(6933)) IConverterPtr IApplication::GetConverter ( const _variant_t & Library );
__declspec(implementation_key(6934)) ICheckSumPtr IApplication::GetCheckSum ( );
__declspec(implementation_key(6935)) IProgressBarIndicatorPtr IApplication::GetProgressBarIndicator ( );
__declspec(implementation_key(6936)) void IApplication::PutHideMessage ( enum ksHideMessageEnum PVal );
__declspec(implementation_key(6937)) enum ksHideMessageEnum IApplication::GetHideMessage ( );
__declspec(implementation_key(6938)) VARIANT_BOOL IApplication::ExecuteKompasCommand ( long CommandID, VARIANT_BOOL PostMessage );
__declspec(implementation_key(6939)) VARIANT_BOOL IApplication::IsKompasCommandEnable ( long CommandID );
__declspec(implementation_key(6940)) long IApplication::IsKompasCommandCheck ( long CommandID );
__declspec(implementation_key(6941)) ISystemSettingsPtr IApplication::GetSystemSettings ( );
__declspec(implementation_key(6942)) _bstr_t IApplication::GetApplicationName ( VARIANT_BOOL FullName );
__declspec(implementation_key(6943)) IMath2DPtr IApplication::GetMath2D ( );
__declspec(implementation_key(6944)) IPrintJobPtr IApplication::GetPrintJob ( );
__declspec(implementation_key(6945)) long IApplication::MessageBoxEx ( _bstr_t Text, _bstr_t Caption, long Flags );
__declspec(implementation_key(6946)) long IApplication::MessageDlg ( OLE_HANDLE Parent, _bstr_t Text, _bstr_t Caption, _bstr_t Explanation, long Flags, _bstr_t PositiveButton, _bstr_t NegativeButton, _bstr_t CancelButton, long HelpId, _bstr_t HelpFileName );
__declspec(implementation_key(6947)) _bstr_t IApplication::GetCurrentDirectory ( );
__declspec(implementation_key(6948)) void IApplication::PutCurrentDirectory ( _bstr_t PVal );
__declspec(implementation_key(6949)) IStylesPtr IApplication::GetLibraryStyles ( _bstr_t Path, enum ksStylesLibraryTypeEnum StylesType );
__declspec(implementation_key(6950)) IKompasDocumentPtr IDocuments::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6951)) IKompasDocumentPtr IDocuments::Add ( enum DocumentTypeEnum Type, VARIANT_BOOL Visible );
__declspec(implementation_key(6952)) IKompasDocumentPtr IDocuments::Open ( _bstr_t PathName, VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(6953)) IKompasDocumentPtr IDocuments::OpenEx ( _bstr_t PathName, VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly, const _variant_t & LoadCombinationIndex );
__declspec(implementation_key(6954)) _variant_t IDocuments::GetLoadCombinations ( _bstr_t PathName, long * CurrentIndex );
__declspec(implementation_key(6955)) IKompasDocumentPtr IDocuments::AddWithDefaultSettings ( enum DocumentTypeEnum Type, VARIANT_BOOL Visible );
__declspec(implementation_key(6956)) void IDocuments::PutDocumentSynchronize ( VARIANT_BOOL PVal );
__declspec(implementation_key(6957)) VARIANT_BOOL IDocuments::GetDocumentSynchronize ( );
__declspec(implementation_key(6958)) VARIANT_BOOL IDocuments::GetRecoverMode ( );
__declspec(implementation_key(6959)) void IDocuments::PutRecoverMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(6960)) enum ksRecoverErrorEnum IDocuments::GetRecoverError ( );
__declspec(implementation_key(6961)) void IDocuments::PutRecoverError ( enum ksRecoverErrorEnum PVal );
__declspec(implementation_key(6962)) ILoadCombinationsParamPtr IDocuments::GetLoadCombinationsParam ( _bstr_t PathName );
__declspec(implementation_key(6963)) IOpenDocumentParamPtr IDocuments::GetOpenDocumentParam ( );
__declspec(implementation_key(6964)) IKompasDocumentPtr IDocuments::OpenDocument ( _bstr_t FileName, struct IOpenDocumentParam * Param );
__declspec(implementation_key(6965)) _variant_t IDocuments::GetEmbodimentsTree ( _bstr_t FileName, enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer, VARIANT_BOOL AddSpaces, long * CurrentEmbodiment );
__declspec(implementation_key(6966)) _variant_t IDocuments::GetRecoverModeErrorList ( );
__declspec(implementation_key(6967)) IKompasDocumentPtr IDocuments::AddCustomDocument ( _bstr_t DocumentTypeId );
__declspec(implementation_key(6968)) IKompasDocumentPtr IDocuments::AddNewDocumentFromTemplate ( _bstr_t TemplateFileName );
__declspec(implementation_key(6969)) enum DocumentTypeEnum IKompasDocument::GetDocumentType ( );
__declspec(implementation_key(6970)) IDocumentFramesPtr IKompasDocument::GetDocumentFrames ( );
__declspec(implementation_key(6971)) VARIANT_BOOL IKompasDocument::Close ( enum DocumentCloseOptions closeOptions );
__declspec(implementation_key(6972)) HRESULT IKompasDocument::Save ( );
__declspec(implementation_key(6973)) HRESULT IKompasDocument::SaveAs ( _bstr_t PathName );
__declspec(implementation_key(6974)) _bstr_t IKompasDocument::GetName ( );
__declspec(implementation_key(6975)) _bstr_t IKompasDocument::GetPathName ( );
__declspec(implementation_key(6976)) _bstr_t IKompasDocument::GetPath ( );
__declspec(implementation_key(6977)) VARIANT_BOOL IKompasDocument::GetVisible ( );
__declspec(implementation_key(6978)) VARIANT_BOOL IKompasDocument::GetActive ( );
__declspec(implementation_key(6979)) void IKompasDocument::PutActive ( VARIANT_BOOL PVal );
__declspec(implementation_key(6980)) VARIANT_BOOL IKompasDocument::GetReadOnly ( );
__declspec(implementation_key(6981)) void IKompasDocument::PutReadOnly ( VARIANT_BOOL PVal );
__declspec(implementation_key(6982)) VARIANT_BOOL IKompasDocument::GetChanged ( );
__declspec(implementation_key(6983)) IDocumentSettingsPtr IKompasDocument::GetDocumentSettings ( );
__declspec(implementation_key(6984)) ISpecificationDescriptionsPtr IKompasDocument::GetSpecificationDescriptions ( );
__declspec(implementation_key(6985)) ILayoutSheetsPtr IKompasDocument::GetLayoutSheets ( );
__declspec(implementation_key(6986)) IUserDataStoragesMngPtr IKompasDocument::GetUserDataStoragesMng ( );
__declspec(implementation_key(6987)) _bstr_t IInsert::GetName ( );
__declspec(implementation_key(6988)) void IInsert::PutName ( _bstr_t PVal );
__declspec(implementation_key(6989)) _variant_t IInsert::GetComment ( );
__declspec(implementation_key(6990)) void IInsert::PutComment ( const _variant_t & PVal );
__declspec(implementation_key(6991)) _bstr_t IInsert::GetLibraryFolder ( );
__declspec(implementation_key(6992)) _bstr_t IInsert::GetPathName ( );
__declspec(implementation_key(6993)) IKompasDocumentPtr IInsert::Edit ( );
__declspec(implementation_key(6994)) VARIANT_BOOL IInsert::Delete ( );
__declspec(implementation_key(6995)) enum ksDocumentsLibraryInsertionTypeEnum IInsert::GetInsertType ( );
__declspec(implementation_key(6996)) IInsertPtr IInserts::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6997)) IInsertPtr IInserts::Add ( _bstr_t Name, enum DocumentTypeEnum DocType );
__declspec(implementation_key(6998)) _bstr_t IInsertsLibrary::GetActiveFolder ( );
__declspec(implementation_key(6999)) VARIANT_BOOL IInsertsLibrary::SetActiveFolder ( _bstr_t PathFolder, VARIANT_BOOL LastIsFile, VARIANT_BOOL HaveLibName );
__declspec(implementation_key(7000)) IInsertsPtr IInsertsLibrary::GetInserts ( );
__declspec(implementation_key(7001)) VARIANT_BOOL IInsertsLibrary::AddFolder ( _bstr_t PathFolder );
__declspec(implementation_key(7002)) VARIANT_BOOL IInsertsLibrary::RemoveFolder ( _bstr_t PathFolder );
__declspec(implementation_key(7003)) VARIANT_BOOL IInsertsLibrary::Delete ( );
__declspec(implementation_key(7004)) IInsertsLibraryPtr IInsertsLibraries::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7005)) IInsertsLibraryPtr IInsertsLibraries::Add ( _bstr_t PathName, _bstr_t LibManagerFolder );
__declspec(implementation_key(7006)) IProceduresLibrariesPtr ILibraryManager::GetProceduresLibraries ( );
__declspec(implementation_key(7007)) IInsertsLibrariesPtr ILibraryManager::GetFragmentsLibraries ( );
__declspec(implementation_key(7008)) IInsertsLibrariesPtr ILibraryManager::GetModelsLibraries ( );
__declspec(implementation_key(7009)) VARIANT_BOOL ILibraryManager::GetVisible ( );
__declspec(implementation_key(7010)) void ILibraryManager::PutVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(7011)) enum PropertyManagerLayout ILibraryManager::GetLayout ( );
__declspec(implementation_key(7012)) _bstr_t ILibraryManager::GetActiveFolder ( );
__declspec(implementation_key(7013)) void ILibraryManager::PutActiveFolder ( _bstr_t PVal );
__declspec(implementation_key(7014)) _variant_t ILibraryManager::GetActiveFolderComment ( );
__declspec(implementation_key(7015)) void ILibraryManager::PutActiveFolderComment ( const _variant_t & PVal );
__declspec(implementation_key(7016)) HRESULT ILibraryManager::AddFolder ( _bstr_t PathFolder );
__declspec(implementation_key(7017)) HRESULT ILibraryManager::RemoveFolder ( _bstr_t PathFolder );
__declspec(implementation_key(7018)) IProceduresLibraryPtr ILibraryManager::GetSystemControlStartLibrary ( );
__declspec(implementation_key(7019)) IProceduresLibraryPtr ILibraryManager::GetCurrentLibrary ( );
__declspec(implementation_key(7020)) VARIANT_BOOL ILibraryManager::SetCurrentLibrary ( struct IProceduresLibrary * PVal );
__declspec(implementation_key(7021)) enum ksSystemControlStartEnum ILibraryManager::GetSystemControlStartResult ( );
__declspec(implementation_key(7022)) IInsertsLibrariesPtr ILibraryManager::GetDocumentsLibraries ( );
__declspec(implementation_key(7023)) IAttachedDocumentsPtr ISpecificationDocument::GetAttachedDocuments ( );
__declspec(implementation_key(7024)) VARIANT_BOOL ISpecificationDocument::RebuildDocument ( );
__declspec(implementation_key(7025)) VARIANT_BOOL ISpecificationDocument::GetCrossed ( );
__declspec(implementation_key(7026)) ITextPtr ITextDocument::GetText ( );
__declspec(implementation_key(7027)) VARIANT_BOOL ITextDocument::Update ( );
__declspec(implementation_key(7028)) _variant_t ITextDocument::GetBlocksGabarits ( );
__declspec(implementation_key(7029)) _variant_t ITextDocument::GetBlocksStartLineNumbers ( );
__declspec(implementation_key(7030)) _variant_t ITextDocument::GetSectionsStartLineNumbers ( );
__declspec(implementation_key(7031)) enum ksReportTypeEnum IReport::GetReportType ( );
__declspec(implementation_key(7032)) VARIANT_BOOL IReport::GetShowAllObjects ( );
__declspec(implementation_key(7033)) void IReport::PutShowAllObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(7034)) IReportStylePtr IReport::GetCurrentReportStyle ( );
__declspec(implementation_key(7035)) long IReport::GetStylesCount ( );
__declspec(implementation_key(7036)) IReportStylePtr IReport::GetReportStyle ( const _variant_t & Index );
__declspec(implementation_key(7037)) IReportStylePtr IReport::AddStyle ( _bstr_t FileName, double Id );
__declspec(implementation_key(7038)) long IReport::GetCurrentStyleIndex ( );
__declspec(implementation_key(7039)) void IReport::PutCurrentStyleIndex ( long PVal );
__declspec(implementation_key(7040)) VARIANT_BOOL IReport::Rebuild ( );
__declspec(implementation_key(7041)) _bstr_t IReport::GetSourceFileName ( );
__declspec(implementation_key(7042)) IKompasDocumentPtr IReport::LoadSourceDocument ( VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(7043)) void IReport::PutUseReportFilter ( VARIANT_BOOL Index );
__declspec(implementation_key(7044)) VARIANT_BOOL IReport::GetUseReportFilter ( );
__declspec(implementation_key(7045)) IReportFilterPtr IReport::GetReportFilter ( );
__declspec(implementation_key(7046)) VARIANT_BOOL IReport::SaveAs ( const _variant_t & FileName );
__declspec(implementation_key(7047)) long IPropertyMng::GetPropertyCount ( const _variant_t & Libname );
__declspec(implementation_key(7048)) IPropertyPtr IPropertyMng::GetProperty ( const _variant_t & Libname, const _variant_t & Index );
__declspec(implementation_key(7049)) _variant_t IPropertyMng::GetProperties ( const _variant_t & Libname );
__declspec(implementation_key(7050)) IPropertyPtr IPropertyMng::AddProperty ( const _variant_t & Libname, const _variant_t & Val );
__declspec(implementation_key(7051)) VARIANT_BOOL IPropertyMng::RemoveProperty ( const _variant_t & Libname, const _variant_t & Val );
__declspec(implementation_key(7052)) IReportPtr IPropertyMng::GetReport ( const _variant_t & Document, enum ksReportTypeEnum Type );
__declspec(implementation_key(7053)) double IAssociationTable::GetX ( );
__declspec(implementation_key(7054)) void IAssociationTable::PutX ( double Result );
__declspec(implementation_key(7055)) double IAssociationTable::GetY ( );
__declspec(implementation_key(7056)) void IAssociationTable::PutY ( double Result );
__declspec(implementation_key(7057)) enum ksTablePointEnum IAssociationTable::GetTablePlaceType ( );
__declspec(implementation_key(7058)) void IAssociationTable::PutTablePlaceType ( enum ksTablePointEnum PVal );
__declspec(implementation_key(7059)) IReportPtr IAssociationTable::GetReport ( );
__declspec(implementation_key(7060)) VARIANT_BOOL IAssociationTable::GetActual ( );
__declspec(implementation_key(7061)) VARIANT_BOOL IAssociationTable::Rebuild ( );
__declspec(implementation_key(7062)) long IAssociationTable::GetTablesCount ( );
__declspec(implementation_key(7063)) ITextPtr IAssociationTable::GetTitle ( long TableIndex );
__declspec(implementation_key(7064)) INumericGroupPtr IAssociationTable::GetNumericGroup ( );
__declspec(implementation_key(7065)) void IAssociationTable::PutNumericGroup ( struct INumericGroup * Result );
__declspec(implementation_key(7066)) IAssociationTablePtr IAssociationTables::GetAssociationTable ( const _variant_t & Index );
__declspec(implementation_key(7067)) IAssociationTablePtr IAssociationTables::Add ( const _variant_t & Document, enum ksReportTypeEnum Type );
__declspec(implementation_key(7068)) ILineDimensionsPtr ISymbols2DContainer::GetLineDimensions ( );
__declspec(implementation_key(7069)) IRadialDimensionsPtr ISymbols2DContainer::GetRadialDimensions ( );
__declspec(implementation_key(7070)) IDiametralDimensionsPtr ISymbols2DContainer::GetDiametralDimensions ( );
__declspec(implementation_key(7071)) IAngleDimensionsPtr ISymbols2DContainer::GetAngleDimensions ( );
__declspec(implementation_key(7072)) IBreakLineDimensionsPtr ISymbols2DContainer::GetBreakLineDimensions ( );
__declspec(implementation_key(7073)) IHeightDimensionsPtr ISymbols2DContainer::GetHeightDimensions ( );
__declspec(implementation_key(7074)) IArcDimensionsPtr ISymbols2DContainer::GetArcDimensions ( );
__declspec(implementation_key(7075)) IBreakRadialDimensionsPtr ISymbols2DContainer::GetBreakRadialDimensions ( );
__declspec(implementation_key(7076)) IRoughsPtr ISymbols2DContainer::GetRoughs ( );
__declspec(implementation_key(7077)) ILeadersPtr ISymbols2DContainer::GetLeaders ( );
__declspec(implementation_key(7078)) IBasesPtr ISymbols2DContainer::GetBases ( );
__declspec(implementation_key(7079)) ITolerancesPtr ISymbols2DContainer::GetTolerances ( );
__declspec(implementation_key(7080)) IDrawingTablesPtr ISymbols2DContainer::GetDrawingTables ( );
__declspec(implementation_key(7081)) ICutLinesPtr ISymbols2DContainer::GetCutLines ( );
__declspec(implementation_key(7082)) IViewPointersPtr ISymbols2DContainer::GetViewPointers ( );
__declspec(implementation_key(7083)) ICentreMarkersPtr ISymbols2DContainer::GetCentreMarkers ( );
__declspec(implementation_key(7084)) IRemoteElementsPtr ISymbols2DContainer::GetRemoteElements ( );
__declspec(implementation_key(7085)) IAxisLinesPtr ISymbols2DContainer::GetAxisLines ( );
__declspec(implementation_key(7086)) IWaveLinesPtr ISymbols2DContainer::GetWaveLines ( );
__declspec(implementation_key(7087)) IBrokenLinesPtr ISymbols2DContainer::GetBrokenLines ( );
__declspec(implementation_key(7088)) IAssociationTablesPtr ISymbols2DContainer::GetAssociationTables ( );
__declspec(implementation_key(7089)) ICircularsCentriesPtr ISymbols2DContainer::GetCircularsCentries ( );
__declspec(implementation_key(7090)) ILinearsCentriesPtr ISymbols2DContainer::GetLinearsCentries ( );
__declspec(implementation_key(7091)) IConditionIntersectsPtr ISymbols2DContainer::GetConditionIntersects ( );
__declspec(implementation_key(7092)) VARIANT_BOOL IApplicationServises::CheckDocumentMatchingNames ( struct IKompasDocument * Document );
__declspec(implementation_key(7093)) long IApplicationServises::GetCurrentUniqueName ( struct IKompasDocument * Document );
__declspec(implementation_key(7094)) VARIANT_BOOL IApplicationServises::CreateModelSnapshot ( _bstr_t Path, _bstr_t Options );
__declspec(implementation_key(7095)) ISpecificationDescriptionPtr ISpecificationDescriptions::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7096)) ISpecificationDescriptionPtr ISpecificationDescriptions::Add ( _bstr_t LayoutName, long StyleID, _bstr_t SpcName );
__declspec(implementation_key(7097)) ISpecificationDescriptionPtr ISpecificationDescriptions::GetDescription ( _bstr_t LayoutName, long StyleID );
__declspec(implementation_key(7098)) ISpecificationDescriptionPtr ISpecificationDescriptions::GetActive ( );
__declspec(implementation_key(7099)) ISpecificationDescriptionPtr ISpecificationDescriptions::GetActiveFromLibStyle ( );
__declspec(implementation_key(7100)) _bstr_t ISpecificationDescription::GetLayoutName ( );
__declspec(implementation_key(7101)) void ISpecificationDescription::PutLayoutName ( _bstr_t PVal );
__declspec(implementation_key(7102)) long ISpecificationDescription::GetStyleID ( );
__declspec(implementation_key(7103)) void ISpecificationDescription::PutStyleID ( long PVal );
__declspec(implementation_key(7104)) _bstr_t ISpecificationDescription::GetSpecificationDocumentName ( );
__declspec(implementation_key(7105)) void ISpecificationDescription::PutSpecificationDocumentName ( _bstr_t PVal );
__declspec(implementation_key(7106)) VARIANT_BOOL ISpecificationDescription::GetActive ( );
__declspec(implementation_key(7107)) void ISpecificationDescription::PutActive ( VARIANT_BOOL PVal );
__declspec(implementation_key(7108)) VARIANT_BOOL ISpecificationDescription::Update ( );
__declspec(implementation_key(7109)) VARIANT_BOOL ISpecificationDescription::Delete ( );
__declspec(implementation_key(7110)) ISpecificationStylePtr ISpecificationDescription::GetSpecificationStyle ( );
__declspec(implementation_key(7111)) ISpecificationTuningPtr ISpecificationDescription::GetSpecificationTuning ( );
__declspec(implementation_key(7112)) _variant_t ISpecificationDescription::GetObjects ( );
__declspec(implementation_key(7113)) ISpecificationBaseObjectsPtr ISpecificationDescription::GetBaseObjects ( );
__declspec(implementation_key(7114)) ISpecificationCommentObjectsPtr ISpecificationDescription::GetCommentObjects ( );
__declspec(implementation_key(7115)) VARIANT_BOOL ISpecificationDescription::GetShowOnSheet ( );
__declspec(implementation_key(7116)) void ISpecificationDescription::PutShowOnSheet ( VARIANT_BOOL PVal );
__declspec(implementation_key(7117)) ISpecificationObjectPtr ISpecificationDescription::GetCurrentObject ( );
__declspec(implementation_key(7118)) void ISpecificationDescription::PutCurrentObject ( struct ISpecificationObject * Result );
__declspec(implementation_key(7119)) VARIANT_BOOL ISpecificationDescription::GetShowAllObjects ( );
__declspec(implementation_key(7120)) void ISpecificationDescription::PutShowAllObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(7121)) _bstr_t ISpecificationDescription::GetPerformanceName ( long PerformanceIndex, long BlockIndex );
__declspec(implementation_key(7122)) void ISpecificationDescription::PutPerformanceName ( long PerformanceIndex, long BlockIndex, _bstr_t PVal );
__declspec(implementation_key(7123)) VARIANT_BOOL ISpecificationDescription::GetDelegateMode ( );
__declspec(implementation_key(7124)) void ISpecificationDescription::PutDelegateMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(7125)) VARIANT_BOOL ISpecificationDescription::GetNeedRebuild ( );
__declspec(implementation_key(7126)) void ISpecificationDescription::PutNeedRebuild ( VARIANT_BOOL PVal );
__declspec(implementation_key(7127)) enum ksSpecificationStyleDifferenceTypeEnum ISpecificationDescription::CompareStyleWithLibStyle ( );
__declspec(implementation_key(7128)) _bstr_t ISpecificationDescription::GetPerformanceParam ( long DisplayPerformanceIndex, long * PerformanceIndex, long * BlockIndex );
__declspec(implementation_key(7129)) VARIANT_BOOL ISpecificationDescription::GetShowExcludedObjects ( );
__declspec(implementation_key(7130)) void ISpecificationDescription::PutShowExcludedObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(7131)) long ISpecificationDescription::GetPerformanceCount ( );
__declspec(implementation_key(7132)) void ISpecificationDescription::PutPerformanceCount ( long PVal );
__declspec(implementation_key(7133)) long ISpecificationDescription::GetPerformanceCountInBlock ( );
__declspec(implementation_key(7134)) ISpecificationBaseObjectPtr ISpecificationBaseObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7135)) ISpecificationBaseObjectPtr ISpecificationBaseObjects::Add ( long SectionNumb, double AttrNumb );
__declspec(implementation_key(7136)) _variant_t ISpecificationBaseObjects::GetSpecificationObjectsForGeom ( const _variant_t & PGeom, VARIANT_BOOL Equal, long SectionNumb, double AttrNumb );
__declspec(implementation_key(7137)) ISpecificationBaseObjectPtr ISpecificationBaseObjects::CopySpecificationObject ( struct ISpecificationBaseObject * SpcObj, const _variant_t & Geometry );
__declspec(implementation_key(7138)) ISpecificationBaseObjectPtr ISpecificationBaseObjects::AddWithParam ( struct ISpecificationObjectCreateParam * Param, struct IPropertyKeeper * PropertyObject, VARIANT_BOOL FillText, const _variant_t & Geometry );
__declspec(implementation_key(7139)) VARIANT_BOOL ISpecificationBaseObject::GetDraw ( );
__declspec(implementation_key(7140)) void ISpecificationBaseObject::PutDraw ( VARIANT_BOOL PVal );
__declspec(implementation_key(7141)) VARIANT_BOOL ISpecificationBaseObject::GetDrawPosition ( );
__declspec(implementation_key(7142)) void ISpecificationBaseObject::PutDrawPosition ( VARIANT_BOOL PVal );
__declspec(implementation_key(7143)) VARIANT_BOOL ISpecificationBaseObject::GetPerformance ( );
__declspec(implementation_key(7144)) void ISpecificationBaseObject::PutPerformance ( VARIANT_BOOL PVal );
__declspec(implementation_key(7145)) ISpecificationCommentObjectsPtr ISpecificationBaseObject::GetCommentObjects ( );
__declspec(implementation_key(7146)) _variant_t ISpecificationBaseObject::GetDocuments ( );
__declspec(implementation_key(7147)) double ISpecificationBaseObject::GetAttributeNumber ( );
__declspec(implementation_key(7148)) void ISpecificationBaseObject::PutAttributeNumber ( double PVal );
__declspec(implementation_key(7149)) double ISpecificationBaseObject::GetSummaryCount ( long ColumnTypeNumber, long BlockNumber );
__declspec(implementation_key(7150)) VARIANT_BOOL ISpecificationBaseObject::SetMaterial ( _bstr_t Material, double Density );
__declspec(implementation_key(7151)) _variant_t ISpecificationBaseObject::GetGeometry ( );
__declspec(implementation_key(7152)) void ISpecificationBaseObject::PutGeometry ( const _variant_t & PVal );
__declspec(implementation_key(7153)) VARIANT_BOOL ISpecificationBaseObject::IncludeGeometry ( const _variant_t & PVal, VARIANT_BOOL FillText );
__declspec(implementation_key(7154)) VARIANT_BOOL ISpecificationBaseObject::ClearGeometry ( VARIANT_BOOL ClearGeometry, VARIANT_BOOL ClearLeaders );
__declspec(implementation_key(7155)) VARIANT_BOOL ISpecificationBaseObject::GetEditSourceObject ( );
__declspec(implementation_key(7156)) void ISpecificationBaseObject::PutEditSourceObject ( VARIANT_BOOL PVal );
__declspec(implementation_key(7157)) VARIANT_BOOL ISpecificationBaseObject::GetSyncronizeWithProperties ( );
__declspec(implementation_key(7158)) void ISpecificationBaseObject::PutSyncronizeWithProperties ( VARIANT_BOOL PVal );
__declspec(implementation_key(7159)) VARIANT_BOOL ISpecificationBaseObject::SetSection ( long Val );
__declspec(implementation_key(7160)) void ISpecificationBaseObject::PutSpcUsed ( enum ksSpcUsedTypeEnum SpcUsed, VARIANT_BOOL PVal );
__declspec(implementation_key(7161)) VARIANT_BOOL ISpecificationBaseObject::GetSpcUsed ( enum ksSpcUsedTypeEnum SpcUsed );
__declspec(implementation_key(7162)) _bstr_t ISpecificationBaseObject::GetUniqueMetaObjectKey ( );
__declspec(implementation_key(7163)) VARIANT_BOOL ISpecificationBaseObject::GetIsFirstObject ( );
__declspec(implementation_key(7164)) VARIANT_BOOL ISpecificationBaseObject::GetFillNameByMaterial ( );
__declspec(implementation_key(7165)) void ISpecificationBaseObject::PutFillNameByMaterial ( VARIANT_BOOL PVal );
__declspec(implementation_key(7166)) ITextPtr ISpecificationBaseObject::GetSummaryCountText ( long ColumnTypeNumber, long BlockNumber );
__declspec(implementation_key(7167)) ISpecificationBaseObjectPtr ISpecificationCommentObject::GetBaseObject ( );
__declspec(implementation_key(7168)) long ISpecificationCommentObject::GetBlockNumber ( );
__declspec(implementation_key(7169)) void ISpecificationCommentObject::PutBlockNumber ( long PVal );
__declspec(implementation_key(7170)) VARIANT_BOOL ISpecificationCommentObject::GetEditSourceObject ( );
__declspec(implementation_key(7171)) void ISpecificationCommentObject::PutEditSourceObject ( VARIANT_BOOL PVal );
__declspec(implementation_key(7172)) VARIANT_BOOL ISpecificationCommentObject::SetSection ( long Val );
__declspec(implementation_key(7173)) ISpecificationCommentObjectPtr ISpecificationCommentObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7174)) ISpecificationCommentObjectPtr ISpecificationCommentObjects::Add ( long SectionNamb );
__declspec(implementation_key(7175)) VARIANT_BOOL ISpecificationCommentObjects::Attach ( struct ISpecificationCommentObject * PVal );
__declspec(implementation_key(7176)) VARIANT_BOOL ISpecificationCommentObjects::Detach ( struct ISpecificationCommentObject * PVal );
__declspec(implementation_key(7177)) ISpecificationCommentObjectPtr ISpecificationCommentObjects::CopySpecificationObject ( struct ISpecificationCommentObject * SpcObj );
__declspec(implementation_key(7178)) ISpecificationCommentObjectPtr ISpecificationCommentObjects::AddWithParam ( struct ISpecificationObjectCreateParam * Param, struct ISpecificationBaseObject * ParentObject );
__declspec(implementation_key(7179)) IViewsAndLayersManagerPtr IKompasDocument2D::GetViewsAndLayersManager ( );
__declspec(implementation_key(7180)) IDispatchPtr IKompasDocument2D::GetDrawingObjectNotifyResult ( );
__declspec(implementation_key(7181)) ISpecificationDescriptionsPtr IDrawingDocument::GetChangeListDescriptions ( );
__declspec(implementation_key(7182)) ISpecRoughPtr IDrawingDocument::GetSpecRough ( );
__declspec(implementation_key(7183)) ITechnicalDemandPtr IDrawingDocument::GetTechnicalDemand ( );
__declspec(implementation_key(7184)) VARIANT_BOOL IFragmentDocument::GetIsSketch ( );
__declspec(implementation_key(7185)) enum ksInsertionTypeEnum IInsertionDefinition::GetInsertionType ( );
__declspec(implementation_key(7186)) void IInsertionDefinition::PutName ( _bstr_t PVal );
__declspec(implementation_key(7187)) _bstr_t IInsertionDefinition::GetName ( );
__declspec(implementation_key(7188)) void IInsertionDefinition::PutFileName ( _bstr_t PVal );
__declspec(implementation_key(7189)) _bstr_t IInsertionDefinition::GetFileName ( );
__declspec(implementation_key(7190)) IKompasDocument2DPtr IInsertionDefinition::Open ( VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(7191)) long IInsertionDefinition::GetInsertionObjectsCount ( );
__declspec(implementation_key(7192)) _bstr_t IInsertionParameters::GetFileName ( );
__declspec(implementation_key(7193)) double IInsertionParameters::GetSourceHeight ( );
__declspec(implementation_key(7194)) double IInsertionParameters::GetSourceWidth ( );
__declspec(implementation_key(7195)) double IInsertionParameters::GetHeight ( );
__declspec(implementation_key(7196)) void IInsertionParameters::PutHeight ( double PVal );
__declspec(implementation_key(7197)) double IInsertionParameters::GetWidth ( );
__declspec(implementation_key(7198)) void IInsertionParameters::PutWidth ( double PVal );
__declspec(implementation_key(7199)) double IInsertionParameters::GetScale ( );
__declspec(implementation_key(7200)) void IInsertionParameters::PutScale ( double PVal );
__declspec(implementation_key(7201)) VARIANT_BOOL IInsertionParameters::AutoScale ( VARIANT_BOOL ByHeight );
__declspec(implementation_key(7202)) enum ksAngleEnum IInsertionParameters::GetAngle ( );
__declspec(implementation_key(7203)) void IInsertionParameters::PutAngle ( enum ksAngleEnum PVal );
__declspec(implementation_key(7204)) IInsertionDefinitionPtr IInsertionParameters::GetInsertionDefinition ( );
__declspec(implementation_key(7205)) void IInsertionParameters::PutInsertionDefinition ( struct IInsertionDefinition * PVal );
__declspec(implementation_key(7206)) double IInsertionParameters::GetImageResolution ( );
__declspec(implementation_key(7207)) void IInsertionParameters::PutImageResolution ( double PVal );
__declspec(implementation_key(7208)) long IInsertionParameters::GetPalette ( );
__declspec(implementation_key(7209)) void ISketch::PutPlane ( struct IModelObject * Result );
__declspec(implementation_key(7210)) IModelObjectPtr ISketch::GetPlane ( );
__declspec(implementation_key(7211)) void ISketch::PutAngle ( double PVal );
__declspec(implementation_key(7212)) double ISketch::GetAngle ( );
__declspec(implementation_key(7213)) VARIANT_BOOL ISketch::GetLocation ( double * X, double * Y );
__declspec(implementation_key(7214)) VARIANT_BOOL ISketch::SetLocation ( double X, double Y );
__declspec(implementation_key(7215)) VARIANT_BOOL ISketch::GetLoftPoint ( double * X, double * Y );
__declspec(implementation_key(7216)) VARIANT_BOOL ISketch::SetLoftPoint ( double X, double Y );
__declspec(implementation_key(7217)) IFragmentDocumentPtr ISketch::BeginEdit ( );
__declspec(implementation_key(7218)) VARIANT_BOOL ISketch::EndEdit ( );
__declspec(implementation_key(7219)) IFragmentDocumentPtr ISketch::BeginEditEx ( VARIANT_BOOL ReadOnly );
__declspec(implementation_key(7220)) VARIANT_BOOL ISketch::AddSketch ( struct IModelObject * Sketch, struct IModelObject * Plane );
__declspec(implementation_key(7221)) VARIANT_BOOL ISketch::WriteToFragment ( _bstr_t FileName );
__declspec(implementation_key(7222)) VARIANT_BOOL ISketch::DeleteWrongProjection ( );
__declspec(implementation_key(7223)) void ISketch::PutLeftHandedCS ( VARIANT_BOOL PVal );
__declspec(implementation_key(7224)) VARIANT_BOOL ISketch::GetLeftHandedCS ( );
__declspec(implementation_key(7225)) void ISketch::PutFixed ( VARIANT_BOOL PVal );
__declspec(implementation_key(7226)) VARIANT_BOOL ISketch::GetFixed ( );
__declspec(implementation_key(7227)) IModelObjectPtr ISketch::GetCoordinateSystem ( );
__declspec(implementation_key(7228)) void ISketch::PutCoordinateSystem ( struct IModelObject * PVal );
__declspec(implementation_key(7229)) IModelObjectPtr ISketch::GetAssociationObject ( );
__declspec(implementation_key(7230)) void ISketch::PutAssociationObject ( struct IModelObject * PVal );
__declspec(implementation_key(7231)) IModelObjectPtr ISketch::GetDirectingObject ( ksObj3dTypeEnum Axis );
__declspec(implementation_key(7232)) void ISketch::PutDirectingObject ( ksObj3dTypeEnum Axis, struct IModelObject * PVal );
__declspec(implementation_key(7233)) IVector3DPtr ISketch::GetVector3D ( ksObj3dTypeEnum Axis );
__declspec(implementation_key(7234)) VARIANT_BOOL ISketch::RotateAxis ( ksObj3dTypeEnum Axis );
__declspec(implementation_key(7235)) ISketchPtr ISketchs::GetSketch ( const _variant_t & Index );
__declspec(implementation_key(7236)) ISketchPtr ISketchs::Add ( );
__declspec(implementation_key(7237)) void IExtrusion::PutSketch ( struct ISketch * Result );
__declspec(implementation_key(7238)) ISketchPtr IExtrusion::GetSketch ( );
__declspec(implementation_key(7239)) void IExtrusion::PutDirection ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(7240)) ksDirectionTypeEnum IExtrusion::GetDirection ( );
__declspec(implementation_key(7241)) void IExtrusion::PutExtrusionType ( VARIANT_BOOL Normal, ksEndTypeEnum PVal );
__declspec(implementation_key(7242)) ksEndTypeEnum IExtrusion::GetExtrusionType ( VARIANT_BOOL Normal );
__declspec(implementation_key(7243)) void IExtrusion::PutDepth ( VARIANT_BOOL Normal, double PVal );
__declspec(implementation_key(7244)) double IExtrusion::GetDepth ( VARIANT_BOOL Normal );
__declspec(implementation_key(7245)) void IExtrusion::PutDraftValue ( VARIANT_BOOL Normal, double PVal );
__declspec(implementation_key(7246)) double IExtrusion::GetDraftValue ( VARIANT_BOOL Normal );
__declspec(implementation_key(7247)) void IExtrusion::PutDraftOutward ( VARIANT_BOOL Normal, VARIANT_BOOL PVal );
__declspec(implementation_key(7248)) VARIANT_BOOL IExtrusion::GetDraftOutward ( VARIANT_BOOL Normal );
__declspec(implementation_key(7249)) void IExtrusion::PutDepthObject ( VARIANT_BOOL Normal, struct IModelObject * PVal );
__declspec(implementation_key(7250)) IModelObjectPtr IExtrusion::GetDepthObject ( VARIANT_BOOL Normal );
__declspec(implementation_key(7251)) VARIANT_BOOL IExtrusion::GetSideParameters ( VARIANT_BOOL Normal, ksEndTypeEnum * ExtrusionType, double * Depth, double * DraftValue, VARIANT_BOOL * DraftOutward, struct IModelObject * * DepthObject );
__declspec(implementation_key(7252)) VARIANT_BOOL IExtrusion::SetSideParameters ( VARIANT_BOOL Normal, ksEndTypeEnum ExtrusionType, double Depth, double DraftValue, VARIANT_BOOL DraftOutward, struct IModelObject * DepthObject );
__declspec(implementation_key(7253)) IExtrusionPtr IExtrusions::GetExtrusion ( const _variant_t & Index );
__declspec(implementation_key(7254)) IExtrusionPtr IExtrusions::Add ( ksObj3dTypeEnum ExtrusionType );
__declspec(implementation_key(7255)) ISketchPtr IRib::GetSketch ( );
__declspec(implementation_key(7256)) void IRib::PutSketch ( struct ISketch * PVal );
__declspec(implementation_key(7257)) enum ksRibSideEnum IRib::GetSide ( );
__declspec(implementation_key(7258)) void IRib::PutSide ( enum ksRibSideEnum PVal );
__declspec(implementation_key(7259)) double IRib::GetAngle ( );
__declspec(implementation_key(7260)) void IRib::PutAngle ( double PVal );
__declspec(implementation_key(7261)) long IRib::GetSegmentIndex ( );
__declspec(implementation_key(7262)) void IRib::PutSegmentIndex ( long PVal );
__declspec(implementation_key(7263)) void IRib::PutBody ( struct IKompasAPIObject * PVal );
__declspec(implementation_key(7264)) IKompasAPIObjectPtr IRib::GetBody ( );
__declspec(implementation_key(7265)) IRibPtr IRibs::GetRib ( const _variant_t & Index );
__declspec(implementation_key(7266)) IRibPtr IRibs::Add ( );
__declspec(implementation_key(7267)) void ICutExtrusion::PutCut ( VARIANT_BOOL PVal );
__declspec(implementation_key(7268)) VARIANT_BOOL ICutExtrusion::GetCut ( );
__declspec(implementation_key(7269)) void ISheetMetalBody::PutThicknessDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(7270)) VARIANT_BOOL ISheetMetalBody::GetThicknessDirection ( );
__declspec(implementation_key(7271)) void ISheetMetalBody::PutThickness ( double PVal );
__declspec(implementation_key(7272)) double ISheetMetalBody::GetThickness ( );
__declspec(implementation_key(7273)) void ISheetMetalBody::PutStraighten ( VARIANT_BOOL PVal );
__declspec(implementation_key(7274)) VARIANT_BOOL ISheetMetalBody::GetStraighten ( );
__declspec(implementation_key(7275)) void ISheetMetalBody::PutRadius ( double PVal );
__declspec(implementation_key(7276)) double ISheetMetalBody::GetRadius ( );
__declspec(implementation_key(7277)) void ISheetMetalBody::PutUnfoldType ( enum ksUnfoldTypeEnum PVal );
__declspec(implementation_key(7278)) enum ksUnfoldTypeEnum ISheetMetalBody::GetUnfoldType ( );
__declspec(implementation_key(7279)) void ISheetMetalBody::PutBendCoefficient ( double PVal );
__declspec(implementation_key(7280)) double ISheetMetalBody::GetBendCoefficient ( );
__declspec(implementation_key(7281)) void ISheetMetalBody::PutBendValue ( double PVal );
__declspec(implementation_key(7282)) double ISheetMetalBody::GetBendValue ( );
__declspec(implementation_key(7283)) void ISheetMetalBody::PutBendReduction ( double PVal );
__declspec(implementation_key(7284)) double ISheetMetalBody::GetBendReduction ( );
__declspec(implementation_key(7285)) void ISheetMetalBody::PutBendTablePath ( _bstr_t PVal );
__declspec(implementation_key(7286)) _bstr_t ISheetMetalBody::GetBendTablePath ( );
__declspec(implementation_key(7287)) void ISheetMetalBody::PutSketch ( struct ISketch * Result );
__declspec(implementation_key(7288)) ISketchPtr ISheetMetalBody::GetSketch ( );
__declspec(implementation_key(7289)) void ISheetMetalBody::PutDirection ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(7290)) ksDirectionTypeEnum ISheetMetalBody::GetDirection ( );
__declspec(implementation_key(7291)) void ISheetMetalBody::PutExtrusionType ( VARIANT_BOOL Normal, ksEndTypeEnum PVal );
__declspec(implementation_key(7292)) ksEndTypeEnum ISheetMetalBody::GetExtrusionType ( VARIANT_BOOL Normal );
__declspec(implementation_key(7293)) void ISheetMetalBody::PutDepth ( VARIANT_BOOL Normal, double PVal );
__declspec(implementation_key(7294)) double ISheetMetalBody::GetDepth ( VARIANT_BOOL Normal );
__declspec(implementation_key(7295)) void ISheetMetalBody::PutDepthObject ( VARIANT_BOOL Normal, struct IModelObject * PVal );
__declspec(implementation_key(7296)) IModelObjectPtr ISheetMetalBody::GetDepthObject ( VARIANT_BOOL Normal );
__declspec(implementation_key(7297)) VARIANT_BOOL ISheetMetalBody::GetSideParameters ( VARIANT_BOOL Normal, ksEndTypeEnum * ExtrusionType, double * Depth, struct IModelObject * * DepthObject );
__declspec(implementation_key(7298)) VARIANT_BOOL ISheetMetalBody::SetSideParameters ( VARIANT_BOOL Normal, ksEndTypeEnum ExtrusionType, double Depth, struct IModelObject * DepthObject );
__declspec(implementation_key(7299)) ISheetMetalBodyPtr ISheetMetalBodies::GetSheetMetalBody ( const _variant_t & Index );
__declspec(implementation_key(7300)) ISheetMetalBodyPtr ISheetMetalBodies::Add ( );
__declspec(implementation_key(7301)) void ISheetMetalHole::PutX ( double PVal );
__declspec(implementation_key(7302)) double ISheetMetalHole::GetX ( );
__declspec(implementation_key(7303)) void ISheetMetalHole::PutY ( double PVal );
__declspec(implementation_key(7304)) double ISheetMetalHole::GetY ( );
__declspec(implementation_key(7305)) void ISheetMetalHole::PutCutType ( enum ksHoleCutTypeEnum PVal );
__declspec(implementation_key(7306)) enum ksHoleCutTypeEnum ISheetMetalHole::GetCutType ( );
__declspec(implementation_key(7307)) void ISheetMetalHole::PutDiameter ( double PVal );
__declspec(implementation_key(7308)) double ISheetMetalHole::GetDiameter ( );
__declspec(implementation_key(7309)) void ISheetMetalHole::PutDepth ( double PVal );
__declspec(implementation_key(7310)) double ISheetMetalHole::GetDepth ( );
__declspec(implementation_key(7311)) void ISheetMetalHole::PutBasePlane ( struct IModelObject * Result );
__declspec(implementation_key(7312)) IModelObjectPtr ISheetMetalHole::GetBasePlane ( );
__declspec(implementation_key(7313)) void ISheetMetalHole::PutDepthObject ( struct IModelObject * PVal );
__declspec(implementation_key(7314)) IModelObjectPtr ISheetMetalHole::GetDepthObject ( );
__declspec(implementation_key(7315)) ISketchPtr ISheetMetalHole::GetSketch ( );
__declspec(implementation_key(7316)) void ISheetMetalHole::PutBody ( struct IKompasAPIObject * PVal );
__declspec(implementation_key(7317)) IKompasAPIObjectPtr ISheetMetalHole::GetBody ( );
__declspec(implementation_key(7318)) IKompasAPIObjectPtr ISheetMetalHole::GetPoint3DParamSurface ( );
__declspec(implementation_key(7319)) IModelObjectPtr ISheetMetalHole::GetAssociationVertex ( );
__declspec(implementation_key(7320)) void ISheetMetalHole::PutAssociationVertex ( struct IModelObject * PVal );
__declspec(implementation_key(7321)) VARIANT_BOOL ISheetMetalHole::GetAxis ( );
__declspec(implementation_key(7322)) void ISheetMetalHole::PutAxis ( VARIANT_BOOL PVal );
__declspec(implementation_key(7323)) VARIANT_BOOL ISheetMetalHole::GetPerpendicularEdge ( );
__declspec(implementation_key(7324)) void ISheetMetalHole::PutPerpendicularEdge ( VARIANT_BOOL PVal );
__declspec(implementation_key(7325)) ISheetMetalHolePtr ISheetMetalHoles::GetSheetMetalHole ( const _variant_t & Index );
__declspec(implementation_key(7326)) ISheetMetalHolePtr ISheetMetalHoles::Add ( );
__declspec(implementation_key(7327)) void ISheetMetalCut::PutSketch ( struct ISketch * Result );
__declspec(implementation_key(7328)) ISketchPtr ISheetMetalCut::GetSketch ( );
__declspec(implementation_key(7329)) void ISheetMetalCut::PutCutType ( enum ksHoleCutTypeEnum PVal );
__declspec(implementation_key(7330)) enum ksHoleCutTypeEnum ISheetMetalCut::GetCutType ( );
__declspec(implementation_key(7331)) void ISheetMetalCut::PutDepth ( double PVal );
__declspec(implementation_key(7332)) double ISheetMetalCut::GetDepth ( );
__declspec(implementation_key(7333)) void ISheetMetalCut::PutDepthObject ( struct IModelObject * PVal );
__declspec(implementation_key(7334)) IModelObjectPtr ISheetMetalCut::GetDepthObject ( );
__declspec(implementation_key(7335)) void ISheetMetalCut::PutCut ( VARIANT_BOOL PVal );
__declspec(implementation_key(7336)) VARIANT_BOOL ISheetMetalCut::GetCut ( );
__declspec(implementation_key(7337)) void ISheetMetalCut::PutBody ( struct IKompasAPIObject * PVal );
__declspec(implementation_key(7338)) IKompasAPIObjectPtr ISheetMetalCut::GetBody ( );
__declspec(implementation_key(7339)) ISheetMetalCutPtr ISheetMetalCuts::GetSheetMetalCut ( const _variant_t & Index );
__declspec(implementation_key(7340)) ISheetMetalCutPtr ISheetMetalCuts::Add ( );
__declspec(implementation_key(7341)) ISheetMetalBodiesPtr ISheetMetalContainer::GetSheetMetalBodies ( );
__declspec(implementation_key(7342)) ISheetMetalBendsPtr ISheetMetalContainer::GetSheetMetalBends ( );
__declspec(implementation_key(7343)) ISheetMetalLineBendsPtr ISheetMetalContainer::GetSheetMetalLineBends ( );
__declspec(implementation_key(7344)) ISheetMetalHolesPtr ISheetMetalContainer::GetSheetMetalHoles ( );
__declspec(implementation_key(7345)) ISheetMetalCutsPtr ISheetMetalContainer::GetSheetMetalCuts ( );
__declspec(implementation_key(7346)) ISheetMetalSketchBendsPtr ISheetMetalContainer::GetSheetMetalSketchBends ( );
__declspec(implementation_key(7347)) ISheetMetalClosedCornersPtr ISheetMetalContainer::GetSheetMetalClosedCorners ( );
__declspec(implementation_key(7348)) ISheetMetalPlatesPtr ISheetMetalContainer::GetSheetMetalPlates ( );
__declspec(implementation_key(7349)) ISheetMetalLineBendsPtr ISheetMetalContainer::GetSheetMetalUndercuts ( );
__declspec(implementation_key(7350)) ISheetMetalBendedStraightensPtr ISheetMetalContainer::GetSheetMetalBendedStraightens ( );
__declspec(implementation_key(7351)) ISheetMetalBendUnfoldParametersPtr ISheetMetalContainer::GetSheetMetalBendUnfoldParameters ( );
__declspec(implementation_key(7352)) ISheetMetalPressFormingsPtr ISheetMetalContainer::GetSheetMetalPressFormings ( );
__declspec(implementation_key(7353)) ISheetMetalShouldersPtr ISheetMetalContainer::GetSheetMetalShoulders ( );
__declspec(implementation_key(7354)) ISheetMetalJalousiesPtr ISheetMetalContainer::GetSheetMetalJalousies ( );
__declspec(implementation_key(7355)) ISheetMetalRibsPtr ISheetMetalContainer::GetSheetMetalRibs ( );
__declspec(implementation_key(7356)) ISheetMetalBodiesPtr ISheetMetalContainer::GetSheetMetalRuledShells ( );
__declspec(implementation_key(7357)) ISheetMetalBodiesPtr ISheetMetalContainer::GetSheetMetalLinearRuledShells ( );
__declspec(implementation_key(7358)) ISheetMetalPunchsPtr ISheetMetalContainer::GetSheetMetalPunchs ( );
__declspec(implementation_key(7359)) ISheetMetalBendsPtr ISheetMetalContainer::GetSheetMetalFlangings ( );
__declspec(implementation_key(7360)) void ISplitLine::PutSketch ( struct ISketch * Result );
__declspec(implementation_key(7361)) ISketchPtr ISplitLine::GetSketch ( );
__declspec(implementation_key(7362)) _variant_t ISplitLine::GetFaces ( );
__declspec(implementation_key(7363)) void ISplitLine::PutFaces ( const _variant_t & PVal );
__declspec(implementation_key(7364)) void ISplitLine::PutDirection ( ksDirectionTypeEnum PVal );
__declspec(implementation_key(7365)) ksDirectionTypeEnum ISplitLine::GetDirection ( );
__declspec(implementation_key(7366)) void ISplitLine::PutCutObjects ( const _variant_t & Result );
__declspec(implementation_key(7367)) _variant_t ISplitLine::GetCutObjects ( );
__declspec(implementation_key(7368)) ISplitLinePtr ISplitLines::GetSplitLine ( const _variant_t & Index );
__declspec(implementation_key(7369)) ISplitLinePtr ISplitLines::Add ( );
__declspec(implementation_key(7370)) void ISpiral3D::PutTurnsCount ( double PVal );
__declspec(implementation_key(7371)) double ISpiral3D::GetTurnsCount ( );
__declspec(implementation_key(7372)) void ISpiral3D::PutStep ( double PVal );
__declspec(implementation_key(7373)) double ISpiral3D::GetStep ( );
__declspec(implementation_key(7374)) void ISpiral3D::PutTurnDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(7375)) VARIANT_BOOL ISpiral3D::GetTurnDirection ( );
__declspec(implementation_key(7376)) void ISpiral3D::PutBasePlane ( struct IModelObject * PVal );
__declspec(implementation_key(7377)) IModelObjectPtr ISpiral3D::GetBasePlane ( );
__declspec(implementation_key(7378)) VARIANT_BOOL ISpiral3D::GetBasePoint ( double * X, double * Y );
__declspec(implementation_key(7379)) VARIANT_BOOL ISpiral3D::SetBasePoint ( double X, double Y );
__declspec(implementation_key(7380)) void ISpiral3D::PutBuildingType ( enum ksSpline3DBuildingTypeEnum Result );
__declspec(implementation_key(7381)) enum ksSpline3DBuildingTypeEnum ISpiral3D::GetBuildingType ( );
__declspec(implementation_key(7382)) void ISpiral3D::PutBuildingDirection ( VARIANT_BOOL Result );
__declspec(implementation_key(7383)) VARIANT_BOOL ISpiral3D::GetBuildingDirection ( );
__declspec(implementation_key(7384)) void ISpiral3D::PutHeightType ( enum ksSpiral3DHeightTypeEnum PVal );
__declspec(implementation_key(7385)) enum ksSpiral3DHeightTypeEnum ISpiral3D::GetHeightType ( );
__declspec(implementation_key(7386)) void ISpiral3D::PutHeight ( double PVal );
__declspec(implementation_key(7387)) double ISpiral3D::GetHeight ( );
__declspec(implementation_key(7388)) void ISpiral3D::PutHeightBaseObject ( struct IModelObject * PVal );
__declspec(implementation_key(7389)) IModelObjectPtr ISpiral3D::GetHeightBaseObject ( );
__declspec(implementation_key(7390)) void ISpiral3D::PutHeightCorrection ( double PVal );
__declspec(implementation_key(7391)) double ISpiral3D::GetHeightCorrection ( );
__declspec(implementation_key(7392)) void ISpiral3D::PutTurningAngle ( double PVal );
__declspec(implementation_key(7393)) double ISpiral3D::GetTurningAngle ( );
__declspec(implementation_key(7394)) ISketchPtr ISpiral3D::GetSketch ( );
__declspec(implementation_key(7395)) ISpiral3DPtr ISpirals3D::GetSpiral3D ( const _variant_t & Index );
__declspec(implementation_key(7396)) ISpiral3DPtr ISpirals3D::Add ( ksObj3dTypeEnum Type );
__declspec(implementation_key(7397)) ILocalCoordinateSystemsPtr IAuxiliaryGeomContainer::GetLocalCoordinateSystems ( );
__declspec(implementation_key(7398)) ISplines3DPtr IAuxiliaryGeomContainer::GetSplines3D ( );
__declspec(implementation_key(7399)) IPolyLinesPtr IAuxiliaryGeomContainer::GetPolyLines ( );
__declspec(implementation_key(7400)) IControlPointsPtr IAuxiliaryGeomContainer::GetControlPoints ( );
__declspec(implementation_key(7401)) IConjunctivePointsPtr IAuxiliaryGeomContainer::GetConjunctivePoints ( );
__declspec(implementation_key(7402)) ISplitLinesPtr IAuxiliaryGeomContainer::GetSplitLines ( );
__declspec(implementation_key(7403)) ISurfacesIntersectionCurvesPtr IAuxiliaryGeomContainer::GetSurfacesIntersectionCurves ( );
__declspec(implementation_key(7404)) IEquidistants3DPtr IAuxiliaryGeomContainer::GetEquidistants3D ( );
__declspec(implementation_key(7405)) ITrimmedCurvesPtr IAuxiliaryGeomContainer::GetTrimmedCurves ( );
__declspec(implementation_key(7406)) IConnectCurvesPtr IAuxiliaryGeomContainer::GetConnectCurves ( );
__declspec(implementation_key(7407)) IFilletCurvesPtr IAuxiliaryGeomContainer::GetFilletCurves ( );
__declspec(implementation_key(7408)) IArcs3DPtr IAuxiliaryGeomContainer::GetArcs3D ( );
__declspec(implementation_key(7409)) ICurveOutLinesPtr IAuxiliaryGeomContainer::GetCurveOutLines ( );
__declspec(implementation_key(7410)) ICurveByLawsPtr IAuxiliaryGeomContainer::GetCurveByLaws ( );
__declspec(implementation_key(7411)) IIsoparametricCurvesPtr IAuxiliaryGeomContainer::GetIsoparametricCurves ( );
__declspec(implementation_key(7412)) IIsoparametricCurvesSetsPtr IAuxiliaryGeomContainer::GetIsoparametricCurvesSets ( );
__declspec(implementation_key(7413)) ISplinesOnSurfacesPtr IAuxiliaryGeomContainer::GetSplinesOnSurfaces ( );
__declspec(implementation_key(7414)) IProjectionCurvesPtr IAuxiliaryGeomContainer::GetProjectionCurves ( );
__declspec(implementation_key(7415)) ICurvesBy2ProjectionsesPtr IAuxiliaryGeomContainer::GetCurvesBy2Projectionses ( );
__declspec(implementation_key(7416)) IContours3DPtr IAuxiliaryGeomContainer::GetContours3D ( );
__declspec(implementation_key(7417)) ILineSegments3DPtr IAuxiliaryGeomContainer::GetLineSegments3D ( );
__declspec(implementation_key(7418)) IUnhistoredCurves3DPtr IAuxiliaryGeomContainer::GetUnhistoredCurves3D ( );
__declspec(implementation_key(7419)) ISpirals3DPtr IAuxiliaryGeomContainer::GetSpirals3D ( );
__declspec(implementation_key(7420)) IPointsArrsOnCurvesPtr IAuxiliaryGeomContainer::GetPointsArrsOnCurves ( );
__declspec(implementation_key(7421)) IPointsArrsOnSurfacesPtr IAuxiliaryGeomContainer::GetPointsArrsOnSurfaces ( );
__declspec(implementation_key(7422)) IPointsArrsFromFilesPtr IAuxiliaryGeomContainer::GetPointsArrsFromFiles ( );
__declspec(implementation_key(7423)) IAxes3DPtr IAuxiliaryGeomContainer::GetAxes3D ( );
__declspec(implementation_key(7424)) IPlanes3DPtr IAuxiliaryGeomContainer::GetPlanes3D ( );
__declspec(implementation_key(7425)) ISurfacePatchesPtr ISurfaceContainer::GetSurfacePatches ( );
__declspec(implementation_key(7426)) IFaceRemoversPtr ISurfaceContainer::GetFaceRemovers ( );
__declspec(implementation_key(7427)) ISurfaceSewersPtr ISurfaceContainer::GetSurfaceSewers ( );
__declspec(implementation_key(7428)) INurbsSurfacesPtr ISurfaceContainer::GetNurbsSurfaces ( );
__declspec(implementation_key(7429)) IRuledSurfacesPtr ISurfaceContainer::GetRuledSurfaces ( );
__declspec(implementation_key(7430)) IEquidistantSurfacesPtr ISurfaceContainer::GetEquidistantSurfaces ( );
__declspec(implementation_key(7431)) ITrimmedSurfacesPtr ISurfaceContainer::GetTrimmedSurfaces ( );
__declspec(implementation_key(7432)) IExtensionSurfacesPtr ISurfaceContainer::GetExtensionSurfaces ( );
__declspec(implementation_key(7433)) IExtrusionsPtr ISurfaceContainer::GetExtrusionSurfaces ( );
__declspec(implementation_key(7434)) IRotatedsPtr ISurfaceContainer::GetRotatedSurfaces ( );
__declspec(implementation_key(7435)) IMeshPointsSurfacesPtr ISurfaceContainer::GetMeshPointsSurfaces ( );
__declspec(implementation_key(7436)) ICloudPointsSurfacesPtr ISurfaceContainer::GetCloudPointsSurfaces ( );
__declspec(implementation_key(7437)) IImportedSurfacesPtr ISurfaceContainer::GetImportedSurfaces ( );
__declspec(implementation_key(7438)) ILoftsPtr ISurfaceContainer::GetLoftSurfaces ( );
__declspec(implementation_key(7439)) IEvolutionsPtr ISurfaceContainer::GetEvolutionSurfaces ( );
__declspec(implementation_key(7440)) INurbsSurfacesByCurvesMeshsPtr ISurfaceContainer::GetNurbsSurfacesByCurvesMeshs ( );
__declspec(implementation_key(7441)) IJointSurfacesPtr ISurfaceContainer::GetJointSurfaces ( );
__declspec(implementation_key(7442)) IRestoredSurfacesPtr ISurfaceContainer::GetRestoredSurfaces ( );
__declspec(implementation_key(7443)) IFaceMoversPtr ISurfaceContainer::GetFaceMovers ( );
__declspec(implementation_key(7444)) void IExtrusionSurface::PutClosedShell ( VARIANT_BOOL PVal );
__declspec(implementation_key(7445)) VARIANT_BOOL IExtrusionSurface::GetClosedShell ( );
__declspec(implementation_key(7446)) void IConicSpiral3D::PutDiameter1 ( double PVal );
__declspec(implementation_key(7447)) double IConicSpiral3D::GetDiameter1 ( );
__declspec(implementation_key(7448)) void IConicSpiral3D::PutDiameterType1 ( enum ksSpline3DDiameterTypeEnum PVal );
__declspec(implementation_key(7449)) enum ksSpline3DDiameterTypeEnum IConicSpiral3D::GetDiameterType1 ( );
__declspec(implementation_key(7450)) void IConicSpiral3D::PutDiameterBaseObject1 ( struct IModelObject * PVal );
__declspec(implementation_key(7451)) IModelObjectPtr IConicSpiral3D::GetDiameterBaseObject1 ( );
__declspec(implementation_key(7452)) void IConicSpiral3D::PutDiameter2 ( double PVal );
__declspec(implementation_key(7453)) double IConicSpiral3D::GetDiameter2 ( );
__declspec(implementation_key(7454)) void IConicSpiral3D::PutDiameterType2 ( enum ksSpline3DDiameterTypeEnum PVal );
__declspec(implementation_key(7455)) enum ksSpline3DDiameterTypeEnum IConicSpiral3D::GetDiameterType2 ( );
__declspec(implementation_key(7456)) void IConicSpiral3D::PutDiameterBaseObject2 ( struct IModelObject * PVal );
__declspec(implementation_key(7457)) IModelObjectPtr IConicSpiral3D::GetDiameterBaseObject2 ( );
__declspec(implementation_key(7458)) void IConicSpiral3D::PutGeneratrixTiltAngle ( double PVal );
__declspec(implementation_key(7459)) double IConicSpiral3D::GetGeneratrixTiltAngle ( );
__declspec(implementation_key(7460)) void IConicSpiral3D::PutGeneratrixTiltAngleHow ( VARIANT_BOOL PVal );
__declspec(implementation_key(7461)) VARIANT_BOOL IConicSpiral3D::GetGeneratrixTiltAngleHow ( );
__declspec(implementation_key(7462)) void IConicSpiral3D::PutHeightCorrectionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(7463)) VARIANT_BOOL IConicSpiral3D::GetHeightCorrectionType ( );
__declspec(implementation_key(7464)) void ICylindricSpiral3D::PutDiameter ( double PVal );
__declspec(implementation_key(7465)) double ICylindricSpiral3D::GetDiameter ( );
__declspec(implementation_key(7466)) void ICylindricSpiral3D::PutDiameterType ( enum ksSpline3DDiameterTypeEnum PVal );
__declspec(implementation_key(7467)) enum ksSpline3DDiameterTypeEnum ICylindricSpiral3D::GetDiameterType ( );
__declspec(implementation_key(7468)) void ICylindricSpiral3D::PutDiameterBaseObject ( struct IModelObject * PVal );
__declspec(implementation_key(7469)) IModelObjectPtr ICylindricSpiral3D::GetDiameterBaseObject ( );
__declspec(implementation_key(7470)) void ICylindricSpiral3D::PutHeightCorrectionType ( VARIANT_BOOL PVal );
__declspec(implementation_key(7471)) VARIANT_BOOL ICylindricSpiral3D::GetHeightCorrectionType ( );
__declspec(implementation_key(7472)) VARIANT_BOOL IInsertionObject::GetPlacement ( double * X, double * Y, double * Angle, VARIANT_BOOL * MirrorSymmetry );
__declspec(implementation_key(7473)) VARIANT_BOOL IInsertionObject::SetPlacement ( double X, double Y, double Angle, VARIANT_BOOL MirrorSymmetry );
__declspec(implementation_key(7474)) void IInsertionObject::PutName ( _bstr_t PVal );
__declspec(implementation_key(7475)) _bstr_t IInsertionObject::GetName ( );
__declspec(implementation_key(7476)) _bstr_t IInsertionObject::GetFileName ( );
__declspec(implementation_key(7477)) enum ksInsertionTypeEnum IInsertionObject::GetInsertionType ( );
__declspec(implementation_key(7478)) void IInsertionObject::PutDimensionLineScale ( VARIANT_BOOL PVal );
__declspec(implementation_key(7479)) VARIANT_BOOL IInsertionObject::GetDimensionLineScale ( );
__declspec(implementation_key(7480)) IInsertionDefinitionPtr IInsertionObject::GetInsertionDefinition ( );
__declspec(implementation_key(7481)) void IInsertionObject::PutInsertionDefinition ( struct IInsertionDefinition * PVal );
__declspec(implementation_key(7482)) IInsertionObjectPtr IInsertionObjects::GetInsertionObject ( const _variant_t & Index );
__declspec(implementation_key(7483)) IInsertionObjectPtr IInsertionObjects::Add ( struct IInsertionDefinition * Definition );
__declspec(implementation_key(7484)) _variant_t IDrawingContainer::GetObjects ( const _variant_t & ObjType );
__declspec(implementation_key(7485)) IDrawingTextsPtr IDrawingContainer::GetDrawingTexts ( );
__declspec(implementation_key(7486)) ILineSegmentsPtr IDrawingContainer::GetLineSegments ( );
__declspec(implementation_key(7487)) IArcsPtr IDrawingContainer::GetArcs ( );
__declspec(implementation_key(7488)) IMultilinesPtr IDrawingContainer::GetMultilines ( );
__declspec(implementation_key(7489)) IDrawingContoursPtr IDrawingContainer::GetDrawingContours ( );
__declspec(implementation_key(7490)) ICirclesPtr IDrawingContainer::GetCircles ( );
__declspec(implementation_key(7491)) IPointsPtr IDrawingContainer::GetPoints ( );
__declspec(implementation_key(7492)) IBeziersPtr IDrawingContainer::GetBeziers ( );
__declspec(implementation_key(7493)) IMacroObjectsPtr IDrawingContainer::GetMacroObjects ( );
__declspec(implementation_key(7494)) ILinesPtr IDrawingContainer::GetLines ( );
__declspec(implementation_key(7495)) IPolyLines2DPtr IDrawingContainer::GetPolyLines2D ( );
__declspec(implementation_key(7496)) INurbsesPtr IDrawingContainer::GetNurbses ( );
__declspec(implementation_key(7497)) IRastersPtr IDrawingContainer::GetRasters ( );
__declspec(implementation_key(7498)) IOleDrawingObjectsPtr IDrawingContainer::GetOleDrawingObjects ( );
__declspec(implementation_key(7499)) IEllipsesPtr IDrawingContainer::GetEllipses ( );
__declspec(implementation_key(7500)) IEllipseArcsPtr IDrawingContainer::GetEllipseArcs ( );
__declspec(implementation_key(7501)) IRectanglesPtr IDrawingContainer::GetRectangles ( );
__declspec(implementation_key(7502)) IRegularPolygonsPtr IDrawingContainer::GetRegularPolygons ( );
__declspec(implementation_key(7503)) IEquidistantsPtr IDrawingContainer::GetEquidistants ( );
__declspec(implementation_key(7504)) IInsertionObjectsPtr IDrawingContainer::GetInsertionObjects ( );
__declspec(implementation_key(7505)) IHatchesPtr IDrawingContainer::GetHatches ( );
__declspec(implementation_key(7506)) IColouringsPtr IDrawingContainer::GetColourings ( );
__declspec(implementation_key(7507)) INurbsesPtr IDrawingContainer::GetNurbsesByPoints ( );
__declspec(implementation_key(7508)) IConicCurvesPtr IDrawingContainer::GetConicCurves ( );
__declspec(implementation_key(7509)) void IInsertionFragment::PutScale ( double PVal );
__declspec(implementation_key(7510)) double IInsertionFragment::GetScale ( );
__declspec(implementation_key(7511)) void IInsertionFragment::PutMultiLayer ( VARIANT_BOOL PVal );
__declspec(implementation_key(7512)) VARIANT_BOOL IInsertionFragment::GetMultiLayer ( );
__declspec(implementation_key(7513)) _variant_t IInsertionFragment::GetVariables ( );
__declspec(implementation_key(7514)) IVariable7Ptr IInsertionFragment::GetVariable ( const _variant_t & Index );
__declspec(implementation_key(7515)) long IInsertionFragment::GetVariablesCount ( );
__declspec(implementation_key(7516)) IVariableTablePtr IInsertionFragment::GetVariableTable ( );
__declspec(implementation_key(7517)) void IInsertionFragment::PutCreateSpcObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(7518)) VARIANT_BOOL IInsertionFragment::GetCreateSpcObjects ( );
__declspec(implementation_key(7519)) void IInsertionFragment::PutBreakObjectsEnabled ( VARIANT_BOOL PVal );
__declspec(implementation_key(7520)) VARIANT_BOOL IInsertionFragment::GetBreakObjectsEnabled ( );
__declspec(implementation_key(7521)) _bstr_t IInsertionFragment::GetLabel ( );
__declspec(implementation_key(7522)) void IInsertionView::PutViewNumber ( long PVal );
__declspec(implementation_key(7523)) long IInsertionView::GetViewNumber ( );
__declspec(implementation_key(7524)) _bstr_t IInsertionView::GetViewName ( );
__declspec(implementation_key(7525)) void IInsertionView::PutThinLines ( VARIANT_BOOL PVal );
__declspec(implementation_key(7526)) VARIANT_BOOL IInsertionView::GetThinLines ( );
__declspec(implementation_key(7527)) void IInsertionView::PutOwnerDocumentParams ( VARIANT_BOOL PVal );
__declspec(implementation_key(7528)) VARIANT_BOOL IInsertionView::GetOwnerDocumentParams ( );
__declspec(implementation_key(7529)) void IInsertionView::PutCreateSpcObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(7530)) VARIANT_BOOL IInsertionView::GetCreateSpcObjects ( );
__declspec(implementation_key(7531)) _bstr_t IInsertionView::GetLabel ( );
__declspec(implementation_key(7532)) _variant_t IInsertionsManager::GetInsertionDefinitions ( enum ksInsertionTypeEnum Type );
__declspec(implementation_key(7533)) IInsertionDefinitionPtr IInsertionsManager::GetInsertionDefinition ( enum ksInsertionTypeEnum Type, const _variant_t & Index );
__declspec(implementation_key(7534)) IInsertionDefinitionPtr IInsertionsManager::AddDefinition ( enum ksInsertionTypeEnum Type, _bstr_t Name, _bstr_t FileName );
__declspec(implementation_key(7535)) long IInsertionsManager::GetDefinitionsCount ( enum ksInsertionTypeEnum Type );
__declspec(implementation_key(7536)) void ISheetMetalLinearRuledShell::PutSketch2 ( struct ISketch * Result );
__declspec(implementation_key(7537)) ISketchPtr ISheetMetalLinearRuledShell::GetSketch2 ( );
__declspec(implementation_key(7538)) VARIANT_BOOL ISheetMetalLinearRuledShell::GetUseCommonSegmentationParameters ( );
__declspec(implementation_key(7539)) void ISheetMetalLinearRuledShell::PutUseCommonSegmentationParameters ( VARIANT_BOOL PVal );
__declspec(implementation_key(7540)) long ISheetMetalLinearRuledShell::GetCurvesCount ( );
__declspec(implementation_key(7541)) void ISheetMetalLinearRuledShell::PutCurveUseSegmentation ( long CurveIndex, VARIANT_BOOL PVal );
__declspec(implementation_key(7542)) VARIANT_BOOL ISheetMetalLinearRuledShell::GetCurveUseSegmentation ( long CurveIndex );
__declspec(implementation_key(7543)) void ISheetMetalLinearRuledShell::PutCurveSegmentationMethod ( long CurveIndex, enum ksSegmentationMethodEnum PVal );
__declspec(implementation_key(7544)) enum ksSegmentationMethodEnum ISheetMetalLinearRuledShell::GetCurveSegmentationMethod ( long CurveIndex );
__declspec(implementation_key(7545)) void ISheetMetalLinearRuledShell::PutCurveSegmentationSplitValue ( long CurveIndex, double PVal );
__declspec(implementation_key(7546)) double ISheetMetalLinearRuledShell::GetCurveSegmentationSplitValue ( long CurveIndex );
__declspec(implementation_key(7547)) void ISheetMetalLinearRuledShell::PutAutoSegmentation ( VARIANT_BOOL PVal );
__declspec(implementation_key(7548)) VARIANT_BOOL ISheetMetalLinearRuledShell::GetAutoSegmentation ( );
__declspec(implementation_key(7549)) VARIANT_BOOL ISheetMetalLinearRuledShell::AddNewEdge ( long IndexAt );
__declspec(implementation_key(7550)) VARIANT_BOOL ISheetMetalLinearRuledShell::DeleteEdge ( long Index );
__declspec(implementation_key(7551)) long ISheetMetalLinearRuledShell::GetEdgesCount ( );
__declspec(implementation_key(7552)) VARIANT_BOOL ISheetMetalLinearRuledShell::SetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double X, double Y, double Z, double * T, struct IModelObject * AssociateVertex );
__declspec(implementation_key(7553)) VARIANT_BOOL ISheetMetalLinearRuledShell::GetEdgePointParam ( long EdgeIndex, VARIANT_BOOL StartPoint, double * X, double * Y, double * Z, double * T, struct IModelObject * * AssociateVertex );
__declspec(implementation_key(7554)) VARIANT_BOOL ISheetMetalLinearRuledShell::GetEdgePointParams ( VARIANT * Points1, VARIANT * T1, VARIANT * AssociateVertexes1, VARIANT * Points2, VARIANT * T2, VARIANT * AssociateVertexes2 );
__declspec(implementation_key(7555)) IViewsPtr IViewsAndLayersManager::GetViews ( );
__declspec(implementation_key(7556)) ILayerGroupsPtr IViewsAndLayersManager::GetLayerGroups ( );
__declspec(implementation_key(7557)) ILayerGroupPtr ILayerGroups::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7558)) ILayerGroupPtr ILayerGroups::Add ( struct IView * Owner, VARIANT_BOOL Dinamic );
__declspec(implementation_key(7559)) VARIANT_BOOL ILayerGroups::Attach ( struct ILayerGroup * PGroup );
__declspec(implementation_key(7560)) VARIANT_BOOL ILayerGroups::Detach ( struct ILayerGroup * PGroup );
__declspec(implementation_key(7561)) ILayerGroupPtr ILayerGroup::GetOwnerGroup ( );
__declspec(implementation_key(7562)) ILayerGroupsPtr ILayerGroup::GetLayerGroups ( );
__declspec(implementation_key(7563)) ILayersPtr ILayerGroup::GetLayers ( );
__declspec(implementation_key(7564)) void ILayerGroup::PutName ( _bstr_t PVal );
__declspec(implementation_key(7565)) _bstr_t ILayerGroup::GetName ( );
__declspec(implementation_key(7566)) ILayerFilterConditionsPtr ILayerGroup::GetLayerFilterConditions ( );
__declspec(implementation_key(7567)) VARIANT_BOOL ILayerGroup::GetLayerStates ( const _variant_t & LayerIndex, VARIANT_BOOL * Visible, VARIANT_BOOL * Background, VARIANT_BOOL * Curent, long * Color );
__declspec(implementation_key(7568)) VARIANT_BOOL ILayerGroup::SetLayerStates ( const _variant_t & LayerIndex, VARIANT_BOOL Visible, VARIANT_BOOL Background, VARIANT_BOOL Curent, long Color );
__declspec(implementation_key(7569)) void ILayerGroup::PutCurrent ( VARIANT_BOOL PVal );
__declspec(implementation_key(7570)) VARIANT_BOOL ILayerGroup::GetCurrent ( );
__declspec(implementation_key(7571)) VARIANT_BOOL ILayerGroup::Delete ( );
__declspec(implementation_key(7572)) IViewPtr ILayerGroup::GetOwnerView ( );
__declspec(implementation_key(7573)) void ILayerGroup::PutOwnerView ( struct IView * PVal );
__declspec(implementation_key(7574)) double ILayerGroup::GetUniqueId ( );
__declspec(implementation_key(7575)) IPart7Ptr IKompasDocument3D::GetTopPart ( );
__declspec(implementation_key(7576)) void IKompasDocument3D::PutHideAllPlanes ( VARIANT_BOOL PVal );
__declspec(implementation_key(7577)) VARIANT_BOOL IKompasDocument3D::GetHideAllPlanes ( );
__declspec(implementation_key(7578)) void IKompasDocument3D::PutHideAllAxis ( VARIANT_BOOL PVal );
__declspec(implementation_key(7579)) VARIANT_BOOL IKompasDocument3D::GetHideAllAxis ( );
__declspec(implementation_key(7580)) void IKompasDocument3D::PutHideAllSketches ( VARIANT_BOOL PVal );
__declspec(implementation_key(7581)) VARIANT_BOOL IKompasDocument3D::GetHideAllSketches ( );
__declspec(implementation_key(7582)) void IKompasDocument3D::PutHideAllPlaces ( VARIANT_BOOL PVal );
__declspec(implementation_key(7583)) VARIANT_BOOL IKompasDocument3D::GetHideAllPlaces ( );
__declspec(implementation_key(7584)) void IKompasDocument3D::PutHideAllSurfaces ( VARIANT_BOOL PVal );
__declspec(implementation_key(7585)) VARIANT_BOOL IKompasDocument3D::GetHideAllSurfaces ( );
__declspec(implementation_key(7586)) void IKompasDocument3D::PutHideAllThreads ( VARIANT_BOOL PVal );
__declspec(implementation_key(7587)) VARIANT_BOOL IKompasDocument3D::GetHideAllThreads ( );
__declspec(implementation_key(7588)) void IKompasDocument3D::PutHideAllCurves ( VARIANT_BOOL PVal );
__declspec(implementation_key(7589)) VARIANT_BOOL IKompasDocument3D::GetHideAllCurves ( );
__declspec(implementation_key(7590)) void IKompasDocument3D::PutHideAllControlPoints ( VARIANT_BOOL PVal );
__declspec(implementation_key(7591)) VARIANT_BOOL IKompasDocument3D::GetHideAllControlPoints ( );
__declspec(implementation_key(7592)) void IKompasDocument3D::PutPerspective ( VARIANT_BOOL PVal );
__declspec(implementation_key(7593)) VARIANT_BOOL IKompasDocument3D::GetPerspective ( );
__declspec(implementation_key(7594)) void IKompasDocument3D::PutDrawMode ( long PVal );
__declspec(implementation_key(7595)) long IKompasDocument3D::GetDrawMode ( );
__declspec(implementation_key(7596)) void IKompasDocument3D::PutShadedWireframe ( VARIANT_BOOL PVal );
__declspec(implementation_key(7597)) VARIANT_BOOL IKompasDocument3D::GetShadedWireframe ( );
__declspec(implementation_key(7598)) void IKompasDocument3D::PutCreateObjectsInCurrentLocalCS ( VARIANT_BOOL PVal );
__declspec(implementation_key(7599)) VARIANT_BOOL IKompasDocument3D::GetCreateObjectsInCurrentLocalCS ( );
__declspec(implementation_key(7600)) void IKompasDocument3D::PutHideAllDimensions ( VARIANT_BOOL PVal );
__declspec(implementation_key(7601)) VARIANT_BOOL IKompasDocument3D::GetHideAllDimensions ( );
__declspec(implementation_key(7602)) void IKompasDocument3D::PutHideAllDesignations ( VARIANT_BOOL PVal );
__declspec(implementation_key(7603)) VARIANT_BOOL IKompasDocument3D::GetHideAllDesignations ( );
__declspec(implementation_key(7604)) void IKompasDocument3D::PutHideAllAuxiliaryGeom ( VARIANT_BOOL PVal );
__declspec(implementation_key(7605)) VARIANT_BOOL IKompasDocument3D::GetHideAllAuxiliaryGeom ( );
__declspec(implementation_key(7606)) void IKompasDocument3D::PutHideInComponentsMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(7607)) VARIANT_BOOL IKompasDocument3D::GetHideInComponentsMode ( );
__declspec(implementation_key(7608)) ISelectionManagerPtr IKompasDocument3D::GetSelectionManager ( );
__declspec(implementation_key(7609)) IChooseManagerPtr IKompasDocument3D::GetChooseManager ( );
__declspec(implementation_key(7610)) IAttributePtr IKompasDocument3D::CreateAttrEx ( double AttrID, _bstr_t Libname, const _variant_t & Objects, struct IPart7 * SourcePart );
__declspec(implementation_key(7611)) _variant_t IKompasDocument3D::GetAttributesEx ( long Key1, long Key2, long Key3, long Key4, double Numb, const _variant_t & Objects, struct IPart7 * SourcePart );
__declspec(implementation_key(7612)) VARIANT_BOOL IKompasDocument3D::RebuildDocument ( );
__declspec(implementation_key(7613)) void IKompasDocument3D::PutEnableUndo ( VARIANT_BOOL PVal );
__declspec(implementation_key(7614)) VARIANT_BOOL IKompasDocument3D::GetEnableUndo ( );
__declspec(implementation_key(7615)) void IKompasDocument3D::PutUndoContainer ( VARIANT_BOOL PVal );
__declspec(implementation_key(7616)) VARIANT_BOOL IKompasDocument3D::GetUndoContainer ( );
__declspec(implementation_key(7617)) VARIANT_BOOL IKompasDocument3D::DeleteHistory ( );
__declspec(implementation_key(7618)) ITechnicalDemand3DPtr IKompasDocument3D::GetTechnicalDemand3D ( );
__declspec(implementation_key(7619)) void IKompasDocument3D::PutToleranceMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(7620)) VARIANT_BOOL IKompasDocument3D::GetToleranceMode ( );
__declspec(implementation_key(7621)) void IAssemblyDocument::PutDismantleMode ( VARIANT_BOOL PVal );
__declspec(implementation_key(7622)) VARIANT_BOOL IAssemblyDocument::GetDismantleMode ( );
__declspec(implementation_key(7623)) _bstr_t IAssociationView::GetSourceFileName ( );
__declspec(implementation_key(7624)) void IAssociationView::PutSourceFileName ( _bstr_t Result );
__declspec(implementation_key(7625)) _bstr_t IAssociationView::GetProjectionName ( );
__declspec(implementation_key(7626)) void IAssociationView::PutProjectionName ( _bstr_t Result );
__declspec(implementation_key(7627)) VARIANT_BOOL IAssociationView::GetExplodedView ( );
__declspec(implementation_key(7628)) void IAssociationView::PutExplodedView ( VARIANT_BOOL Result );
__declspec(implementation_key(7629)) void IAssociationView::PutDimensionLayoutScaling ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7630)) VARIANT_BOOL IAssociationView::GetProjectionLink ( );
__declspec(implementation_key(7631)) void IAssociationView::PutProjectionLink ( VARIANT_BOOL Result );
__declspec(implementation_key(7632)) VARIANT_BOOL IAssociationView::GetSection ( );
__declspec(implementation_key(7633)) void IAssociationView::PutSection ( VARIANT_BOOL Result );
__declspec(implementation_key(7634)) VARIANT_BOOL IAssociationView::GetUnfold ( );
__declspec(implementation_key(7635)) void IAssociationView::PutUnfold ( VARIANT_BOOL Result );
__declspec(implementation_key(7636)) long IAssociationView::GetVisibleLinesStyle ( );
__declspec(implementation_key(7637)) void IAssociationView::PutVisibleLinesStyle ( long Result );
__declspec(implementation_key(7638)) VARIANT_BOOL IAssociationView::GetHiddenLines ( );
__declspec(implementation_key(7639)) void IAssociationView::PutHiddenLines ( VARIANT_BOOL Result );
__declspec(implementation_key(7640)) VARIANT_BOOL IAssociationView::GetHiddenLinesVisible ( );
__declspec(implementation_key(7641)) void IAssociationView::PutHiddenLinesVisible ( VARIANT_BOOL Result );
__declspec(implementation_key(7642)) long IAssociationView::GetHiddenLinesStyle ( );
__declspec(implementation_key(7643)) void IAssociationView::PutHiddenLinesStyle ( long Result );
__declspec(implementation_key(7644)) VARIANT_BOOL IAssociationView::GetBreakLinesVisible ( );
__declspec(implementation_key(7645)) void IAssociationView::PutBreakLinesVisible ( VARIANT_BOOL Result );
__declspec(implementation_key(7646)) long IAssociationView::GetBreakLinesStyle ( );
__declspec(implementation_key(7647)) void IAssociationView::PutBreakLinesStyle ( long Result );
__declspec(implementation_key(7648)) VARIANT_BOOL IAssociationView::GetBendLinesVisible ( );
__declspec(implementation_key(7649)) void IAssociationView::PutBendLinesVisible ( VARIANT_BOOL Result );
__declspec(implementation_key(7650)) long IAssociationView::GetBendLinesStyle ( );
__declspec(implementation_key(7651)) void IAssociationView::PutBendLinesStyle ( long Result );
__declspec(implementation_key(7652)) IViewPtr IAssociationView::GetBaseView ( );
__declspec(implementation_key(7653)) void IAssociationView::PutBaseView ( struct IView * Result );
__declspec(implementation_key(7654)) IDrawingObjectPtr IAssociationView::GetBaseObject ( );
__declspec(implementation_key(7655)) void IAssociationView::PutBaseObject ( struct IDrawingObject * Result );
__declspec(implementation_key(7656)) VARIANT_BOOL IAssociationView::GetLocal ( );
__declspec(implementation_key(7657)) void IAssociationView::PutLocal ( VARIANT_BOOL Result );
__declspec(implementation_key(7658)) VARIANT_BOOL IAssociationView::CreateLocalView ( struct IDrawingObject * Contour );
__declspec(implementation_key(7659)) VARIANT_BOOL IAssociationView::GetSameHatch ( );
__declspec(implementation_key(7660)) void IAssociationView::PutSameHatch ( VARIANT_BOOL Result );
__declspec(implementation_key(7661)) _variant_t IAssociationView::GetProjectionMatrix ( );
__declspec(implementation_key(7662)) void IAssociationView::PutProjectionMatrix ( const _variant_t & Result );
__declspec(implementation_key(7663)) VARIANT_BOOL IAssociationView::GetCenterLinesVisible ( );
__declspec(implementation_key(7664)) void IAssociationView::PutCenterLinesVisible ( VARIANT_BOOL Result );
__declspec(implementation_key(7665)) VARIANT_BOOL IAssociationView::GetUseOcclusion ( );
__declspec(implementation_key(7666)) void IAssociationView::PutUseOcclusion ( VARIANT_BOOL Result );
__declspec(implementation_key(7667)) _variant_t IAssociationView::GetAssociationObjects ( struct IKompasAPIObject * ModelObject );
__declspec(implementation_key(7668)) VARIANT_BOOL IAssociationView::GetIsAssociationObjectsVisible ( struct IKompasAPIObject * ModelObject );
__declspec(implementation_key(7669)) _variant_t IAssociationView::FindFaceEdges ( double X, double Y );
__declspec(implementation_key(7670)) IModelObjectPtr IAssociationView::FindFace ( double X, double Y, struct IKompasDocument3D * Document3D );
__declspec(implementation_key(7671)) void ICopyGeometry::PutInitialObjects ( const _variant_t & Objects );
__declspec(implementation_key(7672)) _variant_t ICopyGeometry::GetInitialObjects ( );
__declspec(implementation_key(7673)) VARIANT_BOOL ICopyGeometry::Destroy ( );
__declspec(implementation_key(7674)) VARIANT_BOOL ICopyGeometry::IsInitialObject ( struct IModelObject * Object );
__declspec(implementation_key(7675)) VARIANT_BOOL ICopyGeometry::AddInitialObjects ( const _variant_t & Objects );
__declspec(implementation_key(7676)) VARIANT_BOOL ICopyGeometry::AddInitialObjectsFromExternalDocument ( struct IKompasDocument3D * ExternalDocument, struct ILocalCoordinateSystem * ExternalLocalCS, const _variant_t & Objects );
__declspec(implementation_key(7677)) VARIANT_BOOL ICopyGeometry::Clear ( );
__declspec(implementation_key(7678)) VARIANT_BOOL ICopyGeometry::IsSuitableObject ( struct IModelObject * Object );
__declspec(implementation_key(7679)) VARIANT_BOOL ICopyGeometry::GetContextObjects ( );
__declspec(implementation_key(7680)) void ICopyGeometry::PutContextObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(7681)) _bstr_t ICopyGeometry::GetDocumentFileName ( );
__declspec(implementation_key(7682)) IKompasDocument3DPtr ICopyGeometry::OpenDocument ( VARIANT_BOOL Visible, VARIANT_BOOL ReadOnly );
__declspec(implementation_key(7683)) ILocalCoordinateSystemPtr ICopyGeometry::GetLocalCS ( );
__declspec(implementation_key(7684)) void ICopyGeometry::PutLocalCS ( struct ILocalCoordinateSystem * PVal );
__declspec(implementation_key(7685)) ILocalCoordinateSystemPtr ICopyGeometry::GetExternalLocalCS ( );
__declspec(implementation_key(7686)) void ICopyGeometry::PutExternalLocalCS ( struct ILocalCoordinateSystem * PVal );
__declspec(implementation_key(7687)) VARIANT_BOOL ICopyGeometry::GetByCollectionGeometry ( );
__declspec(implementation_key(7688)) void ICopyGeometry::PutByCollectionGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(7689)) ICollectionGeometryPtr ICopyGeometry::GetCollectionGeometry ( );
__declspec(implementation_key(7690)) void ICopyGeometry::PutCollectionGeometry ( struct ICollectionGeometry * PVal );
__declspec(implementation_key(7691)) VARIANT_BOOL ICopyGeometry::GetMirrorCopy ( );
__declspec(implementation_key(7692)) void ICopyGeometry::PutMirrorCopy ( VARIANT_BOOL PVal );
__declspec(implementation_key(7693)) enum ksCopyGeometryBuildingTypeEnum ICopyGeometry::GetBuildingType ( );
__declspec(implementation_key(7694)) void ICopyGeometry::PutBuildingType ( enum ksCopyGeometryBuildingTypeEnum PVal );
__declspec(implementation_key(7695)) VARIANT_BOOL ICopyGeometry::GetAutoUpdate ( );
__declspec(implementation_key(7696)) void ICopyGeometry::PutAutoUpdate ( VARIANT_BOOL PVal );
__declspec(implementation_key(7697)) VARIANT_BOOL ICopyGeometry::GetWatchForSourceChange ( );
__declspec(implementation_key(7698)) void ICopyGeometry::PutWatchForSourceChange ( VARIANT_BOOL PVal );
__declspec(implementation_key(7699)) VARIANT_BOOL ICopyGeometry::Synhronise ( );
__declspec(implementation_key(7700)) ICopyGeometryPtr ICopiesGeometry::GetCopyGeometry ( const _variant_t & Index );
__declspec(implementation_key(7701)) ICopyGeometryPtr ICopiesGeometry::Add ( );
__declspec(implementation_key(7702)) _variant_t IModelContainer::GetObjects ( const _variant_t & ObjType );
__declspec(implementation_key(7703)) ISketchsPtr IModelContainer::GetSketchs ( );
__declspec(implementation_key(7704)) IExtrusionsPtr IModelContainer::GetExtrusions ( );
__declspec(implementation_key(7705)) IPoints3DPtr IModelContainer::GetPoints3D ( );
__declspec(implementation_key(7706)) IFeaturePatternsPtr IModelContainer::GetFeaturePatterns ( );
__declspec(implementation_key(7707)) ISurfaceThickeningsPtr IModelContainer::GetSurfaceThickenings ( );
__declspec(implementation_key(7708)) IRotatedsPtr IModelContainer::GetRotateds ( );
__declspec(implementation_key(7709)) IScalings3DPtr IModelContainer::GetScalings3D ( );
__declspec(implementation_key(7710)) IBilletsObsoletesPtr IModelContainer::GetBilletsObsoletes ( );
__declspec(implementation_key(7711)) ICopiesGeometryPtr IModelContainer::GetCopiesGeometry ( );
__declspec(implementation_key(7712)) ICollectionsGeometryPtr IModelContainer::GetCollectionsGeometry ( );
__declspec(implementation_key(7713)) IUserObjects3DPtr IModelContainer::GetUserObjects ( );
__declspec(implementation_key(7714)) IHoles3DPtr IModelContainer::GetHoles3D ( );
__declspec(implementation_key(7715)) IChamfersPtr IModelContainer::GetChamfers ( );
__declspec(implementation_key(7716)) IFilletsPtr IModelContainer::GetFillets ( );
__declspec(implementation_key(7717)) IInclinesPtr IModelContainer::GetInclines ( );
__declspec(implementation_key(7718)) IRibsPtr IModelContainer::GetRibs ( );
__declspec(implementation_key(7719)) IShellsPtr IModelContainer::GetShells ( );
__declspec(implementation_key(7720)) IBooleansPtr IModelContainer::GetBooleans ( );
__declspec(implementation_key(7721)) ICutsPtr IModelContainer::GetCuts ( );
__declspec(implementation_key(7722)) ILoftsPtr IModelContainer::GetLofts ( );
__declspec(implementation_key(7723)) IEvolutionsPtr IModelContainer::GetEvolutions ( );
__declspec(implementation_key(7724)) IUnionsComponentsPtr IModelContainer::GetUnionsComponents ( );
__declspec(implementation_key(7725)) IMoldCavitiesPtr IModelContainer::GetMoldCavities ( );
__declspec(implementation_key(7726)) IMacroObjects3DPtr IModelContainer::GetMacroObjects3D ( );
__declspec(implementation_key(7727)) IBodyRepositionsPtr IModelContainer::GetBodyRepositions ( );
__declspec(implementation_key(7728)) IModelObjectPtr IModelContainer::AddObject ( ksObj3dTypeEnum ObjectType );
__declspec(implementation_key(7729)) IFullFilletsPtr IModelContainer::GetFullFillets ( );
__declspec(implementation_key(7730)) IWireFrames3DPtr IModelContainer::GetWireFrames3D ( );
__declspec(implementation_key(7731)) ISplitSolidsPtr IModelContainer::GetSplitSolids ( );
__declspec(implementation_key(7732)) _bstr_t IPart7::GetMarking ( );
__declspec(implementation_key(7733)) void IPart7::PutMarking ( _bstr_t PVal );
__declspec(implementation_key(7734)) _bstr_t IPart7::GetFileName ( );
__declspec(implementation_key(7735)) void IPart7::PutFileName ( _bstr_t PVal );
__declspec(implementation_key(7736)) void IPart7::PutStandard ( VARIANT_BOOL PVal );
__declspec(implementation_key(7737)) VARIANT_BOOL IPart7::GetStandard ( );
__declspec(implementation_key(7738)) void IPart7::PutFixed ( VARIANT_BOOL PVal );
__declspec(implementation_key(7739)) VARIANT_BOOL IPart7::GetFixed ( );
__declspec(implementation_key(7740)) VARIANT_BOOL IPart7::GetDetail ( );
__declspec(implementation_key(7741)) double IPart7::GetMass ( );
__declspec(implementation_key(7742)) double IPart7::GetDensity ( );
__declspec(implementation_key(7743)) _bstr_t IPart7::GetMaterial ( );
__declspec(implementation_key(7744)) VARIANT_BOOL IPart7::SetMaterial ( _bstr_t Name, double Density );
__declspec(implementation_key(7745)) IParts7Ptr IPart7::GetParts ( );
__declspec(implementation_key(7746)) IVariableTablePtr IPart7::GetVariableTable ( );
__declspec(implementation_key(7747)) _variant_t IPart7::GetPartsEx ( const _variant_t & PartCollectionType );
__declspec(implementation_key(7748)) long IPart7::GetInstanceCount ( struct IPart7 * Part );
__declspec(implementation_key(7749)) _variant_t IPart7::SelectByPoint ( const _variant_t & Objects, double X, double Y, double Z );
__declspec(implementation_key(7750)) VARIANT_BOOL IPart7::TransferObjects ( const _variant_t & Objects, struct ILocalCoordinateSystem * Lcs, VARIANT_BOOL HoldPosition );
__declspec(implementation_key(7751)) VARIANT_BOOL IPart7::Load ( VARIANT_BOOL Full );
__declspec(implementation_key(7752)) VARIANT_BOOL IPart7::Unload ( VARIANT_BOOL Full );
__declspec(implementation_key(7753)) enum ksLoadStateEnum IPart7::GetLoadState ( );
__declspec(implementation_key(7754)) IModelObjectPtr IPart7::GetDefaultObject ( ksObj3dTypeEnum Type );
__declspec(implementation_key(7755)) VARIANT_BOOL IPart7::IsVariableNameValid ( _bstr_t Name );
__declspec(implementation_key(7756)) IVariable7Ptr IPart7::AddVariable ( _bstr_t Name, double Value, _bstr_t Note );
__declspec(implementation_key(7757)) VARIANT_BOOL IPart7::RebuildModel ( VARIANT_BOOL Redraw );
__declspec(implementation_key(7758)) enum ksPartAccessTypeEnum IPart7::GetReadOnly ( );
__declspec(implementation_key(7759)) void IPart7::PutReadOnly ( enum ksPartAccessTypeEnum PVal );
__declspec(implementation_key(7760)) VARIANT_BOOL IPart7::GetStaffVisible ( );
__declspec(implementation_key(7761)) void IPart7::PutStaffVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(7762)) VARIANT_BOOL IPart7::SaveAs ( _bstr_t PathName );
__declspec(implementation_key(7763)) IModelObjectPtr IPart7::FindObject ( struct IModelObject * Obj, struct IPart7 * SourcePart );
__declspec(implementation_key(7764)) void IPart7::PutCreateSpcObjects ( VARIANT_BOOL PVal );
__declspec(implementation_key(7765)) VARIANT_BOOL IPart7::GetCreateSpcObjects ( );
__declspec(implementation_key(7766)) void IPart7::PutIsLocal ( VARIANT_BOOL PVal );
__declspec(implementation_key(7767)) VARIANT_BOOL IPart7::GetIsLocal ( );
__declspec(implementation_key(7768)) IOpenDocumentParamPtr IPart7::GetOpenDocumentParam ( );
__declspec(implementation_key(7769)) IKompasDocument3DPtr IPart7::BeginEdit ( struct IOpenDocumentParam * Param );
__declspec(implementation_key(7770)) VARIANT_BOOL IPart7::EndEdit ( VARIANT_BOOL Rebuild );
__declspec(implementation_key(7771)) _variant_t IPart7::FindObjectsByPoint ( double X, double Y, double Z, VARIANT_BOOL FirstLevel );
__declspec(implementation_key(7772)) IHatchParamPtr IPart7::GetHatchParam ( );
__declspec(implementation_key(7773)) long IPart7::GetUniqueNum ( ksObj3dTypeEnum OType );
__declspec(implementation_key(7774)) void IPart7::PutUniqueNum ( ksObj3dTypeEnum OType, long Result );
__declspec(implementation_key(7775)) VARIANT_BOOL IPart7::ChangeObjectLinks ( const _variant_t & SourceObjs, const _variant_t & DestObjs, VARIANT_BOOL RebuildAll );
__declspec(implementation_key(7776)) VARIANT_BOOL IPart7::GetIsLayoutGeometry ( );
__declspec(implementation_key(7777)) void IPart7::PutIsLayoutGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(7778)) VARIANT_BOOL IPart7::GetIsBillet ( );
__declspec(implementation_key(7779)) void IPart7::PutIsBillet ( VARIANT_BOOL PVal );
__declspec(implementation_key(7780)) IPlacement3DPtr IPart7::GetPlacement ( );
__declspec(implementation_key(7781)) VARIANT_BOOL IPart7::UpdatePlacement ( VARIANT_BOOL Redraw );
__declspec(implementation_key(7782)) ISpecRough3DPtr IPart7::GetSpecRough ( );
__declspec(implementation_key(7783)) void IPart7::PutLeftHandedCS ( VARIANT_BOOL PVal );
__declspec(implementation_key(7784)) VARIANT_BOOL IPart7::GetLeftHandedCS ( );
__declspec(implementation_key(7785)) VARIANT_BOOL IPart7::MirroringPlacement ( ksObj3dTypeEnum Axis );
__declspec(implementation_key(7786)) VARIANT_BOOL IPart7::DestroySubassembly ( );
__declspec(implementation_key(7787)) double IPart7::GetMaxSag ( );
__declspec(implementation_key(7788)) IMateConstraints3DPtr IPart7::GetMateConstraints ( );
__declspec(implementation_key(7789)) IBody7Ptr IPart7::GetBodyById ( long BodyId );
__declspec(implementation_key(7790)) IUserFoldersPtr IPart7::GetUserFolders ( );
__declspec(implementation_key(7791)) void IPart7::PutToleranceRecalcType ( enum ksToleranceRecalcsEnum PVal );
__declspec(implementation_key(7792)) enum ksToleranceRecalcsEnum IPart7::GetToleranceRecalcType ( );
__declspec(implementation_key(7793)) void IPart7::PutUserToleranceRecalcId ( long PVal );
__declspec(implementation_key(7794)) long IPart7::GetUserToleranceRecalcId ( );
__declspec(implementation_key(7795)) void IPart7::PutUserToleranceRecalcName ( _bstr_t PVal );
__declspec(implementation_key(7796)) _bstr_t IPart7::GetUserToleranceRecalcName ( );
__declspec(implementation_key(7797)) void IPart7::PutUseDummy ( VARIANT_BOOL PVal );
__declspec(implementation_key(7798)) VARIANT_BOOL IPart7::GetUseDummy ( );
__declspec(implementation_key(7799)) void IPart7::PutDummyFileName ( _bstr_t PVal );
__declspec(implementation_key(7800)) _bstr_t IPart7::GetDummyFileName ( );
__declspec(implementation_key(7801)) long IPart7::GetDummyEmbodimentIndex ( );
__declspec(implementation_key(7802)) _bstr_t IPart7::GetDummyEmbodimentMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer );
__declspec(implementation_key(7803)) VARIANT_BOOL IPart7::SetDummyEmbodiment ( const _variant_t & Index );
__declspec(implementation_key(7804)) VARIANT_BOOL IPart7::UnloadEx ( enum ksLoadStateEnum Type );
__declspec(implementation_key(7805)) IKompasDocument3DPtr IPart7::OpenSourceDocument ( struct IOpenDocumentParam * Param );
__declspec(implementation_key(7806)) IZonesManagerPtr IPart7::GetZonesManager ( );
__declspec(implementation_key(7807)) void IPart7::PutInheritExclude ( VARIANT_BOOL PVal );
__declspec(implementation_key(7808)) VARIANT_BOOL IPart7::GetInheritExclude ( );
__declspec(implementation_key(7809)) long IPart7::GetPartsGroupNumber ( );
__declspec(implementation_key(7810)) void IPart7::PutPartsGroupNumber ( long PVal );
__declspec(implementation_key(7811)) VARIANT_BOOL IPart7::IsLocalResultExist ( VARIANT_BOOL Reqursive );
__declspec(implementation_key(7812)) void IPart7::PutRevealComposition ( VARIANT_BOOL PVal );
__declspec(implementation_key(7813)) VARIANT_BOOL IPart7::GetRevealComposition ( );
__declspec(implementation_key(7814)) void IPart7::PutInheritVisible ( VARIANT_BOOL PVal );
__declspec(implementation_key(7815)) VARIANT_BOOL IPart7::GetInheritVisible ( );
__declspec(implementation_key(7816)) VARIANT_BOOL IPart7::TransformPoint ( double * X, double * Y, double * Z, struct IPart7 * Part );
__declspec(implementation_key(7817)) VARIANT_BOOL IPart7::TransformPoints ( VARIANT * Points, struct IPart7 * Part );
__declspec(implementation_key(7818)) _variant_t IPart7::GetSummMatrix ( struct IPart7 * Part );
__declspec(implementation_key(7819)) IBody7Ptr IPart7::FindBody ( _bstr_t UniqueMetaObjectKey );
__declspec(implementation_key(7820)) _variant_t IPart7::GetSimilarInstances ( struct IPart7 * Part );
__declspec(implementation_key(7821)) IModelObjectPtr IPart7::FindSimilarObject ( struct IModelObject * Obj );
__declspec(implementation_key(7822)) IPart7Ptr IParts7::GetPart ( const _variant_t & Index );
__declspec(implementation_key(7823)) IPart7Ptr IParts7::AddFromFile ( _bstr_t FileName, VARIANT_BOOL ExternalFile, VARIANT_BOOL Redraw );
__declspec(implementation_key(7824)) IPart7Ptr IParts7::Add ( _bstr_t FileName, struct IModelObject * Plane );
__declspec(implementation_key(7825)) IPart7Ptr IParts7::CreateDocument ( enum DocumentTypeEnum Type, VARIANT_BOOL Local, VARIANT_BOOL Redraw );
__declspec(implementation_key(7826)) IPart7Ptr IParts7::CreateDocumentEx ( _bstr_t StartFileName, enum DocumentTypeEnum Type, VARIANT_BOOL Local, VARIANT_BOOL Redraw );
__declspec(implementation_key(7827)) IPart7Ptr IParts7::SaveAsDetail ( const _variant_t & Objects, struct ISaveAsDetailParam * Param );
__declspec(implementation_key(7828)) VARIANT_BOOL IParts7::MoveParts ( const _variant_t & Parts );
__declspec(implementation_key(7829)) IPart7Ptr IParts7::CreateSubAssembly ( const _variant_t & Parts, _bstr_t FileName );
__declspec(implementation_key(7830)) IPart7Ptr IParts7::FindPart ( _bstr_t UniqueMetaObjectKey, VARIANT_BOOL Reqursive );
__declspec(implementation_key(7831)) _bstr_t IEmbodiment::GetName ( );
__declspec(implementation_key(7832)) void IEmbodiment::PutName ( _bstr_t PVal );
__declspec(implementation_key(7833)) _bstr_t IEmbodiment::GetMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer );
__declspec(implementation_key(7834)) VARIANT_BOOL IEmbodiment::SetMarking ( enum ksVariantMarkingTypeEnum MarkingType, _bstr_t Marking );
__declspec(implementation_key(7835)) double IEmbodiment::GetMass ( );
__declspec(implementation_key(7836)) double IEmbodiment::GetDensity ( );
__declspec(implementation_key(7837)) _bstr_t IEmbodiment::GetMaterial ( );
__declspec(implementation_key(7838)) VARIANT_BOOL IEmbodiment::SetMaterial ( _bstr_t Name, double Density );
__declspec(implementation_key(7839)) VARIANT_BOOL IEmbodiment::Update ( );
__declspec(implementation_key(7840)) VARIANT_BOOL IEmbodiment::Delete ( );
__declspec(implementation_key(7841)) VARIANT_BOOL IEmbodiment::GetIsCurrent ( );
__declspec(implementation_key(7842)) void IEmbodiment::PutIsCurrent ( VARIANT_BOOL PVal );
__declspec(implementation_key(7843)) IEmbodimentPtr IEmbodiment::GetOwner ( );
__declspec(implementation_key(7844)) IEmbodimentPtr IEmbodiment::GetEmbodiment ( long Index );
__declspec(implementation_key(7845)) long IEmbodiment::GetEmbodimentsCount ( );
__declspec(implementation_key(7846)) ISpecRough3DPtr IEmbodiment::GetSpecRough ( );
__declspec(implementation_key(7847)) void IEmbodiment::PutLeftHandedCS ( VARIANT_BOOL PVal );
__declspec(implementation_key(7848)) VARIANT_BOOL IEmbodiment::GetLeftHandedCS ( );
__declspec(implementation_key(7849)) IPart7Ptr IEmbodiment::GetPart ( );
__declspec(implementation_key(7850)) _variant_t IEmbodimentsManager::GetEmbodimentsTree ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer, VARIANT_BOOL AddSpaces );
__declspec(implementation_key(7851)) _bstr_t IEmbodimentsManager::GetCurrentEmbodimentMarking ( enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer );
__declspec(implementation_key(7852)) long IEmbodimentsManager::GetCurrentEmbodimentIndex ( );
__declspec(implementation_key(7853)) VARIANT_BOOL IEmbodimentsManager::SetCurrentEmbodiment ( const _variant_t & Index );
__declspec(implementation_key(7854)) VARIANT_BOOL IEmbodimentsManager::AddEmbodiment ( const _variant_t & ParentIndex, VARIANT_BOOL Depended, _bstr_t BaseMarking, _bstr_t EmbodimentNumber, _bstr_t AdditionalNumber );
__declspec(implementation_key(7855)) VARIANT_BOOL IEmbodimentsManager::DeleteEmbodiment ( const _variant_t & Index );
__declspec(implementation_key(7856)) _bstr_t IEmbodimentsManager::GetEmbodimentMarking ( long Index, enum ksVariantMarkingTypeEnum MarkingType, VARIANT_BOOL AddSystemDelimer );
__declspec(implementation_key(7857)) VARIANT_BOOL IEmbodimentsManager::SetEmbodimentMarking ( long Index, enum ksVariantMarkingTypeEnum MarkingType, _bstr_t Marking );
__declspec(implementation_key(7858)) long IEmbodimentsManager::GetEmbodimentCount ( );
__declspec(implementation_key(7859)) IEmbodimentPtr IEmbodimentsManager::GetEmbodiment ( const _variant_t & Index );
__declspec(implementation_key(7860)) IEmbodimentPtr IEmbodimentsManager::GetTopEmbodiment ( );
__declspec(implementation_key(7861)) IEmbodimentPtr IEmbodimentsManager::GetCurrentEmbodiment ( );
__declspec(implementation_key(7862)) VARIANT_BOOL IEmbodimentsManager::AddMirrorEmbodiment ( const _variant_t & ParentIndex, _bstr_t BaseMarking, _bstr_t EmbodimentNumber, _bstr_t AdditionalNumber );
__declspec(implementation_key(7863)) _bstr_t IEmbodimentsManager::GetEmbodimentAdditionalNumber ( );
__declspec(implementation_key(7864)) void IEmbodimentsManager::PutEmbodimentAdditionalNumber ( _bstr_t PVal );
__declspec(implementation_key(7865)) IEmbodimentPtr IEmbodimentsManager::FindEmbodiment ( _bstr_t UniqueMetaObjectKey );
__declspec(implementation_key(7866)) void IMate3DDependentPosition::PutBySample ( VARIANT_BOOL PVal );
__declspec(implementation_key(7867)) VARIANT_BOOL IMate3DDependentPosition::GetBySample ( );
__declspec(implementation_key(7868)) void IMate3DDependentPosition::PutSampleObject1 ( struct IPart7 * PVal );
__declspec(implementation_key(7869)) IPart7Ptr IMate3DDependentPosition::GetSampleObject1 ( );
__declspec(implementation_key(7870)) void IMate3DDependentPosition::PutSampleObject2 ( struct IPart7 * PVal );
__declspec(implementation_key(7871)) IPart7Ptr IMate3DDependentPosition::GetSampleObject2 ( );
__declspec(implementation_key(7872)) void IKompasDocument3D1::PutHideLayoutGeometry ( VARIANT_BOOL PVal );
__declspec(implementation_key(7873)) VARIANT_BOOL IKompasDocument3D1::GetHideLayoutGeometry ( );
__declspec(implementation_key(7874)) void IKompasDocument3D1::PutEditObject ( struct IFeature7 * Result );
__declspec(implementation_key(7875)) IFeature7Ptr IKompasDocument3D1::GetEditObject ( );
__declspec(implementation_key(7876)) IDocument3DManagerPtr IKompasDocument3D1::GetDocument3DManager ( );
__declspec(implementation_key(7877)) ISpecRough3DPtr IKompasDocument3D1::GetSpecRough ( );
__declspec(implementation_key(7878)) VARIANT_BOOL IKompasDocument3D1::ClearUndo ( );
__declspec(implementation_key(7879)) IMateConstraints3DPtr IKompasDocument3D1::GetMateConstraints ( );
__declspec(implementation_key(7880)) VARIANT_BOOL IKompasDocument3D1::ExcludeObjects ( const _variant_t & Objects, VARIANT_BOOL Excl );
__declspec(implementation_key(7881)) VARIANT_BOOL IKompasDocument3D1::ExecuteProcessOfInsertComponentFromFile ( _bstr_t FileName, enum ProcessTypeEnum ProcessType );
__declspec(implementation_key(7882)) IProcess3DPtr IKompasDocument3D1::GetLibProcess ( enum ksProcess3DTypeEnum ProcessType );
__declspec(implementation_key(7883)) _variant_t IKompasDocument3D1::PickModelObjects ( const _variant_t & PickRay, struct IFindObject3DParameters * FilterParam );
__declspec(implementation_key(7884)) IModelObjectPtr IKompasDocument3D1::FindNearestObject ( const _variant_t & PickRay, struct IFindObject3DParameters * FilterParam );
__declspec(implementation_key(7885)) _variant_t IKompasDocument3D1::GetIntervalVariables ( );
__declspec(implementation_key(7886)) IVariable7Ptr IKompasDocument3D1::AddIntervalVariable ( _bstr_t Name, double FirstValue, double SecondValue );
__declspec(implementation_key(7887)) IVariable7Ptr IKompasDocument3D1::GetIntervalVariable ( const _variant_t & Index );
__declspec(implementation_key(7888)) _variant_t IKompasDocument3D1::GetUserFuncVariables ( );
__declspec(implementation_key(7889)) IVariable7Ptr IKompasDocument3D1::AddUserFuncVariable ( _bstr_t Name, _bstr_t Expression );
__declspec(implementation_key(7890)) IVariable7Ptr IKompasDocument3D1::GetUserFuncVariable ( const _variant_t & Index );
__declspec(implementation_key(7891)) IKompasAPIObjectPtr IKompasDocument3D1::FindObjectByAssociationGeometry ( struct IKompasAPIObject * Geometry );
__declspec(implementation_key(7892)) VARIANT_BOOL IKompasDocument3D1::SetHiddenObjects ( const _variant_t & Objects, VARIANT_BOOL Visible );
__declspec(implementation_key(7893)) VARIANT_BOOL IKompasDocument3D1::CompleteRebuildDocument ( );
__declspec(implementation_key(7894)) ILayers3DPtr IDocument3DManager::GetLayers3D ( );
__declspec(implementation_key(7895)) ILayerGroups3DPtr IDocument3DManager::GetLayersGroups3D ( );
__declspec(implementation_key(7896)) ILayerGroups3DPtr IDocument3DManager::GetLayersDynamicGroups3D ( );
__declspec(implementation_key(7897)) VARIANT_BOOL IDocument3DManager::Update ( );
__declspec(implementation_key(7898)) ILayers3DPtr IDocument3DManager::GetPartsGroups ( );
__declspec(implementation_key(7899)) ILayerGroup3DPtr ILayerGroups3D::GetLayerGroup3D ( const _variant_t & Index );
__declspec(implementation_key(7900)) ILayerGroup3DPtr ILayerGroups3D::Add ( );
__declspec(implementation_key(7901)) ILayerGroup3DPtr ILayerGroup3D::GetOwnerGroup ( );
__declspec(implementation_key(7902)) ILayerGroups3DPtr ILayerGroup3D::GetLayerGroups ( );
__declspec(implementation_key(7903)) ILayers3DPtr ILayerGroup3D::GetLayers ( );
__declspec(implementation_key(7904)) void ILayerGroup3D::PutName ( _bstr_t PVal );
__declspec(implementation_key(7905)) _bstr_t ILayerGroup3D::GetName ( );
__declspec(implementation_key(7906)) VARIANT_BOOL ILayerGroup3D::Delete ( );
__declspec(implementation_key(7907)) double ILayerGroup3D::GetUniqueId ( );
__declspec(implementation_key(7908)) ILayerFilterConditionsPtr ILayerGroup3D::GetLayerFilterConditions ( );
__declspec(implementation_key(7909)) void IBuildingAxis::PutDoubleMark ( VARIANT_BOOL PVal );
__declspec(implementation_key(7910)) VARIANT_BOOL IBuildingAxis::GetDoubleMark ( );
__declspec(implementation_key(7911)) void IBuildingAxis::PutMarkSize ( double PVal );
__declspec(implementation_key(7912)) double IBuildingAxis::GetMarkSize ( );
__declspec(implementation_key(7913)) void IBuildingAxis::PutDottedLength ( double PVal );
__declspec(implementation_key(7914)) double IBuildingAxis::GetDottedLength ( );
__declspec(implementation_key(7915)) void IBuildingAxis::PutInterval ( double PVal );
__declspec(implementation_key(7916)) double IBuildingAxis::GetInterval ( );
__declspec(implementation_key(7917)) void IBuildingAxis::PutStroke ( double PVal );
__declspec(implementation_key(7918)) double IBuildingAxis::GetStroke ( );
__declspec(implementation_key(7919)) ITextPtr IBuildingAxis::GetText ( );
__declspec(implementation_key(7920)) ITextPtr IBuildingAxis::GetTextBefore ( );
__declspec(implementation_key(7921)) ITextPtr IBuildingAxis::GetTextAfter ( );
__declspec(implementation_key(7922)) void IBuildingAxis::PutAutoStroke ( VARIANT_BOOL PVal );
__declspec(implementation_key(7923)) VARIANT_BOOL IBuildingAxis::GetAutoStroke ( );
__declspec(implementation_key(7924)) VARIANT_BOOL IBuildingAxis::GetInsertionPoints ( VARIANT_BOOL First, VARIANT * Points, VARIANT * Directions, VARIANT * Nodes );
__declspec(implementation_key(7925)) IMarkNodePtr IBuildingAxis::GetNodeByPoint ( double X, double Y, double Limit );
__declspec(implementation_key(7926)) IMarkNodePtr IBuildingAxis::AddNodeByPoint ( enum ksMarkNodeEnum Type, double X, double Y );
__declspec(implementation_key(7927)) IBuildingAxisPtr IBuildingAxes::GetBuildingAxis ( const _variant_t & Index );
__declspec(implementation_key(7928)) IBuildingAxisPtr IBuildingAxes::Add ( enum DrawingObjectTypeEnum AxisType );
__declspec(implementation_key(7929)) IBuildingAxesPtr IBuildingContainer::GetBuildingAxes ( );
__declspec(implementation_key(7930)) IMarksPtr IBuildingContainer::GetMarks ( );
__declspec(implementation_key(7931)) ICutUnitMarkingsPtr IBuildingContainer::GetCutUnitMarkings ( );
__declspec(implementation_key(7932)) IUnitMarkingsPtr IBuildingContainer::GetUnitMarkings ( );
__declspec(implementation_key(7933)) IMultiTextLeadersPtr IBuildingContainer::GetMultiTextLeaders ( );
__declspec(implementation_key(7934)) IUnitNumbersPtr IBuildingContainer::GetUnitNumbers ( );
__declspec(implementation_key(7935)) IBracesPtr IBuildingContainer::GetBraces ( );
__declspec(implementation_key(7936)) ICutLinesPtr IBuildingContainer::GetBuildingCutLines ( );
__declspec(implementation_key(7937)) void IMarkNode::PutMarkType ( enum ksMarkNodeEnum Val );
__declspec(implementation_key(7938)) enum ksMarkNodeEnum IMarkNode::GetMarkType ( );
__declspec(implementation_key(7939)) void IMarkNode::PutDoubleMark ( VARIANT_BOOL PVal );
__declspec(implementation_key(7940)) VARIANT_BOOL IMarkNode::GetDoubleMark ( );
__declspec(implementation_key(7941)) void IMarkNode::PutRefLength ( double PVal );
__declspec(implementation_key(7942)) double IMarkNode::GetRefLength ( );
__declspec(implementation_key(7943)) ITextPtr IMarkNode::GetText ( );
__declspec(implementation_key(7944)) IMarkNodesPtr IMarkNode::GetMarkNodes ( VARIANT_BOOL Left );
__declspec(implementation_key(7945)) VARIANT_BOOL IMarkNode::Delete ( );
__declspec(implementation_key(7946)) VARIANT_BOOL IMarkNode::GetInsertionPoints ( VARIANT_BOOL LeftJut, VARIANT * Points, VARIANT * Directions );
__declspec(implementation_key(7947)) IMarkNodePtr IMarkNodes::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7948)) IMarkNodePtr IMarkNodes::Add ( enum ksMarkNodeEnum Type, const _variant_t & Index );
__declspec(implementation_key(7949)) VARIANT_BOOL IMarkNodes::Clear ( );
__declspec(implementation_key(7950)) void IStraightAxis::PutX1 ( double PVal );
__declspec(implementation_key(7951)) double IStraightAxis::GetX1 ( );
__declspec(implementation_key(7952)) void IStraightAxis::PutY1 ( double PVal );
__declspec(implementation_key(7953)) double IStraightAxis::GetY1 ( );
__declspec(implementation_key(7954)) void IStraightAxis::PutX2 ( double PVal );
__declspec(implementation_key(7955)) double IStraightAxis::GetX2 ( );
__declspec(implementation_key(7956)) void IStraightAxis::PutY2 ( double PVal );
__declspec(implementation_key(7957)) double IStraightAxis::GetY2 ( );
__declspec(implementation_key(7958)) void IStraightAxis::PutLength ( double PVal );
__declspec(implementation_key(7959)) double IStraightAxis::GetLength ( );
__declspec(implementation_key(7960)) void IStraightAxis::PutAngle ( double PVal );
__declspec(implementation_key(7961)) double IStraightAxis::GetAngle ( );
__declspec(implementation_key(7962)) IAxisJutPtr IStraightAxis::GetJut ( VARIANT_BOOL First );
__declspec(implementation_key(7963)) IMarkNodesPtr IStraightAxis::GetMarkNodes ( );
__declspec(implementation_key(7964)) void IArcAxis::PutXc ( double PVal );
__declspec(implementation_key(7965)) double IArcAxis::GetXc ( );
__declspec(implementation_key(7966)) void IArcAxis::PutYc ( double PVal );
__declspec(implementation_key(7967)) double IArcAxis::GetYc ( );
__declspec(implementation_key(7968)) void IArcAxis::PutX1 ( double PVal );
__declspec(implementation_key(7969)) double IArcAxis::GetX1 ( );
__declspec(implementation_key(7970)) void IArcAxis::PutY1 ( double PVal );
__declspec(implementation_key(7971)) double IArcAxis::GetY1 ( );
__declspec(implementation_key(7972)) void IArcAxis::PutX2 ( double PVal );
__declspec(implementation_key(7973)) double IArcAxis::GetX2 ( );
__declspec(implementation_key(7974)) void IArcAxis::PutY2 ( double PVal );
__declspec(implementation_key(7975)) double IArcAxis::GetY2 ( );
__declspec(implementation_key(7976)) void IArcAxis::PutAngle1 ( double PVal );
__declspec(implementation_key(7977)) double IArcAxis::GetAngle1 ( );
__declspec(implementation_key(7978)) void IArcAxis::PutAngle2 ( double PVal );
__declspec(implementation_key(7979)) double IArcAxis::GetAngle2 ( );
__declspec(implementation_key(7980)) void IArcAxis::PutRadius ( double PVal );
__declspec(implementation_key(7981)) double IArcAxis::GetRadius ( );
__declspec(implementation_key(7982)) void IArcAxis::PutDirection ( VARIANT_BOOL PVal );
__declspec(implementation_key(7983)) VARIANT_BOOL IArcAxis::GetDirection ( );
__declspec(implementation_key(7984)) IAxisJutPtr IArcAxis::GetJut ( VARIANT_BOOL First );
__declspec(implementation_key(7985)) IMarkNodesPtr IArcAxis::GetMarkNodes ( );
__declspec(implementation_key(7986)) void IArcAxis::PutX3 ( double PVal );
__declspec(implementation_key(7987)) double IArcAxis::GetX3 ( );
__declspec(implementation_key(7988)) void IArcAxis::PutY3 ( double PVal );
__declspec(implementation_key(7989)) double IArcAxis::GetY3 ( );
__declspec(implementation_key(7990)) void ICircleAxis::PutXc ( double PVal );
__declspec(implementation_key(7991)) double ICircleAxis::GetXc ( );
__declspec(implementation_key(7992)) void ICircleAxis::PutYc ( double PVal );
__declspec(implementation_key(7993)) double ICircleAxis::GetYc ( );
__declspec(implementation_key(7994)) void ICircleAxis::PutMarkAngle ( double PVal );
__declspec(implementation_key(7995)) double ICircleAxis::GetMarkAngle ( );
__declspec(implementation_key(7996)) void ICircleAxis::PutRadius ( double PVal );
__declspec(implementation_key(7997)) double ICircleAxis::GetRadius ( );
__declspec(implementation_key(7998)) void ICircleAxis::PutMarkOn ( VARIANT_BOOL PVal );
__declspec(implementation_key(7999)) VARIANT_BOOL ICircleAxis::GetMarkOn ( );
__declspec(implementation_key(8000)) IMarkNodePtr ICircleAxis::GetBaseMarkNode ( );
#pragma stop_map_region

#pragma pack(pop)
